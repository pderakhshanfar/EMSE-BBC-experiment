/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:40:08 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = new Locale("R");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(16, "=mKpM+)QI~}T1!`n");
      FastDateParser fastDateParser0 = new FastDateParser("h|`wmkkP|0.,-{S(", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "\" does not match ");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("\" does not match ", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-14), "\" does not match ");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("\" does not match ", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=\" does not match ,offset=-14,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "GMTPRT", 1, 1, 1, 1, 1, 1, 1, 1);
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMTCST", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("GMTPRT", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("22O");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("GHne&m=ld1GAdg", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(1751);
      assertEquals(3651, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("D;i@]P>j<Mw|R4yO/+", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2907));
      assertEquals((-907), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.forLanguageTag("22O");
      FastDateParser fastDateParser0 = new FastDateParser("22O", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-425));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      Locale locale0 = new Locale("R");
      FastDateParser fastDateParser0 = new FastDateParser("22O", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("Greenwich Mean Time", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("22O");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"22O\" does not match (\u897F\u5143|\u897F\u5143|\u897F\u5143\u524D|\u897F\u5143\u524D)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("i,dKL4 gnWCG=");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("W(^", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("</-F])W_7/yy\"", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(121);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("</-F])W_7/yy\"", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      Locale locale0 = new Locale("R");
      FastDateParser fastDateParser0 = new FastDateParser("22O", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("D;i@]P>j<Mw|R4yO/+", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3126, "_yZ{0v8mYZu*ti1U8");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("_yZ{0v8mYZu*ti1U8", simpleTimeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(",");
      Locale locale0 = Locale.forLanguageTag("");
      FastDateParser fastDateParser0 = new FastDateParser("{EZ[)AZ", timeZone0, locale0);
      assertEquals("{EZ[)AZ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(44, "JST");
      FastDateParser fastDateParser0 = new FastDateParser("zeQ\"[KqR{5@i3tOiC", simpleTimeZone0, locale0);
      Date date0 = fastDateParser0.parse("JST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("zeQ\"[KqR{5@i3tOiC", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("GMTIET");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("`)8KRNvX{EZn! -f23");
      Locale locale0 = Locale.forLanguageTag("");
      FastDateParser fastDateParser0 = new FastDateParser("`)8KRNvX{EZn! -f23", timeZone0, locale0);
      assertEquals("`)8KRNvX{EZn! -f23", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("&x?");
      Locale locale0 = new Locale(",");
      FastDateParser fastDateParser0 = new FastDateParser("^M\u0006j7zPpw", timeZone0, locale0);
      assertEquals("^M\u0006j7zPpw", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(">\"#9aC75gbCy<eg", timeZone0, locale0);
      assertEquals(">\"#9aC75gbCy<eg", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "GMTPRT", 1, 1, 1, 1, 1, 1, 1, 1);
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("Kh;G)0", simpleTimeZone0, locale0);
      assertEquals("Kh;G)0", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("D:^dIw.~9", timeZone0, locale0);
      assertEquals("D:^dIw.~9", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "\" does not match ");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("9=3oP=$^jJd>&V", simpleTimeZone0, locale0);
      assertEquals("9=3oP=$^jJd>&V", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      TimeZone timeZone0 = TimeZone.getTimeZone(" is not a supported timezone name");
      FastDateParser fastDateParser0 = new FastDateParser("m8!wO':e{T1~ ", timeZone0, locale0);
      assertEquals("m8!wO':e{T1~ ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(16, "=mKpM+)QI~}T1!`n");
      FastDateParser fastDateParser0 = new FastDateParser("7G=<? #KyDY[nuX-", simpleTimeZone0, locale0);
      assertEquals("7G=<? #KyDY[nuX-", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(14, "GMTAET");
      FastDateParser fastDateParser0 = new FastDateParser("6\"P;$|^t4F rd(NwQ", simpleTimeZone0, locale0);
      assertEquals("6\"P;$|^t4F rd(NwQ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(108, "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      FastDateParser fastDateParser0 = new FastDateParser("4ET3+[fel4,\"w4Gg-", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("@bJ#'Qd+YTR;", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = new Locale("R");
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("_\"(s3?ytK", timeZone0, locale0);
      assertEquals("_\"(s3?ytK", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      Locale locale0 = Locale.forLanguageTag("");
      FastDateParser fastDateParser0 = new FastDateParser("22O", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[22O,,]", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("q", "org.apache.commons.lang3.time.FastDateParser$5", "kQ");
      FastDateParser fastDateParser0 = new FastDateParser("1W(DeIB1", timeZone0, locale0);
      assertEquals("1W(DeIB1", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(16, "=mKpM+)QI~}1!`n");
      FastDateParser fastDateParser0 = new FastDateParser("h|`wmk0P|0.,-{S?", simpleTimeZone0, locale0);
      assertEquals("h|`wmk0P|0.,-{S?", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("/;si|DN^3~r4p", timeZone0, locale0);
      assertEquals("/;si|DN^3~r4p", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("22O");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("K.{w@B@ZyK|@0", timeZone0, locale0);
      assertEquals("K.{w@B@ZyK|@0", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("-l3m", timeZone0, locale0);
      assertEquals("-l3m", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(",");
      Locale locale0 = Locale.forLanguageTag("");
      FastDateParser fastDateParser0 = new FastDateParser(",", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(14);
      Object object0 = fastDateParser0.parseObject("GegnT=:$k-5}&dyj$=>", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(",");
      Locale locale0 = new Locale(",", ",");
      FastDateParser fastDateParser0 = new FastDateParser("s*+", timeZone0, locale0);
      assertEquals("s*+", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("yp<;i&*7~9", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parseObject("89*>4Y.'~j@87>", parsePosition0);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Locale locale0 = Locale.UK;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("MMM5:183s(gT", timeZone0, locale0);
      assertEquals("MMM5:183s(gT", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(20, "^/4)#\"LXB");
      FastDateParser fastDateParser0 = new FastDateParser("?{Pe$!wazM", simpleTimeZone0, locale0);
      assertEquals("?{Pe$!wazM", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(39, "h{R,-'BP1zilz'H2vL");
      Locale locale0 = new Locale("h{R,-'BP1zilz'H2vL");
      FastDateParser fastDateParser0 = new FastDateParser("$@6Vs7jl#hk8')", simpleTimeZone0, locale0);
      assertEquals("$@6Vs7jl#hk8')", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("  #(vigngDs6/@m", timeZone0, locale0);
      assertEquals("  #(vigngDs6/@m", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("GMT", timeZone0, locale0);
      try { 
        fastDateParser0.parse("GMT");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"GMT\" does not match (\u7D00\u5143\u524D|\u7D00\u5143\u524D|\u897F\u66A6|\u897F\u66A6)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTIET");
      Locale locale0 = new Locale("zeQ\"[KqR{5@i3tOiC", "zeQ\"[KqR{5@i3tOiC");
      FastDateParser fastDateParser0 = new FastDateParser("E}zUdPw2@I[", timeZone0, locale0);
      try { 
        fastDateParser0.parse("GMTJST");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"GMTJST\" does not match (Fri|Friday|Mon|Monday|Sat|Saturday|Sun|Sunday|Thu|Thursday|Tue|Tuesday|Wed|Wednesday)\\}(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre\\s*+Time|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistan\\s*+Time|AFT|AKDT|AKST|Alaska\\s*+Daylight\\s*+Time|Alaska\\s*+Standard\\s*+Time|Alma-Ata\\s*+Time|ALMT|Amazon\\s*+Time|AMT|Anadyr\\s*+Time|ANAT|Aqtau\\s*+Time|Aqtobe\\s*+Time|AQTT|Arabia\\s*+Standard\\s*+Time|Argentine\\s*+Time|Armenia\\s*+Time|ART|AST|Atlantic\\s*+Daylight\\s*+Time|Atlantic\\s*+Standard\\s*+Time|Australian\\s*+Central\\s*+Daylight\\s*+Time\\s*+\\(South\\s*+Australia\\)|Australian\\s*+Central\\s*+Daylight\\s*+Time\\s*+\\(South\\s*+Australia/New\\s*+South\\s*+Wales\\)|Australian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(Northern\\s*+Territory\\)|Australian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(South\\s*+Australia\\)|Australian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(South\\s*+Australia/New\\s*+South\\s*+Wales\\)|Australian\\s*+Central\\s*+Western\\s*+Standard\\s*+Time|Australian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(New\\s*+South\\s*+Wales\\)|Australian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(Tasmania\\)|Australian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(Victoria\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(New\\s*+South\\s*+Wales\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Queensland\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Tasmania\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Victoria\\)|Australian\\s*+Western\\s*+Standard\\s*+Time|AWST|Azerbaijan\\s*+Time|Azores\\s*+Summer\\s*+Time|Azores\\s*+Time|AZOST|AZOT|AZT|Bangladesh\\s*+Time|BDT|Bhutan\\s*+Time|BNT|Bolivia\\s*+Time|BOT|Bougainville\\s*+Standard\\s*+Time|Brasilia\\s*+Time|British\\s*+Summer\\s*+Time|BRT|Brunei\\s*+Time|BST|BTT|Cape\\s*+Verde\\s*+Time|CAT|CCT|CDT|Central\\s*+African\\s*+Time|Central\\s*+Daylight\\s*+Time|Central\\s*+European\\s*+Summer\\s*+Time|Central\\s*+European\\s*+Time|Central\\s*+Indonesia\\s*+Time|Central\\s*+Standard\\s*+Time|CEST|CET|CHADT|Chamorro\\s*+Standard\\s*+Time|CHAST|Chatham\\s*+Daylight\\s*+Time|Chatham\\s*+Standard\\s*+Time|Chile\\s*+Summer\\s*+Time|Chile\\s*+Time|China\\s*+Standard\\s*+Time|Choibalsan\\s*+Time|CHOT|Christmas\\s*+Island\\s*+Time|ChST|CHUT|Chuuk\\s*+Time|CKT|CLST|CLT|Cocos\\s*+Islands\\s*+Time|Colombia\\s*+Time|Cook\\s*+Is\\.\\s*+Time|Coordinated\\s*+Universal\\s*+Time|COT|CST|Cuba\\s*+Daylight\\s*+Time|Cuba\\s*+Standard\\s*+Time|CVT|CXT|Davis\\s*+Time|DAVT|DDUT|Dumont-d'Urville\\s*+Time|EASST|EAST|East\\s*+Indonesia\\s*+Time|Easter\\s*+Is\\.\\s*+Summer\\s*+Time|Easter\\s*+Is\\.\\s*+Time|Eastern\\s*+African\\s*+Time|Eastern\\s*+Daylight\\s*+Time|Eastern\\s*+European\\s*+Summer\\s*+Time|Eastern\\s*+European\\s*+Time|Eastern\\s*+Greenland\\s*+Summer\\s*+Time|Eastern\\s*+Greenland\\s*+Time|Eastern\\s*+Standard\\s*+Time|EAT|ECT|Ecuador\\s*+Time|EDT|EEST|EET|EGST|EGT|EST|Falkland\\s*+Is\\.\\s*+Time|Fernando\\s*+de\\s*+Noronha\\s*+Time|Fiji\\s*+Summer\\s*+Time|Fiji\\s*+Time|FJST|FJT|FKT|FNT|French\\s*+Guiana\\s*+Time|French\\s*+Southern\\s*+&\\s*+Antarctic\\s*+Lands\\s*+Time|Galapagos\\s*+Time|GALT|Gambier\\s*+Time|GAMT|Georgia\\s*+Time|GET|GFT|Ghana\\s*+Mean\\s*+Time|Gilbert\\s*+Is\\.\\s*+Time|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Greenwich\\s*+Mean\\s*+Time|GST|Gulf\\s*+Standard\\s*+Time|Guyana\\s*+Time|GYT|Hawaii\\s*+Daylight\\s*+Time|Hawaii\\s*+Standard\\s*+Time|HDT|HKT|Hong\\s*+Kong\\s*+Time|Hovd\\s*+Time|HOVT|HST|ICT|IDT|India\\s*+Standard\\s*+Time|Indian\\s*+Ocean\\s*+Territory\\s*+Time|Indochina\\s*+Time|IOT|Iran\\s*+Daylight\\s*+Time|Iran\\s*+Standard\\s*+Time|IRDT|Irish\\s*+Summer\\s*+Time|IRKT|Irkutsk\\s*+Time|IRST|Israel\\s*+Daylight\\s*+Time|Israel\\s*+Standard\\s*+Time|IST|Japan\\s*+Standard\\s*+Time|JST|KGT|Kirgizstan\\s*+Time|Korea\\s*+Standard\\s*+Time|Kosrae\\s*+Time|KOST|Kostanay\\s*+Standard\\s*+Time|Krasnoyarsk\\s*+Time|KRAT|KST|LHDT|LHST|Line\\s*+Is\\.\\s*+Time|LINT|Lord\\s*+Howe\\s*+Daylight\\s*+Time|Lord\\s*+Howe\\s*+Standard\\s*+Time|Macquarie\\s*+Island\\s*+Daylight\\s*+Time|Macquarie\\s*+Island\\s*+Standard\\s*+Time|Magadan\\s*+Time|MAGT|Malaysia\\s*+Time|Maldives\\s*+Time|Marquesas\\s*+Time|Marshall\\s*+Islands\\s*+Time|MART|Mauritius\\s*+Time|Mawson\\s*+Time|MAWT|MDT|MEST|MET|MHT|Middle\\s*+Europe\\s*+Summer\\s*+Time|Middle\\s*+Europe\\s*+Time|MIDT|MIST|MMT|Moscow\\s*+Standard\\s*+Time|Mountain\\s*+Daylight\\s*+Time|Mountain\\s*+Standard\\s*+Time|MSK|MST|MUT|MVT|Myanmar\\s*+Time|MYT|Nauru\\s*+Time|NCT|NDT|Nepal\\s*+Time|New\\s*+Caledonia\\s*+Time|New\\s*+Zealand\\s*+Daylight\\s*+Time|New\\s*+Zealand\\s*+Standard\\s*+Time|Newfoundland\\s*+Daylight\\s*+Time|Newfoundland\\s*+Standard\\s*+Time|NFST|NFT|Niue\\s*+Time|Norfolk\\s*+Summer\\s*+Time|Norfolk\\s*+Time|Novosibirsk\\s*+Time|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|Omsk\\s*+Time|OMST|Oral\\s*+Time|ORAT|Pacific\\s*+Daylight\\s*+Time|Pacific\\s*+Standard\\s*+Time|Pakistan\\s*+Time|Palau\\s*+Time|Papua\\s*+New\\s*+Guinea\\s*+Time|Paraguay\\s*+Summer\\s*+Time|Paraguay\\s*+Time|PDT|Peru\\s*+Time|PET|Petropavlovsk-Kamchatski\\s*+Time|PETT|PGT|Philippines\\s*+Standard\\s*+Time|Phoenix\\s*+Is\\.\\s*+Time|PHOT|Pierre\\s*+&\\s*+Miquelon\\s*+Daylight\\s*+Time|Pierre\\s*+&\\s*+Miquelon\\s*+Standard\\s*+Time|Pitcairn\\s*+Standard\\s*+Time|PKT|PMDT|PMST|Pohnpei\\s*+Time|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda\\s*+Time|RET|Reunion\\s*+Time|Rothera\\s*+Time|ROTT|Sakhalin\\s*+Time|SAKT|Samara\\s*+Time|Samoa\\s*+Standard\\s*+Time|SAMT|SAST|SBT|SCT|Seychelles\\s*+Time|SGT|Singapore\\s*+Time|Solomon\\s*+Is\\.\\s*+Time|South\\s*+Africa\\s*+Standard\\s*+Time|South\\s*+Georgia\\s*+Standard\\s*+Time|Srednekolymsk\\s*+Time|SRET|SRT|SST|Suriname\\s*+Time|SYOT|Syowa\\s*+Time|Tahiti\\s*+Time|TAHT|Tajikistan\\s*+Time|TFT|Timor-Leste\\s*+Time|TJT|TKT|TLT|TMT|Tokelau\\s*+Time|Tonga\\s*+Time|TOT|TRT|Turkey\\s*+Time|Turkmenistan\\s*+Time|Tuvalu\\s*+Time|TVT|Ulaanbaatar\\s*+Time|ULAT|Uruguay\\s*+Time|Ust-Nera\\s*+Time|UTC|UYT|Uzbekistan\\s*+Time|UZT|Vanuatu\\s*+Time|Venezuela\\s*+Time|VET|Vladivostok\\s*+Time|VLAT|VOST|Vostok\\s*+Time|VUT|Wake\\s*+Time|WAKT|Wallis\\s*+&\\s*+Futuna\\s*+Time|WAT|WEST|West\\s*+Indonesia\\s*+Time|West\\s*+Samoa\\s*+Daylight\\s*+Time|West\\s*+Samoa\\s*+Standard\\s*+Time|Western\\s*+African\\s*+Time|Western\\s*+European\\s*+Summer\\s*+Time|Western\\s*+European\\s*+Time|Western\\s*+Greenland\\s*+Summer\\s*+Time|Western\\s*+Greenland\\s*+Time|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|Xinjiang\\s*+Standard\\s*+Time|XJT|YAKT|Yakutsk\\s*+Time|Yekaterinburg\\s*+Time|YEKT)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTIET");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("+F[^eSn{!C", timeZone0, locale0);
      Locale locale1 = Locale.ITALY;
      FastDateParser fastDateParser1 = new FastDateParser("+F[^eSn{!C", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(103, "=mKpM+)QI~}T1!`n");
      FastDateParser fastDateParser0 = new FastDateParser("=mKpM+)QI~}T1!`n", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("=mKpM+)QI~}T1!`n", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(44, "=mKmMY)QI~}1!`n");
      FastDateParser fastDateParser0 = new FastDateParser("h|`wCk0P|0.,-{S?", simpleTimeZone0, locale0);
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser1 = new FastDateParser("st33(\"hQmA3Dx3X;3#", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(20, "^/4)#\"LXB");
      FastDateParser fastDateParser0 = new FastDateParser("^/4)#\"LXB", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals("\" does not match ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      TimeZone timeZone0 = TimeZone.getTimeZone(" is not a supported timezone name");
      FastDateParser fastDateParser0 = new FastDateParser(" is not a supported timezone name", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("", "");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("hf?*|7Kfi%MOP0V)J", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("56k] Tr9J.3Po+isp");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("hf?*|7Kfi%MOP0V)J", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\\p{IsNd}++)", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("@bJ#'Qd+YTR;", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("@bJ#'Qd+YTR;");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale locale0 = new Locale("R");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(16, "=mKpM+)QI~}T1!`n");
      FastDateParser fastDateParser0 = new FastDateParser("h|`wmkkP|0.,-{S(", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("r", locale1.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("</-F])W_7/yy\"", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("</-F])W_7/yy\"", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "} .#`?Tv(NV8>f");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("\" does not match ", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("st33(\"hQmA3Dx3X;3#", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("8fczE", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("89*>4.'~j@87");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("%@=9aMkaHv", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("i,dKL4 gnWCG=");
      Locale locale0 = Locale.forLanguageTag("(The ");
      FastDateParser fastDateParser0 = new FastDateParser("&Wz)f>CUp:t+5w6FHu", timeZone0, locale0);
      assertEquals("&Wz)f>CUp:t+5w6FHu", fastDateParser0.getPattern());
  }
}
