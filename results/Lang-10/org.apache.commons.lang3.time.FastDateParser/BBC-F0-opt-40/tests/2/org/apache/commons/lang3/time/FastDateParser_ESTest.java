/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 09:29:32 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("%?UUZds/%j'rao");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("]t[(NBpqNLh", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(11);
      Object object0 = fastDateParser0.parseObject("(p{IsNd}++)", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("/", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("/", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("zf{TUpc6csg<P8h3v", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "", 1, 1, 1, 2729, 2729, 2729, 0, 3, 41, 1, 3);
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("HXGFU}.-MOMJj%t/B)", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-437), "d\"&");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("d\"&", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("d\"&", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("'H3v$rD 'M5;");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("ko}|Jf7`=onwt", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-5119));
      assertEquals((-3119), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("72z@U", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1679));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(";w5Oj>O");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser(";w5Oj>O", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("/", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1266));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("AET", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("%?UUZds/%j'rao");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(":H3v$rD 3M5;", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("d", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("72z@U", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1273, "{");
      Locale locale0 = new Locale("-wv");
      FastDateParser fastDateParser0 = new FastDateParser("Gaf^Yf*r['*X", simpleTimeZone0, locale0);
      assertEquals("Gaf^Yf*r['*X", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("a+$W=", timeZone0, locale0);
      assertEquals("a+$W=", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("y[_ZL*v5W)C", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(888);
      parsePosition0.setIndex(0);
      Date date0 = fastDateParser0.parse(";w5Oj>O", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("zf{gTUpc6cs%g<P8hlv", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("AST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("zf{gTc6cs%-u<P8hv", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("GMTCTT", parsePosition0);
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
      assertEquals(3, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("`0M$Q6~ W*n:,kS5", timeZone0, locale0);
      assertEquals("`0M$Q6~ W*n:,kS5", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(120, ":H3v$rD 3M5;");
      FastDateParser fastDateParser0 = new FastDateParser("_0brJ(CPx3T}a", simpleTimeZone0, locale0);
      assertEquals("_0brJ(CPx3T}a", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("zEZ^aQJ<U#1Q%c3J");
      FastDateParser fastDateParser0 = new FastDateParser("zEZ^aQJ<U#1Q%c3J", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(152);
      assertEquals(2052, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser(">xH'+v&T", timeZone0, locale0);
      assertEquals(">xH'+v&T", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("7,1E9==fRRY3tXbyQX", timeZone0, locale0);
      assertEquals("7,1E9==fRRY3tXbyQX", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("8B u", timeZone0, locale0);
      assertEquals("8B u", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("w5B3K]jbM", timeZone0, locale0);
      assertEquals("w5B3K]jbM", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(123, "PLT");
      FastDateParser fastDateParser0 = new FastDateParser("2", simpleTimeZone0, locale0);
      assertEquals("2", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("s1aT.tOUSHAj?", timeZone0, locale0);
      assertEquals("s1aT.tOUSHAj?", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("0:3#dPwc=w", timeZone0, locale0);
      assertEquals("0:3#dPwc=w", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser(".", timeZone0, locale0);
      assertEquals(".", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(";w5Oj>O");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("s*+", timeZone0, locale0);
      assertEquals("s*+", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(")J~;+lL|.GDc'!*b", timeZone0, locale0);
      assertEquals(")J~;+lL|.GDc'!*b", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(98, "ART");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("(.:", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("4}iHNRr`s,", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-1904));
      assertEquals(96, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("GMTART", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("Gd}ZGHoI<}", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("GMTART");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"GMTART\" does not match (\uAE30\uC6D0\uC804|\uAE30\uC6D0\uC804|\uC11C\uAE30|\uC11C\uAE30)(\\p{IsNd}++)\\}(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville\\s*+Standard\\s*+Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|Chatham\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|Chatham\\s*+\uD45C\uC900\uC2DC|Choibalsan\\s*+\uC2DC\uAC04|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|Davis\\s*+\uC2DC\uAC04|DAVT|DDUT|EASST|EAST|Easter\\s*+Is\\.\\s*+\uC2DC\uAC04|Easter\\s*+Is\\.\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|Fernando\\s*+de\\s*+Noronha\\s*+\uC2DC\uAC04|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|Hovd\\s*+\uC2DC\uAC04|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay\\s*+Standard\\s*+Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|Omsk\\s*+\uC2DC\uAC04|OMST|Oral\\s*+\uD45C\uC900\uC2DC|ORAT|PDT|PET|PETT|PGT|Philippines\\s*+Standard\\s*+Time|PHOT|Pitcairn\\s*+\uD45C\uC900\uC2DC|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda\\s*+\uD45C\uC900\uC2DC|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk\\s*+Time|SRET|SRT|SST|SYOT|Syowa\\s*+\uC2DC\uAC04|TAHT|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|Vostok\\s*+\uC2DC\uAC04|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT|\uAC00\uB098\\s*+\uD45C\uC900\uC2DC|\uAC00\uC774\uC544\uB098\\s*+\uC2DC\uAC04|\uAC08\uB77C\uD30C\uACE0\uC2A4\\s*+\uC2DC\uAC04|\uAC10\uBE44\uC544\\s*+\uC2DC\uAC04|\uAC78\uD504\uB9CC\\s*+\uD45C\uC900\uC2DC|\uADF8\uB8E8\uC9C0\uC57C\\s*+\uC2DC\uAC04|\uADF8\uB9AC\uB2C8\uCE58\\s*+\uD45C\uC900\uC2DC|\uAE38\uBC84\uD2B8\\s*+\uAD70\uB3C4\\s*+\uC2DC\uAC04|\uAE4C\uBF40\uBCA0\uB974\uB370\\s*+\uC2DC\uAC04|\uB098\uC6B0\uB8E8\\s*+\uC2DC\uAC04|\uB0A8\uC544\uD504\uB9AC\uCE74\\s*+\uD45C\uC900\uC2DC|\uB124\uD314\\s*+\uC2DC\uAC04|\uB178\uBE0C\uC2DC\uBE4C\uC2A4\uD06C\\s*+\uC2DC\uAC04|\uB178\uD37D\\s*+\uC2DC\uAC04|\uB178\uD37D\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB274\\s*+\uCE7C\uB808\uB3C4\uB2C8\uC544\\s*+\uC2DC\uAC04|\uB274\uC9C8\uB79C\uB4DC\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB274\uC9C8\uB79C\uB4DC\\s*+\uD45C\uC900\uC2DC|\uB274\uD380\uB4E4\uB79C\uB4DC\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB274\uD380\uB4E4\uB79C\uB4DC\\s*+\uD45C\uC900\uC2DC|\uB2C8\uC6B0\uC5D0\\s*+\uC2DC\uAC04|\uB300\uC11C\uC591\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB300\uC11C\uC591\\s*+\uD45C\uC900\uC2DC|\uB3D9\uBD80\\s*+\uADF8\uB9B0\uB79C\uB4DC\\s*+\uC2DC\uAC04|\uB3D9\uBD80\\s*+\uADF8\uB9B0\uB79C\uB4DC\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB3D9\uBD80\\s*+\uC544\uD504\uB9AC\uCE74\\s*+\uC2DC\uAC04|\uB3D9\uBD80\\s*+\uC778\uB3C4\uB124\uC2DC\uC544\\s*+\uC2DC\uAC04|\uB3D9\uBD80\\s*+\uC77C\uAD11\\s*+\uC808\uC57D\\s*+\uC2DC\uAC04\\(\uB274\uC0AC\uC6B0\uC2A4\uC6E8\uC77C\uC988\\)|\uB3D9\uBD80\\s*+\uC77C\uAD11\\s*+\uC808\uC57D\\s*+\uC2DC\uAC04\\(\uBE45\uD1A0\uB9AC\uC544\\)|\uB3D9\uBD80\\s*+\uC77C\uAD11\\s*+\uC808\uC57D\\s*+\uC2DC\uAC04\\(\uD0DC\uC988\uBA54\uC774\uB2C8\uC544\\)|\uB3D9\uBD80\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB3D9\uBD80\\s*+\uD45C\uC900\uC2DC|\uB3D9\uBD80\\s*+\uD45C\uC900\uC2DC\\(\uB274\uC0AC\uC6B0\uC2A4\uC6E8\uC77C\uC988\\)|\uB3D9\uBD80\\s*+\uD45C\uC900\uC2DC\\(\uBE45\uD1A0\uB9AC\uC544\\)|\uB3D9\uBD80\\s*+\uD45C\uC900\uC2DC\\(\uD038\uC990\uB79C\uB4DC\\)|\uB3D9\uBD80\\s*+\uD45C\uC900\uC2DC\\(\uD0DC\uC988\uBA54\uC774\uB2C8\uC544\\)|\uB3D9\uC720\uB7FD\\s*+\uC2DC\uAC04|\uB3D9\uC720\uB7FD\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB4A4\uBABD\\s*+\uB4A4\uB974\uBE4C\\s*+\uC2DC\uAC04|\uB77C\uC778\\s*+\uAD70\uB3C4\\s*+\uC2DC\uAC04|\uB85C\uB4DC\\s*+\uD558\uC6B0\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB85C\uB4DC\\s*+\uD558\uC6B0\\s*+\uD45C\uC900\uC2DC|\uB85C\uC81C\uB77C\\s*+\uD45C\uC900\uC2DC|\uB9AC\uC720\uB2C8\uC5B8\\s*+\uC2DC\uAC04|\uB9C8\uAC00\uB2E8\\s*+\uC2DC\uAC04|\uB9C8\uB974\uCF00\uC0AC\uC2A4\\s*+\uC2DC\uAC04|\uB9C8\uC15C\uC81C\uB3C4\\s*+\uC2DC\uAC04|\uB9D0\uB808\uC774\uC2DC\uC544\\s*+\uC2DC\uAC04|\uB9E4\uCF70\uB9AC\\s*+\uC12C\\s*+\uC77C\uAD11\\s*+\uC808\uC57D\\s*+\uC2DC\uAC04|\uB9E4\uCF70\uB9AC\\s*+\uC12C\\s*+\uD45C\uC900\uC2DC|\uBAA8\uB9AC\uC154\uC2A4\\s*+\uC2DC\uAC04|\uBAA8\uC2A4\uD06C\uBC14\\s*+\uD45C\uC900\uC2DC|\uBAA8\uC2A8\\s*+\uC2DC\uAC04|\uBAB0\uB514\uBE0C\\s*+\uC2DC\uAC04|\uBBF8\uC580\uB9C8\\s*+\uC2DC\uAC04|\uBC29\uAE00\uB77C\uB370\uC2DC\\s*+\uC2DC\uAC04|\uBCA0\uB124\uC218\uC5D8\uB77C\\s*+\uC2DC\uAC04|\uBCFC\uB9AC\uBE44\uC544\\s*+\uC2DC\uAC04|\uBD80\uD0C4\\s*+\uC2DC\uAC04|\uBE0C\uB77C\uC9C8\uB9AC\uC544\\s*+\uC2DC\uAC04|\uBE0C\uB8E8\uB098\uC774\\s*+\uC2DC\uAC04|\uBE14\uB77C\uB514\uBCF4\uC2A4\uD1A1\\s*+\uC2DC\uAC04|\uBE44\uB204\uC544\uD22C\\s*+\uC2DC\uAC04|\uC0AC\uB9C8\uB77C\\s*+\uC2DC\uAC04|\uC0AC\uBAA8\uC544\\s*+\uD45C\uC900\uC2DC|\uC0AC\uC6B0\uC2A4\\s*+\uC870\uC9C0\uC544\\s*+\uD45C\uC900\uC2DC|\uC0AC\uD560\uB9B0\\s*+\uC2DC\uAC04|\uC0B0\uC9C0\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC0B0\uC9C0\\s*+\uD45C\uC900\uC2DC|\uC11C\uBD80\\s*+\uADF8\uB9B0\uB79C\uB4DC\\s*+\uC2DC\uAC04|\uC11C\uBD80\\s*+\uADF8\uB9B0\uB79C\uB4DC\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC11C\uBD80\\s*+\uC544\uD504\uB9AC\uCE74\\s*+\uC2DC\uAC04|\uC11C\uBD80\\s*+\uD45C\uC900\uC2DC\\(\uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544\\)|\uC11C\uC0AC\uBAA8\uC544\\s*+\uC2DC\uAC04|\uC11C\uC0AC\uBAA8\uC544\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC11C\uC720\uB7FD\\s*+\uC2DC\uAC04|\uC11C\uC720\uB7FD\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC11C\uC778\uB3C4\uB124\uC2DC\uC544\\s*+\uC2DC\uAC04|\uC138\uACC4\\s*+\uD45C\uC900\uC2DC|\uC138\uC774\uC140\\s*+\uC2DC\uAC04|\uC194\uB85C\uBAAC\\s*+\uAD70\uB3C4\\s*+\uC2DC\uAC04|\uC218\uB9AC\uB0A8\\s*+\uC2DC\uAC04|\uC2F1\uAC00\uD3EC\uB974\\s*+\uC2DC\uAC04|\uC544\uB098\uB514\uB974\\s*+\uC2DC\uAC04|\uC544\uB78D\\s*+\uD45C\uC900\uC2DC|\uC544\uB974\uBA54\uB2C8\uC544\\s*+\uC2DC\uAC04|\uC544\uB974\uD5E8\uD2F0\uB098\\s*+\uC2DC\uAC04|\uC544\uB9C8\uC874\\s*+\uC2DC\uAC04|\uC544\uC77C\uB79C\uB4DC\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC544\uC81C\uB974\uBC14\uC774\uC794\\s*+\uC2DC\uAC04|\uC544\uC870\uB808\uC2A4\\s*+\uC2DC\uAC04|\uC544\uC870\uB808\uC2A4\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC544\uD504\uAC00\uB2C8\uC2A4\uD0C4\\s*+\uC2DC\uAC04|\uC545\uD0C0\uC6B0\\s*+\uC2DC\uAC04|\uC545\uD1A0\uBE0C\\s*+\uC2DC\uAC04|\uC54C\uB798\uC2A4\uCE74\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC54C\uB798\uC2A4\uCE74\\s*+\uD45C\uC900\uC2DC|\uC54C\uB9C8\uC544\uD0C0\\s*+\uC2DC\uAC04|\uC57C\uCE20\uD06C\\s*+\uC2DC\uAC04|\uC5D0\uC774\uCEE4\\s*+\uC2DC\uAC04|\uC5D0\uCFE0\uC544\uB3C4\uB974\\s*+\uC2DC\uAC04|\uC601\uAD6D\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC601\uC778\uB3C4\\s*+\uC81C\uB3C4\\s*+\uC2DC\uAC04|\uC608\uCE74\uD14C\uB9B0\uBC84\uADF8\\s*+\uC2DC\uAC04|\uC6B0\uB8E8\uACFC\uC774\\s*+\uC2DC\uAC04|\uC6B0\uC2A4\uD2F0\uB124\uB77C\\s*+\uD45C\uC900\uC2DC|\uC6B0\uC988\uBCA0\uD0A4\uC2A4\uD0C4\\s*+\uC2DC\uAC04|\uC6B8\uB780\uBC14\uD0C0\uB974\\s*+\uC2DC\uAC04|\uC6D4\uB9AC\uC2A4\\s*+\uD6C4\uD22C\uB098\\s*+\uC2DC\uAC04|\uC6E8\uC774\uD06C\\s*+\uC2DC\uAC04|\uC774\uB780\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC774\uB780\\s*+\uD45C\uC900\uC2DC|\uC774\uB974\uCFE0\uCE20\uD06C\\s*+\uC2DC\uAC04|\uC774\uC2A4\uB77C\uC5D8\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC774\uC2A4\uB77C\uC5D8\\s*+\uD45C\uC900\uC2DC|\uC778\uB3C4\\s*+\uD45C\uC900\uC2DC|\uC778\uB3C4\uCC28\uC774\uB098\\s*+\uBC18\uB3C4\\s*+\uC2DC\uAC04|\uC77C\uBCF8\\s*+\uD45C\uC900\uC2DC|\uC911\uAD6D\\s*+\uD45C\uC900\uC2DC|\uC911\uBD80\\s*+\uC720\uB7FD\\s*+\uC2DC\uAC04|\uC911\uBD80\\s*+\uC720\uB7FD\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC911\uBD80\\s*+\uC77C\uAD11\\s*+\uC808\uC57D\\s*+\uC2DC\uAC04\\(\uB0A8\uBD80\\s*+\uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544\\)|\uC911\uBD80\\s*+\uC77C\uAD11\\s*+\uC808\uC57D\\s*+\uC2DC\uAC04\\(\uB0A8\uBD80\\s*+\uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544/\uB274\uC0AC\uC6B0\uC2A4\uC6E8\uC77C\uC988\\)|\uC911\uBD80\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC911\uBD80\\s*+\uD45C\uC900\uC2DC|\uC911\uBD80\\s*+\uD45C\uC900\uC2DC\\(\uB0A8\uBD80\\s*+\uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544\\)|\uC911\uBD80\\s*+\uD45C\uC900\uC2DC\\(\uB0A8\uBD80\\s*+\uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544/\uB274\uC0AC\uC6B0\uC2A4\uC6E8\uC77C\uC988\\)|\uC911\uBD80\\s*+\uD45C\uC900\uC2DC\\(\uBD81\uBD80\\s*+\uC9C0\uC5ED\\)|\uC911\uC559\\s*+\uC11C\uBD80\\s*+\uD45C\uC900\uC2DC\\(\uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544\\)|\uC911\uC559\\s*+\uC544\uD504\uB9AC\uCE74\\s*+\uC2DC\uAC04|\uC911\uC559\\s*+\uC720\uB7FD\\s*+\uC2DC\uAC04|\uC911\uC559\\s*+\uC720\uB7FD\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC911\uC559\\s*+\uC778\uB3C4\uB124\uC2DC\uC544\\s*+\uC2DC\uAC04|\uCC28\uBAA8\uB85C\\s*+\uD45C\uC900\uC2DC|\uCD94\uD06C\\s*+\uD45C\uC900\uC2DC|\uCE60\uB808\\s*+\uC2DC\uAC04|\uCE60\uB808\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uCF54\uC2A4\uB798\\s*+\uC2DC\uAC04|\uCF54\uCF54\uC2A4\\s*+\uAD70\uB3C4\\s*+\uC2DC\uAC04|\uCF5C\uB86C\uBE44\uC544\\s*+\uC2DC\uAC04|\uCFE0\uBC14\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uCFE0\uBC14\\s*+\uD45C\uC900\uC2DC|\uCFE0\uD06C\\s*+\uAD70\uB3C4\\s*+\uC2DC\uAC04|\uD06C\uB77C\uC2A4\uB178\uC57C\uB974\uC2A4\uD06C\\s*+\uC2DC\uAC04|\uD06C\uB9AC\uC2A4\uB9C8\uC2A4\uC12C\\s*+\uC2DC\uAC04|\uD0A4\uB974\uD0A4\uC988\uC2A4\uD0C4\\s*+\uC2DC\uAC04|\uD0C0\uC9C0\uD0A4\uC2A4\uD0C4\\s*+\uC2DC\uAC04|\uD0C0\uD788\uD2F0\\s*+\uC2DC\uAC04|\uD0DC\uD3C9\uC591\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD0DC\uD3C9\uC591\\s*+\uD45C\uC900\uC2DC|\uD1A0\uCF08\uB77C\uC6B0\\s*+\uC2DC\uAC04|\uD1B5\uAC00\\s*+\uC2DC\uAC04|\uD22C\uB974\uD06C\uBA54\uB2C8\uC2A4\uD0C4\\s*+\uC2DC\uAC04|\uD22C\uBC1C\uB8E8\\s*+\uC2DC\uAC04|\uD2F0\uBAA8\uB974-\uB808\uC2A4\uD14C\\s*+\uC2DC\uAC04|\uD30C\uB77C\uACFC\uC774\\s*+\uC2DC\uAC04|\uD30C\uB77C\uACFC\uC774\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD30C\uD0A4\uC2A4\uD0C4\\s*+\uC2DC\uAC04|\uD30C\uD478\uC544\uB274\uAE30\uB2C8\\s*+\uC2DC\uAC04|\uD314\uB77C\uC6B0\\s*+\uC2DC\uAC04|\uD398\uB8E8\\s*+\uC2DC\uAC04|\uD398\uD2B8\uB85C\uD30C\uBE14\uB85C\uD504\uC2A4\uD06C-\uCE84\uCC28\uCE20\uD0A4\\s*+\uC2DC\uAC04|\uD3EC\uD074\uB79C\uB4DC\\s*+\uAD70\uB3C4\\s*+\uC2DC\uAC04|\uD3F0\uD398\uC774\\s*+\uD45C\uC900\uC2DC|\uD504\uB791\uC2A4\\s*+\uB0A8\uBD80\\s*+\uC9C0\uBC29\\s*+\uBC0F\\s*+\uB0A8\uADF9\\s*+\uC9C0\uC5ED\\s*+\uC2DC\uAC04|\uD504\uB791\uC2A4\uB839\\s*+\uAE30\uC544\uB098\\s*+\uC2DC\uAC04|\uD53C\uB2C9\uC2A4\\s*+\uAD70\uB3C4\\s*+\uC2DC\uAC04|\uD53C\uC5D0\uB974\\s*+\uBBF8\uD06C\uB860\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD53C\uC5D0\uB974\\s*+\uBBF8\uD06C\uB860\\s*+\uD45C\uC900\uC2DC|\uD53C\uC9C0\\s*+\uC2DC\uAC04|\uD53C\uC9C0\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD558\uC640\uC774\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD558\uC640\uC774\\s*+\uD45C\uC900\uC2DC|\uD55C\uAD6D\\s*+\uD45C\uC900\uC2DC|\uD64D\uCF69\\s*+\uC2DC\uAC04)(\uAE30\uC6D0\uC804|\uAE30\uC6D0\uC804|\uC11C\uAE30|\uC11C\uAE30)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("6y?Wle`9np_$iRCcE-", timeZone0, locale0);
      assertEquals("6y?Wle`9np_$iRCcE-", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("Invalid pattern", "Invalid pattern");
      FastDateParser fastDateParser0 = new FastDateParser(",`  wnOlQ{2_YDil 9", timeZone0, locale0);
      try { 
        fastDateParser0.parse("ACT");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"ACT\" does not match ,`\\s*+(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(",`  wnOlQ{2_YDil 9", timeZone0, locale0);
      try { 
        fastDateParser0.parse("ACT");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"ACT\" does not match ,`\\s*+(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("y[_ZL*v5W)C", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("y[_ZL*v5W)C", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("GMTIET", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-526), "GMTART");
      FastDateParser fastDateParser1 = new FastDateParser("GMTIET", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("%?UUZds/%j'rao");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(":H3v$rD 3M5;", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("ECT", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("%?UUZds/%j'rao");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(":H3v$rD 3M5;", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals("GMT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("GMTIET", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("PRT", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("4}iHNRr`s,", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("4\\}", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "+65x*?Ye.qrj>)yx1");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("+65x*?Ye.qrj>)yx1", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "CST", 0, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("$|cl3/Td!FFFTJ$", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("fr_FR", locale1.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("GMTAGT", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("GMTAGT", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("GMTAGT", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(148);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject(":B)", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("72z@U", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[72z@U,it,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("%?UUZds/%j'rao");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("ECT", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("WOc,7!E{oYeQys=1~", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("7\"DfCcyb`");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("MMTARb", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("3)h{zZ>F-H");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("%?UUZds/%j'rao");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("[S-`![4k/yD!+s", timeZone0, locale0);
      assertEquals("[S-`![4k/yD!+s", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("%?UUZds/%j'rao");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[:H3v$rD 3M5;,zh,GMT]", timeZone0, locale0);
      assertEquals("FastDateParser[:H3v$rD 3M5;,zh,GMT]", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("#k{;9dZ<PJGGM", timeZone0, locale0);
      assertEquals("#k{;9dZ<PJGGM", fastDateParser0.getPattern());
  }
}
