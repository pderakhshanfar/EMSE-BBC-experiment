/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:26:15 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.util.Date;
import java.util.LinkedList;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("3\"!<cmC_~aO#K", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("mPrI", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(26);
      Object object0 = fastDateParser0.parseObject("org.apache.commons.lang3.time.FastDateParser$1", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      FastDateParser fastDateParser0 = new FastDateParser("(e", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "(p{IsNd}++)");
      FastDateParser fastDateParser0 = new FastDateParser("2+<=X,FV", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("E cN~.H0h',tDl{");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1874, "0[NOtj~<");
      FastDateParser fastDateParser0 = new FastDateParser("E cN~.H0h',tDl{", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(1874, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("E cN^.H0h',tDl{", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2471));
      assertEquals((-471), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("E cN^.H0h',tDl{");
      ParsePosition parsePosition0 = new ParsePosition(122);
      FastDateParser fastDateParser0 = new FastDateParser("7An-/", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3305), "2e");
      FastDateParser fastDateParser0 = new FastDateParser("2e", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      String string0 = "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++";
      Locale locale1 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale1);
      Locale locale2 = Locale.ITALY;
      FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale2);
      try { 
        fastDateParser1.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++\" does not match (\\p{IsNd}++)\\+\\|(dom|domenica|gio|gioved\u00EC|lun|luned\u00EC|mar|marted\u00EC|mer|mercoled\u00EC|sab|sabato|ven|venerd\u00EC)\\+\\|(\\p{IsNd}++)\\+\\|(BC|BC|dopo\\s*+Cristo|dopo\\s*+Cristo)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|CDT|CST|CT|CWST|DT|EDT|EST|FT|KDT|KST|LMT|MT|NAT|QTT|RT|ST|WST|ZOST|ZOT|ZT|DT|NT|OT|ougainville\\s*+Standard\\s*+Time|RT|ST|TT|AT|CT|DT|EST|ET|HADT|HAST|HOT|hST|HUT|KT|LST|LT|OT|ST|VT|XT|AVT|DUT|ASST|AST|AT|CT|DT|EST|ET|GST|GT|ST|JST|JT|KT|NT|ALT|AMT|ET|FT|ILT|MT|MT\\+01:00|MT\\+02:00|MT\\+03:00|MT\\+04:00|MT\\+05:00|MT\\+06:00|MT\\+07:00|MT\\+08:00|MT\\+09:00|MT\\+10:00|MT\\+11:00|MT\\+12:00|MT\\+13:00|MT\\+14:00|MT-01:00|MT-02:00|MT-03:00|MT-04:00|MT-05:00|MT-06:00|MT-07:00|MT-08:00|MT-09:00|MT-10:00|MT-11:00|MT-12:00|ST|YT|DT|KT|OVT|ST|CT|DT|OT|RDT|RKT|RST|ST|ST|GT|OST|ostanay\\s*+Standard\\s*+Time|RAT|ST|HDT|HST|INT|AGT|ART|AWT|DT|EST|ET|HT|IST|MT|SK|ST|UT|VT|YT|CT|DT|FST|FT|OVT|PT|RT|ST|UT|ZDT|ZST|MST|ra\\s*+del\\s*+Bangladesh|ra\\s*+del\\s*+Bhutan|ra\\s*+del\\s*+Brasile|ra\\s*+del\\s*+Brunei|ra\\s*+del\\s*+Cile|ra\\s*+del\\s*+Kirghizistan|ra\\s*+del\\s*+Nepal|ra\\s*+del\\s*+Pakistan|ra\\s*+del\\s*+Paraguay|ra\\s*+del\\s*+Per\u00F9|ra\\s*+del\\s*+Tagikistan|ra\\s*+del\\s*+Terr\\.\\s*+Britannico\\s*+dell'Oceano\\s*+Indiano|ra\\s*+del\\s*+Turkmenistan|ra\\s*+del\\s*+Venezuela|ra\\s*+dell'Afghanistan|ra\\s*+dell'Africa\\s*+centrale|ra\\s*+dell'Africa\\s*+occidentale|ra\\s*+dell'Africa\\s*+orientale|ra\\s*+dell'Argentina|ra\\s*+dell'Armenia|ra\\s*+dell'Azerbaigian|ra\\s*+dell'Ecuador|ra\\s*+dell'Europa\\s*+centrale|ra\\s*+dell'Europa\\s*+occidentale|ra\\s*+dell'Europa\\s*+orientale|ra\\s*+dell'Indocina|ra\\s*+dell'Indonesia\\s*+centrale|ra\\s*+dell'Indonesia\\s*+occidentale|ra\\s*+dell'Indonesia\\s*+orientale|ra\\s*+dell'Isola\\s*+Christmas|ra\\s*+dell'Isola\\s*+della\\s*+Fenice|ra\\s*+dell'Isola\\s*+di\\s*+Pasqua|ra\\s*+dell'Isola\\s*+Macquarie|ra\\s*+dell'Uruguay|ra\\s*+dell'Uzbekistan|ra\\s*+della\\s*+Birmania/Myanmar|ra\\s*+della\\s*+Bolivia|ra\\s*+della\\s*+Colombia|ra\\s*+della\\s*+Georgia|ra\\s*+della\\s*+Groenlandia\\s*+occidentale|ra\\s*+della\\s*+Groenlandia\\s*+orientale|ra\\s*+della\\s*+Guyana|ra\\s*+della\\s*+Guyana\\s*+Francese|ra\\s*+della\\s*+Malaysia|ra\\s*+della\\s*+Nuova\\s*+Caledonia|ra\\s*+delle\\s*+Azzorre|ra\\s*+delle\\s*+Falkland|ra\\s*+delle\\s*+Galapagos|ra\\s*+delle\\s*+Isole\\s*+Cocos|ra\\s*+delle\\s*+Isole\\s*+Cook|ra\\s*+delle\\s*+Isole\\s*+Gilbert|ra\\s*+delle\\s*+Isole\\s*+Marchesi|ra\\s*+delle\\s*+Isole\\s*+Marshall|ra\\s*+delle\\s*+Isole\\s*+Salomone|ra\\s*+delle\\s*+Line\\s*+Islands|ra\\s*+delle\\s*+Maldive|ra\\s*+delle\\s*+Seychelles|ra\\s*+delle\\s*+Terre\\s*+Australi\\s*+e\\s*+Antartiche\\s*+Francesi|ra\\s*+di\\s*+Acre|ra\\s*+di\\s*+Alma-Ata|ra\\s*+di\\s*+Anadyr|ra\\s*+di\\s*+Aqtau|ra\\s*+di\\s*+Aqtobe|ra\\s*+di\\s*+Capo\\s*+Verde|ra\\s*+di\\s*+Chatham\\s*+standard|ra\\s*+di\\s*+Choibalsan|ra\\s*+di\\s*+Chuuk|ra\\s*+di\\s*+Davis|ra\\s*+di\\s*+Dumont-d'Urville|ra\\s*+di\\s*+Ekaterinburg|ra\\s*+di\\s*+Fernando\\s*+de\\s*+Noronha|ra\\s*+di\\s*+Figi|ra\\s*+di\\s*+Gambier|ra\\s*+di\\s*+Hong\\s*+Kong|ra\\s*+di\\s*+Hovd|ra\\s*+di\\s*+Irkutsk|ra\\s*+di\\s*+Jakutsk|ra\\s*+di\\s*+Kosrae|ra\\s*+di\\s*+Krasnojarsk|ra\\s*+di\\s*+Magadan|ra\\s*+di\\s*+Mauritius|ra\\s*+di\\s*+Mawson|ra\\s*+di\\s*+Nauru|ra\\s*+di\\s*+Niue|ra\\s*+di\\s*+Norfolk|ra\\s*+di\\s*+Novosibirsk|ra\\s*+di\\s*+Omsk|ra\\s*+di\\s*+Oral|ra\\s*+di\\s*+Palau|ra\\s*+di\\s*+Papua\\s*+Nuova\\s*+Guinea|ra\\s*+di\\s*+Petropavlovsk-Kamchatski|ra\\s*+di\\s*+Pohnpei|ra\\s*+di\\s*+Qyzylorda|ra\\s*+di\\s*+Reunion|ra\\s*+di\\s*+Rothera|ra\\s*+di\\s*+Sakhalin|ra\\s*+di\\s*+Samara|ra\\s*+di\\s*+Samoa|ra\\s*+di\\s*+Singapore|ra\\s*+di\\s*+Suriname|ra\\s*+di\\s*+Syowa|ra\\s*+di\\s*+Tahiti|ra\\s*+di\\s*+Timor\\s*+Leste|ra\\s*+di\\s*+Tokelau|ra\\s*+di\\s*+Tonga|ra\\s*+di\\s*+Tuvalu|ra\\s*+di\\s*+Ulaanbaatar|ra\\s*+di\\s*+Ust-Nera|ra\\s*+di\\s*+Vanuatu|ra\\s*+di\\s*+Vladivostok|ra\\s*+di\\s*+Vostok|ra\\s*+di\\s*+Wake|ra\\s*+di\\s*+Wallis\\s*+e\\s*+Futuna|ra\\s*+estiva\\s*+britannica|ra\\s*+estiva\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud\\)|ra\\s*+estiva\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud/Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|ra\\s*+estiva\\s*+del\\s*+Cile|ra\\s*+estiva\\s*+del\\s*+Paraguay|ra\\s*+estiva\\s*+dell'Australia\\s*+orientale\\s*+\\(Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|ra\\s*+estiva\\s*+dell'Europa\\s*+centrale|ra\\s*+estiva\\s*+dell'Europa\\s*+occidentale|ra\\s*+estiva\\s*+dell'Europa\\s*+orientale|ra\\s*+estiva\\s*+dell'Isola\\s*+di\\s*+Pasqua|ra\\s*+estiva\\s*+dell'Isola\\s*+Macquarie|ra\\s*+estiva\\s*+della\\s*+Groenlandia\\s*+occidentale|ra\\s*+estiva\\s*+della\\s*+Groenlandia\\s*+orientale|ra\\s*+estiva\\s*+delle\\s*+Azzorre|ra\\s*+estiva\\s*+di\\s*+Figi|ra\\s*+estiva\\s*+di\\s*+Lord\\s*+Howe|ra\\s*+estiva\\s*+di\\s*+Norfolk|ra\\s*+estiva\\s*+di\\s*+Samoa|ra\\s*+estiva\\s*+irlandese|ra\\s*+estiva\\s*+orientale\\s*+\\(Tasmania\\)|ra\\s*+estiva\\s*+orientale\\s*+\\(Victoria\\)|ra\\s*+legale\\s*+Cuba|ra\\s*+legale\\s*+dell'Alaska|ra\\s*+legale\\s*+dell'Atlantico\\s*+occidentale|ra\\s*+legale\\s*+della\\s*+costa\\s*+occidentale\\s*+USA|ra\\s*+legale\\s*+della\\s*+Nuova\\s*+Zelanda|ra\\s*+legale\\s*+delle\\s*+Isole\\s*+Hawaii|ra\\s*+legale\\s*+di\\s*+Chatham|ra\\s*+legale\\s*+di\\s*+Israele|ra\\s*+legale\\s*+di\\s*+Saint-Pierre\\s*+e\\s*+Miquelon|ra\\s*+legale\\s*+di\\s*+Terranova|ra\\s*+legale\\s*+Iran|ra\\s*+legale\\s*+USA\\s*+centrale|ra\\s*+legale\\s*+USA\\s*+occidentale|ra\\s*+legale\\s*+USA\\s*+orientale|ra\\s*+media\\s*+del\\s*+Ghana|ra\\s*+media\\s*+di\\s*+Greenwich|ra\\s*+solare\\s*+Cuba|ra\\s*+solare\\s*+del\\s*+Giappone|ra\\s*+solare\\s*+del\\s*+golfo|ra\\s*+solare\\s*+del\\s*+Sudafrica|ra\\s*+solare\\s*+dell'Alaska|ra\\s*+solare\\s*+dell'Amazzonia|ra\\s*+solare\\s*+dell'Arabia|ra\\s*+solare\\s*+dell'Atlantico\\s*+occidentale|ra\\s*+solare\\s*+dell'India|ra\\s*+solare\\s*+della\\s*+Cina|ra\\s*+solare\\s*+della\\s*+Corea|ra\\s*+solare\\s*+della\\s*+costa\\s*+occidentale\\s*+USA|ra\\s*+solare\\s*+della\\s*+Georgia\\s*+Australe|ra\\s*+solare\\s*+della\\s*+Nuova\\s*+Zelanda|ra\\s*+solare\\s*+delle\\s*+Isole\\s*+Hawaii|ra\\s*+solare\\s*+di\\s*+Saint-Pierre\\s*+e\\s*+Miquelon|ra\\s*+solare\\s*+di\\s*+Terranova|ra\\s*+solare\\s*+Iran|ra\\s*+solare\\s*+USA\\s*+centrale|ra\\s*+solare\\s*+USA\\s*+occidentale|ra\\s*+solare\\s*+USA\\s*+orientale|ra\\s*+standard\\s*+Australia\\s*+centro-occidentale|ra\\s*+standard\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud\\)|ra\\s*+standard\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud/Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|ra\\s*+standard\\s*+centrale\\s*+\\(Territori\\s*+del\\s*+Nord\\)|ra\\s*+standard\\s*+dell'Australia\\s*+occidentale|ra\\s*+standard\\s*+dell'Australia\\s*+orientale\\s*+\\(Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|ra\\s*+standard\\s*+di\\s*+Chamorro|ra\\s*+standard\\s*+di\\s*+Israele|ra\\s*+standard\\s*+di\\s*+Lord\\s*+Howe|ra\\s*+standard\\s*+di\\s*+Mosca|ra\\s*+standard\\s*+di\\s*+Pitcairn|ra\\s*+standard\\s*+di\\s*+Samoa|ra\\s*+standard\\s*+orientale\\s*+\\(Queensland\\)|ra\\s*+standard\\s*+orientale\\s*+\\(Tasmania\\)|ra\\s*+standard\\s*+orientale\\s*+\\(Victoria\\)|RAT|DT|ET|ETT|GT|hilippines\\s*+Standard\\s*+Time|HOT|KT|MDT|MST|ONT|ST|WT|YST|YT|OST|YZT|ET|OTT|AKT|AMT|AST|BT|CT|GT|rednekolymsk\\s*+Time|RET|RT|ST|YOT|AHT|empo\\s*+universale\\s*+coordinato|FT|JT|KT|LT|MT|OT|VT|LAT|TC|YT|ZT|ET|LAT|OST|UT|AKT|AT|EST|ET|FT|GST|GT|IB|IT|ITA|SDT|SST|JT|AKT|EKT)\\+\\|(AM|PM)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|CDT|CST|CT|CWST|DT|EDT|EST|FT|KDT|KST|LMT|MT|NAT|QTT|RT|ST|WST|ZOST|ZOT|ZT|DT|NT|OT|ougainville\\s*+Standard\\s*+Time|RT|ST|TT|AT|CT|DT|EST|ET|HADT|HAST|HOT|hST|HUT|KT|LST|LT|OT|ST|VT|XT|AVT|DUT|ASST|AST|AT|CT|DT|EST|ET|GST|GT|ST|JST|JT|KT|NT|ALT|AMT|ET|FT|ILT|MT|MT\\+01:00|MT\\+02:00|MT\\+03:00|MT\\+04:00|MT\\+05:00|MT\\+06:00|MT\\+07:00|MT\\+08:00|MT\\+09:00|MT\\+10:00|MT\\+11:00|MT\\+12:00|MT\\+13:00|MT\\+14:00|MT-01:00|MT-02:00|MT-03:00|MT-04:00|MT-05:00|MT-06:00|MT-07:00|MT-08:00|MT-09:00|MT-10:00|MT-11:00|MT-12:00|ST|YT|DT|KT|OVT|ST|CT|DT|OT|RDT|RKT|RST|ST|ST|GT|OST|ostanay\\s*+Standard\\s*+Time|RAT|ST|HDT|HST|INT|AGT|ART|AWT|DT|EST|ET|HT|IST|MT|SK|ST|UT|VT|YT|CT|DT|FST|FT|OVT|PT|RT|ST|UT|ZDT|ZST|MST|ra\\s*+del\\s*+Bangladesh|ra\\s*+del\\s*+Bhutan|ra\\s*+del\\s*+Brasile|ra\\s*+del\\s*+Brunei|ra\\s*+del\\s*+Cile|ra\\s*+del\\s*+Kirghizistan|ra\\s*+del\\s*+Nepal|ra\\s*+del\\s*+Pakistan|ra\\s*+del\\s*+Paraguay|ra\\s*+del\\s*+Per\u00F9|ra\\s*+del\\s*+Tagikistan|ra\\s*+del\\s*+Terr\\.\\s*+Britannico\\s*+dell'Oceano\\s*+Indiano|ra\\s*+del\\s*+Turkmenistan|ra\\s*+del\\s*+Venezuela|ra\\s*+dell'Afghanistan|ra\\s*+dell'Africa\\s*+centrale|ra\\s*+dell'Africa\\s*+occidentale|ra\\s*+dell'Africa\\s*+orientale|ra\\s*+dell'Argentina|ra\\s*+dell'Armenia|ra\\s*+dell'Azerbaigian|ra\\s*+dell'Ecuador|ra\\s*+dell'Europa\\s*+centrale|ra\\s*+dell'Europa\\s*+occidentale|ra\\s*+dell'Europa\\s*+orientale|ra\\s*+dell'Indocina|ra\\s*+dell'Indonesia\\s*+centrale|ra\\s*+dell'Indonesia\\s*+occidentale|ra\\s*+dell'Indonesia\\s*+orientale|ra\\s*+dell'Isola\\s*+Christmas|ra\\s*+dell'Isola\\s*+della\\s*+Fenice|ra\\s*+dell'Isola\\s*+di\\s*+Pasqua|ra\\s*+dell'Isola\\s*+Macquarie|ra\\s*+dell'Uruguay|ra\\s*+dell'Uzbekistan|ra\\s*+della\\s*+Birmania/Myanmar|ra\\s*+della\\s*+Bolivia|ra\\s*+della\\s*+Colombia|ra\\s*+della\\s*+Georgia|ra\\s*+della\\s*+Groenlandia\\s*+occidentale|ra\\s*+della\\s*+Groenlandia\\s*+orientale|ra\\s*+della\\s*+Guyana|ra\\s*+della\\s*+Guyana\\s*+Francese|ra\\s*+della\\s*+Malaysia|ra\\s*+della\\s*+Nuova\\s*+Caledonia|ra\\s*+delle\\s*+Azzorre|ra\\s*+delle\\s*+Falkland|ra\\s*+delle\\s*+Galapagos|ra\\s*+delle\\s*+Isole\\s*+Cocos|ra\\s*+delle\\s*+Isole\\s*+Cook|ra\\s*+delle\\s*+Isole\\s*+Gilbert|ra\\s*+delle\\s*+Isole\\s*+Marchesi|ra\\s*+delle\\s*+Isole\\s*+Marshall|ra\\s*+delle\\s*+Isole\\s*+Salomone|ra\\s*+delle\\s*+Line\\s*+Islands|ra\\s*+delle\\s*+Maldive|ra\\s*+delle\\s*+Seychelles|ra\\s*+delle\\s*+Terre\\s*+Australi\\s*+e\\s*+Antartiche\\s*+Francesi|ra\\s*+di\\s*+Acre|ra\\s*+di\\s*+Alma-Ata|ra\\s*+di\\s*+Anadyr|ra\\s*+di\\s*+Aqtau|ra\\s*+di\\s*+Aqtobe|ra\\s*+di\\s*+Capo\\s*+Verde|ra\\s*+di\\s*+Chatham\\s*+standard|ra\\s*+di\\s*+Choibalsan|ra\\s*+di\\s*+Chuuk|ra\\s*+di\\s*+Davis|ra\\s*+di\\s*+Dumont-d'Urville|ra\\s*+di\\s*+Ekaterinburg|ra\\s*+di\\s*+Fernando\\s*+de\\s*+Noronha|ra\\s*+di\\s*+Figi|ra\\s*+di\\s*+Gambier|ra\\s*+di\\s*+Hong\\s*+Kong|ra\\s*+di\\s*+Hovd|ra\\s*+di\\s*+Irkutsk|ra\\s*+di\\s*+Jakutsk|ra\\s*+di\\s*+Kosrae|ra\\s*+di\\s*+Krasnojarsk|ra\\s*+di\\s*+Magadan|ra\\s*+di\\s*+Mauritius|ra\\s*+di\\s*+Mawson|ra\\s*+di\\s*+Nauru|ra\\s*+di\\s*+Niue|ra\\s*+di\\s*+Norfolk|ra\\s*+di\\s*+Novosibirsk|ra\\s*+di\\s*+Omsk|ra\\s*+di\\s*+Oral|ra\\s*+di\\s*+Palau|ra\\s*+di\\s*+Papua\\s*+Nuova\\s*+Guinea|ra\\s*+di\\s*+Petropavlovsk-Kamchatski|ra\\s*+di\\s*+Pohnpei|ra\\s*+di\\s*+Qyzylorda|ra\\s*+di\\s*+Reunion|ra\\s*+di\\s*+Rothera|ra\\s*+di\\s*+Sakhalin|ra\\s*+di\\s*+Samara|ra\\s*+di\\s*+Samoa|ra\\s*+di\\s*+Singapore|ra\\s*+di\\s*+Suriname|ra\\s*+di\\s*+Syowa|ra\\s*+di\\s*+Tahiti|ra\\s*+di\\s*+Timor\\s*+Leste|ra\\s*+di\\s*+Tokelau|ra\\s*+di\\s*+Tonga|ra\\s*+di\\s*+Tuvalu|ra\\s*+di\\s*+Ulaanbaatar|ra\\s*+di\\s*+Ust-Nera|ra\\s*+di\\s*+Vanuatu|ra\\s*+di\\s*+Vladivostok|ra\\s*+di\\s*+Vostok|ra\\s*+di\\s*+Wake|ra\\s*+di\\s*+Wallis\\s*+e\\s*+Futuna|ra\\s*+estiva\\s*+britannica|ra\\s*+estiva\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud\\)|ra\\s*+estiva\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud/Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|ra\\s*+estiva\\s*+del\\s*+Cile|ra\\s*+estiva\\s*+del\\s*+Paraguay|ra\\s*+estiva\\s*+dell'Australia\\s*+orientale\\s*+\\(Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|ra\\s*+estiva\\s*+dell'Europa\\s*+centrale|ra\\s*+estiva\\s*+dell'Europa\\s*+occidentale|ra\\s*+estiva\\s*+dell'Europa\\s*+orientale|ra\\s*+estiva\\s*+dell'Isola\\s*+di\\s*+Pasqua|ra\\s*+estiva\\s*+dell'Isola\\s*+Macquarie|ra\\s*+estiva\\s*+della\\s*+Groenlandia\\s*+occidentale|ra\\s*+estiva\\s*+della\\s*+Groenlandia\\s*+orientale|ra\\s*+estiva\\s*+delle\\s*+Azzorre|ra\\s*+estiva\\s*+di\\s*+Figi|ra\\s*+estiva\\s*+di\\s*+Lord\\s*+Howe|ra\\s*+estiva\\s*+di\\s*+Norfolk|ra\\s*+estiva\\s*+di\\s*+Samoa|ra\\s*+estiva\\s*+irlandese|ra\\s*+estiva\\s*+orientale\\s*+\\(Tasmania\\)|ra\\s*+estiva\\s*+orientale\\s*+\\(Victoria\\)|ra\\s*+legale\\s*+Cuba|ra\\s*+legale\\s*+dell'Alaska|ra\\s*+legale\\s*+dell'Atlantico\\s*+occidentale|ra\\s*+legale\\s*+della\\s*+costa\\s*+occidentale\\s*+USA|ra\\s*+legale\\s*+della\\s*+Nuova\\s*+Zelanda|ra\\s*+legale\\s*+delle\\s*+Isole\\s*+Hawaii|ra\\s*+legale\\s*+di\\s*+Chatham|ra\\s*+legale\\s*+di\\s*+Israele|ra\\s*+legale\\s*+di\\s*+Saint-Pierre\\s*+e\\s*+Miquelon|ra\\s*+legale\\s*+di\\s*+Terranova|ra\\s*+legale\\s*+Iran|ra\\s*+legale\\s*+USA\\s*+centrale|ra\\s*+legale\\s*+USA\\s*+occidentale|ra\\s*+legale\\s*+USA\\s*+orientale|ra\\s*+media\\s*+del\\s*+Ghana|ra\\s*+media\\s*+di\\s*+Greenwich|ra\\s*+solare\\s*+Cuba|ra\\s*+solare\\s*+del\\s*+Giappone|ra\\s*+solare\\s*+del\\s*+golfo|ra\\s*+solare\\s*+del\\s*+Sudafrica|ra\\s*+solare\\s*+dell'Alaska|ra\\s*+solare\\s*+dell'Amazzonia|ra\\s*+solare\\s*+dell'Arabia|ra\\s*+solare\\s*+dell'Atlantico\\s*+occidentale|ra\\s*+solare\\s*+dell'India|ra\\s*+solare\\s*+della\\s*+Cina|ra\\s*+solare\\s*+della\\s*+Corea|ra\\s*+solare\\s*+della\\s*+costa\\s*+occidentale\\s*+USA|ra\\s*+solare\\s*+della\\s*+Georgia\\s*+Australe|ra\\s*+solare\\s*+della\\s*+Nuova\\s*+Zelanda|ra\\s*+solare\\s*+delle\\s*+Isole\\s*+Hawaii|ra\\s*+solare\\s*+di\\s*+Saint-Pierre\\s*+e\\s*+Miquelon|ra\\s*+solare\\s*+di\\s*+Terranova|ra\\s*+solare\\s*+Iran|ra\\s*+solare\\s*+USA\\s*+centrale|ra\\s*+solare\\s*+USA\\s*+occidentale|ra\\s*+solare\\s*+USA\\s*+orientale|ra\\s*+standard\\s*+Australia\\s*+centro-occidentale|ra\\s*+standard\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud\\)|ra\\s*+standard\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud/Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|ra\\s*+standard\\s*+centrale\\s*+\\(Territori\\s*+del\\s*+Nord\\)|ra\\s*+standard\\s*+dell'Australia\\s*+occidentale|ra\\s*+standard\\s*+dell'Australia\\s*+orientale\\s*+\\(Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|ra\\s*+standard\\s*+di\\s*+Chamorro|ra\\s*+standard\\s*+di\\s*+Israele|ra\\s*+standard\\s*+di\\s*+Lord\\s*+Howe|ra\\s*+standard\\s*+di\\s*+Mosca|ra\\s*+standard\\s*+di\\s*+Pitcairn|ra\\s*+standard\\s*+di\\s*+Samoa|ra\\s*+standard\\s*+orientale\\s*+\\(Queensland\\)|ra\\s*+standard\\s*+orientale\\s*+\\(Tasmania\\)|ra\\s*+standard\\s*+orientale\\s*+\\(Victoria\\)|RAT|DT|ET|ETT|GT|hilippines\\s*+Standard\\s*+Time|HOT|KT|MDT|MST|ONT|ST|WT|YST|YT|OST|YZT|ET|OTT|AKT|AMT|AST|BT|CT|GT|rednekolymsk\\s*+Time|RET|RT|ST|YOT|AHT|empo\\s*+universale\\s*+coordinato|FT|JT|KT|LT|MT|OT|VT|LAT|TC|YT|ZT|ET|LAT|OST|UT|AKT|AT|EST|ET|FT|GST|GT|IB|IT|ITA|SDT|SST|JT|AKT|EKT)\\+\\|'\\|\\[\\^\\]\\+\\+\\('\\[\\^\\]\\*\\+\\)\\*\\+\\|\\[\\^
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("E cN^.H0h',tDl{");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}{", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1076);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("org.apache.commons.lang3.time.FastDateParser$KeyValue", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("'kM)Q.D0'IjR", ",|<1=m  9qwe+l: ->", ",|<1=m  9qwe+l: ->");
      ParsePosition parsePosition0 = new ParsePosition(1);
      FastDateParser fastDateParser0 = new FastDateParser(",|<1=m  9qwe+l: ->", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("'kM)Q.D0'IjR", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("yiAC", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parse("89GE", parsePosition0);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("Zpfo_@2", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("GMTPLT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("yiAC", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("898GE");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("`+aR]Qo,b", timeZone0, locale0);
      assertEquals("`+aR]Qo,b", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("E cN^.H0h',tDl{");
      FastDateParser fastDateParser0 = new FastDateParser("_TIC]>8!A}~&OVD&", timeZone0, locale0);
      assertEquals("_TIC]>8!A}~&OVD&", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("^OmyQ?x6b}{& }PMg", timeZone0, locale0);
      assertEquals("^OmyQ?x6b}{& }PMg", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("E cN^.H0h',tDl{");
      FastDateParser fastDateParser0 = new FastDateParser("=,jY\"5hZ}(", timeZone0, locale0);
      assertEquals("=,jY\"5hZ}(", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("E cN^.H0h',tDl{");
      FastDateParser fastDateParser0 = new FastDateParser("<pM8$Jl", timeZone0, locale0);
      assertEquals("<pM8$Jl", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(";XN=Vx?x_n|q{|1-C*c", timeZone0, locale0);
      assertEquals(";XN=Vx?x_n|q{|1-C*c", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("'kM/)K.)D0'R", "'kM/)K.)D0'R", "Unparseable date: \"");
      FastDateParser fastDateParser0 = new FastDateParser("K:6", timeZone0, locale0);
      assertEquals("K:6", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("99Os|qiN2\"-<];r8h", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1177));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("99Os|qiN2\"-<];r8h", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("898GE", timeZone0, locale0);
      assertEquals("898GE", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("5VZ\"\u0006QOy\"{$", timeZone0, locale0);
      assertEquals("5VZ\"\u0006QOy\"{$", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("4O|", timeZone0, locale0);
      assertEquals("4O|", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "3\"!<cmC_~aO#K");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("3\"!<cmC_~aO#K", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("1lxRF.", timeZone0, locale0);
      assertEquals("1lxRF.", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("E cN~.H0h',tDl{");
      FastDateParser fastDateParser0 = new FastDateParser("0[NOtj~<", timeZone0, locale0);
      assertEquals("0[NOtj~<", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("/X!n9", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-4287));
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("Wa6@w.jv,;cq6", timeZone0, locale0);
      assertEquals("Wa6@w.jv,;cq6", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("-lEIKa8wg?t0MNPG", timeZone0, locale0);
      assertEquals("-lEIKa8wg?t0MNPG", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "(p{IsNd}++)");
      FastDateParser fastDateParser0 = new FastDateParser("2+<=X,FV", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(0);
      assertEquals(2000, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("yiAC", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("89GE");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|mE|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]+", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|mE|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]+", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("Zpfo_@2", timeZone0, locale0);
      fastDateParser0.parseObject("AST");
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("}+)", timeZone0, locale0);
      try { 
        fastDateParser0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match \\}\\+\\)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("Z?+y>n3/", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("E cN^.H0h',tDl{");
      FastDateParser fastDateParser0 = new FastDateParser("+$F{aGi2+C>!5 Z", timeZone0, locale0);
      assertEquals("+$F{aGi2+C>!5 Z", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("2e", timeZone0, locale0);
      try { 
        fastDateParser0.parse("E cN^.H0h',tDl{");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"E cN^.H0h',tDl{\" does not match 2
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("[/q@9,FLi'&%", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("gOvu|;0M@o`{D1^#");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"gOvu|;0M@o`{D1^#\" does not match \\[/
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("'kM/)K.)D0'R", "'kM/)K.)D0'R", "'kM/)K.)D0'R");
      FastDateParser fastDateParser0 = new FastDateParser("'kM/)K.)D0'R", timeZone0, locale0);
      Locale locale1 = Locale.ROOT;
      FastDateParser fastDateParser1 = new FastDateParser("'kM/)K.)D0'R", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1441), "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("[-q#9,FLiZ&}", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("(p{IsNd}++)", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("p}Z2h /w}[9Q>;", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("Hlc>dI2}", "BST");
      FastDateParser fastDateParser0 = new FastDateParser("Hlc>dI2}", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("3p(%[zv,7tBR0");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      FastDateParser fastDateParser0 = new FastDateParser("(e", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("\\(", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-637), "GMTEAT");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("]fJr;p'h2TF&I;Dx&", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      FastDateParser fastDateParser0 = new FastDateParser("E+d", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("fr", locale1.getLanguage());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("E cN^.H0h',tDl{");
      FastDateParser fastDateParser0 = new FastDateParser("{0f my{r=", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("{0f my{r=", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("@=3", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("@=3", parsePosition0);
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[MIT,en_GB,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("KO_l\"Yq1y/", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("3\"!<cmC_~aO#K");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("5@d");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("Hlc>dI2}", "BST");
      FastDateParser fastDateParser0 = new FastDateParser("yySka*9!w>d", timeZone0, locale0);
      assertEquals("yySka*9!w>d", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("6|6~F)wzZB>", timeZone0, locale0);
      assertEquals("6|6~F)wzZB>", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("Zpfo_@2", timeZone0, locale0);
      Object object0 = new Object();
      boolean boolean0 = fastDateParser0.equals(object0);
      assertFalse(boolean0);
  }
}
