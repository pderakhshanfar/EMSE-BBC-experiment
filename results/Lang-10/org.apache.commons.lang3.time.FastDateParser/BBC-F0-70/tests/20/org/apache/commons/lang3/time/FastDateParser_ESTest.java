/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:20:58 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("K");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("K", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-32), "9#+0IpZo8:]uDS5\"");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("9#+0IpZo8:]uDS5\"", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("FastDateParser[9#+0IpZo8:]uDS5\",zh_CN,9#+0IpZo8:]uDS5\"]", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ECT");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("ECT", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser(" not in (", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.US;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "Z:'H{&$$JYgZb5#,jH", 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2);
      FastDateParser fastDateParser0 = new FastDateParser("Z:'H{&$$JYgZb5#,jH", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=Z:'H{&$$JYgZb5#,jH,offset=2,dstSavings=2,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=2,startDayOfWeek=2,startTime=2,startTimeMode=2,endMode=2,endMonth=2,endDay=2,endDayOfWeek=2,endTime=2,endTimeMode=2]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2542));
      assertEquals((-542), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GPv;O:$U9/");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      ParsePosition parsePosition0 = new ParsePosition(649);
      FastDateParser fastDateParser0 = new FastDateParser("\"{Z]ma~4T<(", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1119), "X");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("0_~2", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parseObject("Invalid pattern");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"Invalid pattern\" does not match 0_~2
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GPv;O:$U9/");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("\"{Z]ma~4T<(", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GPv;O:$U9/");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("\"{Z]ma~4T<(", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("Greenwich Mean Time", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(37, "K");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("Kr<W[tLgr", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z:'H{&$$JYgZb5#,jH");
      Locale locale1 = Locale.GERMAN;
      locale1.getUnicodeLocaleAttributes();
      locale1.toLanguageTag();
      FastDateParser fastDateParser0 = new FastDateParser("Z:'H{&$$JYgZb5#,jH", timeZone0, locale1);
      Locale locale2 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone1 = TimeZone.getDefault();
      Locale locale3 = Locale.CANADA;
      FastDateParser fastDateParser1 = new FastDateParser("Z:'H{&$$JYgZb5#,jH", timeZone1, locale3);
      String string0 = "GMTPLT";
      try { 
        fastDateParser1.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"GMTPLT\" does not match (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|AcreTime|ACST|ACT|ACWST|ADT|AEDT|AEST|AfghanistanTime|AFT|AKDT|AKST|AlaskaDaylightTime|AlaskaStandardTime|Alma-AtaTime|ALMT|AmazonTime|AMT|AnadyrTime|ANAT|AqtauTime|AqtobeTime|AQTT|ArabiaStandardTime|ArgentineTime|ArmeniaTime|ART|AST|AtlanticDaylightTime|AtlanticStandardTime|AustralianCentralDaylightTime\\(SouthAustralia\\)|AustralianCentralDaylightTime\\(SouthAustralia/NewSouthWales\\)|AustralianCentralStandardTime\\(NorthernTerritory\\)|AustralianCentralStandardTime\\(SouthAustralia\\)|AustralianCentralStandardTime\\(SouthAustralia/NewSouthWales\\)|AustralianCentralWesternStandardTime|AustralianEasternDaylightTime\\(NewSouthWales\\)|AustralianEasternDaylightTime\\(Tasmania\\)|AustralianEasternDaylightTime\\(Victoria\\)|AustralianEasternStandardTime\\(NewSouthWales\\)|AustralianEasternStandardTime\\(Queensland\\)|AustralianEasternStandardTime\\(Tasmania\\)|AustralianEasternStandardTime\\(Victoria\\)|AustralianWesternStandardTime|AWST|AzerbaijanTime|AzoresSummerTime|AzoresTime|AZOST|AZOT|AZT|BangladeshTime|BDT|BhutanTime|BNT|BoliviaTime|BOT|BougainvilleStandardTime|BrasiliaTime|BritishSummerTime|BRT|BruneiTime|BST|BTT|CapeVerdeTime|CAT|CCT|CDT|CentralAfricanTime|CentralDaylightTime|CentralEuropeanSummerTime|CentralEuropeanTime|CentralIndonesiaTime|CentralStandardTime|CEST|CET|CHADT|ChamorroStandardTime|CHAST|ChathamDaylightTime|ChathamStandardTime|ChileSummerTime|ChileTime|ChinaStandardTime|ChoibalsanTime|CHOT|ChristmasIslandTime|ChST|CHUT|ChuukTime|CKT|CLST|CLT|CocosIslandsTime|ColombiaTime|CookIs\\.Time|CoordinatedUniversalTime|COT|CST|CubaDaylightTime|CubaStandardTime|CVT|CXT|DavisTime|DAVT|DDUT|Dumont-d'UrvilleTime|EASST|EAST|EastIndonesiaTime|EasterIs\\.SummerTime|EasterIs\\.Time|EasternAfricanTime|EasternDaylightTime|EasternEuropeanSummerTime|EasternEuropeanTime|EasternGreenlandSummerTime|EasternGreenlandTime|EasternStandardTime|EAT|ECT|EcuadorTime|EDT|EEST|EET|EGST|EGT|EST|FalklandIs\\.Time|FernandodeNoronhaTime|FijiSummerTime|FijiTime|FJST|FJT|FKT|FNT|FrenchGuianaTime|FrenchSouthern&AntarcticLandsTime|GalapagosTime|GALT|GambierTime|GAMT|GeorgiaTime|GET|GFT|GhanaMeanTime|GilbertIs\\.Time|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GreenwichMeanTime|GST|GulfStandardTime|GuyanaTime|GYT|HawaiiDaylightTime|HawaiiStandardTime|HDT|HKT|HongKongTime|HovdTime|HOVT|HST|ICT|IDT|IndiaStandardTime|IndianOceanTerritoryTime|IndochinaTime|IOT|IranDaylightTime|IranStandardTime|IRDT|IrishSummerTime|IRKT|IrkutskTime|IRST|IsraelDaylightTime|IsraelStandardTime|IST|JapanStandardTime|JST|KGT|KirgizstanTime|KoreaStandardTime|KosraeTime|KOST|KostanayStandardTime|KrasnoyarskTime|KRAT|KST|LHDT|LHST|LineIs\\.Time|LINT|LordHoweDaylightTime|LordHoweStandardTime|MacquarieIslandDaylightTime|MacquarieIslandStandardTime|MagadanTime|MAGT|MalaysiaTime|MaldivesTime|MarquesasTime|MarshallIslandsTime|MART|MauritiusTime|MawsonTime|MAWT|MDT|MEST|MET|MHT|MiddleEuropeSummerTime|MiddleEuropeTime|MIDT|MIST|MMT|MoscowStandardTime|MountainDaylightTime|MountainStandardTime|MSK|MST|MUT|MVT|MyanmarTime|MYT|NauruTime|NCT|NDT|NepalTime|NewCaledoniaTime|NewZealandDaylightTime|NewZealandStandardTime|NewfoundlandDaylightTime|NewfoundlandStandardTime|NFST|NFT|NiueTime|NorfolkSummerTime|NorfolkTime|NovosibirskTime|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OmskTime|OMST|OralTime|ORAT|PacificDaylightTime|PacificStandardTime|PakistanTime|PalauTime|PapuaNewGuineaTime|ParaguaySummerTime|ParaguayTime|PDT|PeruTime|PET|Petropavlovsk-KamchatskiTime|PETT|PGT|PhilippinesStandardTime|PhoenixIs\\.Time|PHOT|Pierre&MiquelonDaylightTime|Pierre&MiquelonStandardTime|PitcairnStandardTime|PKT|PMDT|PMST|PohnpeiTime|PONT|PST|PWT|PYST|PYT|QOST|QYZT|QyzylordaTime|RET|ReunionTime|RotheraTime|ROTT|SakhalinTime|SAKT|SamaraTime|SamoaStandardTime|SAMT|SAST|SBT|SCT|SeychellesTime|SGT|SingaporeTime|SolomonIs\\.Time|SouthAfricaStandardTime|SouthGeorgiaStandardTime|SrednekolymskTime|SRET|SRT|SST|SurinameTime|SYOT|SyowaTime|TahitiTime|TAHT|TajikistanTime|TFT|Timor-LesteTime|TJT|TKT|TLT|TMT|TokelauTime|TongaTime|TOT|TRT|TurkeyTime|TurkmenistanTime|TuvaluTime|TVT|UlaanbaatarTime|ULAT|UruguayTime|Ust-NeraTime|UTC|UYT|UzbekistanTime|UZT|VanuatuTime|VenezuelaTime|VET|VladivostokTime|VLAT|VOST|VostokTime|VUT|WakeTime|WAKT|Wallis&FutunaTime|WAT|WEST|WestIndonesiaTime|WestSamoaDaylightTime|WestSamoaStandardTime|WesternAfricanTime|WesternEuropeanSummerTime|WesternEuropeanTime|WesternGreenlandSummerTime|WesternGreenlandTime|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XinjiangStandardTime|XJT|YAKT|YakutskTime|YekaterinburgTime|YEKT):
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("GMTBST", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GPv;O:$U9/");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("@\u0002.99v.", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(4093);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("GPv;O:$U9/", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-32), "9#+0IpZo8:]uDS5\"");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("9#+0IpZo8:]uDS5\"", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("gCa\"$uys`", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("z", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("GMTBST", parsePosition0);
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GPv;O:$U9/");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("Z`:ue!Sd*?", timeZone0, locale0);
      assertEquals("Z`:ue!Sd*?", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("wPv;O:$U9/");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("{MI+C&t0g:r&xn", timeZone0, locale0);
      assertEquals("{MI+C&t0g:r&xn", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("D<KnJ295|z", timeZone0, locale0);
      assertEquals("D<KnJ295|z", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("K*jgq");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("~^d;-9f0Ln(", timeZone0, locale0);
      assertEquals("~^d;-9f0Ln(", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("A<I*H#ITQwG(Q{;u7c");
      Locale locale0 = new Locale("A<I*H#ITQwG(Q{;u7c");
      FastDateParser fastDateParser0 = new FastDateParser("8h|'IJ", timeZone0, locale0);
      assertEquals("8h|'IJ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("K*jgq");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("7rV@|", timeZone0, locale0);
      assertEquals("7rV@|", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      TimeZone timeZone0 = TimeZone.getTimeZone("#M\"");
      FastDateParser fastDateParser0 = new FastDateParser("5d'WQ$.2v@f", timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("K*jgq");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("4vERG", timeZone0, locale0);
      assertEquals("4vERG", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      TimeZone timeZone0 = TimeZone.getTimeZone("E2t-C*Q");
      FastDateParser fastDateParser0 = new FastDateParser("E2t-C*Q", timeZone0, locale0);
      assertEquals("E2t-C*Q", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("uQ");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("+;#D-W1", timeZone0, locale0);
      assertEquals("+;#D-W1", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4), "9#+0IpZo8:]uYS5\"");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("!.E/{", simpleTimeZone0, locale0);
      assertEquals("!.E/{", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ECT");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(".", timeZone0, locale0);
      assertEquals(".", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("K*jgq");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser(",", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("yi60[G", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("7j2)9Swx&GY.");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("FasDateParser[", timeZone0, locale0);
      assertEquals("FasDateParser[", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.UK;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser(">2>W|>", timeZone0, locale0);
      assertEquals(">2>W|>", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("uQ");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("^(ly7B!h&r", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(3697);
      assertEquals(5597, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-32), "");
      Locale locale0 = new Locale("K*s?)\"bQx[Oqz");
      FastDateParser fastDateParser0 = new FastDateParser("K*s?)\"bQx[Oqz", simpleTimeZone0, locale0);
      assertEquals("K*s?)\"bQx[Oqz", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("d$H_T,3");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("d$H_T,3", timeZone0, locale0);
      assertEquals("d$H_T,3", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "Z:'H{&$$JYgZb5#,jH", 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2);
      FastDateParser fastDateParser0 = new FastDateParser("k  3f?1D<nQM*iUf", simpleTimeZone0, locale0);
      assertEquals("k  3f?1D<nQM*iUf", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Mz%]K=w3");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("Mz%]K=w3", timeZone0, locale0);
      try { 
        fastDateParser0.parse("Mz%]K=w3");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"Mz%]K=w3\" does not match (\\p{IsNd}++)(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville\\s*+Standard\\s*+Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay\\s*+Standard\\s*+Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|ORAT|PDT|PET|PETT|PGT|Philippines\\s*+Standard\\s*+Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk\\s*+Time|SRET|SRT|SST|SYOT|TAHT|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT|\u30A2\u30A4\u30EB\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u30A2\u30AF\u30BF\u30A6\u6642\u9593|\u30A2\u30AF\u30C8\u30D9\u6642\u9593|\u30A2\u30AF\u30EC\u6642\u9593|\u30A2\u30BC\u30EB\u30D0\u30A4\u30B8\u30E3\u30F3\u6642\u9593|\u30A2\u30BE\u30EC\u30B9\u590F\u6642\u9593|\u30A2\u30BE\u30EC\u30B9\u6642\u9593|\u30A2\u30CA\u30C9\u30A5\u30A4\u30EA\u6642\u9593|\u30A2\u30D5\u30AC\u30CB\u30B9\u30BF\u30F3\u6642\u9593|\u30A2\u30DE\u30BE\u30F3\u6642\u9593|\u30A2\u30E9\u30B9\u30AB\u590F\u6642\u9593|\u30A2\u30E9\u30B9\u30AB\u6A19\u6E96\u6642|\u30A2\u30E9\u30D3\u30A2\u6A19\u6E96\u6642|\u30A2\u30EB\u30BC\u30F3\u30C1\u30F3\u6642\u9593|\u30A2\u30EB\u30DE\u30A2\u30BF\u6642\u9593|\u30A2\u30EB\u30E1\u30CB\u30A2\u6642\u9593|\u30A4\u30B9\u30E9\u30A8\u30EB\u590F\u6642\u9593|\u30A4\u30B9\u30E9\u30A8\u30EB\u6A19\u6E96\u6642|\u30A4\u30E9\u30F3\u590F\u6642\u9593|\u30A4\u30E9\u30F3\u6A19\u6E96\u6642|\u30A4\u30EB\u30AF\u30FC\u30C4\u30AF\u6642\u9593|\u30A4\u30F3\u30C9\u30B7\u30CA\u6642\u9593|\u30A4\u30F3\u30C9\u6A19\u6E96\u6642|\u30A4\u30F3\u30C9\u6D0B\u5730\u57DF\u6642\u9593|\u30A4\u30FC\u30B9\u30BF\u30FC\u5CF6\u590F\u6642\u9593|\u30A4\u30FC\u30B9\u30BF\u30FC\u5CF6\u6642\u9593|\u30A6\u30A7\u30FC\u30AF\u6642\u9593|\u30A6\u30B9\u30C1\u30CD\u30E9\u6642\u9593|\u30A6\u30BA\u30D9\u30AD\u30B9\u30BF\u30F3\u6642\u9593|\u30A6\u30E9\u30B8\u30AA\u30B9\u30C8\u30AF\u6642\u9593|\u30A6\u30E9\u30FC\u30F3\u30D0\u30FC\u30C8\u30EB\u6642\u9593|\u30A6\u30EB\u30B0\u30A2\u30A4\u6642\u9593|\u30A8\u30AB\u30C6\u30EA\u30F3\u30D6\u30EB\u30B0\u6642\u9593|\u30A8\u30AF\u30A2\u30C9\u30EB\u6642\u9593|\u30AA\u30E0\u30B9\u30AF\u6642\u9593|\u30AA\u30E9\u30EB\u6642\u9593|\u30AB\u30FC\u30DC\u30D9\u30EB\u30C7\u6642\u9593|\u30AC\u30A4\u30A2\u30CA\u6642\u9593|\u30AC\u30E9\u30D1\u30B4\u30B9\u6642\u9593|\u30AC\u30F3\u30D3\u30A2\u6642\u9593|\u30AC\u30FC\u30CA\u6A19\u6E96\u6642|\u30AD\u30B8\u30EB\u30AA\u30EB\u30C0\u6642\u9593|\u30AD\u30E5\u30FC\u30D0\u590F\u6642\u9593|\u30AD\u30E5\u30FC\u30D0\u6A19\u6E96\u6642|\u30AD\u30EB\u30AE\u30B9\u30BF\u30F3\u6642\u9593|\u30AE\u30EB\u30D0\u30FC\u30C8\u8AF8\u5CF6\u6642\u9593|\u30AF\u30C3\u30AF\u8AF8\u5CF6\u6642\u9593|\u30AF\u30E9\u30B9\u30CE\u30E4\u30EB\u30B9\u30AF\u6642\u9593|\u30AF\u30EA\u30B9\u30DE\u30B9\u8AF8\u5CF6\u6642\u9593|\u30B0\u30A2\u30E0\u6A19\u6E96\u6642|\u30B0\u30EA\u30CB\u30C3\u30B8\u6A19\u6E96\u6642|\u30B0\u30EB\u30B8\u30A2\u6642\u9593|\u30B3\u30B3\u30B9\u8AF8\u5CF6\u6642\u9593|\u30B3\u30B9\u30E9\u30A8\u6642\u9593|\u30B3\u30ED\u30F3\u30D3\u30A2\u6642\u9593|\u30B5\u30DE\u30E9\u6642\u9593|\u30B5\u30E2\u30A2\u6A19\u6E96\u6642|\u30B5\u30F3\u30D4\u30A8\u30FC\u30EB\u30FB\u30DF\u30AF\u30ED\u30F3\u8AF8\u5CF6\u590F\u6642\u9593|\u30B5\u30F3\u30D4\u30A8\u30FC\u30EB\u30FB\u30DF\u30AF\u30ED\u30F3\u8AF8\u5CF6\u6A19\u6E96\u6642|\u30B7\u30F3\u30AC\u30DD\u30FC\u30EB\u6642\u9593|\u30B9\u30EA\u30CA\u30E0\u6642\u9593|\u30BB\u30A4\u30B7\u30A7\u30EB\u6642\u9593|\u30BD\u30ED\u30E2\u30F3\u8AF8\u5CF6\u6642\u9593|\u30BF\u30B8\u30AD\u30B9\u30BF\u30F3\u6642\u9593|\u30BF\u30D2\u30C1\u6642\u9593|\u30C1\u30E3\u30BF\u30E0\u590F\u6642\u9593|\u30C1\u30E3\u30BF\u30E0\u6A19\u6E96\u6642|\u30C1\u30E5\u30FC\u30AF\u6642\u9593|\u30C1\u30E7\u30A4\u30D0\u30EB\u30B5\u30F3\u6642\u9593|\u30C1\u30EA\u590F\u6642\u9593|\u30C1\u30EA\u6642\u9593|\u30C4\u30D0\u30EB\u6642\u9593|\u30C7\u30A4\u30D3\u30B9\u6642\u9593|\u30C7\u30E5\u30E2\u30F3\u30C7\u30E5\u30EB\u30F4\u30A3\u30EB\u6642\u9593|\u30C8\u30B1\u30E9\u30A6\u8AF8\u5CF6\u6642\u9593|\u30C8\u30EB\u30AF\u30E1\u30CB\u30B9\u30BF\u30F3\u6642\u9593|\u30C8\u30F3\u30AC\u6642\u9593|\u30CA\u30A6\u30EB\u6642\u9593|\u30CB\u30A6\u30A8\u5CF6\u6642\u9593|\u30CB\u30E5\u30FC\u30AB\u30EC\u30C9\u30CB\u30A2\u6642\u9593|\u30CB\u30E5\u30FC\u30B8\u30FC\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u30CB\u30E5\u30FC\u30B8\u30FC\u30E9\u30F3\u30C9\u6A19\u6E96\u6642|\u30CB\u30E5\u30FC\u30D5\u30A1\u30F3\u30C9\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u30CB\u30E5\u30FC\u30D5\u30A1\u30F3\u30C9\u30E9\u30F3\u30C9\u6A19\u6E96\u6642|\u30CD\u30D1\u30FC\u30EB\u6642\u9593|\u30CE\u30DC\u30B7\u30D3\u30EB\u30B9\u30AF\u6642\u9593|\u30CE\u30FC\u30D5\u30A9\u30FC\u30AF\u590F\u6642\u9593|\u30CE\u30FC\u30D5\u30A9\u30FC\u30AF\u6642\u9593|\u30CF\u30EF\u30A4\u590F\u6642\u9593|\u30CF\u30EF\u30A4\u6A19\u6E96\u6642|\u30D0\u30CC\u30A2\u30C4\u6642\u9593|\u30D0\u30F3\u30B0\u30E9\u30C7\u30B7\u30E5\u6642\u9593|\u30D1\u30AD\u30B9\u30BF\u30F3\u6642\u9593|\u30D1\u30D7\u30A2\u30CB\u30E5\u30FC\u30AE\u30CB\u30A2\u6642\u9593|\u30D1\u30E9\u30AA\u6642\u9593|\u30D1\u30E9\u30B0\u30A2\u30A4\u590F\u6642\u9593|\u30D1\u30E9\u30B0\u30A2\u30A4\u6642\u9593|\u30D4\u30C8\u30B1\u30EB\u30F3\u5CF6\u6A19\u6E96\u6642|\u30D5\u30A3\u30B8\u30FC\u590F\u6642\u9593|\u30D5\u30A3\u30B8\u30FC\u6642\u9593|\u30D5\u30A7\u30CB\u30C3\u30AF\u30B9\u8AF8\u5CF6\u6642\u9593|\u30D5\u30A7\u30EB\u30CA\u30F3\u30C9\u30FB\u30C7\u30FB\u30CE\u30ED\u30FC\u30CB\u30E3\u6642\u9593|\u30D5\u30A9\u30FC\u30AF\u30E9\u30F3\u30C9\u8AF8\u5CF6\u6642\u9593|\u30D6\u30E9\u30B8\u30EB\u6642\u9593|\u30D6\u30EB\u30CD\u30A4\u6642\u9593|\u30D6\u30FC\u30BF\u30F3\u6642\u9593|\u30D9\u30CD\u30BA\u30A8\u30E9\u6642\u9593|\u30DA\u30C8\u30ED\u30D1\u30D6\u30ED\u30D5\u30B9\u30AF\u30AB\u30E0\u30C1\u30E3\u30C4\u30AD\u30FC\u6642\u9593|\u30DA\u30EB\u30FC\u6642\u9593|\u30DB\u30D6\u30C9\u6642\u9593|\u30DC\u30B9\u30C8\u30FC\u30AF\u57FA\u5730\u6642\u9593|\u30DC\u30EA\u30D3\u30A2\u6642\u9593|\u30DD\u30F3\u30DA\u30A4\u6642\u9593|\u30DE\u30AC\u30C0\u30F3\u6642\u9593|\u30DE\u30C3\u30B3\u30FC\u30EA\u30FC\u5CF6\u590F\u6642\u9593|\u30DE\u30C3\u30B3\u30FC\u30EA\u30FC\u5CF6\u6642\u9593|\u30DE\u30EB\u30B1\u30B5\u30B9\u6642\u9593|\u30DE\u30EC\u30FC\u30B7\u30A2\u6642\u9593|\u30DE\u30FC\u30B7\u30E3\u30EB\u5CF6\u6642\u9593|\u30DF\u30E3\u30F3\u30DE\u30FC\u6642\u9593|\u30E2\u30B9\u30AF\u30EF\u6A19\u6E96\u6642|\u30E2\u30EB\u30B8\u30D6\u6642\u9593|\u30E2\u30FC\u30BD\u30F3\u6642\u9593|\u30E2\u30FC\u30EA\u30B7\u30E3\u30B9\u6642\u9593|\u30E4\u30AF\u30FC\u30C4\u30AF\u6642\u9593|\u30E9\u30A4\u30F3\u8AF8\u5CF6\u6642\u9593|\u30EC\u30E6\u30CB\u30AA\u30F3\u6642\u9593|\u30ED\u30BC\u30E9\u6642\u9593|\u30ED\u30FC\u30C9\u30CF\u30A6\u5CF6\u590F\u6642\u9593|\u30ED\u30FC\u30C9\u30CF\u30A6\u5CF6\u6A19\u6E96\u6642|\u30EF\u30EA\u30B9\u53CA\u3073\u30D5\u30C4\u30CA\u6642\u9593|\u4E2D\u56FD\u6A19\u6E96\u6642|\u4E2D\u592E\u30A4\u30F3\u30C9\u30CD\u30B7\u30A2\u6642\u9593|\u4E2D\u897F\u90E8\u6A19\u6E96\u6642\\(\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2\\)|\u4E2D\u90E8\u30A2\u30D5\u30EA\u30AB\u6642\u9593|\u4E2D\u90E8\u30E8\u30FC\u30ED\u30C3\u30D1\u590F\u6642\u9593|\u4E2D\u90E8\u30E8\u30FC\u30ED\u30C3\u30D1\u6642\u9593|\u4E2D\u90E8\u590F\u6642\u9593|\u4E2D\u90E8\u590F\u6642\u9593\\(\u5357\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2\\)|\u4E2D\u90E8\u590F\u6642\u9593\\(\u5357\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2/\u30CB\u30E5\u30FC\u30B5\u30A6\u30B9\u30A6\u30A7\u30FC\u30EB\u30BA\\)|\u4E2D\u90E8\u6A19\u6E96\u6642|\u4E2D\u90E8\u6A19\u6E96\u6642\\(\u30CE\u30FC\u30B6\u30F3\u30C6\u30EA\u30C8\u30EA\u30FC\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\\(\u5357\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\\(\u5357\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2/\u30CB\u30E5\u30FC\u30B5\u30A6\u30B9\u30A6\u30A7\u30FC\u30EB\u30BA\\)|\u4ECF\u5357\u65B9\u9818\u304A\u3088\u3073\u5357\u6975\u6642\u9593|\u4ECF\u9818\u30AE\u30A2\u30CA\u6642\u9593|\u5354\u5B9A\u4E16\u754C\u6642|\u5357\u30A2\u30D5\u30EA\u30AB\u6A19\u6E96\u6642|\u5357\u30B8\u30E7\u30FC\u30B8\u30A2\u5CF6\u6A19\u6E96\u6642|\u5927\u897F\u6D0B\u590F\u6642\u9593|\u5927\u897F\u6D0B\u6A19\u6E96\u6642|\u592A\u5E73\u6D0B\u590F\u6642\u9593|\u592A\u5E73\u6D0B\u6A19\u6E96\u6642|\u5C71\u5730\u590F\u6642\u9593|\u5C71\u5730\u6A19\u6E96\u6642|\u65E5\u672C\u6A19\u6E96\u6642|\u662D\u548C\u57FA\u5730\u6642\u9593|\u6771\u30A2\u30D5\u30EA\u30AB\u6642\u9593|\u6771\u30A4\u30F3\u30C9\u30CD\u30B7\u30A2\u6642\u9593|\u6771\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u6771\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9\u6642\u9593|\u6771\u30C6\u30A3\u30E2\u30FC\u30EB\u6642\u9593|\u6771\u30E8\u30FC\u30ED\u30C3\u30D1\u590F\u6642\u9593|\u6771\u30E8\u30FC\u30ED\u30C3\u30D1\u6642\u9593|\u6771\u90E8\u590F\u6642\u9593|\u6771\u90E8\u590F\u6642\u9593\\(\u30BF\u30B9\u30DE\u30CB\u30A2\\)|\u6771\u90E8\u590F\u6642\u9593\\(\u30CB\u30E5\u30FC\u30B5\u30A6\u30B9\u30A6\u30A7\u30FC\u30EB\u30BA\\)|\u6771\u90E8\u590F\u6642\u9593\\(\u30D3\u30AF\u30C8\u30EA\u30A2\\)|\u6771\u90E8\u6A19\u6E96\u6642|\u6771\u90E8\u6A19\u6E96\u6642\\(\u30AF\u30A4\u30FC\u30F3\u30BA\u30E9\u30F3\u30C9\\)|\u6771\u90E8\u6A19\u6E96\u6642\\(\u30BF\u30B9\u30DE\u30CB\u30A2\\)|\u6771\u90E8\u6A19\u6E96\u6642\\(\u30CB\u30E5\u30FC\u30B5\u30A6\u30B9\u30A6\u30A7\u30FC\u30EB\u30BA\\)|\u6771\u90E8\u6A19\u6E96\u6642\\(\u30D3\u30AF\u30C8\u30EA\u30A2\\)|\u6A3A\u592A\u6642\u9593|\u6E7E\u5CB8\u6A19\u6E96\u6642|\u82F1\u56FD\u590F\u6642\u9593|\u897F\u30A2\u30D5\u30EA\u30AB\u6642\u9593|\u897F\u30A4\u30F3\u30C9\u30CD\u30B7\u30A2\u6642\u9593|\u897F\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u897F\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9\u6642\u9593|\u897F\u30B5\u30E2\u30A2\u590F\u6642\u9593|\u897F\u30B5\u30E2\u30A2\u6642\u9593|\u897F\u30E8\u30FC\u30ED\u30C3\u30D1\u590F\u6642\u9593|\u897F\u30E8\u30FC\u30ED\u30C3\u30D1\u6642\u9593|\u897F\u90E8\u6A19\u6E96\u6642\\(\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2\\)|\u97D3\u56FD\u6A19\u6E96\u6642|\u9999\u6E2F\u6642\u9593)%\\](\\p{IsNd}++)=(\\p{IsNd}{1}+)3
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(":_q$VW}K8nQ", timeZone0, locale0);
      try { 
        fastDateParser0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match :_
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4), "9#+0IpZo8:]uYS5\"");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("Mr<WtLg^K ", simpleTimeZone0, locale0);
      Locale locale1 = Locale.JAPAN;
      FastDateParser fastDateParser1 = new FastDateParser("Mr<WtLg^K ", simpleTimeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(30, "F{");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("F{", simpleTimeZone0, locale0);
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$TextStrategy");
      FastDateParser fastDateParser1 = new FastDateParser("F{", timeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(37, "K");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("Kr<W[tLgr", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("K", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.US;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "Z:'H{&$$JYgZb5#,jH", 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2);
      FastDateParser fastDateParser0 = new FastDateParser("Z:'H{&$$JYgZb5#,jH", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ECT");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("ECT", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ECT");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Q=}-^ORWBRg'F%we|", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("H");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("H", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parseObject("v3`6 Ix b;f'Lvo", parsePosition0);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-32), "9#+0IpZo8:]uYS5\"");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("9#+0IpZo8:]uYS5\"", simpleTimeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("9#\\+0", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-32), "9#+0IpZo8:]uYS5\"");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("9#+0IpZo8:]uYS5\"", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("K*jgq");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("y)s", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("it", locale1.getLanguage());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser(" 7Xnot in (", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals(" 7Xnot in (", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("FastDateParser[");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      ParsePosition parsePosition0 = new ParsePosition(649);
      FastDateParser fastDateParser0 = new FastDateParser("\u4E2D\u56FD", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      TimeZone timeZone0 = TimeZone.getTimeZone("#M\"");
      FastDateParser fastDateParser0 = new FastDateParser("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|,zh_CN,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1119), "X");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("_~2", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(37, "K");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("Kr<W[tLgr", simpleTimeZone0, locale0);
      Date date0 = fastDateParser0.parse("3y&6%");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-32), "9#+0IpZo8:]uYS5\"");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("Mr<WtLg^K ", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("9#+0IpZo8:]uYS5\"");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("uQ");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("d6HG}WS~+u4\"e", timeZone0, locale0);
      assertEquals("d6HG}WS~+u4\"e", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("EAT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }
}
