/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:14:33 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("k(]4yyYH&dKR", timeZone0, locale0);
      assertEquals("k(]4yyYH&dKR", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      ParsePosition parsePosition0 = new ParsePosition(6);
      FastDateParser fastDateParser0 = new FastDateParser(" not in (", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject(" not in (", parsePosition0);
      assertNotNull(object0);
      assertEquals(6, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=6,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("/.R\"{K", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2778), "");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("}?6TymPKD|W9", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(41, "CAT");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("GMT", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("ECT", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(3713);
      assertEquals(5613, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(")N]']");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser(")N]']", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2896));
      assertEquals((-896), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(")N]']");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser(")N]']", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(42);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2778), "");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("}?6TymPKD|W9", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTAGT");
      FastDateParser fastDateParser0 = new FastDateParser("GMTAGT", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(32);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("doby/6xk}!;Zjjbk#Fv", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("1=V", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("FastDateParser[");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("Z{bg%nZo%&<(cfrx", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("1=V", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Date date0 = fastDateParser0.parse("1=V", parsePosition0);
      assertNull(date0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$NumberStrategy");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("}4S`", timeZone0, locale0);
      try { 
        fastDateParser0.parse("org.apache.commons.lang3.time.FastDateParser$NumberStrategy");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"org.apache.commons.lang3.time.FastDateParser$NumberStrategy\" does not match \\}4(\\p{IsNd}++)`
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("zCEkdrliC'*)o#", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("GMTAST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      TimeZone timeZone0 = TimeZone.getTimeZone("zCEkdrliC'*)o#");
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateParser fastDateParser0 = new FastDateParser("zCEkdrliC'*)o#", timeZone0, locale0);
      fastDateParser0.parse("NST", parsePosition0);
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTIST");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("D_tN#sQu\"x8:", timeZone0, locale0);
      assertEquals("D_tN#sQu\"x8:", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$NumberStrategy");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("^", timeZone0, locale0);
      assertEquals("^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$NumberStrategy");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(">.p C88IVbt>*R", timeZone0, locale0);
      assertEquals(">.p C88IVbt>*R", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("=<.(CO]5*", timeZone0, locale0);
      assertEquals("=<.(CO]5*", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser(")|z<", timeZone0, locale0);
      assertEquals(")|z<", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(";]+(`", timeZone0, locale0);
      assertEquals(";]+(`", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("EZrf|r-yZ&5<<Ar");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser(":t;", timeZone0, locale0);
      assertEquals(":t;", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("k{W8XG25z>JSA", timeZone0, locale0);
      assertEquals("k{W8XG25z>JSA", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("[w-k7PmI>", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1833);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("Z{bg%nZo%&<(cfrx", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("6v^BD@5", timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("3yvi", timeZone0, locale0);
      assertEquals("3yvi", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("2n9@-LigLoQMhy", timeZone0, locale0);
      assertEquals("2n9@-LigLoQMhy", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("1Ss+", timeZone0, locale0);
      assertEquals("1Ss+", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$NumberStrategy");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("0{s5!ImAmsS8*]L", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[0{s5!ImAmsS8*]L,fr_CA,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("EZrf|r-yZ&5<<Ar");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(".`/-z+x\"", timeZone0, locale0);
      assertEquals(".`/-z+x\"", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("[w-k4XmI>", timeZone0, locale0);
      assertEquals("[w-k4XmI>", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(")N]']");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser(")N]']", timeZone0, locale0);
      try { 
        fastDateParser0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match \\)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("yuPKSDg=>D~]oD", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parse("91ti8_v}&V`4]", parsePosition0);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("zIKkdliCX#");
      FastDateParser fastDateParser0 = new FastDateParser("yuPKSDg>D~-]oD", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("91ti8_v}&V`4]");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("|`})Gak|a~M,zmG", timeZone0, locale0);
      assertEquals("|`})Gak|a~M,zmG", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2778), "");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("}?6TymPKD|W9", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("@Vowd5_-%J9l5E3", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("~pE-XktF4ca1is2uXS?");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"~pE-XktF4ca1is2uXS?\" does not match @
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("/.R\"{K", timeZone0, locale1);
      FastDateParser fastDateParser1 = new FastDateParser("/.R\"{K", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("(The ", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2236), ",4Z9jx7]xvz`m4w_J");
      FastDateParser fastDateParser1 = new FastDateParser("(The ", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("H*&OoK.if./)'b|", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("GMTCNT", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("H*&OoK.if./)'b|", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1684), "[:-~x#");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("':HnH&8d", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(" is not a supported timezone name", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("\\s*+", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("  a", timeZone0, locale0);
      TimeZone timeZone1 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, timeZone1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("s*+", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("en", locale1.getLanguage());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("H*&OoK.if./)'b|", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("H*&OoK.if./)'b|", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("yuPKSDg=>D~]oD", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateParser0.parseObject("yuPKSDg=>D~]oD", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("EZrf|r-yZ&5<<Ar");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("d 3[1zE5G5$1W", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("m", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("3yvi");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("DmEok", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals("DmEok");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("?yzy9.13_", timeZone0, locale0);
      assertEquals("?yzy9.13_", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("zCEkdrliC'*)o#", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }
}
