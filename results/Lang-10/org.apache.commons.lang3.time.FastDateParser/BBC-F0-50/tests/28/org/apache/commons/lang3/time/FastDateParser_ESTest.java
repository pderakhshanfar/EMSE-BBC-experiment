/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 05:26:59 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("pI&huCG0p7`UVGteM");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("sf8PGCe#3U", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(361);
      assertEquals(2261, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3_,62v;Om3}u_/K6oC=E");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("3_,62v;Om3}u_/K6oC=E", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      ParsePosition parsePosition0 = new ParsePosition(0);
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("3_,62v;O}u_/K6oC=E", timeZone0, locale0);
      fastDateParser0.parseObject("3_,62v;O}u_/K6oC=E", parsePosition0);
      assertEquals(5, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=5,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^~?1");
      Locale locale0 = new Locale("SST", "SST", "ART");
      FastDateParser fastDateParser0 = new FastDateParser("^~?1", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1810), "Q;MbTJ!IYlo8g75");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("\"G4<S2VIM[dl?@yx", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("9Sj`$~1");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}{", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2287));
      assertEquals((-287), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("yw1Z");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("GMTPLT", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("yw1Z");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("\"h6 m%", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1863), "Q;MbTJ!IYlo8g75");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("\"G4<S2VIM[dl?@yx", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1863));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("(A}8&H!x", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-204), "\"G4<S2VIM[dl?@yx");
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateParser fastDateParser0 = new FastDateParser("@WDKufj<x@]c N", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("4Q");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("GMTAGT", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "cqf+@+$LD#))= ");
      FastDateParser fastDateParser0 = new FastDateParser("${=M8PH6Y?[5.y", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1810), "Q;MbTJ!IYlo8g75");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("\"G4<S2VIM[dl?@yx", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse("*N *AN");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"*N *AN\" does not match \"(ap\\.\\s*+J\\.-C\\.|ap\\.\\s*+J\\.-C\\.|BC|BC)4<(\\p{IsNd}{1}+)2
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3_,62v;Om3}u_/K6oC=E");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("JST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^~?1");
      Locale locale0 = new Locale("SST", "SST", "ART");
      FastDateParser fastDateParser0 = new FastDateParser("^~?1", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("yw1Z");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("yw1Z", timeZone0, locale0);
      assertEquals("yw1Z", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("yw1Z");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(";{Zz?i`[HF>zs>An", timeZone0, locale0);
      assertEquals(";{Zz?i`[HF>zs>An", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("pI&huCG0p7`UVGteM");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("=PPr.lZvt4P6_%J7y", timeZone0, locale0);
      assertEquals("=PPr.lZvt4P6_%J7y", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("<JST", timeZone0, locale0);
      assertEquals("<JST", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(";-)0DbOaz7");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(";-)0DbOaz7", timeZone0, locale0);
      assertEquals(";-)0DbOaz7", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTBST");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(":QS$u%{ki?l:b", timeZone0, locale0);
      assertEquals(":QS$u%{ki?l:b", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("5~vKaNs*g", timeZone0, locale0);
      assertEquals("5~vKaNs*g", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("pI&huCG0p7`UVGteM");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("05e8", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Date date0 = fastDateParser0.parse("05e8", parsePosition0);
      assertNull(date0);
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("pI&huCG0p7`UVGteM");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("/kg", timeZone0, locale0);
      assertEquals("/kg", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3_,62v;O}u_/K6oC=E");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(".eTyt&kWZ@7%V0B<", timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3_,62v;O}u_/K6oC=E");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(",", timeZone0, locale0);
      assertEquals(",", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("Z*-w1TxtWVw<HJa&-L", timeZone0, locale0);
      assertEquals("Z*-w1TxtWVw<HJa&-L", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(";-)0DbOaz7");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("),wS7Fp++V1-R$`J)", timeZone0, locale0);
      assertEquals("),wS7Fp++V1-R$`J)", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("GMTCAT", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3_,62v;O}u_/K6oC=E");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("-W}yv&9::.We", timeZone0, locale0);
      assertEquals("-W}yv&9::.We", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("yw1Z");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("_((3299a8]f5N:;", timeZone0, locale0);
      assertEquals("_((3299a8]f5N:;", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("yw1Z");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("GMTPST", timeZone0, locale0);
      try { 
        fastDateParser0.parse("yw1Z");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"yw1Z\" does not match (\u7D00\u5143\u524D|\u7D00\u5143\u524D|\u897F\u66A6|\u897F\u66A6)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}++)");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("w3E.^9*=E{'y", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("3_,62v;Om3}u_/K6oC=E");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"3_,62v;Om3}u_/K6oC=E\" does not match (\\p{IsNd}{1}+)3(dim\\.|dimanche|jeu\\.|jeudi|lun\\.|lundi|mar\\.|mardi|mer\\.|mercredi|sam\\.|samedi|ven\\.|vendredi)\\.\\^9\\*=(dim\\.|dimanche|jeu\\.|jeudi|lun\\.|lundi|mar\\.|mardi|mer\\.|mercredi|sam\\.|samedi|ven\\.|vendredi)\\{
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3_,62v;O}u_/K6oC=E");
      Locale locale0 = new Locale("3_,62v;O}u_/K6oC=E");
      Locale locale1 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("3_,62v;O}u_/K6oC=E", timeZone0, locale1);
      FastDateParser fastDateParser1 = new FastDateParser("3_,62v;O}u_/K6oC=E", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3_,62v;O}u_/K6oC=E");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(">?V)2'?qE WS!|.p]", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(5030, "");
      FastDateParser fastDateParser1 = new FastDateParser(">?V)2'?qE WS!|.p]", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3_,62v;O}u_/K6oC=E");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("3_,62v;O}u_/K6oC=E", timeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("9Sj`$~1", timeZone0, locale0);
      Integer integer0 = new Integer(8);
      boolean boolean0 = fastDateParser0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3_,62v;O}u_/K6oC=E");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(">?V)2'?qE WS!|.p]", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("T%KDaYNxx", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3_,62v;O}u_/K6oC=E");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("3_,62v;O}u_/K6oC=E", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("3_,62", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(113, "");
      FastDateParser fastDateParser0 = new FastDateParser("\"h6 m%", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=,offset=113,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3_,62v;Om3}u_/K6oC=E");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("GMTSST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3_,62v;O}u_/K6oC=E");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("3_,62v;O}u_/K6oC=E", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("TWN", locale1.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3_,62v;Om3}u_/foCPE");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("Ki<H+):V0YB9cKnfms*", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("Ki<H+):V0YB9cKnfms*", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("{+N.zh+vQz\"}Gf~#h", "mpO=2jfhy~+ $7'", "j)#>TJ");
      FastDateParser fastDateParser0 = new FastDateParser("mpO=2jfhy~+ $7'", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(94);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("T8XMV77N", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3_,62v;O}u_/K6oC=E");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("yy`Q", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[yy`Q,it,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1810), "Q;MbTJ!IYlo8g75");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("\"G4<S2VIM[dl?@yx", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3_,62v;Om3}u_/foCPE");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("Ki<H+):V0YB9cKnfms*", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(11);
      fastDateParser0.parse("Ki<H+):V0YB9cKnfms*", parsePosition0);
      assertEquals("java.text.ParsePosition[index=12,errorIndex=-1]", parsePosition0.toString());
      assertEquals(12, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("MPT", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("3k&/rJ[?vL3'Ukp?K");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(";-)0DbOaz7");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[;-)0DbOaz7,zh_TW,GMT]", timeZone0, locale0);
      assertEquals("FastDateParser[;-)0DbOaz7,zh_TW,GMT]", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3_,62v;Om3}u_/K6oC=E");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("8Kzr:1nY'", timeZone0, locale0);
      assertEquals("8Kzr:1nY'", fastDateParser0.getPattern());
  }
}
