/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 04:46:40 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(92, "(p{IsNd}{");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("m?As+3]4s59K", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2);
      Object object0 = fastDateParser0.parseObject("m?As+3]4s59K", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("#", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("#", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("#", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1863), "Q;MbTJ!IYlo8g75");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("\"G4<S2VIM[dl?@yx", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals((-1863), timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1863), "Q;MbTJ!IYlo8g75");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("\"G4<S2VIM[dl?@yx", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-3327));
      assertEquals((-1327), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("#", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("GMTPNT", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("FastDateParser[,-up6f^;L,ja_JP_JP_#u-ca-japanese,UTC]");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"FastDateParser[,-up6f^;L,ja_JP_JP_#u-ca-japanese,UTC]\" does not match (\u7D00\u5143\u524D|\u7D00\u5143\u524D|\u897F\u66A6|\u897F\u66A6)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("8=e %_");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("^9x9qoP^`84", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMTPNT", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1798);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "GMTSST");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("GMTSST", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone("vw0v");
      FastDateParser fastDateParser0 = new FastDateParser("GMTSST", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(92, "KH0");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("m$s&1t5W|C<1D#tb2(", simpleTimeZone0, locale0);
      assertEquals("m$s&1t5W|C<1D#tb2(", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("DZcy>X3v4");
      Locale locale0 = new Locale("(p{IsNd}++)");
      FastDateParser fastDateParser0 = new FastDateParser("DZcy>X3v4", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(32, "Jt]pTdPhr!Np'o<GI");
      Locale locale1 = Locale.ENGLISH;
      FastDateParser fastDateParser1 = new FastDateParser("Z=9jA8[@Q[4", simpleTimeZone0, locale1);
      int int0 = 0;
      fastDateParser1.adjustYear(int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("#", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("g(", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(92, "(p{IsNd}{");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}{", simpleTimeZone0, locale0);
      Date date0 = fastDateParser0.parse("(p{IsNd}{");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("Zrk`Z", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("CAT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z");
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("GMTCNT", parsePosition0);
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1863), "Q;MbTJ!IYlo8g75");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("`bkx@YRG2A", simpleTimeZone0, locale0);
      assertEquals("`bkx@YRG2A", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("_n w!MCFTtNP= k", timeZone0, locale0);
      assertEquals("_n w!MCFTtNP= k", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("8=e %_");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("^1In[F!La]q\"tO/7:*", timeZone0, locale0);
      assertEquals("^1In[F!La]q\"tO/7:*", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3025, "8=e %_");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(";%<1P?ZiJS>YL", simpleTimeZone0, locale0);
      assertEquals(";%<1P?ZiJS>YL", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-947), ":<FLaWWm-'*");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(":<FLaWWm-'*", simpleTimeZone0, locale0);
      assertEquals(":<FLaWWm-'*", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.UK;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser(" |D1D7srQ", timeZone0, locale0);
      assertEquals(" |D1D7srQ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1863), "Q;MbTJ!IYlo8g75");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("\"G4<S2VIM[dl?@yx", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1863));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("(A}8&H!x", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("DVxbln?");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(".LMnSDAi^%", timeZone0, locale0);
      assertEquals(".LMnSDAi^%", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(92, "Kp");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("m-s&1W5W|C<1Dztb2(", simpleTimeZone0, locale0);
      assertEquals("m-s&1W5W|C<1Dztb2(", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser(",-up6f^;L", timeZone0, locale0);
      assertEquals(",-up6f^;L", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("@|m9{JZ;&", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-1863));
      assertEquals(137, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("5O|*[Z]V+. >W");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(")8z'9 .{@g'Vvn6i", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(109);
      assertEquals(2009, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("8=e %_");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser(">m/WF6]W3", timeZone0, locale0);
      assertEquals(">m/WF6]W3", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("8=e %_");
      Locale locale0 = new Locale("8=e %_");
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone("vw0v");
      FastDateParser fastDateParser0 = new FastDateParser("*@F$%U", timeZone0, locale0);
      assertEquals("*@F$%U", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("Zrk`Z", timeZone0, locale0);
      try { 
        fastDateParser0.parse("Invalid pattern");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"Invalid pattern\" does not match (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre\\s*+\u6642\u9593|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|Alma-Ata\\s*+\u6642\u9593|ALMT|AMT|ANAT|Aqtau\\s*+\u6642\u9593|Aqtobe\\s*+\u6642\u9593|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville\\s*+Standard\\s*+Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|Dumont-d'Urville\\s*+\u6642\u9593|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|Irkutsk\\s*+\u6642\u9593|IRST|IST|JST|KGT|Kirgizstan\\s*+\u6642\u9593|Kosrae\\s*+\u6642\u9593|KOST|Kostanay\\s*+Standard\\s*+Time|KRAT|KST|LHDT|LHST|Line\\s*+Is\\.\\s*+\u6642\u9593|LINT|Magadan\\s*+\u6642\u9593|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|Novosibirsk\\s*+\u6642\u9593|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|ORAT|PDT|PET|Petropavlovsk-Kamchatski\\s*+\u6642\u9593|PETT|PGT|Philippines\\s*+Standard\\s*+Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda\\s*+\u6642\u9593|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk\\s*+Time|SRET|SRT|SST|SYOT|TAHT|TFT|TJT|TKT|TLT|TMT|TOT|TST|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|Yekaterinburg\\s*+\u6642\u9593|YEKT|\u4E0D\u4E39\u6642\u9593|\u4E2D\u5370\u5EA6\u5C3C\u897F\u4E9E\u6642\u9593|\u4E2D\u570B\u6A19\u6E96\u6642\u9593|\u4E2D\u592E\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u4E2D\u592E\u6A19\u6E96\u6642\u9593|\u4E2D\u6B50\u590F\u4EE4\u6642\u9593|\u4E2D\u6B50\u6642\u9593|\u4E2D\u897F\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\\)|\u4E2D\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\u5357\u5340\\)|\u4E2D\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\u5357\u5340/\u65B0\u5357\u5A01\u723E\u65AF\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u5317\u90E8\u5404\u5730\u5340\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\u5357\u5340/\u65B0\u5357\u5A01\u723E\u65AF\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\u5357\u90E8\\)|\u4E2D\u975E\u6642\u9593|\u4E9E\u585E\u62DC\u7136\u6642\u9593|\u4E9E\u5EAB\u6B21\u514B\u6642\u9593|\u4E9E\u7F8E\u5C3C\u4E9E\u6642\u9593|\u4E9E\u901F\u723E\u7FA4\u5CF6\u590F\u4EE4\u6642\u9593|\u4E9E\u901F\u723E\u7FA4\u5CF6\u6642\u9593|\u4E9E\u99AC\u905C\u6642\u9593|\u4EE5\u8272\u5217\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u4EE5\u8272\u5217\u6A19\u6E96\u6642\u9593|\u4F0A\u6717\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u4F0A\u6717\u6A19\u6E96\u6642\u9593|\u4F5B\u5FB7\u89D2\u6642\u9593|\u4F5B\u65AF\u6258\\s*+\\(Vostok\\)\\s*+\u6642\u9593|\u4FAF\u5FB7\\s*+\\(Hovd\\)\\s*+\u6642\u9593|\u514B\u62C9\u65AF\u8AFE\u4E9E\u723E\u65AF\u514B\u6642\u9593|\u52A0\u62C9\u5DF4\u54E5\u6642\u9593|\u5354\u8ABF\u4E16\u754C\u6642\u9593|\u5357\u55AC\u6CBB\u4E9E\u6A19\u6E96\u6642\u9593|\u5357\u975E\u6A19\u6E96\u6642\u9593|\u5370\u5EA6\u652F\u90A3\u6642\u9593|\u5370\u5EA6\u6A19\u6E96\u6642\u9593|\u5370\u5EA6\u6D0B\u5730\u5340\u6642\u9593|\u5384\u74DC\u591A\u723E\u6642\u9593|\u53E4\u5DF4\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u53E4\u5DF4\u6A19\u6E96\u6642\u9593|\u53EF\u53EF\u65AF\u7FA4\u5CF6\u6642\u9593|\u53F0\u7063\u6A19\u6E96\u6642\u9593|\u5409\u4F2F\u7279\u7FA4\u5CF6\u6642\u9593|\u5410\u9B6F\u74E6\u6642\u9593|\u54E5\u502B\u6BD4\u4E9E\u6642\u9593|\u55AC\u6CBB\u4E9E\u6642\u9593|\u571F\u5EAB\u66FC\u6642\u9593|\u5854\u5409\u514B\u6642\u9593|\u585E\u5E2D\u723E\u7FA4\u5CF6\u6642\u9593|\u590F\u5A01\u5937\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u590F\u5A01\u5937\u6A19\u6E96\u6642\u9593|\u5915\u6B50\u74E6\\s*+\\(Syowa\\)\\s*+\u6642\u9593|\u5927\u6EAA\u5730\u5CF6\u6642\u9593|\u5927\u897F\u6D0B\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u5927\u897F\u6D0B\u6A19\u6E96\u6642\u9593|\u592A\u5E73\u6D0B\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u592A\u5E73\u6D0B\u6A19\u6E96\u6642\u9593|\u59D4\u5167\u745E\u62C9\u6642\u9593|\u5A01\u514B\u6642\u9593|\u5B5F\u52A0\u62C9\u6642\u9593|\u5C3C\u6CCA\u723E\u6642\u9593|\u5C71\u5340\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u5C71\u5340\u6A19\u6E96\u6642\u9593|\u5DE7\u5DF4\u5C71\\s*+\\(Choibalsan\\)\\s*+\u6642\u9593|\u5DF4\u57FA\u65AF\u5766\u6642\u9593|\u5DF4\u5E03\u4E9E\u65B0\u5E7E\u5167\u4E9E\u6642\u9593|\u5DF4\u62C9\u572D\u590F\u4EE4\u6642\u9593|\u5DF4\u62C9\u572D\u6642\u9593|\u5DF4\u897F\u5229\u4E9E\u6642\u9593|\u5E1B\u7409\u6642\u9593|\u5EAB\u502B\u6642\u9593|\u5EAB\u514B\u7FA4\u5CF6\u6642\u9593|\u5EAB\u9801\u5CF6\u6642\u9593|\u5FA9\u6D3B\u5CF6\u590F\u4EE4\u6642\u9593|\u5FA9\u6D3B\u5CF6\u6642\u9593|\u611B\u723E\u862D\u590F\u4EE4\u6642\u9593|\u6240\u7F85\u9580\u7FA4\u5CF6\u6642\u9593|\u6258\u514B\u52DE\u7FA4\u5CF6\u6642\u9593|\u6469\u91CC\u897F\u65AF\u6642\u9593|\u6590\u6FDF\u590F\u4EE4\u6642\u9593|\u6590\u6FDF\u6642\u9593|\u65B0\u52A0\u52D2\u591A\u5C3C\u4E9E\u6642\u9593|\u65B0\u52A0\u5761\u6642\u9593|\u65E5\u672C\u6A19\u6E96\u6642\u9593|\u667A\u5229\u590F\u4EE4\u6642\u9593|\u667A\u5229\u6642\u9593|\u6771\u52A0\u6642\u9593|\u6771\u5370\u5EA6\u5C3C\u897F\u4E9E\u6642\u9593|\u6771\u5E1D\u6C76\u6642\u9593|\u6771\u65B9\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u6771\u65B9\u6A19\u6E96\u6642\u9593|\u6771\u683C\u6797\u5CF6\u590F\u4EE4\u6642\u9593|\u6771\u683C\u6797\u5CF6\u6642\u9593|\u6771\u6B50\u590F\u4EE4\u6642\u9593|\u6771\u6B50\u6642\u9593|\u6771\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u5854\u65AF\u6885\u5C3C\u4E9E\u5CF6\\)|\u6771\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u65B0\u5357\u5A01\u723E\u65AF\\)|\u6771\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u7DAD\u591A\u5229\u4E9E\u90A6\\)|\u6771\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u5854\u65AF\u6885\u5C3C\u4E9E\u5CF6\\)|\u6771\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u65B0\u5357\u5A01\u723E\u65AF\\)|\u6771\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6606\u58EB\u862D\\)|\u6771\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u7DAD\u591A\u5229\u4E9E\u90A6\\)|\u6771\u975E\u6642\u9593|\u67E5\u5766\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u67E5\u5766\u6A19\u6E96\u6642\u9593|\u67E5\u83AB\u6D1B\u6A19\u6E96\u6642\u9593|\u683C\u6797\u5A01\u6CBB\u5E73\u5747\u6642\u9593|\u683C\u6797\u5A01\u6CBB\u6642\u9593|\u695A\u514B\u6642\u9593|\u6B50\u4F5B\u6642\u9593|\u6B50\u59C6\u65AF\u514B\\s*+\\(Omsk\\)\\s*+\u6642\u9593|\u6C76\u840A\u6642\u9593|\u6C99\u99AC\u62C9\u6642\u9593|\u6CD5\u570B\u5357\u534A\u7403\u53CA\u5357\u6975\u5C6C\u5730\u6642\u9593|\u6CD5\u5C6C\u572D\u4E9E\u90A3\u6642\u9593|\u6CE2\u65AF\u7063\u6A19\u6E96\u6642\u9593|\u6CE2\u7D0D\u4F69\u6642\u9593|\u6D77\u53C3\u5D34\u6642\u9593|\u70CF\u62C9\u572D\u6642\u9593|\u70CF\u65AF\u5167\u62C9\\s*+\\(Ust-Nera\\)\\s*+\u6642\u9593|\u70CF\u8332\u5225\u514B\u65AF\u5766\u6642\u9593|\u73BB\u5229\u7DAD\u4E9E\u6642\u9593|\u74E6\u5229\u65AF\u53CA\u798F\u675C\u7D0D\u7FA4\u5CF6\u6642\u9593|\u74E6\u5974\u963F\u5716\u6642\u9593|\u7518\u6BD4\u723E\u6642\u9593|\u7559\u5C3C\u65FA\u5CF6\u6642\u9593|\u76AE\u57C3\u723E\u5CF6\u53CA\u5BC6\u514B\u9686\u5CF6\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u76AE\u57C3\u723E\u5CF6\u53CA\u5BC6\u514B\u9686\u5CF6\u6A19\u6E96\u6642\u9593|\u76AE\u7279\u5EB7\u6A19\u6E96\u6642\u9593|\u7955\u9B6F\u6642\u9593|\u798F\u514B\u862D\u7FA4\u5CF6\u6642\u9593|\u7D10\u5A01\u5CF6\u6642\u9593|\u7D10\u82AC\u862D\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u7D10\u82AC\u862D\u6A19\u6E96\u6642\u9593|\u7D10\u897F\u862D\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u7D10\u897F\u862D\u6A19\u6E96\u6642\u9593|\u7DEC\u7538\u6642\u9593|\u7F85\u897F\u62C9\u6642\u9593|\u8056\u8A95\u5CF6\u6642\u9593|\u81FA\u7DAD\u65AF\u6642\u9593|\u82F1\u570B\u590F\u4EE4\u6642\u9593|\u83AB\u65AF\u79D1\u6A19\u6E96\u6642\u9593|\u83AB\u68EE\u6642\u9593|\u83F2\u5C3C\u514B\u65AF\u7FA4\u5CF6\u6642\u9593|\u84CB\u4E9E\u90A3\u6642\u9593|\u85A9\u6469\u4E9E\u6A19\u6E96\u6642\u9593|\u8607\u5229\u5357\u6642\u9593|\u897F\u5370\u5C3C\u6642\u9593|\u897F\u683C\u6797\u862D\u5CF6\u590F\u4EE4\u6642\u9593|\u897F\u683C\u6797\u862D\u5CF6\u6642\u9593|\u897F\u6B50\u590F\u4EE4\u6642\u9593|\u897F\u6B50\u6642\u9593|\u897F\u85A9\u6469\u4E9E\u590F\u4EE4\u6642\u9593|\u897F\u85A9\u6469\u4E9E\u6642\u9593|\u897F\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\\)|\u897F\u975E\u6642\u9593|\u8AFE\u798F\u514B\u590F\u4EE4\u6642\u9593|\u8AFE\u798F\u514B\u6642\u9593|\u8AFE\u9B6F\u6642\u9593|\u8C6A\u52F3\u7235\u5CF6\u590F\u4EE4\u6642\u9593|\u8C6A\u52F3\u7235\u5CF6\u6A19\u6E96\u6642\u9593|\u8CBB\u723E\u5357\u591A-\u8FEA\u8AFE\u7F85\u5C3C\u4E9E\u6642\u9593|\u8FE6\u7D0D\u5E73\u5747\u6642\u9593|\u963F\u5BCC\u6C57\u6642\u9593|\u963F\u62C9\u4F2F\u6A19\u6E96\u6642\u9593|\u963F\u62C9\u65AF\u52A0\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u963F\u62C9\u65AF\u52A0\u6A19\u6E96\u6642\u9593|\u963F\u6839\u5EF7\u6642\u9593|\u963F\u90A3\u5E95\u6CB3\u6642\u9593|\u97D3\u570B\u6A19\u6E96\u6642\u9593|\u9999\u6E2F\u6642\u9593|\u99AC\u4F86\u897F\u4E9E\u6642\u9593|\u99AC\u514B\u85A9\u65AF\u6642\u9593|\u99AC\u723E\u5730\u592B\u6642\u9593|\u99AC\u7D39\u723E\u7FA4\u5CF6\u6642\u9593|\u9EA5\u5938\u5229\u5CF6\u590F\u4EE4\u6642\u9593|\u9EA5\u5938\u5229\u5CF6\u6642\u9593)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("GMTPNT", timeZone0, locale0);
      try { 
        fastDateParser0.parse("(The ");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"(The \" does not match (\u7D00\u5143\u524D|\u7D00\u5143\u524D|\u897F\u66A6|\u897F\u66A6)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT7'EAT");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMTECT", timeZone0, locale0);
      Locale locale1 = Locale.UK;
      FastDateParser fastDateParser1 = new FastDateParser("GMTECT", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("8=e %_");
      Locale locale0 = Locale.PRC;
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("8=e %_", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("8=e %_", timeZone1, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("5~vKaNs*g", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("GMTPRT", timeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(92, "(p{IsNd}{");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("m?As+3]4s59K", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT7'EAT");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMTECT", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Axs8TH5 A{ ", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("8=e %_");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("8=e %_", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("8=", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(106, "j>-yOIxX");
      FastDateParser fastDateParser0 = new FastDateParser("1:$O", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone("vw0v");
      FastDateParser fastDateParser0 = new FastDateParser("GMTSST", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("fr", locale1.getLanguage());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("=w0H@zk}rb", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("=w0H@zk}rb", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(92, "(p{IsNd}{");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}{", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[(p{IsNd}{,en_CA,(p{IsNd}{]", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2713, "S=5q4)Sb_M%U;  ");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("G<!2-/Aq5u", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("@FW@!5J`");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("@FW@!5J`", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("DVxbln?");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("DVxbln?", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("2\"uL.");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2032, "FasDate8are:er[");
      Locale locale0 = new Locale("KH0");
      FastDateParser fastDateParser0 = new FastDateParser("FasDate8are:er[", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-726));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("i Hi8o21q\"*8'k[", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$5");
      Locale locale0 = new Locale("DZcy>X3v4");
      FastDateParser fastDateParser0 = new FastDateParser("DZcy>X3v4", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }
}
