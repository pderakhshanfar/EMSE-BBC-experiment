/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 11:51:20 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTAIT");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("HoZlF# xf3E9Q[", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(1151);
      assertEquals(3051, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("s:fM!`;,|]k?)h2_l(");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("s:fM!`;,|]k?)h2_l(", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("Chinese", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser(" is not a supported timezone name", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = new Locale("G8Ll*$-YjI_\">[");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(909, "G8Ll*$-YjI_\">[");
      FastDateParser fastDateParser0 = new FastDateParser("[&,s", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(909, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = new Locale("G8Ll*$-YjI_\">[");
      FastDateParser fastDateParser0 = new FastDateParser("E'", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(107);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("E'", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = new Locale("G8Ll*$-YjI_\">[");
      FastDateParser fastDateParser0 = new FastDateParser("E'", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("HR7Ef:bJo&'oOX_N", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("(The ", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1037));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = new Locale("E'", "G8Ll*$-YjI_\">[");
      FastDateParser fastDateParser0 = new FastDateParser("G8Ll*$-YjI_\">[", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = new Locale("G8Ll*$-YjI_\">[");
      FastDateParser fastDateParser0 = new FastDateParser("E'", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("R7v\"7K8AG^`+");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("-S&}E:KEsoF?hs&n*o", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = new Locale("");
      FastDateParser fastDateParser0 = new FastDateParser("E'", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("(p{IsNd}{", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("E'", timeZone0, locale0);
      try { 
        fastDateParser0.parse("E'");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"E'\" does not match (\uAE08|\uAE08\uC694\uC77C|\uBAA9|\uBAA9\uC694\uC77C|\uC218|\uC218\uC694\uC77C|\uC6D4|\uC6D4\uC694\uC77C|\uC77C|\uC77C\uC694\uC77C|\uD1A0|\uD1A0\uC694\uC77C|\uD654|\uD654\uC694\uC77C)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("zq?RA\nq1[vJ&5mKYLe", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("JST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone(":_xs@05\"C'C{");
      FastDateParser fastDateParser0 = new FastDateParser("zq?AnM[vJ&5qY/", timeZone0, locale0);
      fastDateParser0.parse("GMTECT", parsePosition0);
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("yy", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("5u5$'");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("yyy", timeZone0, locale0);
      assertEquals("yyy", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("`uuN", timeZone0, locale0);
      assertEquals("`uuN", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("A");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("_3o<#&Meq0sNTt", timeZone0, locale0);
      assertEquals("_3o<#&Meq0sNTt", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("@R]LJsu{H;DU0<H2", timeZone0, locale0);
      assertEquals("@R]LJsu{H;DU0<H2", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("A");
      Locale locale0 = new Locale("A");
      FastDateParser fastDateParser0 = new FastDateParser("?8(YzUAYG|n0Y!", timeZone0, locale0);
      assertEquals("?8(YzUAYG|n0Y!", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = new Locale("G8Ll*$-YjI_\">[");
      FastDateParser fastDateParser0 = new FastDateParser("S>R'3X-", timeZone0, locale0);
      assertEquals("S>R'3X-", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = new Locale("E'", "G8Ll*$-YjI_\">[");
      FastDateParser fastDateParser0 = new FastDateParser("<|0vjkcbQ^+M{NFl_+'", timeZone0, locale0);
      assertEquals("<|0vjkcbQ^+M{NFl_+'", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser(";Lji|_w 538l", timeZone0, locale0);
      assertEquals(";Lji|_w 538l", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = new Locale("G8Ll*$-YjI_\">[");
      FastDateParser fastDateParser0 = new FastDateParser("~.{ZD9y(g!k}c1M", timeZone0, locale0);
      assertEquals("~.{ZD9y(g!k}c1M", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("6%5DfY1", timeZone0, locale0);
      assertEquals("6%5DfY1", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("A");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("4ioft@rhVf", timeZone0, locale0);
      assertEquals("4ioft@rhVf", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = new Locale("G8Ll*$-YjI_\">[");
      FastDateParser fastDateParser0 = new FastDateParser("2j.E", timeZone0, locale0);
      assertEquals("2j.E", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = new Locale("E'", "G8Ll*$-YjI_\">[");
      FastDateParser fastDateParser0 = new FastDateParser("1", timeZone0, locale0);
      assertEquals("1", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("0wE3RIy\"ss{Q", timeZone0, locale0);
      assertEquals("0wE3RIy\"ss{Q", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = new Locale("E'");
      FastDateParser fastDateParser0 = new FastDateParser("M/&os%hoPhXPo", timeZone0, locale0);
      assertEquals("M/&os%hoPhXPo", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = new Locale("G8Ll*$-YjI_\">[");
      FastDateParser fastDateParser0 = new FastDateParser(".^+BirnGVgv>ZAx; o", timeZone0, locale0);
      assertEquals(".^+BirnGVgv>ZAx; o", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = new Locale("E'", "G8Ll*$-YjI_\">[");
      FastDateParser fastDateParser0 = new FastDateParser(",H:Z3~bjJ", timeZone0, locale0);
      assertEquals(",H:Z3~bjJ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = new Locale("G8Ll*$-YjI_\">[");
      FastDateParser fastDateParser0 = new FastDateParser("7H*?EdZte:LmScoH", timeZone0, locale0);
      assertEquals("7H*?EdZte:LmScoH", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("s:fM!`;,|]k?)h2_l(");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("H)O/W|ux|H!MLSA8l7g", timeZone0, locale0);
      assertEquals("H)O/W|ux|H!MLSA8l7g", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTIT");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("zq?RA\nq1[vJ&5mKYLe", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-3885));
      assertEquals((-1885), int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("=N", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = new Locale("G8Ll*$-YjI_\">[");
      FastDateParser fastDateParser0 = new FastDateParser("$&Bn==HZpF=:TUe", timeZone0, locale0);
      assertEquals("$&Bn==HZpF=:TUe", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("#607MM5?+N", timeZone0, locale0);
      try { 
        fastDateParser0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"\" does not match #607(\\p{IsNd}{2}+)5\\?\\+
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("  1*~*ow%O8+[bPG", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("CTT");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"CTT\" does not match \\s*+1\\*~\\*
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("GMTIST", timeZone0, locale0);
      Locale locale1 = new Locale("%Kv Y0<LWZpG", "Wi");
      FastDateParser fastDateParser1 = new FastDateParser("GMTIST", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("-M&}%:Ks^o?is<In*o", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "-M&}%:Ks^o?is<In*o");
      FastDateParser fastDateParser1 = new FastDateParser("-M&}%:Ks^o?is<In*o", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = new Locale("G8Ll*$-YjI_\">[");
      FastDateParser fastDateParser0 = new FastDateParser("&&,s", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("E'", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = new Locale("G8Ll*$-YjI_\">[");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(909, "G8Ll*$-YjI_\">[");
      FastDateParser fastDateParser0 = new FastDateParser("[&,s", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("GMTIST", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("PRT", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTAIT");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("HoZlF# xf3E9Q[", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("2Df81");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("SJ.<\"TDd'5xe");
      Locale locale0 = new Locale("\" does not match ");
      FastDateParser fastDateParser0 = new FastDateParser("SJ.<\"TDd'5xe", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\\p{IsNd}++)", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1173), "GMTPRT");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMTPRT", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals((-1173), timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("s:fM!`;,|]k?)h2_l(");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("s:fM!`;,|]k?)h2_l(", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("zh_CN", locale1.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("A");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("]", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("]", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser(" is not a supported timezone name", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("E'", parsePosition0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("(The ", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("FC5F!", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("6%5DfY1");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(" h", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("3WiOREy?CK");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("R7v\"7K8AG^`+");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("-S&}E:KEsoF?hs&n*o", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[-S&}E:KEsoF?hs&n*o,zh_CN,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("E'");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("{E-9hz-XR:?>U8fM}us", timeZone0, locale0);
      assertEquals("{E-9hz-XR:?>U8fM}us", fastDateParser0.getPattern());
  }
}
