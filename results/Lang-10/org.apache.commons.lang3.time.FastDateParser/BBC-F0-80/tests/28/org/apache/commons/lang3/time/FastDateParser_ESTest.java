/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:27:24 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3583, "?v:mi,+CQ");
      Locale locale0 = new Locale("?v:mi,+CQ");
      FastDateParser fastDateParser0 = new FastDateParser("?v:mi,+CQ", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(3583);
      assertEquals(5483, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3583, "?v:mi,+CQ");
      Locale locale0 = new Locale("?v:mi,+CQ", "?v:mi,+CQ", "?v:mi,+CQ");
      FastDateParser fastDateParser0 = new FastDateParser("?v:mi,+CQ", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateParser0.parseObject("?v:mi,+CQ", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "w&'i%g{R[,", 5, 0, 5, 0, 1, 0, 1, 1);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("w&'i%g{R[,", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("w&'i%g{R[,", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3583, "?v:mi,+CQ");
      Locale locale0 = new Locale("?v:mi,+CQ", "?v:mi,+CQ", "?v:mi,+CQ");
      FastDateParser fastDateParser0 = new FastDateParser("?v:mi,+CQ", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      parsePosition0.setIndex(3583);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("?v:mi,+CQ", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(100, "!|Bm&7&|&GY[z{CW");
      Locale locale0 = new Locale("!|Bm&7&|&GY[z{CW");
      FastDateParser fastDateParser0 = new FastDateParser("!|Bm&7&|&GY[z{CW", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("9,!B", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("Wn)", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(93);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("_Pdi@g8F", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "&y'i%g{R[,", (-1), 0, (-1), 0, 1, 0, 1, 1);
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("&y'i%g{R[,", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("kL<U-&['2", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3583, "?v:mi,+CQ");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, simpleTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("4v`Cc(WNI]>)V");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("9]~6hw7les0k6tV", timeZone0, locale0);
      try { 
        fastDateParser0.parse("4v`Cc(WNI]>)V");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"4v`Cc(WNI]>)V\" does not match 9\\]~6(\\p{IsNd}{1}+)(\\p{IsNd}{1}+)7
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3583, "?v:mi,+CQ");
      Locale locale0 = new Locale("?v:mi,+CQ", "?v:mi,+CQ", "?v:mi,+CQ");
      FastDateParser fastDateParser0 = new FastDateParser("?v:mi,+CQ", simpleTimeZone0, locale0);
      Date date0 = fastDateParser0.parse("?v:mi,+CQ");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("E!66k<ZjZd&nL9");
      FastDateParser fastDateParser0 = new FastDateParser("_IqHb -3WV.%u", timeZone0, locale0);
      assertEquals("_IqHb -3WV.%u", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("4v`Cc(WNI]>)V");
      Locale locale0 = new Locale("4v`Cc(WNI]>)V", "4v`Cc(WNI]>)V", "B<RO]6j,un'L+#&q[");
      FastDateParser fastDateParser0 = new FastDateParser("^:", timeZone0, locale0);
      assertEquals("^:", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("@2T=ngacPDmFn", timeZone0, locale0);
      assertEquals("@2T=ngacPDmFn", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("FastDateParser[");
      FastDateParser fastDateParser0 = new FastDateParser("MZ>..C5A?8MDsWyO9oa", timeZone0, locale0);
      assertEquals("MZ>..C5A?8MDsWyO9oa", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3583, "?v:mi,+CQ");
      Locale locale0 = new Locale("?v:mi,+CQ", "?v:mi,+CQ", "?v:mi,+CQ");
      FastDateParser fastDateParser0 = new FastDateParser("<*/.~", simpleTimeZone0, locale0);
      assertEquals("<*/.~", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(":U}Zh<dzy2S*", timeZone0, locale0);
      assertEquals(":U}Zh<dzy2S*", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("y\"/;}i#N");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("6vY*", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("GMTIST", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      TimeZone timeZone0 = TimeZone.getTimeZone("w5t[bX+nNBd");
      FastDateParser fastDateParser0 = new FastDateParser("w5t[bX+nNBd", timeZone0, locale0);
      assertEquals("w5t[bX+nNBd", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("2b|x+sdY]Ss", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("X``", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("1B73", timeZone0, locale0);
      assertEquals("1B73", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("}4F0s0:T)6t", timeZone0, locale0);
      assertEquals("}4F0s0:T)6t", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("/cWpZ~:X2khQuV", timeZone0, locale0);
      assertEquals("/cWpZ~:X2khQuV", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3583, "SST");
      Locale locale0 = new Locale("=", "SST", "CST");
      FastDateParser fastDateParser0 = new FastDateParser("}k.Kfq.Z", simpleTimeZone0, locale0);
      assertEquals("}k.Kfq.Z", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("- ;:c;b~-j`/t<~a829", timeZone0, locale0);
      assertEquals("- ;:c;b~-j`/t<~a829", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("*hnc)#", timeZone0, locale0);
      assertEquals("*hnc)#", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("3asYUs*qa5wz(6Mk", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-4566));
      assertEquals((-2566), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("GMTBST", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("G~G,W8s}/\"3<R?6", timeZone0, locale0);
      assertEquals("G~G,W8s}/\"3<R?6", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3583, "?v:mi,+CQ");
      Locale locale0 = new Locale("?v:mi,+CQ");
      FastDateParser fastDateParser0 = new FastDateParser("S{w)", simpleTimeZone0, locale0);
      assertEquals("S{w)", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("K8(\"$EZX>7", timeZone0, locale0);
      assertEquals("K8(\"$EZX>7", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3583, "?v:mi,+CQ");
      Locale locale0 = new Locale("?v:mi,+CQ");
      FastDateParser fastDateParser0 = new FastDateParser("?v:mi,+CQ", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("3  H|s9G!J|Ni#_f", timeZone0, locale0);
      assertEquals("3  H|s9G!J|Ni#_f", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("9]~6hw7les0k6tV", timeZone0, locale0);
      try { 
        fastDateParser0.parse("6A3oLe;|\u0005a;");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"6A3oLe;|\u0005a;\" does not match 9\\]~6(\\p{IsNd}{1}+)(\\p{IsNd}{1}+)7
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "&'i%g{R[,", (-1), 0, (-1), 0, 1, 0, 1, 1);
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("&'i%g{R[,", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parseObject("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"\" does not match &
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("sWV7|}Pz}R&W", timeZone0, locale0);
      Locale locale1 = Locale.FRENCH;
      FastDateParser fastDateParser1 = new FastDateParser("sWV7|}Pz}R&W", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3211), "GMTCST");
      FastDateParser fastDateParser0 = new FastDateParser("GMTCST", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("GMTCST", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("sWV7|}Pz}R&W", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("ZQ@Mu$", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("4v`C\"(WNI]>)V");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("4v`C\"(WNI]>)V", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("4v`C\"(WNI]>)V");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("4v`C\"(WNI]>)V", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("CNT", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("=,yB", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("=,(\\p{IsNd}++)", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-233), "AST");
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "w&'i%g{R[,", (-1), 0, (-1), 0, 1, 0, 1, 1);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("w&'i%g{R[,", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("zho", locale1.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("`}]m;\"D(", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("`}]m;\"D(", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("MMU{$V^N2j", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parseObject("'73", parsePosition0);
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
      assertEquals(3, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "&'i%g{R[,", (-1), 0, (-1), 0, 1, 0, 1, 1);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("&'i%g{R[,", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("kL<U-&['2", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("7`lRn#Oa7Gwca");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      ParsePosition parsePosition0 = new ParsePosition(0);
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      fastDateParser0.parse("9pQpQ+7`", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("dKyyJzUBu4`s7t,", timeZone0, locale0);
      assertEquals("dKyyJzUBu4`s7t,", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("9]~6hw7les0k6tV");
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", timeZone0, locale0);
      assertEquals("FastDateParser[", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-233), "AST");
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,en,AST]", string0);
  }
}
