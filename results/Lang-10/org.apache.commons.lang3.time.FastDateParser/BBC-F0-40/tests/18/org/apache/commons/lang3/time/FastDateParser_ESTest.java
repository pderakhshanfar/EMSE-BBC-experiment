/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 10:28:43 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("GMTCST", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(37, "WyabVh8^+SvmeTNR*wU");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("WyabVh8^+SvmeTNR*wU", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(37, "WyabVh8^+SvmeTNR*wU");
      Locale locale0 = Locale.GERMANY;
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateParser fastDateParser0 = new FastDateParser("(", simpleTimeZone0, locale0);
      fastDateParser0.parseObject("(p{IsNd}++)", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "6nO");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("y~", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(37, "WyabVh8^+SvmeTNR*wU");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("WyabVh8^+SvmeTNR*wU", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3374), ",e");
      FastDateParser fastDateParser0 = new FastDateParser(",e", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser(" not in (", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2658);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("F!Nh");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("F!Nh", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("2/yy0", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1738));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("2/yy0", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("GMTIST", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("NET", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("&^%zv@z0zJGRA2d", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", timeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("z", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("ART");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("y'' D`R_td", timeZone0, locale0);
      assertEquals("y'' D`R_td", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("`9{$|47hMd_(jQ#{ld!", timeZone0, locale0);
      assertEquals("`9{$|47hMd_(jQ#{ld!", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("^z8W:uswRXa`/+[!C", timeZone0, locale0);
      assertEquals("^z8W:uswRXa`/+[!C", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("KrJO'@WU$", timeZone0, locale0);
      assertEquals("KrJO'@WU$", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("?4S5X'", timeZone0, locale0);
      assertEquals("?4S5X'", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("=A=!oHi:zI5&@", timeZone0, locale0);
      assertEquals("=A=!oHi:zI5&@", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("5ak>|x");
      FastDateParser fastDateParser0 = new FastDateParser("y;|sMEr~x]w)C|1,W", timeZone0, locale0);
      assertEquals("y;|sMEr~x]w)C|1,W", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("K$]3H8N=5Y^jNSU Ec");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("9K3", timeZone0, locale0);
      assertEquals("9K3", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("K$]3H8N=5Y^jNSU Ec");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("K$]3H8N=5Y^jNSU Ec", timeZone0, locale0);
      assertEquals("K$]3H8N=5Y^jNSU Ec", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("7cC6YB4Ez>5m5V<", timeZone0, locale0);
      assertEquals("7cC6YB4Ez>5m5V<", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(12);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("466lx", timeZone0, locale0);
      assertEquals("466lx", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDateParser fastDateParser0 = new FastDateParser("1", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag(".v3-np");
      FastDateParser fastDateParser0 = new FastDateParser("5M/.yCB?KfoEE<DC~N", timeZone0, locale0);
      assertEquals("5M/.yCB?KfoEE<DC~N", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("F!Nh");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("-N*&%Iv4]A3Nb", timeZone0, locale0);
      assertEquals("-N*&%Iv4]A3Nb", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("*Hr@r", timeZone0, locale0);
      assertEquals("*Hr@r", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser(" not in (", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-3662));
      assertEquals((-1662), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser(" not in (", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(758);
      assertEquals(2658, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMGTPLT", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("@h6}fg9tZ{IL31,", timeZone0, locale0);
      assertEquals("@h6}fg9tZ{IL31,", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag(".v3-np");
      FastDateParser fastDateParser0 = new FastDateParser(")!^)({M", timeZone0, locale0);
      assertEquals(")!^)({M", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("2H)?zyy0", timeZone0, locale0);
      String string0 = "";
      Locale locale1 = new Locale("NET", "");
      locale1.getUnicodeLocaleAttributes();
      FastDateParser fastDateParser1 = new FastDateParser("2H)?zyy0", timeZone0, locale1);
      try { 
        fastDateParser1.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match 2(\\p{IsNd}++)\\)\\?(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre\\s*+Time|ADT|AEDT|Afghanistan\\s*+Time|AKDT|Alaska\\s*+Daylight\\s*+Time|Alaska\\s*+Standard\\s*+Time|Alma-Ata\\s*+Time|Amazon\\s*+Time|Anadyr\\s*+Time|Aqtau\\s*+Time|Aqtobe\\s*+Time|Arabia\\s*+Standard\\s*+Time|Argentine\\s*+Time|Armenia\\s*+Time|Atlantic\\s*+Daylight\\s*+Time|Atlantic\\s*+Standard\\s*+Time|Australian\\s*+Central\\s*+Daylight\\s*+Time\\s*+\\(South\\s*+Australia\\)|Australian\\s*+Central\\s*+Daylight\\s*+Time\\s*+\\(South\\s*+Australia/New\\s*+South\\s*+Wales\\)|Australian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(Northern\\s*+Territory\\)|Australian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(South\\s*+Australia\\)|Australian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(South\\s*+Australia/New\\s*+South\\s*+Wales\\)|Australian\\s*+Central\\s*+Western\\s*+Standard\\s*+Time|Australian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(New\\s*+South\\s*+Wales\\)|Australian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(Tasmania\\)|Australian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(Victoria\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(New\\s*+South\\s*+Wales\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Queensland\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Tasmania\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Victoria\\)|Australian\\s*+Western\\s*+Standard\\s*+Time|Azerbaijan\\s*+Time|Azores\\s*+Summer\\s*+Time|Azores\\s*+Time|AZOST|Bangladesh\\s*+Time|Bhutan\\s*+Time|Bolivia\\s*+Time|Bougainville\\s*+Standard\\s*+Time|Brasilia\\s*+Time|British\\s*+Summer\\s*+Time|Brunei\\s*+Time|BST|Cape\\s*+Verde\\s*+Time|CDT|Central\\s*+African\\s*+Time|Central\\s*+Daylight\\s*+Time|Central\\s*+European\\s*+Summer\\s*+Time|Central\\s*+European\\s*+Time|Central\\s*+Indonesia\\s*+Time|Central\\s*+Standard\\s*+Time|CEST|CHADT|Chamorro\\s*+Standard\\s*+Time|Chatham\\s*+Daylight\\s*+Time|Chatham\\s*+Standard\\s*+Time|Chile\\s*+Summer\\s*+Time|Chile\\s*+Time|China\\s*+Standard\\s*+Time|Choibalsan\\s*+Time|Christmas\\s*+Island\\s*+Time|Chuuk\\s*+Time|CLST|Cocos\\s*+Islands\\s*+Time|Colombia\\s*+Time|Cook\\s*+Is\\.\\s*+Time|Coordinated\\s*+Universal\\s*+Time|Cuba\\s*+Daylight\\s*+Time|Cuba\\s*+Standard\\s*+Time|Davis\\s*+Time|Dumont-d'Urville\\s*+Time|EASST|East\\s*+Indonesia\\s*+Time|Easter\\s*+Is\\.\\s*+Summer\\s*+Time|Easter\\s*+Is\\.\\s*+Time|Eastern\\s*+African\\s*+Time|Eastern\\s*+Daylight\\s*+Time|Eastern\\s*+European\\s*+Summer\\s*+Time|Eastern\\s*+European\\s*+Time|Eastern\\s*+Greenland\\s*+Summer\\s*+Time|Eastern\\s*+Greenland\\s*+Time|Eastern\\s*+Standard\\s*+Time|Ecuador\\s*+Time|EDT|EEST|EGST|Falkland\\s*+Is\\.\\s*+Time|Fernando\\s*+de\\s*+Noronha\\s*+Time|Fiji\\s*+Summer\\s*+Time|Fiji\\s*+Time|FJST|French\\s*+Guiana\\s*+Time|French\\s*+Southern\\s*+&\\s*+Antarctic\\s*+Lands\\s*+Time|Galapagos\\s*+Time|Gambier\\s*+Time|Georgia\\s*+Time|Ghana\\s*+Mean\\s*+Time|Gilbert\\s*+Is\\.\\s*+Time|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Greenwich\\s*+Mean\\s*+Time|Gulf\\s*+Standard\\s*+Time|Guyana\\s*+Time|Hawaii\\s*+Daylight\\s*+Time|Hawaii\\s*+Standard\\s*+Time|HDT|Hong\\s*+Kong\\s*+Time|Hovd\\s*+Time|IDT|India\\s*+Standard\\s*+Time|Indian\\s*+Ocean\\s*+Territory\\s*+Time|Indochina\\s*+Time|Iran\\s*+Daylight\\s*+Time|Iran\\s*+Standard\\s*+Time|IRDT|Irish\\s*+Summer\\s*+Time|Irkutsk\\s*+Time|Israel\\s*+Daylight\\s*+Time|Israel\\s*+Standard\\s*+Time|IST|Japan\\s*+Standard\\s*+Time|Kirgizstan\\s*+Time|Korea\\s*+Standard\\s*+Time|Kosrae\\s*+Time|Kostanay\\s*+Standard\\s*+Time|Krasnoyarsk\\s*+Time|LHDT|Line\\s*+Is\\.\\s*+Time|Lord\\s*+Howe\\s*+Daylight\\s*+Time|Lord\\s*+Howe\\s*+Standard\\s*+Time|Macquarie\\s*+Island\\s*+Daylight\\s*+Time|Macquarie\\s*+Island\\s*+Standard\\s*+Time|Magadan\\s*+Time|Malaysia\\s*+Time|Maldives\\s*+Time|Marquesas\\s*+Time|Marshall\\s*+Islands\\s*+Time|Mauritius\\s*+Time|Mawson\\s*+Time|MDT|MEST|Middle\\s*+Europe\\s*+Summer\\s*+Time|Middle\\s*+Europe\\s*+Time|MIDT|Moscow\\s*+Standard\\s*+Time|Mountain\\s*+Daylight\\s*+Time|Mountain\\s*+Standard\\s*+Time|Myanmar\\s*+Time|Nauru\\s*+Time|NDT|Nepal\\s*+Time|New\\s*+Caledonia\\s*+Time|New\\s*+Zealand\\s*+Daylight\\s*+Time|New\\s*+Zealand\\s*+Standard\\s*+Time|Newfoundland\\s*+Daylight\\s*+Time|Newfoundland\\s*+Standard\\s*+Time|NFST|Niue\\s*+Time|Norfolk\\s*+Summer\\s*+Time|Norfolk\\s*+Time|Novosibirsk\\s*+Time|NZDT|Omsk\\s*+Time|Oral\\s*+Time|Pacific\\s*+Daylight\\s*+Time|Pacific\\s*+Standard\\s*+Time|Pakistan\\s*+Time|Palau\\s*+Time|Papua\\s*+New\\s*+Guinea\\s*+Time|Paraguay\\s*+Summer\\s*+Time|Paraguay\\s*+Time|PDT|Peru\\s*+Time|Petropavlovsk-Kamchatski\\s*+Time|Philippines\\s*+Standard\\s*+Time|Phoenix\\s*+Is\\.\\s*+Time|Pierre\\s*+&\\s*+Miquelon\\s*+Daylight\\s*+Time|Pierre\\s*+&\\s*+Miquelon\\s*+Standard\\s*+Time|Pitcairn\\s*+Standard\\s*+Time|PMDT|Pohnpei\\s*+Time|PYST|Qyzylorda\\s*+Time|Reunion\\s*+Time|Rothera\\s*+Time|Sakhalin\\s*+Time|Samara\\s*+Time|Samoa\\s*+Standard\\s*+Time|Seychelles\\s*+Time|Singapore\\s*+Time|Solomon\\s*+Is\\.\\s*+Time|South\\s*+Africa\\s*+Standard\\s*+Time|South\\s*+Georgia\\s*+Standard\\s*+Time|Srednekolymsk\\s*+Time|Suriname\\s*+Time|Syowa\\s*+Time|Tahiti\\s*+Time|Tajikistan\\s*+Time|Timor-Leste\\s*+Time|Tokelau\\s*+Time|Tonga\\s*+Time|Turkey\\s*+Time|Turkmenistan\\s*+Time|Tuvalu\\s*+Time|Ulaanbaatar\\s*+Time|Uruguay\\s*+Time|Ust-Nera\\s*+Time|Uzbekistan\\s*+Time|Vanuatu\\s*+Time|Venezuela\\s*+Time|Vladivostok\\s*+Time|Vostok\\s*+Time|Wake\\s*+Time|Wallis\\s*+&\\s*+Futuna\\s*+Time|WEST|West\\s*+Indonesia\\s*+Time|West\\s*+Samoa\\s*+Daylight\\s*+Time|West\\s*+Samoa\\s*+Standard\\s*+Time|Western\\s*+African\\s*+Time|Western\\s*+European\\s*+Summer\\s*+Time|Western\\s*+European\\s*+Time|Western\\s*+Greenland\\s*+Summer\\s*+Time|Western\\s*+Greenland\\s*+Time|WGST|WSDT|Xinjiang\\s*+Standard\\s*+Time|Yakutsk\\s*+Time|Yekaterinburg\\s*+Time)(\\p{IsNd}{2}+)0
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("  not in (", timeZone0, locale0);
      assertEquals("  not in (", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("5ak>|x", timeZone0, locale0);
      try { 
        fastDateParser0.parse("PRT");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"PRT\" does not match 5(\u5348\u524D|\u5348\u5F8C)(\\p{IsNd}++)>\\|
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("2)Hyyyre0", timeZone0, locale0);
      try { 
        fastDateParser0.parse("ja");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"ja\" does not match 2\\)(\\p{IsNd}{1}+)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale1);
      FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      TimeZone timeZone0 = TimeZone.getTimeZone("9ST");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "9ST");
      FastDateParser fastDateParser0 = new FastDateParser("@/w<Qh,K-F", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("@/w<Qh,K-F", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser(" not in (", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser(",e", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser(" not in (", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser(" not in (", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("", "", "");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Nh");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("mGrA", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\\p{IsNd}++)(\u7D00\u5143\u524D|\u7D00\u5143\u524D|\u897F\u66A6|\u897F\u66A6)", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser(" not in (", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("F!Nh");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("F!Nh", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("F!Nh", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("F!Nh");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("F!Nh", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2034);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag(".v3-np");
      FastDateParser fastDateParser0 = new FastDateParser(".v3-np", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[.v3-np,,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("F!Nh");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("F!Nh", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("KBC5o~Ez,w=7rVz3s", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("5ak>|x");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("F!Nh");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("mGrA", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("Sz|V%1Mhfl2^", timeZone0, locale0);
      assertEquals("Sz|V%1Mhfl2^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("z", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("GMT", parsePosition0);
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
      assertEquals(3, parsePosition0.getIndex());
  }
}
