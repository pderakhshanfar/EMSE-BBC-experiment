/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 00:37:28 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.LinkedList;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(3970);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("zXvw; U>xVbI~K", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(90);
      assertEquals(1890, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ",", 0, 0, 0, (-3720), (-1), 0, (-156), 0);
      Locale locale0 = new Locale(",", ",", "");
      FastDateParser fastDateParser0 = new FastDateParser(",", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[,,,_,,,]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("GMTART", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ",", 0, 0, 0, (-3720), (-1), 0, (-156), 0);
      Locale locale0 = new Locale(",", ",", "");
      FastDateParser fastDateParser0 = new FastDateParser(",", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=,,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=-3720,startTimeMode=0,endMode=0,endMonth=-1,endDay=0,endDayOfWeek=-156,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-767), "GMT");
      Locale locale0 = Locale.forLanguageTag("sBD.GpU#tPot1(");
      FastDateParser fastDateParser0 = new FastDateParser(" ", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("GMT", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("H", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(108);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3970);
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("zXvw; U>xVbI~K", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("Q.}Q-B t", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("GMTART", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(122);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("GMTART", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("}[}dT0qr^@", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1654));
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("LD0~}Q?rRd?j:>#ycPH", "cyN&Q*.5");
      FastDateParser fastDateParser0 = new FastDateParser("GMTAST", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(96);
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", timeZone0, locale0);
      assertEquals("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2753, "%wE&Dscw<gN08Q)");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("Z{NC`%.1", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-595), "-+Q.Ee}$BrXx]");
      FastDateParser fastDateParser0 = new FastDateParser("-+Q.Ee}$BrXx]", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("-~|QK%d", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("H", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse("ECT");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"ECT\" does not match (\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3970);
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("zXvw; U>xVbI~K", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("ART");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("zXvw; U>xVbI~K");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("zXvw; U>xVbI~K", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("-18:00");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("+");
      Locale locale0 = Locale.CHINA;
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      fastDateParser0.parse("GMTBST", parsePosition0);
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
      assertEquals(3, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("zXew; U>xVbI~K");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("zXew; U>xVbI~K", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("+18:00");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("_g*a7", simpleTimeZone0, locale0);
      assertEquals("_g*a7", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      TimeZone timeZone0 = TimeZone.getTimeZone("-+Q.Ee}$BrXx]");
      FastDateParser fastDateParser0 = new FastDateParser("^vZmyzc)0h#<Hur4N4", timeZone0, locale0);
      assertEquals("^vZmyzc)0h#<Hur4N4", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("@E>e0N5/[$yKE&", timeZone0, locale0);
      assertEquals("@E>e0N5/[$yKE&", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("20ckD74");
      Locale locale0 = Locale.forLanguageTag("20ckD74");
      FastDateParser fastDateParser0 = new FastDateParser("=n3HRj", timeZone0, locale0);
      assertEquals("=n3HRj", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      TimeZone timeZone0 = TimeZone.getTimeZone("-+Q.Ee}$BrXx]");
      FastDateParser fastDateParser0 = new FastDateParser("y<WQNFBE.I[", timeZone0, locale0);
      assertEquals("y<WQNFBE.I[", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(":f2", simpleTimeZone0, locale0);
      assertEquals(":f2", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3970);
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("8-dsF;PIll!/", timeZone0, locale0);
      assertEquals("8-dsF;PIll!/", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("}_0yw7}TYZeuDzY", timeZone0, locale0);
      assertEquals("}_0yw7}TYZeuDzY", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3970);
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("z9m2Ga6O1,L+OC", timeZone0, locale0);
      assertEquals("z9m2Ga6O1,L+OC", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("sm5$Y7*\b4Gp", timeZone0, locale0);
      assertEquals("sm5$Y7*\b4Gp", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3720), "ib:z!k7''^UU)n\"");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("K4J,0", simpleTimeZone0, locale0);
      assertEquals("K4J,0", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("20ckD74");
      Locale locale0 = Locale.forLanguageTag("20ckD74");
      FastDateParser fastDateParser0 = new FastDateParser("20ckD74", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2961));
      assertEquals((-961), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("+");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("0=HX$\"(y~ah1T}Og", timeZone0, locale0);
      assertEquals("0=HX$\"(y~ah1T}Og", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("zXvw; U>xVbI~K");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("{~r;", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("{~r;", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(279);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser(".S$kq", timeZone0, locale0);
      assertEquals(".S$kq", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone("k=MzoPJaN");
      FastDateParser fastDateParser0 = new FastDateParser(">`y  F1~Dd%N-8(", timeZone0, locale0);
      assertEquals(">`y  F1~Dd%N-8(", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("H", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parseObject("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"\" does not match (\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("zXew; U>xVbI~K");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("zXew; U>xVbI~K", timeZone0, locale0);
      try { 
        fastDateParser0.parse("zXew; U>xVbI~K");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"zXew; U>xVbI~K\" does not match (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville\\s*+Standard\\s*+Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|Heure\\s*+avanc\u00E9e\\s*+d'Alaska|Heure\\s*+avanc\u00E9e\\s*+d'Hawa\u00EF|Heure\\s*+avanc\u00E9e\\s*+d'Iran|Heure\\s*+avanc\u00E9e\\s*+d'Isra\u00EBl|Heure\\s*+avanc\u00E9e\\s*+de\\s*+Chatham|Heure\\s*+avanc\u00E9e\\s*+de\\s*+l'Atlantique|Heure\\s*+avanc\u00E9e\\s*+de\\s*+l'Est|Heure\\s*+avanc\u00E9e\\s*+de\\s*+Nouvelle-Z\u00E9lande|Heure\\s*+avanc\u00E9e\\s*+de\\s*+Saint-Pierre\\s*+et\\s*+Miquelon|Heure\\s*+avanc\u00E9e\\s*+de\\s*+Terre-Neuve|Heure\\s*+avanc\u00E9e\\s*+des\\s*+Rocheuses|Heure\\s*+avanc\u00E9e\\s*+du\\s*+Centre|Heure\\s*+avanc\u00E9e\\s*+du\\s*+Pacifique|Heure\\s*+d'Afghanistan|Heure\\s*+d'Afrique\\s*+centrale|Heure\\s*+d'Afrique\\s*+de\\s*+l'Est|Heure\\s*+d'Afrique\\s*+de\\s*+l'Ouest|Heure\\s*+d'Alma-Ata|Heure\\s*+d'Anadyr|Heure\\s*+d'Aqtau|Heure\\s*+d'Aqtobe|Heure\\s*+D'Argentine|Heure\\s*+d'Arm\u00E9nie|Heure\\s*+d'Azerba\u00EFdjan|Heure\\s*+d'Europe\\s*+centrale|Heure\\s*+d'Europe\\s*+de\\s*+l'Est|Heure\\s*+d'Europe\\s*+de\\s*+l'Ouest|Heure\\s*+d'Indochine|Heure\\s*+d'Indon\u00E9sie\\s*+centrale|Heure\\s*+d'Indon\u00E9sie\\s*+orientale|Heure\\s*+d'Irkutsk|Heure\\s*+d'Omsk|Heure\\s*+d'Oral|Heure\\s*+d'Ust-Nera|Heure\\s*+d'\u00E9t\u00E9\\s*+britannique|Heure\\s*+d'\u00E9t\u00E9\\s*+d'Australie\\s*+centrale\\s*+\\(Australie\\s*+du\\s*+sud\\)|Heure\\s*+d'\u00E9t\u00E9\\s*+d'Australie\\s*+centrale\\s*+\\(Australie\\s*+du\\s*+sud/Nouvelle-Galles\\s*+du\\s*+sud\\)|Heure\\s*+d'\u00E9t\u00E9\\s*+d'Australie\\s*+orientale\\s*+\\(Tasmanie\\)|Heure\\s*+d'\u00E9t\u00E9\\s*+d'Australie\\s*+orientale\\s*+\\(Victoria\\)|Heure\\s*+d'\u00E9t\u00E9\\s*+d'Europe\\s*+centrale|Heure\\s*+d'\u00E9t\u00E9\\s*+d'Europe\\s*+de\\s*+l'Est|Heure\\s*+d'\u00E9t\u00E9\\s*+d'Europe\\s*+de\\s*+l'Ouest|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+Cuba|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+Fidji|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+l'Est\\s*+\\(Nouvelle-Galles\\s*+du\\s*+Sud\\)|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+l'Europe\\s*+centrale|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+l'Ile\\s*+de\\s*+P\u00E2ques|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+l'Ile\\s*+Macquarie|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+Lord\\s*+Howe|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+Norfolk|Heure\\s*+d'\u00E9t\u00E9\\s*+des\\s*+A\u00E7ores|Heure\\s*+d'\u00E9t\u00E9\\s*+des\\s*+Samoas\\s*+occidentales|Heure\\s*+d'\u00E9t\u00E9\\s*+du\\s*+Chili|Heure\\s*+d'\u00E9t\u00E9\\s*+du\\s*+Groenland\\s*+de\\s*+l'Est|Heure\\s*+d'\u00E9t\u00E9\\s*+du\\s*+Groenland\\s*+de\\s*+l'Ouest|Heure\\s*+d'\u00E9t\u00E9\\s*+du\\s*+Paraguay|Heure\\s*+d'\u00E9t\u00E9\\s*+irlandaise|Heure\\s*+de\\s*+Bolivie|Heure\\s*+de\\s*+Cap-Vert|Heure\\s*+de\\s*+Choibalsan|Heure\\s*+de\\s*+Chuuk|Heure\\s*+de\\s*+Colombie|Heure\\s*+de\\s*+Davis|Heure\\s*+de\\s*+Dumont-d'Urville|Heure\\s*+de\\s*+Fernando\\s*+de\\s*+Noronha|Heure\\s*+de\\s*+Fidji|Heure\\s*+de\\s*+Gambi|Heure\\s*+de\\s*+Greenwich|Heure\\s*+de\\s*+Guyana|Heure\\s*+de\\s*+Guyane\\s*+fran\u00E7aise|Heure\\s*+de\\s*+G\u00E9orgie|Heure\\s*+de\\s*+Hong\\s*+Kong|Heure\\s*+de\\s*+Hovd|Heure\\s*+de\\s*+Kiribati|Heure\\s*+de\\s*+Krasno\u00EFarsk|Heure\\s*+de\\s*+Kusaie|Heure\\s*+de\\s*+Kyzylorda|Heure\\s*+de\\s*+l'Acre|Heure\\s*+de\\s*+l'Europe\\s*+centrale|Heure\\s*+de\\s*+l'Ile\\s*+de\\s*+P\u00E2ques|Heure\\s*+de\\s*+l'Ile\\s*+Macquarie|Heure\\s*+de\\s*+l'Indon\u00E9sie\\s*+occidentale|Heure\\s*+de\\s*+l'oc\u00E9an\\s*+Indien|Heure\\s*+de\\s*+l'Ouzb\u00E9kistan|Heure\\s*+de\\s*+l'Ulaanbaatar|Heure\\s*+de\\s*+l'Uruguay|Heure\\s*+de\\s*+l'\u00C9quateur|Heure\\s*+de\\s*+l'\u00CEle\\s*+Christmas|Heure\\s*+de\\s*+l'\u00CEle\\s*+de\\s*+Line|Heure\\s*+de\\s*+l'\u00CEle\\s*+de\\s*+Phoenix|Heure\\s*+de\\s*+la\\s*+R\u00E9union|Heure\\s*+de\\s*+Magadan|Heure\\s*+de\\s*+Malaisie|Heure\\s*+de\\s*+Maurice|Heure\\s*+de\\s*+Mawson|Heure\\s*+de\\s*+Myanmar|Heure\\s*+de\\s*+Nauru|Heure\\s*+de\\s*+Niue|Heure\\s*+de\\s*+Norfolk|Heure\\s*+de\\s*+Nouvelle-Cal\u00E9donie|Heure\\s*+de\\s*+Novossibirsk|Heure\\s*+de\\s*+Palaos|Heure\\s*+de\\s*+Papouasie-Nouvelle-Guin\u00E9e|Heure\\s*+de\\s*+Petropavlovsk-Kamchatski|Heure\\s*+de\\s*+Pohnpei|Heure\\s*+de\\s*+Rothera|Heure\\s*+de\\s*+Sakhalin|Heure\\s*+de\\s*+Singapour|Heure\\s*+de\\s*+Syowa|Heure\\s*+de\\s*+Tahiti|Heure\\s*+de\\s*+Timor-Leste|Heure\\s*+de\\s*+Tokelau|Heure\\s*+de\\s*+Tonga|Heure\\s*+de\\s*+Tuvalu|Heure\\s*+de\\s*+Vladivostok|Heure\\s*+de\\s*+Vostok|Heure\\s*+de\\s*+Wake|Heure\\s*+de\\s*+Wallis\\s*+et\\s*+Futuna|Heure\\s*+de\\s*+Yekaterinburg|Heure\\s*+des\\s*+A\u00E7ores|Heure\\s*+des\\s*+Galapagos|Heure\\s*+des\\s*+Iles\\s*+Marshall|Heure\\s*+des\\s*+Maldives|Heure\\s*+des\\s*+Marquises|Heure\\s*+des\\s*+Samoas\\s*+occidentales|Heure\\s*+des\\s*+Seychelles|Heure\\s*+des\\s*+Terres\\s*+australes\\s*+antartiques\\s*+fran\u00E7aises|Heure\\s*+des\\s*+\u00CEles\\s*+Cocos|Heure\\s*+des\\s*+\u00CEles\\s*+Cook|Heure\\s*+des\\s*+\u00EEles\\s*+Falkland|Heure\\s*+des\\s*+\u00CEles\\s*+Salomon|Heure\\s*+du\\s*+Bangladesh|Heure\\s*+du\\s*+Bhoutan|Heure\\s*+du\\s*+Brunei|Heure\\s*+du\\s*+Br\u00E9sil|Heure\\s*+du\\s*+Chili|Heure\\s*+du\\s*+Ghana|Heure\\s*+du\\s*+Groenland\\s*+de\\s*+l'Est|Heure\\s*+du\\s*+Groenland\\s*+de\\s*+l'Ouest|Heure\\s*+du\\s*+Iakoutsk|Heure\\s*+du\\s*+Kirghizistan|Heure\\s*+du\\s*+m\u00E9ridien\\s*+de\\s*+Greenwich|Heure\\s*+du\\s*+N\u00E9pal|Heure\\s*+du\\s*+Pakistan|Heure\\s*+du\\s*+Paraguay|Heure\\s*+du\\s*+P\u00E9rou|Heure\\s*+du\\s*+Surinam|Heure\\s*+du\\s*+Tadjikistan|Heure\\s*+du\\s*+Turkm\u00E9nistan|Heure\\s*+du\\s*+Vanuatu|Heure\\s*+du\\s*+Venezuela|Heure\\s*+normale\\s*+d'Afrique\\s*+du\\s*+Sud|Heure\\s*+normale\\s*+d'Alaska|Heure\\s*+normale\\s*+d'Amazonie|Heure\\s*+normale\\s*+d'Arabie|Heure\\s*+normale\\s*+d'Hawa\u00EF|Heure\\s*+normale\\s*+d'Inde|Heure\\s*+normale\\s*+d'Iran|Heure\\s*+normale\\s*+de\\s*+Chine|Heure\\s*+normale\\s*+de\\s*+Cor\u00E9e|Heure\\s*+normale\\s*+de\\s*+G\u00E9orgie\\s*+du\\s*+Sud|Heure\\s*+normale\\s*+de\\s*+l'Atlantique|Heure\\s*+normale\\s*+de\\s*+l'Est|Heure\\s*+normale\\s*+de\\s*+l'Est\\s*+\\(Nouvelle-Galles\\s*+du\\s*+Sud\\)|Heure\\s*+normale\\s*+de\\s*+l'Ouest\\s*+\\(Australie\\)|Heure\\s*+normale\\s*+de\\s*+Nouvelle-Z\u00E9lande|Heure\\s*+normale\\s*+de\\s*+Saint-Pierre\\s*+et\\s*+Miquelon|Heure\\s*+normale\\s*+de\\s*+Samara|Heure\\s*+normale\\s*+de\\s*+Terre-Neuve|Heure\\s*+normale\\s*+des\\s*+Rocheuses|Heure\\s*+normale\\s*+des\\s*+\u00EEles\\s*+Mariannes|Heure\\s*+normale\\s*+du\\s*+Centre|Heure\\s*+normale\\s*+du\\s*+Golfe|Heure\\s*+normale\\s*+du\\s*+Japon|Heure\\s*+normale\\s*+du\\s*+Pacifique|Heure\\s*+standard\\s*+d'Australie\\s*+centrale\\s*+\\(Australie\\s*+du\\s*+sud\\)|Heure\\s*+standard\\s*+d'Australie\\s*+centrale\\s*+\\(Australie\\s*+du\\s*+sud/Nouvelle-Galles\\s*+du\\s*+sud\\)|Heure\\s*+standard\\s*+d'Australie\\s*+centrale\\s*+\\(Territoire\\s*+du\\s*+Nord\\)|Heure\\s*+standard\\s*+d'Australie\\s*+orientale\\s*+\\(Queensland\\)|Heure\\s*+standard\\s*+d'Australie\\s*+orientale\\s*+\\(Tasmanie\\)|Heure\\s*+standard\\s*+d'Australie\\s*+orientale\\s*+\\(Victoria\\)|Heure\\s*+standard\\s*+d'Isra\u00EBl|Heure\\s*+standard\\s*+de\\s*+Chatham|Heure\\s*+standard\\s*+de\\s*+Cuba|Heure\\s*+standard\\s*+de\\s*+l'Australie\\s*+occidentale\\s*+\\(centre\\)|Heure\\s*+standard\\s*+de\\s*+Lord\\s*+Howe|Heure\\s*+standard\\s*+de\\s*+Moscou|Heure\\s*+standard\\s*+de\\s*+Samoa|Heure\\s*+standard\\s*+des\\s*+Pitcairn|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay\\s*+Standard\\s*+Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|ORAT|PDT|PET|PETT|PGT|Philippines\\s*+Standard\\s*+Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk\\s*+Time|SRET|SRT|SST|SYOT|TAHT|Temps\\s*+universel\\s*+coordonn\u00E9|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("DVrh|[3wh", timeZone0, locale0);
      Locale locale1 = Locale.CHINA;
      FastDateParser fastDateParser1 = new FastDateParser("DVrh|[3wh", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeZone timeZone1 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("zXvw; U>xVbI~K", timeZone1, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("zXvw; U>xVbI~K", timeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser(")\";kxrFkm[S$=U6Wd", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("aada", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("1w?*?yy,E`W", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser(")\";kxrFkm[S$=U6Wd", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ",", 0, 0, 0, (-3720), (-1), 0, (-156), 0);
      Locale locale0 = new Locale(",", ",", "");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("*|%qpl'9h<B@4S", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("\\*\\|%", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("F*SV");
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("G##vU,y}W", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getLanguage());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      TimeZone timeZone0 = TimeZone.getTimeZone("3dvADTiI]*HSOgzLoVK");
      FastDateParser fastDateParser0 = new FastDateParser("3dvADTiI]*HSOgzLoVK", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("3dvADTiI]*HSOgzLoVK", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("zXvw; U>xVbI~K");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("zXvw; U>xVbI~K", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("{~r;", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3970);
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("zXvw; U>xVbI~K", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(1, 1);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("Wg.G$+m:':Nc3/}", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("02O,6wf");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("5");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2785, "%wE&Dscw<gN08Q)");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("/yzpOs.Z2", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("zXvw; U>xVbI~K", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(90);
      assertEquals(1990, int0);
  }
}
