/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 00:37:03 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("yyg~\"F", timeZone0, locale0);
      assertEquals("yyg~\"F", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("GMMMIT", timeZone0, locale0);
      assertEquals("GMMMIT", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("FT4Mn&3)Fw");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser(" is not a supported timezone name", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser(" locale does not support dates before 1868 AD)\n", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateParser0.parseObject("GMTMIT", parsePosition0);
      assertNotNull(object0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "MIT", 33, 0, 1, 1, 33, 0, 0, 41);
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("MIT", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(105, "PLT");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=PLT,offset=105,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ".#/ i", 0, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.forLanguageTag(".#/ i");
      FastDateParser fastDateParser0 = new FastDateParser(".#/ i", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("y#7ni", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(11);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("JP", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ".#/ i");
      Locale locale0 = Locale.forLanguageTag(".#/ i");
      FastDateParser fastDateParser0 = new FastDateParser(".#/ i", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ".#/ i");
      Locale locale0 = Locale.forLanguageTag(".#/ i");
      FastDateParser fastDateParser0 = new FastDateParser(".#/ i", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1297), "Z3");
      Locale locale0 = Locale.forLanguageTag("s-9aj.dbJ$\"a}");
      FastDateParser fastDateParser0 = new FastDateParser("s-9aj.dbJ$\"a}", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ENGLISH;
      locale0.getExtensionKeys();
      FastDateParser fastDateParser0 = new FastDateParser("z;-i/6It#D", timeZone0, locale0);
      Locale locale1 = Locale.ITALY;
      FastDateParser fastDateParser1 = new FastDateParser("z;-i/6It#D", timeZone0, locale1);
      String string0 = ";";
      try { 
        fastDateParser0.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \";\" does not match (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre\\s*+Time|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistan\\s*+Time|AFT|AKDT|AKST|Alaska\\s*+Daylight\\s*+Time|Alaska\\s*+Standard\\s*+Time|Alma-Ata\\s*+Time|ALMT|Amazon\\s*+Time|AMT|Anadyr\\s*+Time|ANAT|Aqtau\\s*+Time|Aqtobe\\s*+Time|AQTT|Arabia\\s*+Standard\\s*+Time|Argentine\\s*+Time|Armenia\\s*+Time|ART|AST|Atlantic\\s*+Daylight\\s*+Time|Atlantic\\s*+Standard\\s*+Time|Australian\\s*+Central\\s*+Daylight\\s*+Time\\s*+\\(South\\s*+Australia\\)|Australian\\s*+Central\\s*+Daylight\\s*+Time\\s*+\\(South\\s*+Australia/New\\s*+South\\s*+Wales\\)|Australian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(Northern\\s*+Territory\\)|Australian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(South\\s*+Australia\\)|Australian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(South\\s*+Australia/New\\s*+South\\s*+Wales\\)|Australian\\s*+Central\\s*+Western\\s*+Standard\\s*+Time|Australian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(New\\s*+South\\s*+Wales\\)|Australian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(Tasmania\\)|Australian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(Victoria\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(New\\s*+South\\s*+Wales\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Queensland\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Tasmania\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Victoria\\)|Australian\\s*+Western\\s*+Standard\\s*+Time|AWST|Azerbaijan\\s*+Time|Azores\\s*+Summer\\s*+Time|Azores\\s*+Time|AZOST|AZOT|AZT|Bangladesh\\s*+Time|BDT|Bhutan\\s*+Time|BNT|Bolivia\\s*+Time|BOT|Bougainville\\s*+Standard\\s*+Time|Brasilia\\s*+Time|British\\s*+Summer\\s*+Time|BRT|Brunei\\s*+Time|BST|BTT|Cape\\s*+Verde\\s*+Time|CAT|CCT|CDT|Central\\s*+African\\s*+Time|Central\\s*+Daylight\\s*+Time|Central\\s*+European\\s*+Summer\\s*+Time|Central\\s*+European\\s*+Time|Central\\s*+Indonesia\\s*+Time|Central\\s*+Standard\\s*+Time|CEST|CET|CHADT|Chamorro\\s*+Standard\\s*+Time|CHAST|Chatham\\s*+Daylight\\s*+Time|Chatham\\s*+Standard\\s*+Time|Chile\\s*+Summer\\s*+Time|Chile\\s*+Time|China\\s*+Standard\\s*+Time|Choibalsan\\s*+Time|CHOT|Christmas\\s*+Island\\s*+Time|ChST|CHUT|Chuuk\\s*+Time|CKT|CLST|CLT|Cocos\\s*+Islands\\s*+Time|Colombia\\s*+Time|Cook\\s*+Is\\.\\s*+Time|Coordinated\\s*+Universal\\s*+Time|COT|CST|Cuba\\s*+Daylight\\s*+Time|Cuba\\s*+Standard\\s*+Time|CVT|CXT|Davis\\s*+Time|DAVT|DDUT|Dumont-d'Urville\\s*+Time|EASST|EAST|East\\s*+Indonesia\\s*+Time|Easter\\s*+Is\\.\\s*+Summer\\s*+Time|Easter\\s*+Is\\.\\s*+Time|Eastern\\s*+African\\s*+Time|Eastern\\s*+Daylight\\s*+Time|Eastern\\s*+European\\s*+Summer\\s*+Time|Eastern\\s*+European\\s*+Time|Eastern\\s*+Greenland\\s*+Summer\\s*+Time|Eastern\\s*+Greenland\\s*+Time|Eastern\\s*+Standard\\s*+Time|EAT|ECT|Ecuador\\s*+Time|EDT|EEST|EET|EGST|EGT|EST|Falkland\\s*+Is\\.\\s*+Time|Fernando\\s*+de\\s*+Noronha\\s*+Time|Fiji\\s*+Summer\\s*+Time|Fiji\\s*+Time|FJST|FJT|FKT|FNT|French\\s*+Guiana\\s*+Time|French\\s*+Southern\\s*+&\\s*+Antarctic\\s*+Lands\\s*+Time|Galapagos\\s*+Time|GALT|Gambier\\s*+Time|GAMT|Georgia\\s*+Time|GET|GFT|Ghana\\s*+Mean\\s*+Time|Gilbert\\s*+Is\\.\\s*+Time|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Greenwich\\s*+Mean\\s*+Time|GST|Gulf\\s*+Standard\\s*+Time|Guyana\\s*+Time|GYT|Hawaii\\s*+Daylight\\s*+Time|Hawaii\\s*+Standard\\s*+Time|HDT|HKT|Hong\\s*+Kong\\s*+Time|Hovd\\s*+Time|HOVT|HST|ICT|IDT|India\\s*+Standard\\s*+Time|Indian\\s*+Ocean\\s*+Territory\\s*+Time|Indochina\\s*+Time|IOT|Iran\\s*+Daylight\\s*+Time|Iran\\s*+Standard\\s*+Time|IRDT|Irish\\s*+Summer\\s*+Time|IRKT|Irkutsk\\s*+Time|IRST|Israel\\s*+Daylight\\s*+Time|Israel\\s*+Standard\\s*+Time|IST|Japan\\s*+Standard\\s*+Time|JST|KGT|Kirgizstan\\s*+Time|Korea\\s*+Standard\\s*+Time|Kosrae\\s*+Time|KOST|Kostanay\\s*+Standard\\s*+Time|Krasnoyarsk\\s*+Time|KRAT|KST|LHDT|LHST|Line\\s*+Is\\.\\s*+Time|LINT|Lord\\s*+Howe\\s*+Daylight\\s*+Time|Lord\\s*+Howe\\s*+Standard\\s*+Time|Macquarie\\s*+Island\\s*+Daylight\\s*+Time|Macquarie\\s*+Island\\s*+Standard\\s*+Time|Magadan\\s*+Time|MAGT|Malaysia\\s*+Time|Maldives\\s*+Time|Marquesas\\s*+Time|Marshall\\s*+Islands\\s*+Time|MART|Mauritius\\s*+Time|Mawson\\s*+Time|MAWT|MDT|MEST|MET|MHT|Middle\\s*+Europe\\s*+Summer\\s*+Time|Middle\\s*+Europe\\s*+Time|MIDT|MIST|MMT|Moscow\\s*+Standard\\s*+Time|Mountain\\s*+Daylight\\s*+Time|Mountain\\s*+Standard\\s*+Time|MSK|MST|MUT|MVT|Myanmar\\s*+Time|MYT|Nauru\\s*+Time|NCT|NDT|Nepal\\s*+Time|New\\s*+Caledonia\\s*+Time|New\\s*+Zealand\\s*+Daylight\\s*+Time|New\\s*+Zealand\\s*+Standard\\s*+Time|Newfoundland\\s*+Daylight\\s*+Time|Newfoundland\\s*+Standard\\s*+Time|NFST|NFT|Niue\\s*+Time|Norfolk\\s*+Summer\\s*+Time|Norfolk\\s*+Time|Novosibirsk\\s*+Time|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|Omsk\\s*+Time|OMST|Oral\\s*+Time|ORAT|Pacific\\s*+Daylight\\s*+Time|Pacific\\s*+Standard\\s*+Time|Pakistan\\s*+Time|Palau\\s*+Time|Papua\\s*+New\\s*+Guinea\\s*+Time|Paraguay\\s*+Summer\\s*+Time|Paraguay\\s*+Time|PDT|Peru\\s*+Time|PET|Petropavlovsk-Kamchatski\\s*+Time|PETT|PGT|Philippines\\s*+Standard\\s*+Time|Phoenix\\s*+Is\\.\\s*+Time|PHOT|Pierre\\s*+&\\s*+Miquelon\\s*+Daylight\\s*+Time|Pierre\\s*+&\\s*+Miquelon\\s*+Standard\\s*+Time|Pitcairn\\s*+Standard\\s*+Time|PKT|PMDT|PMST|Pohnpei\\s*+Time|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda\\s*+Time|RET|Reunion\\s*+Time|Rothera\\s*+Time|ROTT|Sakhalin\\s*+Time|SAKT|Samara\\s*+Time|Samoa\\s*+Standard\\s*+Time|SAMT|SAST|SBT|SCT|Seychelles\\s*+Time|SGT|Singapore\\s*+Time|Solomon\\s*+Is\\.\\s*+Time|South\\s*+Africa\\s*+Standard\\s*+Time|South\\s*+Georgia\\s*+Standard\\s*+Time|Srednekolymsk\\s*+Time|SRET|SRT|SST|Suriname\\s*+Time|SYOT|Syowa\\s*+Time|Tahiti\\s*+Time|TAHT|Tajikistan\\s*+Time|TFT|Timor-Leste\\s*+Time|TJT|TKT|TLT|TMT|Tokelau\\s*+Time|Tonga\\s*+Time|TOT|TRT|Turkey\\s*+Time|Turkmenistan\\s*+Time|Tuvalu\\s*+Time|TVT|Ulaanbaatar\\s*+Time|ULAT|Uruguay\\s*+Time|Ust-Nera\\s*+Time|UTC|UYT|Uzbekistan\\s*+Time|UZT|Vanuatu\\s*+Time|Venezuela\\s*+Time|VET|Vladivostok\\s*+Time|VLAT|VOST|Vostok\\s*+Time|VUT|Wake\\s*+Time|WAKT|Wallis\\s*+&\\s*+Futuna\\s*+Time|WAT|WEST|West\\s*+Indonesia\\s*+Time|West\\s*+Samoa\\s*+Daylight\\s*+Time|West\\s*+Samoa\\s*+Standard\\s*+Time|Western\\s*+African\\s*+Time|Western\\s*+European\\s*+Summer\\s*+Time|Western\\s*+European\\s*+Time|Western\\s*+Greenland\\s*+Summer\\s*+Time|Western\\s*+Greenland\\s*+Time|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|Xinjiang\\s*+Standard\\s*+Time|XJT|YAKT|Yakutsk\\s*+Time|Yekaterinburg\\s*+Time|YEKT);-
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("yP[vL7", "yP[vL7");
      FastDateParser fastDateParser0 = new FastDateParser("yP[vL7", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(3);
      fastDateParser0.parse("Z9s89a-#N@V<>Z", parsePosition0);
      fastDateParser0.parse("Z9s89a-#N@V<>Z", parsePosition0);
      assertEquals(5, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=5,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("yP[vL7", "yP[vL7");
      FastDateParser fastDateParser0 = new FastDateParser("yP[vL7", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("7$EJwo[Mc&Ec");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("`%z|Dj8y1h3^t[", timeZone0, locale0);
      assertEquals("`%z|Dj8y1h3^t[", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ".#/ i");
      Locale locale0 = Locale.forLanguageTag("Unparseable date: \"");
      FastDateParser fastDateParser0 = new FastDateParser("z?jor~B:#q1J(O6(", simpleTimeZone0, locale0);
      assertEquals("z?jor~B:#q1J(O6(", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("<Hh>('UaA3qZ.%", timeZone0, locale0);
      assertEquals("<Hh>('UaA3qZ.%", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" is not a supported timezone name");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser(";}:84^i.zjG", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" is not a supported timezone name");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser(":`HrL&juH#hlT'o[-)C", timeZone0, locale0);
      assertEquals(":`HrL&juH#hlT'o[-)C", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("6c!>9J-&j$1", timeZone0, locale0);
      assertEquals("6c!>9J-&j$1", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("26o+-ZMj!X", timeZone0, locale0);
      assertEquals("26o+-ZMj!X", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("EwwKw19");
      FastDateParser fastDateParser0 = new FastDateParser("EwwKw19", timeZone0, locale0);
      assertEquals("EwwKw19", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("`&a0h{a m", timeZone0, locale0);
      assertEquals("`&a0h{a m", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("E/n-", timeZone0, locale0);
      assertEquals("E/n-", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(",");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser(",", timeZone0, locale0);
      assertEquals(",", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("*v.b", timeZone0, locale0);
      assertEquals("*v.b", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "MIT", 33, 0, 1, 1, 33, 0, 0, 41);
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-4708));
      assertEquals((-2708), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("5s{mg5+R");
      FastDateParser fastDateParser0 = new FastDateParser("5s{mg5+R", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMMMMIT", timeZone0, locale0);
      assertEquals("GMMMMIT", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      zoneOffset0.getId();
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("`%z|Dj8y1h3^t[", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("Z");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"Z\" does not match `%(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville\\s*+Standard\\s*+Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|Chatham\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|Chatham\\s*+\uD45C\uC900\uC2DC|Choibalsan\\s*+\uC2DC\uAC04|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|Davis\\s*+\uC2DC\uAC04|DAVT|DDUT|EASST|EAST|Easter\\s*+Is\\.\\s*+\uC2DC\uAC04|Easter\\s*+Is\\.\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|Fernando\\s*+de\\s*+Noronha\\s*+\uC2DC\uAC04|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|Hovd\\s*+\uC2DC\uAC04|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay\\s*+Standard\\s*+Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|Omsk\\s*+\uC2DC\uAC04|OMST|Oral\\s*+\uD45C\uC900\uC2DC|ORAT|PDT|PET|PETT|PGT|Philippines\\s*+Standard\\s*+Time|PHOT|Pitcairn\\s*+\uD45C\uC900\uC2DC|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda\\s*+\uD45C\uC900\uC2DC|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk\\s*+Time|SRET|SRT|SST|SYOT|Syowa\\s*+\uC2DC\uAC04|TAHT|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|Vostok\\s*+\uC2DC\uAC04|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT|\uAC00\uB098\\s*+\uD45C\uC900\uC2DC|\uAC00\uC774\uC544\uB098\\s*+\uC2DC\uAC04|\uAC08\uB77C\uD30C\uACE0\uC2A4\\s*+\uC2DC\uAC04|\uAC10\uBE44\uC544\\s*+\uC2DC\uAC04|\uAC78\uD504\uB9CC\\s*+\uD45C\uC900\uC2DC|\uADF8\uB8E8\uC9C0\uC57C\\s*+\uC2DC\uAC04|\uADF8\uB9AC\uB2C8\uCE58\\s*+\uD45C\uC900\uC2DC|\uAE38\uBC84\uD2B8\\s*+\uAD70\uB3C4\\s*+\uC2DC\uAC04|\uAE4C\uBF40\uBCA0\uB974\uB370\\s*+\uC2DC\uAC04|\uB098\uC6B0\uB8E8\\s*+\uC2DC\uAC04|\uB0A8\uC544\uD504\uB9AC\uCE74\\s*+\uD45C\uC900\uC2DC|\uB124\uD314\\s*+\uC2DC\uAC04|\uB178\uBE0C\uC2DC\uBE4C\uC2A4\uD06C\\s*+\uC2DC\uAC04|\uB178\uD37D\\s*+\uC2DC\uAC04|\uB178\uD37D\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB274\\s*+\uCE7C\uB808\uB3C4\uB2C8\uC544\\s*+\uC2DC\uAC04|\uB274\uC9C8\uB79C\uB4DC\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB274\uC9C8\uB79C\uB4DC\\s*+\uD45C\uC900\uC2DC|\uB274\uD380\uB4E4\uB79C\uB4DC\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB274\uD380\uB4E4\uB79C\uB4DC\\s*+\uD45C\uC900\uC2DC|\uB2C8\uC6B0\uC5D0\\s*+\uC2DC\uAC04|\uB300\uC11C\uC591\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB300\uC11C\uC591\\s*+\uD45C\uC900\uC2DC|\uB3D9\uBD80\\s*+\uADF8\uB9B0\uB79C\uB4DC\\s*+\uC2DC\uAC04|\uB3D9\uBD80\\s*+\uADF8\uB9B0\uB79C\uB4DC\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB3D9\uBD80\\s*+\uC544\uD504\uB9AC\uCE74\\s*+\uC2DC\uAC04|\uB3D9\uBD80\\s*+\uC778\uB3C4\uB124\uC2DC\uC544\\s*+\uC2DC\uAC04|\uB3D9\uBD80\\s*+\uC77C\uAD11\\s*+\uC808\uC57D\\s*+\uC2DC\uAC04\\(\uB274\uC0AC\uC6B0\uC2A4\uC6E8\uC77C\uC988\\)|\uB3D9\uBD80\\s*+\uC77C\uAD11\\s*+\uC808\uC57D\\s*+\uC2DC\uAC04\\(\uBE45\uD1A0\uB9AC\uC544\\)|\uB3D9\uBD80\\s*+\uC77C\uAD11\\s*+\uC808\uC57D\\s*+\uC2DC\uAC04\\(\uD0DC\uC988\uBA54\uC774\uB2C8\uC544\\)|\uB3D9\uBD80\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB3D9\uBD80\\s*+\uD45C\uC900\uC2DC|\uB3D9\uBD80\\s*+\uD45C\uC900\uC2DC\\(\uB274\uC0AC\uC6B0\uC2A4\uC6E8\uC77C\uC988\\)|\uB3D9\uBD80\\s*+\uD45C\uC900\uC2DC\\(\uBE45\uD1A0\uB9AC\uC544\\)|\uB3D9\uBD80\\s*+\uD45C\uC900\uC2DC\\(\uD038\uC990\uB79C\uB4DC\\)|\uB3D9\uBD80\\s*+\uD45C\uC900\uC2DC\\(\uD0DC\uC988\uBA54\uC774\uB2C8\uC544\\)|\uB3D9\uC720\uB7FD\\s*+\uC2DC\uAC04|\uB3D9\uC720\uB7FD\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB4A4\uBABD\\s*+\uB4A4\uB974\uBE4C\\s*+\uC2DC\uAC04|\uB77C\uC778\\s*+\uAD70\uB3C4\\s*+\uC2DC\uAC04|\uB85C\uB4DC\\s*+\uD558\uC6B0\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB85C\uB4DC\\s*+\uD558\uC6B0\\s*+\uD45C\uC900\uC2DC|\uB85C\uC81C\uB77C\\s*+\uD45C\uC900\uC2DC|\uB9AC\uC720\uB2C8\uC5B8\\s*+\uC2DC\uAC04|\uB9C8\uAC00\uB2E8\\s*+\uC2DC\uAC04|\uB9C8\uB974\uCF00\uC0AC\uC2A4\\s*+\uC2DC\uAC04|\uB9C8\uC15C\uC81C\uB3C4\\s*+\uC2DC\uAC04|\uB9D0\uB808\uC774\uC2DC\uC544\\s*+\uC2DC\uAC04|\uB9E4\uCF70\uB9AC\\s*+\uC12C\\s*+\uC77C\uAD11\\s*+\uC808\uC57D\\s*+\uC2DC\uAC04|\uB9E4\uCF70\uB9AC\\s*+\uC12C\\s*+\uD45C\uC900\uC2DC|\uBAA8\uB9AC\uC154\uC2A4\\s*+\uC2DC\uAC04|\uBAA8\uC2A4\uD06C\uBC14\\s*+\uD45C\uC900\uC2DC|\uBAA8\uC2A8\\s*+\uC2DC\uAC04|\uBAB0\uB514\uBE0C\\s*+\uC2DC\uAC04|\uBBF8\uC580\uB9C8\\s*+\uC2DC\uAC04|\uBC29\uAE00\uB77C\uB370\uC2DC\\s*+\uC2DC\uAC04|\uBCA0\uB124\uC218\uC5D8\uB77C\\s*+\uC2DC\uAC04|\uBCFC\uB9AC\uBE44\uC544\\s*+\uC2DC\uAC04|\uBD80\uD0C4\\s*+\uC2DC\uAC04|\uBE0C\uB77C\uC9C8\uB9AC\uC544\\s*+\uC2DC\uAC04|\uBE0C\uB8E8\uB098\uC774\\s*+\uC2DC\uAC04|\uBE14\uB77C\uB514\uBCF4\uC2A4\uD1A1\\s*+\uC2DC\uAC04|\uBE44\uB204\uC544\uD22C\\s*+\uC2DC\uAC04|\uC0AC\uB9C8\uB77C\\s*+\uC2DC\uAC04|\uC0AC\uBAA8\uC544\\s*+\uD45C\uC900\uC2DC|\uC0AC\uC6B0\uC2A4\\s*+\uC870\uC9C0\uC544\\s*+\uD45C\uC900\uC2DC|\uC0AC\uD560\uB9B0\\s*+\uC2DC\uAC04|\uC0B0\uC9C0\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC0B0\uC9C0\\s*+\uD45C\uC900\uC2DC|\uC11C\uBD80\\s*+\uADF8\uB9B0\uB79C\uB4DC\\s*+\uC2DC\uAC04|\uC11C\uBD80\\s*+\uADF8\uB9B0\uB79C\uB4DC\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC11C\uBD80\\s*+\uC544\uD504\uB9AC\uCE74\\s*+\uC2DC\uAC04|\uC11C\uBD80\\s*+\uD45C\uC900\uC2DC\\(\uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544\\)|\uC11C\uC0AC\uBAA8\uC544\\s*+\uC2DC\uAC04|\uC11C\uC0AC\uBAA8\uC544\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC11C\uC720\uB7FD\\s*+\uC2DC\uAC04|\uC11C\uC720\uB7FD\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC11C\uC778\uB3C4\uB124\uC2DC\uC544\\s*+\uC2DC\uAC04|\uC138\uACC4\\s*+\uD45C\uC900\uC2DC|\uC138\uC774\uC140\\s*+\uC2DC\uAC04|\uC194\uB85C\uBAAC\\s*+\uAD70\uB3C4\\s*+\uC2DC\uAC04|\uC218\uB9AC\uB0A8\\s*+\uC2DC\uAC04|\uC2F1\uAC00\uD3EC\uB974\\s*+\uC2DC\uAC04|\uC544\uB098\uB514\uB974\\s*+\uC2DC\uAC04|\uC544\uB78D\\s*+\uD45C\uC900\uC2DC|\uC544\uB974\uBA54\uB2C8\uC544\\s*+\uC2DC\uAC04|\uC544\uB974\uD5E8\uD2F0\uB098\\s*+\uC2DC\uAC04|\uC544\uB9C8\uC874\\s*+\uC2DC\uAC04|\uC544\uC77C\uB79C\uB4DC\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC544\uC81C\uB974\uBC14\uC774\uC794\\s*+\uC2DC\uAC04|\uC544\uC870\uB808\uC2A4\\s*+\uC2DC\uAC04|\uC544\uC870\uB808\uC2A4\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC544\uD504\uAC00\uB2C8\uC2A4\uD0C4\\s*+\uC2DC\uAC04|\uC545\uD0C0\uC6B0\\s*+\uC2DC\uAC04|\uC545\uD1A0\uBE0C\\s*+\uC2DC\uAC04|\uC54C\uB798\uC2A4\uCE74\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC54C\uB798\uC2A4\uCE74\\s*+\uD45C\uC900\uC2DC|\uC54C\uB9C8\uC544\uD0C0\\s*+\uC2DC\uAC04|\uC57C\uCE20\uD06C\\s*+\uC2DC\uAC04|\uC5D0\uC774\uCEE4\\s*+\uC2DC\uAC04|\uC5D0\uCFE0\uC544\uB3C4\uB974\\s*+\uC2DC\uAC04|\uC601\uAD6D\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC601\uC778\uB3C4\\s*+\uC81C\uB3C4\\s*+\uC2DC\uAC04|\uC608\uCE74\uD14C\uB9B0\uBC84\uADF8\\s*+\uC2DC\uAC04|\uC6B0\uB8E8\uACFC\uC774\\s*+\uC2DC\uAC04|\uC6B0\uC2A4\uD2F0\uB124\uB77C\\s*+\uD45C\uC900\uC2DC|\uC6B0\uC988\uBCA0\uD0A4\uC2A4\uD0C4\\s*+\uC2DC\uAC04|\uC6B8\uB780\uBC14\uD0C0\uB974\\s*+\uC2DC\uAC04|\uC6D4\uB9AC\uC2A4\\s*+\uD6C4\uD22C\uB098\\s*+\uC2DC\uAC04|\uC6E8\uC774\uD06C\\s*+\uC2DC\uAC04|\uC774\uB780\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC774\uB780\\s*+\uD45C\uC900\uC2DC|\uC774\uB974\uCFE0\uCE20\uD06C\\s*+\uC2DC\uAC04|\uC774\uC2A4\uB77C\uC5D8\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC774\uC2A4\uB77C\uC5D8\\s*+\uD45C\uC900\uC2DC|\uC778\uB3C4\\s*+\uD45C\uC900\uC2DC|\uC778\uB3C4\uCC28\uC774\uB098\\s*+\uBC18\uB3C4\\s*+\uC2DC\uAC04|\uC77C\uBCF8\\s*+\uD45C\uC900\uC2DC|\uC911\uAD6D\\s*+\uD45C\uC900\uC2DC|\uC911\uBD80\\s*+\uC720\uB7FD\\s*+\uC2DC\uAC04|\uC911\uBD80\\s*+\uC720\uB7FD\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC911\uBD80\\s*+\uC77C\uAD11\\s*+\uC808\uC57D\\s*+\uC2DC\uAC04\\(\uB0A8\uBD80\\s*+\uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544\\)|\uC911\uBD80\\s*+\uC77C\uAD11\\s*+\uC808\uC57D\\s*+\uC2DC\uAC04\\(\uB0A8\uBD80\\s*+\uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544/\uB274\uC0AC\uC6B0\uC2A4\uC6E8\uC77C\uC988\\)|\uC911\uBD80\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC911\uBD80\\s*+\uD45C\uC900\uC2DC|\uC911\uBD80\\s*+\uD45C\uC900\uC2DC\\(\uB0A8\uBD80\\s*+\uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544\\)|\uC911\uBD80\\s*+\uD45C\uC900\uC2DC\\(\uB0A8\uBD80\\s*+\uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544/\uB274\uC0AC\uC6B0\uC2A4\uC6E8\uC77C\uC988\\)|\uC911\uBD80\\s*+\uD45C\uC900\uC2DC\\(\uBD81\uBD80\\s*+\uC9C0\uC5ED\\)|\uC911\uC559\\s*+\uC11C\uBD80\\s*+\uD45C\uC900\uC2DC\\(\uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544\\)|\uC911\uC559\\s*+\uC544\uD504\uB9AC\uCE74\\s*+\uC2DC\uAC04|\uC911\uC559\\s*+\uC720\uB7FD\\s*+\uC2DC\uAC04|\uC911\uC559\\s*+\uC720\uB7FD\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC911\uC559\\s*+\uC778\uB3C4\uB124\uC2DC\uC544\\s*+\uC2DC\uAC04|\uCC28\uBAA8\uB85C\\s*+\uD45C\uC900\uC2DC|\uCD94\uD06C\\s*+\uD45C\uC900\uC2DC|\uCE60\uB808\\s*+\uC2DC\uAC04|\uCE60\uB808\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uCF54\uC2A4\uB798\\s*+\uC2DC\uAC04|\uCF54\uCF54\uC2A4\\s*+\uAD70\uB3C4\\s*+\uC2DC\uAC04|\uCF5C\uB86C\uBE44\uC544\\s*+\uC2DC\uAC04|\uCFE0\uBC14\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uCFE0\uBC14\\s*+\uD45C\uC900\uC2DC|\uCFE0\uD06C\\s*+\uAD70\uB3C4\\s*+\uC2DC\uAC04|\uD06C\uB77C\uC2A4\uB178\uC57C\uB974\uC2A4\uD06C\\s*+\uC2DC\uAC04|\uD06C\uB9AC\uC2A4\uB9C8\uC2A4\uC12C\\s*+\uC2DC\uAC04|\uD0A4\uB974\uD0A4\uC988\uC2A4\uD0C4\\s*+\uC2DC\uAC04|\uD0C0\uC9C0\uD0A4\uC2A4\uD0C4\\s*+\uC2DC\uAC04|\uD0C0\uD788\uD2F0\\s*+\uC2DC\uAC04|\uD0DC\uD3C9\uC591\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD0DC\uD3C9\uC591\\s*+\uD45C\uC900\uC2DC|\uD1A0\uCF08\uB77C\uC6B0\\s*+\uC2DC\uAC04|\uD1B5\uAC00\\s*+\uC2DC\uAC04|\uD22C\uB974\uD06C\uBA54\uB2C8\uC2A4\uD0C4\\s*+\uC2DC\uAC04|\uD22C\uBC1C\uB8E8\\s*+\uC2DC\uAC04|\uD2F0\uBAA8\uB974-\uB808\uC2A4\uD14C\\s*+\uC2DC\uAC04|\uD30C\uB77C\uACFC\uC774\\s*+\uC2DC\uAC04|\uD30C\uB77C\uACFC\uC774\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD30C\uD0A4\uC2A4\uD0C4\\s*+\uC2DC\uAC04|\uD30C\uD478\uC544\uB274\uAE30\uB2C8\\s*+\uC2DC\uAC04|\uD314\uB77C\uC6B0\\s*+\uC2DC\uAC04|\uD398\uB8E8\\s*+\uC2DC\uAC04|\uD398\uD2B8\uB85C\uD30C\uBE14\uB85C\uD504\uC2A4\uD06C-\uCE84\uCC28\uCE20\uD0A4\\s*+\uC2DC\uAC04|\uD3EC\uD074\uB79C\uB4DC\\s*+\uAD70\uB3C4\\s*+\uC2DC\uAC04|\uD3F0\uD398\uC774\\s*+\uD45C\uC900\uC2DC|\uD504\uB791\uC2A4\\s*+\uB0A8\uBD80\\s*+\uC9C0\uBC29\\s*+\uBC0F\\s*+\uB0A8\uADF9\\s*+\uC9C0\uC5ED\\s*+\uC2DC\uAC04|\uD504\uB791\uC2A4\uB839\\s*+\uAE30\uC544\uB098\\s*+\uC2DC\uAC04|\uD53C\uB2C9\uC2A4\\s*+\uAD70\uB3C4\\s*+\uC2DC\uAC04|\uD53C\uC5D0\uB974\\s*+\uBBF8\uD06C\uB860\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD53C\uC5D0\uB974\\s*+\uBBF8\uD06C\uB860\\s*+\uD45C\uC900\uC2DC|\uD53C\uC9C0\\s*+\uC2DC\uAC04|\uD53C\uC9C0\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD558\uC640\uC774\\s*+\uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD558\uC640\uC774\\s*+\uD45C\uC900\uC2DC|\uD55C\uAD6D\\s*+\uD45C\uC900\uC2DC|\uD64D\uCF69\\s*+\uC2DC\uAC04)\\|(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("@?", timeZone0, locale0);
      assertEquals("@?", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      zoneOffset0.getId();
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("Z3", timeZone0, locale0);
      try { 
        fastDateParser0.parse("EAT");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"EAT\" does not match (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville\\s*+Standard\\s*+Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay\\s*+Standard\\s*+Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|Ora\\s*+del\\s*+Bangladesh|Ora\\s*+del\\s*+Bhutan|Ora\\s*+del\\s*+Brasile|Ora\\s*+del\\s*+Brunei|Ora\\s*+del\\s*+Cile|Ora\\s*+del\\s*+Kirghizistan|Ora\\s*+del\\s*+Nepal|Ora\\s*+del\\s*+Pakistan|Ora\\s*+del\\s*+Paraguay|Ora\\s*+del\\s*+Per\u00F9|Ora\\s*+del\\s*+Tagikistan|Ora\\s*+del\\s*+Terr\\.\\s*+Britannico\\s*+dell'Oceano\\s*+Indiano|Ora\\s*+del\\s*+Turkmenistan|Ora\\s*+del\\s*+Venezuela|Ora\\s*+dell'Afghanistan|Ora\\s*+dell'Africa\\s*+centrale|Ora\\s*+dell'Africa\\s*+occidentale|Ora\\s*+dell'Africa\\s*+orientale|Ora\\s*+dell'Argentina|Ora\\s*+dell'Armenia|Ora\\s*+dell'Azerbaigian|Ora\\s*+dell'Ecuador|Ora\\s*+dell'Europa\\s*+centrale|Ora\\s*+dell'Europa\\s*+occidentale|Ora\\s*+dell'Europa\\s*+orientale|Ora\\s*+dell'Indocina|Ora\\s*+dell'Indonesia\\s*+centrale|Ora\\s*+dell'Indonesia\\s*+occidentale|Ora\\s*+dell'Indonesia\\s*+orientale|Ora\\s*+dell'Isola\\s*+Christmas|Ora\\s*+dell'Isola\\s*+della\\s*+Fenice|Ora\\s*+dell'Isola\\s*+di\\s*+Pasqua|Ora\\s*+dell'Isola\\s*+Macquarie|Ora\\s*+dell'Uruguay|Ora\\s*+dell'Uzbekistan|Ora\\s*+della\\s*+Birmania/Myanmar|Ora\\s*+della\\s*+Bolivia|Ora\\s*+della\\s*+Colombia|Ora\\s*+della\\s*+Georgia|Ora\\s*+della\\s*+Groenlandia\\s*+occidentale|Ora\\s*+della\\s*+Groenlandia\\s*+orientale|Ora\\s*+della\\s*+Guyana|Ora\\s*+della\\s*+Guyana\\s*+Francese|Ora\\s*+della\\s*+Malaysia|Ora\\s*+della\\s*+Nuova\\s*+Caledonia|Ora\\s*+delle\\s*+Azzorre|Ora\\s*+delle\\s*+Falkland|Ora\\s*+delle\\s*+Galapagos|Ora\\s*+delle\\s*+Isole\\s*+Cocos|Ora\\s*+delle\\s*+Isole\\s*+Cook|Ora\\s*+delle\\s*+Isole\\s*+Gilbert|Ora\\s*+delle\\s*+Isole\\s*+Marchesi|Ora\\s*+delle\\s*+Isole\\s*+Marshall|Ora\\s*+delle\\s*+Isole\\s*+Salomone|Ora\\s*+delle\\s*+Line\\s*+Islands|Ora\\s*+delle\\s*+Maldive|Ora\\s*+delle\\s*+Seychelles|Ora\\s*+delle\\s*+Terre\\s*+Australi\\s*+e\\s*+Antartiche\\s*+Francesi|Ora\\s*+di\\s*+Acre|Ora\\s*+di\\s*+Alma-Ata|Ora\\s*+di\\s*+Anadyr|Ora\\s*+di\\s*+Aqtau|Ora\\s*+di\\s*+Aqtobe|Ora\\s*+di\\s*+Capo\\s*+Verde|Ora\\s*+di\\s*+Chatham\\s*+standard|Ora\\s*+di\\s*+Choibalsan|Ora\\s*+di\\s*+Chuuk|Ora\\s*+di\\s*+Davis|Ora\\s*+di\\s*+Dumont-d'Urville|Ora\\s*+di\\s*+Ekaterinburg|Ora\\s*+di\\s*+Fernando\\s*+de\\s*+Noronha|Ora\\s*+di\\s*+Figi|Ora\\s*+di\\s*+Gambier|Ora\\s*+di\\s*+Hong\\s*+Kong|Ora\\s*+di\\s*+Hovd|Ora\\s*+di\\s*+Irkutsk|Ora\\s*+di\\s*+Jakutsk|Ora\\s*+di\\s*+Kosrae|Ora\\s*+di\\s*+Krasnojarsk|Ora\\s*+di\\s*+Magadan|Ora\\s*+di\\s*+Mauritius|Ora\\s*+di\\s*+Mawson|Ora\\s*+di\\s*+Nauru|Ora\\s*+di\\s*+Niue|Ora\\s*+di\\s*+Norfolk|Ora\\s*+di\\s*+Novosibirsk|Ora\\s*+di\\s*+Omsk|Ora\\s*+di\\s*+Oral|Ora\\s*+di\\s*+Palau|Ora\\s*+di\\s*+Papua\\s*+Nuova\\s*+Guinea|Ora\\s*+di\\s*+Petropavlovsk-Kamchatski|Ora\\s*+di\\s*+Pohnpei|Ora\\s*+di\\s*+Qyzylorda|Ora\\s*+di\\s*+Reunion|Ora\\s*+di\\s*+Rothera|Ora\\s*+di\\s*+Sakhalin|Ora\\s*+di\\s*+Samara|Ora\\s*+di\\s*+Samoa|Ora\\s*+di\\s*+Singapore|Ora\\s*+di\\s*+Suriname|Ora\\s*+di\\s*+Syowa|Ora\\s*+di\\s*+Tahiti|Ora\\s*+di\\s*+Timor\\s*+Leste|Ora\\s*+di\\s*+Tokelau|Ora\\s*+di\\s*+Tonga|Ora\\s*+di\\s*+Tuvalu|Ora\\s*+di\\s*+Ulaanbaatar|Ora\\s*+di\\s*+Ust-Nera|Ora\\s*+di\\s*+Vanuatu|Ora\\s*+di\\s*+Vladivostok|Ora\\s*+di\\s*+Vostok|Ora\\s*+di\\s*+Wake|Ora\\s*+di\\s*+Wallis\\s*+e\\s*+Futuna|Ora\\s*+estiva\\s*+britannica|Ora\\s*+estiva\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud\\)|Ora\\s*+estiva\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud/Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+estiva\\s*+del\\s*+Cile|Ora\\s*+estiva\\s*+del\\s*+Paraguay|Ora\\s*+estiva\\s*+dell'Australia\\s*+orientale\\s*+\\(Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+estiva\\s*+dell'Europa\\s*+centrale|Ora\\s*+estiva\\s*+dell'Europa\\s*+occidentale|Ora\\s*+estiva\\s*+dell'Europa\\s*+orientale|Ora\\s*+estiva\\s*+dell'Isola\\s*+di\\s*+Pasqua|Ora\\s*+estiva\\s*+dell'Isola\\s*+Macquarie|Ora\\s*+estiva\\s*+della\\s*+Groenlandia\\s*+occidentale|Ora\\s*+estiva\\s*+della\\s*+Groenlandia\\s*+orientale|Ora\\s*+estiva\\s*+delle\\s*+Azzorre|Ora\\s*+estiva\\s*+di\\s*+Figi|Ora\\s*+estiva\\s*+di\\s*+Lord\\s*+Howe|Ora\\s*+estiva\\s*+di\\s*+Norfolk|Ora\\s*+estiva\\s*+di\\s*+Samoa|Ora\\s*+estiva\\s*+irlandese|Ora\\s*+estiva\\s*+orientale\\s*+\\(Tasmania\\)|Ora\\s*+estiva\\s*+orientale\\s*+\\(Victoria\\)|Ora\\s*+legale\\s*+Cuba|Ora\\s*+legale\\s*+dell'Alaska|Ora\\s*+legale\\s*+dell'Atlantico\\s*+occidentale|Ora\\s*+legale\\s*+della\\s*+costa\\s*+occidentale\\s*+USA|Ora\\s*+legale\\s*+della\\s*+Nuova\\s*+Zelanda|Ora\\s*+legale\\s*+delle\\s*+Isole\\s*+Hawaii|Ora\\s*+legale\\s*+di\\s*+Chatham|Ora\\s*+legale\\s*+di\\s*+Israele|Ora\\s*+legale\\s*+di\\s*+Saint-Pierre\\s*+e\\s*+Miquelon|Ora\\s*+legale\\s*+di\\s*+Terranova|Ora\\s*+legale\\s*+Iran|Ora\\s*+legale\\s*+USA\\s*+centrale|Ora\\s*+legale\\s*+USA\\s*+occidentale|Ora\\s*+legale\\s*+USA\\s*+orientale|Ora\\s*+media\\s*+del\\s*+Ghana|Ora\\s*+media\\s*+di\\s*+Greenwich|Ora\\s*+solare\\s*+Cuba|Ora\\s*+solare\\s*+del\\s*+Giappone|Ora\\s*+solare\\s*+del\\s*+golfo|Ora\\s*+solare\\s*+del\\s*+Sudafrica|Ora\\s*+solare\\s*+dell'Alaska|Ora\\s*+solare\\s*+dell'Amazzonia|Ora\\s*+solare\\s*+dell'Arabia|Ora\\s*+solare\\s*+dell'Atlantico\\s*+occidentale|Ora\\s*+solare\\s*+dell'India|Ora\\s*+solare\\s*+della\\s*+Cina|Ora\\s*+solare\\s*+della\\s*+Corea|Ora\\s*+solare\\s*+della\\s*+costa\\s*+occidentale\\s*+USA|Ora\\s*+solare\\s*+della\\s*+Georgia\\s*+Australe|Ora\\s*+solare\\s*+della\\s*+Nuova\\s*+Zelanda|Ora\\s*+solare\\s*+delle\\s*+Isole\\s*+Hawaii|Ora\\s*+solare\\s*+di\\s*+Saint-Pierre\\s*+e\\s*+Miquelon|Ora\\s*+solare\\s*+di\\s*+Terranova|Ora\\s*+solare\\s*+Iran|Ora\\s*+solare\\s*+USA\\s*+centrale|Ora\\s*+solare\\s*+USA\\s*+occidentale|Ora\\s*+solare\\s*+USA\\s*+orientale|Ora\\s*+standard\\s*+Australia\\s*+centro-occidentale|Ora\\s*+standard\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud\\)|Ora\\s*+standard\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud/Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+standard\\s*+centrale\\s*+\\(Territori\\s*+del\\s*+Nord\\)|Ora\\s*+standard\\s*+dell'Australia\\s*+occidentale|Ora\\s*+standard\\s*+dell'Australia\\s*+orientale\\s*+\\(Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+standard\\s*+di\\s*+Chamorro|Ora\\s*+standard\\s*+di\\s*+Israele|Ora\\s*+standard\\s*+di\\s*+Lord\\s*+Howe|Ora\\s*+standard\\s*+di\\s*+Mosca|Ora\\s*+standard\\s*+di\\s*+Pitcairn|Ora\\s*+standard\\s*+di\\s*+Samoa|Ora\\s*+standard\\s*+orientale\\s*+\\(Queensland\\)|Ora\\s*+standard\\s*+orientale\\s*+\\(Tasmania\\)|Ora\\s*+standard\\s*+orientale\\s*+\\(Victoria\\)|ORAT|PDT|PET|PETT|PGT|Philippines\\s*+Standard\\s*+Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk\\s*+Time|SRET|SRT|SST|SYOT|TAHT|Tempo\\s*+universale\\s*+coordinato|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT)3
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("}`  uK^-[-", timeZone0, locale0);
      assertEquals("}`  uK^-[-", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", timeZone0, locale0);
      try { 
        fastDateParser0.parse("GMTCTT");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"GMTCTT\" does not match \\(
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("7XwDdL", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("EwwKw19");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"EwwKw19\" does not match 7
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("86*C3A;27*LFHc>e", timeZone0, locale0);
      Locale locale1 = Locale.CANADA;
      FastDateParser fastDateParser1 = new FastDateParser("86*C3A;27*LFHc>e", timeZone0, locale1);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("asd$m@\"aI", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(121, "ART");
      FastDateParser fastDateParser1 = new FastDateParser("asd$m@\"aI", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("W)M]rak|dtyxR(9dHR", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser(")}vOSS,]P", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("86*C3A;27*LFHc>e", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("J\u0004gX%,N", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1297), "Z3");
      Locale locale0 = Locale.forLanguageTag("s-9aj.dbJ$\"a}");
      FastDateParser fastDateParser0 = new FastDateParser("s-9aj.dbJ$\"a}", simpleTimeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\\p{IsNd}++)-9(AM|PM)", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-912), "ky(a@]#lY");
      FastDateParser fastDateParser0 = new FastDateParser("ky(a@]#lY", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ".#/ i");
      Locale locale0 = Locale.forLanguageTag(".#/ i");
      FastDateParser fastDateParser0 = new FastDateParser(".#/ i", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getCountry());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("m95W4", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("m95W4", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("EwwKw19");
      FastDateParser fastDateParser0 = new FastDateParser("5s{=g5<R", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(93);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("EwwKw19", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("FT4Mn&3)Fw");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("_GYC8|[;Q", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[_GYC8|[;Q,fr_FR,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("ART", "AST");
      FastDateParser fastDateParser0 = new FastDateParser("d^'G", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("48^B8P=;J.fAWG");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]KGPBaf#%W>kuhWj.");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("]KGPBaf#%W>kuhWj.", timeZone0, locale0);
      assertEquals("]KGPBaf#%W>kuhWj.", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("hsZ^P6y5xmnZCB9", timeZone0, locale0);
      assertEquals("hsZ^P6y5xmnZCB9", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("8Z=n8", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }
}
