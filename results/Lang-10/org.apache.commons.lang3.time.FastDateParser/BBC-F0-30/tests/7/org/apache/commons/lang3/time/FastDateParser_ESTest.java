/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 10:19:44 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1276), "GMT");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser(":(67>t*vz\"#07", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(3135);
      assertEquals(5035, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone(" is not a supported timezone name");
      FastDateParser fastDateParser0 = new FastDateParser(" is not a supported timezone name", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(5);
      Object object0 = fastDateParser0.parseObject(" is not a supported timezone name", parsePosition0);
      assertNotNull(object0);
      assertEquals(5, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=5,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(117, "ECT");
      FastDateParser fastDateParser0 = new FastDateParser("Zm[+h1TiS^=6vB", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1436, "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+|[^'A-Za-z]++");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser(" Vc.", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-225), "P{'R^H!``X+Wz)Clly");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser(")'sn?}*ceSWq[o]'", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("35C,>3$");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("35C,>3$", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("0SKM<`", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1276), "NS9{ZPm.2T:+");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("GMT", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parseObject("GMT");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"GMT\" does not match (AD|AD|BC|BC)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1276), "C1vkJEJOk(DxM2y+");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(" locale does not support dates before 1868 AD)\n", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("^[f;jD", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("^[f;jD", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("4pk!v31XJWZxU|T3K9}");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("4pk!v31XJWZxU|T3K9}", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(P-^5 pTC+oGb");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("(P-^5 pTC+oGb", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z");
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("GMTNET");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      TimeZone timeZone0 = TimeZone.getTimeZone(".'s#?%*ceSWq[o]'");
      FastDateParser fastDateParser0 = new FastDateParser("@m3'bB:kW", timeZone0, locale0);
      assertEquals("@m3'bB:kW", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("35C,>3$");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("`.WH=q?Fs`.:j%", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(5);
      Object object0 = fastDateParser0.parseObject("35C,>3$", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("8");
      FastDateParser fastDateParser0 = new FastDateParser("8", timeZone0, locale0);
      assertEquals("8", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-225), ")'sn?}*ceSWq[o]'");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("7^", simpleTimeZone0, locale0);
      assertEquals("7^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-225), ".'s#?%*ceSWq[o]'");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("_E51MgP'A+o3~\"", simpleTimeZone0, locale0);
      assertEquals("_E51MgP'A+o3~\"", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("4pk!v31XJWZxU|T3K9}");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("4pk!v31XJWZxU|T3K9}", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(5);
      Date date0 = fastDateParser0.parse("2,3LXyC+d^Dqg5rA(h", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-639), "2[v");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("2[v", simpleTimeZone0, locale0);
      assertEquals("2[v", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("4pk!v31XJWZxU|T3K9}");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("0d!", timeZone0, locale0);
      assertEquals("0d!", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone(" is not a supported timezone name");
      FastDateParser fastDateParser0 = new FastDateParser("k9S/B$hrR[8R1wI?E", timeZone0, locale0);
      assertEquals("k9S/B$hrR[8R1wI?E", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-225), "P{'R^H!``X+Wz)Clly");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser(".'s#?%*ceSWq[o]'", simpleTimeZone0, locale0);
      assertEquals(".'s#?%*ceSWq[o]'", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("35C,>3$");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser(",", timeZone0, locale0);
      assertEquals(",", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("Japanese");
      FastDateParser fastDateParser0 = new FastDateParser("s*+", timeZone0, locale0);
      assertEquals("s*+", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$KeyValue");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("y)nS)!-/sJJL/=r", timeZone0, locale0);
      assertEquals("y)nS)!-/sJJL/=r", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("FastDateParser[");
      FastDateParser fastDateParser0 = new FastDateParser("mu]`]S", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2930));
      assertEquals((-930), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("GMTAET", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2281), "Jv+EVq*P.1ICzY'Y");
      FastDateParser fastDateParser0 = new FastDateParser("GG!=\u0004\"0YqbR|", simpleTimeZone0, locale0);
      assertEquals("GG!=\u0004\"0YqbR|", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1276), "GMT");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(">{", simpleTimeZone0, locale0);
      assertEquals(">{", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$KeyValue");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("?H3<z]!HQn)Iq!k*l8_", timeZone0, locale0);
      assertEquals("?H3<z]!HQn)Iq!k*l8_", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2072), "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(104);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("*qmj%\"", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("4pk!v31XJWZxU|T3K9}");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("a<$D-!lb?zPDpa!l", timeZone0, locale0);
      assertEquals("a<$D-!lb?zPDpa!l", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("P{'R^H!``X+Wz)Clly");
      FastDateParser fastDateParser0 = new FastDateParser("\"4|t^P,P+7JrF", timeZone0, locale0);
      try { 
        fastDateParser0.parse("P{'R^H!``X+Wz)Clly");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"P{'R^H!``X+Wz)Clly\" does not match \"4\\|
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$KeyValue");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(":_'LY_m1N9In9q\"Aok?", timeZone0, locale0);
      try { 
        fastDateParser0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match :_
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("FastDateParser[");
      Locale locale1 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("mu]`]S", timeZone0, locale1);
      FastDateParser fastDateParser1 = new FastDateParser("mu]`]S", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("GMTPRT", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2857), "GMTPRT");
      FastDateParser fastDateParser1 = new FastDateParser("GMTPRT", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$KeyValue");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("W~=rhUlyKBomPxD;xD", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("GMTNET", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1276), "C1vkJEJOk(DxM2y+");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(" locale does not support dates before 1868 AD)\n", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("GMTPRT", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Invalid pattern", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("hX[EhZJP1", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("1J{}xW1rtWPi");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1436, " Vc.");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser(" Vc.", simpleTimeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("\\s*+", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      FastDateParser fastDateParser0 = new FastDateParser("^(3gB4V>Aw:m;5|", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1276), "NS9{ZPm.2T:+");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("GMT", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("CA", locale1.getCountry());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1276), "GMT");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("GMT", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("GMT", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("6\"=>");
      FastDateParser fastDateParser0 = new FastDateParser("6\"=>", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[6\"=>,ko_KR,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1436, "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+|[^'A-Za-z]++");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser(" Vc.", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDateParser fastDateParser0 = new FastDateParser("mpgj/O]PuC?WVU(", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("6CiNIv*,DHe-h/%n");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("S]TsT", "@9vXcuC%Q]");
      FastDateParser fastDateParser0 = new FastDateParser("ML/VftM", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("1=0&,IVv");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(42, "kyy;FsB9q");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("kyy;FsB9q", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(42);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("kyy;FsB9q", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("FastDateParser[");
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", timeZone0, locale0);
      assertEquals("FastDateParser[", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(93, "9~b-AOl'?");
      FastDateParser fastDateParser0 = new FastDateParser("Hz }3|7uVz<7", simpleTimeZone0, locale0);
      assertEquals("Hz }3|7uVz<7", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("CST", parsePosition0);
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
      assertEquals(3, parsePosition0.getIndex());
  }
}
