/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:49:19 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3282), "SB.-]qOX%cp9j~{|aa");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(100);
      assertEquals(2000, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("DE<7AEOsDZ3,e=");
      Locale locale0 = new Locale("DE<7AEOsDZ3,e=");
      FastDateParser fastDateParser0 = new FastDateParser("DE<7AEOsDZ3,e=", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("DE<7AEOsDZ3,e=");
      Locale locale0 = new Locale("DE<7AEOsDZ3,e=");
      FastDateParser fastDateParser0 = new FastDateParser("DE<7AEOsDZ3,e=", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(42);
      Object object0 = fastDateParser0.parseObject("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("%-QIwGGOnF4", "%-QIwGGOnF4", "%-QIwGGOnF4");
      FastDateParser fastDateParser0 = new FastDateParser("%-QIwGGOnF4", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("%-QIwGGOnF4", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("  6", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "DE<7AEOsDZ3,e=");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("DE<7AEOsDZ3,e=", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1021), "");
      Locale locale0 = new Locale("GMTIST", "");
      FastDateParser fastDateParser0 = new FastDateParser("GMTIST", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals((-1021), timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3276), "SB.-]qOX%cp9j~{|aa");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("SB.-]qOX%cp9j~{|aa", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-3276));
      assertEquals((-1276), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("HpmZVa4S!.", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("HpmZVa4S!.");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"HpmZVa4S!.\" does not match (\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("^plZVaS!R", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("");
      FastDateParser fastDateParser0 = new FastDateParser("\" does not match ", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2034);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("\" does not match ", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("^plZVa4S!R", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("^plZVa4S!R", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3276), "%njk]LjAT#!)");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("ko-KR", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale1 = new Locale("D+|E+|F+|G+|H+|K+|M+|S|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|^'A-Za-z++", "D+|E+|F+|G+|H+|K+|M+|S|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|^'A-Za-z++", "D+|E+|F+|G+|H+|K+|M+|S|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|^'A-Za-z++");
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|^'A-Za-z++", timeZone0, locale1);
      FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|^'A-Za-z++", timeZone0, locale0);
      int int0 = 79;
      Integer integer0 = new Integer(int0);
      fastDateParser1.equals(integer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("");
      FastDateParser fastDateParser0 = new FastDateParser("D\"7G)S~V7Gy@]", timeZone0, locale0);
      assertEquals("D\"7G)S~V7Gy@]", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("zLsx;<wgCc~p_es", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("AST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("G`XT>-sMQDc", timeZone0, locale0);
      assertEquals("G`XT>-sMQDc", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("@VOIw?ttV.;7m+f", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("y", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3276), "SB.-]qOX%cp9j~{|aa");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("?j&", simpleTimeZone0, locale0);
      assertEquals("?j&", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("\"w>o/+&", timeZone0, locale0);
      assertEquals("\"w>o/+&", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("=Rmq[q\"", timeZone0, locale0);
      assertEquals("=Rmq[q\"", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3276), "GMTVST");
      Locale locale0 = new Locale("GMTVST", "GMTVST");
      FastDateParser fastDateParser0 = new FastDateParser(":6cP7N!=*pY)gfV", simpleTimeZone0, locale0);
      assertEquals(":6cP7N!=*pY)gfV", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3276), "SB.-2qOX%cp9j~0|aa");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("8opR,k nf+*", simpleTimeZone0, locale0);
      assertEquals("8opR,k nf+*", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3276), "GMTVST");
      Locale locale0 = new Locale("GMTVST", "GMTVST");
      FastDateParser fastDateParser0 = new FastDateParser("60`L\n0,", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Date date0 = fastDateParser0.parse("(p{IsNd}++)", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("4XyD'Q'", timeZone0, locale0);
      assertEquals("4XyD'Q'", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("3YF4%[immQnUh584wY", timeZone0, locale0);
      assertEquals("3YF4%[immQnUh584wY", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3276), "SB.-]qOX%cp9j~{|aa");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("EZ2", simpleTimeZone0, locale0);
      assertEquals("EZ2", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("%E1", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("0 h~LAXu>L+,m", timeZone0, locale0);
      assertEquals("0 h~LAXu>L+,m", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("/L\"re6,aob]T07@U/B^");
      FastDateParser fastDateParser0 = new FastDateParser("/L\"re6,aob]T07@U/B^", timeZone0, locale0);
      assertEquals("/L\"re6,aob]T07@U/B^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(".$mt-T", timeZone0, locale0);
      assertEquals(".$mt-T", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3276), "SB.-]qOX%cp9j~{|aa");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("zh-TW", simpleTimeZone0, locale0);
      assertEquals("zh-TW", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(",M)B;,0O$@Wi7W _S", timeZone0, locale0);
      assertEquals(",M)B;,0O$@Wi7W _S", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("s*+", timeZone0, locale0);
      assertEquals("s*+", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("h!/1*=PB y0tUh~");
      FastDateParser fastDateParser0 = new FastDateParser("_z7r<", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-240));
      assertEquals(1760, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("GMT", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("<=1\"E5hDW[%E%|2FH", timeZone0, locale0);
      assertEquals("<=1\"E5hDW[%E%|2FH", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3276), "GMTVST");
      Locale locale0 = new Locale("GMTVST", "GMTVST");
      FastDateParser fastDateParser0 = new FastDateParser("5}y;}.0Uv}01gb:b{~N", simpleTimeZone0, locale0);
      assertEquals("5}y;}.0Uv}01gb:b{~N", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("){!!-]$e/*e5|K", timeZone0, locale0);
      assertEquals("){!!-]$e/*e5|K", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3276), "SB.-2qOX%cp9j~0|aa");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("h9G!/1*=PB y0tUh~", simpleTimeZone0, locale0);
      assertEquals("h9G!/1*=PB y0tUh~", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "$[");
      Locale locale0 = new Locale("$[", "$[");
      FastDateParser fastDateParser0 = new FastDateParser("$[", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("HpmZVa4S!.", timeZone0, locale0);
      try { 
        fastDateParser0.parse("HpmZVa4S!.");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"HpmZVa4S!.\" does not match (\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("  6", timeZone0, locale0);
      try { 
        fastDateParser0.parse("CRN&");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"CRN&\" does not match \\s*+6
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("]Pu]j@#$08CWE6h\"?", timeZone0, locale0);
      Locale locale1 = Locale.CANADA;
      FastDateParser fastDateParser1 = new FastDateParser("]Pu]j@#$08CWE6h\"?", timeZone0, locale1);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("zLswcx<w6~Ccp_es");
      FastDateParser fastDateParser0 = new FastDateParser("zLswcx<w6~Ccp_es", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-503), "1D(k] #,9r");
      FastDateParser fastDateParser1 = new FastDateParser("zLswcx<w6~Ccp_es", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("^plZVa4S!R", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("GMTEAT", timeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("zLswcx<w6~Ccp_es");
      FastDateParser fastDateParser0 = new FastDateParser("zLswcx<w6~Ccp_es", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("HpmZVa4S!.", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("4o:X*hrCfs;x1BO!");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("h!/1*=PB y0tUh~");
      FastDateParser fastDateParser0 = new FastDateParser("_z7r<", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals(0, pattern0.flags());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("zLsx;<wgCc~p_es", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("GMTAST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("GMT", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("fra", locale1.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("h!/1*=PB y0tUh~");
      FastDateParser fastDateParser0 = new FastDateParser("_z7r<", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-240));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMTPST", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[GMTPST,ko,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("de", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parse("f87fOz~P[}]GFjM1$A", parsePosition0);
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
      assertEquals(3, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("yyWklI3T=i", timeZone0, locale0);
      assertEquals("yyWklI3T=i", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("SzZj[9=}:A/\"/uG{nn", timeZone0, locale0);
      assertEquals("SzZj[9=}:A/\"/uG{nn", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("zLsx;<wgCc~p_es", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("zLsx;<wgCc~p_es", string0);
  }
}
