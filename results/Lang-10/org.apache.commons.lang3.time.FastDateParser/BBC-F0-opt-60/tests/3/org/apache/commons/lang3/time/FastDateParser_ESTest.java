/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 09:29:46 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(40, "@_;h?");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("~hI", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(40, "@_;h?");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("@_;h?", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("@_;h?", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("F$r(");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("F$r(", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(40, "@_;h?");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("@_;h?", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=@_;h?,offset=40,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "@_;h?");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("@_;h?", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(40, "@_;h?");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("@_;h?", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-4952));
      assertEquals((-2952), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("yyh^sef,[nW|<q", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("\" does not match ", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("n");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("0A_T}j*i3k0Da0rU", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(",", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("NSStm19dOzJsJ;2u:", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(40, "@_;h?");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("@_;h?", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("GMTNST", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("@_;h?", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("ZV", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(40, "(p{IsNd}++)");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", simpleTimeZone0, locale0);
      assertEquals("(p{IsNd}++)", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("Zc", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("IST", parsePosition0);
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("F$r(");
      ParsePosition parsePosition0 = new ParsePosition(1);
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("|p>,e.5)`I", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("GMTAET", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(32, "<#6$!3V e.omt^aM");
      ParsePosition parsePosition0 = new ParsePosition(0);
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser(" 'zHQ!c<.tBwQI DL8w", simpleTimeZone0, locale0);
      Date date0 = fastDateParser0.parse("<#6$!3V e.omt^aM", parsePosition0);
      assertNotNull(date0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = new Locale("yeef,IznW|<}");
      TimeZone timeZone0 = TimeZone.getTimeZone("yeef,IznW|<}");
      FastDateParser fastDateParser0 = new FastDateParser("yeef,IznW|<}", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("745iR2S28D{6V&~/B");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("CTT");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("`t9(D#1@W", timeZone0, locale0);
      assertEquals("`t9(D#1@W", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("F$r(");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("_EJp[1d4tG", timeZone0, locale0);
      assertEquals("_EJp[1d4tG", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("F$r(");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("^ <`Tl:+3?YjqSl/", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(2174);
      assertEquals(4074, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(40, "@_;h?");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser(">^oPT$Ab_b+kU4Dy", simpleTimeZone0, locale0);
      assertEquals(">^oPT$Ab_b+kU4Dy", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getTimeZone("=;$V8T'(pTE.");
      FastDateParser fastDateParser0 = new FastDateParser("=;$V8T'(pTE.", timeZone0, locale0);
      assertEquals("=;$V8T'(pTE.", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(124, "9a");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("9a", simpleTimeZone0, locale0);
      assertEquals("9a", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(40, "@_;h?");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("8]AK_>U?SAqO ", simpleTimeZone0, locale0);
      assertEquals("8]AK_>U?SAqO ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(40, "@_;h?");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("S7!>=dR.)r", simpleTimeZone0, locale0);
      assertEquals("S7!>=dR.)r", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("6o6Rj!t", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("6o6Rj!t", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("dh\"w4Z4\"?ol", timeZone0, locale0);
      assertEquals("dh\"w4Z4\"?ol", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3p&,kN");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("3p&,kN", timeZone0, locale0);
      assertEquals("3p&,kN", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("]FZ/q`gI^Aj0-`!", timeZone0, locale0);
      assertEquals("]FZ/q`gI^Aj0-`!", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("F$r(");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("*^(v0yS,x6T8A+", timeZone0, locale0);
      assertEquals("*^(v0yS,x6T8A+", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser(")7Y(G^1", timeZone0, locale0);
      assertEquals(")7Y(G^1", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("yye^]ef,[nW|<I", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("6bV0Wb%c\"1NsDd");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("E<=", timeZone0, locale0);
      assertEquals("E<=", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("ZV", timeZone0, locale0);
      Locale locale1 = Locale.ITALIAN;
      FastDateParser fastDateParser1 = new FastDateParser("ZV", timeZone0, locale1);
      fastDateParser0.equals(fastDateParser1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(11, "1");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("}+)", simpleTimeZone0, locale0);
      assertEquals("}+)", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("w.?{.~\",=k5aKM a", timeZone0, locale0);
      try { 
        fastDateParser0.parse("w.?{.~\",=k5aKM a");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"w.?{.~\",=k5aKM a\" does not match (\\p{IsNd}++)\\.\\?\\{\\.~\",=(\\p{IsNd}{1}+)5(\uC624\uC804|\uC624\uD6C4)(\\p{IsNd}++)(\\p{IsNd}++)\\s*+(\uC624\uC804|\uC624\uD6C4)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.UK;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("yyy.e^]ef,[nW|<I", timeZone0, locale0);
      assertEquals("yyy.e^]ef,[nW|<I", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("ZV", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("GMTMIT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("  Y", timeZone0, locale0);
      assertEquals("  Y", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("kq,H#CrNN", timeZone0, locale0);
      try { 
        fastDateParser0.parse("kq,H#CrNN");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"kq,H#CrNN\" does not match (\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("@~DsO!SMQc\rE");
      FastDateParser fastDateParser0 = new FastDateParser(":d''1mx0QEaMC%v", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("PRT");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"PRT\" does not match :(\\p{IsNd}++)'1(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("2t@ 8$h,Y", timeZone0, locale0);
      Locale locale1 = new Locale("VTNST", "VTNST");
      FastDateParser fastDateParser1 = new FastDateParser("2t@ 8$h,Y", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(38, "<#6$!3V e.omt^aM");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("<#6$!3V e.omt^aM", simpleTimeZone0, locale0);
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser1 = new FastDateParser("<#6$!3V e.omt^aM", timeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2154, "GMTPRT");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMTPRT", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser(" locale does not support dates before 1868 AD)\n", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Unparseable date: \"");
      FastDateParser fastDateParser0 = new FastDateParser("D", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(simpleTimeZone0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("2t@ 8$h,Y", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3p&,kN");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("L{[d&", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone("=;$V8T'(pTE.");
      FastDateParser fastDateParser0 = new FastDateParser("HXEID${", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("6$G8!4PqWp)BPLlh@");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("h", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("5;DxZr3");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(",", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals(",", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Unparseable date: \"");
      FastDateParser fastDateParser0 = new FastDateParser("D", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone("=;$V8T'(pTE.");
      FastDateParser fastDateParser0 = new FastDateParser("HXEID${", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("fr_CA", locale1.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("0A_T}j*i3X{Fa0rU", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("0A_T}j*i3X{Fa0rU", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(32, "<#6$!3V e.omt^aM");
      ParsePosition parsePosition0 = new ParsePosition(0);
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser(" 'zHQ!c<.tBwQI DL8w", simpleTimeZone0, locale0);
      fastDateParser0.parseObject(" 'zHQ!c<.tBwQI DL8w", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(32, "<#6$!3V e.omt^aM");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser(" 'zHQ!c<.tBwQI DL8w", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[ 'zHQ!c<.tBwQI DL8w,en_GB,<#6$!3V e.omt^aM]", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("dl(.mbi1Fc", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("4``:f");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("4&W(-");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("@D;!SMQcK(E:T:{", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(108, "- `*ma;%b/x7");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("- `*ma;%b/x7", simpleTimeZone0, locale0);
      assertEquals("- `*ma;%b/x7", fastDateParser0.getPattern());
  }
}
