/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:16:30 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("6SM9m82@WNxr _1z*");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("8;2O%I/*$0mm-", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[8;2O%I/*$0mm-,zh,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("D?H&')GucKb-4-=d5{", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("Md2ir(", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("Md2ir(", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("6SM9m82@WNxr _1z*");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("8;2O%I/*$0mm-", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("Md2ir(", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("6SM9m82@WNxr _1z*");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("6SM9m82@WNxr _1z*", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2592, "'=PFf");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("+4=>4_MV?", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1271), "0[Gp$Fc$&]");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("0[Gp$Fc$&]", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("6SM9m82@WNxr _1z*");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("8;2O%I/*$0mm-", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-4969));
      assertEquals((-2969), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("Md2ir(", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(4047);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("6SM9m82@WNxr _1z*");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("6SM9m82@WNxr _1z*", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(101);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("k;&et#RY[.PsE", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("Md2ir(", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(102);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("Md2ir(", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("%RAXb||buQ}#q4?", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("6SM9m82@WNxr _1z*");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("6SM9m82@WNxr _1z*", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("9{1mxXHspNm5V~Uu/b", timeZone0, locale0);
      assertEquals("9{1mxXHspNm5V~Uu/b", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("6SM9m82@WNxr _1z*");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("F", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Date date0 = fastDateParser0.parse("6SM9m82@WNxr _1z*", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("6SM9q8)Xs_zU");
      Locale locale0 = new Locale("6SM9q8)Xs_zU", "6SM9q8)Xs_zU");
      FastDateParser fastDateParser0 = new FastDateParser("d", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("6SM9q8)Xs_zU", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", timeZone0, locale0);
      try { 
        fastDateParser0.parse("'=PFf");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"'=PFf\" does not match (\\p{IsNd}++)(AM|PM)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("`x+J%ClCH,[&9dii{I", timeZone0, locale0);
      assertEquals("`x+J%ClCH,[&9dii{I", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("6SM9m82@WNxr _1z*");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("_E(3[#/QKbKlO2}{`", timeZone0, locale0);
      assertEquals("_E(3[#/QKbKlO2}{`", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("^fX4jSVKP%Kl", timeZone0, locale0);
      assertEquals("^fX4jSVKP%Kl", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("");
      FastDateParser fastDateParser0 = new FastDateParser(">1>Y0|", timeZone0, locale0);
      assertEquals(">1>Y0|", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("6SM9m82@WNxr _1z*");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("=d\":Iz]p", timeZone0, locale0);
      assertEquals("=d\":Iz]p", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("D?H&')GucKb-4-=d5{");
      FastDateParser fastDateParser0 = new FastDateParser("<v{S0vT'", timeZone0, locale0);
      assertEquals("<v{S0vT'", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("70JJZ!(/", timeZone0, locale0);
      assertEquals("70JJZ!(/", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      FastDateParser fastDateParser0 = new FastDateParser("5VDBLBb<nmd.cDJ", timeZone0, locale0);
      assertEquals("5VDBLBb<nmd.cDJ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("WH4=xRLMNby&JBs", timeZone0, locale0);
      assertEquals("WH4=xRLMNby&JBs", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("3cF", timeZone0, locale0);
      assertEquals("3cF", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser(":*F/2prj:MO<cfi", timeZone0, locale0);
      assertEquals(":*F/2prj:MO<cfi", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("12Kh.uS6.qKfD2u", timeZone0, locale0);
      assertEquals("12Kh.uS6.qKfD2u", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("M-", timeZone0, locale0);
      assertEquals("M-", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("s*+", timeZone0, locale0);
      assertEquals("s*+", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("6SM9m82@WNxr _1z*");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(")zGZige88}Yt", timeZone0, locale0);
      assertEquals(")zGZige88}Yt", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("Md2ir(", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(0);
      assertEquals(2000, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" not in (");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(" not in (", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(415);
      assertEquals(2315, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("#4}`7@st", timeZone0, locale0);
      assertEquals("#4}`7@st", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("$JTlE", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("6SM9m82@WNxr _1z*");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("6SM9m82@WNxr _1z*", timeZone0, locale0);
      try { 
        fastDateParser0.parse("6SM9m82@WNxr _1z*");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"6SM9m82@WNxr _1z*\" does not match 6(\\p{IsNd}{1}+)(\\p{IsNd}{1}+)9(\\p{IsNd}{1}+)82@(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      TimeZone timeZone0 = TimeZone.getTimeZone("D?H&')GucKb-4-=H5{");
      FastDateParser fastDateParser0 = new FastDateParser("D?H&')GucKb-4-=H5{", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("D?H&')GucKb-4-=H5{");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"D?H&')GucKb-4-=H5{\" does not match (\\p{IsNd}++)\\?(\\p{IsNd}++)&
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("k;&et#RY[.PsE", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("H@!t=*ZSvRGXLc3!m", timeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" not in (");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(" not in (", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("n{~^Y]R:tPbb$f");
      boolean boolean0 = fastDateParser0.equals(date0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("A<e<z^2*F'm3=o ?", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTPRT");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("4w");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" not in (");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser(" not in (", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("\\s*+", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("W,[&=jf[8>I", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("W,[&=jf[8>I", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" not in (");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser(" not in (", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateParser0.parseObject(" not in (", parsePosition0);
      assertNotNull(object0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      TimeZone timeZone0 = TimeZone.getTimeZone("D?H&')GucKb-4-=H5{");
      FastDateParser fastDateParser0 = new FastDateParser("E|_(.\">`dE(7X*", timeZone0, locale0);
      assertEquals("E|_(.\">`dE(7X*", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("yssZTUCo89ic", timeZone0, locale0);
      assertEquals("yssZTUCo89ic", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+h''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+h''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }
}
