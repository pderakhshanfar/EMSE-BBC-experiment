/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:15:27 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1845, "%");
      FastDateParser fastDateParser0 = new FastDateParser("K^", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=%,offset=1845,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("#eScZQ}", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-4172));
      assertEquals((-2172), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT");
      ParsePosition parsePosition0 = new ParsePosition(89);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(".U|dwW", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("KQ{1(34;", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-570), "SST");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("SST", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("SST", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("{m", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("QN8B");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"QN8B\" does not match \\{(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("GMT", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("<B;;M ");
      Locale locale0 = Locale.PRC;
      ParsePosition parsePosition0 = new ParsePosition(89);
      FastDateParser fastDateParser0 = new FastDateParser("<B;;M ", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("Ex5w6&?0zb0L\"", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("M");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("M", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(89);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("wQ#TP8MG+^l");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("wQ#TP8MG+^l", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("wQ#TP8MG+^l");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("wQ#TP8MG+^l", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("wQ#TP8MG+^l");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("wQ#TP8MG+^l");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("wQ#TP8MG+^l", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(8);
      Date date0 = fastDateParser0.parse(":.wH~7Z~O", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("wQ#TP8MG+^l");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("wQ#TP8MG+^l", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("6U&(lL(6/|fn0';hW", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("#eScZQ}", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("#eScZQ}");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("`f", timeZone0, locale0);
      assertEquals("`f", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("_Q}V}UH>i{LDbL64", timeZone0, locale0);
      assertEquals("_Q}V}UH>i{LDbL64", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("M");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("do5&}", timeZone0, locale0);
      assertEquals("do5&}", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("wQ#TP8MG+^l");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("=dG]9`fQ\"w", timeZone0, locale0);
      assertEquals("=dG]9`fQ\"w", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("wQ#TP8MG+^l");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(":Tr8ca5", timeZone0, locale0);
      assertEquals(":Tr8ca5", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("w8YV-Xvf.+", timeZone0, locale0);
      assertEquals("w8YV-Xvf.+", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("F3{+*8mNo0T8", timeZone0, locale0);
      assertEquals("F3{+*8mNo0T8", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("wQ#TP8MG+^l");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("2", timeZone0, locale0);
      assertEquals("2", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("K(Cg=h$Bld9I?bqATi");
      FastDateParser fastDateParser0 = new FastDateParser("1s7ggrJ!XavRt}sy*:", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      FastDateParser fastDateParser0 = new FastDateParser("/S'6{g0w ", timeZone0, locale0);
      assertEquals("/S'6{g0w ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("[}i~&VTW");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("[Z.1w7;", timeZone0, locale0);
      assertEquals("[Z.1w7;", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("wQ#TP8MG+^l");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("-<>", timeZone0, locale0);
      assertEquals("-<>", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser(",hr;oO-WhSxX", timeZone0, locale0);
      assertEquals(",hr;oO-WhSxX", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Ex5w6&?0zb0L\"");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("K(Cg=h$Bld9I?bqATi", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateParser0.parseObject("h6{:F", parsePosition0);
      assertNull(object0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("ylD:YmKR6&hJZ", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("5a");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("wQ#TP8MG+^l");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("wQ#TP8MG+^l", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(89);
      assertEquals(1989, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("wQ#TP8MG+^l");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("^9sa!a5kC1K", timeZone0, locale0);
      assertEquals("^9sa!a5kC1K", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Ex5w6&?0zb0L\"");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("h6{:F", timeZone0, locale0);
      assertEquals("h6{:F", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("M");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("s*+", timeZone0, locale0);
      assertEquals("s*+", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("wQ#TP8MG+^l");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Ex5w6&?0zb0L\"");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(")XQP/nVs", timeZone0, locale0);
      fastDateParser0.toString();
      fastDateParser0.getPattern();
      FastDateParser fastDateParser1 = new FastDateParser(")XQP/nVs", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(10);
      FastDateParser fastDateParser2 = new FastDateParser(")z9d%FE4#hJUn3", timeZone0, locale0);
      ParsePosition parsePosition1 = new ParsePosition((-740));
      parsePosition0.setIndex((-2737));
      ParsePosition parsePosition2 = new ParsePosition(115);
      FastDateParser fastDateParser3 = null;
      try {
        fastDateParser3 = new FastDateParser("Unparseable date: \"", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("h0Zy$*%;G>", timeZone0, locale0);
      assertEquals("h0Zy$*%;G>", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("#eScZQ}", timeZone0, locale0);
      try { 
        fastDateParser0.parse("Yl");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"Yl\" does not match #
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("@*H?", timeZone0, locale0);
      try { 
        fastDateParser0.parse("|Di.HGOLk.RCp}");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"|Di.HGOLk.RCp}\" does not match @\\*(\\p{IsNd}++)\\?
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Ex5w6&?0zb0L\"");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(")XQP/nVs", timeZone0, locale0);
      Locale locale1 = Locale.GERMAN;
      FastDateParser fastDateParser1 = new FastDateParser(")XQP/nVs", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("M");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("M", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("FastDateParser[M,en_GB,GMT]", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("?]QhF<b)96+c{.$N", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Ex5w6&?0zb0L\"");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(")XQP/nVs", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("wQ#TP8MG+^l");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("wQ#TP8MG+^l", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\\p{IsNd}++)", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-534), "}FBQ&7W)N:<&*oHp:");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("}FBQ&7W)N:<&*oHp:", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=}FBQ&7W)N:<&*oHp:,offset=-534,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMT", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" OYl~`]7+l");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(" OYl~`]7+l", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      Object object0 = fastDateParser0.parseObject("b'3V9]PixoY;n", parsePosition0);
      assertNotNull(object0);
      assertEquals(7, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=7,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("GMT", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("wQ#TP8MG+^l");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("kWs;.j3I", timeZone0, locale0);
      assertEquals("kWs;.j3I", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("SZs 8tAnMo~", timeZone0, locale0);
      assertEquals("SZs 8tAnMo~", fastDateParser0.getPattern());
  }
}
