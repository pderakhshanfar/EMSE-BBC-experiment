/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:20:07 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      FastDateParser fastDateParser0 = new FastDateParser(":h!0*m#E\"!H+7]p,P-X", simpleTimeZone0, locale0);
      assertEquals(":h!0*m#E\"!H+7]p,P-X", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateParser fastDateParser0 = new FastDateParser("2*q4=z", timeZone0, locale0);
      fastDateParser0.parseObject("2*q4=z", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3284, "S");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser(" ts", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject(" ts");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("w", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(42, "K:4wcT%[x");
      FastDateParser fastDateParser0 = new FastDateParser("K:4wcT%[x", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=K:4wcT%[x,offset=42,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3283, ",|+\"/f");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser(",|+\"/f", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2227));
      assertEquals((-227), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("<Q'3s+S-UKl", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(120);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("9S", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("", "");
      FastDateParser fastDateParser0 = new FastDateParser("]", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match \\]
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3283, " ts");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser(",|+\"/f", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(3283);
      // Undeclared exception!
      try { 
        fastDateParser0.parse(")*9", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3283, "S");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser(" ts", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("K:4wcT%[x", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("drW|M;N", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("nBv24E");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("s*+", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("drW|M;N", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Date date0 = fastDateParser0.parse("X}d$t+XfS1a_]S$+", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3284, "ybdnDy |k");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("ybdnDy |k", simpleTimeZone0, locale0);
      Date date0 = fastDateParser0.parse("3e#a_J");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3284, "ybdnDy |k");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("[m`n", simpleTimeZone0, locale0);
      assertEquals("[m`n", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getTimeZone(":;");
      FastDateParser fastDateParser0 = new FastDateParser("_O", timeZone0, locale0);
      assertEquals("_O", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("@>8", timeZone0, locale0);
      assertEquals("@>8", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("?g&XQav]A}", timeZone0, locale0);
      assertEquals("?g&XQav]A}", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(">8O~-&#N~nmf+3", timeZone0, locale0);
      assertEquals(">8O~-&#N~nmf+3", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getTimeZone(":;");
      FastDateParser fastDateParser0 = new FastDateParser("y=:j:~", timeZone0, locale0);
      assertEquals("y=:j:~", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("9S", timeZone0, locale0);
      assertEquals("9S", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("^a83vc/4`HKmIb,;)|", timeZone0, locale0);
      assertEquals("^a83vc/4`HKmIb,;)|", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "GMTEAT");
      FastDateParser fastDateParser0 = new FastDateParser("]>3S7]", simpleTimeZone0, locale0);
      assertEquals("]>3S7]", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("[md6YLp_Ke;{1", timeZone0, locale0);
      assertEquals("[md6YLp_Ke;{1", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("5~9g", timeZone0, locale0);
      assertEquals("5~9g", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(9, "lNq9");
      FastDateParser fastDateParser0 = new FastDateParser("4jt?FlU8>}}BQ66n", simpleTimeZone0, locale0);
      assertEquals("4jt?FlU8>}}BQ66n", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3284, "ybdnDy |k");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("3e#a_J", simpleTimeZone0, locale0);
      assertEquals("3e#a_J", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("");
      FastDateParser fastDateParser0 = new FastDateParser("1J0FP-N4]}vM", timeZone0, locale0);
      assertEquals("1J0FP-N4]}vM", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(9, "lNq9");
      FastDateParser fastDateParser0 = new FastDateParser("y/./StjX4lq/=kB%R", simpleTimeZone0, locale0);
      assertEquals("y/./StjX4lq/=kB%R", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(".Z]F0!B=|hV~i`W;uY", timeZone0, locale0);
      assertEquals(".Z]F0!B=|hV~i`W;uY", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("-@C", timeZone0, locale0);
      assertEquals("-@C", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", timeZone0, locale0);
      assertEquals("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3283, " ts");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser(",|+\"/f", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-1696));
      assertEquals(304, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3283, " ts");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser(",|+\"/f", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(3283);
      assertEquals(5183, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2822), "E:EE\"?b!");
      FastDateParser fastDateParser0 = new FastDateParser("E:EE\"?b!", simpleTimeZone0, locale0);
      assertEquals("E:EE\"?b!", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("!/3EwDSHx+'g.( ", timeZone0, locale0);
      int int0 = 1;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "!/3EwDSHx+'g.( ");
      Locale locale1 = Locale.ITALY;
      FastDateParser fastDateParser1 = new FastDateParser("zmqHTO", simpleTimeZone0, locale0);
      locale1.getUnicodeLocaleKeys();
      ParsePosition parsePosition0 = new ParsePosition(1);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser2 = new FastDateParser("zmqHTO", timeZone1, locale1);
      String string0 = "\" does not match ";
      try { 
        fastDateParser2.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match \" does not match (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville\\s*+Standard\\s*+Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay\\s*+Standard\\s*+Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|Ora\\s*+del\\s*+Bangladesh|Ora\\s*+del\\s*+Bhutan|Ora\\s*+del\\s*+Brasile|Ora\\s*+del\\s*+Brunei|Ora\\s*+del\\s*+Cile|Ora\\s*+del\\s*+Kirghizistan|Ora\\s*+del\\s*+Nepal|Ora\\s*+del\\s*+Pakistan|Ora\\s*+del\\s*+Paraguay|Ora\\s*+del\\s*+Per\u00F9|Ora\\s*+del\\s*+Tagikistan|Ora\\s*+del\\s*+Terr\\.\\s*+Britannico\\s*+dell'Oceano\\s*+Indiano|Ora\\s*+del\\s*+Turkmenistan|Ora\\s*+del\\s*+Venezuela|Ora\\s*+dell'Afghanistan|Ora\\s*+dell'Africa\\s*+centrale|Ora\\s*+dell'Africa\\s*+occidentale|Ora\\s*+dell'Africa\\s*+orientale|Ora\\s*+dell'Argentina|Ora\\s*+dell'Armenia|Ora\\s*+dell'Azerbaigian|Ora\\s*+dell'Ecuador|Ora\\s*+dell'Europa\\s*+centrale|Ora\\s*+dell'Europa\\s*+occidentale|Ora\\s*+dell'Europa\\s*+orientale|Ora\\s*+dell'Indocina|Ora\\s*+dell'Indonesia\\s*+centrale|Ora\\s*+dell'Indonesia\\s*+occidentale|Ora\\s*+dell'Indonesia\\s*+orientale|Ora\\s*+dell'Isola\\s*+Christmas|Ora\\s*+dell'Isola\\s*+della\\s*+Fenice|Ora\\s*+dell'Isola\\s*+di\\s*+Pasqua|Ora\\s*+dell'Isola\\s*+Macquarie|Ora\\s*+dell'Uruguay|Ora\\s*+dell'Uzbekistan|Ora\\s*+della\\s*+Birmania/Myanmar|Ora\\s*+della\\s*+Bolivia|Ora\\s*+della\\s*+Colombia|Ora\\s*+della\\s*+Georgia|Ora\\s*+della\\s*+Groenlandia\\s*+occidentale|Ora\\s*+della\\s*+Groenlandia\\s*+orientale|Ora\\s*+della\\s*+Guyana|Ora\\s*+della\\s*+Guyana\\s*+Francese|Ora\\s*+della\\s*+Malaysia|Ora\\s*+della\\s*+Nuova\\s*+Caledonia|Ora\\s*+delle\\s*+Azzorre|Ora\\s*+delle\\s*+Falkland|Ora\\s*+delle\\s*+Galapagos|Ora\\s*+delle\\s*+Isole\\s*+Cocos|Ora\\s*+delle\\s*+Isole\\s*+Cook|Ora\\s*+delle\\s*+Isole\\s*+Gilbert|Ora\\s*+delle\\s*+Isole\\s*+Marchesi|Ora\\s*+delle\\s*+Isole\\s*+Marshall|Ora\\s*+delle\\s*+Isole\\s*+Salomone|Ora\\s*+delle\\s*+Line\\s*+Islands|Ora\\s*+delle\\s*+Maldive|Ora\\s*+delle\\s*+Seychelles|Ora\\s*+delle\\s*+Terre\\s*+Australi\\s*+e\\s*+Antartiche\\s*+Francesi|Ora\\s*+di\\s*+Acre|Ora\\s*+di\\s*+Alma-Ata|Ora\\s*+di\\s*+Anadyr|Ora\\s*+di\\s*+Aqtau|Ora\\s*+di\\s*+Aqtobe|Ora\\s*+di\\s*+Capo\\s*+Verde|Ora\\s*+di\\s*+Chatham\\s*+standard|Ora\\s*+di\\s*+Choibalsan|Ora\\s*+di\\s*+Chuuk|Ora\\s*+di\\s*+Davis|Ora\\s*+di\\s*+Dumont-d'Urville|Ora\\s*+di\\s*+Ekaterinburg|Ora\\s*+di\\s*+Fernando\\s*+de\\s*+Noronha|Ora\\s*+di\\s*+Figi|Ora\\s*+di\\s*+Gambier|Ora\\s*+di\\s*+Hong\\s*+Kong|Ora\\s*+di\\s*+Hovd|Ora\\s*+di\\s*+Irkutsk|Ora\\s*+di\\s*+Jakutsk|Ora\\s*+di\\s*+Kosrae|Ora\\s*+di\\s*+Krasnojarsk|Ora\\s*+di\\s*+Magadan|Ora\\s*+di\\s*+Mauritius|Ora\\s*+di\\s*+Mawson|Ora\\s*+di\\s*+Nauru|Ora\\s*+di\\s*+Niue|Ora\\s*+di\\s*+Norfolk|Ora\\s*+di\\s*+Novosibirsk|Ora\\s*+di\\s*+Omsk|Ora\\s*+di\\s*+Oral|Ora\\s*+di\\s*+Palau|Ora\\s*+di\\s*+Papua\\s*+Nuova\\s*+Guinea|Ora\\s*+di\\s*+Petropavlovsk-Kamchatski|Ora\\s*+di\\s*+Pohnpei|Ora\\s*+di\\s*+Qyzylorda|Ora\\s*+di\\s*+Reunion|Ora\\s*+di\\s*+Rothera|Ora\\s*+di\\s*+Sakhalin|Ora\\s*+di\\s*+Samara|Ora\\s*+di\\s*+Samoa|Ora\\s*+di\\s*+Singapore|Ora\\s*+di\\s*+Suriname|Ora\\s*+di\\s*+Syowa|Ora\\s*+di\\s*+Tahiti|Ora\\s*+di\\s*+Timor\\s*+Leste|Ora\\s*+di\\s*+Tokelau|Ora\\s*+di\\s*+Tonga|Ora\\s*+di\\s*+Tuvalu|Ora\\s*+di\\s*+Ulaanbaatar|Ora\\s*+di\\s*+Ust-Nera|Ora\\s*+di\\s*+Vanuatu|Ora\\s*+di\\s*+Vladivostok|Ora\\s*+di\\s*+Vostok|Ora\\s*+di\\s*+Wake|Ora\\s*+di\\s*+Wallis\\s*+e\\s*+Futuna|Ora\\s*+estiva\\s*+britannica|Ora\\s*+estiva\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud\\)|Ora\\s*+estiva\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud/Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+estiva\\s*+del\\s*+Cile|Ora\\s*+estiva\\s*+del\\s*+Paraguay|Ora\\s*+estiva\\s*+dell'Australia\\s*+orientale\\s*+\\(Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+estiva\\s*+dell'Europa\\s*+centrale|Ora\\s*+estiva\\s*+dell'Europa\\s*+occidentale|Ora\\s*+estiva\\s*+dell'Europa\\s*+orientale|Ora\\s*+estiva\\s*+dell'Isola\\s*+di\\s*+Pasqua|Ora\\s*+estiva\\s*+dell'Isola\\s*+Macquarie|Ora\\s*+estiva\\s*+della\\s*+Groenlandia\\s*+occidentale|Ora\\s*+estiva\\s*+della\\s*+Groenlandia\\s*+orientale|Ora\\s*+estiva\\s*+delle\\s*+Azzorre|Ora\\s*+estiva\\s*+di\\s*+Figi|Ora\\s*+estiva\\s*+di\\s*+Lord\\s*+Howe|Ora\\s*+estiva\\s*+di\\s*+Norfolk|Ora\\s*+estiva\\s*+di\\s*+Samoa|Ora\\s*+estiva\\s*+irlandese|Ora\\s*+estiva\\s*+orientale\\s*+\\(Tasmania\\)|Ora\\s*+estiva\\s*+orientale\\s*+\\(Victoria\\)|Ora\\s*+legale\\s*+Cuba|Ora\\s*+legale\\s*+dell'Alaska|Ora\\s*+legale\\s*+dell'Atlantico\\s*+occidentale|Ora\\s*+legale\\s*+della\\s*+costa\\s*+occidentale\\s*+USA|Ora\\s*+legale\\s*+della\\s*+Nuova\\s*+Zelanda|Ora\\s*+legale\\s*+delle\\s*+Isole\\s*+Hawaii|Ora\\s*+legale\\s*+di\\s*+Chatham|Ora\\s*+legale\\s*+di\\s*+Israele|Ora\\s*+legale\\s*+di\\s*+Saint-Pierre\\s*+e\\s*+Miquelon|Ora\\s*+legale\\s*+di\\s*+Terranova|Ora\\s*+legale\\s*+Iran|Ora\\s*+legale\\s*+USA\\s*+centrale|Ora\\s*+legale\\s*+USA\\s*+occidentale|Ora\\s*+legale\\s*+USA\\s*+orientale|Ora\\s*+media\\s*+del\\s*+Ghana|Ora\\s*+media\\s*+di\\s*+Greenwich|Ora\\s*+solare\\s*+Cuba|Ora\\s*+solare\\s*+del\\s*+Giappone|Ora\\s*+solare\\s*+del\\s*+golfo|Ora\\s*+solare\\s*+del\\s*+Sudafrica|Ora\\s*+solare\\s*+dell'Alaska|Ora\\s*+solare\\s*+dell'Amazzonia|Ora\\s*+solare\\s*+dell'Arabia|Ora\\s*+solare\\s*+dell'Atlantico\\s*+occidentale|Ora\\s*+solare\\s*+dell'India|Ora\\s*+solare\\s*+della\\s*+Cina|Ora\\s*+solare\\s*+della\\s*+Corea|Ora\\s*+solare\\s*+della\\s*+costa\\s*+occidentale\\s*+USA|Ora\\s*+solare\\s*+della\\s*+Georgia\\s*+Australe|Ora\\s*+solare\\s*+della\\s*+Nuova\\s*+Zelanda|Ora\\s*+solare\\s*+delle\\s*+Isole\\s*+Hawaii|Ora\\s*+solare\\s*+di\\s*+Saint-Pierre\\s*+e\\s*+Miquelon|Ora\\s*+solare\\s*+di\\s*+Terranova|Ora\\s*+solare\\s*+Iran|Ora\\s*+solare\\s*+USA\\s*+centrale|Ora\\s*+solare\\s*+USA\\s*+occidentale|Ora\\s*+solare\\s*+USA\\s*+orientale|Ora\\s*+standard\\s*+Australia\\s*+centro-occidentale|Ora\\s*+standard\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud\\)|Ora\\s*+standard\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud/Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+standard\\s*+centrale\\s*+\\(Territori\\s*+del\\s*+Nord\\)|Ora\\s*+standard\\s*+dell'Australia\\s*+occidentale|Ora\\s*+standard\\s*+dell'Australia\\s*+orientale\\s*+\\(Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+standard\\s*+di\\s*+Chamorro|Ora\\s*+standard\\s*+di\\s*+Israele|Ora\\s*+standard\\s*+di\\s*+Lord\\s*+Howe|Ora\\s*+standard\\s*+di\\s*+Mosca|Ora\\s*+standard\\s*+di\\s*+Pitcairn|Ora\\s*+standard\\s*+di\\s*+Samoa|Ora\\s*+standard\\s*+orientale\\s*+\\(Queensland\\)|Ora\\s*+standard\\s*+orientale\\s*+\\(Tasmania\\)|Ora\\s*+standard\\s*+orientale\\s*+\\(Victoria\\)|ORAT|PDT|PET|PETT|PGT|Philippines\\s*+Standard\\s*+Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk\\s*+Time|SRET|SRT|SST|SYOT|TAHT|Tempo\\s*+universale\\s*+coordinato|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("s*+");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("m}(28AbT{:~NG?(}'P", timeZone0, locale0);
      assertEquals("m}(28AbT{:~NG?(}'P", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getTimeZone(":;");
      FastDateParser fastDateParser0 = new FastDateParser(" !.{S:#N[L3!m6", timeZone0, locale0);
      assertEquals(" !.{S:#N[L3!m6", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("MfepvzX", timeZone0, locale0);
      try { 
        fastDateParser0.parse("MfepvzX");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"MfepvzX\" does not match (\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      FastDateParser fastDateParser0 = new FastDateParser("Zd;?-_pv}:@ #NKK2_", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse("^o&jK`We4ZN");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"^o&jK`We4ZN\" does not match (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre\\s*+\u6642\u9593|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|Alma-Ata\\s*+\u6642\u9593|ALMT|AMT|ANAT|Aqtau\\s*+\u6642\u9593|Aqtobe\\s*+\u6642\u9593|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville\\s*+Standard\\s*+Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|Dumont-d'Urville\\s*+\u6642\u9593|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|Irkutsk\\s*+\u6642\u9593|IRST|IST|JST|KGT|Kirgizstan\\s*+\u6642\u9593|Kosrae\\s*+\u6642\u9593|KOST|Kostanay\\s*+Standard\\s*+Time|KRAT|KST|LHDT|LHST|Line\\s*+Is\\.\\s*+\u6642\u9593|LINT|Magadan\\s*+\u6642\u9593|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|Novosibirsk\\s*+\u6642\u9593|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|ORAT|PDT|PET|Petropavlovsk-Kamchatski\\s*+\u6642\u9593|PETT|PGT|Philippines\\s*+Standard\\s*+Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda\\s*+\u6642\u9593|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk\\s*+Time|SRET|SRT|SST|SYOT|TAHT|TFT|TJT|TKT|TLT|TMT|TOT|TST|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|Yekaterinburg\\s*+\u6642\u9593|YEKT|\u4E0D\u4E39\u6642\u9593|\u4E2D\u5370\u5EA6\u5C3C\u897F\u4E9E\u6642\u9593|\u4E2D\u570B\u6A19\u6E96\u6642\u9593|\u4E2D\u592E\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u4E2D\u592E\u6A19\u6E96\u6642\u9593|\u4E2D\u6B50\u590F\u4EE4\u6642\u9593|\u4E2D\u6B50\u6642\u9593|\u4E2D\u897F\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\\)|\u4E2D\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\u5357\u5340\\)|\u4E2D\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\u5357\u5340/\u65B0\u5357\u5A01\u723E\u65AF\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u5317\u90E8\u5404\u5730\u5340\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\u5357\u5340/\u65B0\u5357\u5A01\u723E\u65AF\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\u5357\u90E8\\)|\u4E2D\u975E\u6642\u9593|\u4E9E\u585E\u62DC\u7136\u6642\u9593|\u4E9E\u5EAB\u6B21\u514B\u6642\u9593|\u4E9E\u7F8E\u5C3C\u4E9E\u6642\u9593|\u4E9E\u901F\u723E\u7FA4\u5CF6\u590F\u4EE4\u6642\u9593|\u4E9E\u901F\u723E\u7FA4\u5CF6\u6642\u9593|\u4E9E\u99AC\u905C\u6642\u9593|\u4EE5\u8272\u5217\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u4EE5\u8272\u5217\u6A19\u6E96\u6642\u9593|\u4F0A\u6717\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u4F0A\u6717\u6A19\u6E96\u6642\u9593|\u4F5B\u5FB7\u89D2\u6642\u9593|\u4F5B\u65AF\u6258\\s*+\\(Vostok\\)\\s*+\u6642\u9593|\u4FAF\u5FB7\\s*+\\(Hovd\\)\\s*+\u6642\u9593|\u514B\u62C9\u65AF\u8AFE\u4E9E\u723E\u65AF\u514B\u6642\u9593|\u52A0\u62C9\u5DF4\u54E5\u6642\u9593|\u5354\u8ABF\u4E16\u754C\u6642\u9593|\u5357\u55AC\u6CBB\u4E9E\u6A19\u6E96\u6642\u9593|\u5357\u975E\u6A19\u6E96\u6642\u9593|\u5370\u5EA6\u652F\u90A3\u6642\u9593|\u5370\u5EA6\u6A19\u6E96\u6642\u9593|\u5370\u5EA6\u6D0B\u5730\u5340\u6642\u9593|\u5384\u74DC\u591A\u723E\u6642\u9593|\u53E4\u5DF4\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u53E4\u5DF4\u6A19\u6E96\u6642\u9593|\u53EF\u53EF\u65AF\u7FA4\u5CF6\u6642\u9593|\u53F0\u7063\u6A19\u6E96\u6642\u9593|\u5409\u4F2F\u7279\u7FA4\u5CF6\u6642\u9593|\u5410\u9B6F\u74E6\u6642\u9593|\u54E5\u502B\u6BD4\u4E9E\u6642\u9593|\u55AC\u6CBB\u4E9E\u6642\u9593|\u571F\u5EAB\u66FC\u6642\u9593|\u5854\u5409\u514B\u6642\u9593|\u585E\u5E2D\u723E\u7FA4\u5CF6\u6642\u9593|\u590F\u5A01\u5937\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u590F\u5A01\u5937\u6A19\u6E96\u6642\u9593|\u5915\u6B50\u74E6\\s*+\\(Syowa\\)\\s*+\u6642\u9593|\u5927\u6EAA\u5730\u5CF6\u6642\u9593|\u5927\u897F\u6D0B\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u5927\u897F\u6D0B\u6A19\u6E96\u6642\u9593|\u592A\u5E73\u6D0B\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u592A\u5E73\u6D0B\u6A19\u6E96\u6642\u9593|\u59D4\u5167\u745E\u62C9\u6642\u9593|\u5A01\u514B\u6642\u9593|\u5B5F\u52A0\u62C9\u6642\u9593|\u5C3C\u6CCA\u723E\u6642\u9593|\u5C71\u5340\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u5C71\u5340\u6A19\u6E96\u6642\u9593|\u5DE7\u5DF4\u5C71\\s*+\\(Choibalsan\\)\\s*+\u6642\u9593|\u5DF4\u57FA\u65AF\u5766\u6642\u9593|\u5DF4\u5E03\u4E9E\u65B0\u5E7E\u5167\u4E9E\u6642\u9593|\u5DF4\u62C9\u572D\u590F\u4EE4\u6642\u9593|\u5DF4\u62C9\u572D\u6642\u9593|\u5DF4\u897F\u5229\u4E9E\u6642\u9593|\u5E1B\u7409\u6642\u9593|\u5EAB\u502B\u6642\u9593|\u5EAB\u514B\u7FA4\u5CF6\u6642\u9593|\u5EAB\u9801\u5CF6\u6642\u9593|\u5FA9\u6D3B\u5CF6\u590F\u4EE4\u6642\u9593|\u5FA9\u6D3B\u5CF6\u6642\u9593|\u611B\u723E\u862D\u590F\u4EE4\u6642\u9593|\u6240\u7F85\u9580\u7FA4\u5CF6\u6642\u9593|\u6258\u514B\u52DE\u7FA4\u5CF6\u6642\u9593|\u6469\u91CC\u897F\u65AF\u6642\u9593|\u6590\u6FDF\u590F\u4EE4\u6642\u9593|\u6590\u6FDF\u6642\u9593|\u65B0\u52A0\u52D2\u591A\u5C3C\u4E9E\u6642\u9593|\u65B0\u52A0\u5761\u6642\u9593|\u65E5\u672C\u6A19\u6E96\u6642\u9593|\u667A\u5229\u590F\u4EE4\u6642\u9593|\u667A\u5229\u6642\u9593|\u6771\u52A0\u6642\u9593|\u6771\u5370\u5EA6\u5C3C\u897F\u4E9E\u6642\u9593|\u6771\u5E1D\u6C76\u6642\u9593|\u6771\u65B9\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u6771\u65B9\u6A19\u6E96\u6642\u9593|\u6771\u683C\u6797\u5CF6\u590F\u4EE4\u6642\u9593|\u6771\u683C\u6797\u5CF6\u6642\u9593|\u6771\u6B50\u590F\u4EE4\u6642\u9593|\u6771\u6B50\u6642\u9593|\u6771\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u5854\u65AF\u6885\u5C3C\u4E9E\u5CF6\\)|\u6771\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u65B0\u5357\u5A01\u723E\u65AF\\)|\u6771\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u7DAD\u591A\u5229\u4E9E\u90A6\\)|\u6771\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u5854\u65AF\u6885\u5C3C\u4E9E\u5CF6\\)|\u6771\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u65B0\u5357\u5A01\u723E\u65AF\\)|\u6771\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6606\u58EB\u862D\\)|\u6771\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u7DAD\u591A\u5229\u4E9E\u90A6\\)|\u6771\u975E\u6642\u9593|\u67E5\u5766\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u67E5\u5766\u6A19\u6E96\u6642\u9593|\u67E5\u83AB\u6D1B\u6A19\u6E96\u6642\u9593|\u683C\u6797\u5A01\u6CBB\u5E73\u5747\u6642\u9593|\u683C\u6797\u5A01\u6CBB\u6642\u9593|\u695A\u514B\u6642\u9593|\u6B50\u4F5B\u6642\u9593|\u6B50\u59C6\u65AF\u514B\\s*+\\(Omsk\\)\\s*+\u6642\u9593|\u6C76\u840A\u6642\u9593|\u6C99\u99AC\u62C9\u6642\u9593|\u6CD5\u570B\u5357\u534A\u7403\u53CA\u5357\u6975\u5C6C\u5730\u6642\u9593|\u6CD5\u5C6C\u572D\u4E9E\u90A3\u6642\u9593|\u6CE2\u65AF\u7063\u6A19\u6E96\u6642\u9593|\u6CE2\u7D0D\u4F69\u6642\u9593|\u6D77\u53C3\u5D34\u6642\u9593|\u70CF\u62C9\u572D\u6642\u9593|\u70CF\u65AF\u5167\u62C9\\s*+\\(Ust-Nera\\)\\s*+\u6642\u9593|\u70CF\u8332\u5225\u514B\u65AF\u5766\u6642\u9593|\u73BB\u5229\u7DAD\u4E9E\u6642\u9593|\u74E6\u5229\u65AF\u53CA\u798F\u675C\u7D0D\u7FA4\u5CF6\u6642\u9593|\u74E6\u5974\u963F\u5716\u6642\u9593|\u7518\u6BD4\u723E\u6642\u9593|\u7559\u5C3C\u65FA\u5CF6\u6642\u9593|\u76AE\u57C3\u723E\u5CF6\u53CA\u5BC6\u514B\u9686\u5CF6\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u76AE\u57C3\u723E\u5CF6\u53CA\u5BC6\u514B\u9686\u5CF6\u6A19\u6E96\u6642\u9593|\u76AE\u7279\u5EB7\u6A19\u6E96\u6642\u9593|\u7955\u9B6F\u6642\u9593|\u798F\u514B\u862D\u7FA4\u5CF6\u6642\u9593|\u7D10\u5A01\u5CF6\u6642\u9593|\u7D10\u82AC\u862D\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u7D10\u82AC\u862D\u6A19\u6E96\u6642\u9593|\u7D10\u897F\u862D\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u7D10\u897F\u862D\u6A19\u6E96\u6642\u9593|\u7DEC\u7538\u6642\u9593|\u7F85\u897F\u62C9\u6642\u9593|\u8056\u8A95\u5CF6\u6642\u9593|\u81FA\u7DAD\u65AF\u6642\u9593|\u82F1\u570B\u590F\u4EE4\u6642\u9593|\u83AB\u65AF\u79D1\u6A19\u6E96\u6642\u9593|\u83AB\u68EE\u6642\u9593|\u83F2\u5C3C\u514B\u65AF\u7FA4\u5CF6\u6642\u9593|\u84CB\u4E9E\u90A3\u6642\u9593|\u85A9\u6469\u4E9E\u6A19\u6E96\u6642\u9593|\u8607\u5229\u5357\u6642\u9593|\u897F\u5370\u5C3C\u6642\u9593|\u897F\u683C\u6797\u862D\u5CF6\u590F\u4EE4\u6642\u9593|\u897F\u683C\u6797\u862D\u5CF6\u6642\u9593|\u897F\u6B50\u590F\u4EE4\u6642\u9593|\u897F\u6B50\u6642\u9593|\u897F\u85A9\u6469\u4E9E\u590F\u4EE4\u6642\u9593|\u897F\u85A9\u6469\u4E9E\u6642\u9593|\u897F\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\\)|\u897F\u975E\u6642\u9593|\u8AFE\u798F\u514B\u590F\u4EE4\u6642\u9593|\u8AFE\u798F\u514B\u6642\u9593|\u8AFE\u9B6F\u6642\u9593|\u8C6A\u52F3\u7235\u5CF6\u590F\u4EE4\u6642\u9593|\u8C6A\u52F3\u7235\u5CF6\u6A19\u6E96\u6642\u9593|\u8CBB\u723E\u5357\u591A-\u8FEA\u8AFE\u7F85\u5C3C\u4E9E\u6642\u9593|\u8FE6\u7D0D\u5E73\u5747\u6642\u9593|\u963F\u5BCC\u6C57\u6642\u9593|\u963F\u62C9\u4F2F\u6A19\u6E96\u6642\u9593|\u963F\u62C9\u65AF\u52A0\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u963F\u62C9\u65AF\u52A0\u6A19\u6E96\u6642\u9593|\u963F\u6839\u5EF7\u6642\u9593|\u963F\u90A3\u5E95\u6CB3\u6642\u9593|\u97D3\u570B\u6A19\u6E96\u6642\u9593|\u9999\u6E2F\u6642\u9593|\u99AC\u4F86\u897F\u4E9E\u6642\u9593|\u99AC\u514B\u85A9\u65AF\u6642\u9593|\u99AC\u723E\u5730\u592B\u6642\u9593|\u99AC\u7D39\u723E\u7FA4\u5CF6\u6642\u9593|\u9EA5\u5938\u5229\u5CF6\u590F\u4EE4\u6642\u9593|\u9EA5\u5938\u5229\u5CF6\u6642\u9593)(\\p{IsNd}++);\\?-_
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getTimeZone(":;");
      Locale locale1 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser(":;", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser(":;", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getTimeZone(":;");
      FastDateParser fastDateParser0 = new FastDateParser("ybdnDy |k", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser(":;", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("$&VAB", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getTimeZone(":;");
      FastDateParser fastDateParser0 = new FastDateParser("ybdnDy |k", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(42, "K:4wcT%[x");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("CAT", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("hf +vL77lV/rj27n?", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("3e#a_J");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3284, "ybdnDy |k");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("ybdnDy |k", simpleTimeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\\p{IsNd}++)", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-213), " is not a supported timezone name");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("HAhn+$IODCsb2iX&", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals((-213), timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3283, " ts");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(",|+\"/f", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("!/3EwDSHx+'g.( ", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("zh_TW", locale1.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("hf +vL77lV/rj27n?", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("hf +vL77lV/rj27n?", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3283, " ts");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser(",|+\"/f", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("0", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("!/3EwDSHx+'g.( ");
      FastDateParser fastDateParser0 = new FastDateParser("m)", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[m),zh_TW,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("w", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("w", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("8{iRB<({!", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("MfepvzX", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("8O!INHrZa");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("!/3EwDSHx+'g.(&", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("!/3EwDSHx+'g.( ");
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[m),zh_TW,GMT]", timeZone0, locale0);
      assertEquals("FastDateParser[m),zh_TW,GMT]", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("wz^+*7pBTi#q]", timeZone0, locale0);
      assertEquals("wz^+*7pBTi#q]", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }
}
