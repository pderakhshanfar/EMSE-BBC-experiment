/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:16:06 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("=!5~", ";yZ6`)jW^");
      FastDateParser fastDateParser0 = new FastDateParser("GMTCTT", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("GMTCTT", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("(QqxOzk7=y~,RzJk", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("~Ky");
      FastDateParser fastDateParser0 = new FastDateParser("_", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-965));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(QqxOzk7=y~,RzJk");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("(QqxOzk7=y~,RzJk", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(103);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "wLL|>dS&,`&17");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("wLL|>dS&,`&17", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("d'A'zcpvd[)Ys(");
      FastDateParser fastDateParser0 = new FastDateParser("~Ky", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-2156));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("~Ky", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "wLL|>dS&,`&17");
      Locale locale0 = Locale.forLanguageTag("");
      FastDateParser fastDateParser0 = new FastDateParser("<);Ubj**", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("wLL|>dS&,`&17", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("GMT", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(QqxOzk7=y~,RzJk");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("(QqxOzk7=y~,RzJk", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("?)>o~$", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "wLL|>dS&,`&17");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("wLL|>dS&,`&17", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Date date0 = fastDateParser0.parse("GMTBST", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(QqxOk7U=y,RzJk");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("(QqxOk7U=y,RzJk", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("(QqxOk7U=y,RzJk");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(76, "wLL|>dS&,`&17");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("@98#>VlAs{UTn{#e8", simpleTimeZone0, locale0);
      assertEquals("@98#>VlAs{UTn{#e8", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(76, "wLL|>dS&,`&17");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("y>*NsIV;Zs", simpleTimeZone0, locale0);
      assertEquals("y>*NsIV;Zs", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(QqxOzk7=y~,RzJk");
      Locale locale0 = new Locale("", "GMTNET", "GMTNET");
      FastDateParser fastDateParser0 = new FastDateParser("a9@>kh$T>MsvU", timeZone0, locale0);
      assertEquals("a9@>kh$T>MsvU", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("5=q1>V,[R&iJ");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("5=q1>V,[R&iJ", timeZone0, locale0);
      assertEquals("5=q1>V,[R&iJ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(QqxOzk7=y~,RzJk");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("4m:%4,9J", timeZone0, locale0);
      assertEquals("4m:%4,9J", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("Jm/SQ;ZuV.)-", ";yZ6`)jW^");
      FastDateParser fastDateParser0 = new FastDateParser("3]", timeZone0, locale0);
      assertEquals("3]", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(QqxOzk7=y~,RzJk");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("2!)9iKD%CgDn\"", timeZone0, locale0);
      assertEquals("2!)9iKD%CgDn\"", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "wLL|>dS&,`&17");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("H1`Qx", simpleTimeZone0, locale0);
      assertEquals("H1`Qx", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "wLL|>dS&,`&17");
      Locale locale0 = Locale.forLanguageTag("GMTPST");
      FastDateParser fastDateParser0 = new FastDateParser("/$8c?y E)U{w!:", simpleTimeZone0, locale0);
      assertEquals("/$8c?y E)U{w!:", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(QqxOzk7=y~,RzJk");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(".*'=a", timeZone0, locale0);
      try { 
        fastDateParser0.parse("(QqxOzk7=y~,RzJk");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"(QqxOzk7=y~,RzJk\" does not match \\.\\*
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(981, "org.apache.commons.lang3.time.FastDateParser");
      Locale locale0 = new Locale("b0>&", "gpwPo$.x@i9Od@,4", "org.apache.commons.lang3.time.FastDateParser");
      FastDateParser fastDateParser0 = new FastDateParser("-L{pb", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(QqxOzk7=y~,RzJk");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser(",", timeZone0, locale0);
      assertEquals(",", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(QqxOzk7=y~,RzJk");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("),<pxRG=Mu'&86,'\"Gw", timeZone0, locale0);
      assertEquals("),<pxRG=Mu'&86,'\"Gw", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("~Ky");
      FastDateParser fastDateParser0 = new FastDateParser("~Ky", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-1));
      assertEquals(1999, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("7%a0sC!2B~aG:V3UZh", "GMTIST", "Jm/SQ;ZuV.)-");
      FastDateParser fastDateParser0 = new FastDateParser("7%a0sC!2B~aG:V3UZh", timeZone0, locale0);
      assertEquals("7%a0sC!2B~aG:V3UZh", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("_`!<}G[I`MO0zs2^M", timeZone0, locale0);
      assertEquals("_`!<}G[I`MO0zs2^M", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(981, "org.apache.commons.lang3.time.FastDateParser");
      Locale locale0 = Locale.forLanguageTag("b0>&");
      FastDateParser fastDateParser0 = new FastDateParser("E*Sq6", simpleTimeZone0, locale0);
      assertEquals("E*Sq6", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.US;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2432, "");
      FastDateParser fastDateParser0 = new FastDateParser("dk?", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parseObject("U7H]y\"(:7sA$=reX@");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"U7H]y\"(:7sA$=reX@\" does not match (\\p{IsNd}++)(\\p{IsNd}++)\\?
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("GMT+18:00", timeZone0, locale0);
      try { 
        fastDateParser0.parse("BST");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"BST\" does not match (\u7D00\u5143\u524D|\u7D00\u5143\u524D|\u897F\u66A6|\u897F\u66A6)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(QqxOk7U=y,RzJk");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("(QqxOk7U=y,RzJk", timeZone0, locale0);
      Locale locale1 = Locale.ITALY;
      FastDateParser fastDateParser1 = new FastDateParser("(QqxOk7U=y,RzJk", timeZone0, locale1);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "wLL|>hxD,`$17");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("wLL|>hxD,`$17", simpleTimeZone0, locale0);
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser1 = new FastDateParser("wLL|>hxD,`$17", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(QqxOzk7=y~,RzJk");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("(QqxOzk7=y~,RzJk", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("DJa-(r1PW!b", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "wLL|>dS&,`&17");
      Locale locale0 = new Locale("", "CTT", "=cBtqQlqV_w=");
      FastDateParser fastDateParser0 = new FastDateParser("=cBtqQlqV_w=", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(QqxOk7U=y,RzJk");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("(QqxOk7U=y,RzJk", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "wLL|>dS&,`&17");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("wLL|>dS&,`&17", simpleTimeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\\p{IsNd}++)", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "wLL|>dS&,`&17");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("wLL|>dS&,`&17", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "wLL|>dS&,`&17");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("wLL|>dS&,`&17", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("4:n");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("-L{pb");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(981, "org.apache.commons.lang3.time.FastDateParser");
      FastDateParser fastDateParser0 = new FastDateParser("^X=NLQM 6:HR", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(QqxOzk7=y~,RzJk");
      Locale locale0 = new Locale("", "FPSFODU7T5^k'", "FPSFODU7T5^k'");
      FastDateParser fastDateParser0 = new FastDateParser("(QqxOzk7=y~,RzJk", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("(QqxOzk7=y~,RzJk", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "wLL|>dS&,`&17");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("wLL|>dS&,`&17", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parseObject("o3Wb8BFbDu", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("-L{pb");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(981, "org.apache.commons.lang3.time.FastDateParser");
      FastDateParser fastDateParser0 = new FastDateParser("aUwe0]7-8VtmHa", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[aUwe0]7-8VtmHa,,org.apache.commons.lang3.time.FastDateParser]", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "wLL|>dS&,`&17");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("wLL|>dS&,`&17", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "wLL|>dS&,`&17");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("wLL|>dS&,`&17", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(10);
      fastDateParser0.parse("C`9:SWe9.,0HY]J", parsePosition0);
      assertEquals("java.text.ParsePosition[index=11,errorIndex=-1]", parsePosition0.toString());
      assertEquals(11, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("`%;  Hh8qSz:}5V[={", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(616);
      assertEquals(2516, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(QqxOzk7=y~,RzJk");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("h:\"8{sa'@@?TV%", timeZone0, locale0);
      assertEquals("h:\"8{sa'@@?TV%", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser(";yZ6`)jW^", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2871));
      assertEquals((-871), int0);
  }
}
