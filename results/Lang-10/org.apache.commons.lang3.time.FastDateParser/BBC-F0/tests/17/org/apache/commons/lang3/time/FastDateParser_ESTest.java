/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:20:21 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("|3E!f[&L?G8e$,=@");
      Locale locale0 = new Locale("", "");
      FastDateParser fastDateParser0 = new FastDateParser("|3E!f[&L?G8e$,=@", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(1226);
      assertEquals(3126, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("|3E!f[&L?G8e$,=@");
      Locale locale0 = new Locale("", "");
      FastDateParser fastDateParser0 = new FastDateParser("|3E!f[&L?G8e$,=@", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("|3E!f[&L?G8e$,=@", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("|3E!f[&L?G8e$,=@");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("|3E!f[&L?G8e$,=@", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-965), "");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("GMTBST", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("|3E!f[&L?G8e$,=@");
      Locale locale0 = new Locale("", "");
      FastDateParser fastDateParser0 = new FastDateParser("dT0/y$hf", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-3595));
      assertEquals((-1595), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(503, "");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("^JzllSdXU}n", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(348);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Z&vT:vw*PL&A A");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("Z&vT:vw*PL&A A", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("|3E!f[&L?G8e$,=@");
      Locale locale0 = new Locale("", "");
      FastDateParser fastDateParser0 = new FastDateParser("|3E!f[&L?G8e$,=@", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Z&vT:vw*PL&A A");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("Z&vT:vw*PL&A A", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-2345));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("Z&vT:vw*PL&A A", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("|3E!f[&L?G8e$,=@");
      Locale locale0 = new Locale("eMkOCI@rm", "");
      FastDateParser fastDateParser0 = new FastDateParser("|3E!f[&L?G8e$,=@", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1788);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("|3E!f[&L?G8e$,=@");
      Locale locale0 = new Locale("", "");
      FastDateParser fastDateParser0 = new FastDateParser("dT0/y$hf", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("y_ayKvmyJ~59lsH", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(">J.H>3EXaRhjTa@&[");
      Locale locale0 = Locale.GERMANY;
      locale0.getDisplayCountry();
      String string0 = "Kz87hOVk LrQ%qV";
      FastDateParser fastDateParser0 = new FastDateParser("Kz87hOVk LrQ%qV", timeZone0, locale0);
      MockDate mockDate0 = new MockDate();
      Locale locale1 = Locale.FRENCH;
      FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale1);
      int int0 = (-1);
      ParsePosition parsePosition0 = new ParsePosition(int0);
      // Undeclared exception!
      try { 
        fastDateParser1.parseObject(string0, parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("dQ)&q$(Qk\"JRn", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", timeZone0, locale0);
      assertEquals("(p{IsNd}++)", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("|3E!f[&L?G8e$,=@");
      Locale locale0 = new Locale("eMkOCI@rm", "");
      FastDateParser fastDateParser0 = new FastDateParser("|3E!f[&L?G8e$,=@", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(100);
      parsePosition0.setIndex(8);
      Date date0 = fastDateParser0.parse("eMkOCI@rm", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(">J.H>3EXaRhjTa@&[");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(">J.H>3EXaRhjTa@&[", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse(">J.H>3EXaRhjTa@&[", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1446, "EAT");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("dmWnO;4!xyB", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse("wo`@d");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"wo`@d\" does not match (\\p{IsNd}{1}+)(\\p{IsNd}{1}+)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1204, "!Z| d`t#H");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("!Z| d`t#H", simpleTimeZone0, locale0);
      assertEquals("!Z| d`t#H", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(505, "");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("<~Q6^p(#xl*Q30q", simpleTimeZone0, locale0);
      assertEquals("<~Q6^p(#xl*Q30q", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2345), ":y%kHDV");
      FastDateParser fastDateParser0 = new FastDateParser(":y%kHDV", simpleTimeZone0, locale0);
      assertEquals(":y%kHDV", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.UK;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2264), "K.;y#!jKB!.yV$6(l<$");
      FastDateParser fastDateParser0 = new FastDateParser("9G!a|}-", simpleTimeZone0, locale0);
      assertEquals("9G!a|}-", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(">J.H>3EXaRhjTa@&[");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("7K\b^2.q>KTPh", timeZone0, locale0);
      assertEquals("7K\b^2.q>KTPh", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDateParser fastDateParser0 = new FastDateParser("@s\"Ks5ZXV_|)E*$~A2", timeZone0, locale0);
      assertEquals("@s\"Ks5ZXV_|)E*$~A2", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("4Tfb", timeZone0, locale0);
      assertEquals("4Tfb", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("^JzllSdXU}n");
      Locale locale0 = new Locale("l,+WlQ", "^JzllSdXU}n");
      FastDateParser fastDateParser0 = new FastDateParser("D3cd", timeZone0, locale0);
      assertEquals("D3cd", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "GMTVST");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(">z2~yBP34p", simpleTimeZone0, locale0);
      assertEquals(">z2~yBP34p", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, ":y%kHDV", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
      FastDateParser fastDateParser0 = new FastDateParser("/JvdvKxaz", simpleTimeZone0, locale0);
      assertEquals("/JvdvKxaz", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2023, "K.;y#!jKB!.yV$6(l<$");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("-;+,WJf", simpleTimeZone0, locale0);
      assertEquals("-;+,WJf", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser(")!", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-505));
      assertEquals(1495, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(">J.H>3EXaRhjTa@&[");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(">J.H>3EXaRhjTa@&[", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone(":Q7`X7a|`R&+");
      FastDateParser fastDateParser0 = new FastDateParser("?*e|_Ix]phYumLu", timeZone0, locale0);
      assertEquals("?*e|_Ix]phYumLu", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "^JzllSdXU}n";
      TimeZone timeZone0 = TimeZone.getTimeZone("^JzllSdXU}n");
      Locale locale0 = new Locale("l,WlQ", "^JzllSdXU}n");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      FastDateParser fastDateParser0 = new FastDateParser("Zsg\"Uw\"Tx]cV", timeZone0, locale0);
      timeZone0.setID("");
      TimeZone timeZone1 = TimeZone.getTimeZone("?*e|_Ix]phYumLu");
      Locale locale1 = Locale.FRANCE;
      String string1 = "m=JcYt";
      FastDateParser fastDateParser1 = new FastDateParser("m=JcYt", timeZone0, locale1);
      locale0.getUnicodeLocaleAttributes();
      FastDateParser fastDateParser2 = null;
      try {
        fastDateParser2 = new FastDateParser("", timeZone1, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("^JzllSdXU}n");
      Locale locale0 = new Locale("l,WlQ", "^JzllSdXU}n");
      FastDateParser fastDateParser0 = new FastDateParser(".#$.ftRwH5^)]su", timeZone0, locale0);
      assertEquals(".#$.ftRwH5^)]su", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(">J.H>3EXaRhjTa@&[");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("*xUH,O%RM]@-*m", timeZone0, locale0);
      try { 
        fastDateParser0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match \\*
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(">J.H>3EXaRhjTa@&[");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("S0#G15:|{0^J4j7f", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject(">J.H>3EXaRhjTa@&[");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \">J.H>3EXaRhjTa@&[\" does not match (\\p{IsNd}{1}+)0#(\u7D00\u5143\u524D|\u7D00\u5143\u524D|\u897F\u66A6|\u897F\u66A6)15:\\|\\{0\\^
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("&@3|wF;i.CaXKW`G", timeZone0, locale0);
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser1 = new FastDateParser("&@3|wF;i.CaXKW`G", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      TimeZone timeZone0 = TimeZone.getDefault();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(53, "S6bHVNv.Gn");
      FastDateParser fastDateParser0 = new FastDateParser("S6bHVNv.Gn", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("S6bHVNv.Gn", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("^JzllSdXU}n");
      Locale locale0 = new Locale("l,WlQ", "^JzllSdXU}n");
      FastDateParser fastDateParser0 = new FastDateParser("w", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("k6Ed,k@3aM do", timeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(505, "");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("^JzllSdXU}n", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals("^JzllSdXU}n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("K.;y#!jKB!.yV$6(l<$", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\\p{IsNd}++)\\.;(\\p{IsNd}++)#!", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(505, "^JzllSdXU}n");
      Locale locale0 = new Locale("^JzllSdXU}n", "^JzllSdXU}n");
      FastDateParser fastDateParser0 = new FastDateParser("^JzllSdXU}n", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(">J.H>3EXaRhjTa@&[");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(">J.H>3EXaRhjTa@&[", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject(">J.H>3EXaRhjTa@&[");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(">J.H>3EXaRhjTa@&[");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(">J.H>3EXaRhjTa@&[", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("FR", locale1.getCountry());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("|3E!f[&L?G8e$,=@");
      Locale locale0 = new Locale("eMkOCI@rm", "");
      FastDateParser fastDateParser0 = new FastDateParser("|3E!f[&L?G8e$,=@", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("|3E!f[&L?G8e$,=@", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(">J.H>EX.RhjTa@&");
      Locale locale0 = new Locale("dlqmQ68JrohZ<,:3,B");
      FastDateParser fastDateParser0 = new FastDateParser("dlqmQ68JrohZ<,:3,B", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parseObject("61D0 mS]^.8pf%[h", parsePosition0);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("y_ayKvmyJ~59lsH", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[y_ayKvmyJ~59lsH,en_US,GMT+18:00]", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("| %kHDV", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(">J.H>3EX.RhjTa@&[");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("dlqmQ68JrohZ<,:3,B", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("0-Fw");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("&@3|wF;i.CaXKW`G", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Locale locale0 = Locale.UK;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-336), "i-%+~c0YRLo#*");
      FastDateParser fastDateParser0 = new FastDateParser("adaAx ?%1", simpleTimeZone0, locale0);
      assertEquals("adaAx ?%1", fastDateParser0.getPattern());
  }
}
