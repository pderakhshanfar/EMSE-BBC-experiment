/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:15:53 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "F&SH^F3l0XP1AKgw0");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("F&SH^F3l0XP1AKgw0", simpleTimeZone0, locale0);
      assertEquals("F&SH^F3l0XP1AKgw0", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2778), "(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("(The ", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(92);
      assertEquals(1992, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4162), "au k*o'U.o");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      Locale locale1 = locale0.stripExtensions();
      FastDateParser fastDateParser0 = new FastDateParser("au k*o'U.o", simpleTimeZone0, locale1);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "s]>PW&yuijVK( K", 0, 0, 0, 0, 0, 0, 509, 0);
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("s]>PW&yuijVK( K", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("CNT", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "(p{IsNd}++)", 0, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("(p{IsNd}++)", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("]");
      FastDateParser fastDateParser0 = new FastDateParser("]", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(94, "F&SH^F3l0XP1AKgw0");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("F&SH^F3l0XP1AKgw0", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4162), "au k*o'U.o");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("au k*o'U.o", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone(" not in (");
      FastDateParser fastDateParser0 = new FastDateParser("1h^7J/GH{Z", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2366));
      assertEquals((-366), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1440, "GMTNET");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser(">", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject(">", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("]");
      FastDateParser fastDateParser0 = new FastDateParser("]", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2800), "(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("(The ", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("(The ", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "s]>PW&yuijVK( K", 0, 0, 0, 0, 0, 0, 476, 0);
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("s]>PW&yuijVK( K", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.UK;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("MRS", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "F;G&wZ", 0, 0, 0, 0, 0, 0, 0, 0, 2102, 2414, 2414);
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("F;G&wZ", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "F&SH^F3l0XP1AKgw0");
      Locale locale0 = Locale.UK;
      Locale locale1 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("@6E|\u0006Z9I{HI", simpleTimeZone0, locale1);
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser1 = new FastDateParser("@6E|\u0006Z9I{HI", timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("1h^7J/GH{Z", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "s]>PW&yuijVK( K", 0, 0, 0, 0, 0, 0, 474, 0);
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("s]>PW&yuijVK( K", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("ART", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("ECT", parsePosition0);
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 1679, 0, 0, 0, 2102, 2414, 2414);
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("F;G&wZ", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse("F;G&wZ");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"F;G&wZ\" does not match (\\p{IsNd}++);(BC|BC|dopo\\s*+Cristo|dopo\\s*+Cristo)&(\\p{IsNd}++)(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville\\s*+Standard\\s*+Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay\\s*+Standard\\s*+Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|Ora\\s*+del\\s*+Bangladesh|Ora\\s*+del\\s*+Bhutan|Ora\\s*+del\\s*+Brasile|Ora\\s*+del\\s*+Brunei|Ora\\s*+del\\s*+Cile|Ora\\s*+del\\s*+Kirghizistan|Ora\\s*+del\\s*+Nepal|Ora\\s*+del\\s*+Pakistan|Ora\\s*+del\\s*+Paraguay|Ora\\s*+del\\s*+Per\u00F9|Ora\\s*+del\\s*+Tagikistan|Ora\\s*+del\\s*+Terr\\.\\s*+Britannico\\s*+dell'Oceano\\s*+Indiano|Ora\\s*+del\\s*+Turkmenistan|Ora\\s*+del\\s*+Venezuela|Ora\\s*+dell'Afghanistan|Ora\\s*+dell'Africa\\s*+centrale|Ora\\s*+dell'Africa\\s*+occidentale|Ora\\s*+dell'Africa\\s*+orientale|Ora\\s*+dell'Argentina|Ora\\s*+dell'Armenia|Ora\\s*+dell'Azerbaigian|Ora\\s*+dell'Ecuador|Ora\\s*+dell'Europa\\s*+centrale|Ora\\s*+dell'Europa\\s*+occidentale|Ora\\s*+dell'Europa\\s*+orientale|Ora\\s*+dell'Indocina|Ora\\s*+dell'Indonesia\\s*+centrale|Ora\\s*+dell'Indonesia\\s*+occidentale|Ora\\s*+dell'Indonesia\\s*+orientale|Ora\\s*+dell'Isola\\s*+Christmas|Ora\\s*+dell'Isola\\s*+della\\s*+Fenice|Ora\\s*+dell'Isola\\s*+di\\s*+Pasqua|Ora\\s*+dell'Isola\\s*+Macquarie|Ora\\s*+dell'Uruguay|Ora\\s*+dell'Uzbekistan|Ora\\s*+della\\s*+Birmania/Myanmar|Ora\\s*+della\\s*+Bolivia|Ora\\s*+della\\s*+Colombia|Ora\\s*+della\\s*+Georgia|Ora\\s*+della\\s*+Groenlandia\\s*+occidentale|Ora\\s*+della\\s*+Groenlandia\\s*+orientale|Ora\\s*+della\\s*+Guyana|Ora\\s*+della\\s*+Guyana\\s*+Francese|Ora\\s*+della\\s*+Malaysia|Ora\\s*+della\\s*+Nuova\\s*+Caledonia|Ora\\s*+delle\\s*+Azzorre|Ora\\s*+delle\\s*+Falkland|Ora\\s*+delle\\s*+Galapagos|Ora\\s*+delle\\s*+Isole\\s*+Cocos|Ora\\s*+delle\\s*+Isole\\s*+Cook|Ora\\s*+delle\\s*+Isole\\s*+Gilbert|Ora\\s*+delle\\s*+Isole\\s*+Marchesi|Ora\\s*+delle\\s*+Isole\\s*+Marshall|Ora\\s*+delle\\s*+Isole\\s*+Salomone|Ora\\s*+delle\\s*+Line\\s*+Islands|Ora\\s*+delle\\s*+Maldive|Ora\\s*+delle\\s*+Seychelles|Ora\\s*+delle\\s*+Terre\\s*+Australi\\s*+e\\s*+Antartiche\\s*+Francesi|Ora\\s*+di\\s*+Acre|Ora\\s*+di\\s*+Alma-Ata|Ora\\s*+di\\s*+Anadyr|Ora\\s*+di\\s*+Aqtau|Ora\\s*+di\\s*+Aqtobe|Ora\\s*+di\\s*+Capo\\s*+Verde|Ora\\s*+di\\s*+Chatham\\s*+standard|Ora\\s*+di\\s*+Choibalsan|Ora\\s*+di\\s*+Chuuk|Ora\\s*+di\\s*+Davis|Ora\\s*+di\\s*+Dumont-d'Urville|Ora\\s*+di\\s*+Ekaterinburg|Ora\\s*+di\\s*+Fernando\\s*+de\\s*+Noronha|Ora\\s*+di\\s*+Figi|Ora\\s*+di\\s*+Gambier|Ora\\s*+di\\s*+Hong\\s*+Kong|Ora\\s*+di\\s*+Hovd|Ora\\s*+di\\s*+Irkutsk|Ora\\s*+di\\s*+Jakutsk|Ora\\s*+di\\s*+Kosrae|Ora\\s*+di\\s*+Krasnojarsk|Ora\\s*+di\\s*+Magadan|Ora\\s*+di\\s*+Mauritius|Ora\\s*+di\\s*+Mawson|Ora\\s*+di\\s*+Nauru|Ora\\s*+di\\s*+Niue|Ora\\s*+di\\s*+Norfolk|Ora\\s*+di\\s*+Novosibirsk|Ora\\s*+di\\s*+Omsk|Ora\\s*+di\\s*+Oral|Ora\\s*+di\\s*+Palau|Ora\\s*+di\\s*+Papua\\s*+Nuova\\s*+Guinea|Ora\\s*+di\\s*+Petropavlovsk-Kamchatski|Ora\\s*+di\\s*+Pohnpei|Ora\\s*+di\\s*+Qyzylorda|Ora\\s*+di\\s*+Reunion|Ora\\s*+di\\s*+Rothera|Ora\\s*+di\\s*+Sakhalin|Ora\\s*+di\\s*+Samara|Ora\\s*+di\\s*+Samoa|Ora\\s*+di\\s*+Singapore|Ora\\s*+di\\s*+Suriname|Ora\\s*+di\\s*+Syowa|Ora\\s*+di\\s*+Tahiti|Ora\\s*+di\\s*+Timor\\s*+Leste|Ora\\s*+di\\s*+Tokelau|Ora\\s*+di\\s*+Tonga|Ora\\s*+di\\s*+Tuvalu|Ora\\s*+di\\s*+Ulaanbaatar|Ora\\s*+di\\s*+Ust-Nera|Ora\\s*+di\\s*+Vanuatu|Ora\\s*+di\\s*+Vladivostok|Ora\\s*+di\\s*+Vostok|Ora\\s*+di\\s*+Wake|Ora\\s*+di\\s*+Wallis\\s*+e\\s*+Futuna|Ora\\s*+estiva\\s*+britannica|Ora\\s*+estiva\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud\\)|Ora\\s*+estiva\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud/Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+estiva\\s*+del\\s*+Cile|Ora\\s*+estiva\\s*+del\\s*+Paraguay|Ora\\s*+estiva\\s*+dell'Australia\\s*+orientale\\s*+\\(Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+estiva\\s*+dell'Europa\\s*+centrale|Ora\\s*+estiva\\s*+dell'Europa\\s*+occidentale|Ora\\s*+estiva\\s*+dell'Europa\\s*+orientale|Ora\\s*+estiva\\s*+dell'Isola\\s*+di\\s*+Pasqua|Ora\\s*+estiva\\s*+dell'Isola\\s*+Macquarie|Ora\\s*+estiva\\s*+della\\s*+Groenlandia\\s*+occidentale|Ora\\s*+estiva\\s*+della\\s*+Groenlandia\\s*+orientale|Ora\\s*+estiva\\s*+delle\\s*+Azzorre|Ora\\s*+estiva\\s*+di\\s*+Figi|Ora\\s*+estiva\\s*+di\\s*+Lord\\s*+Howe|Ora\\s*+estiva\\s*+di\\s*+Norfolk|Ora\\s*+estiva\\s*+di\\s*+Samoa|Ora\\s*+estiva\\s*+irlandese|Ora\\s*+estiva\\s*+orientale\\s*+\\(Tasmania\\)|Ora\\s*+estiva\\s*+orientale\\s*+\\(Victoria\\)|Ora\\s*+legale\\s*+Cuba|Ora\\s*+legale\\s*+dell'Alaska|Ora\\s*+legale\\s*+dell'Atlantico\\s*+occidentale|Ora\\s*+legale\\s*+della\\s*+costa\\s*+occidentale\\s*+USA|Ora\\s*+legale\\s*+della\\s*+Nuova\\s*+Zelanda|Ora\\s*+legale\\s*+delle\\s*+Isole\\s*+Hawaii|Ora\\s*+legale\\s*+di\\s*+Chatham|Ora\\s*+legale\\s*+di\\s*+Israele|Ora\\s*+legale\\s*+di\\s*+Saint-Pierre\\s*+e\\s*+Miquelon|Ora\\s*+legale\\s*+di\\s*+Terranova|Ora\\s*+legale\\s*+Iran|Ora\\s*+legale\\s*+USA\\s*+centrale|Ora\\s*+legale\\s*+USA\\s*+occidentale|Ora\\s*+legale\\s*+USA\\s*+orientale|Ora\\s*+media\\s*+del\\s*+Ghana|Ora\\s*+media\\s*+di\\s*+Greenwich|Ora\\s*+solare\\s*+Cuba|Ora\\s*+solare\\s*+del\\s*+Giappone|Ora\\s*+solare\\s*+del\\s*+golfo|Ora\\s*+solare\\s*+del\\s*+Sudafrica|Ora\\s*+solare\\s*+dell'Alaska|Ora\\s*+solare\\s*+dell'Amazzonia|Ora\\s*+solare\\s*+dell'Arabia|Ora\\s*+solare\\s*+dell'Atlantico\\s*+occidentale|Ora\\s*+solare\\s*+dell'India|Ora\\s*+solare\\s*+della\\s*+Cina|Ora\\s*+solare\\s*+della\\s*+Corea|Ora\\s*+solare\\s*+della\\s*+costa\\s*+occidentale\\s*+USA|Ora\\s*+solare\\s*+della\\s*+Georgia\\s*+Australe|Ora\\s*+solare\\s*+della\\s*+Nuova\\s*+Zelanda|Ora\\s*+solare\\s*+delle\\s*+Isole\\s*+Hawaii|Ora\\s*+solare\\s*+di\\s*+Saint-Pierre\\s*+e\\s*+Miquelon|Ora\\s*+solare\\s*+di\\s*+Terranova|Ora\\s*+solare\\s*+Iran|Ora\\s*+solare\\s*+USA\\s*+centrale|Ora\\s*+solare\\s*+USA\\s*+occidentale|Ora\\s*+solare\\s*+USA\\s*+orientale|Ora\\s*+standard\\s*+Australia\\s*+centro-occidentale|Ora\\s*+standard\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud\\)|Ora\\s*+standard\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud/Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+standard\\s*+centrale\\s*+\\(Territori\\s*+del\\s*+Nord\\)|Ora\\s*+standard\\s*+dell'Australia\\s*+occidentale|Ora\\s*+standard\\s*+dell'Australia\\s*+orientale\\s*+\\(Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+standard\\s*+di\\s*+Chamorro|Ora\\s*+standard\\s*+di\\s*+Israele|Ora\\s*+standard\\s*+di\\s*+Lord\\s*+Howe|Ora\\s*+standard\\s*+di\\s*+Mosca|Ora\\s*+standard\\s*+di\\s*+Pitcairn|Ora\\s*+standard\\s*+di\\s*+Samoa|Ora\\s*+standard\\s*+orientale\\s*+\\(Queensland\\)|Ora\\s*+standard\\s*+orientale\\s*+\\(Tasmania\\)|Ora\\s*+standard\\s*+orientale\\s*+\\(Victoria\\)|ORAT|PDT|PET|PETT|PGT|Philippines\\s*+Standard\\s*+Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk\\s*+Time|SRET|SRT|SST|SYOT|TAHT|Tempo\\s*+universale\\s*+coordinato|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.UK;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("GMTPST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("yP_IZy}", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("842.#a?'t7*UhiV^F1");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("yyy@hn&nYA`7", timeZone0, locale0);
      assertEquals("yyy@hn&nYA`7", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "(p{IsNd}++)");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("sw`Z[eV]n!", simpleTimeZone0, locale0);
      assertEquals("sw`Z[eV]n!", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "(p{IsNd}++)");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("E<_ 7n", simpleTimeZone0, locale0);
      assertEquals("E<_ 7n", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "F&SH^F3l0XP1AKgw0");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("8\"", simpleTimeZone0, locale0);
      assertEquals("8\"", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("]");
      FastDateParser fastDateParser0 = new FastDateParser("5`7!xFL7p?I5U", timeZone0, locale0);
      assertEquals("5`7!xFL7p?I5U", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(108, "");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("4\"aR-h\"(g?PV", simpleTimeZone0, locale0);
      assertEquals("4\"aR-h\"(g?PV", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("]");
      FastDateParser fastDateParser0 = new FastDateParser("0bp1Y", timeZone0, locale0);
      assertEquals("0bp1Y", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "s]>PW&yuijVK( K", 0, 0, 0, 0, 0, 0, 476, 0);
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("])%z/rRJ$", simpleTimeZone0, locale0);
      assertEquals("])%z/rRJ$", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "1h^7J/GH{Z");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("-<T<7cy4cf", simpleTimeZone0, locale0);
      assertEquals("-<T<7cy4cf", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser(",", timeZone0, locale0);
      assertEquals(",", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2800), "(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("*y_y2;DU;~", simpleTimeZone0, locale0);
      assertEquals("*y_y2;DU;~", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("yPo}", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("4s`-JiNdSGjh~'");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("=|y", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("Ek[>Er\"GT`;'|FJ(8", timeZone0, locale0);
      assertEquals("Ek[>Er\"GT`;'|FJ(8", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("]");
      FastDateParser fastDateParser0 = new FastDateParser("yK6d7H}L>", timeZone0, locale0);
      assertEquals("yK6d7H}L>", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1396, "");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("aZ?6o", simpleTimeZone0, locale0);
      assertEquals("aZ?6o", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1396, "");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("G$", simpleTimeZone0, locale0);
      assertEquals("G$", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "(p{IsNd}++)");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(");d(AmKBuy>[z \"pER$", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse("(p{IsNd}++)");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"(p{IsNd}++)\" does not match \\);(\\p{IsNd}++)\\(
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "(p{IkNd}++s");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IkNd}++s", simpleTimeZone0, locale0);
      Locale locale1 = Locale.KOREA;
      FastDateParser fastDateParser1 = new FastDateParser("(p{IkNd}++s", simpleTimeZone0, locale1);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "F&SH^F3l0XP1AKgw0");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("@6E|\u0006Z9I{HI", simpleTimeZone0, locale0);
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser1 = new FastDateParser("@6E|\u0006Z9I{HI", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("yyDNq\"CO#<", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("M9^z{:^t", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "1h^7J/GH{Z");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("zm:B", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals("1h^7J/GH{Z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("yyDNq\"CO#<", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1396, "");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.UK;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("MRS", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("8");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("hV[", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("6Dqk`c)SF~$p");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone(" not in (");
      FastDateParser fastDateParser0 = new FastDateParser("1h^7J/GH{Z", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("1(\\p{IsNd}++)\\^7", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "F;G&wZ", 0, 0, 0, 0, 0, 0, 0, 0, 2102, 2414, 2414);
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("F;G&wZ", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("]");
      FastDateParser fastDateParser0 = new FastDateParser("]", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match \\]
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "F;G&wZ", 0, 0, 0, 0, 0, 0, 0, 0, 2102, 2414, 2414);
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("F;G&wZ", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertSame(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "F;G&wZ", 0, 0, 0, 0, 0, 0, 0, 0, 2102, 2414, 2414);
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("F;G&wZ", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("F;G&wZ", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("hV[", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(124);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("hV[", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("=|y", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[=|y,zh_CN,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(42, "F&SH^F3l0XP1AKgw0");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("SvOd-", simpleTimeZone0, locale0);
      Date date0 = fastDateParser0.parse("2X3OPY6");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("HN}2wHP'w}0#S", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("80_L::EFHacfJj=pp");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "1h^7J/GH{Z");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("SE.fJ.^DnN\"7Fu;8ks'", simpleTimeZone0, locale0);
      assertEquals("SE.fJ.^DnN\"7Fu;8ks'", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("D+E+|Fh|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s|w+|y+|+|''|'[^'{++d''[^']*+)*+'|[^'A-Za-]++", timeZone0, locale0);
      assertEquals("D+E+|Fh|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s|w+|y+|+|''|'[^'{++d''[^']*+)*+'|[^'A-Za-]++", fastDateParser0.getPattern());
  }
}
