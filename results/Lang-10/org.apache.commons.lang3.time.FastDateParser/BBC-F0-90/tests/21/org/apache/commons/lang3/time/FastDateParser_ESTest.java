/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:23:22 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("#Ou", "y!YMc\"k|B^j", "y!YMc\"k|B^j");
      FastDateParser fastDateParser0 = new FastDateParser("!]+yyz*89nhCwA", timeZone0, locale0);
      assertEquals("!]+yyz*89nhCwA", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone(")d>Ey@G.nLa[Yi*");
      FastDateParser fastDateParser0 = new FastDateParser(")d>Ey@G.nLa[Yi*", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      Locale locale1 = (Locale)locale0.clone();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(")d>Ey@G.nLa[Yi*");
      FastDateParser fastDateParser0 = new FastDateParser(")d>Ey@G.nLa[Yi*", zoneInfo0, locale1);
      try { 
        fastDateParser0.parse("org.apache.commons.lang3.time.FastDateParser$4");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"org.apache.commons.lang3.time.FastDateParser$4\" does not match \\)(\\p{IsNd}++)>(\u571F|\u571F\u66DC\u65E5|\u65E5|\u65E5\u66DC\u65E5|\u6708|\u6708\u66DC\u65E5|\u6728|\u6728\u66DC\u65E5|\u6C34|\u6C34\u66DC\u65E5|\u706B|\u706B\u66DC\u65E5|\u91D1|\u91D1\u66DC\u65E5)(\\p{IsNd}++)@(\u7D00\u5143\u524D|\u7D00\u5143\u524D|\u897F\u66A6|\u897F\u66A6)\\.
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("s*+");
      FastDateParser fastDateParser0 = new FastDateParser("ECT", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(",9^:v?c");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser(",9^:v?c", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject(",9^:v?c", parsePosition0);
      assertEquals(4, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=4,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(",ns.v@&!XE|");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("Deutschland", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("4}L{.<~CL6");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ",9^:v?c", 0, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("%]_hs$\"X=|ik:!KJQ", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "ECT");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("ECT", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("ECT", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-456), "z;$MB'B#Jaft");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("z;$MB'B#Jaft", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-607));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("GMTPST", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(",9^:v?c");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser(",9^:v?c", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("H(@g+N4Y Cp%e6");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("*", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-456), "jPYi{`");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("z;$MB'B#Jaft", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(96);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("jPYi{`", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-456), "jPYi{`");
      ParsePosition parsePosition0 = new ParsePosition((-456));
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("z;$MB'B#Jaft", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "GMTECT");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMTCAT", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("hNzvk=>*};@~^*BGdf", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D0|E+|F+|G+|_+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+&z+|''|'[^']++(''[^']*+)*+'|[7'A-Za-z]++");
      Locale locale0 = new Locale("D0|E+|F+|G+|_+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+&z+|''|'[^']++(''[^']*+)*+'|[7'A-Za-z]++", "D0|E+|F+|G+|_+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+&z+|''|'[^']++(''[^']*+)*+'|[7'A-Za-z]++");
      Locale locale1 = Locale.FRANCE;
      locale0.getDisplayCountry(locale1);
      FastDateParser fastDateParser0 = new FastDateParser("D0|E+|F+|G+|_+|K+|M+|S+|W+|Z+|A+|D+|H+|K+|M+|S+|W+|Y+&Z+|''|'[^']++(''[^']*+)*+'|[7'A-ZA-Z]++", timeZone0, locale0);
      fastDateParser0.isNextNumber();
      FastDateParser fastDateParser1 = new FastDateParser("D0|E+|F+|G+|_+|K+|M+|S+|W+|Z+|A+|D+|H+|K+|M+|S+|W+|Y+&Z+|''|'[^']++(''[^']*+)*+'|[7'A-ZA-Z]++", timeZone0, locale1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone(")d>Ey@(.rLa[Yi*");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser(" mA>`d9mcpCUJsDQ{}h", timeZone0, locale0);
      assertEquals(" mA>`d9mcpCUJsDQ{}h", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(",9^:v?c");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser(",9^:v?c", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("3(Sj_157", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.*ommons.lang3.time.FastDateParser$NumberStrategy");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("France", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("6?G.V-2uh9Hjd[H", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("H(@g+N4Y C$%e6");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("H(@g+N4Y C$%e6", timeZone0, locale0);
      try { 
        fastDateParser0.parse("H(@g+N4Y C$%e6");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"H(@g+N4Y C$%e6\" does not match (\\p{IsNd}++)\\(@
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(602, "$}kW$tq2i<,6cV");
      FastDateParser fastDateParser0 = new FastDateParser("9vP/*29Rpw", simpleTimeZone0, locale0);
      assertEquals("9vP/*29Rpw", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-456), "jPYi{`");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("8y`T1Hx", simpleTimeZone0, locale0);
      assertEquals("8y`T1Hx", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(97, "A. sYR6$8<4.QP");
      FastDateParser fastDateParser0 = new FastDateParser("6E:*", simpleTimeZone0, locale0);
      assertEquals("6E:*", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("45AmzWF%ctG<1z");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("45AmzWF%ctG<1z", timeZone0, locale0);
      assertEquals("45AmzWF%ctG<1z", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(",9^:v?c");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("3(Sj_157", timeZone0, locale0);
      assertEquals("3(Sj_157", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("/h>");
      FastDateParser fastDateParser0 = new FastDateParser("/h>", timeZone0, locale0);
      assertEquals("/h>", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("-k;l:");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("-k;l:", timeZone0, locale0);
      assertEquals("-k;l:", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-456), "8tDN{,E![Ekef[");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("7m*A@qXr1^7J[]OaDY{", simpleTimeZone0, locale0);
      assertEquals("7m*A@qXr1^7J[]OaDY{", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.*ommons.lang3.time.FastDateParser$NumberStrategy");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("France", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2064));
      assertEquals((-64), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("=VN6Ufcf@$g#*iLd]", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(1885);
      assertEquals(3785, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(")d>Ey@G.nLa[Yi*");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("}5H5Aj<>M7\"r{-}+}O", timeZone0, locale0);
      assertEquals("}5H5Aj<>M7\"r{-}+}O", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2192, "~Y{`");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("{gK!", simpleTimeZone0, locale0);
      assertEquals("{gK!", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-456), "jPYi{`");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("wHD|D1;f($'", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("?r%z}g", timeZone0, locale0);
      assertEquals("?r%z}g", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone(")d>Ey@G.nLa[Yi*");
      FastDateParser fastDateParser0 = new FastDateParser(")d>Ey@G.nLa[Yi*", timeZone0, locale0);
      Locale locale1 = Locale.ENGLISH;
      FastDateParser fastDateParser1 = new FastDateParser(")d>Ey@G.nLa[Yi*", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("H(@g+N4Y C$%e6");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("H(@g+N4Y C$%e6", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "H(@g+N4Y C$%e6");
      FastDateParser fastDateParser1 = new FastDateParser("H(@g+N4Y C$%e6", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("CST");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(",n+is.v@&!XE|2", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("GMTPNT", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("<VS}", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone(")d>Ey@G.nLa[Yi*");
      FastDateParser fastDateParser0 = new FastDateParser(")d>Ey@G.nLa[Yi*", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("H(@g+N4Y %e6");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("org.apache.commons.lang3.time.FastDateParser$4", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("hNzvk=>*};@~^*BGdf", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("468a]k>V+0j8u>wOW>");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("=VN6Ufcf@$g#*iLd]", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("=", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "ECT");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("ECT", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parseObject("93");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"93\" does not match (Fri|Friday|Mon|Monday|Sat|Saturday|Sun|Sunday|Thu|Thursday|Tue|Tuesday|Wed|Wednesday)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("v");
      FastDateParser fastDateParser0 = new FastDateParser("26r@kAm$CLU{", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertSame(locale0, locale1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("|n\"(PL7@}8|b'?a");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("|n\"(PL7@}8|b'?a", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("|n\"(PL7@}8|b'?a", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "ECT");
      Locale locale0 = new Locale("X/2e Vk*f7o", " locale does not support dates before 1868 AD)\n", " locale does not support dates before 1868 AD)\n");
      FastDateParser fastDateParser0 = new FastDateParser("ECT", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(10);
      Object object0 = fastDateParser0.parseObject("org.apache.commons.lang3.time.FastDateParser", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1495), "ECT");
      Locale locale0 = new Locale("_&_uBN[-}", "", "ECT");
      FastDateParser fastDateParser0 = new FastDateParser("_&_uBN[-}", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[_&_uBN[-},_&_ubn[-}__ECT,ECT]", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("(The ", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("haSM1J$o<`Ift", timeZone0, locale0);
      assertEquals("haSM1J$o<`Ift", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-456), "jPYi{`");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("^yZTX}L(*yFT)8", simpleTimeZone0, locale0);
      assertEquals("^yZTX}L(*yFT)8", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']+G(''[^']*+)*+'|[^'A-Za-z]++");
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']+G(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      TimeZone timeZone1 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, timeZone1);
  }
}
