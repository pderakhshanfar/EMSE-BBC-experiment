/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 09:29:35 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(7, "(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", 1724, 0, 0, (-3359), 0, 0, 1724, 0);
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(3);
      Object object0 = fastDateParser0.parseObject("GMT+00:00", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("GMTJST", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(36, "");
      FastDateParser fastDateParser0 = new FastDateParser("SST", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-399), "zNUFC");
      FastDateParser fastDateParser0 = new FastDateParser("zNUFC", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=zNUFC,offset=-399,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("zNmUXFCZ");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("zNmUXFCZ", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-3508));
      assertEquals((-1508), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(961, "(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|");
      ParsePosition parsePosition0 = new ParsePosition(123);
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("  !sc+I\"UJ", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("W{7ij8)?V", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ParsePosition parsePosition0 = new ParsePosition(1);
      FastDateParser fastDateParser0 = new FastDateParser("GMTJST", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("K>h@JnRXS*HdQ8%");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("y7&).N`Dg|*]]Np&", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(961, "(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|");
      Locale locale0 = Locale.KOREAN;
      ParsePosition parsePosition0 = new ParsePosition(123);
      FastDateParser fastDateParser0 = new FastDateParser(",J9k\"5P0_yCs", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("K>h@JnRXS*HdQ8%", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("HC+1g|-`o5T'!<>@");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("HC+1g|-`o5T'!<>@", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "zNmUXFCZ";
      TimeZone timeZone0 = TimeZone.getTimeZone("zNmUXFCZ");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("zNmUXFCZ", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Locale locale1 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser1 = new FastDateParser("zNmUXFCZ", timeZone0, locale1);
      try { 
        fastDateParser0.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"zNmUXFCZ\" does not match (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre\\s*+Time|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistan\\s*+Time|AFT|AKDT|AKST|Alaska\\s*+Daylight\\s*+Time|Alaska\\s*+Standard\\s*+Time|Alma-Ata\\s*+Time|ALMT|Amazon\\s*+Time|AMT|Anadyr\\s*+Time|ANAT|Aqtau\\s*+Time|Aqtobe\\s*+Time|AQTT|Arabia\\s*+Standard\\s*+Time|Argentine\\s*+Time|Armenia\\s*+Time|ART|AST|Atlantic\\s*+Daylight\\s*+Time|Atlantic\\s*+Standard\\s*+Time|Australian\\s*+Central\\s*+Daylight\\s*+Time\\s*+\\(South\\s*+Australia\\)|Australian\\s*+Central\\s*+Daylight\\s*+Time\\s*+\\(South\\s*+Australia/New\\s*+South\\s*+Wales\\)|Australian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(Northern\\s*+Territory\\)|Australian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(South\\s*+Australia\\)|Australian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(South\\s*+Australia/New\\s*+South\\s*+Wales\\)|Australian\\s*+Central\\s*+Western\\s*+Standard\\s*+Time|Australian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(New\\s*+South\\s*+Wales\\)|Australian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(Tasmania\\)|Australian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(Victoria\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(New\\s*+South\\s*+Wales\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Queensland\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Tasmania\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Victoria\\)|Australian\\s*+Western\\s*+Standard\\s*+Time|AWST|Azerbaijan\\s*+Time|Azores\\s*+Summer\\s*+Time|Azores\\s*+Time|AZOST|AZOT|AZT|Bangladesh\\s*+Time|BDT|Bhutan\\s*+Time|BNT|Bolivia\\s*+Time|BOT|Bougainville\\s*+Standard\\s*+Time|Brasilia\\s*+Time|British\\s*+Summer\\s*+Time|BRT|Brunei\\s*+Time|BST|BTT|Cape\\s*+Verde\\s*+Time|CAT|CCT|CDT|Central\\s*+African\\s*+Time|Central\\s*+Daylight\\s*+Time|Central\\s*+European\\s*+Summer\\s*+Time|Central\\s*+European\\s*+Time|Central\\s*+Indonesia\\s*+Time|Central\\s*+Standard\\s*+Time|CEST|CET|CHADT|Chamorro\\s*+Standard\\s*+Time|CHAST|Chatham\\s*+Daylight\\s*+Time|Chatham\\s*+Standard\\s*+Time|Chile\\s*+Summer\\s*+Time|Chile\\s*+Time|China\\s*+Standard\\s*+Time|Choibalsan\\s*+Time|CHOT|Christmas\\s*+Island\\s*+Time|ChST|CHUT|Chuuk\\s*+Time|CKT|CLST|CLT|Cocos\\s*+Islands\\s*+Time|Colombia\\s*+Time|Cook\\s*+Is\\.\\s*+Time|Coordinated\\s*+Universal\\s*+Time|COT|CST|Cuba\\s*+Daylight\\s*+Time|Cuba\\s*+Standard\\s*+Time|CVT|CXT|Davis\\s*+Time|DAVT|DDUT|Dumont-d'Urville\\s*+Time|EASST|EAST|East\\s*+Indonesia\\s*+Time|Easter\\s*+Is\\.\\s*+Summer\\s*+Time|Easter\\s*+Is\\.\\s*+Time|Eastern\\s*+African\\s*+Time|Eastern\\s*+Daylight\\s*+Time|Eastern\\s*+European\\s*+Summer\\s*+Time|Eastern\\s*+European\\s*+Time|Eastern\\s*+Greenland\\s*+Summer\\s*+Time|Eastern\\s*+Greenland\\s*+Time|Eastern\\s*+Standard\\s*+Time|EAT|ECT|Ecuador\\s*+Time|EDT|EEST|EET|EGST|EGT|EST|Falkland\\s*+Is\\.\\s*+Time|Fernando\\s*+de\\s*+Noronha\\s*+Time|Fiji\\s*+Summer\\s*+Time|Fiji\\s*+Time|FJST|FJT|FKT|FNT|French\\s*+Guiana\\s*+Time|French\\s*+Southern\\s*+&\\s*+Antarctic\\s*+Lands\\s*+Time|Galapagos\\s*+Time|GALT|Gambier\\s*+Time|GAMT|Georgia\\s*+Time|GET|GFT|Ghana\\s*+Mean\\s*+Time|Gilbert\\s*+Is\\.\\s*+Time|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Greenwich\\s*+Mean\\s*+Time|GST|Gulf\\s*+Standard\\s*+Time|Guyana\\s*+Time|GYT|Hawaii\\s*+Daylight\\s*+Time|Hawaii\\s*+Standard\\s*+Time|HDT|HKT|Hong\\s*+Kong\\s*+Time|Hovd\\s*+Time|HOVT|HST|ICT|IDT|India\\s*+Standard\\s*+Time|Indian\\s*+Ocean\\s*+Territory\\s*+Time|Indochina\\s*+Time|IOT|Iran\\s*+Daylight\\s*+Time|Iran\\s*+Standard\\s*+Time|IRDT|Irish\\s*+Summer\\s*+Time|IRKT|Irkutsk\\s*+Time|IRST|Israel\\s*+Daylight\\s*+Time|Israel\\s*+Standard\\s*+Time|IST|Japan\\s*+Standard\\s*+Time|JST|KGT|Kirgizstan\\s*+Time|Korea\\s*+Standard\\s*+Time|Kosrae\\s*+Time|KOST|Kostanay\\s*+Standard\\s*+Time|Krasnoyarsk\\s*+Time|KRAT|KST|LHDT|LHST|Line\\s*+Is\\.\\s*+Time|LINT|Lord\\s*+Howe\\s*+Daylight\\s*+Time|Lord\\s*+Howe\\s*+Standard\\s*+Time|Macquarie\\s*+Island\\s*+Daylight\\s*+Time|Macquarie\\s*+Island\\s*+Standard\\s*+Time|Magadan\\s*+Time|MAGT|Malaysia\\s*+Time|Maldives\\s*+Time|Marquesas\\s*+Time|Marshall\\s*+Islands\\s*+Time|MART|Mauritius\\s*+Time|Mawson\\s*+Time|MAWT|MDT|MEST|MET|MHT|Middle\\s*+Europe\\s*+Summer\\s*+Time|Middle\\s*+Europe\\s*+Time|MIDT|MIST|MMT|Moscow\\s*+Standard\\s*+Time|Mountain\\s*+Daylight\\s*+Time|Mountain\\s*+Standard\\s*+Time|MSK|MST|MUT|MVT|Myanmar\\s*+Time|MYT|Nauru\\s*+Time|NCT|NDT|Nepal\\s*+Time|New\\s*+Caledonia\\s*+Time|New\\s*+Zealand\\s*+Daylight\\s*+Time|New\\s*+Zealand\\s*+Standard\\s*+Time|Newfoundland\\s*+Daylight\\s*+Time|Newfoundland\\s*+Standard\\s*+Time|NFST|NFT|Niue\\s*+Time|Norfolk\\s*+Summer\\s*+Time|Norfolk\\s*+Time|Novosibirsk\\s*+Time|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|Omsk\\s*+Time|OMST|Oral\\s*+Time|ORAT|Pacific\\s*+Daylight\\s*+Time|Pacific\\s*+Standard\\s*+Time|Pakistan\\s*+Time|Palau\\s*+Time|Papua\\s*+New\\s*+Guinea\\s*+Time|Paraguay\\s*+Summer\\s*+Time|Paraguay\\s*+Time|PDT|Peru\\s*+Time|PET|Petropavlovsk-Kamchatski\\s*+Time|PETT|PGT|Philippines\\s*+Standard\\s*+Time|Phoenix\\s*+Is\\.\\s*+Time|PHOT|Pierre\\s*+&\\s*+Miquelon\\s*+Daylight\\s*+Time|Pierre\\s*+&\\s*+Miquelon\\s*+Standard\\s*+Time|Pitcairn\\s*+Standard\\s*+Time|PKT|PMDT|PMST|Pohnpei\\s*+Time|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda\\s*+Time|RET|Reunion\\s*+Time|Rothera\\s*+Time|ROTT|Sakhalin\\s*+Time|SAKT|Samara\\s*+Time|Samoa\\s*+Standard\\s*+Time|SAMT|SAST|SBT|SCT|Seychelles\\s*+Time|SGT|Singapore\\s*+Time|Solomon\\s*+Is\\.\\s*+Time|South\\s*+Africa\\s*+Standard\\s*+Time|South\\s*+Georgia\\s*+Standard\\s*+Time|Srednekolymsk\\s*+Time|SRET|SRT|SST|Suriname\\s*+Time|SYOT|Syowa\\s*+Time|Tahiti\\s*+Time|TAHT|Tajikistan\\s*+Time|TFT|Timor-Leste\\s*+Time|TJT|TKT|TLT|TMT|Tokelau\\s*+Time|Tonga\\s*+Time|TOT|TRT|Turkey\\s*+Time|Turkmenistan\\s*+Time|Tuvalu\\s*+Time|TVT|Ulaanbaatar\\s*+Time|ULAT|Uruguay\\s*+Time|Ust-Nera\\s*+Time|UTC|UYT|Uzbekistan\\s*+Time|UZT|Vanuatu\\s*+Time|Venezuela\\s*+Time|VET|Vladivostok\\s*+Time|VLAT|VOST|Vostok\\s*+Time|VUT|Wake\\s*+Time|WAKT|Wallis\\s*+&\\s*+Futuna\\s*+Time|WAT|WEST|West\\s*+Indonesia\\s*+Time|West\\s*+Samoa\\s*+Daylight\\s*+Time|West\\s*+Samoa\\s*+Standard\\s*+Time|Western\\s*+African\\s*+Time|Western\\s*+European\\s*+Summer\\s*+Time|Western\\s*+European\\s*+Time|Western\\s*+Greenland\\s*+Summer\\s*+Time|Western\\s*+Greenland\\s*+Time|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|Xinjiang\\s*+Standard\\s*+Time|XJT|YAKT|Yakutsk\\s*+Time|Yekaterinburg\\s*+Time|YEKT)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "/_");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("/_", simpleTimeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("4W' Q`L`':4Wu?5Grow", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("Hg u#o>l778", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("zNUFC");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("zNUFC", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("CAT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("zNUFC");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("zNUFC", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("GMTNET", parsePosition0);
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(36, "SST");
      FastDateParser fastDateParser0 = new FastDateParser("^Z`NUx;o*hH", simpleTimeZone0, locale0);
      assertEquals("^Z`NUx;o*hH", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("_|7");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("_|7", timeZone0, locale0);
      assertEquals("_|7", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("^YPW");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("^YPW", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(97);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("=gP", timeZone0, locale0);
      assertEquals("=gP", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("zNmUXFCZ");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("Z<4'WFO)t<g:d", timeZone0, locale0);
      assertEquals("Z<4'WFO)t<g:d", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("Z6`O", timeZone0, locale0);
      assertEquals("Z6`O", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("57", timeZone0, locale0);
      assertEquals("57", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("zNmUXFCZ");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("3L8]Z9*eqVcdP7lQi!", timeZone0, locale0);
      assertEquals("3L8]Z9*eqVcdP7lQi!", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(36, "");
      FastDateParser fastDateParser0 = new FastDateParser("2_U=nH$K5W*MC<}~e", simpleTimeZone0, locale0);
      assertEquals("2_U=nH$K5W*MC<}~e", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("1");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("1", timeZone0, locale0);
      assertEquals("1", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("mm0yyv?o3CD");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("mm0yyv?o3CD", timeZone0, locale0);
      assertEquals("mm0yyv?o3CD", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser(".Xqe1}W.ZZ*T0;3QdMH", timeZone0, locale0);
      assertEquals(".Xqe1}W.ZZ*T0;3QdMH", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("K>h@JnRXS*HdQ8%");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("s*+", timeZone0, locale0);
      assertEquals("s*+", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("znkNU9rk");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "w(H#5)_8[j");
      FastDateParser fastDateParser0 = new FastDateParser("znkNU9rk", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(0);
      assertEquals(2000, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" not in (");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser(" not in (", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(934);
      assertEquals(2834, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("9Zzs{}^", timeZone0, locale0);
      assertEquals("9Zzs{}^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("?ot in ");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("?ot in ", timeZone0, locale0);
      assertEquals("?ot in ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("llWB)\"C`n");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("&W7]%8ZaHZtw3r6", timeZone0, locale0);
      Locale.getISOLanguages();
      try { 
        fastDateParser0.parseObject("EAT");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"EAT\" does not match &(\\p{IsNd}{1}+)7\\]%8(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville\\s*+Standard\\s*+Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|Heure\\s*+avanc\u00E9e\\s*+d'Alaska|Heure\\s*+avanc\u00E9e\\s*+d'Hawa\u00EF|Heure\\s*+avanc\u00E9e\\s*+d'Iran|Heure\\s*+avanc\u00E9e\\s*+d'Isra\u00EBl|Heure\\s*+avanc\u00E9e\\s*+de\\s*+Chatham|Heure\\s*+avanc\u00E9e\\s*+de\\s*+l'Atlantique|Heure\\s*+avanc\u00E9e\\s*+de\\s*+l'Est|Heure\\s*+avanc\u00E9e\\s*+de\\s*+Nouvelle-Z\u00E9lande|Heure\\s*+avanc\u00E9e\\s*+de\\s*+Saint-Pierre\\s*+et\\s*+Miquelon|Heure\\s*+avanc\u00E9e\\s*+de\\s*+Terre-Neuve|Heure\\s*+avanc\u00E9e\\s*+des\\s*+Rocheuses|Heure\\s*+avanc\u00E9e\\s*+du\\s*+Centre|Heure\\s*+avanc\u00E9e\\s*+du\\s*+Pacifique|Heure\\s*+d'Afghanistan|Heure\\s*+d'Afrique\\s*+centrale|Heure\\s*+d'Afrique\\s*+de\\s*+l'Est|Heure\\s*+d'Afrique\\s*+de\\s*+l'Ouest|Heure\\s*+d'Alma-Ata|Heure\\s*+d'Anadyr|Heure\\s*+d'Aqtau|Heure\\s*+d'Aqtobe|Heure\\s*+D'Argentine|Heure\\s*+d'Arm\u00E9nie|Heure\\s*+d'Azerba\u00EFdjan|Heure\\s*+d'Europe\\s*+centrale|Heure\\s*+d'Europe\\s*+de\\s*+l'Est|Heure\\s*+d'Europe\\s*+de\\s*+l'Ouest|Heure\\s*+d'Indochine|Heure\\s*+d'Indon\u00E9sie\\s*+centrale|Heure\\s*+d'Indon\u00E9sie\\s*+orientale|Heure\\s*+d'Irkutsk|Heure\\s*+d'Omsk|Heure\\s*+d'Oral|Heure\\s*+d'Ust-Nera|Heure\\s*+d'\u00E9t\u00E9\\s*+britannique|Heure\\s*+d'\u00E9t\u00E9\\s*+d'Australie\\s*+centrale\\s*+\\(Australie\\s*+du\\s*+sud\\)|Heure\\s*+d'\u00E9t\u00E9\\s*+d'Australie\\s*+centrale\\s*+\\(Australie\\s*+du\\s*+sud/Nouvelle-Galles\\s*+du\\s*+sud\\)|Heure\\s*+d'\u00E9t\u00E9\\s*+d'Australie\\s*+orientale\\s*+\\(Tasmanie\\)|Heure\\s*+d'\u00E9t\u00E9\\s*+d'Australie\\s*+orientale\\s*+\\(Victoria\\)|Heure\\s*+d'\u00E9t\u00E9\\s*+d'Europe\\s*+centrale|Heure\\s*+d'\u00E9t\u00E9\\s*+d'Europe\\s*+de\\s*+l'Est|Heure\\s*+d'\u00E9t\u00E9\\s*+d'Europe\\s*+de\\s*+l'Ouest|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+Cuba|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+Fidji|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+l'Est\\s*+\\(Nouvelle-Galles\\s*+du\\s*+Sud\\)|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+l'Europe\\s*+centrale|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+l'Ile\\s*+de\\s*+P\u00E2ques|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+l'Ile\\s*+Macquarie|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+Lord\\s*+Howe|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+Norfolk|Heure\\s*+d'\u00E9t\u00E9\\s*+des\\s*+A\u00E7ores|Heure\\s*+d'\u00E9t\u00E9\\s*+des\\s*+Samoas\\s*+occidentales|Heure\\s*+d'\u00E9t\u00E9\\s*+du\\s*+Chili|Heure\\s*+d'\u00E9t\u00E9\\s*+du\\s*+Groenland\\s*+de\\s*+l'Est|Heure\\s*+d'\u00E9t\u00E9\\s*+du\\s*+Groenland\\s*+de\\s*+l'Ouest|Heure\\s*+d'\u00E9t\u00E9\\s*+du\\s*+Paraguay|Heure\\s*+d'\u00E9t\u00E9\\s*+irlandaise|Heure\\s*+de\\s*+Bolivie|Heure\\s*+de\\s*+Cap-Vert|Heure\\s*+de\\s*+Choibalsan|Heure\\s*+de\\s*+Chuuk|Heure\\s*+de\\s*+Colombie|Heure\\s*+de\\s*+Davis|Heure\\s*+de\\s*+Dumont-d'Urville|Heure\\s*+de\\s*+Fernando\\s*+de\\s*+Noronha|Heure\\s*+de\\s*+Fidji|Heure\\s*+de\\s*+Gambi|Heure\\s*+de\\s*+Greenwich|Heure\\s*+de\\s*+Guyana|Heure\\s*+de\\s*+Guyane\\s*+fran\u00E7aise|Heure\\s*+de\\s*+G\u00E9orgie|Heure\\s*+de\\s*+Hong\\s*+Kong|Heure\\s*+de\\s*+Hovd|Heure\\s*+de\\s*+Kiribati|Heure\\s*+de\\s*+Krasno\u00EFarsk|Heure\\s*+de\\s*+Kusaie|Heure\\s*+de\\s*+Kyzylorda|Heure\\s*+de\\s*+l'Acre|Heure\\s*+de\\s*+l'Europe\\s*+centrale|Heure\\s*+de\\s*+l'Ile\\s*+de\\s*+P\u00E2ques|Heure\\s*+de\\s*+l'Ile\\s*+Macquarie|Heure\\s*+de\\s*+l'Indon\u00E9sie\\s*+occidentale|Heure\\s*+de\\s*+l'oc\u00E9an\\s*+Indien|Heure\\s*+de\\s*+l'Ouzb\u00E9kistan|Heure\\s*+de\\s*+l'Ulaanbaatar|Heure\\s*+de\\s*+l'Uruguay|Heure\\s*+de\\s*+l'\u00C9quateur|Heure\\s*+de\\s*+l'\u00CEle\\s*+Christmas|Heure\\s*+de\\s*+l'\u00CEle\\s*+de\\s*+Line|Heure\\s*+de\\s*+l'\u00CEle\\s*+de\\s*+Phoenix|Heure\\s*+de\\s*+la\\s*+R\u00E9union|Heure\\s*+de\\s*+Magadan|Heure\\s*+de\\s*+Malaisie|Heure\\s*+de\\s*+Maurice|Heure\\s*+de\\s*+Mawson|Heure\\s*+de\\s*+Myanmar|Heure\\s*+de\\s*+Nauru|Heure\\s*+de\\s*+Niue|Heure\\s*+de\\s*+Norfolk|Heure\\s*+de\\s*+Nouvelle-Cal\u00E9donie|Heure\\s*+de\\s*+Novossibirsk|Heure\\s*+de\\s*+Palaos|Heure\\s*+de\\s*+Papouasie-Nouvelle-Guin\u00E9e|Heure\\s*+de\\s*+Petropavlovsk-Kamchatski|Heure\\s*+de\\s*+Pohnpei|Heure\\s*+de\\s*+Rothera|Heure\\s*+de\\s*+Sakhalin|Heure\\s*+de\\s*+Singapour|Heure\\s*+de\\s*+Syowa|Heure\\s*+de\\s*+Tahiti|Heure\\s*+de\\s*+Timor-Leste|Heure\\s*+de\\s*+Tokelau|Heure\\s*+de\\s*+Tonga|Heure\\s*+de\\s*+Tuvalu|Heure\\s*+de\\s*+Vladivostok|Heure\\s*+de\\s*+Vostok|Heure\\s*+de\\s*+Wake|Heure\\s*+de\\s*+Wallis\\s*+et\\s*+Futuna|Heure\\s*+de\\s*+Yekaterinburg|Heure\\s*+des\\s*+A\u00E7ores|Heure\\s*+des\\s*+Galapagos|Heure\\s*+des\\s*+Iles\\s*+Marshall|Heure\\s*+des\\s*+Maldives|Heure\\s*+des\\s*+Marquises|Heure\\s*+des\\s*+Samoas\\s*+occidentales|Heure\\s*+des\\s*+Seychelles|Heure\\s*+des\\s*+Terres\\s*+australes\\s*+antartiques\\s*+fran\u00E7aises|Heure\\s*+des\\s*+\u00CEles\\s*+Cocos|Heure\\s*+des\\s*+\u00CEles\\s*+Cook|Heure\\s*+des\\s*+\u00EEles\\s*+Falkland|Heure\\s*+des\\s*+\u00CEles\\s*+Salomon|Heure\\s*+du\\s*+Bangladesh|Heure\\s*+du\\s*+Bhoutan|Heure\\s*+du\\s*+Brunei|Heure\\s*+du\\s*+Br\u00E9sil|Heure\\s*+du\\s*+Chili|Heure\\s*+du\\s*+Ghana|Heure\\s*+du\\s*+Groenland\\s*+de\\s*+l'Est|Heure\\s*+du\\s*+Groenland\\s*+de\\s*+l'Ouest|Heure\\s*+du\\s*+Iakoutsk|Heure\\s*+du\\s*+Kirghizistan|Heure\\s*+du\\s*+m\u00E9ridien\\s*+de\\s*+Greenwich|Heure\\s*+du\\s*+N\u00E9pal|Heure\\s*+du\\s*+Pakistan|Heure\\s*+du\\s*+Paraguay|Heure\\s*+du\\s*+P\u00E9rou|Heure\\s*+du\\s*+Surinam|Heure\\s*+du\\s*+Tadjikistan|Heure\\s*+du\\s*+Turkm\u00E9nistan|Heure\\s*+du\\s*+Vanuatu|Heure\\s*+du\\s*+Venezuela|Heure\\s*+normale\\s*+d'Afrique\\s*+du\\s*+Sud|Heure\\s*+normale\\s*+d'Alaska|Heure\\s*+normale\\s*+d'Amazonie|Heure\\s*+normale\\s*+d'Arabie|Heure\\s*+normale\\s*+d'Hawa\u00EF|Heure\\s*+normale\\s*+d'Inde|Heure\\s*+normale\\s*+d'Iran|Heure\\s*+normale\\s*+de\\s*+Chine|Heure\\s*+normale\\s*+de\\s*+Cor\u00E9e|Heure\\s*+normale\\s*+de\\s*+G\u00E9orgie\\s*+du\\s*+Sud|Heure\\s*+normale\\s*+de\\s*+l'Atlantique|Heure\\s*+normale\\s*+de\\s*+l'Est|Heure\\s*+normale\\s*+de\\s*+l'Est\\s*+\\(Nouvelle-Galles\\s*+du\\s*+Sud\\)|Heure\\s*+normale\\s*+de\\s*+l'Ouest\\s*+\\(Australie\\)|Heure\\s*+normale\\s*+de\\s*+Nouvelle-Z\u00E9lande|Heure\\s*+normale\\s*+de\\s*+Saint-Pierre\\s*+et\\s*+Miquelon|Heure\\s*+normale\\s*+de\\s*+Samara|Heure\\s*+normale\\s*+de\\s*+Terre-Neuve|Heure\\s*+normale\\s*+des\\s*+Rocheuses|Heure\\s*+normale\\s*+des\\s*+\u00EEles\\s*+Mariannes|Heure\\s*+normale\\s*+du\\s*+Centre|Heure\\s*+normale\\s*+du\\s*+Golfe|Heure\\s*+normale\\s*+du\\s*+Japon|Heure\\s*+normale\\s*+du\\s*+Pacifique|Heure\\s*+standard\\s*+d'Australie\\s*+centrale\\s*+\\(Australie\\s*+du\\s*+sud\\)|Heure\\s*+standard\\s*+d'Australie\\s*+centrale\\s*+\\(Australie\\s*+du\\s*+sud/Nouvelle-Galles\\s*+du\\s*+sud\\)|Heure\\s*+standard\\s*+d'Australie\\s*+centrale\\s*+\\(Territoire\\s*+du\\s*+Nord\\)|Heure\\s*+standard\\s*+d'Australie\\s*+orientale\\s*+\\(Queensland\\)|Heure\\s*+standard\\s*+d'Australie\\s*+orientale\\s*+\\(Tasmanie\\)|Heure\\s*+standard\\s*+d'Australie\\s*+orientale\\s*+\\(Victoria\\)|Heure\\s*+standard\\s*+d'Isra\u00EBl|Heure\\s*+standard\\s*+de\\s*+Chatham|Heure\\s*+standard\\s*+de\\s*+Cuba|Heure\\s*+standard\\s*+de\\s*+l'Australie\\s*+occidentale\\s*+\\(centre\\)|Heure\\s*+standard\\s*+de\\s*+Lord\\s*+Howe|Heure\\s*+standard\\s*+de\\s*+Moscou|Heure\\s*+standard\\s*+de\\s*+Samoa|Heure\\s*+standard\\s*+des\\s*+Pitcairn|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay\\s*+Standard\\s*+Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|ORAT|PDT|PET|PETT|PGT|Philippines\\s*+Standard\\s*+Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk\\s*+Time|SRET|SRT|SST|SYOT|TAHT|Temps\\s*+universel\\s*+coordonn\u00E9|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT)(AM|PM)(\\p{IsNd}++)(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville\\s*+Standard\\s*+Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|Heure\\s*+avanc\u00E9e\\s*+d'Alaska|Heure\\s*+avanc\u00E9e\\s*+d'Hawa\u00EF|Heure\\s*+avanc\u00E9e\\s*+d'Iran|Heure\\s*+avanc\u00E9e\\s*+d'Isra\u00EBl|Heure\\s*+avanc\u00E9e\\s*+de\\s*+Chatham|Heure\\s*+avanc\u00E9e\\s*+de\\s*+l'Atlantique|Heure\\s*+avanc\u00E9e\\s*+de\\s*+l'Est|Heure\\s*+avanc\u00E9e\\s*+de\\s*+Nouvelle-Z\u00E9lande|Heure\\s*+avanc\u00E9e\\s*+de\\s*+Saint-Pierre\\s*+et\\s*+Miquelon|Heure\\s*+avanc\u00E9e\\s*+de\\s*+Terre-Neuve|Heure\\s*+avanc\u00E9e\\s*+des\\s*+Rocheuses|Heure\\s*+avanc\u00E9e\\s*+du\\s*+Centre|Heure\\s*+avanc\u00E9e\\s*+du\\s*+Pacifique|Heure\\s*+d'Afghanistan|Heure\\s*+d'Afrique\\s*+centrale|Heure\\s*+d'Afrique\\s*+de\\s*+l'Est|Heure\\s*+d'Afrique\\s*+de\\s*+l'Ouest|Heure\\s*+d'Alma-Ata|Heure\\s*+d'Anadyr|Heure\\s*+d'Aqtau|Heure\\s*+d'Aqtobe|Heure\\s*+D'Argentine|Heure\\s*+d'Arm\u00E9nie|Heure\\s*+d'Azerba\u00EFdjan|Heure\\s*+d'Europe\\s*+centrale|Heure\\s*+d'Europe\\s*+de\\s*+l'Est|Heure\\s*+d'Europe\\s*+de\\s*+l'Ouest|Heure\\s*+d'Indochine|Heure\\s*+d'Indon\u00E9sie\\s*+centrale|Heure\\s*+d'Indon\u00E9sie\\s*+orientale|Heure\\s*+d'Irkutsk|Heure\\s*+d'Omsk|Heure\\s*+d'Oral|Heure\\s*+d'Ust-Nera|Heure\\s*+d'\u00E9t\u00E9\\s*+britannique|Heure\\s*+d'\u00E9t\u00E9\\s*+d'Australie\\s*+centrale\\s*+\\(Australie\\s*+du\\s*+sud\\)|Heure\\s*+d'\u00E9t\u00E9\\s*+d'Australie\\s*+centrale\\s*+\\(Australie\\s*+du\\s*+sud/Nouvelle-Galles\\s*+du\\s*+sud\\)|Heure\\s*+d'\u00E9t\u00E9\\s*+d'Australie\\s*+orientale\\s*+\\(Tasmanie\\)|Heure\\s*+d'\u00E9t\u00E9\\s*+d'Australie\\s*+orientale\\s*+\\(Victoria\\)|Heure\\s*+d'\u00E9t\u00E9\\s*+d'Europe\\s*+centrale|Heure\\s*+d'\u00E9t\u00E9\\s*+d'Europe\\s*+de\\s*+l'Est|Heure\\s*+d'\u00E9t\u00E9\\s*+d'Europe\\s*+de\\s*+l'Ouest|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+Cuba|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+Fidji|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+l'Est\\s*+\\(Nouvelle-Galles\\s*+du\\s*+Sud\\)|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+l'Europe\\s*+centrale|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+l'Ile\\s*+de\\s*+P\u00E2ques|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+l'Ile\\s*+Macquarie|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+Lord\\s*+Howe|Heure\\s*+d'\u00E9t\u00E9\\s*+de\\s*+Norfolk|Heure\\s*+d'\u00E9t\u00E9\\s*+des\\s*+A\u00E7ores|Heure\\s*+d'\u00E9t\u00E9\\s*+des\\s*+Samoas\\s*+occidentales|Heure\\s*+d'\u00E9t\u00E9\\s*+du\\s*+Chili|Heure\\s*+d'\u00E9t\u00E9\\s*+du\\s*+Groenland\\s*+de\\s*+l'Est|Heure\\s*+d'\u00E9t\u00E9\\s*+du\\s*+Groenland\\s*+de\\s*+l'Ouest|Heure\\s*+d'\u00E9t\u00E9\\s*+du\\s*+Paraguay|Heure\\s*+d'\u00E9t\u00E9\\s*+irlandaise|Heure\\s*+de\\s*+Bolivie|Heure\\s*+de\\s*+Cap-Vert|Heure\\s*+de\\s*+Choibalsan|Heure\\s*+de\\s*+Chuuk|Heure\\s*+de\\s*+Colombie|Heure\\s*+de\\s*+Davis|Heure\\s*+de\\s*+Dumont-d'Urville|Heure\\s*+de\\s*+Fernando\\s*+de\\s*+Noronha|Heure\\s*+de\\s*+Fidji|Heure\\s*+de\\s*+Gambi|Heure\\s*+de\\s*+Greenwich|Heure\\s*+de\\s*+Guyana|Heure\\s*+de\\s*+Guyane\\s*+fran\u00E7aise|Heure\\s*+de\\s*+G\u00E9orgie|Heure\\s*+de\\s*+Hong\\s*+Kong|Heure\\s*+de\\s*+Hovd|Heure\\s*+de\\s*+Kiribati|Heure\\s*+de\\s*+Krasno\u00EFarsk|Heure\\s*+de\\s*+Kusaie|Heure\\s*+de\\s*+Kyzylorda|Heure\\s*+de\\s*+l'Acre|Heure\\s*+de\\s*+l'Europe\\s*+centrale|Heure\\s*+de\\s*+l'Ile\\s*+de\\s*+P\u00E2ques|Heure\\s*+de\\s*+l'Ile\\s*+Macquarie|Heure\\s*+de\\s*+l'Indon\u00E9sie\\s*+occidentale|Heure\\s*+de\\s*+l'oc\u00E9an\\s*+Indien|Heure\\s*+de\\s*+l'Ouzb\u00E9kistan|Heure\\s*+de\\s*+l'Ulaanbaatar|Heure\\s*+de\\s*+l'Uruguay|Heure\\s*+de\\s*+l'\u00C9quateur|Heure\\s*+de\\s*+l'\u00CEle\\s*+Christmas|Heure\\s*+de\\s*+l'\u00CEle\\s*+de\\s*+Line|Heure\\s*+de\\s*+l'\u00CEle\\s*+de\\s*+Phoenix|Heure\\s*+de\\s*+la\\s*+R\u00E9union|Heure\\s*+de\\s*+Magadan|Heure\\s*+de\\s*+Malaisie|Heure\\s*+de\\s*+Maurice|Heure\\s*+de\\s*+Mawson|Heure\\s*+de\\s*+Myanmar|Heure\\s*+de\\s*+Nauru|Heure\\s*+de\\s*+Niue|Heure\\s*+de\\s*+Norfolk|Heure\\s*+de\\s*+Nouvelle-Cal\u00E9donie|Heure\\s*+de\\s*+Novossibirsk|Heure\\s*+de\\s*+Palaos|Heure\\s*+de\\s*+Papouasie-Nouvelle-Guin\u00E9e|Heure\\s*+de\\s*+Petropavlovsk-Kamchatski|Heure\\s*+de\\s*+Pohnpei|Heure\\s*+de\\s*+Rothera|Heure\\s*+de\\s*+Sakhalin|Heure\\s*+de\\s*+Singapour|Heure\\s*+de\\s*+Syowa|Heure\\s*+de\\s*+Tahiti|Heure\\s*+de\\s*+Timor-Leste|Heure\\s*+de\\s*+Tokelau|Heure\\s*+de\\s*+Tonga|Heure\\s*+de\\s*+Tuvalu|Heure\\s*+de\\s*+Vladivostok|Heure\\s*+de\\s*+Vostok|Heure\\s*+de\\s*+Wake|Heure\\s*+de\\s*+Wallis\\s*+et\\s*+Futuna|Heure\\s*+de\\s*+Yekaterinburg|Heure\\s*+des\\s*+A\u00E7ores|Heure\\s*+des\\s*+Galapagos|Heure\\s*+des\\s*+Iles\\s*+Marshall|Heure\\s*+des\\s*+Maldives|Heure\\s*+des\\s*+Marquises|Heure\\s*+des\\s*+Samoas\\s*+occidentales|Heure\\s*+des\\s*+Seychelles|Heure\\s*+des\\s*+Terres\\s*+australes\\s*+antartiques\\s*+fran\u00E7aises|Heure\\s*+des\\s*+\u00CEles\\s*+Cocos|Heure\\s*+des\\s*+\u00CEles\\s*+Cook|Heure\\s*+des\\s*+\u00EEles\\s*+Falkland|Heure\\s*+des\\s*+\u00CEles\\s*+Salomon|Heure\\s*+du\\s*+Bangladesh|Heure\\s*+du\\s*+Bhoutan|Heure\\s*+du\\s*+Brunei|Heure\\s*+du\\s*+Br\u00E9sil|Heure\\s*+du\\s*+Chili|Heure\\s*+du\\s*+Ghana|Heure\\s*+du\\s*+Groenland\\s*+de\\s*+l'Est|Heure\\s*+du\\s*+Groenland\\s*+de\\s*+l'Ouest|Heure\\s*+du\\s*+Iakoutsk|Heure\\s*+du\\s*+Kirghizistan|Heure\\s*+du\\s*+m\u00E9ridien\\s*+de\\s*+Greenwich|Heure\\s*+du\\s*+N\u00E9pal|Heure\\s*+du\\s*+Pakistan|Heure\\s*+du\\s*+Paraguay|Heure\\s*+du\\s*+P\u00E9rou|Heure\\s*+du\\s*+Surinam|Heure\\s*+du\\s*+Tadjikistan|Heure\\s*+du\\s*+Turkm\u00E9nistan|Heure\\s*+du\\s*+Vanuatu|Heure\\s*+du\\s*+Venezuela|Heure\\s*+normale\\s*+d'Afrique\\s*+du\\s*+Sud|Heure\\s*+normale\\s*+d'Alaska|Heure\\s*+normale\\s*+d'Amazonie|Heure\\s*+normale\\s*+d'Arabie|Heure\\s*+normale\\s*+d'Hawa\u00EF|Heure\\s*+normale\\s*+d'Inde|Heure\\s*+normale\\s*+d'Iran|Heure\\s*+normale\\s*+de\\s*+Chine|Heure\\s*+normale\\s*+de\\s*+Cor\u00E9e|Heure\\s*+normale\\s*+de\\s*+G\u00E9orgie\\s*+du\\s*+Sud|Heure\\s*+normale\\s*+de\\s*+l'Atlantique|Heure\\s*+normale\\s*+de\\s*+l'Est|Heure\\s*+normale\\s*+de\\s*+l'Est\\s*+\\(Nouvelle-Galles\\s*+du\\s*+Sud\\)|Heure\\s*+normale\\s*+de\\s*+l'Ouest\\s*+\\(Australie\\)|Heure\\s*+normale\\s*+de\\s*+Nouvelle-Z\u00E9lande|Heure\\s*+normale\\s*+de\\s*+Saint-Pierre\\s*+et\\s*+Miquelon|Heure\\s*+normale\\s*+de\\s*+Samara|Heure\\s*+normale\\s*+de\\s*+Terre-Neuve|Heure\\s*+normale\\s*+des\\s*+Rocheuses|Heure\\s*+normale\\s*+des\\s*+\u00EEles\\s*+Mariannes|Heure\\s*+normale\\s*+du\\s*+Centre|Heure\\s*+normale\\s*+du\\s*+Golfe|Heure\\s*+normale\\s*+du\\s*+Japon|Heure\\s*+normale\\s*+du\\s*+Pacifique|Heure\\s*+standard\\s*+d'Australie\\s*+centrale\\s*+\\(Australie\\s*+du\\s*+sud\\)|Heure\\s*+standard\\s*+d'Australie\\s*+centrale\\s*+\\(Australie\\s*+du\\s*+sud/Nouvelle-Galles\\s*+du\\s*+sud\\)|Heure\\s*+standard\\s*+d'Australie\\s*+centrale\\s*+\\(Territoire\\s*+du\\s*+Nord\\)|Heure\\s*+standard\\s*+d'Australie\\s*+orientale\\s*+\\(Queensland\\)|Heure\\s*+standard\\s*+d'Australie\\s*+orientale\\s*+\\(Tasmanie\\)|Heure\\s*+standard\\s*+d'Australie\\s*+orientale\\s*+\\(Victoria\\)|Heure\\s*+standard\\s*+d'Isra\u00EBl|Heure\\s*+standard\\s*+de\\s*+Chatham|Heure\\s*+standard\\s*+de\\s*+Cuba|Heure\\s*+standard\\s*+de\\s*+l'Australie\\s*+occidentale\\s*+\\(centre\\)|Heure\\s*+standard\\s*+de\\s*+Lord\\s*+Howe|Heure\\s*+standard\\s*+de\\s*+Moscou|Heure\\s*+standard\\s*+de\\s*+Samoa|Heure\\s*+standard\\s*+des\\s*+Pitcairn|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay\\s*+Standard\\s*+Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|ORAT|PDT|PET|PETT|PGT|Philippines\\s*+Standard\\s*+Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk\\s*+Time|SRET|SRT|SST|SYOT|TAHT|Temps\\s*+universel\\s*+coordonn\u00E9|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("zNUFC");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("$(qt", timeZone0, locale0);
      assertEquals("$(qt", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser(";Te%(vX", timeZone0, locale0);
      try { 
        fastDateParser0.parse("d,h");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"d,h\" does not match ;
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("K>h@JnRXS*HQ8%");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("K>h@JnRXS*HQ8%", timeZone0, locale0);
      Locale locale1 = new Locale("NET");
      FastDateParser fastDateParser1 = new FastDateParser("K>h@JnRXS*HQ8%", timeZone0, locale1);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("zNmUXFCZ");
      Locale locale0 = Locale.CANADA_FRENCH;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("zNmUXFCZ", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("zNmUXFCZ", timeZone1, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("(The ", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("8/]xTse", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("K>h@JnRXS*HQ8%");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("G758FFF-K{GI'", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("K>h@JnRXS*HQ8%");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("K>h@JnRXS*HQ8%", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("8/]xTse");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("HC+1g|-`o5T'!<>@");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("HC+1g|-`o5T'!<>@", timeZone0, locale0);
      String string0 = "2\\u\\\"qQI?iVNWSVCH:";
      Date date0 = fastDateParser0.parse(string0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("h-w);M/t]KTHi*5if", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\\p{IsNd}++)-(\\p{IsNd}++)\\);(\\p{IsNd}++)/", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("znkNU9rk");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "w(H#5)_8[j");
      FastDateParser fastDateParser0 = new FastDateParser("znkNU9rk", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("w(H#5)_8[j", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("zNmUXFCZ");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("zNmUXFCZ", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("CAN", locale1.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("zNUFC");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("zNUFC", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("zNUFC", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser(" locale does not support dates before 1868 AD)\n", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("", parsePosition0);
      assertNotNull(object0);
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser(" locale does not support dates before 1868 AD)\n", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[ locale does not support dates before 1868 AD)\n,en,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("4W' Q`L`':4Wu?5Grow", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("zNUFC");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("STI2+", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("8\"{");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("w(H5.)_8)[wj");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("h'/1=+&G", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("5(\"a0K|WfuX~");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("KHL/zejL4yo\"s=e", timeZone0, locale0);
      try { 
        fastDateParser0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match (\\p{IsNd}{1}+)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("zNmUXFCZ");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[zNmUXFCZ,en_CA,GMT]", timeZone0, locale0);
      assertEquals("FastDateParser[zNmUXFCZ,en_CA,GMT]", fastDateParser0.getPattern());
  }
}
