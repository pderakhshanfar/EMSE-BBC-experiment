/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:04:24 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(944, "sn^sI:G=B");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("sn^sI:G=B", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("5|].uFR=3OXg~Z3;");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(944, " wc");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("%2yy WZc(~IqLGyZz", simpleTimeZone0, locale0);
      assertEquals("%2yy WZc(~IqLGyZz", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      ParsePosition parsePosition0 = new ParsePosition(0);
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("[lK%KS1YHB<*", timeZone0, locale0);
      fastDateParser0.parseObject("[lK%KS1YHB<*", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(944, " wc");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("^96u", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(944, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2309), "org.apache.commons.lang3.time.FastDateParser$2");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("GMTEAT", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals((-2309), timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2309), "org.apache.commons.lang3.time.FastDateParser$2");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("GMTEAT", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2309));
      assertEquals((-309), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(944, "");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("^96u", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(120);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(944, "");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("^96u", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(944, " wc");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("^9u", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(876);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("'", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(944, " wc");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("%'>3W'D23(qX", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(944);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(944, "4");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("(V'X3~1i+eP", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("K~Dg{RQ_05Z", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      Locale locale1 = Locale.GERMAN;
      FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(944, " wc");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(3);
      Date date0 = fastDateParser0.parse("pi--Q1mL", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      try { 
        fastDateParser0.parse("J\"zF7\"t` @");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"J\"zF7\"t` @\" does not match (\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("}X)rz;{ru9`'pN']FB{", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("}X)rz;{ru9`'pN']FB{");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("zlrxR}P_{q\"4\n!", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("GMTPNT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("_D%R~1[N!-Sp.+?2Lo", timeZone0, locale0);
      assertEquals("_D%R~1[N!-Sp.+?2Lo", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("!l9~['50)j(B`-m");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser(">4.T#QYd", timeZone0, locale0);
      assertEquals(">4.T#QYd", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("=b|+2K^@$?", timeZone0, locale0);
      assertEquals("=b|+2K^@$?", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("<N/Z)%!&S=GkkV", timeZone0, locale0);
      assertEquals("<N/Z)%!&S=GkkV", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(944, " wc");
      Locale locale0 = new Locale(" wc", "", " wc");
      FastDateParser fastDateParser0 = new FastDateParser(";ZyM^<{[`p3_6", simpleTimeZone0, locale0);
      assertEquals(";ZyM^<{[`p3_6", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(944, " wc");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser(":", simpleTimeZone0, locale0);
      assertEquals(":", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("9wOHP", timeZone0, locale0);
      assertEquals("9wOHP", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(944, "8y");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("8Dbn|u>qk)qo", simpleTimeZone0, locale0);
      assertEquals("8Dbn|u>qk)qo", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("a76T~Je", timeZone0, locale0);
      assertEquals("a76T~Je", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(944, " wc");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("6<@;^", simpleTimeZone0, locale0);
      assertEquals("6<@;^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(944, "sn^HsI:G=B");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("4", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(3);
      Object object0 = fastDateParser0.parseObject("GMTSST", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("3)s1WM|];", timeZone0, locale0);
      assertEquals("3)s1WM|];", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("0{~)Dg", timeZone0, locale0);
      assertEquals("0{~)Dg", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "/>'^K1{\"@`db");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("/>'^K1{\"@`db", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(105);
      assertEquals(2005, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(944, "4");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser(",<pg4~`HO", simpleTimeZone0, locale0);
      assertEquals(",<pg4~`HO", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(944, "]");
      Locale locale0 = new Locale("]", "*B7Q]Vv{Qx)", "");
      FastDateParser fastDateParser0 = new FastDateParser("*B7Q]Vv{Qx)", simpleTimeZone0, locale0);
      assertEquals("*B7Q]Vv{Qx)", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(944, " wc");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("S)poC", simpleTimeZone0, locale0);
      assertEquals("S)poC", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("MTET", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("MMMW&", timeZone0, locale0);
      assertEquals("MMMW&", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(46, "+:N\"0{wu3\"R++y");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("`[I{na)hu,Idq=7R", simpleTimeZone0, locale0);
      assertEquals("`[I{na)hu,Idq=7R", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("a?kBkyh+Kqi:C3*", timeZone0, locale0);
      assertEquals("a?kBkyh+Kqi:C3*", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("  X[_E^?39fUB[!P", timeZone0, locale0);
      assertEquals("  X[_E^?39fUB[!P", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("MIT");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"MIT\" does not match (\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(116, "]J2mFM2P");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("E", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse("]J2mFM2P");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"]J2mFM2P\" does not match (Fri|Friday|Mon|Monday|Sat|Saturday|Sun|Sunday|Thu|Thursday|Tue|Tuesday|Wed|Wednesday)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      Locale locale1 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("5aK$hy}SK+k.K", timeZone0, locale1);
      FastDateParser fastDateParser1 = new FastDateParser("5aK$hy}SK+k.K", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(93, "]pM=&%Rvo$hB");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("]pM=&%Rvo$hB", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("]pM=&%Rvo$hB", timeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(944, " wc");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser(" wc", simpleTimeZone0, locale0);
      Integer integer0 = new Integer(944);
      boolean boolean0 = fastDateParser0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("}X)rz;{ru9`'pN']FB{", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(944, "");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("CAT", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.US;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(954, "MIT");
      FastDateParser fastDateParser0 = new FastDateParser("MIT", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("7q6#{4N%z10:");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.US;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(954, "hIh");
      FastDateParser fastDateParser0 = new FastDateParser("hIh", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(3);
      fastDateParser0.parse("<XA1H'=Ot", parsePosition0);
      assertEquals(4, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=4,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(944, "");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("^96u", simpleTimeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("\\^96", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "&.L;pQc=[f#lMx");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("a'g??%+!u8HGM", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(944, "");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("^96u", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("en", locale1.getLanguage());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(944, "Uwn");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("EZ~ELgZwkx~DYWY/", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("EZ~ELgZwkx~DYWY/", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = Locale.US;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(954, "MIT");
      FastDateParser fastDateParser0 = new FastDateParser("MIT", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1327));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("West Samoa Standard Time", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(944, "");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("^96u", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[^96u,,]", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(994, "]");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("]", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("HR4 0", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("8U+He}AEWauw&=");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("!l9~['50)j(B`-m");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("+:dFK@/Ma QP!", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("!l9~['50)j(B`-m", timeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1367, " wc");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("k-MzR\n=8CG5-", simpleTimeZone0, locale0);
      assertEquals("k-MzR\n=8CG5-", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("zlrxR}P_{q\"4\n!", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("EAT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }
}
