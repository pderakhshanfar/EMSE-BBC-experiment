/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:14:52 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(35, "+H(L2V`stL=");
      FastDateParser fastDateParser0 = new FastDateParser("G%]wyyQcE,'z~XlU", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(35);
      assertEquals(1935, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("}", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("}", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(782, ">%1oW;QR(:Zi%g[`");
      Locale locale0 = new Locale(">%1oW;QR(:Zi%g[`", "CTT");
      FastDateParser fastDateParser0 = new FastDateParser("+keB(O8yT", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(782, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "GMTNST");
      FastDateParser fastDateParser0 = new FastDateParser("GMTNST", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CANADA;
      ParsePosition parsePosition0 = new ParsePosition(111);
      FastDateParser fastDateParser0 = new FastDateParser("a!1Y7<ioHW=8vO", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("/Zh~{W-bU$&9^n^.B", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("MT", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale("sdZwrlyybNh8$? ", "", "Map SRW VT-");
      locale0.getUnicodeLocaleAttributes();
      String string0 = locale0.getDisplayCountry();
      FastDateParser fastDateParser0 = new FastDateParser("sdZwrlyybNh8$? ", timeZone0, locale0);
      String string1 = fastDateParser0.getPattern();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("]", timeZone0, locale0);
      assertEquals("]", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("..M5!%3Oz6^", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(4);
      Date date0 = fastDateParser0.parse("org.apache.commons.lang3.time.FastDateParser", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("GMTBET", timeZone0, locale0);
      try { 
        fastDateParser0.parse("AET");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"AET\" does not match (\u516C\u5143|\u516C\u5143|\u516C\u5143\u524D|\u516C\u5143\u524D)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("ZV>As5hDWu", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("GMTAST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("ZV>As5hDWu", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("ECT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("l=&$a=e9~");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("_*Ry?Y3>)g", timeZone0, locale0);
      assertEquals("_*Ry?Y3>)g", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("^)@", timeZone0, locale0);
      assertEquals("^)@", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("]HG@dBeQ*'", timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(782, ">%1oW;QR(:Zi%g[`");
      Locale locale0 = new Locale(">%1oW;QR(:Zi%g[`", "CTT");
      FastDateParser fastDateParser0 = new FastDateParser(">%1oW;QR(:Zi%g[`", simpleTimeZone0, locale0);
      assertEquals(">%1oW;QR(:Zi%g[`", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("<c&hAj)IiboM2K%|", timeZone0, locale0);
      assertEquals("<c&hAj)IiboM2K%|", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("z:O", timeZone0, locale0);
      assertEquals("z:O", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("F8:o\"D?A:275Rq5I", timeZone0, locale0);
      assertEquals("F8:o\"D?A:275Rq5I", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("7}", timeZone0, locale0);
      assertEquals("7}", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser(")'k'3", timeZone0, locale0);
      assertEquals(")'k'3", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("1z`;96Fej", timeZone0, locale0);
      assertEquals("1z`;96Fej", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(782, ">%1oW;QR(:Zi%g[`");
      Locale locale0 = new Locale(">%1oW;QR(:Zi%g[`", "CTT");
      FastDateParser fastDateParser0 = new FastDateParser("0QY}[+|", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(99);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("+keB(O8yT", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("/Zh~{W-bU$&9^n^.B", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(118);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("/Zh~{W-bU$&9^n^.B", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(",", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("*7(j", timeZone0, locale0);
      assertEquals("*7(j", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("tenEnFzl[iRGj2Ov/r");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("(The ", timeZone0, locale0);
      assertEquals("(The ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(782, ">%1oW;QR(:Zi%g[`");
      Locale locale0 = new Locale(">%1oW;QR(:Zi%g[`", "CTT");
      FastDateParser fastDateParser0 = new FastDateParser("+keB(O8yT", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2742));
      assertEquals((-742), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      TimeZone timeZone0 = TimeZone.getTimeZone("MMMnIT");
      FastDateParser fastDateParser0 = new FastDateParser("MMMnIT", timeZone0, locale0);
      assertEquals("MMMnIT", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("6}+ykmO8yT", timeZone0, locale0);
      assertEquals("6}+ykmO8yT", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(34, "F/'(q&_VEW5PX$?");
      FastDateParser fastDateParser0 = new FastDateParser("F/'(q&_VEW5PX$?", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|E+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++('?[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("#DHTU#M!ZL$b|H-", timeZone0, locale0);
      try { 
        fastDateParser0.parse("#DHTU#M!ZL$b|H-");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"#DHTU#M!ZL$b|H-\" does not match #(\\p{IsNd}{1}+)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("ZF9b<xM\"`uyqvXsJ", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("ZF9b<xM\"`uyqvXsJ");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"ZF9b<xM\"`uyqvXsJ\" does not match (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre\\s*+\u65F6\u95F4|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|Alma-Ata\\s*+\u65F6\u95F4|ALMT|AMT|ANAT|Aqtau\\s*+\u65F6\u95F4|Aqtobe\\s*+\u65F6\u95F4|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville\\s*+Standard\\s*+Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|Chamorro\\s*+\u6807\u51C6\u65F6\u95F4|CHAST|Choibalsan\\s*+\u65F6\u95F4|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|Dumont-d'Urville\\s*+\u65F6\u95F4|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|Kosrae\\s*+\u65F6\u95F4|KOST|Kostanay\\s*+Standard\\s*+Time|KRAT|KST|LHDT|LHST|Line\\s*+\u5C9B\u65F6\u95F4|LINT|Magadan\\s*+\u65F6\u95F4|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|Mountain\\s*+\u590F\u4EE4\u65F6|Mountain\\s*+\u6807\u51C6\u65F6\u95F4|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|Novosibirsk\\s*+\u65F6\u95F4|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|Oral\\s*+\u65F6\u95F4|ORAT|PDT|PET|PETT|PGT|Philippines\\s*+Standard\\s*+Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda\\s*+\u65F6\u95F4|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk\\s*+Time|SRET|SRT|SST|SYOT|Syowa\\s*+\u65F6\u95F4|TAHT|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|Yekaterinburg\\s*+\u65F6\u95F4|YEKT|\u4E0D\u4E39\u65F6\u95F4|\u4E18\u514B\u65F6\u95F4|\u4E1C\u52A0\u65F6\u95F4|\u4E1C\u5370\u5EA6\u5C3C\u897F\u4E9A\u65F6\u95F4|\u4E1C\u5E1D\u6C76\u65F6\u95F4|\u4E1C\u683C\u6797\u5C9B\u590F\u4EE4\u65F6|\u4E1C\u683C\u6797\u5C9B\u65F6\u95F4|\u4E1C\u6B27\u590F\u4EE4\u65F6|\u4E1C\u6B27\u65F6\u95F4|\u4E1C\u90E8\u590F\u4EE4\u65F6|\u4E1C\u90E8\u590F\u4EE4\u65F6\\s*+\\(\u5854\u65AF\u9A6C\u5C3C\u4E9A\\)|\u4E1C\u90E8\u590F\u4EE4\u65F6\\s*+\\(\u65B0\u5357\u5A01\u5C14\u65AF\\)|\u4E1C\u90E8\u590F\u4EE4\u65F6\\s*+\\(\u7EF4\u591A\u5229\u4E9A\\)|\u4E1C\u90E8\u6807\u51C6\u65F6\u95F4|\u4E1C\u90E8\u6807\u51C6\u65F6\u95F4\\s*+\\(\u5854\u65AF\u9A6C\u5C3C\u4E9A\\)|\u4E1C\u90E8\u6807\u51C6\u65F6\u95F4\\s*+\\(\u65B0\u5357\u5A01\u5C14\u65AF\\)|\u4E1C\u90E8\u6807\u51C6\u65F6\u95F4\\s*+\\(\u6606\u58EB\u5170\\)|\u4E1C\u90E8\u6807\u51C6\u65F6\u95F4\\s*+\\(\u7EF4\u591A\u5229\u4E9A\\)|\u4E1C\u975E\u65F6\u95F4|\u4E2D\u56FD\u6807\u51C6\u65F6\u95F4|\u4E2D\u592E\u590F\u4EE4\u65F6|\u4E2D\u592E\u590F\u4EE4\u65F6\\s*+\\(\u5357\u6FB3\u5927\u5229\u4E9A\\)|\u4E2D\u592E\u590F\u4EE4\u65F6\\s*+\\(\u5357\u6FB3\u5927\u5229\u4E9A/\u65B0\u5357\u5A01\u5C14\u65AF\\)|\u4E2D\u592E\u6807\u51C6\u65F6\u95F4|\u4E2D\u592E\u6807\u51C6\u65F6\u95F4\\s*+\\(\u5317\u9886\u5730\\)|\u4E2D\u592E\u6807\u51C6\u65F6\u95F4\\s*+\\(\u5357\u6FB3\u5927\u5229\u4E9A\\)|\u4E2D\u592E\u6807\u51C6\u65F6\u95F4\\s*+\\(\u5357\u6FB3\u5927\u5229\u4E9A/\u65B0\u5357\u5A01\u5C14\u65AF\\)|\u4E2D\u6B27\u590F\u4EE4\u65F6|\u4E2D\u6B27\u65F6\u95F4|\u4E2D\u897F\u90E8\u6807\u51C6\u65F6\u95F4\\s*+\\(\u6FB3\u5927\u5229\u4E9A\\)|\u4E2D\u90E8\u5370\u5EA6\u5C3C\u897F\u4E9A\u65F6\u95F4|\u4E2D\u975E\u65F6\u95F4|\u4E4C\u5179\u522B\u514B\u65AF\u5766\u65F6\u95F4|\u4E4C\u62C9\u572D\u65F6\u95F4|\u4E4C\u65AF\u5B63\u6D85\u62C9\u65F6\u95F4|\u4E54\u6CBB\u4E9A\u65F6\u95F4|\u4E9A\u585E\u62DC\u7136\u65F6\u95F4|\u4E9A\u5E93\u6B21\u514B\u65F6\u95F4|\u4E9A\u7F8E\u5C3C\u4E9A\u65F6\u95F4|\u4E9A\u901F\u5C14\u7FA4\u5C9B\u590F\u4EE4\u65F6|\u4E9A\u901F\u5C14\u7FA4\u5C9B\u65F6\u95F4|\u4E9A\u9A6C\u900A\u65F6\u95F4|\u4EE5\u8272\u5217\u590F\u4EE4\u65F6|\u4EE5\u8272\u5217\u6807\u51C6\u65F6\u95F4|\u4F0A\u5C14\u5E93\u6B21\u514B\u65F6\u95F4|\u4F0A\u6717\u590F\u4EE4\u65F6|\u4F0A\u6717\u6807\u51C6\u65F6\u95F4|\u4F5B\u5FB7\u89D2\u65F6\u95F4|\u514B\u62C9\u65AF\u8BFA\u4E9A\u5C14\u65AF\u514B\u65F6\u95F4|\u5188\u6BD4\u4E9A\u65F6\u95F4|\u52A0\u62C9\u5DF4\u54E5\u65F6\u95F4|\u52A0\u7EB3\u65F6\u95F4|\u534F\u8C03\u4E16\u754C\u65F6\u95F4|\u5357\u4E54\u6CBB\u4E9A\u6807\u51C6\u65F6\u95F4|\u5357\u975E\u6807\u51C6\u65F6\u95F4|\u5370\u5EA6\u652F\u90A3\u65F6\u95F4|\u5370\u5EA6\u6807\u51C6\u65F6\u95F4|\u5370\u5EA6\u6D0B\u5730\u5E26\u65F6\u95F4|\u5384\u74DC\u591A\u5C14\u65F6\u95F4|\u53E4\u5DF4\u590F\u4EE4\u65F6|\u53E4\u5DF4\u6807\u51C6\u65F6\u95F4|\u53EF\u53EF\u65AF\u7FA4\u5C9B\u65F6\u95F4|\u5409\u4F2F\u7279\u7FA4\u5C9B\u65F6\u95F4|\u5409\u5C14\u5409\u65AF\u65AF\u5766\u65F6\u95F4|\u5410\u9C81\u74E6\u65F6\u95F4|\u54E5\u4F26\u6BD4\u4E9A\u65F6\u95F4|\u571F\u5E93\u66FC\u65F6\u95F4|\u5723\u8BDE\u5C9B\u65F6\u95F4|\u572D\u4E9A\u90A3\u65F6\u95F4|\u5854\u5409\u514B\u65AF\u5766\u65F6\u95F4|\u585E\u5E2D\u5C14\u7FA4\u5C9B\u65F6\u95F4|\u590D\u6D3B\u5C9B\u590F\u4EE4\u65F6|\u590D\u6D3B\u5C9B\u65F6\u95F4|\u590F\u5A01\u5937\u590F\u4EE4\u65F6|\u590F\u5A01\u5937\u6807\u51C6\u65F6\u95F4|\u5927\u6EAA\u5730\u5C9B\u65F6\u95F4|\u5927\u897F\u6D0B\u590F\u4EE4\u65F6|\u5927\u897F\u6D0B\u6807\u51C6\u65F6\u95F4|\u592A\u5E73\u6D0B\u590F\u4EE4\u65F6|\u592A\u5E73\u6D0B\u6807\u51C6\u65F6\u95F4|\u59D4\u5185\u745E\u62C9\u65F6\u95F4|\u5A01\u514B\u65F6\u95F4|\u5B5F\u52A0\u62C9\u65F6\u95F4|\u5C3C\u6CCA\u5C14\u65F6\u95F4|\u5DF4\u57FA\u65AF\u5766\u65F6\u95F4|\u5DF4\u5E03\u4E9A\u65B0\u51E0\u5185\u4E9A\u65F6\u95F4|\u5DF4\u62C9\u572D\u590F\u4EE4\u65F6|\u5DF4\u62C9\u572D\u65F6\u95F4|\u5DF4\u897F\u5229\u4E9A\u65F6\u95F4|\u5E1B\u7409\u65F6\u95F4|\u5E93\u4F26\u65F6\u95F4|\u5E93\u514B\u7FA4\u5C9B\u65F6\u95F4|\u5E93\u9875\u5C9B\u65F6\u95F4|\u5F7C\u5F97\u7F57\u5DF4\u752B\u6D1B\u592B\u65AF\u514B\u65F6\u95F4|\u6234\u7EF4\u65AF\u65F6\u95F4|\u6240\u7F57\u95E8\u7FA4\u5C9B\u65F6\u95F4|\u6258\u514B\u52B3\u7FA4\u5C9B\u65F6\u95F4|\u6469\u91CC\u897F\u65AF\u65F6\u95F4|\u6587\u83B1\u65F6\u95F4|\u6590\u6D4E\u590F\u4EE4\u65F6|\u6590\u6D4E\u65F6\u95F4|\u65B0\u52A0\u52D2\u591A\u5C3C\u4E9A\u65F6\u95F4|\u65B0\u52A0\u5761\u65F6\u95F4|\u65B0\u897F\u5170\u590F\u4EE4\u65F6|\u65B0\u897F\u5170\u6807\u51C6\u65F6\u95F4|\u65E5\u672C\u6807\u51C6\u65F6\u95F4|\u667A\u5229\u590F\u4EE4\u65F6|\u667A\u5229\u65F6\u95F4|\u67E5\u8428\u59C6\u590F\u4EE4\u65F6|\u67E5\u8428\u59C6\u6807\u51C6\u65F6\u95F4|\u683C\u6797\u5A01\u6CBB\u65F6\u95F4|\u6C99\u9A6C\u62C9\u65F6\u95F4|\u6CD5\u5C5E\u5357\u6781\u65F6\u95F4|\u6CD5\u5C5E\u572D\u4E9A\u90A3\u65F6\u95F4|\u6CE2\u65AF\u6E7E\u6807\u51C6\u65F6\u95F4|\u6CE2\u7EB3\u4F69\u65F6\u95F4|\u6D77\u53C2\u5D34\u65F6\u95F4|\u7231\u5C14\u5170\u590F\u4EE4\u65F6|\u73BB\u5229\u7EF4\u4E9A\u65F6\u95F4|\u74E6\u5229\u65AF\u53CA\u798F\u675C\u7EB3\u7FA4\u5C9B\u65F6\u95F4|\u74E6\u5974\u963F\u56FE\u65F6\u95F4|\u7559\u5C3C\u65FA\u5C9B\u65F6\u95F4|\u76AE\u57C3\u5C14\u5C9B\u53CA\u5BC6\u514B\u9686\u5C9B\u590F\u4EE4\u65F6|\u76AE\u57C3\u5C14\u5C9B\u53CA\u5BC6\u514B\u9686\u5C9B\u6807\u51C6\u65F6\u95F4|\u76AE\u7279\u5EB7\u5C9B\u6807\u51C6\u65F6\u95F4|\u798F\u514B\u5170\u7FA4\u5C9B\u65F6\u95F4|\u79D1\u5E03\u591A\u65F6\u95F4|\u79D8\u9C81\u65F6\u95F4|\u7EBD\u5A01\u5C9B\u65F6\u95F4|\u7EBD\u82AC\u5170\u590F\u4EE4\u65F6|\u7EBD\u82AC\u5170\u6807\u51C6\u65F6\u95F4|\u7F05\u7538\u65F6\u95F4|\u7F57\u745F\u62C9\u65F6\u95F4|\u82CF\u5229\u5357\u65F6\u95F4|\u82F1\u56FD\u590F\u4EE4\u65F6|\u83AB\u65AF\u6258\u514B\u65F6\u95F4|\u83AB\u65AF\u79D1\u6807\u51C6\u65F6\u95F4|\u83AB\u68EE\u65F6\u95F4|\u83F2\u5C3C\u514B\u65AF\u7FA4\u5C9B\u65F6\u95F4|\u8428\u6469\u4E9A\u7FA4\u5C9B\u6807\u51C6\u65F6\u95F4|\u897F\u5370\u5EA6\u5C3C\u897F\u4E9A\u65F6\u95F4|\u897F\u683C\u6797\u5170\u5C9B\u590F\u4EE4\u65F6|\u897F\u683C\u6797\u5170\u5C9B\u65F6\u95F4|\u897F\u6B27\u590F\u4EE4\u65F6|\u897F\u6B27\u65F6\u95F4|\u897F\u8428\u6469\u4E9A\u590F\u4EE4\u65F6|\u897F\u8428\u6469\u4E9A\u65F6\u95F4|\u897F\u90E8\u6807\u51C6\u65F6\u95F4\\s*+\\(\u6FB3\u5927\u5229\u4E9A\\)|\u897F\u975E\u65F6\u95F4|\u8BFA\u798F\u514B\u590F\u4EE4\u65F6|\u8BFA\u798F\u514B\u65F6\u95F4|\u8BFA\u9C81\u65F6\u95F4|\u8C6A\u516C\u590F\u4EE4\u65F6|\u8C6A\u516C\u6807\u51C6\u65F6\u95F4|\u8D39\u5C14\u5357\u591A\u5FB7\u8BFA\u7F57\u5C3C\u4E9A\u65F6\u95F4|\u9102\u6728\u65AF\u514B\u65F6\u95F4|\u963F\u5BCC\u6C57\u65F6\u95F4|\u963F\u62C9\u4F2F\u6807\u51C6\u65F6\u95F4|\u963F\u62C9\u65AF\u52A0\u590F\u4EE4\u65F6|\u963F\u62C9\u65AF\u52A0\u6807\u51C6\u65F6\u95F4|\u963F\u6839\u5EF7\u65F6\u95F4|\u963F\u90A3\u5E95\u6CB3\u65F6\u95F4|\u97E9\u56FD\u6807\u51C6\u65F6\u95F4|\u9999\u6E2F\u65F6\u95F4|\u9A6C\u514B\u8428\u65AF\u65F6\u95F4|\u9A6C\u5C14\u4EE3\u592B\u65F6\u95F4|\u9A6C\u6765\u897F\u4E9A\u65F6\u95F4|\u9A6C\u7ECD\u5C14\u7FA4\u5C9B\u65F6\u95F4|\u9EA6\u5938\u91CC\u5C9B\u590F\u4EE4\u65F6|\u9EA6\u5938\u91CC\u5C9B\u65F6\u95F4)(\\p{IsNd}{1}+)9
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("53HKIuwl");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("53HKIuwl", timeZone0, locale0);
      Locale locale1 = Locale.KOREAN;
      FastDateParser fastDateParser1 = new FastDateParser("53HKIuwl", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("..M5!%3Oz6^", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "Dm%Wf{#7~^[='l9_");
      FastDateParser fastDateParser1 = new FastDateParser("..M5!%3Oz6^", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("4EFw9_&#S2.");
      FastDateParser fastDateParser0 = new FastDateParser("4EFw9_&#S2.", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("MIT", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("$C88BpOM3", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals("$C88BpOM3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("..M5!%3Oz6^", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("org.apache.commons.lang3.time.FastDateParser$NumberStrategy", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("HAxaCH@{aaP", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("5HfOiv1vd@J");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("WeoB");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("[mXV8Dkmc_mRlOd@", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("\\[(\\p{IsNd}++)", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";./ni");
      FastDateParser fastDateParser0 = new FastDateParser(";./ni", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser(" locale does not support dates before 1868 AD)\n", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("W=~;!a?r", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("W=~;!a?r", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("MT", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateParser0.parseObject("AET", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("{+", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[{+,zh_CN,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("{z", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("mVj+,)", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("7\"X.4c$Y");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("MT", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parse("43*S?Ahh^W>", parsePosition0);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale("sdZwrlyybNh8$? ", "Map SRW VT-", "Map SRW VT-");
      FastDateParser fastDateParser0 = new FastDateParser("Map SRW VT-", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+M+|S+|W+|Z+|a+|d+|h+|k+|m&|s+|w+|y+|z+d''|'[r']++(''[bO]*+)*+':[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+M+|S+|W+|Z+|a+|d+|h+|k+|m&|s+|w+|y+|z+d''|'[r']++(''[bO]*+)*+':[^'A-Za-z]++", fastDateParser0.getPattern());
  }
}
