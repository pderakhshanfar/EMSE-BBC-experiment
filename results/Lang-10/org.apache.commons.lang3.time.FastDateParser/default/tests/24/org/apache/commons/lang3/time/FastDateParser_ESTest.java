/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 07:04:51 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.zone.ZoneRules;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser("zbZW['", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("zbZW['", fastDateParser0.getPattern());
      
      Date date0 = fastDateParser0.parse("GMT");
      assertNotNull(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("zbZW['", fastDateParser0.getPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("Wno%6|\"79#z$a", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("Wno%6|\"79#z$a", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(2);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      
      Date date0 = fastDateParser0.parse("5F3zF#&-p|H}BZOs.", parsePosition0);
      assertNotNull(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("Wno%6|\"79#z$a", fastDateParser0.getPattern());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser("&%\u0005=yy", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("&%\u0005=yy", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("hQ,c,:g\"", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("hQ,c,:g\"", fastDateParser0.getPattern());
      
      Date date0 = fastDateParser0.parse("5F3zF#&-p|H}BZOs.");
      assertNotNull(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("hQ,c,:g\"", fastDateParser0.getPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Locale locale1 = FastDateParser.JAPANESE_IMPERIAL;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale1.toString());
      assertEquals("JP", locale1.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      
      String string0 = locale0.getDisplayName(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertEquals("\u4E2D\u56FD\u8A9E (\u53F0\u6E7E)", string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale1.toString());
      assertEquals("JP", locale1.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      
      int int0 = fastDateParser0.adjustYear((-1));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals(1999, int0);
      assertNotSame(locale0, locale1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("hQ,c,:g\"", fastDateParser0.getPattern());
      
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(boolean0);
      assertNotSame(locale0, locale1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("hQ,c,:g\"", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser("5F3zF#&-p|H}BZOs.", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("5F3zF#&-p|H}BZOs.", fastDateParser0.getPattern());
      
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("5F3zF#&-p|H}BZOs.", fastDateParser0.getPattern());
      
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("5F3zF#&-p|H}BZOs.", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("E*EOW$xIP59xG)q58", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("E*EOW$xIP59xG)q58", fastDateParser0.getPattern());
      
      try { 
        fastDateParser0.parse("izf");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"izf\" does not match (dom|domenica|gio|gioved\u00EC|lun|luned\u00EC|mar|marted\u00EC|mer|mercoled\u00EC|sab|sabato|ven|venerd\u00EC)\\*(dom|domenica|gio|gioved\u00EC|lun|luned\u00EC|mar|marted\u00EC|mer|mercoled\u00EC|sab|sabato|ven|venerd\u00EC)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = Locale.ITALIAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      String string0 = locale1.toLanguageTag();
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertEquals("it", string0);
      assertNotSame(locale1, locale0);
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(string0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertNotNull(linkedHashSet1);
      assertFalse(linkedHashSet1.contains(string0));
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      
      Locale locale2 = Locale.TAIWAN;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale2.getVariant());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zh", locale2.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser("#~zwZL0&zmswT*xbvD.", timeZone0, locale2);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale2.getVariant());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("#~zwZL0&zmswT*xbvD.", fastDateParser0.getPattern());
      
      try { 
        fastDateParser0.parseObject("#~zwZL0&zmswT*xbvD.");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"#~zwZL0&zmswT*xbvD.\" does not match #~(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre\\s*+\u6642\u9593|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|Alma-Ata\\s*+\u6642\u9593|ALMT|AMT|ANAT|Aqtau\\s*+\u6642\u9593|Aqtobe\\s*+\u6642\u9593|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville\\s*+Standard\\s*+Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|Dumont-d'Urville\\s*+\u6642\u9593|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|Irkutsk\\s*+\u6642\u9593|IRST|IST|JST|KGT|Kirgizstan\\s*+\u6642\u9593|Kosrae\\s*+\u6642\u9593|KOST|Kostanay\\s*+Standard\\s*+Time|KRAT|KST|LHDT|LHST|Line\\s*+Is\\.\\s*+\u6642\u9593|LINT|Magadan\\s*+\u6642\u9593|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|Novosibirsk\\s*+\u6642\u9593|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|ORAT|PDT|PET|Petropavlovsk-Kamchatski\\s*+\u6642\u9593|PETT|PGT|Philippines\\s*+Standard\\s*+Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda\\s*+\u6642\u9593|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk\\s*+Time|SRET|SRT|SST|SYOT|TAHT|TFT|TJT|TKT|TLT|TMT|TOT|TST|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|Yekaterinburg\\s*+\u6642\u9593|YEKT|\u4E0D\u4E39\u6642\u9593|\u4E2D\u5370\u5EA6\u5C3C\u897F\u4E9E\u6642\u9593|\u4E2D\u570B\u6A19\u6E96\u6642\u9593|\u4E2D\u592E\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u4E2D\u592E\u6A19\u6E96\u6642\u9593|\u4E2D\u6B50\u590F\u4EE4\u6642\u9593|\u4E2D\u6B50\u6642\u9593|\u4E2D\u897F\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\\)|\u4E2D\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\u5357\u5340\\)|\u4E2D\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\u5357\u5340/\u65B0\u5357\u5A01\u723E\u65AF\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u5317\u90E8\u5404\u5730\u5340\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\u5357\u5340/\u65B0\u5357\u5A01\u723E\u65AF\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\u5357\u90E8\\)|\u4E2D\u975E\u6642\u9593|\u4E9E\u585E\u62DC\u7136\u6642\u9593|\u4E9E\u5EAB\u6B21\u514B\u6642\u9593|\u4E9E\u7F8E\u5C3C\u4E9E\u6642\u9593|\u4E9E\u901F\u723E\u7FA4\u5CF6\u590F\u4EE4\u6642\u9593|\u4E9E\u901F\u723E\u7FA4\u5CF6\u6642\u9593|\u4E9E\u99AC\u905C\u6642\u9593|\u4EE5\u8272\u5217\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u4EE5\u8272\u5217\u6A19\u6E96\u6642\u9593|\u4F0A\u6717\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u4F0A\u6717\u6A19\u6E96\u6642\u9593|\u4F5B\u5FB7\u89D2\u6642\u9593|\u4F5B\u65AF\u6258\\s*+\\(Vostok\\)\\s*+\u6642\u9593|\u4FAF\u5FB7\\s*+\\(Hovd\\)\\s*+\u6642\u9593|\u514B\u62C9\u65AF\u8AFE\u4E9E\u723E\u65AF\u514B\u6642\u9593|\u52A0\u62C9\u5DF4\u54E5\u6642\u9593|\u5354\u8ABF\u4E16\u754C\u6642\u9593|\u5357\u55AC\u6CBB\u4E9E\u6A19\u6E96\u6642\u9593|\u5357\u975E\u6A19\u6E96\u6642\u9593|\u5370\u5EA6\u652F\u90A3\u6642\u9593|\u5370\u5EA6\u6A19\u6E96\u6642\u9593|\u5370\u5EA6\u6D0B\u5730\u5340\u6642\u9593|\u5384\u74DC\u591A\u723E\u6642\u9593|\u53E4\u5DF4\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u53E4\u5DF4\u6A19\u6E96\u6642\u9593|\u53EF\u53EF\u65AF\u7FA4\u5CF6\u6642\u9593|\u53F0\u7063\u6A19\u6E96\u6642\u9593|\u5409\u4F2F\u7279\u7FA4\u5CF6\u6642\u9593|\u5410\u9B6F\u74E6\u6642\u9593|\u54E5\u502B\u6BD4\u4E9E\u6642\u9593|\u55AC\u6CBB\u4E9E\u6642\u9593|\u571F\u5EAB\u66FC\u6642\u9593|\u5854\u5409\u514B\u6642\u9593|\u585E\u5E2D\u723E\u7FA4\u5CF6\u6642\u9593|\u590F\u5A01\u5937\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u590F\u5A01\u5937\u6A19\u6E96\u6642\u9593|\u5915\u6B50\u74E6\\s*+\\(Syowa\\)\\s*+\u6642\u9593|\u5927\u6EAA\u5730\u5CF6\u6642\u9593|\u5927\u897F\u6D0B\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u5927\u897F\u6D0B\u6A19\u6E96\u6642\u9593|\u592A\u5E73\u6D0B\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u592A\u5E73\u6D0B\u6A19\u6E96\u6642\u9593|\u59D4\u5167\u745E\u62C9\u6642\u9593|\u5A01\u514B\u6642\u9593|\u5B5F\u52A0\u62C9\u6642\u9593|\u5C3C\u6CCA\u723E\u6642\u9593|\u5C71\u5340\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u5C71\u5340\u6A19\u6E96\u6642\u9593|\u5DE7\u5DF4\u5C71\\s*+\\(Choibalsan\\)\\s*+\u6642\u9593|\u5DF4\u57FA\u65AF\u5766\u6642\u9593|\u5DF4\u5E03\u4E9E\u65B0\u5E7E\u5167\u4E9E\u6642\u9593|\u5DF4\u62C9\u572D\u590F\u4EE4\u6642\u9593|\u5DF4\u62C9\u572D\u6642\u9593|\u5DF4\u897F\u5229\u4E9E\u6642\u9593|\u5E1B\u7409\u6642\u9593|\u5EAB\u502B\u6642\u9593|\u5EAB\u514B\u7FA4\u5CF6\u6642\u9593|\u5EAB\u9801\u5CF6\u6642\u9593|\u5FA9\u6D3B\u5CF6\u590F\u4EE4\u6642\u9593|\u5FA9\u6D3B\u5CF6\u6642\u9593|\u611B\u723E\u862D\u590F\u4EE4\u6642\u9593|\u6240\u7F85\u9580\u7FA4\u5CF6\u6642\u9593|\u6258\u514B\u52DE\u7FA4\u5CF6\u6642\u9593|\u6469\u91CC\u897F\u65AF\u6642\u9593|\u6590\u6FDF\u590F\u4EE4\u6642\u9593|\u6590\u6FDF\u6642\u9593|\u65B0\u52A0\u52D2\u591A\u5C3C\u4E9E\u6642\u9593|\u65B0\u52A0\u5761\u6642\u9593|\u65E5\u672C\u6A19\u6E96\u6642\u9593|\u667A\u5229\u590F\u4EE4\u6642\u9593|\u667A\u5229\u6642\u9593|\u6771\u52A0\u6642\u9593|\u6771\u5370\u5EA6\u5C3C\u897F\u4E9E\u6642\u9593|\u6771\u5E1D\u6C76\u6642\u9593|\u6771\u65B9\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u6771\u65B9\u6A19\u6E96\u6642\u9593|\u6771\u683C\u6797\u5CF6\u590F\u4EE4\u6642\u9593|\u6771\u683C\u6797\u5CF6\u6642\u9593|\u6771\u6B50\u590F\u4EE4\u6642\u9593|\u6771\u6B50\u6642\u9593|\u6771\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u5854\u65AF\u6885\u5C3C\u4E9E\u5CF6\\)|\u6771\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u65B0\u5357\u5A01\u723E\u65AF\\)|\u6771\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u7DAD\u591A\u5229\u4E9E\u90A6\\)|\u6771\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u5854\u65AF\u6885\u5C3C\u4E9E\u5CF6\\)|\u6771\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u65B0\u5357\u5A01\u723E\u65AF\\)|\u6771\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6606\u58EB\u862D\\)|\u6771\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u7DAD\u591A\u5229\u4E9E\u90A6\\)|\u6771\u975E\u6642\u9593|\u67E5\u5766\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u67E5\u5766\u6A19\u6E96\u6642\u9593|\u67E5\u83AB\u6D1B\u6A19\u6E96\u6642\u9593|\u683C\u6797\u5A01\u6CBB\u5E73\u5747\u6642\u9593|\u683C\u6797\u5A01\u6CBB\u6642\u9593|\u695A\u514B\u6642\u9593|\u6B50\u4F5B\u6642\u9593|\u6B50\u59C6\u65AF\u514B\\s*+\\(Omsk\\)\\s*+\u6642\u9593|\u6C76\u840A\u6642\u9593|\u6C99\u99AC\u62C9\u6642\u9593|\u6CD5\u570B\u5357\u534A\u7403\u53CA\u5357\u6975\u5C6C\u5730\u6642\u9593|\u6CD5\u5C6C\u572D\u4E9E\u90A3\u6642\u9593|\u6CE2\u65AF\u7063\u6A19\u6E96\u6642\u9593|\u6CE2\u7D0D\u4F69\u6642\u9593|\u6D77\u53C3\u5D34\u6642\u9593|\u70CF\u62C9\u572D\u6642\u9593|\u70CF\u65AF\u5167\u62C9\\s*+\\(Ust-Nera\\)\\s*+\u6642\u9593|\u70CF\u8332\u5225\u514B\u65AF\u5766\u6642\u9593|\u73BB\u5229\u7DAD\u4E9E\u6642\u9593|\u74E6\u5229\u65AF\u53CA\u798F\u675C\u7D0D\u7FA4\u5CF6\u6642\u9593|\u74E6\u5974\u963F\u5716\u6642\u9593|\u7518\u6BD4\u723E\u6642\u9593|\u7559\u5C3C\u65FA\u5CF6\u6642\u9593|\u76AE\u57C3\u723E\u5CF6\u53CA\u5BC6\u514B\u9686\u5CF6\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u76AE\u57C3\u723E\u5CF6\u53CA\u5BC6\u514B\u9686\u5CF6\u6A19\u6E96\u6642\u9593|\u76AE\u7279\u5EB7\u6A19\u6E96\u6642\u9593|\u7955\u9B6F\u6642\u9593|\u798F\u514B\u862D\u7FA4\u5CF6\u6642\u9593|\u7D10\u5A01\u5CF6\u6642\u9593|\u7D10\u82AC\u862D\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u7D10\u82AC\u862D\u6A19\u6E96\u6642\u9593|\u7D10\u897F\u862D\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u7D10\u897F\u862D\u6A19\u6E96\u6642\u9593|\u7DEC\u7538\u6642\u9593|\u7F85\u897F\u62C9\u6642\u9593|\u8056\u8A95\u5CF6\u6642\u9593|\u81FA\u7DAD\u65AF\u6642\u9593|\u82F1\u570B\u590F\u4EE4\u6642\u9593|\u83AB\u65AF\u79D1\u6A19\u6E96\u6642\u9593|\u83AB\u68EE\u6642\u9593|\u83F2\u5C3C\u514B\u65AF\u7FA4\u5CF6\u6642\u9593|\u84CB\u4E9E\u90A3\u6642\u9593|\u85A9\u6469\u4E9E\u6A19\u6E96\u6642\u9593|\u8607\u5229\u5357\u6642\u9593|\u897F\u5370\u5C3C\u6642\u9593|\u897F\u683C\u6797\u862D\u5CF6\u590F\u4EE4\u6642\u9593|\u897F\u683C\u6797\u862D\u5CF6\u6642\u9593|\u897F\u6B50\u590F\u4EE4\u6642\u9593|\u897F\u6B50\u6642\u9593|\u897F\u85A9\u6469\u4E9E\u590F\u4EE4\u6642\u9593|\u897F\u85A9\u6469\u4E9E\u6642\u9593|\u897F\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\\)|\u897F\u975E\u6642\u9593|\u8AFE\u798F\u514B\u590F\u4EE4\u6642\u9593|\u8AFE\u798F\u514B\u6642\u9593|\u8AFE\u9B6F\u6642\u9593|\u8C6A\u52F3\u7235\u5CF6\u590F\u4EE4\u6642\u9593|\u8C6A\u52F3\u7235\u5CF6\u6A19\u6E96\u6642\u9593|\u8CBB\u723E\u5357\u591A-\u8FEA\u8AFE\u7F85\u5C3C\u4E9E\u6642\u9593|\u8FE6\u7D0D\u5E73\u5747\u6642\u9593|\u963F\u5BCC\u6C57\u6642\u9593|\u963F\u62C9\u4F2F\u6A19\u6E96\u6642\u9593|\u963F\u62C9\u65AF\u52A0\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u963F\u62C9\u65AF\u52A0\u6A19\u6E96\u6642\u9593|\u963F\u6839\u5EF7\u6642\u9593|\u963F\u90A3\u5E95\u6CB3\u6642\u9593|\u97D3\u570B\u6A19\u6E96\u6642\u9593|\u9999\u6E2F\u6642\u9593|\u99AC\u4F86\u897F\u4E9E\u6642\u9593|\u99AC\u514B\u85A9\u65AF\u6642\u9593|\u99AC\u723E\u5730\u592B\u6642\u9593|\u99AC\u7D39\u723E\u7FA4\u5CF6\u6642\u9593|\u9EA5\u5938\u5229\u5CF6\u590F\u4EE4\u6642\u9593|\u9EA5\u5938\u5229\u5CF6\u6642\u9593)(\\p{IsNd}++)(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre\\s*+\u6642\u9593|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|Alma-Ata\\s*+\u6642\u9593|ALMT|AMT|ANAT|Aqtau\\s*+\u6642\u9593|Aqtobe\\s*+\u6642\u9593|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville\\s*+Standard\\s*+Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|Dumont-d'Urville\\s*+\u6642\u9593|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|Irkutsk\\s*+\u6642\u9593|IRST|IST|JST|KGT|Kirgizstan\\s*+\u6642\u9593|Kosrae\\s*+\u6642\u9593|KOST|Kostanay\\s*+Standard\\s*+Time|KRAT|KST|LHDT|LHST|Line\\s*+Is\\.\\s*+\u6642\u9593|LINT|Magadan\\s*+\u6642\u9593|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|Novosibirsk\\s*+\u6642\u9593|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|ORAT|PDT|PET|Petropavlovsk-Kamchatski\\s*+\u6642\u9593|PETT|PGT|Philippines\\s*+Standard\\s*+Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda\\s*+\u6642\u9593|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk\\s*+Time|SRET|SRT|SST|SYOT|TAHT|TFT|TJT|TKT|TLT|TMT|TOT|TST|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|Yekaterinburg\\s*+\u6642\u9593|YEKT|\u4E0D\u4E39\u6642\u9593|\u4E2D\u5370\u5EA6\u5C3C\u897F\u4E9E\u6642\u9593|\u4E2D\u570B\u6A19\u6E96\u6642\u9593|\u4E2D\u592E\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u4E2D\u592E\u6A19\u6E96\u6642\u9593|\u4E2D\u6B50\u590F\u4EE4\u6642\u9593|\u4E2D\u6B50\u6642\u9593|\u4E2D\u897F\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\\)|\u4E2D\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\u5357\u5340\\)|\u4E2D\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\u5357\u5340/\u65B0\u5357\u5A01\u723E\u65AF\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u5317\u90E8\u5404\u5730\u5340\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\u5357\u5340/\u65B0\u5357\u5A01\u723E\u65AF\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\u5357\u90E8\\)|\u4E2D\u975E\u6642\u9593|\u4E9E\u585E\u62DC\u7136\u6642\u9593|\u4E9E\u5EAB\u6B21\u514B\u6642\u9593|\u4E9E\u7F8E\u5C3C\u4E9E\u6642\u9593|\u4E9E\u901F\u723E\u7FA4\u5CF6\u590F\u4EE4\u6642\u9593|\u4E9E\u901F\u723E\u7FA4\u5CF6\u6642\u9593|\u4E9E\u99AC\u905C\u6642\u9593|\u4EE5\u8272\u5217\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u4EE5\u8272\u5217\u6A19\u6E96\u6642\u9593|\u4F0A\u6717\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u4F0A\u6717\u6A19\u6E96\u6642\u9593|\u4F5B\u5FB7\u89D2\u6642\u9593|\u4F5B\u65AF\u6258\\s*+\\(Vostok\\)\\s*+\u6642\u9593|\u4FAF\u5FB7\\s*+\\(Hovd\\)\\s*+\u6642\u9593|\u514B\u62C9\u65AF\u8AFE\u4E9E\u723E\u65AF\u514B\u6642\u9593|\u52A0\u62C9\u5DF4\u54E5\u6642\u9593|\u5354\u8ABF\u4E16\u754C\u6642\u9593|\u5357\u55AC\u6CBB\u4E9E\u6A19\u6E96\u6642\u9593|\u5357\u975E\u6A19\u6E96\u6642\u9593|\u5370\u5EA6\u652F\u90A3\u6642\u9593|\u5370\u5EA6\u6A19\u6E96\u6642\u9593|\u5370\u5EA6\u6D0B\u5730\u5340\u6642\u9593|\u5384\u74DC\u591A\u723E\u6642\u9593|\u53E4\u5DF4\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u53E4\u5DF4\u6A19\u6E96\u6642\u9593|\u53EF\u53EF\u65AF\u7FA4\u5CF6\u6642\u9593|\u53F0\u7063\u6A19\u6E96\u6642\u9593|\u5409\u4F2F\u7279\u7FA4\u5CF6\u6642\u9593|\u5410\u9B6F\u74E6\u6642\u9593|\u54E5\u502B\u6BD4\u4E9E\u6642\u9593|\u55AC\u6CBB\u4E9E\u6642\u9593|\u571F\u5EAB\u66FC\u6642\u9593|\u5854\u5409\u514B\u6642\u9593|\u585E\u5E2D\u723E\u7FA4\u5CF6\u6642\u9593|\u590F\u5A01\u5937\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u590F\u5A01\u5937\u6A19\u6E96\u6642\u9593|\u5915\u6B50\u74E6\\s*+\\(Syowa\\)\\s*+\u6642\u9593|\u5927\u6EAA\u5730\u5CF6\u6642\u9593|\u5927\u897F\u6D0B\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u5927\u897F\u6D0B\u6A19\u6E96\u6642\u9593|\u592A\u5E73\u6D0B\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u592A\u5E73\u6D0B\u6A19\u6E96\u6642\u9593|\u59D4\u5167\u745E\u62C9\u6642\u9593|\u5A01\u514B\u6642\u9593|\u5B5F\u52A0\u62C9\u6642\u9593|\u5C3C\u6CCA\u723E\u6642\u9593|\u5C71\u5340\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u5C71\u5340\u6A19\u6E96\u6642\u9593|\u5DE7\u5DF4\u5C71\\s*+\\(Choibalsan\\)\\s*+\u6642\u9593|\u5DF4\u57FA\u65AF\u5766\u6642\u9593|\u5DF4\u5E03\u4E9E\u65B0\u5E7E\u5167\u4E9E\u6642\u9593|\u5DF4\u62C9\u572D\u590F\u4EE4\u6642\u9593|\u5DF4\u62C9\u572D\u6642\u9593|\u5DF4\u897F\u5229\u4E9E\u6642\u9593|\u5E1B\u7409\u6642\u9593|\u5EAB\u502B\u6642\u9593|\u5EAB\u514B\u7FA4\u5CF6\u6642\u9593|\u5EAB\u9801\u5CF6\u6642\u9593|\u5FA9\u6D3B\u5CF6\u590F\u4EE4\u6642\u9593|\u5FA9\u6D3B\u5CF6\u6642\u9593|\u611B\u723E\u862D\u590F\u4EE4\u6642\u9593|\u6240\u7F85\u9580\u7FA4\u5CF6\u6642\u9593|\u6258\u514B\u52DE\u7FA4\u5CF6\u6642\u9593|\u6469\u91CC\u897F\u65AF\u6642\u9593|\u6590\u6FDF\u590F\u4EE4\u6642\u9593|\u6590\u6FDF\u6642\u9593|\u65B0\u52A0\u52D2\u591A\u5C3C\u4E9E\u6642\u9593|\u65B0\u52A0\u5761\u6642\u9593|\u65E5\u672C\u6A19\u6E96\u6642\u9593|\u667A\u5229\u590F\u4EE4\u6642\u9593|\u667A\u5229\u6642\u9593|\u6771\u52A0\u6642\u9593|\u6771\u5370\u5EA6\u5C3C\u897F\u4E9E\u6642\u9593|\u6771\u5E1D\u6C76\u6642\u9593|\u6771\u65B9\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u6771\u65B9\u6A19\u6E96\u6642\u9593|\u6771\u683C\u6797\u5CF6\u590F\u4EE4\u6642\u9593|\u6771\u683C\u6797\u5CF6\u6642\u9593|\u6771\u6B50\u590F\u4EE4\u6642\u9593|\u6771\u6B50\u6642\u9593|\u6771\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u5854\u65AF\u6885\u5C3C\u4E9E\u5CF6\\)|\u6771\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u65B0\u5357\u5A01\u723E\u65AF\\)|\u6771\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u7DAD\u591A\u5229\u4E9E\u90A6\\)|\u6771\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u5854\u65AF\u6885\u5C3C\u4E9E\u5CF6\\)|\u6771\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u65B0\u5357\u5A01\u723E\u65AF\\)|\u6771\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6606\u58EB\u862D\\)|\u6771\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u7DAD\u591A\u5229\u4E9E\u90A6\\)|\u6771\u975E\u6642\u9593|\u67E5\u5766\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u67E5\u5766\u6A19\u6E96\u6642\u9593|\u67E5\u83AB\u6D1B\u6A19\u6E96\u6642\u9593|\u683C\u6797\u5A01\u6CBB\u5E73\u5747\u6642\u9593|\u683C\u6797\u5A01\u6CBB\u6642\u9593|\u695A\u514B\u6642\u9593|\u6B50\u4F5B\u6642\u9593|\u6B50\u59C6\u65AF\u514B\\s*+\\(Omsk\\)\\s*+\u6642\u9593|\u6C76\u840A\u6642\u9593|\u6C99\u99AC\u62C9\u6642\u9593|\u6CD5\u570B\u5357\u534A\u7403\u53CA\u5357\u6975\u5C6C\u5730\u6642\u9593|\u6CD5\u5C6C\u572D\u4E9E\u90A3\u6642\u9593|\u6CE2\u65AF\u7063\u6A19\u6E96\u6642\u9593|\u6CE2\u7D0D\u4F69\u6642\u9593|\u6D77\u53C3\u5D34\u6642\u9593|\u70CF\u62C9\u572D\u6642\u9593|\u70CF\u65AF\u5167\u62C9\\s*+\\(Ust-Nera\\)\\s*+\u6642\u9593|\u70CF\u8332\u5225\u514B\u65AF\u5766\u6642\u9593|\u73BB\u5229\u7DAD\u4E9E\u6642\u9593|\u74E6\u5229\u65AF\u53CA\u798F\u675C\u7D0D\u7FA4\u5CF6\u6642\u9593|\u74E6\u5974\u963F\u5716\u6642\u9593|\u7518\u6BD4\u723E\u6642\u9593|\u7559\u5C3C\u65FA\u5CF6\u6642\u9593|\u76AE\u57C3\u723E\u5CF6\u53CA\u5BC6\u514B\u9686\u5CF6\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u76AE\u57C3\u723E\u5CF6\u53CA\u5BC6\u514B\u9686\u5CF6\u6A19\u6E96\u6642\u9593|\u76AE\u7279\u5EB7\u6A19\u6E96\u6642\u9593|\u7955\u9B6F\u6642\u9593|\u798F\u514B\u862D\u7FA4\u5CF6\u6642\u9593|\u7D10\u5A01\u5CF6\u6642\u9593|\u7D10\u82AC\u862D\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u7D10\u82AC\u862D\u6A19\u6E96\u6642\u9593|\u7D10\u897F\u862D\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u7D10\u897F\u862D\u6A19\u6E96\u6642\u9593|\u7DEC\u7538\u6642\u9593|\u7F85\u897F\u62C9\u6642\u9593|\u8056\u8A95\u5CF6\u6642\u9593|\u81FA\u7DAD\u65AF\u6642\u9593|\u82F1\u570B\u590F\u4EE4\u6642\u9593|\u83AB\u65AF\u79D1\u6A19\u6E96\u6642\u9593|\u83AB\u68EE\u6642\u9593|\u83F2\u5C3C\u514B\u65AF\u7FA4\u5CF6\u6642\u9593|\u84CB\u4E9E\u90A3\u6642\u9593|\u85A9\u6469\u4E9E\u6A19\u6E96\u6642\u9593|\u8607\u5229\u5357\u6642\u9593|\u897F\u5370\u5C3C\u6642\u9593|\u897F\u683C\u6797\u862D\u5CF6\u590F\u4EE4\u6642\u9593|\u897F\u683C\u6797\u862D\u5CF6\u6642\u9593|\u897F\u6B50\u590F\u4EE4\u6642\u9593|\u897F\u6B50\u6642\u9593|\u897F\u85A9\u6469\u4E9E\u590F\u4EE4\u6642\u9593|\u897F\u85A9\u6469\u4E9E\u6642\u9593|\u897F\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\\)|\u897F\u975E\u6642\u9593|\u8AFE\u798F\u514B\u590F\u4EE4\u6642\u9593|\u8AFE\u798F\u514B\u6642\u9593|\u8AFE\u9B6F\u6642\u9593|\u8C6A\u52F3\u7235\u5CF6\u590F\u4EE4\u6642\u9593|\u8C6A\u52F3\u7235\u5CF6\u6A19\u6E96\u6642\u9593|\u8CBB\u723E\u5357\u591A-\u8FEA\u8AFE\u7F85\u5C3C\u4E9E\u6642\u9593|\u8FE6\u7D0D\u5E73\u5747\u6642\u9593|\u963F\u5BCC\u6C57\u6642\u9593|\u963F\u62C9\u4F2F\u6A19\u6E96\u6642\u9593|\u963F\u62C9\u65AF\u52A0\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u963F\u62C9\u65AF\u52A0\u6A19\u6E96\u6642\u9593|\u963F\u6839\u5EF7\u6642\u9593|\u963F\u90A3\u5E95\u6CB3\u6642\u9593|\u97D3\u570B\u6A19\u6E96\u6642\u9593|\u9999\u6E2F\u6642\u9593|\u99AC\u4F86\u897F\u4E9E\u6642\u9593|\u99AC\u514B\u85A9\u65AF\u6642\u9593|\u99AC\u723E\u5730\u592B\u6642\u9593|\u99AC\u7D39\u723E\u7FA4\u5CF6\u6642\u9593|\u9EA5\u5938\u5229\u5CF6\u590F\u4EE4\u6642\u9593|\u9EA5\u5938\u5229\u5CF6\u6642\u9593)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(123, "@FO<Pw0{r;");
      assertNotNull(simpleTimeZone0);
      assertEquals(123, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=@FO<Pw0{r;,offset=123,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("@FO<Pw0{r;", simpleTimeZone0.getID());
      
      Locale locale1 = FastDateParser.JAPANESE_IMPERIAL;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JP", locale1.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale1.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("4,Z(", simpleTimeZone0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(fastDateParser0);
      assertEquals(123, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=@FO<Pw0{r;,offset=123,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("@FO<Pw0{r;", simpleTimeZone0.getID());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JP", locale1.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale1.toString());
      assertEquals("4,Z(", fastDateParser0.getPattern());
      
      FastDateParser fastDateParser1 = new FastDateParser("4,Z(", simpleTimeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(123, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=@FO<Pw0{r;,offset=123,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("@FO<Pw0{r;", simpleTimeZone0.getID());
      assertEquals("4,Z(", fastDateParser1.getPattern());
      
      try { 
        fastDateParser1.parse("[DiAU@_,e~5:vFm}");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"[DiAU@_,e~5:vFm}\" does not match 4,(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre\\s*+\u6642\u9593|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|Alma-Ata\\s*+\u6642\u9593|ALMT|AMT|ANAT|Aqtau\\s*+\u6642\u9593|Aqtobe\\s*+\u6642\u9593|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville\\s*+Standard\\s*+Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|Dumont-d'Urville\\s*+\u6642\u9593|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|Irkutsk\\s*+\u6642\u9593|IRST|IST|JST|KGT|Kirgizstan\\s*+\u6642\u9593|Kosrae\\s*+\u6642\u9593|KOST|Kostanay\\s*+Standard\\s*+Time|KRAT|KST|LHDT|LHST|Line\\s*+Is\\.\\s*+\u6642\u9593|LINT|Magadan\\s*+\u6642\u9593|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|Novosibirsk\\s*+\u6642\u9593|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|ORAT|PDT|PET|Petropavlovsk-Kamchatski\\s*+\u6642\u9593|PETT|PGT|Philippines\\s*+Standard\\s*+Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda\\s*+\u6642\u9593|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk\\s*+Time|SRET|SRT|SST|SYOT|TAHT|TFT|TJT|TKT|TLT|TMT|TOT|TST|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|Yekaterinburg\\s*+\u6642\u9593|YEKT|\u4E0D\u4E39\u6642\u9593|\u4E2D\u5370\u5EA6\u5C3C\u897F\u4E9E\u6642\u9593|\u4E2D\u570B\u6A19\u6E96\u6642\u9593|\u4E2D\u592E\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u4E2D\u592E\u6A19\u6E96\u6642\u9593|\u4E2D\u6B50\u590F\u4EE4\u6642\u9593|\u4E2D\u6B50\u6642\u9593|\u4E2D\u897F\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\\)|\u4E2D\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\u5357\u5340\\)|\u4E2D\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\u5357\u5340/\u65B0\u5357\u5A01\u723E\u65AF\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u5317\u90E8\u5404\u5730\u5340\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\u5357\u5340/\u65B0\u5357\u5A01\u723E\u65AF\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\u5357\u90E8\\)|\u4E2D\u975E\u6642\u9593|\u4E9E\u585E\u62DC\u7136\u6642\u9593|\u4E9E\u5EAB\u6B21\u514B\u6642\u9593|\u4E9E\u7F8E\u5C3C\u4E9E\u6642\u9593|\u4E9E\u901F\u723E\u7FA4\u5CF6\u590F\u4EE4\u6642\u9593|\u4E9E\u901F\u723E\u7FA4\u5CF6\u6642\u9593|\u4E9E\u99AC\u905C\u6642\u9593|\u4EE5\u8272\u5217\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u4EE5\u8272\u5217\u6A19\u6E96\u6642\u9593|\u4F0A\u6717\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u4F0A\u6717\u6A19\u6E96\u6642\u9593|\u4F5B\u5FB7\u89D2\u6642\u9593|\u4F5B\u65AF\u6258\\s*+\\(Vostok\\)\\s*+\u6642\u9593|\u4FAF\u5FB7\\s*+\\(Hovd\\)\\s*+\u6642\u9593|\u514B\u62C9\u65AF\u8AFE\u4E9E\u723E\u65AF\u514B\u6642\u9593|\u52A0\u62C9\u5DF4\u54E5\u6642\u9593|\u5354\u8ABF\u4E16\u754C\u6642\u9593|\u5357\u55AC\u6CBB\u4E9E\u6A19\u6E96\u6642\u9593|\u5357\u975E\u6A19\u6E96\u6642\u9593|\u5370\u5EA6\u652F\u90A3\u6642\u9593|\u5370\u5EA6\u6A19\u6E96\u6642\u9593|\u5370\u5EA6\u6D0B\u5730\u5340\u6642\u9593|\u5384\u74DC\u591A\u723E\u6642\u9593|\u53E4\u5DF4\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u53E4\u5DF4\u6A19\u6E96\u6642\u9593|\u53EF\u53EF\u65AF\u7FA4\u5CF6\u6642\u9593|\u53F0\u7063\u6A19\u6E96\u6642\u9593|\u5409\u4F2F\u7279\u7FA4\u5CF6\u6642\u9593|\u5410\u9B6F\u74E6\u6642\u9593|\u54E5\u502B\u6BD4\u4E9E\u6642\u9593|\u55AC\u6CBB\u4E9E\u6642\u9593|\u571F\u5EAB\u66FC\u6642\u9593|\u5854\u5409\u514B\u6642\u9593|\u585E\u5E2D\u723E\u7FA4\u5CF6\u6642\u9593|\u590F\u5A01\u5937\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u590F\u5A01\u5937\u6A19\u6E96\u6642\u9593|\u5915\u6B50\u74E6\\s*+\\(Syowa\\)\\s*+\u6642\u9593|\u5927\u6EAA\u5730\u5CF6\u6642\u9593|\u5927\u897F\u6D0B\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u5927\u897F\u6D0B\u6A19\u6E96\u6642\u9593|\u592A\u5E73\u6D0B\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u592A\u5E73\u6D0B\u6A19\u6E96\u6642\u9593|\u59D4\u5167\u745E\u62C9\u6642\u9593|\u5A01\u514B\u6642\u9593|\u5B5F\u52A0\u62C9\u6642\u9593|\u5C3C\u6CCA\u723E\u6642\u9593|\u5C71\u5340\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u5C71\u5340\u6A19\u6E96\u6642\u9593|\u5DE7\u5DF4\u5C71\\s*+\\(Choibalsan\\)\\s*+\u6642\u9593|\u5DF4\u57FA\u65AF\u5766\u6642\u9593|\u5DF4\u5E03\u4E9E\u65B0\u5E7E\u5167\u4E9E\u6642\u9593|\u5DF4\u62C9\u572D\u590F\u4EE4\u6642\u9593|\u5DF4\u62C9\u572D\u6642\u9593|\u5DF4\u897F\u5229\u4E9E\u6642\u9593|\u5E1B\u7409\u6642\u9593|\u5EAB\u502B\u6642\u9593|\u5EAB\u514B\u7FA4\u5CF6\u6642\u9593|\u5EAB\u9801\u5CF6\u6642\u9593|\u5FA9\u6D3B\u5CF6\u590F\u4EE4\u6642\u9593|\u5FA9\u6D3B\u5CF6\u6642\u9593|\u611B\u723E\u862D\u590F\u4EE4\u6642\u9593|\u6240\u7F85\u9580\u7FA4\u5CF6\u6642\u9593|\u6258\u514B\u52DE\u7FA4\u5CF6\u6642\u9593|\u6469\u91CC\u897F\u65AF\u6642\u9593|\u6590\u6FDF\u590F\u4EE4\u6642\u9593|\u6590\u6FDF\u6642\u9593|\u65B0\u52A0\u52D2\u591A\u5C3C\u4E9E\u6642\u9593|\u65B0\u52A0\u5761\u6642\u9593|\u65E5\u672C\u6A19\u6E96\u6642\u9593|\u667A\u5229\u590F\u4EE4\u6642\u9593|\u667A\u5229\u6642\u9593|\u6771\u52A0\u6642\u9593|\u6771\u5370\u5EA6\u5C3C\u897F\u4E9E\u6642\u9593|\u6771\u5E1D\u6C76\u6642\u9593|\u6771\u65B9\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u6771\u65B9\u6A19\u6E96\u6642\u9593|\u6771\u683C\u6797\u5CF6\u590F\u4EE4\u6642\u9593|\u6771\u683C\u6797\u5CF6\u6642\u9593|\u6771\u6B50\u590F\u4EE4\u6642\u9593|\u6771\u6B50\u6642\u9593|\u6771\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u5854\u65AF\u6885\u5C3C\u4E9E\u5CF6\\)|\u6771\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u65B0\u5357\u5A01\u723E\u65AF\\)|\u6771\u90E8\u590F\u4EE4\u6642\u9593\\s*+\\(\u7DAD\u591A\u5229\u4E9E\u90A6\\)|\u6771\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u5854\u65AF\u6885\u5C3C\u4E9E\u5CF6\\)|\u6771\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u65B0\u5357\u5A01\u723E\u65AF\\)|\u6771\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6606\u58EB\u862D\\)|\u6771\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u7DAD\u591A\u5229\u4E9E\u90A6\\)|\u6771\u975E\u6642\u9593|\u67E5\u5766\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u67E5\u5766\u6A19\u6E96\u6642\u9593|\u67E5\u83AB\u6D1B\u6A19\u6E96\u6642\u9593|\u683C\u6797\u5A01\u6CBB\u5E73\u5747\u6642\u9593|\u683C\u6797\u5A01\u6CBB\u6642\u9593|\u695A\u514B\u6642\u9593|\u6B50\u4F5B\u6642\u9593|\u6B50\u59C6\u65AF\u514B\\s*+\\(Omsk\\)\\s*+\u6642\u9593|\u6C76\u840A\u6642\u9593|\u6C99\u99AC\u62C9\u6642\u9593|\u6CD5\u570B\u5357\u534A\u7403\u53CA\u5357\u6975\u5C6C\u5730\u6642\u9593|\u6CD5\u5C6C\u572D\u4E9E\u90A3\u6642\u9593|\u6CE2\u65AF\u7063\u6A19\u6E96\u6642\u9593|\u6CE2\u7D0D\u4F69\u6642\u9593|\u6D77\u53C3\u5D34\u6642\u9593|\u70CF\u62C9\u572D\u6642\u9593|\u70CF\u65AF\u5167\u62C9\\s*+\\(Ust-Nera\\)\\s*+\u6642\u9593|\u70CF\u8332\u5225\u514B\u65AF\u5766\u6642\u9593|\u73BB\u5229\u7DAD\u4E9E\u6642\u9593|\u74E6\u5229\u65AF\u53CA\u798F\u675C\u7D0D\u7FA4\u5CF6\u6642\u9593|\u74E6\u5974\u963F\u5716\u6642\u9593|\u7518\u6BD4\u723E\u6642\u9593|\u7559\u5C3C\u65FA\u5CF6\u6642\u9593|\u76AE\u57C3\u723E\u5CF6\u53CA\u5BC6\u514B\u9686\u5CF6\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u76AE\u57C3\u723E\u5CF6\u53CA\u5BC6\u514B\u9686\u5CF6\u6A19\u6E96\u6642\u9593|\u76AE\u7279\u5EB7\u6A19\u6E96\u6642\u9593|\u7955\u9B6F\u6642\u9593|\u798F\u514B\u862D\u7FA4\u5CF6\u6642\u9593|\u7D10\u5A01\u5CF6\u6642\u9593|\u7D10\u82AC\u862D\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u7D10\u82AC\u862D\u6A19\u6E96\u6642\u9593|\u7D10\u897F\u862D\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u7D10\u897F\u862D\u6A19\u6E96\u6642\u9593|\u7DEC\u7538\u6642\u9593|\u7F85\u897F\u62C9\u6642\u9593|\u8056\u8A95\u5CF6\u6642\u9593|\u81FA\u7DAD\u65AF\u6642\u9593|\u82F1\u570B\u590F\u4EE4\u6642\u9593|\u83AB\u65AF\u79D1\u6A19\u6E96\u6642\u9593|\u83AB\u68EE\u6642\u9593|\u83F2\u5C3C\u514B\u65AF\u7FA4\u5CF6\u6642\u9593|\u84CB\u4E9E\u90A3\u6642\u9593|\u85A9\u6469\u4E9E\u6A19\u6E96\u6642\u9593|\u8607\u5229\u5357\u6642\u9593|\u897F\u5370\u5C3C\u6642\u9593|\u897F\u683C\u6797\u862D\u5CF6\u590F\u4EE4\u6642\u9593|\u897F\u683C\u6797\u862D\u5CF6\u6642\u9593|\u897F\u6B50\u590F\u4EE4\u6642\u9593|\u897F\u6B50\u6642\u9593|\u897F\u85A9\u6469\u4E9E\u590F\u4EE4\u6642\u9593|\u897F\u85A9\u6469\u4E9E\u6642\u9593|\u897F\u90E8\u6A19\u6E96\u6642\u9593\\s*+\\(\u6FB3\u5927\u5229\u4E9E\\)|\u897F\u975E\u6642\u9593|\u8AFE\u798F\u514B\u590F\u4EE4\u6642\u9593|\u8AFE\u798F\u514B\u6642\u9593|\u8AFE\u9B6F\u6642\u9593|\u8C6A\u52F3\u7235\u5CF6\u590F\u4EE4\u6642\u9593|\u8C6A\u52F3\u7235\u5CF6\u6A19\u6E96\u6642\u9593|\u8CBB\u723E\u5357\u591A-\u8FEA\u8AFE\u7F85\u5C3C\u4E9E\u6642\u9593|\u8FE6\u7D0D\u5E73\u5747\u6642\u9593|\u963F\u5BCC\u6C57\u6642\u9593|\u963F\u62C9\u4F2F\u6A19\u6E96\u6642\u9593|\u963F\u62C9\u65AF\u52A0\u65E5\u5149\u7BC0\u7D04\u6642\u9593|\u963F\u62C9\u65AF\u52A0\u6A19\u6E96\u6642\u9593|\u963F\u6839\u5EF7\u6642\u9593|\u963F\u90A3\u5E95\u6CB3\u6642\u9593|\u97D3\u570B\u6A19\u6E96\u6642\u9593|\u9999\u6E2F\u6642\u9593|\u99AC\u4F86\u897F\u4E9E\u6642\u9593|\u99AC\u514B\u85A9\u65AF\u6642\u9593|\u99AC\u723E\u5730\u592B\u6642\u9593|\u99AC\u7D39\u723E\u7FA4\u5CF6\u6642\u9593|\u9EA5\u5938\u5229\u5CF6\u590F\u4EE4\u6642\u9593|\u9EA5\u5938\u5229\u5CF6\u6642\u9593)\\(
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("4y#n'i`f$ p9`p", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("4y#n'i`f$ p9`p", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "}#%3";
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser("}#%3", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("}#%3", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertNotNull(parsePosition0);
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      parsePosition0.setIndex((-1));
      assertEquals((-1), parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=-1,errorIndex=-1]", parsePosition0.toString());
      
      parsePosition0.setIndex(0);
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      
      parsePosition0.setIndex(0);
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      ZoneRules zoneRules0 = zoneId0.getRules();
      assertNotNull(zoneRules0);
      
      ZoneId zoneId1 = ZoneId.systemDefault();
      assertTrue(zoneId1.equals((Object)zoneId0));
      assertNotNull(zoneId1);
      assertNotSame(zoneId1, zoneId0);
      
      Object object0 = fastDateParser0.parseObject("}#%3", parsePosition0);
      assertTrue(zoneId0.equals((Object)zoneId1));
      assertNotNull(object0);
      assertNotSame(zoneId0, zoneId1);
      assertSame(locale0, locale1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("}#%3", fastDateParser0.getPattern());
      assertEquals("java.text.ParsePosition[index=4,errorIndex=-1]", parsePosition0.toString());
      assertEquals(4, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      
      timeZone0.setID("");
      assertTrue(zoneId0.equals((Object)zoneId1));
      assertNotSame(zoneId0, zoneId1);
      assertEquals("", timeZone0.getID());
      
      String string1 = fastDateParser0.toString();
      assertTrue(zoneId0.equals((Object)zoneId1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("FastDateParser[}#%3,zh_CN,]", string1);
      assertNotSame(zoneId0, zoneId1);
      assertSame(locale0, locale1);
      assertEquals("", timeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("}#%3", fastDateParser0.getPattern());
      
      Locale locale2 = fastDateParser0.getLocale();
      assertTrue(zoneId0.equals((Object)zoneId1));
      assertNotNull(locale2);
      assertNotSame(zoneId0, zoneId1);
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertEquals("", timeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("}#%3", fastDateParser0.getPattern());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("CN", locale2.getCountry());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("CHN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("zh_CN", locale2.toString());
      
      int int0 = fastDateParser0.adjustYear(0);
      assertTrue(zoneId0.equals((Object)zoneId1));
      assertEquals(2000, int0);
      assertNotSame(zoneId0, zoneId1);
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertEquals("", timeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("}#%3", fastDateParser0.getPattern());
      
      Locale locale3 = fastDateParser0.getLocale();
      assertTrue(zoneId0.equals((Object)zoneId1));
      assertNotNull(locale3);
      assertSame(locale3, locale1);
      assertSame(locale3, locale2);
      assertSame(locale3, locale0);
      assertNotSame(zoneId0, zoneId1);
      assertSame(locale0, locale3);
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("CHN", locale3.getISO3Country());
      assertEquals("zh_CN", locale3.toString());
      assertEquals("zh", locale3.getLanguage());
      assertEquals("CN", locale3.getCountry());
      assertEquals("", locale3.getVariant());
      assertEquals("", timeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("}#%3", fastDateParser0.getPattern());
      
      try { 
        fastDateParser0.parseObject("FastDateParser[}#%3,zh_CN,]");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"FastDateParser[}#%3,zh_CN,]\" does not match \\}#%3
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = Locale.forLanguageTag("5F3zF#&-p|H}BZOs.");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      
      Locale locale2 = Locale.ENGLISH;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getCountry());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.toString());
      
      Locale locale3 = Locale.FRENCH;
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertNotNull(locale3);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertEquals("", locale3.getISO3Country());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("fr", locale3.toString());
      assertEquals("", locale3.getCountry());
      
      Locale locale4 = (Locale)locale3.clone();
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale4.equals((Object)locale0));
      assertFalse(locale4.equals((Object)locale1));
      assertFalse(locale4.equals((Object)locale2));
      assertTrue(locale4.equals((Object)locale3));
      assertNotNull(locale4);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale4);
      assertNotSame(locale3, locale1);
      assertNotSame(locale4, locale0);
      assertNotSame(locale4, locale1);
      assertNotSame(locale4, locale2);
      assertNotSame(locale4, locale3);
      assertEquals("", locale3.getISO3Country());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("fr", locale3.toString());
      assertEquals("", locale3.getCountry());
      assertEquals("fr", locale4.getLanguage());
      assertEquals("", locale4.getCountry());
      assertEquals("fra", locale4.getISO3Language());
      assertEquals("fr", locale4.toString());
      assertEquals("", locale4.getVariant());
      assertEquals("", locale4.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser("5F3zF#&-p|H}BZOs.", timeZone0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale3));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale4));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("5F3zF#&-p|H}BZOs.", fastDateParser0.getPattern());
      
      String string0 = locale1.toLanguageTag();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale3));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale4));
      assertNotNull(string0);
      assertEquals("und", string0);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale3);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale4);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(string0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Locale locale5 = Locale.TAIWAN;
      assertFalse(locale5.equals((Object)locale2));
      assertFalse(locale5.equals((Object)locale3));
      assertFalse(locale5.equals((Object)locale0));
      assertFalse(locale5.equals((Object)locale4));
      assertFalse(locale5.equals((Object)locale1));
      assertNotNull(locale5);
      assertNotSame(locale5, locale2);
      assertNotSame(locale5, locale3);
      assertNotSame(locale5, locale0);
      assertNotSame(locale5, locale4);
      assertNotSame(locale5, locale1);
      assertEquals("TWN", locale5.getISO3Country());
      assertEquals("zho", locale5.getISO3Language());
      assertEquals("TW", locale5.getCountry());
      assertEquals("zh_TW", locale5.toString());
      assertEquals("", locale5.getVariant());
      assertEquals("zh", locale5.getLanguage());
      
      FastDateParser fastDateParser1 = new FastDateParser(".", timeZone0, locale0);
      assertFalse(locale0.equals((Object)locale5));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale4));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(".", fastDateParser1.getPattern());
      
      FastDateParser fastDateParser2 = new FastDateParser("+}$&sBs6/2^xpB1k/", timeZone0, locale0);
      assertFalse(locale0.equals((Object)locale5));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale4));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(fastDateParser2.equals((Object)fastDateParser0));
      assertFalse(fastDateParser2.equals((Object)fastDateParser1));
      assertNotNull(fastDateParser2);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("+}$&sBs6/2^xpB1k/", fastDateParser2.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(2884);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=2884,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2884, parsePosition0.getIndex());
      
      // Undeclared exception!
      try { 
        fastDateParser2.parseObject("und", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser(":w.mPRCGb~L&{=ada", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(":w.mPRCGb~L&{=ada", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      
      Locale locale1 = Locale.FRENCH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser("@9~#lw\"oz1RE_h}B", timeZone0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("@9~#lw\"oz1RE_h}B", fastDateParser0.getPattern());
      
      int int0 = fastDateParser0.adjustYear(37);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals(1937, int0);
      assertNotSame(locale1, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("@9~#lw\"oz1RE_h}B", fastDateParser0.getPattern());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(set0);
      assertFalse(set0.contains("@9~#lw\"oz1RE_h}B"));
      assertNotSame(locale0, locale1);
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      
      Locale locale2 = Locale.ENGLISH;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("en", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      
      Locale locale3 = Locale.FRENCH;
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertNotNull(locale3);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertEquals("", locale3.getVariant());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("fr", locale3.toString());
      assertEquals("", locale3.getCountry());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("", locale3.getISO3Country());
      
      Locale locale4 = (Locale)locale3.clone();
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale4.equals((Object)locale2));
      assertTrue(locale4.equals((Object)locale3));
      assertFalse(locale4.equals((Object)locale0));
      assertFalse(locale4.equals((Object)locale1));
      assertNotNull(locale4);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale4);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertNotSame(locale4, locale2);
      assertNotSame(locale4, locale0);
      assertNotSame(locale4, locale3);
      assertNotSame(locale4, locale1);
      assertEquals("", locale3.getVariant());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("fr", locale3.toString());
      assertEquals("", locale3.getCountry());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("", locale3.getISO3Country());
      assertEquals("", locale4.getVariant());
      assertEquals("fra", locale4.getISO3Language());
      assertEquals("fr", locale4.toString());
      assertEquals("", locale4.getCountry());
      assertEquals("fr", locale4.getLanguage());
      assertEquals("", locale4.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser("5F3zF#&-p|H}BZOs.", timeZone0, locale1);
      assertFalse(locale0.equals((Object)locale4));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale1.equals((Object)locale4));
      assertFalse(locale1.equals((Object)locale3));
      assertFalse(locale1.equals((Object)locale2));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("5F3zF#&-p|H}BZOs.", fastDateParser0.getPattern());
      
      String string0 = locale1.toLanguageTag();
      assertFalse(locale0.equals((Object)locale4));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale1.equals((Object)locale4));
      assertFalse(locale1.equals((Object)locale3));
      assertFalse(locale1.equals((Object)locale2));
      assertNotNull(string0);
      assertEquals("it", string0);
      assertNotSame(locale0, locale4);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale3);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale4);
      assertNotSame(locale1, locale3);
      assertNotSame(locale1, locale2);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("5F3zF#&-p|H}BZOs."));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertNotNull(linkedHashSet1);
      assertFalse(linkedHashSet1.contains("5F3zF#&-p|H}BZOs."));
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      
      Locale locale5 = Locale.TAIWAN;
      assertFalse(locale5.equals((Object)locale4));
      assertFalse(locale5.equals((Object)locale3));
      assertFalse(locale5.equals((Object)locale0));
      assertFalse(locale5.equals((Object)locale1));
      assertFalse(locale5.equals((Object)locale2));
      assertNotNull(locale5);
      assertNotSame(locale5, locale4);
      assertNotSame(locale5, locale3);
      assertNotSame(locale5, locale0);
      assertNotSame(locale5, locale1);
      assertNotSame(locale5, locale2);
      assertEquals("TWN", locale5.getISO3Country());
      assertEquals("", locale5.getVariant());
      assertEquals("zh", locale5.getLanguage());
      assertEquals("zho", locale5.getISO3Language());
      assertEquals("TW", locale5.getCountry());
      assertEquals("zh_TW", locale5.toString());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale3);
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertTrue(locale3.equals((Object)locale4));
      assertFalse(locale3.equals((Object)locale5));
      assertFalse(locale3.equals((Object)locale1));
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale4);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale5);
      assertNotSame(locale3, locale1);
      assertEquals("", locale3.getVariant());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("fr", locale3.toString());
      assertEquals("", locale3.getCountry());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("", locale3.getISO3Country());
      
      FastDateParser fastDateParser1 = new FastDateParser("5F3zF#&-p|H}BZOs.", timeZone0, locale5);
      assertFalse(locale5.equals((Object)locale4));
      assertFalse(locale5.equals((Object)locale3));
      assertFalse(locale5.equals((Object)locale0));
      assertFalse(locale5.equals((Object)locale1));
      assertFalse(locale5.equals((Object)locale2));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("TWN", locale5.getISO3Country());
      assertEquals("", locale5.getVariant());
      assertEquals("zh", locale5.getLanguage());
      assertEquals("zho", locale5.getISO3Language());
      assertEquals("TW", locale5.getCountry());
      assertEquals("zh_TW", locale5.toString());
      assertEquals("5F3zF#&-p|H}BZOs.", fastDateParser1.getPattern());
      
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(locale0.equals((Object)locale4));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale5));
      assertFalse(locale1.equals((Object)locale4));
      assertFalse(locale1.equals((Object)locale5));
      assertFalse(locale1.equals((Object)locale3));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertFalse(locale5.equals((Object)locale4));
      assertFalse(locale5.equals((Object)locale3));
      assertFalse(locale5.equals((Object)locale0));
      assertFalse(locale5.equals((Object)locale1));
      assertFalse(locale5.equals((Object)locale2));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(boolean0);
      assertNotSame(locale0, locale4);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale3);
      assertNotSame(locale0, locale5);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale4);
      assertNotSame(locale1, locale5);
      assertNotSame(locale1, locale3);
      assertNotSame(locale1, locale2);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertNotSame(locale5, locale4);
      assertNotSame(locale5, locale3);
      assertNotSame(locale5, locale0);
      assertNotSame(locale5, locale1);
      assertNotSame(locale5, locale2);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("5F3zF#&-p|H}BZOs.", fastDateParser0.getPattern());
      assertEquals("TWN", locale5.getISO3Country());
      assertEquals("", locale5.getVariant());
      assertEquals("zh", locale5.getLanguage());
      assertEquals("zho", locale5.getISO3Language());
      assertEquals("TW", locale5.getCountry());
      assertEquals("zh_TW", locale5.toString());
      assertEquals("5F3zF#&-p|H}BZOs.", fastDateParser1.getPattern());
      
      try { 
        fastDateParser0.parse("it");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"it\" does not match 5(\\p{IsNd}{1}+)3(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville\\s*+Standard\\s*+Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay\\s*+Standard\\s*+Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|Ora\\s*+del\\s*+Bangladesh|Ora\\s*+del\\s*+Bhutan|Ora\\s*+del\\s*+Brasile|Ora\\s*+del\\s*+Brunei|Ora\\s*+del\\s*+Cile|Ora\\s*+del\\s*+Kirghizistan|Ora\\s*+del\\s*+Nepal|Ora\\s*+del\\s*+Pakistan|Ora\\s*+del\\s*+Paraguay|Ora\\s*+del\\s*+Per\u00F9|Ora\\s*+del\\s*+Tagikistan|Ora\\s*+del\\s*+Terr\\.\\s*+Britannico\\s*+dell'Oceano\\s*+Indiano|Ora\\s*+del\\s*+Turkmenistan|Ora\\s*+del\\s*+Venezuela|Ora\\s*+dell'Afghanistan|Ora\\s*+dell'Africa\\s*+centrale|Ora\\s*+dell'Africa\\s*+occidentale|Ora\\s*+dell'Africa\\s*+orientale|Ora\\s*+dell'Argentina|Ora\\s*+dell'Armenia|Ora\\s*+dell'Azerbaigian|Ora\\s*+dell'Ecuador|Ora\\s*+dell'Europa\\s*+centrale|Ora\\s*+dell'Europa\\s*+occidentale|Ora\\s*+dell'Europa\\s*+orientale|Ora\\s*+dell'Indocina|Ora\\s*+dell'Indonesia\\s*+centrale|Ora\\s*+dell'Indonesia\\s*+occidentale|Ora\\s*+dell'Indonesia\\s*+orientale|Ora\\s*+dell'Isola\\s*+Christmas|Ora\\s*+dell'Isola\\s*+della\\s*+Fenice|Ora\\s*+dell'Isola\\s*+di\\s*+Pasqua|Ora\\s*+dell'Isola\\s*+Macquarie|Ora\\s*+dell'Uruguay|Ora\\s*+dell'Uzbekistan|Ora\\s*+della\\s*+Birmania/Myanmar|Ora\\s*+della\\s*+Bolivia|Ora\\s*+della\\s*+Colombia|Ora\\s*+della\\s*+Georgia|Ora\\s*+della\\s*+Groenlandia\\s*+occidentale|Ora\\s*+della\\s*+Groenlandia\\s*+orientale|Ora\\s*+della\\s*+Guyana|Ora\\s*+della\\s*+Guyana\\s*+Francese|Ora\\s*+della\\s*+Malaysia|Ora\\s*+della\\s*+Nuova\\s*+Caledonia|Ora\\s*+delle\\s*+Azzorre|Ora\\s*+delle\\s*+Falkland|Ora\\s*+delle\\s*+Galapagos|Ora\\s*+delle\\s*+Isole\\s*+Cocos|Ora\\s*+delle\\s*+Isole\\s*+Cook|Ora\\s*+delle\\s*+Isole\\s*+Gilbert|Ora\\s*+delle\\s*+Isole\\s*+Marchesi|Ora\\s*+delle\\s*+Isole\\s*+Marshall|Ora\\s*+delle\\s*+Isole\\s*+Salomone|Ora\\s*+delle\\s*+Line\\s*+Islands|Ora\\s*+delle\\s*+Maldive|Ora\\s*+delle\\s*+Seychelles|Ora\\s*+delle\\s*+Terre\\s*+Australi\\s*+e\\s*+Antartiche\\s*+Francesi|Ora\\s*+di\\s*+Acre|Ora\\s*+di\\s*+Alma-Ata|Ora\\s*+di\\s*+Anadyr|Ora\\s*+di\\s*+Aqtau|Ora\\s*+di\\s*+Aqtobe|Ora\\s*+di\\s*+Capo\\s*+Verde|Ora\\s*+di\\s*+Chatham\\s*+standard|Ora\\s*+di\\s*+Choibalsan|Ora\\s*+di\\s*+Chuuk|Ora\\s*+di\\s*+Davis|Ora\\s*+di\\s*+Dumont-d'Urville|Ora\\s*+di\\s*+Ekaterinburg|Ora\\s*+di\\s*+Fernando\\s*+de\\s*+Noronha|Ora\\s*+di\\s*+Figi|Ora\\s*+di\\s*+Gambier|Ora\\s*+di\\s*+Hong\\s*+Kong|Ora\\s*+di\\s*+Hovd|Ora\\s*+di\\s*+Irkutsk|Ora\\s*+di\\s*+Jakutsk|Ora\\s*+di\\s*+Kosrae|Ora\\s*+di\\s*+Krasnojarsk|Ora\\s*+di\\s*+Magadan|Ora\\s*+di\\s*+Mauritius|Ora\\s*+di\\s*+Mawson|Ora\\s*+di\\s*+Nauru|Ora\\s*+di\\s*+Niue|Ora\\s*+di\\s*+Norfolk|Ora\\s*+di\\s*+Novosibirsk|Ora\\s*+di\\s*+Omsk|Ora\\s*+di\\s*+Oral|Ora\\s*+di\\s*+Palau|Ora\\s*+di\\s*+Papua\\s*+Nuova\\s*+Guinea|Ora\\s*+di\\s*+Petropavlovsk-Kamchatski|Ora\\s*+di\\s*+Pohnpei|Ora\\s*+di\\s*+Qyzylorda|Ora\\s*+di\\s*+Reunion|Ora\\s*+di\\s*+Rothera|Ora\\s*+di\\s*+Sakhalin|Ora\\s*+di\\s*+Samara|Ora\\s*+di\\s*+Samoa|Ora\\s*+di\\s*+Singapore|Ora\\s*+di\\s*+Suriname|Ora\\s*+di\\s*+Syowa|Ora\\s*+di\\s*+Tahiti|Ora\\s*+di\\s*+Timor\\s*+Leste|Ora\\s*+di\\s*+Tokelau|Ora\\s*+di\\s*+Tonga|Ora\\s*+di\\s*+Tuvalu|Ora\\s*+di\\s*+Ulaanbaatar|Ora\\s*+di\\s*+Ust-Nera|Ora\\s*+di\\s*+Vanuatu|Ora\\s*+di\\s*+Vladivostok|Ora\\s*+di\\s*+Vostok|Ora\\s*+di\\s*+Wake|Ora\\s*+di\\s*+Wallis\\s*+e\\s*+Futuna|Ora\\s*+estiva\\s*+britannica|Ora\\s*+estiva\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud\\)|Ora\\s*+estiva\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud/Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+estiva\\s*+del\\s*+Cile|Ora\\s*+estiva\\s*+del\\s*+Paraguay|Ora\\s*+estiva\\s*+dell'Australia\\s*+orientale\\s*+\\(Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+estiva\\s*+dell'Europa\\s*+centrale|Ora\\s*+estiva\\s*+dell'Europa\\s*+occidentale|Ora\\s*+estiva\\s*+dell'Europa\\s*+orientale|Ora\\s*+estiva\\s*+dell'Isola\\s*+di\\s*+Pasqua|Ora\\s*+estiva\\s*+dell'Isola\\s*+Macquarie|Ora\\s*+estiva\\s*+della\\s*+Groenlandia\\s*+occidentale|Ora\\s*+estiva\\s*+della\\s*+Groenlandia\\s*+orientale|Ora\\s*+estiva\\s*+delle\\s*+Azzorre|Ora\\s*+estiva\\s*+di\\s*+Figi|Ora\\s*+estiva\\s*+di\\s*+Lord\\s*+Howe|Ora\\s*+estiva\\s*+di\\s*+Norfolk|Ora\\s*+estiva\\s*+di\\s*+Samoa|Ora\\s*+estiva\\s*+irlandese|Ora\\s*+estiva\\s*+orientale\\s*+\\(Tasmania\\)|Ora\\s*+estiva\\s*+orientale\\s*+\\(Victoria\\)|Ora\\s*+legale\\s*+Cuba|Ora\\s*+legale\\s*+dell'Alaska|Ora\\s*+legale\\s*+dell'Atlantico\\s*+occidentale|Ora\\s*+legale\\s*+della\\s*+costa\\s*+occidentale\\s*+USA|Ora\\s*+legale\\s*+della\\s*+Nuova\\s*+Zelanda|Ora\\s*+legale\\s*+delle\\s*+Isole\\s*+Hawaii|Ora\\s*+legale\\s*+di\\s*+Chatham|Ora\\s*+legale\\s*+di\\s*+Israele|Ora\\s*+legale\\s*+di\\s*+Saint-Pierre\\s*+e\\s*+Miquelon|Ora\\s*+legale\\s*+di\\s*+Terranova|Ora\\s*+legale\\s*+Iran|Ora\\s*+legale\\s*+USA\\s*+centrale|Ora\\s*+legale\\s*+USA\\s*+occidentale|Ora\\s*+legale\\s*+USA\\s*+orientale|Ora\\s*+media\\s*+del\\s*+Ghana|Ora\\s*+media\\s*+di\\s*+Greenwich|Ora\\s*+solare\\s*+Cuba|Ora\\s*+solare\\s*+del\\s*+Giappone|Ora\\s*+solare\\s*+del\\s*+golfo|Ora\\s*+solare\\s*+del\\s*+Sudafrica|Ora\\s*+solare\\s*+dell'Alaska|Ora\\s*+solare\\s*+dell'Amazzonia|Ora\\s*+solare\\s*+dell'Arabia|Ora\\s*+solare\\s*+dell'Atlantico\\s*+occidentale|Ora\\s*+solare\\s*+dell'India|Ora\\s*+solare\\s*+della\\s*+Cina|Ora\\s*+solare\\s*+della\\s*+Corea|Ora\\s*+solare\\s*+della\\s*+costa\\s*+occidentale\\s*+USA|Ora\\s*+solare\\s*+della\\s*+Georgia\\s*+Australe|Ora\\s*+solare\\s*+della\\s*+Nuova\\s*+Zelanda|Ora\\s*+solare\\s*+delle\\s*+Isole\\s*+Hawaii|Ora\\s*+solare\\s*+di\\s*+Saint-Pierre\\s*+e\\s*+Miquelon|Ora\\s*+solare\\s*+di\\s*+Terranova|Ora\\s*+solare\\s*+Iran|Ora\\s*+solare\\s*+USA\\s*+centrale|Ora\\s*+solare\\s*+USA\\s*+occidentale|Ora\\s*+solare\\s*+USA\\s*+orientale|Ora\\s*+standard\\s*+Australia\\s*+centro-occidentale|Ora\\s*+standard\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud\\)|Ora\\s*+standard\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud/Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+standard\\s*+centrale\\s*+\\(Territori\\s*+del\\s*+Nord\\)|Ora\\s*+standard\\s*+dell'Australia\\s*+occidentale|Ora\\s*+standard\\s*+dell'Australia\\s*+orientale\\s*+\\(Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+standard\\s*+di\\s*+Chamorro|Ora\\s*+standard\\s*+di\\s*+Israele|Ora\\s*+standard\\s*+di\\s*+Lord\\s*+Howe|Ora\\s*+standard\\s*+di\\s*+Mosca|Ora\\s*+standard\\s*+di\\s*+Pitcairn|Ora\\s*+standard\\s*+di\\s*+Samoa|Ora\\s*+standard\\s*+orientale\\s*+\\(Queensland\\)|Ora\\s*+standard\\s*+orientale\\s*+\\(Tasmania\\)|Ora\\s*+standard\\s*+orientale\\s*+\\(Victoria\\)|ORAT|PDT|PET|PETT|PGT|Philippines\\s*+Standard\\s*+Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk\\s*+Time|SRET|SRT|SST|SYOT|TAHT|Tempo\\s*+universale\\s*+coordinato|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT)(\\p{IsNd}++)#&-
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("5F3zF#&-p|H}BZOs.", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("5F3zF#&-p|H}BZOs.", fastDateParser0.getPattern());
      
      Locale locale1 = Locale.TAIWAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      
      FastDateParser fastDateParser1 = new FastDateParser("5F3zF#&-p|H}BZOs.", timeZone0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("5F3zF#&-p|H}BZOs.", fastDateParser1.getPattern());
      
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(boolean0);
      assertNotSame(locale0, locale1);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertNotSame(locale1, locale0);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("5F3zF#&-p|H}BZOs.", fastDateParser0.getPattern());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("5F3zF#&-p|H}BZOs.", fastDateParser1.getPattern());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("=2]Z", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JP", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("=2]Z", fastDateParser0.getPattern());
      
      try { 
        fastDateParser0.parse("=2]Z");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"=2]Z\" does not match =2\\](GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville\\s*+Standard\\s*+Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay\\s*+Standard\\s*+Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|ORAT|PDT|PET|PETT|PGT|Philippines\\s*+Standard\\s*+Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk\\s*+Time|SRET|SRT|SST|SYOT|TAHT|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT|\u30A2\u30A4\u30EB\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u30A2\u30AF\u30BF\u30A6\u6642\u9593|\u30A2\u30AF\u30C8\u30D9\u6642\u9593|\u30A2\u30AF\u30EC\u6642\u9593|\u30A2\u30BC\u30EB\u30D0\u30A4\u30B8\u30E3\u30F3\u6642\u9593|\u30A2\u30BE\u30EC\u30B9\u590F\u6642\u9593|\u30A2\u30BE\u30EC\u30B9\u6642\u9593|\u30A2\u30CA\u30C9\u30A5\u30A4\u30EA\u6642\u9593|\u30A2\u30D5\u30AC\u30CB\u30B9\u30BF\u30F3\u6642\u9593|\u30A2\u30DE\u30BE\u30F3\u6642\u9593|\u30A2\u30E9\u30B9\u30AB\u590F\u6642\u9593|\u30A2\u30E9\u30B9\u30AB\u6A19\u6E96\u6642|\u30A2\u30E9\u30D3\u30A2\u6A19\u6E96\u6642|\u30A2\u30EB\u30BC\u30F3\u30C1\u30F3\u6642\u9593|\u30A2\u30EB\u30DE\u30A2\u30BF\u6642\u9593|\u30A2\u30EB\u30E1\u30CB\u30A2\u6642\u9593|\u30A4\u30B9\u30E9\u30A8\u30EB\u590F\u6642\u9593|\u30A4\u30B9\u30E9\u30A8\u30EB\u6A19\u6E96\u6642|\u30A4\u30E9\u30F3\u590F\u6642\u9593|\u30A4\u30E9\u30F3\u6A19\u6E96\u6642|\u30A4\u30EB\u30AF\u30FC\u30C4\u30AF\u6642\u9593|\u30A4\u30F3\u30C9\u30B7\u30CA\u6642\u9593|\u30A4\u30F3\u30C9\u6A19\u6E96\u6642|\u30A4\u30F3\u30C9\u6D0B\u5730\u57DF\u6642\u9593|\u30A4\u30FC\u30B9\u30BF\u30FC\u5CF6\u590F\u6642\u9593|\u30A4\u30FC\u30B9\u30BF\u30FC\u5CF6\u6642\u9593|\u30A6\u30A7\u30FC\u30AF\u6642\u9593|\u30A6\u30B9\u30C1\u30CD\u30E9\u6642\u9593|\u30A6\u30BA\u30D9\u30AD\u30B9\u30BF\u30F3\u6642\u9593|\u30A6\u30E9\u30B8\u30AA\u30B9\u30C8\u30AF\u6642\u9593|\u30A6\u30E9\u30FC\u30F3\u30D0\u30FC\u30C8\u30EB\u6642\u9593|\u30A6\u30EB\u30B0\u30A2\u30A4\u6642\u9593|\u30A8\u30AB\u30C6\u30EA\u30F3\u30D6\u30EB\u30B0\u6642\u9593|\u30A8\u30AF\u30A2\u30C9\u30EB\u6642\u9593|\u30AA\u30E0\u30B9\u30AF\u6642\u9593|\u30AA\u30E9\u30EB\u6642\u9593|\u30AB\u30FC\u30DC\u30D9\u30EB\u30C7\u6642\u9593|\u30AC\u30A4\u30A2\u30CA\u6642\u9593|\u30AC\u30E9\u30D1\u30B4\u30B9\u6642\u9593|\u30AC\u30F3\u30D3\u30A2\u6642\u9593|\u30AC\u30FC\u30CA\u6A19\u6E96\u6642|\u30AD\u30B8\u30EB\u30AA\u30EB\u30C0\u6642\u9593|\u30AD\u30E5\u30FC\u30D0\u590F\u6642\u9593|\u30AD\u30E5\u30FC\u30D0\u6A19\u6E96\u6642|\u30AD\u30EB\u30AE\u30B9\u30BF\u30F3\u6642\u9593|\u30AE\u30EB\u30D0\u30FC\u30C8\u8AF8\u5CF6\u6642\u9593|\u30AF\u30C3\u30AF\u8AF8\u5CF6\u6642\u9593|\u30AF\u30E9\u30B9\u30CE\u30E4\u30EB\u30B9\u30AF\u6642\u9593|\u30AF\u30EA\u30B9\u30DE\u30B9\u8AF8\u5CF6\u6642\u9593|\u30B0\u30A2\u30E0\u6A19\u6E96\u6642|\u30B0\u30EA\u30CB\u30C3\u30B8\u6A19\u6E96\u6642|\u30B0\u30EB\u30B8\u30A2\u6642\u9593|\u30B3\u30B3\u30B9\u8AF8\u5CF6\u6642\u9593|\u30B3\u30B9\u30E9\u30A8\u6642\u9593|\u30B3\u30ED\u30F3\u30D3\u30A2\u6642\u9593|\u30B5\u30DE\u30E9\u6642\u9593|\u30B5\u30E2\u30A2\u6A19\u6E96\u6642|\u30B5\u30F3\u30D4\u30A8\u30FC\u30EB\u30FB\u30DF\u30AF\u30ED\u30F3\u8AF8\u5CF6\u590F\u6642\u9593|\u30B5\u30F3\u30D4\u30A8\u30FC\u30EB\u30FB\u30DF\u30AF\u30ED\u30F3\u8AF8\u5CF6\u6A19\u6E96\u6642|\u30B7\u30F3\u30AC\u30DD\u30FC\u30EB\u6642\u9593|\u30B9\u30EA\u30CA\u30E0\u6642\u9593|\u30BB\u30A4\u30B7\u30A7\u30EB\u6642\u9593|\u30BD\u30ED\u30E2\u30F3\u8AF8\u5CF6\u6642\u9593|\u30BF\u30B8\u30AD\u30B9\u30BF\u30F3\u6642\u9593|\u30BF\u30D2\u30C1\u6642\u9593|\u30C1\u30E3\u30BF\u30E0\u590F\u6642\u9593|\u30C1\u30E3\u30BF\u30E0\u6A19\u6E96\u6642|\u30C1\u30E5\u30FC\u30AF\u6642\u9593|\u30C1\u30E7\u30A4\u30D0\u30EB\u30B5\u30F3\u6642\u9593|\u30C1\u30EA\u590F\u6642\u9593|\u30C1\u30EA\u6642\u9593|\u30C4\u30D0\u30EB\u6642\u9593|\u30C7\u30A4\u30D3\u30B9\u6642\u9593|\u30C7\u30E5\u30E2\u30F3\u30C7\u30E5\u30EB\u30F4\u30A3\u30EB\u6642\u9593|\u30C8\u30B1\u30E9\u30A6\u8AF8\u5CF6\u6642\u9593|\u30C8\u30EB\u30AF\u30E1\u30CB\u30B9\u30BF\u30F3\u6642\u9593|\u30C8\u30F3\u30AC\u6642\u9593|\u30CA\u30A6\u30EB\u6642\u9593|\u30CB\u30A6\u30A8\u5CF6\u6642\u9593|\u30CB\u30E5\u30FC\u30AB\u30EC\u30C9\u30CB\u30A2\u6642\u9593|\u30CB\u30E5\u30FC\u30B8\u30FC\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u30CB\u30E5\u30FC\u30B8\u30FC\u30E9\u30F3\u30C9\u6A19\u6E96\u6642|\u30CB\u30E5\u30FC\u30D5\u30A1\u30F3\u30C9\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u30CB\u30E5\u30FC\u30D5\u30A1\u30F3\u30C9\u30E9\u30F3\u30C9\u6A19\u6E96\u6642|\u30CD\u30D1\u30FC\u30EB\u6642\u9593|\u30CE\u30DC\u30B7\u30D3\u30EB\u30B9\u30AF\u6642\u9593|\u30CE\u30FC\u30D5\u30A9\u30FC\u30AF\u590F\u6642\u9593|\u30CE\u30FC\u30D5\u30A9\u30FC\u30AF\u6642\u9593|\u30CF\u30EF\u30A4\u590F\u6642\u9593|\u30CF\u30EF\u30A4\u6A19\u6E96\u6642|\u30D0\u30CC\u30A2\u30C4\u6642\u9593|\u30D0\u30F3\u30B0\u30E9\u30C7\u30B7\u30E5\u6642\u9593|\u30D1\u30AD\u30B9\u30BF\u30F3\u6642\u9593|\u30D1\u30D7\u30A2\u30CB\u30E5\u30FC\u30AE\u30CB\u30A2\u6642\u9593|\u30D1\u30E9\u30AA\u6642\u9593|\u30D1\u30E9\u30B0\u30A2\u30A4\u590F\u6642\u9593|\u30D1\u30E9\u30B0\u30A2\u30A4\u6642\u9593|\u30D4\u30C8\u30B1\u30EB\u30F3\u5CF6\u6A19\u6E96\u6642|\u30D5\u30A3\u30B8\u30FC\u590F\u6642\u9593|\u30D5\u30A3\u30B8\u30FC\u6642\u9593|\u30D5\u30A7\u30CB\u30C3\u30AF\u30B9\u8AF8\u5CF6\u6642\u9593|\u30D5\u30A7\u30EB\u30CA\u30F3\u30C9\u30FB\u30C7\u30FB\u30CE\u30ED\u30FC\u30CB\u30E3\u6642\u9593|\u30D5\u30A9\u30FC\u30AF\u30E9\u30F3\u30C9\u8AF8\u5CF6\u6642\u9593|\u30D6\u30E9\u30B8\u30EB\u6642\u9593|\u30D6\u30EB\u30CD\u30A4\u6642\u9593|\u30D6\u30FC\u30BF\u30F3\u6642\u9593|\u30D9\u30CD\u30BA\u30A8\u30E9\u6642\u9593|\u30DA\u30C8\u30ED\u30D1\u30D6\u30ED\u30D5\u30B9\u30AF\u30AB\u30E0\u30C1\u30E3\u30C4\u30AD\u30FC\u6642\u9593|\u30DA\u30EB\u30FC\u6642\u9593|\u30DB\u30D6\u30C9\u6642\u9593|\u30DC\u30B9\u30C8\u30FC\u30AF\u57FA\u5730\u6642\u9593|\u30DC\u30EA\u30D3\u30A2\u6642\u9593|\u30DD\u30F3\u30DA\u30A4\u6642\u9593|\u30DE\u30AC\u30C0\u30F3\u6642\u9593|\u30DE\u30C3\u30B3\u30FC\u30EA\u30FC\u5CF6\u590F\u6642\u9593|\u30DE\u30C3\u30B3\u30FC\u30EA\u30FC\u5CF6\u6642\u9593|\u30DE\u30EB\u30B1\u30B5\u30B9\u6642\u9593|\u30DE\u30EC\u30FC\u30B7\u30A2\u6642\u9593|\u30DE\u30FC\u30B7\u30E3\u30EB\u5CF6\u6642\u9593|\u30DF\u30E3\u30F3\u30DE\u30FC\u6642\u9593|\u30E2\u30B9\u30AF\u30EF\u6A19\u6E96\u6642|\u30E2\u30EB\u30B8\u30D6\u6642\u9593|\u30E2\u30FC\u30BD\u30F3\u6642\u9593|\u30E2\u30FC\u30EA\u30B7\u30E3\u30B9\u6642\u9593|\u30E4\u30AF\u30FC\u30C4\u30AF\u6642\u9593|\u30E9\u30A4\u30F3\u8AF8\u5CF6\u6642\u9593|\u30EC\u30E6\u30CB\u30AA\u30F3\u6642\u9593|\u30ED\u30BC\u30E9\u6642\u9593|\u30ED\u30FC\u30C9\u30CF\u30A6\u5CF6\u590F\u6642\u9593|\u30ED\u30FC\u30C9\u30CF\u30A6\u5CF6\u6A19\u6E96\u6642|\u30EF\u30EA\u30B9\u53CA\u3073\u30D5\u30C4\u30CA\u6642\u9593|\u4E2D\u56FD\u6A19\u6E96\u6642|\u4E2D\u592E\u30A4\u30F3\u30C9\u30CD\u30B7\u30A2\u6642\u9593|\u4E2D\u897F\u90E8\u6A19\u6E96\u6642\\(\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2\\)|\u4E2D\u90E8\u30A2\u30D5\u30EA\u30AB\u6642\u9593|\u4E2D\u90E8\u30E8\u30FC\u30ED\u30C3\u30D1\u590F\u6642\u9593|\u4E2D\u90E8\u30E8\u30FC\u30ED\u30C3\u30D1\u6642\u9593|\u4E2D\u90E8\u590F\u6642\u9593|\u4E2D\u90E8\u590F\u6642\u9593\\(\u5357\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2\\)|\u4E2D\u90E8\u590F\u6642\u9593\\(\u5357\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2/\u30CB\u30E5\u30FC\u30B5\u30A6\u30B9\u30A6\u30A7\u30FC\u30EB\u30BA\\)|\u4E2D\u90E8\u6A19\u6E96\u6642|\u4E2D\u90E8\u6A19\u6E96\u6642\\(\u30CE\u30FC\u30B6\u30F3\u30C6\u30EA\u30C8\u30EA\u30FC\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\\(\u5357\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\\(\u5357\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2/\u30CB\u30E5\u30FC\u30B5\u30A6\u30B9\u30A6\u30A7\u30FC\u30EB\u30BA\\)|\u4ECF\u5357\u65B9\u9818\u304A\u3088\u3073\u5357\u6975\u6642\u9593|\u4ECF\u9818\u30AE\u30A2\u30CA\u6642\u9593|\u5354\u5B9A\u4E16\u754C\u6642|\u5357\u30A2\u30D5\u30EA\u30AB\u6A19\u6E96\u6642|\u5357\u30B8\u30E7\u30FC\u30B8\u30A2\u5CF6\u6A19\u6E96\u6642|\u5927\u897F\u6D0B\u590F\u6642\u9593|\u5927\u897F\u6D0B\u6A19\u6E96\u6642|\u592A\u5E73\u6D0B\u590F\u6642\u9593|\u592A\u5E73\u6D0B\u6A19\u6E96\u6642|\u5C71\u5730\u590F\u6642\u9593|\u5C71\u5730\u6A19\u6E96\u6642|\u65E5\u672C\u6A19\u6E96\u6642|\u662D\u548C\u57FA\u5730\u6642\u9593|\u6771\u30A2\u30D5\u30EA\u30AB\u6642\u9593|\u6771\u30A4\u30F3\u30C9\u30CD\u30B7\u30A2\u6642\u9593|\u6771\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u6771\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9\u6642\u9593|\u6771\u30C6\u30A3\u30E2\u30FC\u30EB\u6642\u9593|\u6771\u30E8\u30FC\u30ED\u30C3\u30D1\u590F\u6642\u9593|\u6771\u30E8\u30FC\u30ED\u30C3\u30D1\u6642\u9593|\u6771\u90E8\u590F\u6642\u9593|\u6771\u90E8\u590F\u6642\u9593\\(\u30BF\u30B9\u30DE\u30CB\u30A2\\)|\u6771\u90E8\u590F\u6642\u9593\\(\u30CB\u30E5\u30FC\u30B5\u30A6\u30B9\u30A6\u30A7\u30FC\u30EB\u30BA\\)|\u6771\u90E8\u590F\u6642\u9593\\(\u30D3\u30AF\u30C8\u30EA\u30A2\\)|\u6771\u90E8\u6A19\u6E96\u6642|\u6771\u90E8\u6A19\u6E96\u6642\\(\u30AF\u30A4\u30FC\u30F3\u30BA\u30E9\u30F3\u30C9\\)|\u6771\u90E8\u6A19\u6E96\u6642\\(\u30BF\u30B9\u30DE\u30CB\u30A2\\)|\u6771\u90E8\u6A19\u6E96\u6642\\(\u30CB\u30E5\u30FC\u30B5\u30A6\u30B9\u30A6\u30A7\u30FC\u30EB\u30BA\\)|\u6771\u90E8\u6A19\u6E96\u6642\\(\u30D3\u30AF\u30C8\u30EA\u30A2\\)|\u6A3A\u592A\u6642\u9593|\u6E7E\u5CB8\u6A19\u6E96\u6642|\u82F1\u56FD\u590F\u6642\u9593|\u897F\u30A2\u30D5\u30EA\u30AB\u6642\u9593|\u897F\u30A4\u30F3\u30C9\u30CD\u30B7\u30A2\u6642\u9593|\u897F\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u897F\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9\u6642\u9593|\u897F\u30B5\u30E2\u30A2\u590F\u6642\u9593|\u897F\u30B5\u30E2\u30A2\u6642\u9593|\u897F\u30E8\u30FC\u30ED\u30C3\u30D1\u590F\u6642\u9593|\u897F\u30E8\u30FC\u30ED\u30C3\u30D1\u6642\u9593|\u897F\u90E8\u6A19\u6E96\u6642\\(\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2\\)|\u97D3\u56FD\u6A19\u6E96\u6642|\u9999\u6E2F\u6642\u9593)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Locale locale1 = Locale.ENGLISH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      
      Locale locale2 = Locale.US;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale2.getVariant());
      assertEquals("US", locale2.getCountry());
      assertEquals("en", locale2.getLanguage());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en_US", locale2.toString());
      assertEquals("USA", locale2.getISO3Country());
      
      Locale.setDefault(locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      
      String string0 = locale2.toLanguageTag();
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(string0);
      assertEquals("en-US", string0);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale2.getVariant());
      assertEquals("US", locale2.getCountry());
      assertEquals("en", locale2.getLanguage());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en_US", locale2.toString());
      assertEquals("USA", locale2.getISO3Country());
      
      Set<String> set1 = locale0.getUnicodeLocaleKeys();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertNotNull(set1);
      assertFalse(set1.contains(string0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertSame(set1, set0);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      
      FastDateParser fastDateParser0 = new FastDateParser("?P[rwYZ", timeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("?P[rwYZ", fastDateParser0.getPattern());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(boolean0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      
      ParsePosition parsePosition0 = new ParsePosition((-1969));
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=-1969,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals((-1969), parsePosition0.getIndex());
      
      // Undeclared exception!
      try { 
        fastDateParser0.parse("?P[rwYZ", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale1 = Locale.ENGLISH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("_n(k;kG`m*HPZ", timeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(fastDateParser0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("_n(k;kG`m*HPZ", fastDateParser0.getPattern());
      
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(boolean0);
      assertNotSame(locale0, locale1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("_n(k;kG`m*HPZ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser("_yuQbF_", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("_yuQbF_", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      
      Locale locale2 = Locale.FRENCH;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("", locale2.getISO3Country());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("fr", locale2.toString());
      
      Locale locale3 = (Locale)locale1.clone();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertTrue(locale3.equals((Object)locale1));
      assertNotNull(locale3);
      assertNotSame(locale1, locale3);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale3.getVariant());
      assertEquals("zh", locale3.getLanguage());
      assertEquals("TWN", locale3.getISO3Country());
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("TW", locale3.getCountry());
      assertEquals("zh_TW", locale3.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("1PR@?J$,", timeZone0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale3));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("1PR@?J$,", fastDateParser0.getPattern());
      
      String string0 = locale1.toLanguageTag();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale3));
      assertNotNull(string0);
      assertEquals("zh-TW", string0);
      assertNotSame(locale1, locale3);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(string0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertNotNull(linkedHashSet1);
      assertFalse(linkedHashSet1.contains(string0));
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      
      Locale locale4 = Locale.TAIWAN;
      assertTrue(locale4.equals((Object)locale3));
      assertFalse(locale4.equals((Object)locale0));
      assertFalse(locale4.equals((Object)locale2));
      assertNotNull(locale4);
      assertSame(locale4, locale1);
      assertNotSame(locale4, locale0);
      assertNotSame(locale4, locale2);
      assertNotSame(locale4, locale3);
      assertEquals("TWN", locale4.getISO3Country());
      assertEquals("TW", locale4.getCountry());
      assertEquals("zh_TW", locale4.toString());
      assertEquals("zho", locale4.getISO3Language());
      assertEquals("zh", locale4.getLanguage());
      assertEquals("", locale4.getVariant());
      
      FastDateParser fastDateParser1 = new FastDateParser("GMTPLT", timeZone0, locale0);
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale4));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("GMTPLT", fastDateParser1.getPattern());
      
      String string1 = fastDateParser1.toString();
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale4));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("FastDateParser[GMTPLT,en_US,GMT]", string1);
      assertNotSame(locale0, locale3);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale4);
      assertNotSame(locale0, locale2);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("GMTPLT", fastDateParser1.getPattern());
      
      boolean boolean0 = fastDateParser0.equals(locale2);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale3));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale3));
      assertFalse(locale2.equals((Object)locale4));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertFalse(boolean0);
      assertNotSame(locale1, locale3);
      assertSame(locale1, locale4);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale3);
      assertNotSame(locale2, locale4);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("", locale2.getISO3Country());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("fr", locale2.toString());
      assertEquals("1PR@?J$,", fastDateParser0.getPattern());
      
      try { 
        fastDateParser0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match 1
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("1/]s7", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("1/]s7", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "(\"\"N1:TH)5r");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale1 = Locale.GERMAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertNotNull(parsePosition0);
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      Date date0 = fastDateParser0.parse("(\"\"N1:TH)5r", parsePosition0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(date0);
      assertNotSame(locale0, locale1);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
      assertEquals(3, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      FastDateParser fastDateParser1 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("(\"\"N1:TH)5r", fastDateParser1.getPattern());
      
      SimpleTimeZone simpleTimeZone1 = new SimpleTimeZone(0, "f'=U(EZ?P|");
      assertFalse(simpleTimeZone1.equals((Object)simpleTimeZone0));
      assertNotNull(simpleTimeZone1);
      assertEquals("java.util.SimpleTimeZone[id=f'=U(EZ?P|,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
      assertEquals(0, simpleTimeZone1.getRawOffset());
      assertEquals(0, simpleTimeZone1.getDSTSavings());
      assertFalse(simpleTimeZone1.useDaylightTime());
      assertEquals("f'=U(EZ?P|", simpleTimeZone1.getID());
      
      try { 
        fastDateParser1.parse("SST");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"SST\" does not match \\(\"\"
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale1 = Locale.ENGLISH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser("2 Dj#zQo-)BFd/zsj-", timeZone0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("2 Dj#zQo-)BFd/zsj-", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser("2]Z", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("2]Z", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-267), "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=-267,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-267), simpleTimeZone0.getRawOffset());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=-267,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-267), simpleTimeZone0.getRawOffset());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale1 = Locale.GERMAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertNotNull(parsePosition0);
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      Date date0 = fastDateParser0.parse("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", parsePosition0);
      assertFalse(locale0.equals((Object)locale1));
      assertNull(date0);
      assertNotSame(locale0, locale1);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=-267,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-267), simpleTimeZone0.getRawOffset());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      String string0 = "h9 Qmc/G@..fJ2De";
      FastDateParser fastDateParser1 = new FastDateParser("h9 Qmc/G@..fJ2De", simpleTimeZone0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=-267,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-267), simpleTimeZone0.getRawOffset());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("h9 Qmc/G@..fJ2De", fastDateParser1.getPattern());
      
      SimpleTimeZone simpleTimeZone1 = new SimpleTimeZone(0, "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      assertFalse(simpleTimeZone1.equals((Object)simpleTimeZone0));
      assertNotNull(simpleTimeZone1);
      assertFalse(simpleTimeZone1.useDaylightTime());
      assertEquals(0, simpleTimeZone1.getRawOffset());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone1.getID());
      assertEquals(0, simpleTimeZone1.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
      
      FastDateParser fastDateParser2 = null;
      try {
        fastDateParser2 = new FastDateParser("f'=U(EZ?P|", simpleTimeZone1, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser("9yPE", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("9yPE", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      
      Locale locale2 = Locale.ENGLISH;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("en", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("en", locale2.getLanguage());
      
      Locale locale3 = Locale.FRENCH;
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertNotNull(locale3);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertEquals("fr", locale3.toString());
      assertEquals("", locale3.getVariant());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("", locale3.getCountry());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("", locale3.getISO3Country());
      
      Locale locale4 = (Locale)locale3.clone();
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale4.equals((Object)locale1));
      assertFalse(locale4.equals((Object)locale2));
      assertTrue(locale4.equals((Object)locale3));
      assertFalse(locale4.equals((Object)locale0));
      assertNotNull(locale4);
      assertNotSame(locale3, locale4);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertNotSame(locale4, locale3);
      assertNotSame(locale4, locale1);
      assertNotSame(locale4, locale2);
      assertNotSame(locale4, locale0);
      assertEquals("fr", locale3.toString());
      assertEquals("", locale3.getVariant());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("", locale3.getCountry());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("", locale3.getISO3Country());
      assertEquals("fr", locale4.getLanguage());
      assertEquals("", locale4.getISO3Country());
      assertEquals("", locale4.getCountry());
      assertEquals("", locale4.getVariant());
      assertEquals("fra", locale4.getISO3Language());
      assertEquals("fr", locale4.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("5F3zF#&-p|H}BZOs.", timeZone0, locale1);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale4));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale4));
      assertFalse(locale1.equals((Object)locale3));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("5F3zF#&-p|H}BZOs.", fastDateParser0.getPattern());
      
      String string0 = locale1.toLanguageTag();
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale4));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale4));
      assertFalse(locale1.equals((Object)locale3));
      assertNotNull(string0);
      assertEquals("it", string0);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale3);
      assertNotSame(locale0, locale4);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale4);
      assertNotSame(locale1, locale3);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("5F3zF#&-p|H}BZOs."));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale4));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale4));
      assertFalse(locale1.equals((Object)locale3));
      assertNotNull(set0);
      assertFalse(set0.contains("5F3zF#&-p|H}BZOs."));
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale3);
      assertNotSame(locale0, locale4);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale4);
      assertNotSame(locale1, locale3);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Locale locale5 = Locale.TAIWAN;
      assertFalse(locale5.equals((Object)locale1));
      assertFalse(locale5.equals((Object)locale3));
      assertFalse(locale5.equals((Object)locale4));
      assertFalse(locale5.equals((Object)locale2));
      assertFalse(locale5.equals((Object)locale0));
      assertNotNull(locale5);
      assertNotSame(locale5, locale1);
      assertNotSame(locale5, locale3);
      assertNotSame(locale5, locale4);
      assertNotSame(locale5, locale2);
      assertNotSame(locale5, locale0);
      assertEquals("zho", locale5.getISO3Language());
      assertEquals("TW", locale5.getCountry());
      assertEquals("", locale5.getVariant());
      assertEquals("zh_TW", locale5.toString());
      assertEquals("zh", locale5.getLanguage());
      assertEquals("TWN", locale5.getISO3Country());
      
      FastDateParser fastDateParser1 = new FastDateParser("+}$&sBs6/2^xpB1k/", timeZone0, locale5);
      assertFalse(locale5.equals((Object)locale1));
      assertFalse(locale5.equals((Object)locale3));
      assertFalse(locale5.equals((Object)locale4));
      assertFalse(locale5.equals((Object)locale2));
      assertFalse(locale5.equals((Object)locale0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale5.getISO3Language());
      assertEquals("TW", locale5.getCountry());
      assertEquals("", locale5.getVariant());
      assertEquals("zh_TW", locale5.toString());
      assertEquals("zh", locale5.getLanguage());
      assertEquals("TWN", locale5.getISO3Country());
      assertEquals("+}$&sBs6/2^xpB1k/", fastDateParser1.getPattern());
      
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale5));
      assertFalse(locale0.equals((Object)locale4));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale5));
      assertFalse(locale1.equals((Object)locale4));
      assertFalse(locale1.equals((Object)locale3));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertFalse(locale5.equals((Object)locale1));
      assertFalse(locale5.equals((Object)locale3));
      assertFalse(locale5.equals((Object)locale4));
      assertFalse(locale5.equals((Object)locale2));
      assertFalse(locale5.equals((Object)locale0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(boolean0);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale3);
      assertNotSame(locale0, locale5);
      assertNotSame(locale0, locale4);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale5);
      assertNotSame(locale1, locale4);
      assertNotSame(locale1, locale3);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertNotSame(locale5, locale1);
      assertNotSame(locale5, locale3);
      assertNotSame(locale5, locale4);
      assertNotSame(locale5, locale2);
      assertNotSame(locale5, locale0);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("5F3zF#&-p|H}BZOs.", fastDateParser0.getPattern());
      assertEquals("zho", locale5.getISO3Language());
      assertEquals("TW", locale5.getCountry());
      assertEquals("", locale5.getVariant());
      assertEquals("zh_TW", locale5.toString());
      assertEquals("zh", locale5.getLanguage());
      assertEquals("TWN", locale5.getISO3Country());
      assertEquals("+}$&sBs6/2^xpB1k/", fastDateParser1.getPattern());
      
      Integer integer0 = new Integer(1013);
      assertNotNull(integer0);
      assertEquals(1013, (int)integer0);
      
      boolean boolean1 = fastDateParser1.equals(integer0);
      assertFalse(locale5.equals((Object)locale1));
      assertFalse(locale5.equals((Object)locale3));
      assertFalse(locale5.equals((Object)locale4));
      assertFalse(locale5.equals((Object)locale2));
      assertFalse(locale5.equals((Object)locale0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(locale5, locale1);
      assertNotSame(locale5, locale3);
      assertNotSame(locale5, locale4);
      assertNotSame(locale5, locale2);
      assertNotSame(locale5, locale0);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale5.getISO3Language());
      assertEquals("TW", locale5.getCountry());
      assertEquals("", locale5.getVariant());
      assertEquals("zh_TW", locale5.toString());
      assertEquals("zh", locale5.getLanguage());
      assertEquals("TWN", locale5.getISO3Country());
      assertEquals("+}$&sBs6/2^xpB1k/", fastDateParser1.getPattern());
      
      // Undeclared exception!
      try { 
        fastDateParser1.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("SST", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("SST", fastDateParser0.getPattern());
      
      FastDateParser fastDateParser1 = new FastDateParser("8.A(dT?>u", timeZone0, locale0);
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("8.A(dT?>u", fastDateParser1.getPattern());
      
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(boolean0);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("SST", fastDateParser0.getPattern());
      assertEquals("8.A(dT?>u", fastDateParser1.getPattern());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("5F3zF#&-p|H}BZOs.", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("5F3zF#&-p|H}BZOs.", fastDateParser0.getPattern());
      
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("5F3zF#&-p|H}BZOs.", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("`AR=.", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("`AR=.", fastDateParser0.getPattern());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("`AR=."));
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      FastDateParser fastDateParser1 = new FastDateParser(";'C", timeZone0, locale0);
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(";'C", fastDateParser1.getPattern());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("]M;8k'j*LNQ-I", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("]M;8k'j*LNQ-I", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("5F3zF#&-p|H}BZOs.", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("5F3zF#&-p|H}BZOs.", fastDateParser0.getPattern());
      
      Locale locale1 = Locale.ITALY;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      
      FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "(\"\"N1:TH)5r";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "(\"\"N1:TH)5r");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser(")W%@gdw ", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(")W%@gdw ", fastDateParser0.getPattern());
      
      Locale locale1 = Locale.FRENCH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      
      FastDateParser fastDateParser1 = new FastDateParser(",3m~{rY*2yCN22XC.u", simpleTimeZone0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals(",3m~{rY*2yCN22XC.u", fastDateParser1.getPattern());
      
      int int0 = fastDateParser0.adjustYear(20);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertEquals(2020, int0);
      assertNotSame(locale0, locale1);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(")W%@gdw ", fastDateParser0.getPattern());
      
      FastDateParser fastDateParser2 = null;
      try {
        fastDateParser2 = new FastDateParser("PST", simpleTimeZone0, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser(",", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals(",", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_US", locale1.toString());
      assertEquals("US", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      
      Locale locale2 = Locale.ENGLISH;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("en", locale2.getLanguage());
      
      Locale locale3 = Locale.FRENCH;
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertNotNull(locale3);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertEquals("fr", locale3.getLanguage());
      assertEquals("", locale3.getISO3Country());
      assertEquals("fr", locale3.toString());
      assertEquals("", locale3.getCountry());
      assertEquals("", locale3.getVariant());
      assertEquals("fra", locale3.getISO3Language());
      
      Locale locale4 = Locale.US;
      assertFalse(locale4.equals((Object)locale2));
      assertFalse(locale4.equals((Object)locale3));
      assertNotNull(locale4);
      assertSame(locale4, locale1);
      assertNotSame(locale4, locale2);
      assertNotSame(locale4, locale3);
      assertSame(locale4, locale0);
      assertEquals("", locale4.getVariant());
      assertEquals("US", locale4.getCountry());
      assertEquals("en_US", locale4.toString());
      assertEquals("eng", locale4.getISO3Language());
      assertEquals("en", locale4.getLanguage());
      assertEquals("USA", locale4.getISO3Country());
      
      Locale locale5 = Locale.FRENCH;
      assertFalse(locale5.equals((Object)locale0));
      assertFalse(locale5.equals((Object)locale4));
      assertFalse(locale5.equals((Object)locale2));
      assertFalse(locale5.equals((Object)locale1));
      assertNotNull(locale5);
      assertNotSame(locale5, locale0);
      assertNotSame(locale5, locale4);
      assertNotSame(locale5, locale2);
      assertNotSame(locale5, locale1);
      assertSame(locale5, locale3);
      assertEquals("", locale5.getCountry());
      assertEquals("fr", locale5.toString());
      assertEquals("", locale5.getVariant());
      assertEquals("", locale5.getISO3Country());
      assertEquals("fr", locale5.getLanguage());
      assertEquals("fra", locale5.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser("]!$", timeZone0, locale0);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale5));
      assertFalse(locale0.equals((Object)locale3));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("]!$", fastDateParser0.getPattern());
      
      int int0 = fastDateParser0.adjustYear(39);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale5));
      assertFalse(locale0.equals((Object)locale3));
      assertEquals(1939, int0);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale5);
      assertNotSame(locale0, locale3);
      assertSame(locale0, locale4);
      assertSame(locale0, locale1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("]!$", fastDateParser0.getPattern());
      
      FastDateParser fastDateParser1 = new FastDateParser("Go", timeZone0, locale0);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale5));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("Go", fastDateParser1.getPattern());
      
      TimeZone timeZone1 = fastDateParser1.getTimeZone();
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale5));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(timeZone1);
      assertSame(timeZone0, timeZone1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale5);
      assertNotSame(locale0, locale3);
      assertSame(locale0, locale4);
      assertSame(locale0, locale1);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("Go", fastDateParser1.getPattern());
      assertEquals("GMT", timeZone1.getID());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("dz%6$'aD3d", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("dz%6$'aD3d", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale1 = Locale.US;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertEquals("US", locale1.getCountry());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      
      Locale locale2 = Locale.FRENCH;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("fr", locale2.toString());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getCountry());
      
      FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale1);
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertEquals("US", locale1.getCountry());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser1.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(1);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(1, parsePosition0.getIndex());
      
      Object object0 = fastDateParser0.parseObject("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", parsePosition0);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertNull(object0);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(1, parsePosition0.getIndex());
      
      int int0 = fastDateParser1.adjustYear(0);
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertEquals(2000, int0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertEquals("US", locale1.getCountry());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser1.getPattern());
      
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertNotNull(timeZone0);
      assertSame(simpleTimeZone0, timeZone0);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertSame(timeZone0, simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals(0, timeZone0.getRawOffset());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0.getID());
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "(\"\"N1:TH)5r";
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "(\"\"N1:TH)5r");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser("<Zg'z,Ue?7*&,C", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("<Zg'z,Ue?7*&,C", fastDateParser0.getPattern());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale1 = Locale.GERMAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      
      Date date0 = fastDateParser0.parse("GMTBST", parsePosition0);
      assertFalse(locale0.equals((Object)locale1));
      assertNull(date0);
      assertNotSame(locale0, locale1);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("<Zg'z,Ue?7*&,C", fastDateParser0.getPattern());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      
      FastDateParser fastDateParser1 = null;
      try {
        fastDateParser1 = new FastDateParser("f'=U(EZ?P|", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser("`AR=.", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("`AR=.", fastDateParser0.getPattern());
      
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("`AR=.", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "(\"\"N1:TH)5r");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      
      Locale locale1 = Locale.GERMANY;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(set0);
      assertFalse(set0.contains("(\"\"N1:TH)5r"));
      assertNotSame(locale1, locale0);
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      FastDateParser fastDateParser0 = new FastDateParser("GMTPLT", simpleTimeZone0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(fastDateParser0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("GMTPLT", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("UTC", timeZone0.getID());
      
      FastDateParser fastDateParser0 = new FastDateParser(")v%~z7tv>'bNk~", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("UTC", timeZone0.getID());
      assertEquals(")v%~z7tv>'bNk~", fastDateParser0.getPattern());
      
      Locale locale1 = (Locale)locale0.clone();
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      
      int int0 = fastDateParser0.adjustYear(96);
      assertTrue(locale0.equals((Object)locale1));
      assertEquals(1996, int0);
      assertNotSame(locale0, locale1);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("UTC", timeZone0.getID());
      assertEquals(")v%~z7tv>'bNk~", fastDateParser0.getPattern());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)fastDateParser0.getTimeZone();
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(zoneInfo0);
      assertNotSame(locale0, locale1);
      assertSame(timeZone0, zoneInfo0);
      assertSame(zoneInfo0, timeZone0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("UTC", timeZone0.getID());
      assertEquals(")v%~z7tv>'bNk~", fastDateParser0.getPattern());
      assertEquals("UTC", zoneInfo0.getID());
      
      FastDateParser fastDateParser1 = new FastDateParser(")v%~z7tv>'bNk~", timeZone0, locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("UTC", timeZone0.getID());
      assertEquals(")v%~z7tv>'bNk~", fastDateParser1.getPattern());
      
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(fastDateParser0.equals((Object)fastDateParser1));
      assertTrue(fastDateParser1.equals((Object)fastDateParser0));
      assertTrue(boolean0);
      assertNotSame(locale0, locale1);
      assertSame(timeZone0, zoneInfo0);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("UTC", timeZone0.getID());
      assertEquals(")v%~z7tv>'bNk~", fastDateParser0.getPattern());
      assertEquals(")v%~z7tv>'bNk~", fastDateParser1.getPattern());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      assertNotNull(simpleTimeZone0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      
      ParsePosition parsePosition0 = new ParsePosition((-2855));
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals((-2855), parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=-2855,errorIndex=-1]", parsePosition0.toString());
      
      parsePosition0.setErrorIndex((-2855));
      assertEquals("java.text.ParsePosition[index=-2855,errorIndex=-2855]", parsePosition0.toString());
      assertEquals((-2855), parsePosition0.getErrorIndex());
      assertEquals((-2855), parsePosition0.getIndex());
      
      parsePosition0.setErrorIndex(0);
      assertEquals(0, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=-2855,errorIndex=0]", parsePosition0.toString());
      assertEquals((-2855), parsePosition0.getIndex());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser("5H>)Vpf@Dh", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("5H>)Vpf@Dh", fastDateParser0.getPattern());
      
      Integer integer0 = new Integer((-2855));
      assertNotNull(integer0);
      assertEquals((-2855), (int)integer0);
      
      boolean boolean0 = fastDateParser0.equals(integer0);
      assertFalse(boolean0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("5H>)Vpf@Dh", fastDateParser0.getPattern());
      
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("GMTAST", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser("G", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("G", fastDateParser0.getPattern());
      
      Locale locale1 = Locale.TAIWAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      
      FastDateParser fastDateParser1 = new FastDateParser("G", timeZone0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("G", fastDateParser1.getPattern());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ":OiK");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=:OiK,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(":OiK", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      FastDateParser fastDateParser2 = new FastDateParser("G", simpleTimeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(fastDateParser2.equals((Object)fastDateParser0));
      assertFalse(fastDateParser2.equals((Object)fastDateParser1));
      assertNotNull(fastDateParser2);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=:OiK,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(":OiK", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("G", fastDateParser2.getPattern());
      
      boolean boolean0 = fastDateParser1.equals(fastDateParser2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser2));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(fastDateParser2.equals((Object)fastDateParser0));
      assertFalse(fastDateParser2.equals((Object)fastDateParser1));
      assertFalse(boolean0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(fastDateParser1, fastDateParser2);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(fastDateParser2, fastDateParser0);
      assertNotSame(fastDateParser2, fastDateParser1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("G", fastDateParser1.getPattern());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=:OiK,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(":OiK", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("G", fastDateParser2.getPattern());
      
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      assertNotNull(mockDate0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("8.A(dT?>u", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("8.A(dT?>u", fastDateParser0.getPattern());
      
      boolean boolean0 = fastDateParser0.equals(timeZone0);
      assertFalse(boolean0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("8.A(dT?>u", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      assertNotNull(simpleTimeZone0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      ParsePosition parsePosition0 = new ParsePosition((-2855));
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=-2855,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-2855), parsePosition0.getIndex());
      
      parsePosition0.setErrorIndex((-2855));
      assertEquals("java.text.ParsePosition[index=-2855,errorIndex=-2855]", parsePosition0.toString());
      assertEquals((-2855), parsePosition0.getErrorIndex());
      assertEquals((-2855), parsePosition0.getIndex());
      
      parsePosition0.setErrorIndex(0);
      assertEquals(0, parsePosition0.getErrorIndex());
      assertEquals((-2855), parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=-2855,errorIndex=0]", parsePosition0.toString());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
      
      int int0 = fastDateParser0.adjustYear((-3820));
      assertEquals((-1820), int0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
      
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertNotNull(timeZone0);
      assertSame(simpleTimeZone0, timeZone0);
      assertSame(timeZone0, simpleTimeZone0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0.getID());
      assertEquals(0, timeZone0.getRawOffset());
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "(\"\"N1:TH)5r");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser(")W%@gdw ", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(")W%@gdw ", fastDateParser0.getPattern());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale1 = Locale.ENGLISH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      
      Locale locale2 = Locale.FRENCH;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("fr", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      
      FastDateParser fastDateParser1 = null;
      try {
        fastDateParser1 = new FastDateParser("", simpleTimeZone0, locale2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "(\"\"N1:TH)5r";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-955), "(\"\"N1:TH)5r");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-955), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-955,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-955), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-955,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale1 = Locale.ENGLISH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(set0);
      assertFalse(set0.contains("(\"\"N1:TH)5r"));
      assertNotSame(locale0, locale1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      FastDateParser fastDateParser1 = new FastDateParser("/gBugM^H(?1Y!p3ARi", simpleTimeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-955), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-955,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("/gBugM^H(?1Y!p3ARi", fastDateParser1.getPattern());
      
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertNotNull(timeZone0);
      assertSame(simpleTimeZone0, timeZone0);
      assertNotSame(locale0, locale1);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertSame(timeZone0, simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-955), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-955,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals((-955), timeZone0.getRawOffset());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-955,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals("(\"\"N1:TH)5r", timeZone0.getID());
      
      FastDateParser fastDateParser2 = null;
      try {
        fastDateParser2 = new FastDateParser("", simpleTimeZone0, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser("s/`hsTz[c", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("s/`hsTz[c", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "(\"\"N1:TH)5r";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1854), "*S]d#uB0c{bWkXF");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("*S]d#uB0c{bWkXF", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=*S]d#uB0c{bWkXF,offset=-1854,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1854), simpleTimeZone0.getRawOffset());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("*S]d#uB0c{bWkXF", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("*S]d#uB0c{bWkXF", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=*S]d#uB0c{bWkXF,offset=-1854,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1854), simpleTimeZone0.getRawOffset());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("*S]d#uB0c{bWkXF", fastDateParser0.getPattern());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale1 = Locale.ENGLISH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(set0);
      assertFalse(set0.contains("*S]d#uB0c{bWkXF"));
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      SimpleTimeZone simpleTimeZone1 = null;
      try {
        simpleTimeZone1 = new SimpleTimeZone((-1854), (String) null, (-3908), (-3908), 1, 1, (-1854), (-1854), (-3908), 109);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("*(7r K9~a{,", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("*(7r K9~a{,", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDateParser fastDateParser0 = new FastDateParser("@F<Pw0{r;", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("@F<Pw0{r;", fastDateParser0.getPattern());
      
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "(\"\"N1:TH)5r");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      
      FastDateParser fastDateParser1 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale1);
      assertTrue(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("(\"\"N1:TH)5r", fastDateParser1.getPattern());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale2 = Locale.ENGLISH;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getCountry());
      assertEquals("en", locale2.toString());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.getLanguage());
      
      Set<String> set0 = locale2.getUnicodeLocaleKeys();
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(set0);
      assertFalse(set0.contains("(\"\"N1:TH)5r"));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getCountry());
      assertEquals("en", locale2.toString());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      FastDateParser fastDateParser2 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale0);
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(fastDateParser2.equals((Object)fastDateParser1));
      assertTrue(fastDateParser2.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser2);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("(\"\"N1:TH)5r", fastDateParser2.getPattern());
      
      Date date0 = fastDateParser1.parse("(\"\"N1:TH)5r");
      assertFalse(locale1.equals((Object)locale2));
      assertTrue(fastDateParser1.equals((Object)fastDateParser2));
      assertTrue(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(date0);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(fastDateParser1, fastDateParser2);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("(\"\"N1:TH)5r", fastDateParser1.getPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      String string0 = fastDateParser2.getPattern();
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(fastDateParser2.equals((Object)fastDateParser1));
      assertTrue(fastDateParser2.equals((Object)fastDateParser0));
      assertNotNull(string0);
      assertEquals("(\"\"N1:TH)5r", string0);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(fastDateParser2, fastDateParser0);
      assertNotSame(fastDateParser2, fastDateParser1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("(\"\"N1:TH)5r", fastDateParser2.getPattern());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser("5~", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("5~", fastDateParser0.getPattern());
      
      String string0 = fastDateParser0.getPattern();
      assertNotNull(string0);
      assertEquals("5~", string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("5~", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "(\"\"N1:TH)5r");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale1 = Locale.ENGLISH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(set0);
      assertFalse(set0.contains("(\"\"N1:TH)5r"));
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Locale locale2 = Locale.ENGLISH;
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertEquals("en", locale2.getLanguage());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getCountry());
      assertEquals("en", locale2.toString());
      assertEquals("", locale2.getVariant());
      
      String string0 = locale0.toLanguageTag();
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(string0);
      assertEquals("zh-TW", string0);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      
      Set<String> set1 = locale2.getUnicodeLocaleKeys();
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(set1);
      assertFalse(set1.contains("(\"\"N1:TH)5r"));
      assertNotSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertSame(set1, set0);
      assertEquals("en", locale2.getLanguage());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getCountry());
      assertEquals("en", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      
      FastDateParser fastDateParser1 = new FastDateParser("zh-TW", simpleTimeZone0, locale0);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh-TW", fastDateParser1.getPattern());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser("-_^>,Nvf", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("-_^>,Nvf", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4536, "6*PxZN/&i3U*<{*pA");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(4536, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=6*PxZN/&i3U*<{*pA,offset=4536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("6*PxZN/&i3U*<{*pA", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      
      SimpleTimeZone simpleTimeZone1 = new SimpleTimeZone(4536, "6*PxZN/&i3U*<{*pA");
      assertTrue(simpleTimeZone1.equals((Object)simpleTimeZone0));
      assertNotNull(simpleTimeZone1);
      assertEquals(4536, simpleTimeZone1.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=6*PxZN/&i3U*<{*pA,offset=4536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
      assertEquals("6*PxZN/&i3U*<{*pA", simpleTimeZone1.getID());
      assertFalse(simpleTimeZone1.useDaylightTime());
      assertEquals(0, simpleTimeZone1.getDSTSavings());
      
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser(":_7~RhPJ(fQNv;", simpleTimeZone1, locale1);
      assertTrue(simpleTimeZone1.equals((Object)simpleTimeZone0));
      assertNotNull(fastDateParser0);
      assertEquals(4536, simpleTimeZone1.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=6*PxZN/&i3U*<{*pA,offset=4536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
      assertEquals("6*PxZN/&i3U*<{*pA", simpleTimeZone1.getID());
      assertFalse(simpleTimeZone1.useDaylightTime());
      assertEquals(0, simpleTimeZone1.getDSTSavings());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals(":_7~RhPJ(fQNv;", fastDateParser0.getPattern());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale2 = Locale.ENGLISH;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("en", locale2.toString());
      
      Set<String> set0 = locale2.getUnicodeLocaleKeys();
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(set0);
      assertFalse(set0.contains(":_7~RhPJ(fQNv;"));
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("en", locale2.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      FastDateParser fastDateParser1 = new FastDateParser("`y[+{j\u0007ht}9e|'m6K", simpleTimeZone0, locale0);
      assertTrue(simpleTimeZone0.equals((Object)simpleTimeZone1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(4536, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=6*PxZN/&i3U*<{*pA,offset=4536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("6*PxZN/&i3U*<{*pA", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("`y[+{j\u0007ht}9e|'m6K", fastDateParser1.getPattern());
      
      int int0 = fastDateParser0.adjustYear(47);
      assertTrue(simpleTimeZone1.equals((Object)simpleTimeZone0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertEquals(1947, int0);
      assertNotSame(simpleTimeZone1, simpleTimeZone0);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertEquals(4536, simpleTimeZone1.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=6*PxZN/&i3U*<{*pA,offset=4536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
      assertEquals("6*PxZN/&i3U*<{*pA", simpleTimeZone1.getID());
      assertFalse(simpleTimeZone1.useDaylightTime());
      assertEquals(0, simpleTimeZone1.getDSTSavings());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals(":_7~RhPJ(fQNv;", fastDateParser0.getPattern());
      
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertTrue(simpleTimeZone1.equals((Object)simpleTimeZone0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertTrue(timeZone0.equals((Object)simpleTimeZone0));
      assertNotNull(timeZone0);
      assertSame(simpleTimeZone1, timeZone0);
      assertNotSame(simpleTimeZone1, simpleTimeZone0);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertSame(timeZone0, simpleTimeZone1);
      assertNotSame(timeZone0, simpleTimeZone0);
      assertEquals(4536, simpleTimeZone1.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=6*PxZN/&i3U*<{*pA,offset=4536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
      assertEquals("6*PxZN/&i3U*<{*pA", simpleTimeZone1.getID());
      assertFalse(simpleTimeZone1.useDaylightTime());
      assertEquals(0, simpleTimeZone1.getDSTSavings());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals(":_7~RhPJ(fQNv;", fastDateParser0.getPattern());
      assertEquals("6*PxZN/&i3U*<{*pA", timeZone0.getID());
      assertEquals(4536, timeZone0.getRawOffset());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=6*PxZN/&i3U*<{*pA,offset=4536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals(0, timeZone0.getDSTSavings());
      
      FastDateParser fastDateParser2 = new FastDateParser("6*PxZN/&i3U*<{*pA", simpleTimeZone0, locale2);
      assertTrue(simpleTimeZone0.equals((Object)timeZone0));
      assertTrue(simpleTimeZone0.equals((Object)simpleTimeZone1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(fastDateParser2.equals((Object)fastDateParser0));
      assertFalse(fastDateParser2.equals((Object)fastDateParser1));
      assertNotNull(fastDateParser2);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(4536, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=6*PxZN/&i3U*<{*pA,offset=4536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("6*PxZN/&i3U*<{*pA", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("en", locale2.toString());
      assertEquals("6*PxZN/&i3U*<{*pA", fastDateParser2.getPattern());
      
      try { 
        fastDateParser2.parse(":_7~RhPJ(fQNv;");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \":_7~RhPJ(fQNv;\" does not match 6\\*
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser("6VR8.0$Xg]DY)+w)\"}", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("6VR8.0$Xg]DY)+w)\"}", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale1 = Locale.ENGLISH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      
      Locale locale2 = Locale.FRENCH;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("fr", locale2.getLanguage());
      assertEquals("", locale2.getISO3Country());
      assertEquals("fr", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      
      FastDateParser fastDateParser1 = new FastDateParser(":72s<(L&<0'J<", simpleTimeZone0, locale1);
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals(":72s<(L&<0'J<", fastDateParser1.getPattern());
      
      FastDateParser fastDateParser2 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(fastDateParser2.equals((Object)fastDateParser0));
      assertFalse(fastDateParser2.equals((Object)fastDateParser1));
      assertNotNull(fastDateParser2);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser2.getPattern());
      
      int int0 = fastDateParser2.adjustYear(6);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(fastDateParser2.equals((Object)fastDateParser0));
      assertFalse(fastDateParser2.equals((Object)fastDateParser1));
      assertEquals(2006, int0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(fastDateParser2, fastDateParser0);
      assertNotSame(fastDateParser2, fastDateParser1);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser2.getPattern());
      
      TimeZone timeZone0 = fastDateParser1.getTimeZone();
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser2));
      assertNotNull(timeZone0);
      assertSame(simpleTimeZone0, timeZone0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(fastDateParser1, fastDateParser2);
      assertSame(timeZone0, simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals(":72s<(L&<0'J<", fastDateParser1.getPattern());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals(0, timeZone0.getRawOffset());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser(":n WG4F", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(":n WG4F", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("#Wyz{s~0", timeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("#Wyz{s~0", fastDateParser0.getPattern());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale2 = Locale.ENGLISH;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("en", locale2.toString());
      assertEquals("en", locale2.getLanguage());
      
      Locale locale3 = Locale.FRENCH;
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertNotNull(locale3);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertEquals("", locale3.getVariant());
      assertEquals("", locale3.getISO3Country());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("", locale3.getCountry());
      assertEquals("fr", locale3.toString());
      assertEquals("fra", locale3.getISO3Language());
      
      Locale locale4 = (Locale)locale0.clone();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale3));
      assertTrue(locale4.equals((Object)locale0));
      assertFalse(locale4.equals((Object)locale3));
      assertFalse(locale4.equals((Object)locale1));
      assertFalse(locale4.equals((Object)locale2));
      assertNotNull(locale4);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale4);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale3);
      assertNotSame(locale4, locale3);
      assertNotSame(locale4, locale0);
      assertNotSame(locale4, locale1);
      assertNotSame(locale4, locale2);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale4.toString());
      assertEquals("eng", locale4.getISO3Language());
      assertEquals("US", locale4.getCountry());
      assertEquals("", locale4.getVariant());
      assertEquals("en", locale4.getLanguage());
      assertEquals("USA", locale4.getISO3Country());
      
      FastDateParser fastDateParser1 = new FastDateParser("0:Y aM-hrX10msg5*X", timeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(locale0.equals((Object)locale4));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("0:Y aM-hrX10msg5*X", fastDateParser1.getPattern());
      
      int int0 = fastDateParser1.adjustYear(0);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(locale0.equals((Object)locale4));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertEquals(2000, int0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale4);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale3);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("0:Y aM-hrX10msg5*X", fastDateParser1.getPattern());
      
      String string0 = fastDateParser1.toString();
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(locale0.equals((Object)locale4));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(string0);
      assertEquals("FastDateParser[0:Y aM-hrX10msg5*X,en_US,GMT]", string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale4);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale3);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("0:Y aM-hrX10msg5*X", fastDateParser1.getPattern());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "(\"\"N1:TH)5r");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale1 = Locale.ENGLISH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      
      SimpleTimeZone simpleTimeZone1 = new SimpleTimeZone(2247, "(\"\"N1:TH)5r");
      assertFalse(simpleTimeZone1.equals((Object)simpleTimeZone0));
      assertNotNull(simpleTimeZone1);
      assertEquals(0, simpleTimeZone1.getDSTSavings());
      assertEquals(2247, simpleTimeZone1.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=2247,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
      assertFalse(simpleTimeZone1.useDaylightTime());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone1.getID());
      
      FastDateParser fastDateParser1 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone1, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(simpleTimeZone1.equals((Object)simpleTimeZone0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals(0, simpleTimeZone1.getDSTSavings());
      assertEquals(2247, simpleTimeZone1.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=2247,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
      assertFalse(simpleTimeZone1.useDaylightTime());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone1.getID());
      assertEquals("(\"\"N1:TH)5r", fastDateParser1.getPattern());
      
      int int0 = fastDateParser0.adjustYear(2247);
      assertFalse(simpleTimeZone0.equals((Object)simpleTimeZone1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertEquals(4147, int0);
      assertNotSame(simpleTimeZone0, simpleTimeZone1);
      assertNotSame(locale0, locale1);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      
      TimeZone timeZone0 = fastDateParser1.getTimeZone();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(simpleTimeZone1.equals((Object)simpleTimeZone0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(timeZone0.equals((Object)simpleTimeZone0));
      assertNotNull(timeZone0);
      assertNotSame(locale1, locale0);
      assertNotSame(simpleTimeZone1, simpleTimeZone0);
      assertSame(simpleTimeZone1, timeZone0);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(timeZone0, simpleTimeZone0);
      assertSame(timeZone0, simpleTimeZone1);
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals(0, simpleTimeZone1.getDSTSavings());
      assertEquals(2247, simpleTimeZone1.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=2247,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
      assertFalse(simpleTimeZone1.useDaylightTime());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone1.getID());
      assertEquals("(\"\"N1:TH)5r", fastDateParser1.getPattern());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=2247,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals(2247, timeZone0.getRawOffset());
      assertEquals("(\"\"N1:TH)5r", timeZone0.getID());
      assertEquals(0, timeZone0.getDSTSavings());
      
      Locale locale2 = Locale.FRANCE;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("FRA", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("FR", locale2.getCountry());
      assertEquals("fr_FR", locale2.toString());
      
      FastDateParser fastDateParser2 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale2);
      assertFalse(simpleTimeZone0.equals((Object)simpleTimeZone1));
      assertFalse(simpleTimeZone0.equals((Object)timeZone0));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(fastDateParser2.equals((Object)fastDateParser1));
      assertFalse(fastDateParser2.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser2);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("FRA", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("FR", locale2.getCountry());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("(\"\"N1:TH)5r", fastDateParser2.getPattern());
      
      Date date0 = fastDateParser0.parse("(\"\"N1:TH)5r");
      assertFalse(simpleTimeZone0.equals((Object)simpleTimeZone1));
      assertFalse(simpleTimeZone0.equals((Object)timeZone0));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertFalse(fastDateParser0.equals((Object)fastDateParser2));
      assertNotNull(date0);
      assertNotSame(simpleTimeZone0, simpleTimeZone1);
      assertNotSame(simpleTimeZone0, timeZone0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertNotSame(fastDateParser0, fastDateParser2);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser("!W.xo!D65Tk} #Z$/8", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("!W.xo!D65Tk} #Z$/8", fastDateParser0.getPattern());
      
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("US", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en_US", locale1.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("5F3zF#&-p|H}BZOs.", timeZone0, locale1);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("US", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en_US", locale1.toString());
      assertEquals("5F3zF#&-p|H}BZOs.", fastDateParser0.getPattern());
      
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertNotNull(pattern0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("US", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en_US", locale1.toString());
      assertEquals("5F3zF#&-p|H}BZOs.", fastDateParser0.getPattern());
      assertEquals(0, pattern0.flags());
      
      int int0 = 0;
      FastDateParser fastDateParser1 = new FastDateParser("7|82l:,g;2c5", timeZone0, locale0);
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("7|82l:,g;2c5", fastDateParser1.getPattern());
      
      // Undeclared exception!
      try { 
        fastDateParser1.parseObject("7|82l:,g;2c5", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("7&IPR$:/M", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("7&IPR$:/M", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser("~msjPtgv", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("~msjPtgv", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      
      String string0 = "myRE\\|3q>0^T1=w";
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("myRE|3q>0^T1=w", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("myRE|3q>0^T1=w", fastDateParser0.getPattern());
      
      try { 
        fastDateParser0.parseObject("YVeLt*$dEF)g3GM(%");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"YVeLt*$dEF)g3GM(%\" does not match (\\p{IsNd}{1}+)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "(\"\"N1:TH)5r");
      assertNotNull(simpleTimeZone0);
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale1 = Locale.ENGLISH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(set0);
      assertFalse(set0.contains("(\"\"N1:TH)5r"));
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      FastDateParser fastDateParser1 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("(\"\"N1:TH)5r", fastDateParser1.getPattern());
      
      FastDateParser fastDateParser2 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(fastDateParser2.equals((Object)fastDateParser1));
      assertTrue(fastDateParser2.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser2);
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("(\"\"N1:TH)5r", fastDateParser2.getPattern());
      
      FastDateParser fastDateParser3 = new FastDateParser("yEh=", simpleTimeZone0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDateParser3.equals((Object)fastDateParser1));
      assertFalse(fastDateParser3.equals((Object)fastDateParser2));
      assertFalse(fastDateParser3.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser3);
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("yEh=", fastDateParser3.getPattern());
      
      TimeZone timeZone0 = fastDateParser3.getTimeZone();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDateParser3.equals((Object)fastDateParser1));
      assertFalse(fastDateParser3.equals((Object)fastDateParser2));
      assertFalse(fastDateParser3.equals((Object)fastDateParser0));
      assertNotNull(timeZone0);
      assertSame(simpleTimeZone0, timeZone0);
      assertNotSame(locale1, locale0);
      assertNotSame(fastDateParser3, fastDateParser1);
      assertNotSame(fastDateParser3, fastDateParser2);
      assertNotSame(fastDateParser3, fastDateParser0);
      assertSame(timeZone0, simpleTimeZone0);
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("yEh=", fastDateParser3.getPattern());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals((-1), timeZone0.getRawOffset());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("(\"\"N1:TH)5r", timeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      
      Date date0 = fastDateParser0.parse("(\"\"N1:TH)5r");
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(fastDateParser0.equals((Object)fastDateParser2));
      assertTrue(fastDateParser0.equals((Object)fastDateParser1));
      assertFalse(fastDateParser0.equals((Object)fastDateParser3));
      assertNotNull(date0);
      assertSame(simpleTimeZone0, timeZone0);
      assertNotSame(locale0, locale1);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertNotSame(fastDateParser0, fastDateParser3);
      assertNotSame(fastDateParser0, fastDateParser2);
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "(\"\"N1:TH)5r";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "(\"\"N1:TH)5r");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser("EzH\"_{~5;7` ", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("EzH\"_{~5;7` ", fastDateParser0.getPattern());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale1 = Locale.ENGLISH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      
      Locale.setDefault(locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(set0);
      assertFalse(set0.contains("(\"\"N1:TH)5r"));
      assertNotSame(locale1, locale0);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      FastDateParser fastDateParser1 = null;
      try {
        fastDateParser1 = new FastDateParser("org.apache.commons.lang3.time.FastDateParser$TextStrategy", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = (-1);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "(\"\"N1:TH)5r");
      assertNotNull(simpleTimeZone0);
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale1 = Locale.ENGLISH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(set0);
      assertFalse(set0.contains("(\"\"N1:TH)5r"));
      assertNotSame(locale1, locale0);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      FastDateParser fastDateParser1 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("(\"\"N1:TH)5r", fastDateParser1.getPattern());
      
      FastDateParser fastDateParser2 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(fastDateParser2.equals((Object)fastDateParser1));
      assertTrue(fastDateParser2.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser2);
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("(\"\"N1:TH)5r", fastDateParser2.getPattern());
      
      FastDateParser fastDateParser3 = new FastDateParser("yEh=", simpleTimeZone0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDateParser3.equals((Object)fastDateParser1));
      assertFalse(fastDateParser3.equals((Object)fastDateParser2));
      assertFalse(fastDateParser3.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser3);
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("yEh=", fastDateParser3.getPattern());
      
      try { 
        fastDateParser2.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match \\(\"\"
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("hG8M)T", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("hG8M)T", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale1 = Locale.ENGLISH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      
      Locale locale2 = Locale.FRENCH;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("fra", locale2.getISO3Language());
      
      FastDateParser fastDateParser1 = new FastDateParser("8uQn-16EC-ivf", simpleTimeZone0, locale2);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("8uQn-16EC-ivf", fastDateParser1.getPattern());
      
      int int0 = fastDateParser1.adjustYear(1);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertEquals(2001, int0);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("8uQn-16EC-ivf", fastDateParser1.getPattern());
      
      TimeZone timeZone0 = fastDateParser1.getTimeZone();
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(timeZone0);
      assertSame(simpleTimeZone0, timeZone0);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertSame(timeZone0, simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("8uQn-16EC-ivf", fastDateParser1.getPattern());
      assertEquals(0, timeZone0.getRawOffset());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0.getID());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = (-1052);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1052), "`%W>ZB");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=`%W>ZB,offset=-1052,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("`%W>ZB", simpleTimeZone0.getID());
      assertEquals((-1052), simpleTimeZone0.getRawOffset());
      
      Locale locale0 = new Locale("`%W>ZB");
      assertNotNull(locale0);
      assertEquals("`%w>zb", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("`%w>zb", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("`%W>ZB"));
      assertEquals("`%w>zb", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("`%w>zb", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      FastDateParser fastDateParser0 = new FastDateParser("`%W>ZB", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("java.util.SimpleTimeZone[id=`%W>ZB,offset=-1052,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("`%W>ZB", simpleTimeZone0.getID());
      assertEquals((-1052), simpleTimeZone0.getRawOffset());
      assertEquals("`%w>zb", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("`%w>zb", locale0.toString());
      assertEquals("`%W>ZB", fastDateParser0.getPattern());
      
      String string0 = "GMTCTT";
      // Undeclared exception!
      try { 
        simpleTimeZone0.setStartRule(12, (-1052), 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 12
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser(">CH6", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals(">CH6", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "(\"\"N1:TH)5r");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale1 = Locale.ENGLISH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(set0);
      assertFalse(set0.contains("(\"\"N1:TH)5r"));
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      FastDateParser fastDateParser1 = new FastDateParser("\" does not match ", simpleTimeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("\" does not match ", fastDateParser1.getPattern());
      
      int int0 = new Integer((-1));
      assertEquals((-1), int0);
      
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertNotNull(timeZone0);
      assertSame(simpleTimeZone0, timeZone0);
      assertNotSame(locale0, locale1);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertSame(timeZone0, simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals((-1), timeZone0.getRawOffset());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", timeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      
      try { 
        fastDateParser0.parse("GMTBET");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"GMTBET\" does not match \\(\"\"
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser("SST", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("SST", fastDateParser0.getPattern());
      
      Date date0 = fastDateParser0.parse("8.A(dT?>u");
      assertNotNull(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("SST", fastDateParser0.getPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("8.A(dT?>u", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("8.A(dT?>u", fastDateParser0.getPattern());
      
      Date date0 = fastDateParser0.parse("8.A(dT?>u");
      assertNotNull(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("8.A(dT?>u", fastDateParser0.getPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "(\"\"N1:TH)5r");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      
      Object object0 = fastDateParser0.parseObject("(\"\"N1:TH)5r");
      assertNotNull(object0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale1 = Locale.ENGLISH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(set0);
      assertFalse(set0.contains("(\"\"N1:TH)5r"));
      assertNotSame(locale1, locale0);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      String string0 = locale1.getDisplayName(locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertEquals("\u82F1\u6587", string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      
      Locale.setDefault(locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      
      FastDateParser fastDateParser1 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("(\"\"N1:TH)5r", fastDateParser1.getPattern());
      
      FastDateParser fastDateParser2 = new FastDateParser("^VXK", simpleTimeZone0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDateParser2.equals((Object)fastDateParser1));
      assertFalse(fastDateParser2.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser2);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("^VXK", fastDateParser2.getPattern());
      
      Pattern pattern0 = fastDateParser2.getParsePattern();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDateParser2.equals((Object)fastDateParser1));
      assertFalse(fastDateParser2.equals((Object)fastDateParser0));
      assertNotNull(pattern0);
      assertNotSame(locale1, locale0);
      assertNotSame(fastDateParser2, fastDateParser1);
      assertNotSame(fastDateParser2, fastDateParser0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("^VXK", fastDateParser2.getPattern());
      assertEquals(0, pattern0.flags());
      assertEquals("\\^", pattern0.toString());
      assertEquals("\\^", pattern0.pattern());
      
      String string1 = fastDateParser1.toString();
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("FastDateParser[(\"\"N1:TH)5r,zh_TW,(\"\"N1:TH)5r]", string1);
      assertNotSame(locale0, locale1);
      assertNotSame(fastDateParser1, fastDateParser2);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("(\"\"N1:TH)5r", fastDateParser1.getPattern());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = (-4002);
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4002), "");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-4002,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-4002), simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("8NJuw;zKy8G~UUy`p$", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-4002,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-4002), simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("8NJuw;zKy8G~UUy`p$", fastDateParser0.getPattern());
      
      String string1 = "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = fastDateParser0.hashCode();
      assertFalse(int1 == int0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-4002,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-4002), simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("8NJuw;zKy8G~UUy`p$", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition((-4002));
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals((-4002), parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=-4002,errorIndex=-1]", parsePosition0.toString());
      
      String string2 = "JP";
      // Undeclared exception!
      try { 
        fastDateParser0.parse("JP", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = (-4002);
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4002), "");
      assertNotNull(simpleTimeZone0);
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-4002), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-4002,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser("8NJuw;zKy8G~UUy`p$", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-4002), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-4002,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("8NJuw;zKy8G~UUy`p$", fastDateParser0.getPattern());
      
      String string1 = "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = fastDateParser0.hashCode();
      assertFalse(int1 == int0);
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-4002), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-4002,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("8NJuw;zKy8G~UUy`p$", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition((-4002));
      assertNotNull(parsePosition0);
      assertEquals((-4002), parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=-4002,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      int int2 = (-433);
      int int3 = (-1223);
      String string2 = "JP";
      // Undeclared exception!
      try { 
        fastDateParser0.parse("JP", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "(\"\"N1:TH)5r");
      assertNotNull(simpleTimeZone0);
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale1 = Locale.ENGLISH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(set0);
      assertFalse(set0.contains("(\"\"N1:TH)5r"));
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      FastDateParser fastDateParser1 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("(\"\"N1:TH)5r", fastDateParser1.getPattern());
      
      int int0 = fastDateParser0.adjustYear((-1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertEquals(1999, int0);
      assertNotSame(locale0, locale1);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      
      int int1 = fastDateParser0.adjustYear(99);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertTrue(int1 == int0);
      assertEquals(1999, int1);
      assertNotSame(locale0, locale1);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDateParser fastDateParser0 = new FastDateParser("@F<Pw0{r;", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("@F<Pw0{r;", fastDateParser0.getPattern());
      
      int int0 = fastDateParser0.adjustYear(1584);
      assertEquals(3484, int0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("@F<Pw0{r;", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser(")W%@gdw ", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(")W%@gdw ", fastDateParser0.getPattern());
      
      Locale locale1 = fastDateParser0.getLocale();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(")W%@gdw ", fastDateParser0.getPattern());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "(\"\"N1:TH)5r");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertNotNull(pattern0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      assertEquals("\\(\"\"", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("\\(\"\"", pattern0.toString());
      
      ParsePosition parsePosition0 = new ParsePosition(2273);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=2273,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(2273, parsePosition0.getIndex());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      
      Locale locale2 = new Locale("", "");
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getLanguage());
      
      Locale locale3 = fastDateParser0.getLocale();
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale2));
      assertNotNull(locale3);
      assertSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale3, locale2);
      assertSame(locale3, locale0);
      assertSame(locale3, locale1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      assertEquals("TWN", locale3.getISO3Country());
      assertEquals("zh", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      assertEquals("zh_TW", locale3.toString());
      assertEquals("TW", locale3.getCountry());
      assertEquals("zho", locale3.getISO3Language());
      
      String[] stringArray1 = Locale.getISOCountries();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(250, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      FastDateParser fastDateParser1 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale3);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale2));
      assertTrue(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      assertEquals("TWN", locale3.getISO3Country());
      assertEquals("zh", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      assertEquals("zh_TW", locale3.toString());
      assertEquals("TW", locale3.getCountry());
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("(\"\"N1:TH)5r", fastDateParser1.getPattern());
      
      Pattern pattern1 = fastDateParser1.getParsePattern();
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(fastDateParser0.equals((Object)fastDateParser1));
      assertFalse(locale3.equals((Object)locale2));
      assertTrue(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(pattern1.equals((Object)pattern0));
      assertNotNull(pattern1);
      assertSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertNotSame(locale3, locale2);
      assertSame(locale3, locale0);
      assertSame(locale3, locale1);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(pattern1, pattern0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      assertEquals("TWN", locale3.getISO3Country());
      assertEquals("zh", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      assertEquals("zh_TW", locale3.toString());
      assertEquals("TW", locale3.getCountry());
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("(\"\"N1:TH)5r", fastDateParser1.getPattern());
      assertEquals("\\(\"\"", pattern1.toString());
      assertEquals(0, pattern1.flags());
      assertEquals("\\(\"\"", pattern1.pattern());
      
      String string0 = fastDateParser0.toString();
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(fastDateParser0.equals((Object)fastDateParser1));
      assertNotNull(string0);
      assertEquals("FastDateParser[(\"\"N1:TH)5r,zh_TW,(\"\"N1:TH)5r]", string0);
      assertSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=(\"\"N1:TH)5r,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("(\"\"N1:TH)5r", simpleTimeZone0.getID());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("(\"\"N1:TH)5r", fastDateParser0.getPattern());
      
      try { 
        fastDateParser0.parseObject("GMTCAT");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"GMTCAT\" does not match \\(\"\"
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser(")W%@gdw ", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(")W%@gdw ", fastDateParser0.getPattern());
      
      TimeZone timeZone1 = fastDateParser0.getTimeZone();
      assertNotNull(timeZone1);
      assertSame(timeZone0, timeZone1);
      assertSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(")W%@gdw ", fastDateParser0.getPattern());
      assertEquals("GMT", timeZone1.getID());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "(\"\"N1:TH)5r");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale0);
      Locale.getISOLanguages();
      Locale locale1 = Locale.ENGLISH;
      locale1.getUnicodeLocaleKeys();
      FastDateParser fastDateParser1 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale1);
      fastDateParser0.adjustYear((-1));
      fastDateParser1.getTimeZone();
      try { 
        fastDateParser1.parse("8?;");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"8?;\" does not match \\(\"\"
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      String string0 = "5F3zF#&-p|H}BZOs.";
      Locale locale0 = Locale.US;
      Locale locale1 = locale0.stripExtensions();
      FastDateParser fastDateParser0 = new FastDateParser("5F3zF#&-p|H}BZOs.", timeZone0, locale1);
      fastDateParser0.getParsePattern();
      ParsePosition parsePosition0 = new ParsePosition(2273);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(")W%@gdw ", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-1555));
      assertEquals(445, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      zoneOffset0.normalized();
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("}+)", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("}0%", timeZone0, locale0);
      assertEquals("}0%", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("sT*+", timeZone0, locale0);
      assertEquals("sT*+", fastDateParser0.getPattern());
      
      // Undeclared exception!
      try { 
        fastDateParser0.parse("sT*+", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("^!gp3w]pn; JO67", timeZone0, locale0);
      assertEquals("^!gp3w]pn; JO67", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("?", timeZone0, locale0);
      assertEquals("?", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("@FO<Pw0{r;", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[@FO<Pw0{r;,zh_CN,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "(\"\"N1:TH)5r");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale0);
      Locale.getISOLanguages();
      fastDateParser0.getParsePattern();
      ParsePosition parsePosition0 = new ParsePosition(2273);
      locale0.stripExtensions();
      Locale locale1 = new Locale("", "");
      FastDateParser fastDateParser1 = new FastDateParser("^=?u", simpleTimeZone0, locale0);
      Pattern pattern0 = fastDateParser1.getParsePattern();
      assertEquals("\\^=\\?", pattern0.pattern());
      
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[(\"\"N1:TH)5r,zh_TW,(\"\"N1:TH)5r]", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("SS(", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-21));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("SS(", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "`#44U";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "`#44U", 0, 0, 0, 0, 0, 25, 0, 0);
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("`#44U", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("`#44U", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("`AR=.", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("`AR=.", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("`%vO*9m^", timeZone0, locale0);
      assertEquals("`%vO*9m^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(")W%@gdw ", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject(")W%@gdw ");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \")W%@gdw \" does not match \\)(\\p{IsNd}++)%@
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "8NJuw;zKy8G~UUy`p$";
      int int0 = (-4002);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4002), "");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("8NJuw;zKy8G~UUy`p$", simpleTimeZone0, locale0);
      String string1 = "";
      try { 
        fastDateParser0.parseObject("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match 8
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(",j2S,W0PB/c}))*d?Y>", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject(",j2S,W0PB/c}))*d?Y>");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TimeZone.getDefault();
      Locale locale0 = new Locale("5F3zF#&-p|H}BZOs.", "5F3zF#&-p|H}BZOs.", "5F3zF#&-p|H}BZOs.");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(109, "GMTBST");
      Locale locale1 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("F!EMS: &G!0E\"e$Zp}", simpleTimeZone0, locale0);
      simpleTimeZone0.getDisplayName();
      ParsePosition parsePosition0 = new ParsePosition(109);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("GMTBST", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("GMTBST", timeZone0, locale0);
      assertEquals("GMTBST", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("F<w0{r;", timeZone0, locale0);
      assertEquals("F<w0{r;", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser(")W%@gdw ", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2299);
      // Undeclared exception!
      try { 
        fastDateParser0.parse(")W%@gdw ", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", timeZone0, locale0);
      assertEquals("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(")W%@gdw ", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("\\)(\\p{IsNd}++)%@", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "(\"\"N1:TH)5r";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "(\"\"N1:TH)5r");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("(\"\"N1:TH)5r", simpleTimeZone0, locale0);
      Locale.getISOLanguages();
      fastDateParser0.getParsePattern();
      int int0 = 2273;
      ParsePosition parsePosition0 = new ParsePosition(2273);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("(\"\"N1:TH)5r", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "";
      int int0 = (-945);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-945));
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMTCTT", timeZone0, locale0);
      String string1 = "GMTCST";
      ParsePosition parsePosition0 = null;
      // Undeclared exception!
      try { 
        fastDateParser0.parse("GMTCST", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(105, "GMTJST");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("GMTPLT", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse("GMTPLT");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"GMTPLT\" does not match (\u7D00\u5143\u524D|\u7D00\u5143\u524D|\u897F\u66A6|\u897F\u66A6)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++";
      int int0 = 0;
      String string1 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.forLanguageTag("");
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale0);
      String string2 = "";
      ParsePosition parsePosition0 = new ParsePosition((-2855));
      parsePosition0.setErrorIndex((-2855));
      // Undeclared exception!
      try { 
        simpleTimeZone0.getDisplayName(false, (-2855));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -2855
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("@FO<Pw0{r;", timeZone0, locale0);
      try { 
        fastDateParser0.parse("@FO<Pw0{r;");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"@FO<Pw0{r;\" does not match @(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("k's%}");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("k's%}", timeZone0, locale0);
      String string0 = null;
      int int0 = 696;
      ParsePosition parsePosition0 = new ParsePosition(696);
      int int1 = 22;
      try { 
        fastDateParser0.parse("k's%}");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"k's%}\" does not match (\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("@FO<Pw0{r;", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("5F3zF#&-p|H}BZOs.", timeZone0, locale0);
      assertEquals("5F3zF#&-p|H}BZOs.", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      ZoneId zoneId0 = zoneOffset0.normalized();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("\"*j", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("fb{0");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("fb{0", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.getDisplayName();
      Locale locale0 = Locale.CHINA;
      locale0.getDisplayScript();
      locale0.toLanguageTag();
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("tbG/PXF;kyL", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }
}
