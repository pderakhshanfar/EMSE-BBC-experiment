/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 07:04:09 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser("WP~j@", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("WP~j@", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(1);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      Object object0 = fastDateParser0.parseObject("&;A", parsePosition0);
      assertNull(object0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("WP~j@", fastDateParser0.getPattern());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^]*+)*+'|[^'A-Za-z]++");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser(" locale does not support dates before 1868 AD)\n", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(" locale does not support dates before 1868 AD)\n", fastDateParser0.getPattern());
      
      Object object0 = fastDateParser0.parseObject("?^L#MA");
      assertNotNull(object0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(" locale does not support dates before 1868 AD)\n", fastDateParser0.getPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(100, "?RV");
      assertNotNull(simpleTimeZone0);
      assertEquals("?RV", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(100, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=?RV,offset=100,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("-", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("?RV", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(100, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=?RV,offset=100,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("-", fastDateParser0.getPattern());
      
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
      assertEquals("?RV", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(100, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=?RV,offset=100,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("-", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-13), "GMTCTT");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=GMTCTT,offset=-13,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-13), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("GMTCTT", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser("8", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("java.util.SimpleTimeZone[id=GMTCTT,offset=-13,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-13), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("GMTCTT", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("8", fastDateParser0.getPattern());
      
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("java.util.SimpleTimeZone[id=GMTCTT,offset=-13,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-13), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("GMTCTT", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("8", fastDateParser0.getPattern());
      assertEquals("java.util.SimpleTimeZone[id=GMTCTT,offset=-13,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals((-13), timeZone0.getRawOffset());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("GMTCTT", timeZone0.getID());
      assertFalse(timeZone0.useDaylightTime());
      assertSame(simpleTimeZone0, timeZone0);
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" locale does not support dates before 1868 AD)\n");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("!ZOEF(sq", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("!ZOEF(sq", fastDateParser0.getPattern());
      
      int int0 = fastDateParser0.adjustYear((-3901));
      assertEquals((-1901), int0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("!ZOEF(sq", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(41, "D<:KgXDy");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=D<:KgXDy,offset=41,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(41, simpleTimeZone0.getRawOffset());
      assertEquals("D<:KgXDy", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("D<:KgXDy", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("java.util.SimpleTimeZone[id=D<:KgXDy,offset=41,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(41, simpleTimeZone0.getRawOffset());
      assertEquals("D<:KgXDy", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("D<:KgXDy", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(41);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=41,errorIndex=-1]", parsePosition0.toString());
      assertEquals(41, parsePosition0.getIndex());
      
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("D<:KgXDy", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("\" does not match ");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser("\" does not match ", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("\" does not match ", fastDateParser0.getPattern());
      
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("\" does not match ", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^]*+)*+'|[^'A-Za-z]++");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^]*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("D+|E+|F+|G+|H+K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^]*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
      
      try { 
        fastDateParser0.parseObject("D+|E+|F+|G+|H+K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^]*+)*+'|[^'A-Za-z]++");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"D+|E+|F+|G+|H+K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^]*+)*+'|[^'A-Za-z]++\" does not match (\\p{IsNd}++)\\+\\|(Di|Dienstag|Do|Donnerstag|Fr|Freitag|Mi|Mittwoch|Mo|Montag|Sa|Samstag|So|Sonntag)\\+\\|(\\p{IsNd}++)\\+\\|(n\\.\\s*+Chr\\.|n\\.\\s*+Chr\\.|v\\.\\s*+Chr\\.|v\\.\\s*+Chr\\.)\\+\\|(\\p{IsNd}++)\\+(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre\\s*+Normalzeit|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistanische\\s*+Zeit|AFT|AKDT|AKST|Alaska\\s*+Normalzeit|Alaska\\s*+Sommerzeit|Alma\\s*+Ata\\s*+Zeit|ALMT|Amazonas\\s*+Normalzeit|AMT|Anadyr\\s*+Zeit|ANAT|Aqtau\\s*+Zeit|Aqtobe\\s*+Zeit|AQTT|Arabische\\s*+Normalzeit|Argentinische\\s*+Zeit|Armenische\\s*+Zeit|ART|Aserbaidschanische\\s*+Zeit|AST|Atlantik\\s*+Normalzeit|Atlantik\\s*+Sommerzeit|AWST|Azoren\\s*+Sommerzeit|Azoren\\s*+Zeit|AZOST|AZOT|AZT|Bangladesch\\s*+Zeit|BDT|Bhutanische\\s*+Zeit|BNT|Bolivianische\\s*+Zeit|BOT|Bougainville\\s*+Standard\\s*+Time|Brasilianische\\s*+Zeit|Britische\\s*+Sommerzeit|BRT|Brunei\\s*+Zeit|BST|BTT|CAT|CCT|CDT|CHADT|Chamorro\\s*+Normalzeit|CHAST|Chatham\\s*+Normalzeit|Chatham\\s*+Sommerzeit|Chilenische\\s*+Sommerzeit|Chilenische\\s*+Zeit|Chinesische\\s*+Normalzeit|Choibalsan\\s*+Zeit|CHOT|Christmas\\s*+Island\\s*+Zeit|ChST|CHUT|Chuuk\\s*+Zeit|CKT|CLST|CLT|Cocos\\s*+Islands\\s*+Zeit|Cook-Inseln\\s*+Zeit|COT|CST|CVT|CXT|Davis\\s*+Zeit|DAVT|DDUT|Dumont-d'Urville\\s*+Zeit|EASST|EAST|EAT|ECT|Ecuadorianische\\s*+Zeit|EDT|EGST|EGT|EST|Falkland\\s*+Inseln\\s*+Zeit|Fernando\\s*+de\\s*+Noronha\\s*+Zeit|Fidschi\\s*+Sommerzeit|Fidschi\\s*+Zeit|FJST|FJT|FKT|FNT|Franz\u00F6sisch\\s*+S\u00FCd-\\s*+u\\.\\s*+Antarktische\\s*+Landzeit|Franz\u00F6sisch-Guiana\\s*+Zeit|Galapagos\\s*+Zeit|GALT|Gambier\\s*+Zeit|GAMT|Georgische\\s*+Zeit|GET|GFT|Ghanaische\\s*+Normalzeit|Gilbert-Inseln\\s*+Zeit|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Golf\\s*+Normalzeit|Greenwich\\s*+Zeit|GST|Guyanische\\s*+Zeit|GYT|Hawaii\\s*+Normalzeit|Hawaii\\s*+Sommerzeit|HDT|HKT|Hongkong\\s*+Zeit|Hovd\\s*+Zeit|HOVT|HST|ICT|IDT|Indische\\s*+Normalzeit|Indischer\\s*+Ozean\\s*+Territorium\\s*+Zeit|Indochina\\s*+Zeit|IOT|Iranische\\s*+Normalzeit|Iranische\\s*+Sommerzeit|IRDT|Irische\\s*+Sommerzeit|IRKT|Irkutsk\\s*+Zeit|IRST|Israelische\\s*+Normalzeit|Israelische\\s*+Sommerzeit|IST|Jakutsk\\s*+Zeit|Japanische\\s*+Normalzeit|Jekaterinburger\\s*+Zeit|JST|Kap\\s*+Verde\\s*+Zeit|KGT|Kirgisische\\s*+Zeit|Kolumbianische\\s*+Zeit|Koordinierte\\s*+Universalzeit|Koreanische\\s*+Normalzeit|Kosrae\\s*+Zeit|KOST|Kostanay\\s*+Standard\\s*+Time|Krasnojarsker\\s*+Zeit|KRAT|KST|Kubanische\\s*+Normalzeit|Kubanische\\s*+Sommerzeit|LHDT|LHST|Line\\s*+Inseln\\s*+Zeit|LINT|Lord\\s*+Howe\\s*+Normalzeit|Lord\\s*+Howe\\s*+Sommerzeit|Macquarieinsel\\s*+Sommerzeit|Macquarieinsel\\s*+Zeit|Magadanische\\s*+Zeit|MAGT|Malaysische\\s*+Zeit|Maledivische\\s*+Zeit|Marquesas\\s*+Zeit|Marshallinseln\\s*+Zeit|MART|Mauritius\\s*+Zeit|Mawson\\s*+Zeit|MAWT|MDT|MEST|MESZ|MET|MEZ|MHT|MIST|Mitteleurop\u00E4ische\\s*+Sommerzeit|Mitteleurop\u00E4ische\\s*+Zeit|MMT|Moskauer\\s*+Normalzeit|MSK|MST|MUT|MVT|Myanmar\\s*+Zeit|MYT|Nauru\\s*+Zeit|NCT|NDT|Nepalesische\\s*+Zeit|Neufundland\\s*+Normalzeit|Neufundland\\s*+Sommerzeit|Neukaledonische\\s*+Zeit|Neuseeland\\s*+Normalzeit|Neuseeland\\s*+Sommerzeit|NFST|NFT|Niue\\s*+Zeit|Norfolk\\s*+Sommerzeit|Norfolk\\s*+Zeit|NOVT|Nowosibirsker\\s*+Zeit|NPT|NRT|NST|NUT|NZDT|NZST|OESZ|OEZ|Omsk\\s*+Zeit|OMST|Oral\\s*+Zeit|ORAT|Ostafrikanische\\s*+Zeit|Osterinseln\\s*+Sommerzeit|Osterinseln\\s*+Zeit|Osteurop\u00E4ische\\s*+Sommerzeit|Osteurop\u00E4ische\\s*+Zeit|Ostgr\u00F6nl\u00E4ndische\\s*+Sommerzeit|Ostgr\u00F6nl\u00E4ndische\\s*+Zeit|Ostindonesische\\s*+Zeit|Pakistanische\\s*+Zeit|Palau\\s*+Zeit|Papua-Neuguinea\\s*+Zeit|Paraguay\\s*+Sommerzeit|Paraguay\\s*+Zeit|Pazifische\\s*+Normalzeit|Pazifische\\s*+Sommerzeit|PDT|Peruanische\\s*+Zeit|PET|Petropawlowsk-Kamtschatkische\\s*+Zeit|PETT|PGT|Philippines\\s*+Standard\\s*+Time|Phoenix\\s*+Inseln\\s*+Zeit|PHOT|Pierre\\s*+&\\s*+Miquelon\\s*+Normalzeit|Pierre\\s*+&\\s*+Miquelon\\s*+Sommerzeit|Pitcairn\\s*+Normalzeit|PKT|PMDT|PMST|Pohnpei\\s*+Zeit|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda\\s*+Zeit|RET|Reunion\\s*+Zeit|Rocky\\s*+Mountains\\s*+Normalzeit|Rocky\\s*+Mountains\\s*+Sommerzeit|Rothera\\s*+Zeit|ROTT|Sakhalin\\s*+Zeit|SAKT|Salomoninseln\\s*+Zeit|Samarische\\s*+Zeit|Samoa\\s*+Normalzeit|SAMT|SAST|SBT|SCT|Seychellen\\s*+Zeit|SGT|Singapur\\s*+Zeit|South\\s*+Georgia\\s*+Normalzeit|Srednekolymsk\\s*+Time|SRET|SRT|SST|Suriname\\s*+Zeit|SYOT|Syowa\\s*+Zeit|S\u00FCdafrikanische\\s*+Normalzeit|Tadschikische\\s*+Zeit|Tahiti\\s*+Zeit|TAHT|TFT|Timor-Leste\\s*+Normalzeit|TJT|TKT|TLT|TMT|Tokelau\\s*+Zeit|Tonga\\s*+Zeit|TOT|Turkmenische\\s*+Zeit|Tuvalu\\s*+Zeit|TVT|Ulaanbaatar\\s*+Zeit|ULAT|Uruguayische\\s*+Zeit|Usbekistan\\s*+Zeit|Ust-Nera\\s*+Zeit|UTC|UYT|UZT|Vanuatu\\s*+Zeit|Venezuelanische\\s*+Zeit|VET|VLAT|VOST|Vostok\\s*+Zeit|VUT|Wake\\s*+Zeit|WAKT|Wallis\\s*+u\\.\\s*+Futuna\\s*+Zeit|WAT|West\\s*+Samoa\\s*+Sommerzeit|West\\s*+Samoa\\s*+Zeit|Westafrikanische\\s*+Zeit|Westeurop\u00E4ische\\s*+Sommerzeit|Westeurop\u00E4ische\\s*+Zeit|Westgr\u00F6nl\u00E4ndische\\s*+Sommerzeit|Westgr\u00F6nl\u00E4ndische\\s*+Zeit|Westindonesische\\s*+Zeit|Westliche\\s*+Normalzeit\\s*+\\(Australien\\)|WESZ|WEZ|WFT|WGST|WGT|WIB|WIT|WITA|Wladiwostok\\s*+Zeit|WSDT|WSST|XJT|YAKT|YEKT|Zentral-Westliche\\s*+Normalzeit\\s*+\\(Australien\\)|Zentralafrikanische\\s*+Zeit|Zentrale\\s*+Normalzeit|Zentrale\\s*+Normalzeit\\s*+\\(Northern\\s*+Territory\\)|Zentrale\\s*+Normalzeit\\s*+\\(S\u00FCdaustralien\\)|Zentrale\\s*+Normalzeit\\s*+\\(S\u00FCdaustralien/New\\s*+South\\s*+Wales\\)|Zentrale\\s*+Sommerzeit|Zentrale\\s*+Sommerzeit\\s*+\\(S\u00FCdaustralien\\)|Zentrale\\s*+Sommerzeit\\s*+\\(S\u00FCdaustralien/New\\s*+South\\s*+Wales\\)|Zentraleurop\u00E4ische\\s*+Sommerzeit|Zentraleurop\u00E4ische\\s*+Zeit|Zentralindonesische\\s*+Zeit|\u00D6stliche\\s*+Normalzeit|\u00D6stliche\\s*+Normalzeit\\s*+\\(New\\s*+South\\s*+Wales\\)|\u00D6stliche\\s*+Normalzeit\\s*+\\(Queensland\\)|\u00D6stliche\\s*+Normalzeit\\s*+\\(Tasmanien\\)|\u00D6stliche\\s*+Normalzeit\\s*+\\(Victoria\\)|\u00D6stliche\\s*+Sommerzeit|\u00D6stliche\\s*+Sommerzeit\\s*+\\(New\\s*+South\\s*+Wales\\)|\u00D6stliche\\s*+Sommerzeit\\s*+\\(Tasmanien\\)|\u00D6stliche\\s*+Sommerzeit\\s*+\\(Victoria\\))\\+\\|(AM|PM)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre\\s*+Normalzeit|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistanische\\s*+Zeit|AFT|AKDT|AKST|Alaska\\s*+Normalzeit|Alaska\\s*+Sommerzeit|Alma\\s*+Ata\\s*+Zeit|ALMT|Amazonas\\s*+Normalzeit|AMT|Anadyr\\s*+Zeit|ANAT|Aqtau\\s*+Zeit|Aqtobe\\s*+Zeit|AQTT|Arabische\\s*+Normalzeit|Argentinische\\s*+Zeit|Armenische\\s*+Zeit|ART|Aserbaidschanische\\s*+Zeit|AST|Atlantik\\s*+Normalzeit|Atlantik\\s*+Sommerzeit|AWST|Azoren\\s*+Sommerzeit|Azoren\\s*+Zeit|AZOST|AZOT|AZT|Bangladesch\\s*+Zeit|BDT|Bhutanische\\s*+Zeit|BNT|Bolivianische\\s*+Zeit|BOT|Bougainville\\s*+Standard\\s*+Time|Brasilianische\\s*+Zeit|Britische\\s*+Sommerzeit|BRT|Brunei\\s*+Zeit|BST|BTT|CAT|CCT|CDT|CHADT|Chamorro\\s*+Normalzeit|CHAST|Chatham\\s*+Normalzeit|Chatham\\s*+Sommerzeit|Chilenische\\s*+Sommerzeit|Chilenische\\s*+Zeit|Chinesische\\s*+Normalzeit|Choibalsan\\s*+Zeit|CHOT|Christmas\\s*+Island\\s*+Zeit|ChST|CHUT|Chuuk\\s*+Zeit|CKT|CLST|CLT|Cocos\\s*+Islands\\s*+Zeit|Cook-Inseln\\s*+Zeit|COT|CST|CVT|CXT|Davis\\s*+Zeit|DAVT|DDUT|Dumont-d'Urville\\s*+Zeit|EASST|EAST|EAT|ECT|Ecuadorianische\\s*+Zeit|EDT|EGST|EGT|EST|Falkland\\s*+Inseln\\s*+Zeit|Fernando\\s*+de\\s*+Noronha\\s*+Zeit|Fidschi\\s*+Sommerzeit|Fidschi\\s*+Zeit|FJST|FJT|FKT|FNT|Franz\u00F6sisch\\s*+S\u00FCd-\\s*+u\\.\\s*+Antarktische\\s*+Landzeit|Franz\u00F6sisch-Guiana\\s*+Zeit|Galapagos\\s*+Zeit|GALT|Gambier\\s*+Zeit|GAMT|Georgische\\s*+Zeit|GET|GFT|Ghanaische\\s*+Normalzeit|Gilbert-Inseln\\s*+Zeit|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Golf\\s*+Normalzeit|Greenwich\\s*+Zeit|GST|Guyanische\\s*+Zeit|GYT|Hawaii\\s*+Normalzeit|Hawaii\\s*+Sommerzeit|HDT|HKT|Hongkong\\s*+Zeit|Hovd\\s*+Zeit|HOVT|HST|ICT|IDT|Indische\\s*+Normalzeit|Indischer\\s*+Ozean\\s*+Territorium\\s*+Zeit|Indochina\\s*+Zeit|IOT|Iranische\\s*+Normalzeit|Iranische\\s*+Sommerzeit|IRDT|Irische\\s*+Sommerzeit|IRKT|Irkutsk\\s*+Zeit|IRST|Israelische\\s*+Normalzeit|Israelische\\s*+Sommerzeit|IST|Jakutsk\\s*+Zeit|Japanische\\s*+Normalzeit|Jekaterinburger\\s*+Zeit|JST|Kap\\s*+Verde\\s*+Zeit|KGT|Kirgisische\\s*+Zeit|Kolumbianische\\s*+Zeit|Koordinierte\\s*+Universalzeit|Koreanische\\s*+Normalzeit|Kosrae\\s*+Zeit|KOST|Kostanay\\s*+Standard\\s*+Time|Krasnojarsker\\s*+Zeit|KRAT|KST|Kubanische\\s*+Normalzeit|Kubanische\\s*+Sommerzeit|LHDT|LHST|Line\\s*+Inseln\\s*+Zeit|LINT|Lord\\s*+Howe\\s*+Normalzeit|Lord\\s*+Howe\\s*+Sommerzeit|Macquarieinsel\\s*+Sommerzeit|Macquarieinsel\\s*+Zeit|Magadanische\\s*+Zeit|MAGT|Malaysische\\s*+Zeit|Maledivische\\s*+Zeit|Marquesas\\s*+Zeit|Marshallinseln\\s*+Zeit|MART|Mauritius\\s*+Zeit|Mawson\\s*+Zeit|MAWT|MDT|MEST|MESZ|MET|MEZ|MHT|MIST|Mitteleurop\u00E4ische\\s*+Sommerzeit|Mitteleurop\u00E4ische\\s*+Zeit|MMT|Moskauer\\s*+Normalzeit|MSK|MST|MUT|MVT|Myanmar\\s*+Zeit|MYT|Nauru\\s*+Zeit|NCT|NDT|Nepalesische\\s*+Zeit|Neufundland\\s*+Normalzeit|Neufundland\\s*+Sommerzeit|Neukaledonische\\s*+Zeit|Neuseeland\\s*+Normalzeit|Neuseeland\\s*+Sommerzeit|NFST|NFT|Niue\\s*+Zeit|Norfolk\\s*+Sommerzeit|Norfolk\\s*+Zeit|NOVT|Nowosibirsker\\s*+Zeit|NPT|NRT|NST|NUT|NZDT|NZST|OESZ|OEZ|Omsk\\s*+Zeit|OMST|Oral\\s*+Zeit|ORAT|Ostafrikanische\\s*+Zeit|Osterinseln\\s*+Sommerzeit|Osterinseln\\s*+Zeit|Osteurop\u00E4ische\\s*+Sommerzeit|Osteurop\u00E4ische\\s*+Zeit|Ostgr\u00F6nl\u00E4ndische\\s*+Sommerzeit|Ostgr\u00F6nl\u00E4ndische\\s*+Zeit|Ostindonesische\\s*+Zeit|Pakistanische\\s*+Zeit|Palau\\s*+Zeit|Papua-Neuguinea\\s*+Zeit|Paraguay\\s*+Sommerzeit|Paraguay\\s*+Zeit|Pazifische\\s*+Normalzeit|Pazifische\\s*+Sommerzeit|PDT|Peruanische\\s*+Zeit|PET|Petropawlowsk-Kamtschatkische\\s*+Zeit|PETT|PGT|Philippines\\s*+Standard\\s*+Time|Phoenix\\s*+Inseln\\s*+Zeit|PHOT|Pierre\\s*+&\\s*+Miquelon\\s*+Normalzeit|Pierre\\s*+&\\s*+Miquelon\\s*+Sommerzeit|Pitcairn\\s*+Normalzeit|PKT|PMDT|PMST|Pohnpei\\s*+Zeit|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda\\s*+Zeit|RET|Reunion\\s*+Zeit|Rocky\\s*+Mountains\\s*+Normalzeit|Rocky\\s*+Mountains\\s*+Sommerzeit|Rothera\\s*+Zeit|ROTT|Sakhalin\\s*+Zeit|SAKT|Salomoninseln\\s*+Zeit|Samarische\\s*+Zeit|Samoa\\s*+Normalzeit|SAMT|SAST|SBT|SCT|Seychellen\\s*+Zeit|SGT|Singapur\\s*+Zeit|South\\s*+Georgia\\s*+Normalzeit|Srednekolymsk\\s*+Time|SRET|SRT|SST|Suriname\\s*+Zeit|SYOT|Syowa\\s*+Zeit|S\u00FCdafrikanische\\s*+Normalzeit|Tadschikische\\s*+Zeit|Tahiti\\s*+Zeit|TAHT|TFT|Timor-Leste\\s*+Normalzeit|TJT|TKT|TLT|TMT|Tokelau\\s*+Zeit|Tonga\\s*+Zeit|TOT|Turkmenische\\s*+Zeit|Tuvalu\\s*+Zeit|TVT|Ulaanbaatar\\s*+Zeit|ULAT|Uruguayische\\s*+Zeit|Usbekistan\\s*+Zeit|Ust-Nera\\s*+Zeit|UTC|UYT|UZT|Vanuatu\\s*+Zeit|Venezuelanische\\s*+Zeit|VET|VLAT|VOST|Vostok\\s*+Zeit|VUT|Wake\\s*+Zeit|WAKT|Wallis\\s*+u\\.\\s*+Futuna\\s*+Zeit|WAT|West\\s*+Samoa\\s*+Sommerzeit|West\\s*+Samoa\\s*+Zeit|Westafrikanische\\s*+Zeit|Westeurop\u00E4ische\\s*+Sommerzeit|Westeurop\u00E4ische\\s*+Zeit|Westgr\u00F6nl\u00E4ndische\\s*+Sommerzeit|Westgr\u00F6nl\u00E4ndische\\s*+Zeit|Westindonesische\\s*+Zeit|Westliche\\s*+Normalzeit\\s*+\\(Australien\\)|WESZ|WEZ|WFT|WGST|WGT|WIB|WIT|WITA|Wladiwostok\\s*+Zeit|WSDT|WSST|XJT|YAKT|YEKT|Zentral-Westliche\\s*+Normalzeit\\s*+\\(Australien\\)|Zentralafrikanische\\s*+Zeit|Zentrale\\s*+Normalzeit|Zentrale\\s*+Normalzeit\\s*+\\(Northern\\s*+Territory\\)|Zentrale\\s*+Normalzeit\\s*+\\(S\u00FCdaustralien\\)|Zentrale\\s*+Normalzeit\\s*+\\(S\u00FCdaustralien/New\\s*+South\\s*+Wales\\)|Zentrale\\s*+Sommerzeit|Zentrale\\s*+Sommerzeit\\s*+\\(S\u00FCdaustralien\\)|Zentrale\\s*+Sommerzeit\\s*+\\(S\u00FCdaustralien/New\\s*+South\\s*+Wales\\)|Zentraleurop\u00E4ische\\s*+Sommerzeit|Zentraleurop\u00E4ische\\s*+Zeit|Zentralindonesische\\s*+Zeit|\u00D6stliche\\s*+Normalzeit|\u00D6stliche\\s*+Normalzeit\\s*+\\(New\\s*+South\\s*+Wales\\)|\u00D6stliche\\s*+Normalzeit\\s*+\\(Queensland\\)|\u00D6stliche\\s*+Normalzeit\\s*+\\(Tasmanien\\)|\u00D6stliche\\s*+Normalzeit\\s*+\\(Victoria\\)|\u00D6stliche\\s*+Sommerzeit|\u00D6stliche\\s*+Sommerzeit\\s*+\\(New\\s*+South\\s*+Wales\\)|\u00D6stliche\\s*+Sommerzeit\\s*+\\(Tasmanien\\)|\u00D6stliche\\s*+Sommerzeit\\s*+\\(Victoria\\))\\+\\|'\\|\\[\\^\\]\\+\\+\\('\\[\\^\\]\\*\\+\\)\\*\\+\\|\\[\\^
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D<:KgXDy");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("D<:KgXDy", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("D<:KgXDy", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(106);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=106,errorIndex=-1]", parsePosition0.toString());
      assertEquals(106, parsePosition0.getIndex());
      
      // Undeclared exception!
      try { 
        fastDateParser0.parse("D<:KgXDy", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("w<|h&,");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser("w<|h&,", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("w<|h&,", fastDateParser0.getPattern());
      
      // Undeclared exception!
      try { 
        fastDateParser0.parse("w<|h&,", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("krjAsS(!EoQ");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDateParser fastDateParser0 = new FastDateParser("krjAsS(!EoQ", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("krjAsS(!EoQ", fastDateParser0.getPattern());
      
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(100, "WP~j@");
      assertNotNull(simpleTimeZone0);
      assertEquals("WP~j@", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(100, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=WP~j@,offset=100,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("WP~j@", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("WP~j@", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(100, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=WP~j@,offset=100,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("WP~j@", fastDateParser0.getPattern());
      
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("W)YAtU}F", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("\"rdc/+{hm");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDateParser fastDateParser0 = new FastDateParser("DWkZ\\;> . W*Ibp", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("DWkZ\\;> . W*Ibp", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("?RV");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser("w|G^&,", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("w|G^&,", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      
      Date date0 = fastDateParser0.parse("337oGByV:#L$hV", parsePosition0);
      assertNull(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("w|G^&,", fastDateParser0.getPattern());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(114, "GMT_T");
      assertNotNull(simpleTimeZone0);
      assertEquals("GMT_T", simpleTimeZone0.getID());
      assertEquals(114, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=GMT_T,offset=114,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser("WP~j@", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT_T", simpleTimeZone0.getID());
      assertEquals(114, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=GMT_T,offset=114,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("WP~j@", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      Date date0 = fastDateParser0.parse("3hCu@!E)]v", parsePosition0);
      assertNotNull(date0);
      assertEquals("GMT_T", simpleTimeZone0.getID());
      assertEquals(114, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=GMT_T,offset=114,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("WP~j@", fastDateParser0.getPattern());
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDateParser fastDateParser0 = new FastDateParser("_3OGUM8E:U??6~", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("_3OGUM8E:U??6~", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a^z5Qdu\"SEJo3A@j");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser("a^z5Qdu\"SEJo3A@j", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("a^z5Qdu\"SEJo3A@j", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("?RV");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser("?RV", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("?RV", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser(">", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(">", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("=");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDateParser fastDateParser0 = new FastDateParser("=", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("=", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser(":yH`rxI$G[tC02", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(":yH`rxI$G[tC02", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("8$6y");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDateParser fastDateParser0 = new FastDateParser("8$6y", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("8$6y", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1536), "D<:KgXDy");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("D<:KgXDy", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=D<:KgXDy,offset=-1536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1536), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser("y72Dx)4g]W[s", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("D<:KgXDy", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=D<:KgXDy,offset=-1536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1536), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("y72Dx)4g]W[s", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("6}}.U");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("6}}.U", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("6}}.U", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3Ry)s4HHWoHP_I&Rk0");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("3Ry)s4HHWoHP_I&Rk0", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("3Ry)s4HHWoHP_I&Rk0", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser("2zJV", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("2zJV", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("1q");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser("1q", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("1q", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("0", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("0", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("/Ca~$`,h", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("/Ca~$`,h", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(".p]rh");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser(".p]rh", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(".p]rh", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("&|h,");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDateParser fastDateParser0 = new FastDateParser("&|h,", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("&|h,", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDateParser fastDateParser0 = new FastDateParser(")lqe(", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(")lqe(", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1536), "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-zy++");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-zy++", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-1536));
      assertEquals(464, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(114, "GMT_T");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("WP~j@", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(4037);
      assertEquals(5937, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|+K+|M+|S+|W+|Z+|a+|d+|h+|k+|m|s+|w|y+|z+|''|'[^']++(''[^]*+)*+'|[^'-Za-z]++");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|+K+|M+|S+|W+|Z+|a+|d+|h+|k+|m|s+|w|y+|z+|''|'[^']++(''[^]*+)*+'|[^'-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|+K+|M+|S+|W+|Z+|a+|d+|h+|k+|m|s+|w|y+|z+|''|'[^']++(''[^]*+)*+'|[^'-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("\" does not match ");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("4{}J7L*Oo2H4p zt<M", timeZone0, locale0);
      assertEquals("4{}J7L*Oo2H4p zt<M", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("\" doWWno m/atch+ ");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("\" doWWno m/atch+ ", timeZone0, locale0);
      try { 
        fastDateParser0.parse("\" doWWno m/atch+ ");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"\" doWWno m/atch+ \" does not match \"\\s*+(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.UK;
      TimeZone timeZone0 = TimeZone.getTimeZone("\"rdc/+{hm");
      FastDateParser fastDateParser0 = new FastDateParser("wsjYn6%a-5L", timeZone0, locale0);
      try { 
        fastDateParser0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match (\\p{IsNd}{1}+)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("\" does notB match ");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("\" does notB match ", timeZone0, locale0);
      Locale locale1 = Locale.ITALY;
      FastDateParser fastDateParser1 = new FastDateParser("\" does notB match ", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(108, "WP~j@");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("WP~j@", simpleTimeZone0, locale0);
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser1 = new FastDateParser("WP~j@", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("-om");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("-om", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("5I[i1clNbTy4", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^]*+)*+'|[^'A-Za-z]++");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^]*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(timeZone0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("-om");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("-om", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("\" does not match ");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("jEmu&(RUB&,>6-", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      TimeZone timeZone0 = TimeZone.getTimeZone("D<:KgXDy");
      FastDateParser fastDateParser0 = new FastDateParser("D<:KgXDy", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\\p{IsNd}++)<:(\\p{IsNd}++)", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(17, "D<:KgXDy");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("GMTCNT", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("@aK");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("@aK", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("WP~j@");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("WP~j@", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("zho", locale1.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D<@:KgXDy");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("D<@:KgXDy", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("D<@:KgXDy", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(111, "GMT_T");
      Locale locale0 = Locale.forLanguageTag("GMT_T");
      FastDateParser fastDateParser0 = new FastDateParser("WP~j@", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(6);
      fastDateParser0.parseObject("lY,?m#4|+`q'ABGo", parsePosition0);
      assertEquals("java.text.ParsePosition[index=7,errorIndex=-1]", parsePosition0.toString());
      assertEquals(7, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.UK;
      TimeZone timeZone0 = TimeZone.getTimeZone("\"rdc/+{hm");
      FastDateParser fastDateParser0 = new FastDateParser("wsjYn6%a-5L", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[wsjYn6%a-5L,en_GB,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("(jwc0{L", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("do", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("3;");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("w<|h&,");
      FastDateParser fastDateParser0 = new FastDateParser("9%>$@?HWh*P+TW", timeZone0, locale0);
      assertEquals("9%>$@?HWh*P+TW", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Locale locale0 = Locale.UK;
      TimeZone timeZone0 = TimeZone.getTimeZone("\"rdc/+{hm");
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[wsjYn6%a-5L,en_GB,GMT]", timeZone0, locale0);
      assertEquals("FastDateParser[wsjYn6%a-5L,en_GB,GMT]", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getTimeZone("z;p/");
      FastDateParser fastDateParser0 = new FastDateParser("z;p/", timeZone0, locale0);
      assertEquals("z;p/", fastDateParser0.getPattern());
  }
}
