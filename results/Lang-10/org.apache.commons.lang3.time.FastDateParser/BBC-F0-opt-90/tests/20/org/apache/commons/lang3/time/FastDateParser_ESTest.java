/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:04:51 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=?Y");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("=?Y", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(105);
      assertEquals(2005, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("Fq(", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parse(";7\"#M", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-3067));
      parsePosition0.setIndex(0);
      Object object0 = fastDateParser0.parseObject("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=?Y");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("=?Y", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("=?Y");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("ESd=$Jn50XG3)K)", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      String string0 = "dP\\u3Krk%#(c+1D@Bq";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "GMTBET", 352, 0, 1254, 1254, 102, 352, 0, (-2085), 102, 352, 102);
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "GMTNET");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("!fxz+<K~YsY{|Yvql@$", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=?Y");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("=?Y", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-3036));
      assertEquals((-1036), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("w!#M-/pAo_.sf", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(245);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("6MS", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      ParsePosition parsePosition0 = new ParsePosition((-800));
      FastDateParser fastDateParser0 = new FastDateParser("E9^#m6ZhdhK`eOaBkt", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("E9^#m6ZhdhK`eOaBkt", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("", " locale does not support dates before 1868 AD)\n");
      FastDateParser fastDateParser0 = new FastDateParser(" locale does not support dates before 1868 AD)\n", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("py$d{ukY0D\")6Vtx", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("", " locale does not support dates before 1868 AD)\n");
      FastDateParser fastDateParser0 = new FastDateParser(" locale does not support dates before 1868 AD)\n", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("ko", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("#JS'8X05;.eC</J4Ud");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("_kKIU-CN@P798", timeZone0, locale0);
      assertEquals("_kKIU-CN@P798", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("|h?<%j\"f8 '", timeZone0, locale0);
      assertEquals("|h?<%j\"f8 '", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(">8");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser(">8", timeZone0, locale0);
      assertEquals(">8", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("\" does not match ");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(";:", timeZone0, locale0);
      assertEquals(";:", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser(":K]2tNLK", timeZone0, locale0);
      assertEquals(":K]2tNLK", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("8+)x)2H.`@gDei&GL", timeZone0, locale0);
      assertEquals("8+)x)2H.`@gDei&GL", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("#JS'8X05;.eC</J4Ud");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("h7H", timeZone0, locale0);
      assertEquals("h7H", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getTimeZone("5 5YLS i");
      FastDateParser fastDateParser0 = new FastDateParser("5 5YLS i", timeZone0, locale0);
      assertEquals("5 5YLS i", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("@}XRf:8thF$?\"");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("4z<m.z<sEyxhy+.|rJr", timeZone0, locale0);
      assertEquals("4z<m.z<sEyxhy+.|rJr", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("@}XRf:8thF$?\"");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("3dq1@e]R(ax7ED6(:", timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("#JS'8X05;.eC</J4Ud");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("1R/u%", timeZone0, locale0);
      assertEquals("1R/u%", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=?Y");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("Zd0b4m", simpleTimeZone0, locale0);
      assertEquals("Zd0b4m", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2016, "9s(jBj?+$U^Xd");
      FastDateParser fastDateParser0 = new FastDateParser("/'_", simpleTimeZone0, locale0);
      assertEquals("/'_", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-968), "=?Y");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser(".oCf", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(3307);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("7.8v", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-968), "9s(jBj?+$U^Xd");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser(",", simpleTimeZone0, locale0);
      assertEquals(",", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("s*+", timeZone0, locale0);
      assertEquals("s*+", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-7), "=?");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("}W)E@?", simpleTimeZone0, locale0);
      assertEquals("}W)E@?", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2016, "9s(jBj?+$U^Xd");
      FastDateParser fastDateParser0 = new FastDateParser("9s(jBj?+$U^Xd", simpleTimeZone0, locale0);
      assertEquals("9s(jBj?+$U^Xd", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("kSq{P1K$HJpA(z)");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("{Pd!^>!Gy", timeZone0, locale0);
      assertEquals("{Pd!^>!Gy", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "s%qHF%GhigeQ^/");
      FastDateParser fastDateParser0 = new FastDateParser("kSq{P1K$HJpA(z)", simpleTimeZone0, locale0);
      TimeZone timeZone0 = TimeZone.getTimeZone("kSq{P1K$HJpA(z)");
      FastDateParser fastDateParser1 = new FastDateParser("kSq{P1K$HJpA(z)", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("=?");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("=?", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("%]9h^jBg'|Ilv2hEp#=", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(timeZone0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("=?");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("=?", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("th.5`G", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("}#%yy^UW+q<");
      FastDateParser fastDateParser0 = new FastDateParser("hYK.egr", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("3nl^y=:7 V.M)l`gg");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("}yycIPx8+'`z<", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("\\}(\\p{IsNd}++)", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-7), "=?");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("=?", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("=?", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("CNT");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"CNT\" does not match (\\p{IsNd}++)\\+\\|(Di|Dienstag|Do|Donnerstag|Fr|Freitag|Mi|Mittwoch|Mo|Montag|Sa|Samstag|So|Sonntag)\\+\\|(\\p{IsNd}++)\\+(n\\.\\s*+Chr\\.|n\\.\\s*+Chr\\.|v\\.\\s*+Chr\\.|v\\.\\s*+Chr\\.)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre\\s*+Normalzeit|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistanische\\s*+Zeit|AFT|AKDT|AKST|Alaska\\s*+Normalzeit|Alaska\\s*+Sommerzeit|Alma\\s*+Ata\\s*+Zeit|ALMT|Amazonas\\s*+Normalzeit|AMT|Anadyr\\s*+Zeit|ANAT|Aqtau\\s*+Zeit|Aqtobe\\s*+Zeit|AQTT|Arabische\\s*+Normalzeit|Argentinische\\s*+Zeit|Armenische\\s*+Zeit|ART|Aserbaidschanische\\s*+Zeit|AST|Atlantik\\s*+Normalzeit|Atlantik\\s*+Sommerzeit|AWST|Azoren\\s*+Sommerzeit|Azoren\\s*+Zeit|AZOST|AZOT|AZT|Bangladesch\\s*+Zeit|BDT|Bhutanische\\s*+Zeit|BNT|Bolivianische\\s*+Zeit|BOT|Bougainville\\s*+Standard\\s*+Time|Brasilianische\\s*+Zeit|Britische\\s*+Sommerzeit|BRT|Brunei\\s*+Zeit|BST|BTT|CAT|CCT|CDT|CHADT|Chamorro\\s*+Normalzeit|CHAST|Chatham\\s*+Normalzeit|Chatham\\s*+Sommerzeit|Chilenische\\s*+Sommerzeit|Chilenische\\s*+Zeit|Chinesische\\s*+Normalzeit|Choibalsan\\s*+Zeit|CHOT|Christmas\\s*+Island\\s*+Zeit|ChST|CHUT|Chuuk\\s*+Zeit|CKT|CLST|CLT|Cocos\\s*+Islands\\s*+Zeit|Cook-Inseln\\s*+Zeit|COT|CST|CVT|CXT|Davis\\s*+Zeit|DAVT|DDUT|Dumont-d'Urville\\s*+Zeit|EASST|EAST|EAT|ECT|Ecuadorianische\\s*+Zeit|EDT|EGST|EGT|EST|Falkland\\s*+Inseln\\s*+Zeit|Fernando\\s*+de\\s*+Noronha\\s*+Zeit|Fidschi\\s*+Sommerzeit|Fidschi\\s*+Zeit|FJST|FJT|FKT|FNT|Franz\u00F6sisch\\s*+S\u00FCd-\\s*+u\\.\\s*+Antarktische\\s*+Landzeit|Franz\u00F6sisch-Guiana\\s*+Zeit|Galapagos\\s*+Zeit|GALT|Gambier\\s*+Zeit|GAMT|Georgische\\s*+Zeit|GET|GFT|Ghanaische\\s*+Normalzeit|Gilbert-Inseln\\s*+Zeit|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Golf\\s*+Normalzeit|Greenwich\\s*+Zeit|GST|Guyanische\\s*+Zeit|GYT|Hawaii\\s*+Normalzeit|Hawaii\\s*+Sommerzeit|HDT|HKT|Hongkong\\s*+Zeit|Hovd\\s*+Zeit|HOVT|HST|ICT|IDT|Indische\\s*+Normalzeit|Indischer\\s*+Ozean\\s*+Territorium\\s*+Zeit|Indochina\\s*+Zeit|IOT|Iranische\\s*+Normalzeit|Iranische\\s*+Sommerzeit|IRDT|Irische\\s*+Sommerzeit|IRKT|Irkutsk\\s*+Zeit|IRST|Israelische\\s*+Normalzeit|Israelische\\s*+Sommerzeit|IST|Jakutsk\\s*+Zeit|Japanische\\s*+Normalzeit|Jekaterinburger\\s*+Zeit|JST|Kap\\s*+Verde\\s*+Zeit|KGT|Kirgisische\\s*+Zeit|Kolumbianische\\s*+Zeit|Koordinierte\\s*+Universalzeit|Koreanische\\s*+Normalzeit|Kosrae\\s*+Zeit|KOST|Kostanay\\s*+Standard\\s*+Time|Krasnojarsker\\s*+Zeit|KRAT|KST|Kubanische\\s*+Normalzeit|Kubanische\\s*+Sommerzeit|LHDT|LHST|Line\\s*+Inseln\\s*+Zeit|LINT|Lord\\s*+Howe\\s*+Normalzeit|Lord\\s*+Howe\\s*+Sommerzeit|Macquarieinsel\\s*+Sommerzeit|Macquarieinsel\\s*+Zeit|Magadanische\\s*+Zeit|MAGT|Malaysische\\s*+Zeit|Maledivische\\s*+Zeit|Marquesas\\s*+Zeit|Marshallinseln\\s*+Zeit|MART|Mauritius\\s*+Zeit|Mawson\\s*+Zeit|MAWT|MDT|MEST|MESZ|MET|MEZ|MHT|MIST|Mitteleurop\u00E4ische\\s*+Sommerzeit|Mitteleurop\u00E4ische\\s*+Zeit|MMT|Moskauer\\s*+Normalzeit|MSK|MST|MUT|MVT|Myanmar\\s*+Zeit|MYT|Nauru\\s*+Zeit|NCT|NDT|Nepalesische\\s*+Zeit|Neufundland\\s*+Normalzeit|Neufundland\\s*+Sommerzeit|Neukaledonische\\s*+Zeit|Neuseeland\\s*+Normalzeit|Neuseeland\\s*+Sommerzeit|NFST|NFT|Niue\\s*+Zeit|Norfolk\\s*+Sommerzeit|Norfolk\\s*+Zeit|NOVT|Nowosibirsker\\s*+Zeit|NPT|NRT|NST|NUT|NZDT|NZST|OESZ|OEZ|Omsk\\s*+Zeit|OMST|Oral\\s*+Zeit|ORAT|Ostafrikanische\\s*+Zeit|Osterinseln\\s*+Sommerzeit|Osterinseln\\s*+Zeit|Osteurop\u00E4ische\\s*+Sommerzeit|Osteurop\u00E4ische\\s*+Zeit|Ostgr\u00F6nl\u00E4ndische\\s*+Sommerzeit|Ostgr\u00F6nl\u00E4ndische\\s*+Zeit|Ostindonesische\\s*+Zeit|Pakistanische\\s*+Zeit|Palau\\s*+Zeit|Papua-Neuguinea\\s*+Zeit|Paraguay\\s*+Sommerzeit|Paraguay\\s*+Zeit|Pazifische\\s*+Normalzeit|Pazifische\\s*+Sommerzeit|PDT|Peruanische\\s*+Zeit|PET|Petropawlowsk-Kamtschatkische\\s*+Zeit|PETT|PGT|Philippines\\s*+Standard\\s*+Time|Phoenix\\s*+Inseln\\s*+Zeit|PHOT|Pierre\\s*+&\\s*+Miquelon\\s*+Normalzeit|Pierre\\s*+&\\s*+Miquelon\\s*+Sommerzeit|Pitcairn\\s*+Normalzeit|PKT|PMDT|PMST|Pohnpei\\s*+Zeit|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda\\s*+Zeit|RET|Reunion\\s*+Zeit|Rocky\\s*+Mountains\\s*+Normalzeit|Rocky\\s*+Mountains\\s*+Sommerzeit|Rothera\\s*+Zeit|ROTT|Sakhalin\\s*+Zeit|SAKT|Salomoninseln\\s*+Zeit|Samarische\\s*+Zeit|Samoa\\s*+Normalzeit|SAMT|SAST|SBT|SCT|Seychellen\\s*+Zeit|SGT|Singapur\\s*+Zeit|South\\s*+Georgia\\s*+Normalzeit|Srednekolymsk\\s*+Time|SRET|SRT|SST|Suriname\\s*+Zeit|SYOT|Syowa\\s*+Zeit|S\u00FCdafrikanische\\s*+Normalzeit|Tadschikische\\s*+Zeit|Tahiti\\s*+Zeit|TAHT|TFT|Timor-Leste\\s*+Normalzeit|TJT|TKT|TLT|TMT|Tokelau\\s*+Zeit|Tonga\\s*+Zeit|TOT|Turkmenische\\s*+Zeit|Tuvalu\\s*+Zeit|TVT|Ulaanbaatar\\s*+Zeit|ULAT|Uruguayische\\s*+Zeit|Usbekistan\\s*+Zeit|Ust-Nera\\s*+Zeit|UTC|UYT|UZT|Vanuatu\\s*+Zeit|Venezuelanische\\s*+Zeit|VET|VLAT|VOST|Vostok\\s*+Zeit|VUT|Wake\\s*+Zeit|WAKT|Wallis\\s*+u\\.\\s*+Futuna\\s*+Zeit|WAT|West\\s*+Samoa\\s*+Sommerzeit|West\\s*+Samoa\\s*+Zeit|Westafrikanische\\s*+Zeit|Westeurop\u00E4ische\\s*+Sommerzeit|Westeurop\u00E4ische\\s*+Zeit|Westgr\u00F6nl\u00E4ndische\\s*+Sommerzeit|Westgr\u00F6nl\u00E4ndische\\s*+Zeit|Westindonesische\\s*+Zeit|Westliche\\s*+Normalzeit\\s*+\\(Australien\\)|WESZ|WEZ|WFT|WGST|WGT|WIB|WIT|WITA|Wladiwostok\\s*+Zeit|WSDT|WSST|XJT|YAKT|YEKT|Zentral-Westliche\\s*+Normalzeit\\s*+\\(Australien\\)|Zentralafrikanische\\s*+Zeit|Zentrale\\s*+Normalzeit|Zentrale\\s*+Normalzeit\\s*+\\(Northern\\s*+Territory\\)|Zentrale\\s*+Normalzeit\\s*+\\(S\u00FCdaustralien\\)|Zentrale\\s*+Normalzeit\\s*+\\(S\u00FCdaustralien/New\\s*+South\\s*+Wales\\)|Zentrale\\s*+Sommerzeit|Zentrale\\s*+Sommerzeit\\s*+\\(S\u00FCdaustralien\\)|Zentrale\\s*+Sommerzeit\\s*+\\(S\u00FCdaustralien/New\\s*+South\\s*+Wales\\)|Zentraleurop\u00E4ische\\s*+Sommerzeit|Zentraleurop\u00E4ische\\s*+Zeit|Zentralindonesische\\s*+Zeit|\u00D6stliche\\s*+Normalzeit|\u00D6stliche\\s*+Normalzeit\\s*+\\(New\\s*+South\\s*+Wales\\)|\u00D6stliche\\s*+Normalzeit\\s*+\\(Queensland\\)|\u00D6stliche\\s*+Normalzeit\\s*+\\(Tasmanien\\)|\u00D6stliche\\s*+Normalzeit\\s*+\\(Victoria\\)|\u00D6stliche\\s*+Sommerzeit|\u00D6stliche\\s*+Sommerzeit\\s*+\\(New\\s*+South\\s*+Wales\\)|\u00D6stliche\\s*+Sommerzeit\\s*+\\(Tasmanien\\)|\u00D6stliche\\s*+Sommerzeit\\s*+\\(Victoria\\))\\+\\|(AM|PM)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre\\s*+Normalzeit|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistanische\\s*+Zeit|AFT|AKDT|AKST|Alaska\\s*+Normalzeit|Alaska\\s*+Sommerzeit|Alma\\s*+Ata\\s*+Zeit|ALMT|Amazonas\\s*+Normalzeit|AMT|Anadyr\\s*+Zeit|ANAT|Aqtau\\s*+Zeit|Aqtobe\\s*+Zeit|AQTT|Arabische\\s*+Normalzeit|Argentinische\\s*+Zeit|Armenische\\s*+Zeit|ART|Aserbaidschanische\\s*+Zeit|AST|Atlantik\\s*+Normalzeit|Atlantik\\s*+Sommerzeit|AWST|Azoren\\s*+Sommerzeit|Azoren\\s*+Zeit|AZOST|AZOT|AZT|Bangladesch\\s*+Zeit|BDT|Bhutanische\\s*+Zeit|BNT|Bolivianische\\s*+Zeit|BOT|Bougainville\\s*+Standard\\s*+Time|Brasilianische\\s*+Zeit|Britische\\s*+Sommerzeit|BRT|Brunei\\s*+Zeit|BST|BTT|CAT|CCT|CDT|CHADT|Chamorro\\s*+Normalzeit|CHAST|Chatham\\s*+Normalzeit|Chatham\\s*+Sommerzeit|Chilenische\\s*+Sommerzeit|Chilenische\\s*+Zeit|Chinesische\\s*+Normalzeit|Choibalsan\\s*+Zeit|CHOT|Christmas\\s*+Island\\s*+Zeit|ChST|CHUT|Chuuk\\s*+Zeit|CKT|CLST|CLT|Cocos\\s*+Islands\\s*+Zeit|Cook-Inseln\\s*+Zeit|COT|CST|CVT|CXT|Davis\\s*+Zeit|DAVT|DDUT|Dumont-d'Urville\\s*+Zeit|EASST|EAST|EAT|ECT|Ecuadorianische\\s*+Zeit|EDT|EGST|EGT|EST|Falkland\\s*+Inseln\\s*+Zeit|Fernando\\s*+de\\s*+Noronha\\s*+Zeit|Fidschi\\s*+Sommerzeit|Fidschi\\s*+Zeit|FJST|FJT|FKT|FNT|Franz\u00F6sisch\\s*+S\u00FCd-\\s*+u\\.\\s*+Antarktische\\s*+Landzeit|Franz\u00F6sisch-Guiana\\s*+Zeit|Galapagos\\s*+Zeit|GALT|Gambier\\s*+Zeit|GAMT|Georgische\\s*+Zeit|GET|GFT|Ghanaische\\s*+Normalzeit|Gilbert-Inseln\\s*+Zeit|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Golf\\s*+Normalzeit|Greenwich\\s*+Zeit|GST|Guyanische\\s*+Zeit|GYT|Hawaii\\s*+Normalzeit|Hawaii\\s*+Sommerzeit|HDT|HKT|Hongkong\\s*+Zeit|Hovd\\s*+Zeit|HOVT|HST|ICT|IDT|Indische\\s*+Normalzeit|Indischer\\s*+Ozean\\s*+Territorium\\s*+Zeit|Indochina\\s*+Zeit|IOT|Iranische\\s*+Normalzeit|Iranische\\s*+Sommerzeit|IRDT|Irische\\s*+Sommerzeit|IRKT|Irkutsk\\s*+Zeit|IRST|Israelische\\s*+Normalzeit|Israelische\\s*+Sommerzeit|IST|Jakutsk\\s*+Zeit|Japanische\\s*+Normalzeit|Jekaterinburger\\s*+Zeit|JST|Kap\\s*+Verde\\s*+Zeit|KGT|Kirgisische\\s*+Zeit|Kolumbianische\\s*+Zeit|Koordinierte\\s*+Universalzeit|Koreanische\\s*+Normalzeit|Kosrae\\s*+Zeit|KOST|Kostanay\\s*+Standard\\s*+Time|Krasnojarsker\\s*+Zeit|KRAT|KST|Kubanische\\s*+Normalzeit|Kubanische\\s*+Sommerzeit|LHDT|LHST|Line\\s*+Inseln\\s*+Zeit|LINT|Lord\\s*+Howe\\s*+Normalzeit|Lord\\s*+Howe\\s*+Sommerzeit|Macquarieinsel\\s*+Sommerzeit|Macquarieinsel\\s*+Zeit|Magadanische\\s*+Zeit|MAGT|Malaysische\\s*+Zeit|Maledivische\\s*+Zeit|Marquesas\\s*+Zeit|Marshallinseln\\s*+Zeit|MART|Mauritius\\s*+Zeit|Mawson\\s*+Zeit|MAWT|MDT|MEST|MESZ|MET|MEZ|MHT|MIST|Mitteleurop\u00E4ische\\s*+Sommerzeit|Mitteleurop\u00E4ische\\s*+Zeit|MMT|Moskauer\\s*+Normalzeit|MSK|MST|MUT|MVT|Myanmar\\s*+Zeit|MYT|Nauru\\s*+Zeit|NCT|NDT|Nepalesische\\s*+Zeit|Neufundland\\s*+Normalzeit|Neufundland\\s*+Sommerzeit|Neukaledonische\\s*+Zeit|Neuseeland\\s*+Normalzeit|Neuseeland\\s*+Sommerzeit|NFST|NFT|Niue\\s*+Zeit|Norfolk\\s*+Sommerzeit|Norfolk\\s*+Zeit|NOVT|Nowosibirsker\\s*+Zeit|NPT|NRT|NST|NUT|NZDT|NZST|OESZ|OEZ|Omsk\\s*+Zeit|OMST|Oral\\s*+Zeit|ORAT|Ostafrikanische\\s*+Zeit|Osterinseln\\s*+Sommerzeit|Osterinseln\\s*+Zeit|Osteurop\u00E4ische\\s*+Sommerzeit|Osteurop\u00E4ische\\s*+Zeit|Ostgr\u00F6nl\u00E4ndische\\s*+Sommerzeit|Ostgr\u00F6nl\u00E4ndische\\s*+Zeit|Ostindonesische\\s*+Zeit|Pakistanische\\s*+Zeit|Palau\\s*+Zeit|Papua-Neuguinea\\s*+Zeit|Paraguay\\s*+Sommerzeit|Paraguay\\s*+Zeit|Pazifische\\s*+Normalzeit|Pazifische\\s*+Sommerzeit|PDT|Peruanische\\s*+Zeit|PET|Petropawlowsk-Kamtschatkische\\s*+Zeit|PETT|PGT|Philippines\\s*+Standard\\s*+Time|Phoenix\\s*+Inseln\\s*+Zeit|PHOT|Pierre\\s*+&\\s*+Miquelon\\s*+Normalzeit|Pierre\\s*+&\\s*+Miquelon\\s*+Sommerzeit|Pitcairn\\s*+Normalzeit|PKT|PMDT|PMST|Pohnpei\\s*+Zeit|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda\\s*+Zeit|RET|Reunion\\s*+Zeit|Rocky\\s*+Mountains\\s*+Normalzeit|Rocky\\s*+Mountains\\s*+Sommerzeit|Rothera\\s*+Zeit|ROTT|Sakhalin\\s*+Zeit|SAKT|Salomoninseln\\s*+Zeit|Samarische\\s*+Zeit|Samoa\\s*+Normalzeit|SAMT|SAST|SBT|SCT|Seychellen\\s*+Zeit|SGT|Singapur\\s*+Zeit|South\\s*+Georgia\\s*+Normalzeit|Srednekolymsk\\s*+Time|SRET|SRT|SST|Suriname\\s*+Zeit|SYOT|Syowa\\s*+Zeit|S\u00FCdafrikanische\\s*+Normalzeit|Tadschikische\\s*+Zeit|Tahiti\\s*+Zeit|TAHT|TFT|Timor-Leste\\s*+Normalzeit|TJT|TKT|TLT|TMT|Tokelau\\s*+Zeit|Tonga\\s*+Zeit|TOT|Turkmenische\\s*+Zeit|Tuvalu\\s*+Zeit|TVT|Ulaanbaatar\\s*+Zeit|ULAT|Uruguayische\\s*+Zeit|Usbekistan\\s*+Zeit|Ust-Nera\\s*+Zeit|UTC|UYT|UZT|Vanuatu\\s*+Zeit|Venezuelanische\\s*+Zeit|VET|VLAT|VOST|Vostok\\s*+Zeit|VUT|Wake\\s*+Zeit|WAKT|Wallis\\s*+u\\.\\s*+Futuna\\s*+Zeit|WAT|West\\s*+Samoa\\s*+Sommerzeit|West\\s*+Samoa\\s*+Zeit|Westafrikanische\\s*+Zeit|Westeurop\u00E4ische\\s*+Sommerzeit|Westeurop\u00E4ische\\s*+Zeit|Westgr\u00F6nl\u00E4ndische\\s*+Sommerzeit|Westgr\u00F6nl\u00E4ndische\\s*+Zeit|Westindonesische\\s*+Zeit|Westliche\\s*+Normalzeit\\s*+\\(Australien\\)|WESZ|WEZ|WFT|WGST|WGT|WIB|WIT|WITA|Wladiwostok\\s*+Zeit|WSDT|WSST|XJT|YAKT|YEKT|Zentral-Westliche\\s*+Normalzeit\\s*+\\(Australien\\)|Zentralafrikanische\\s*+Zeit|Zentrale\\s*+Normalzeit|Zentrale\\s*+Normalzeit\\s*+\\(Northern\\s*+Territory\\)|Zentrale\\s*+Normalzeit\\s*+\\(S\u00FCdaustralien\\)|Zentrale\\s*+Normalzeit\\s*+\\(S\u00FCdaustralien/New\\s*+South\\s*+Wales\\)|Zentrale\\s*+Sommerzeit|Zentrale\\s*+Sommerzeit\\s*+\\(S\u00FCdaustralien\\)|Zentrale\\s*+Sommerzeit\\s*+\\(S\u00FCdaustralien/New\\s*+South\\s*+Wales\\)|Zentraleurop\u00E4ische\\s*+Sommerzeit|Zentraleurop\u00E4ische\\s*+Zeit|Zentralindonesische\\s*+Zeit|\u00D6stliche\\s*+Normalzeit|\u00D6stliche\\s*+Normalzeit\\s*+\\(New\\s*+South\\s*+Wales\\)|\u00D6stliche\\s*+Normalzeit\\s*+\\(Queensland\\)|\u00D6stliche\\s*+Normalzeit\\s*+\\(Tasmanien\\)|\u00D6stliche\\s*+Normalzeit\\s*+\\(Victoria\\)|\u00D6stliche\\s*+Sommerzeit|\u00D6stliche\\s*+Sommerzeit\\s*+\\(New\\s*+South\\s*+Wales\\)|\u00D6stliche\\s*+Sommerzeit\\s*+\\(Tasmanien\\)|\u00D6stliche\\s*+Sommerzeit\\s*+\\(Victoria\\))\\+\\|'\\|\\[\\^\\]\\+\\+\\('\\[\\^\\]\\*\\+\\)\\*\\+\\|\\[\\^
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("E2d[Jb0", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("E2d[Jb0", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("#JS'8X05;.eC</J4Ud");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("#JS'8X05;.eC</J4Ud", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("#JS'8X05;.eC</J4Ud", parsePosition0);
      fastDateParser0.parse("#JS'8X05;.eC</J4Ud", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+ G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|[.']++(''[^']*+)*+'|[^'ANZa-z]++", timeZone0, locale0);
      fastDateParser0.toString();
      Locale locale1 = Locale.CANADA;
      FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+ G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|[.']++(''[^']*+)*+'|[^'ANZa-z]++", timeZone0, locale1);
      String string0 = " not in (";
      try { 
        fastDateParser1.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \" not in (\" does not match (\\p{IsNd}++)\\+\\|(Fri|Friday|Mon|Monday|Sat|Saturday|Sun|Sunday|Thu|Thursday|Tue|Tuesday|Wed|Wednesday)\\+\\|(\\p{IsNd}++)\\+\\s*+(AD|AD|BC|BC)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre\\s*+Time|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistan\\s*+Time|AFT|AKDT|AKST|Alaska\\s*+Daylight\\s*+Time|Alaska\\s*+Standard\\s*+Time|Alma-Ata\\s*+Time|ALMT|Amazon\\s*+Time|AMT|Anadyr\\s*+Time|ANAT|Aqtau\\s*+Time|Aqtobe\\s*+Time|AQTT|Arabia\\s*+Standard\\s*+Time|Argentine\\s*+Time|Armenia\\s*+Time|ART|AST|Atlantic\\s*+Daylight\\s*+Time|Atlantic\\s*+Standard\\s*+Time|Australian\\s*+Central\\s*+Daylight\\s*+Time\\s*+\\(South\\s*+Australia\\)|Australian\\s*+Central\\s*+Daylight\\s*+Time\\s*+\\(South\\s*+Australia/New\\s*+South\\s*+Wales\\)|Australian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(Northern\\s*+Territory\\)|Australian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(South\\s*+Australia\\)|Australian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(South\\s*+Australia/New\\s*+South\\s*+Wales\\)|Australian\\s*+Central\\s*+Western\\s*+Standard\\s*+Time|Australian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(New\\s*+South\\s*+Wales\\)|Australian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(Tasmania\\)|Australian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(Victoria\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(New\\s*+South\\s*+Wales\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Queensland\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Tasmania\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Victoria\\)|Australian\\s*+Western\\s*+Standard\\s*+Time|AWST|Azerbaijan\\s*+Time|Azores\\s*+Summer\\s*+Time|Azores\\s*+Time|AZOST|AZOT|AZT|Bangladesh\\s*+Time|BDT|Bhutan\\s*+Time|BNT|Bolivia\\s*+Time|BOT|Bougainville\\s*+Standard\\s*+Time|Brasilia\\s*+Time|British\\s*+Summer\\s*+Time|BRT|Brunei\\s*+Time|BST|BTT|Cape\\s*+Verde\\s*+Time|CAT|CCT|CDT|Central\\s*+African\\s*+Time|Central\\s*+Daylight\\s*+Time|Central\\s*+European\\s*+Summer\\s*+Time|Central\\s*+European\\s*+Time|Central\\s*+Indonesia\\s*+Time|Central\\s*+Standard\\s*+Time|CEST|CET|CHADT|Chamorro\\s*+Standard\\s*+Time|CHAST|Chatham\\s*+Daylight\\s*+Time|Chatham\\s*+Standard\\s*+Time|Chile\\s*+Summer\\s*+Time|Chile\\s*+Time|China\\s*+Standard\\s*+Time|Choibalsan\\s*+Time|CHOT|Christmas\\s*+Island\\s*+Time|ChST|CHUT|Chuuk\\s*+Time|CKT|CLST|CLT|Cocos\\s*+Islands\\s*+Time|Colombia\\s*+Time|Cook\\s*+Is\\.\\s*+Time|Coordinated\\s*+Universal\\s*+Time|COT|CST|Cuba\\s*+Daylight\\s*+Time|Cuba\\s*+Standard\\s*+Time|CVT|CXT|Davis\\s*+Time|DAVT|DDUT|Dumont-d'Urville\\s*+Time|EASST|EAST|East\\s*+Indonesia\\s*+Time|Easter\\s*+Is\\.\\s*+Summer\\s*+Time|Easter\\s*+Is\\.\\s*+Time|Eastern\\s*+African\\s*+Time|Eastern\\s*+Daylight\\s*+Time|Eastern\\s*+European\\s*+Summer\\s*+Time|Eastern\\s*+European\\s*+Time|Eastern\\s*+Greenland\\s*+Summer\\s*+Time|Eastern\\s*+Greenland\\s*+Time|Eastern\\s*+Standard\\s*+Time|EAT|ECT|Ecuador\\s*+Time|EDT|EEST|EET|EGST|EGT|EST|Falkland\\s*+Is\\.\\s*+Time|Fernando\\s*+de\\s*+Noronha\\s*+Time|Fiji\\s*+Summer\\s*+Time|Fiji\\s*+Time|FJST|FJT|FKT|FNT|French\\s*+Guiana\\s*+Time|French\\s*+Southern\\s*+&\\s*+Antarctic\\s*+Lands\\s*+Time|Galapagos\\s*+Time|GALT|Gambier\\s*+Time|GAMT|Georgia\\s*+Time|GET|GFT|Ghana\\s*+Mean\\s*+Time|Gilbert\\s*+Is\\.\\s*+Time|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Greenwich\\s*+Mean\\s*+Time|GST|Gulf\\s*+Standard\\s*+Time|Guyana\\s*+Time|GYT|Hawaii\\s*+Daylight\\s*+Time|Hawaii\\s*+Standard\\s*+Time|HDT|HKT|Hong\\s*+Kong\\s*+Time|Hovd\\s*+Time|HOVT|HST|ICT|IDT|India\\s*+Standard\\s*+Time|Indian\\s*+Ocean\\s*+Territory\\s*+Time|Indochina\\s*+Time|IOT|Iran\\s*+Daylight\\s*+Time|Iran\\s*+Standard\\s*+Time|IRDT|Irish\\s*+Summer\\s*+Time|IRKT|Irkutsk\\s*+Time|IRST|Israel\\s*+Daylight\\s*+Time|Israel\\s*+Standard\\s*+Time|IST|Japan\\s*+Standard\\s*+Time|JST|KGT|Kirgizstan\\s*+Time|Korea\\s*+Standard\\s*+Time|Kosrae\\s*+Time|KOST|Kostanay\\s*+Standard\\s*+Time|Krasnoyarsk\\s*+Time|KRAT|KST|LHDT|LHST|Line\\s*+Is\\.\\s*+Time|LINT|Lord\\s*+Howe\\s*+Daylight\\s*+Time|Lord\\s*+Howe\\s*+Standard\\s*+Time|Macquarie\\s*+Island\\s*+Daylight\\s*+Time|Macquarie\\s*+Island\\s*+Standard\\s*+Time|Magadan\\s*+Time|MAGT|Malaysia\\s*+Time|Maldives\\s*+Time|Marquesas\\s*+Time|Marshall\\s*+Islands\\s*+Time|MART|Mauritius\\s*+Time|Mawson\\s*+Time|MAWT|MDT|MEST|MET|MHT|Middle\\s*+Europe\\s*+Summer\\s*+Time|Middle\\s*+Europe\\s*+Time|MIDT|MIST|MMT|Moscow\\s*+Standard\\s*+Time|Mountain\\s*+Daylight\\s*+Time|Mountain\\s*+Standard\\s*+Time|MSK|MST|MUT|MVT|Myanmar\\s*+Time|MYT|Nauru\\s*+Time|NCT|NDT|Nepal\\s*+Time|New\\s*+Caledonia\\s*+Time|New\\s*+Zealand\\s*+Daylight\\s*+Time|New\\s*+Zealand\\s*+Standard\\s*+Time|Newfoundland\\s*+Daylight\\s*+Time|Newfoundland\\s*+Standard\\s*+Time|NFST|NFT|Niue\\s*+Time|Norfolk\\s*+Summer\\s*+Time|Norfolk\\s*+Time|Novosibirsk\\s*+Time|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|Omsk\\s*+Time|OMST|Oral\\s*+Time|ORAT|Pacific\\s*+Daylight\\s*+Time|Pacific\\s*+Standard\\s*+Time|Pakistan\\s*+Time|Palau\\s*+Time|Papua\\s*+New\\s*+Guinea\\s*+Time|Paraguay\\s*+Summer\\s*+Time|Paraguay\\s*+Time|PDT|Peru\\s*+Time|PET|Petropavlovsk-Kamchatski\\s*+Time|PETT|PGT|Philippines\\s*+Standard\\s*+Time|Phoenix\\s*+Is\\.\\s*+Time|PHOT|Pierre\\s*+&\\s*+Miquelon\\s*+Daylight\\s*+Time|Pierre\\s*+&\\s*+Miquelon\\s*+Standard\\s*+Time|Pitcairn\\s*+Standard\\s*+Time|PKT|PMDT|PMST|Pohnpei\\s*+Time|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda\\s*+Time|RET|Reunion\\s*+Time|Rothera\\s*+Time|ROTT|Sakhalin\\s*+Time|SAKT|Samara\\s*+Time|Samoa\\s*+Standard\\s*+Time|SAMT|SAST|SBT|SCT|Seychelles\\s*+Time|SGT|Singapore\\s*+Time|Solomon\\s*+Is\\.\\s*+Time|South\\s*+Africa\\s*+Standard\\s*+Time|South\\s*+Georgia\\s*+Standard\\s*+Time|Srednekolymsk\\s*+Time|SRET|SRT|SST|Suriname\\s*+Time|SYOT|Syowa\\s*+Time|Tahiti\\s*+Time|TAHT|Tajikistan\\s*+Time|TFT|Timor-Leste\\s*+Time|TJT|TKT|TLT|TMT|Tokelau\\s*+Time|Tonga\\s*+Time|TOT|TRT|Turkey\\s*+Time|Turkmenistan\\s*+Time|Tuvalu\\s*+Time|TVT|Ulaanbaatar\\s*+Time|ULAT|Uruguay\\s*+Time|Ust-Nera\\s*+Time|UTC|UYT|Uzbekistan\\s*+Time|UZT|Vanuatu\\s*+Time|Venezuela\\s*+Time|VET|Vladivostok\\s*+Time|VLAT|VOST|Vostok\\s*+Time|VUT|Wake\\s*+Time|WAKT|Wallis\\s*+&\\s*+Futuna\\s*+Time|WAT|WEST|West\\s*+Indonesia\\s*+Time|West\\s*+Samoa\\s*+Daylight\\s*+Time|West\\s*+Samoa\\s*+Standard\\s*+Time|Western\\s*+African\\s*+Time|Western\\s*+European\\s*+Summer\\s*+Time|Western\\s*+European\\s*+Time|Western\\s*+Greenland\\s*+Summer\\s*+Time|Western\\s*+Greenland\\s*+Time|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|Xinjiang\\s*+Standard\\s*+Time|XJT|YAKT|Yakutsk\\s*+Time|Yekaterinburg\\s*+Time|YEKT)\\+\\|(AM|PM)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre\\s*+Time|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistan\\s*+Time|AFT|AKDT|AKST|Alaska\\s*+Daylight\\s*+Time|Alaska\\s*+Standard\\s*+Time|Alma-Ata\\s*+Time|ALMT|Amazon\\s*+Time|AMT|Anadyr\\s*+Time|ANAT|Aqtau\\s*+Time|Aqtobe\\s*+Time|AQTT|Arabia\\s*+Standard\\s*+Time|Argentine\\s*+Time|Armenia\\s*+Time|ART|AST|Atlantic\\s*+Daylight\\s*+Time|Atlantic\\s*+Standard\\s*+Time|Australian\\s*+Central\\s*+Daylight\\s*+Time\\s*+\\(South\\s*+Australia\\)|Australian\\s*+Central\\s*+Daylight\\s*+Time\\s*+\\(South\\s*+Australia/New\\s*+South\\s*+Wales\\)|Australian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(Northern\\s*+Territory\\)|Australian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(South\\s*+Australia\\)|Australian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(South\\s*+Australia/New\\s*+South\\s*+Wales\\)|Australian\\s*+Central\\s*+Western\\s*+Standard\\s*+Time|Australian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(New\\s*+South\\s*+Wales\\)|Australian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(Tasmania\\)|Australian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(Victoria\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(New\\s*+South\\s*+Wales\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Queensland\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Tasmania\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Victoria\\)|Australian\\s*+Western\\s*+Standard\\s*+Time|AWST|Azerbaijan\\s*+Time|Azores\\s*+Summer\\s*+Time|Azores\\s*+Time|AZOST|AZOT|AZT|Bangladesh\\s*+Time|BDT|Bhutan\\s*+Time|BNT|Bolivia\\s*+Time|BOT|Bougainville\\s*+Standard\\s*+Time|Brasilia\\s*+Time|British\\s*+Summer\\s*+Time|BRT|Brunei\\s*+Time|BST|BTT|Cape\\s*+Verde\\s*+Time|CAT|CCT|CDT|Central\\s*+African\\s*+Time|Central\\s*+Daylight\\s*+Time|Central\\s*+European\\s*+Summer\\s*+Time|Central\\s*+European\\s*+Time|Central\\s*+Indonesia\\s*+Time|Central\\s*+Standard\\s*+Time|CEST|CET|CHADT|Chamorro\\s*+Standard\\s*+Time|CHAST|Chatham\\s*+Daylight\\s*+Time|Chatham\\s*+Standard\\s*+Time|Chile\\s*+Summer\\s*+Time|Chile\\s*+Time|China\\s*+Standard\\s*+Time|Choibalsan\\s*+Time|CHOT|Christmas\\s*+Island\\s*+Time|ChST|CHUT|Chuuk\\s*+Time|CKT|CLST|CLT|Cocos\\s*+Islands\\s*+Time|Colombia\\s*+Time|Cook\\s*+Is\\.\\s*+Time|Coordinated\\s*+Universal\\s*+Time|COT|CST|Cuba\\s*+Daylight\\s*+Time|Cuba\\s*+Standard\\s*+Time|CVT|CXT|Davis\\s*+Time|DAVT|DDUT|Dumont-d'Urville\\s*+Time|EASST|EAST|East\\s*+Indonesia\\s*+Time|Easter\\s*+Is\\.\\s*+Summer\\s*+Time|Easter\\s*+Is\\.\\s*+Time|Eastern\\s*+African\\s*+Time|Eastern\\s*+Daylight\\s*+Time|Eastern\\s*+European\\s*+Summer\\s*+Time|Eastern\\s*+European\\s*+Time|Eastern\\s*+Greenland\\s*+Summer\\s*+Time|Eastern\\s*+Greenland\\s*+Time|Eastern\\s*+Standard\\s*+Time|EAT|ECT|Ecuador\\s*+Time|EDT|EEST|EET|EGST|EGT|EST|Falkland\\s*+Is\\.\\s*+Time|Fernando\\s*+de\\s*+Noronha\\s*+Time|Fiji\\s*+Summer\\s*+Time|Fiji\\s*+Time|FJST|FJT|FKT|FNT|French\\s*+Guiana\\s*+Time|French\\s*+Southern\\s*+&\\s*+Antarctic\\s*+Lands\\s*+Time|Galapagos\\s*+Time|GALT|Gambier\\s*+Time|GAMT|Georgia\\s*+Time|GET|GFT|Ghana\\s*+Mean\\s*+Time|Gilbert\\s*+Is\\.\\s*+Time|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Greenwich\\s*+Mean\\s*+Time|GST|Gulf\\s*+Standard\\s*+Time|Guyana\\s*+Time|GYT|Hawaii\\s*+Daylight\\s*+Time|Hawaii\\s*+Standard\\s*+Time|HDT|HKT|Hong\\s*+Kong\\s*+Time|Hovd\\s*+Time|HOVT|HST|ICT|IDT|India\\s*+Standard\\s*+Time|Indian\\s*+Ocean\\s*+Territory\\s*+Time|Indochina\\s*+Time|IOT|Iran\\s*+Daylight\\s*+Time|Iran\\s*+Standard\\s*+Time|IRDT|Irish\\s*+Summer\\s*+Time|IRKT|Irkutsk\\s*+Time|IRST|Israel\\s*+Daylight\\s*+Time|Israel\\s*+Standard\\s*+Time|IST|Japan\\s*+Standard\\s*+Time|JST|KGT|Kirgizstan\\s*+Time|Korea\\s*+Standard\\s*+Time|Kosrae\\s*+Time|KOST|Kostanay\\s*+Standard\\s*+Time|Krasnoyarsk\\s*+Time|KRAT|KST|LHDT|LHST|Line\\s*+Is\\.\\s*+Time|LINT|Lord\\s*+Howe\\s*+Daylight\\s*+Time|Lord\\s*+Howe\\s*+Standard\\s*+Time|Macquarie\\s*+Island\\s*+Daylight\\s*+Time|Macquarie\\s*+Island\\s*+Standard\\s*+Time|Magadan\\s*+Time|MAGT|Malaysia\\s*+Time|Maldives\\s*+Time|Marquesas\\s*+Time|Marshall\\s*+Islands\\s*+Time|MART|Mauritius\\s*+Time|Mawson\\s*+Time|MAWT|MDT|MEST|MET|MHT|Middle\\s*+Europe\\s*+Summer\\s*+Time|Middle\\s*+Europe\\s*+Time|MIDT|MIST|MMT|Moscow\\s*+Standard\\s*+Time|Mountain\\s*+Daylight\\s*+Time|Mountain\\s*+Standard\\s*+Time|MSK|MST|MUT|MVT|Myanmar\\s*+Time|MYT|Nauru\\s*+Time|NCT|NDT|Nepal\\s*+Time|New\\s*+Caledonia\\s*+Time|New\\s*+Zealand\\s*+Daylight\\s*+Time|New\\s*+Zealand\\s*+Standard\\s*+Time|Newfoundland\\s*+Daylight\\s*+Time|Newfoundland\\s*+Standard\\s*+Time|NFST|NFT|Niue\\s*+Time|Norfolk\\s*+Summer\\s*+Time|Norfolk\\s*+Time|Novosibirsk\\s*+Time|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|Omsk\\s*+Time|OMST|Oral\\s*+Time|ORAT|Pacific\\s*+Daylight\\s*+Time|Pacific\\s*+Standard\\s*+Time|Pakistan\\s*+Time|Palau\\s*+Time|Papua\\s*+New\\s*+Guinea\\s*+Time|Paraguay\\s*+Summer\\s*+Time|Paraguay\\s*+Time|PDT|Peru\\s*+Time|PET|Petropavlovsk-Kamchatski\\s*+Time|PETT|PGT|Philippines\\s*+Standard\\s*+Time|Phoenix\\s*+Is\\.\\s*+Time|PHOT|Pierre\\s*+&\\s*+Miquelon\\s*+Daylight\\s*+Time|Pierre\\s*+&\\s*+Miquelon\\s*+Standard\\s*+Time|Pitcairn\\s*+Standard\\s*+Time|PKT|PMDT|PMST|Pohnpei\\s*+Time|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda\\s*+Time|RET|Reunion\\s*+Time|Rothera\\s*+Time|ROTT|Sakhalin\\s*+Time|SAKT|Samara\\s*+Time|Samoa\\s*+Standard\\s*+Time|SAMT|SAST|SBT|SCT|Seychelles\\s*+Time|SGT|Singapore\\s*+Time|Solomon\\s*+Is\\.\\s*+Time|South\\s*+Africa\\s*+Standard\\s*+Time|South\\s*+Georgia\\s*+Standard\\s*+Time|Srednekolymsk\\s*+Time|SRET|SRT|SST|Suriname\\s*+Time|SYOT|Syowa\\s*+Time|Tahiti\\s*+Time|TAHT|Tajikistan\\s*+Time|TFT|Timor-Leste\\s*+Time|TJT|TKT|TLT|TMT|Tokelau\\s*+Time|Tonga\\s*+Time|TOT|TRT|Turkey\\s*+Time|Turkmenistan\\s*+Time|Tuvalu\\s*+Time|TVT|Ulaanbaatar\\s*+Time|ULAT|Uruguay\\s*+Time|Ust-Nera\\s*+Time|UTC|UYT|Uzbekistan\\s*+Time|UZT|Vanuatu\\s*+Time|Venezuela\\s*+Time|VET|Vladivostok\\s*+Time|VLAT|VOST|Vostok\\s*+Time|VUT|Wake\\s*+Time|WAKT|Wallis\\s*+&\\s*+Futuna\\s*+Time|WAT|WEST|West\\s*+Indonesia\\s*+Time|West\\s*+Samoa\\s*+Daylight\\s*+Time|West\\s*+Samoa\\s*+Standard\\s*+Time|Western\\s*+African\\s*+Time|Western\\s*+European\\s*+Summer\\s*+Time|Western\\s*+European\\s*+Time|Western\\s*+Greenland\\s*+Summer\\s*+Time|Western\\s*+Greenland\\s*+Time|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|Xinjiang\\s*+Standard\\s*+Time|XJT|YAKT|Yakutsk\\s*+Time|Yekaterinburg\\s*+Time|YEKT)\\+\\|'\\|\\[\\.\\]\\+\\+\\('\\[\\^\\]\\*\\+\\)\\*\\+\\|\\[\\^
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("< Ix^K?", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("3");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("ESd=$Jn50XG3)K)", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTECT");
      Locale locale0 = Locale.forLanguageTag("GMTECT");
      FastDateParser fastDateParser0 = new FastDateParser("+E}EyG'?", timeZone0, locale0);
      assertEquals("+E}EyG'?", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-7), "=?");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("HZNV2~B+", simpleTimeZone0, locale0);
      assertEquals("HZNV2~B+", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|]+M''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      try { 
        fastDateParser0.parse("m9z8lFh|");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"m9z8lFh|\" does not match (\\p{IsNd}++)\\+\\|(\u571F|\u571F\u66DC\u65E5|\u65E5|\u65E5\u66DC\u65E5|\u6708|\u6708\u66DC\u65E5|\u6728|\u6728\u66DC\u65E5|\u6C34|\u6C34\u66DC\u65E5|\u706B|\u706B\u66DC\u65E5|\u91D1|\u91D1\u66DC\u65E5)\\+\\|(\\p{IsNd}++)\\+\\|(\u7D00\u5143\u524D|\u7D00\u5143\u524D|\u897F\u66A6|\u897F\u66A6)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville\\s*+Standard\\s*+Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay\\s*+Standard\\s*+Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|ORAT|PDT|PET|PETT|PGT|Philippines\\s*+Standard\\s*+Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk\\s*+Time|SRET|SRT|SST|SYOT|TAHT|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT|\u30A2\u30A4\u30EB\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u30A2\u30AF\u30BF\u30A6\u6642\u9593|\u30A2\u30AF\u30C8\u30D9\u6642\u9593|\u30A2\u30AF\u30EC\u6642\u9593|\u30A2\u30BC\u30EB\u30D0\u30A4\u30B8\u30E3\u30F3\u6642\u9593|\u30A2\u30BE\u30EC\u30B9\u590F\u6642\u9593|\u30A2\u30BE\u30EC\u30B9\u6642\u9593|\u30A2\u30CA\u30C9\u30A5\u30A4\u30EA\u6642\u9593|\u30A2\u30D5\u30AC\u30CB\u30B9\u30BF\u30F3\u6642\u9593|\u30A2\u30DE\u30BE\u30F3\u6642\u9593|\u30A2\u30E9\u30B9\u30AB\u590F\u6642\u9593|\u30A2\u30E9\u30B9\u30AB\u6A19\u6E96\u6642|\u30A2\u30E9\u30D3\u30A2\u6A19\u6E96\u6642|\u30A2\u30EB\u30BC\u30F3\u30C1\u30F3\u6642\u9593|\u30A2\u30EB\u30DE\u30A2\u30BF\u6642\u9593|\u30A2\u30EB\u30E1\u30CB\u30A2\u6642\u9593|\u30A4\u30B9\u30E9\u30A8\u30EB\u590F\u6642\u9593|\u30A4\u30B9\u30E9\u30A8\u30EB\u6A19\u6E96\u6642|\u30A4\u30E9\u30F3\u590F\u6642\u9593|\u30A4\u30E9\u30F3\u6A19\u6E96\u6642|\u30A4\u30EB\u30AF\u30FC\u30C4\u30AF\u6642\u9593|\u30A4\u30F3\u30C9\u30B7\u30CA\u6642\u9593|\u30A4\u30F3\u30C9\u6A19\u6E96\u6642|\u30A4\u30F3\u30C9\u6D0B\u5730\u57DF\u6642\u9593|\u30A4\u30FC\u30B9\u30BF\u30FC\u5CF6\u590F\u6642\u9593|\u30A4\u30FC\u30B9\u30BF\u30FC\u5CF6\u6642\u9593|\u30A6\u30A7\u30FC\u30AF\u6642\u9593|\u30A6\u30B9\u30C1\u30CD\u30E9\u6642\u9593|\u30A6\u30BA\u30D9\u30AD\u30B9\u30BF\u30F3\u6642\u9593|\u30A6\u30E9\u30B8\u30AA\u30B9\u30C8\u30AF\u6642\u9593|\u30A6\u30E9\u30FC\u30F3\u30D0\u30FC\u30C8\u30EB\u6642\u9593|\u30A6\u30EB\u30B0\u30A2\u30A4\u6642\u9593|\u30A8\u30AB\u30C6\u30EA\u30F3\u30D6\u30EB\u30B0\u6642\u9593|\u30A8\u30AF\u30A2\u30C9\u30EB\u6642\u9593|\u30AA\u30E0\u30B9\u30AF\u6642\u9593|\u30AA\u30E9\u30EB\u6642\u9593|\u30AB\u30FC\u30DC\u30D9\u30EB\u30C7\u6642\u9593|\u30AC\u30A4\u30A2\u30CA\u6642\u9593|\u30AC\u30E9\u30D1\u30B4\u30B9\u6642\u9593|\u30AC\u30F3\u30D3\u30A2\u6642\u9593|\u30AC\u30FC\u30CA\u6A19\u6E96\u6642|\u30AD\u30B8\u30EB\u30AA\u30EB\u30C0\u6642\u9593|\u30AD\u30E5\u30FC\u30D0\u590F\u6642\u9593|\u30AD\u30E5\u30FC\u30D0\u6A19\u6E96\u6642|\u30AD\u30EB\u30AE\u30B9\u30BF\u30F3\u6642\u9593|\u30AE\u30EB\u30D0\u30FC\u30C8\u8AF8\u5CF6\u6642\u9593|\u30AF\u30C3\u30AF\u8AF8\u5CF6\u6642\u9593|\u30AF\u30E9\u30B9\u30CE\u30E4\u30EB\u30B9\u30AF\u6642\u9593|\u30AF\u30EA\u30B9\u30DE\u30B9\u8AF8\u5CF6\u6642\u9593|\u30B0\u30A2\u30E0\u6A19\u6E96\u6642|\u30B0\u30EA\u30CB\u30C3\u30B8\u6A19\u6E96\u6642|\u30B0\u30EB\u30B8\u30A2\u6642\u9593|\u30B3\u30B3\u30B9\u8AF8\u5CF6\u6642\u9593|\u30B3\u30B9\u30E9\u30A8\u6642\u9593|\u30B3\u30ED\u30F3\u30D3\u30A2\u6642\u9593|\u30B5\u30DE\u30E9\u6642\u9593|\u30B5\u30E2\u30A2\u6A19\u6E96\u6642|\u30B5\u30F3\u30D4\u30A8\u30FC\u30EB\u30FB\u30DF\u30AF\u30ED\u30F3\u8AF8\u5CF6\u590F\u6642\u9593|\u30B5\u30F3\u30D4\u30A8\u30FC\u30EB\u30FB\u30DF\u30AF\u30ED\u30F3\u8AF8\u5CF6\u6A19\u6E96\u6642|\u30B7\u30F3\u30AC\u30DD\u30FC\u30EB\u6642\u9593|\u30B9\u30EA\u30CA\u30E0\u6642\u9593|\u30BB\u30A4\u30B7\u30A7\u30EB\u6642\u9593|\u30BD\u30ED\u30E2\u30F3\u8AF8\u5CF6\u6642\u9593|\u30BF\u30B8\u30AD\u30B9\u30BF\u30F3\u6642\u9593|\u30BF\u30D2\u30C1\u6642\u9593|\u30C1\u30E3\u30BF\u30E0\u590F\u6642\u9593|\u30C1\u30E3\u30BF\u30E0\u6A19\u6E96\u6642|\u30C1\u30E5\u30FC\u30AF\u6642\u9593|\u30C1\u30E7\u30A4\u30D0\u30EB\u30B5\u30F3\u6642\u9593|\u30C1\u30EA\u590F\u6642\u9593|\u30C1\u30EA\u6642\u9593|\u30C4\u30D0\u30EB\u6642\u9593|\u30C7\u30A4\u30D3\u30B9\u6642\u9593|\u30C7\u30E5\u30E2\u30F3\u30C7\u30E5\u30EB\u30F4\u30A3\u30EB\u6642\u9593|\u30C8\u30B1\u30E9\u30A6\u8AF8\u5CF6\u6642\u9593|\u30C8\u30EB\u30AF\u30E1\u30CB\u30B9\u30BF\u30F3\u6642\u9593|\u30C8\u30F3\u30AC\u6642\u9593|\u30CA\u30A6\u30EB\u6642\u9593|\u30CB\u30A6\u30A8\u5CF6\u6642\u9593|\u30CB\u30E5\u30FC\u30AB\u30EC\u30C9\u30CB\u30A2\u6642\u9593|\u30CB\u30E5\u30FC\u30B8\u30FC\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u30CB\u30E5\u30FC\u30B8\u30FC\u30E9\u30F3\u30C9\u6A19\u6E96\u6642|\u30CB\u30E5\u30FC\u30D5\u30A1\u30F3\u30C9\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u30CB\u30E5\u30FC\u30D5\u30A1\u30F3\u30C9\u30E9\u30F3\u30C9\u6A19\u6E96\u6642|\u30CD\u30D1\u30FC\u30EB\u6642\u9593|\u30CE\u30DC\u30B7\u30D3\u30EB\u30B9\u30AF\u6642\u9593|\u30CE\u30FC\u30D5\u30A9\u30FC\u30AF\u590F\u6642\u9593|\u30CE\u30FC\u30D5\u30A9\u30FC\u30AF\u6642\u9593|\u30CF\u30EF\u30A4\u590F\u6642\u9593|\u30CF\u30EF\u30A4\u6A19\u6E96\u6642|\u30D0\u30CC\u30A2\u30C4\u6642\u9593|\u30D0\u30F3\u30B0\u30E9\u30C7\u30B7\u30E5\u6642\u9593|\u30D1\u30AD\u30B9\u30BF\u30F3\u6642\u9593|\u30D1\u30D7\u30A2\u30CB\u30E5\u30FC\u30AE\u30CB\u30A2\u6642\u9593|\u30D1\u30E9\u30AA\u6642\u9593|\u30D1\u30E9\u30B0\u30A2\u30A4\u590F\u6642\u9593|\u30D1\u30E9\u30B0\u30A2\u30A4\u6642\u9593|\u30D4\u30C8\u30B1\u30EB\u30F3\u5CF6\u6A19\u6E96\u6642|\u30D5\u30A3\u30B8\u30FC\u590F\u6642\u9593|\u30D5\u30A3\u30B8\u30FC\u6642\u9593|\u30D5\u30A7\u30CB\u30C3\u30AF\u30B9\u8AF8\u5CF6\u6642\u9593|\u30D5\u30A7\u30EB\u30CA\u30F3\u30C9\u30FB\u30C7\u30FB\u30CE\u30ED\u30FC\u30CB\u30E3\u6642\u9593|\u30D5\u30A9\u30FC\u30AF\u30E9\u30F3\u30C9\u8AF8\u5CF6\u6642\u9593|\u30D6\u30E9\u30B8\u30EB\u6642\u9593|\u30D6\u30EB\u30CD\u30A4\u6642\u9593|\u30D6\u30FC\u30BF\u30F3\u6642\u9593|\u30D9\u30CD\u30BA\u30A8\u30E9\u6642\u9593|\u30DA\u30C8\u30ED\u30D1\u30D6\u30ED\u30D5\u30B9\u30AF\u30AB\u30E0\u30C1\u30E3\u30C4\u30AD\u30FC\u6642\u9593|\u30DA\u30EB\u30FC\u6642\u9593|\u30DB\u30D6\u30C9\u6642\u9593|\u30DC\u30B9\u30C8\u30FC\u30AF\u57FA\u5730\u6642\u9593|\u30DC\u30EA\u30D3\u30A2\u6642\u9593|\u30DD\u30F3\u30DA\u30A4\u6642\u9593|\u30DE\u30AC\u30C0\u30F3\u6642\u9593|\u30DE\u30C3\u30B3\u30FC\u30EA\u30FC\u5CF6\u590F\u6642\u9593|\u30DE\u30C3\u30B3\u30FC\u30EA\u30FC\u5CF6\u6642\u9593|\u30DE\u30EB\u30B1\u30B5\u30B9\u6642\u9593|\u30DE\u30EC\u30FC\u30B7\u30A2\u6642\u9593|\u30DE\u30FC\u30B7\u30E3\u30EB\u5CF6\u6642\u9593|\u30DF\u30E3\u30F3\u30DE\u30FC\u6642\u9593|\u30E2\u30B9\u30AF\u30EF\u6A19\u6E96\u6642|\u30E2\u30EB\u30B8\u30D6\u6642\u9593|\u30E2\u30FC\u30BD\u30F3\u6642\u9593|\u30E2\u30FC\u30EA\u30B7\u30E3\u30B9\u6642\u9593|\u30E4\u30AF\u30FC\u30C4\u30AF\u6642\u9593|\u30E9\u30A4\u30F3\u8AF8\u5CF6\u6642\u9593|\u30EC\u30E6\u30CB\u30AA\u30F3\u6642\u9593|\u30ED\u30BC\u30E9\u6642\u9593|\u30ED\u30FC\u30C9\u30CF\u30A6\u5CF6\u590F\u6642\u9593|\u30ED\u30FC\u30C9\u30CF\u30A6\u5CF6\u6A19\u6E96\u6642|\u30EF\u30EA\u30B9\u53CA\u3073\u30D5\u30C4\u30CA\u6642\u9593|\u4E2D\u56FD\u6A19\u6E96\u6642|\u4E2D\u592E\u30A4\u30F3\u30C9\u30CD\u30B7\u30A2\u6642\u9593|\u4E2D\u897F\u90E8\u6A19\u6E96\u6642\\(\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2\\)|\u4E2D\u90E8\u30A2\u30D5\u30EA\u30AB\u6642\u9593|\u4E2D\u90E8\u30E8\u30FC\u30ED\u30C3\u30D1\u590F\u6642\u9593|\u4E2D\u90E8\u30E8\u30FC\u30ED\u30C3\u30D1\u6642\u9593|\u4E2D\u90E8\u590F\u6642\u9593|\u4E2D\u90E8\u590F\u6642\u9593\\(\u5357\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2\\)|\u4E2D\u90E8\u590F\u6642\u9593\\(\u5357\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2/\u30CB\u30E5\u30FC\u30B5\u30A6\u30B9\u30A6\u30A7\u30FC\u30EB\u30BA\\)|\u4E2D\u90E8\u6A19\u6E96\u6642|\u4E2D\u90E8\u6A19\u6E96\u6642\\(\u30CE\u30FC\u30B6\u30F3\u30C6\u30EA\u30C8\u30EA\u30FC\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\\(\u5357\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\\(\u5357\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2/\u30CB\u30E5\u30FC\u30B5\u30A6\u30B9\u30A6\u30A7\u30FC\u30EB\u30BA\\)|\u4ECF\u5357\u65B9\u9818\u304A\u3088\u3073\u5357\u6975\u6642\u9593|\u4ECF\u9818\u30AE\u30A2\u30CA\u6642\u9593|\u5354\u5B9A\u4E16\u754C\u6642|\u5357\u30A2\u30D5\u30EA\u30AB\u6A19\u6E96\u6642|\u5357\u30B8\u30E7\u30FC\u30B8\u30A2\u5CF6\u6A19\u6E96\u6642|\u5927\u897F\u6D0B\u590F\u6642\u9593|\u5927\u897F\u6D0B\u6A19\u6E96\u6642|\u592A\u5E73\u6D0B\u590F\u6642\u9593|\u592A\u5E73\u6D0B\u6A19\u6E96\u6642|\u5C71\u5730\u590F\u6642\u9593|\u5C71\u5730\u6A19\u6E96\u6642|\u65E5\u672C\u6A19\u6E96\u6642|\u662D\u548C\u57FA\u5730\u6642\u9593|\u6771\u30A2\u30D5\u30EA\u30AB\u6642\u9593|\u6771\u30A4\u30F3\u30C9\u30CD\u30B7\u30A2\u6642\u9593|\u6771\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u6771\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9\u6642\u9593|\u6771\u30C6\u30A3\u30E2\u30FC\u30EB\u6642\u9593|\u6771\u30E8\u30FC\u30ED\u30C3\u30D1\u590F\u6642\u9593|\u6771\u30E8\u30FC\u30ED\u30C3\u30D1\u6642\u9593|\u6771\u90E8\u590F\u6642\u9593|\u6771\u90E8\u590F\u6642\u9593\\(\u30BF\u30B9\u30DE\u30CB\u30A2\\)|\u6771\u90E8\u590F\u6642\u9593\\(\u30CB\u30E5\u30FC\u30B5\u30A6\u30B9\u30A6\u30A7\u30FC\u30EB\u30BA\\)|\u6771\u90E8\u590F\u6642\u9593\\(\u30D3\u30AF\u30C8\u30EA\u30A2\\)|\u6771\u90E8\u6A19\u6E96\u6642|\u6771\u90E8\u6A19\u6E96\u6642\\(\u30AF\u30A4\u30FC\u30F3\u30BA\u30E9\u30F3\u30C9\\)|\u6771\u90E8\u6A19\u6E96\u6642\\(\u30BF\u30B9\u30DE\u30CB\u30A2\\)|\u6771\u90E8\u6A19\u6E96\u6642\\(\u30CB\u30E5\u30FC\u30B5\u30A6\u30B9\u30A6\u30A7\u30FC\u30EB\u30BA\\)|\u6771\u90E8\u6A19\u6E96\u6642\\(\u30D3\u30AF\u30C8\u30EA\u30A2\\)|\u6A3A\u592A\u6642\u9593|\u6E7E\u5CB8\u6A19\u6E96\u6642|\u82F1\u56FD\u590F\u6642\u9593|\u897F\u30A2\u30D5\u30EA\u30AB\u6642\u9593|\u897F\u30A4\u30F3\u30C9\u30CD\u30B7\u30A2\u6642\u9593|\u897F\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u897F\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9\u6642\u9593|\u897F\u30B5\u30E2\u30A2\u590F\u6642\u9593|\u897F\u30B5\u30E2\u30A2\u6642\u9593|\u897F\u30E8\u30FC\u30ED\u30C3\u30D1\u590F\u6642\u9593|\u897F\u30E8\u30FC\u30ED\u30C3\u30D1\u6642\u9593|\u897F\u90E8\u6A19\u6E96\u6642\\(\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2\\)|\u97D3\u56FD\u6A19\u6E96\u6642|\u9999\u6E2F\u6642\u9593)\\+\\|(\u5348\u524D|\u5348\u5F8C)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|\\]\\+(\\p{IsNd}++)'\\|\\[\\^\\]\\+\\+\\('\\[\\^\\]\\*\\+\\)\\*\\+\\|\\[\\^
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }
}
