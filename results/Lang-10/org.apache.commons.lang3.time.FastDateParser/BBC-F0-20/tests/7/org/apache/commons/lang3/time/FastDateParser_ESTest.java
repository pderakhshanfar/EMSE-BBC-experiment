/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 10:19:16 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(84, "4\"/j)t7R5");
      FastDateParser fastDateParser0 = new FastDateParser("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(84);
      assertEquals(1984, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale(";V~`;[Gx[*oXv}S5<;(", ";V~`;[Gx[*oXv}S5<;(");
      FastDateParser fastDateParser0 = new FastDateParser("m b4}=_2 Pk&L<", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      fastDateParser0.parse("j&Ry:]T4W8uepE", parsePosition0);
      assertEquals(8, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=8,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(";;eN>");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser(";;eN>", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(";;eN>");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("8~q!i", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateParser0.parseObject("8~q!i", parsePosition0);
      assertNull(object0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(";;eN>");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser(";;eN>", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(467, "EQD+)Ff");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("k\"[>j{EM8bwkAF3", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("=|zQKw", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(2147483645);
      assertEquals((-2147481651), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("4\"/j)t7R5");
      Locale locale0 = new Locale("4\"/j)t7R5");
      FastDateParser fastDateParser0 = new FastDateParser("4\"/j)t7R5", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-2988));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("U#P/jy!VPY+yM", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("4\"/j)t7R5");
      Locale locale0 = new Locale("4\"/j)t7R5");
      FastDateParser fastDateParser0 = new FastDateParser("4\"/j)t7R5", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-2988));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("4\"/j)t7R5");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("4\"/j)t7R5", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("FastDateParser[4\"/j)t7R5,ko_KR,GMT]");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"FastDateParser[4\"/j)t7R5,ko_KR,GMT]\" does not match 4\"/
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("m1EWE", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(40);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("PNT", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("4\"/j)t7R5");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("4\"/j)t7R5", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2976);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("/qMLoO6Z|W/k{{", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("4\"/j)t7R5");
      Locale locale0 = Locale.forLanguageTag("WOcS7|n0");
      FastDateParser fastDateParser0 = new FastDateParser("WOcS7|n0", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(";;eN>");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("_;D/R[v<", timeZone0, locale0);
      assertEquals("_;D/R[v<", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("G{MMSZ", "G{MMSZ", "fJZyhshu4/");
      FastDateParser fastDateParser0 = new FastDateParser("zPV5", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("ART");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("z^", timeZone0, locale0);
      assertEquals("z^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTEAT");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("(*#>rR^~8@pJ", timeZone0, locale0);
      assertEquals("(*#>rR^~8@pJ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("4\"/j)t7R5");
      Locale locale0 = new Locale(">j07+Q#!65tyF3Hp^E");
      FastDateParser fastDateParser0 = new FastDateParser(">j07+Q#!65tyF3Hp^E", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("kA0", "Z8%7El9U>qh*?VD#");
      FastDateParser fastDateParser0 = new FastDateParser("=diP8_A^Jt", timeZone0, locale0);
      assertEquals("=diP8_A^Jt", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(";;eN>");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("<&L`BixOh\"^^Jy", timeZone0, locale0);
      assertEquals("<&L`BixOh\"^^Jy", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser(":=:P41>bB[HTIOJ", timeZone0, locale0);
      assertEquals(":=:P41>bB[HTIOJ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("z970nUH SaO9\"Ey)", timeZone0, locale0);
      assertEquals("z970nUH SaO9\"Ey)", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("5D4\"/j)t7R5");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("5D4\"/j)t7R5", timeZone0, locale0);
      assertEquals("5D4\"/j)t7R5", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=|zQKw");
      FastDateParser fastDateParser0 = new FastDateParser("2+1!H]G$YYik6*!T5BH", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("/#@Z{,Km", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Date date0 = fastDateParser0.parse("pGu3w4D=>yM\"Ag$F", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("-L#9YcD#L|Q+VP?5tkV", timeZone0, locale0);
      assertEquals("-L#9YcD#L|Q+VP?5tkV", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = new Locale("kA0", "kA0", "kA0");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3449, "QU/I9");
      FastDateParser fastDateParser0 = new FastDateParser("M*&", simpleTimeZone0, locale0);
      assertEquals("M*&", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("WeN>");
      Locale locale0 = new Locale("WeN>");
      FastDateParser fastDateParser0 = new FastDateParser(")e\"apT{H!}1m2oi%Y`V", timeZone0, locale0);
      assertEquals(")e\"apT{H!}1m2oi%Y`V", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("kA0", "Z8%7El9U>qh*?VD#");
      FastDateParser fastDateParser0 = new FastDateParser(",\"F(j@+Ee5(<T7|gi", timeZone0, locale0);
      assertEquals(",\"F(j@+Ee5(<T7|gi", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("7$\";;");
      Locale locale0 = new Locale("7$\";;", "7$\";;", "7$\";;");
      FastDateParser fastDateParser0 = new FastDateParser("7$\";;", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("+|E+|F+|G+|H+|K+|M+|S+|W+|+|a+|d+h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']+)*+'|[^'A-Za-z]++");
      Locale locale0 = new Locale("+|E+|F+|G+|H+|K+|M+|S+|W+|+|a+|d+h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']+)*+'|[^'A-Za-z]++");
      FastDateParser fastDateParser0 = new FastDateParser("W0[Gz~E}ka'#3uT", timeZone0, locale0);
      assertEquals("W0[Gz~E}ka'#3uT", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(";;eN>");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("h?h@CWuieVI%<%`l`", timeZone0, locale0);
      assertEquals("h?h@CWuieVI%<%`l`", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("+|E+|F+|G+|H+|K+|M+|S+|W+|+|a+|d+h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']+)*+'|[^'A-Za-z]++");
      Locale locale0 = new Locale("+|E+|F+|G+|H+|K+|M+|S+|W+|+|a+|d+h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']+)*+'|[^'A-Za-z]++");
      FastDateParser fastDateParser0 = new FastDateParser("+|E+|F+|G+|H+|K+|M+|S+|W+|+|a+|d+h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      Locale locale1 = Locale.CANADA;
      FastDateParser fastDateParser1 = new FastDateParser("W0[Gz~E}ka'#3uT", timeZone0, locale1);
      String string0 = "gcfqH/nV";
      try { 
        fastDateParser1.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"gcfqH/nV\" does not match (\\p{IsNd}{1}+)0\\[(AD|AD|BC|BC)(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|CDT|cre\\s*+Time|CST|CT|CWST|DT|EDT|EST|fghanistan\\s*+Time|FT|KDT|KST|laska\\s*+Daylight\\s*+Time|laska\\s*+Standard\\s*+Time|lma-Ata\\s*+Time|LMT|mazon\\s*+Time|MT|nadyr\\s*+Time|NAT|qtau\\s*+Time|qtobe\\s*+Time|QTT|rabia\\s*+Standard\\s*+Time|rgentine\\s*+Time|rmenia\\s*+Time|RT|ST|tlantic\\s*+Daylight\\s*+Time|tlantic\\s*+Standard\\s*+Time|ustralian\\s*+Central\\s*+Daylight\\s*+Time\\s*+\\(South\\s*+Australia\\)|ustralian\\s*+Central\\s*+Daylight\\s*+Time\\s*+\\(South\\s*+Australia/New\\s*+South\\s*+Wales\\)|ustralian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(Northern\\s*+Territory\\)|ustralian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(South\\s*+Australia\\)|ustralian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(South\\s*+Australia/New\\s*+South\\s*+Wales\\)|ustralian\\s*+Central\\s*+Western\\s*+Standard\\s*+Time|ustralian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(New\\s*+South\\s*+Wales\\)|ustralian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(Tasmania\\)|ustralian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(Victoria\\)|ustralian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(New\\s*+South\\s*+Wales\\)|ustralian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Queensland\\)|ustralian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Tasmania\\)|ustralian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Victoria\\)|ustralian\\s*+Western\\s*+Standard\\s*+Time|WST|zerbaijan\\s*+Time|zores\\s*+Summer\\s*+Time|zores\\s*+Time|ZOST|ZOT|ZT|angladesh\\s*+Time|DT|hutan\\s*+Time|NT|olivia\\s*+Time|OT|ougainville\\s*+Standard\\s*+Time|rasilia\\s*+Time|ritish\\s*+Summer\\s*+Time|RT|runei\\s*+Time|ST|TT|ape\\s*+Verde\\s*+Time|AT|CT|DT|entral\\s*+African\\s*+Time|entral\\s*+Daylight\\s*+Time|entral\\s*+European\\s*+Summer\\s*+Time|entral\\s*+European\\s*+Time|entral\\s*+Indonesia\\s*+Time|entral\\s*+Standard\\s*+Time|EST|ET|HADT|hamorro\\s*+Standard\\s*+Time|HAST|hatham\\s*+Daylight\\s*+Time|hatham\\s*+Standard\\s*+Time|hile\\s*+Summer\\s*+Time|hile\\s*+Time|hina\\s*+Standard\\s*+Time|hoibalsan\\s*+Time|HOT|hristmas\\s*+Island\\s*+Time|hST|HUT|huuk\\s*+Time|KT|LST|LT|ocos\\s*+Islands\\s*+Time|olombia\\s*+Time|ook\\s*+Is\\.\\s*+Time|oordinated\\s*+Universal\\s*+Time|OT|ST|uba\\s*+Daylight\\s*+Time|uba\\s*+Standard\\s*+Time|VT|XT|avis\\s*+Time|AVT|DUT|umont-d'Urville\\s*+Time|ASST|AST|ast\\s*+Indonesia\\s*+Time|aster\\s*+Is\\.\\s*+Summer\\s*+Time|aster\\s*+Is\\.\\s*+Time|astern\\s*+African\\s*+Time|astern\\s*+Daylight\\s*+Time|astern\\s*+European\\s*+Summer\\s*+Time|astern\\s*+European\\s*+Time|astern\\s*+Greenland\\s*+Summer\\s*+Time|astern\\s*+Greenland\\s*+Time|astern\\s*+Standard\\s*+Time|AT|CT|cuador\\s*+Time|DT|EST|ET|GST|GT|ST|alkland\\s*+Is\\.\\s*+Time|ernando\\s*+de\\s*+Noronha\\s*+Time|iji\\s*+Summer\\s*+Time|iji\\s*+Time|JST|JT|KT|NT|rench\\s*+Guiana\\s*+Time|rench\\s*+Southern\\s*+&\\s*+Antarctic\\s*+Lands\\s*+Time|alapagos\\s*+Time|ALT|ambier\\s*+Time|AMT|eorgia\\s*+Time|ET|FT|hana\\s*+Mean\\s*+Time|ilbert\\s*+Is\\.\\s*+Time|ILT|MT|MT\\+01:00|MT\\+02:00|MT\\+03:00|MT\\+04:00|MT\\+05:00|MT\\+06:00|MT\\+07:00|MT\\+08:00|MT\\+09:00|MT\\+10:00|MT\\+11:00|MT\\+12:00|MT\\+13:00|MT\\+14:00|MT-01:00|MT-02:00|MT-03:00|MT-04:00|MT-05:00|MT-06:00|MT-07:00|MT-08:00|MT-09:00|MT-10:00|MT-11:00|MT-12:00|reenwich\\s*+Mean\\s*+Time|ST|ulf\\s*+Standard\\s*+Time|uyana\\s*+Time|YT|awaii\\s*+Daylight\\s*+Time|awaii\\s*+Standard\\s*+Time|DT|KT|ong\\s*+Kong\\s*+Time|ovd\\s*+Time|OVT|ST|CT|DT|ndia\\s*+Standard\\s*+Time|ndian\\s*+Ocean\\s*+Territory\\s*+Time|ndochina\\s*+Time|OT|ran\\s*+Daylight\\s*+Time|ran\\s*+Standard\\s*+Time|RDT|rish\\s*+Summer\\s*+Time|RKT|rkutsk\\s*+Time|RST|srael\\s*+Daylight\\s*+Time|srael\\s*+Standard\\s*+Time|ST|apan\\s*+Standard\\s*+Time|ST|GT|irgizstan\\s*+Time|orea\\s*+Standard\\s*+Time|osrae\\s*+Time|OST|ostanay\\s*+Standard\\s*+Time|rasnoyarsk\\s*+Time|RAT|ST|HDT|HST|ine\\s*+Is\\.\\s*+Time|INT|ord\\s*+Howe\\s*+Daylight\\s*+Time|ord\\s*+Howe\\s*+Standard\\s*+Time|acquarie\\s*+Island\\s*+Daylight\\s*+Time|acquarie\\s*+Island\\s*+Standard\\s*+Time|agadan\\s*+Time|AGT|alaysia\\s*+Time|aldives\\s*+Time|arquesas\\s*+Time|arshall\\s*+Islands\\s*+Time|ART|auritius\\s*+Time|awson\\s*+Time|AWT|DT|EST|ET|HT|iddle\\s*+Europe\\s*+Summer\\s*+Time|iddle\\s*+Europe\\s*+Time|IDT|IST|MT|oscow\\s*+Standard\\s*+Time|ountain\\s*+Daylight\\s*+Time|ountain\\s*+Standard\\s*+Time|SK|ST|UT|VT|yanmar\\s*+Time|YT|auru\\s*+Time|CT|DT|epal\\s*+Time|ew\\s*+Caledonia\\s*+Time|ew\\s*+Zealand\\s*+Daylight\\s*+Time|ew\\s*+Zealand\\s*+Standard\\s*+Time|ewfoundland\\s*+Daylight\\s*+Time|ewfoundland\\s*+Standard\\s*+Time|FST|FT|iue\\s*+Time|orfolk\\s*+Summer\\s*+Time|orfolk\\s*+Time|ovosibirsk\\s*+Time|OVT|PT|RT|ST|UT|ZDT|ZST|msk\\s*+Time|MST|ral\\s*+Time|RAT|acific\\s*+Daylight\\s*+Time|acific\\s*+Standard\\s*+Time|akistan\\s*+Time|alau\\s*+Time|apua\\s*+New\\s*+Guinea\\s*+Time|araguay\\s*+Summer\\s*+Time|araguay\\s*+Time|DT|eru\\s*+Time|ET|etropavlovsk-Kamchatski\\s*+Time|ETT|GT|hilippines\\s*+Standard\\s*+Time|hoenix\\s*+Is\\.\\s*+Time|HOT|ierre\\s*+&\\s*+Miquelon\\s*+Daylight\\s*+Time|ierre\\s*+&\\s*+Miquelon\\s*+Standard\\s*+Time|itcairn\\s*+Standard\\s*+Time|KT|MDT|MST|ohnpei\\s*+Time|ONT|ST|WT|YST|YT|OST|YZT|yzylorda\\s*+Time|ET|eunion\\s*+Time|othera\\s*+Time|OTT|akhalin\\s*+Time|AKT|amara\\s*+Time|amoa\\s*+Standard\\s*+Time|AMT|AST|BT|CT|eychelles\\s*+Time|GT|ingapore\\s*+Time|olomon\\s*+Is\\.\\s*+Time|outh\\s*+Africa\\s*+Standard\\s*+Time|outh\\s*+Georgia\\s*+Standard\\s*+Time|rednekolymsk\\s*+Time|RET|RT|ST|uriname\\s*+Time|YOT|yowa\\s*+Time|ahiti\\s*+Time|AHT|ajikistan\\s*+Time|FT|imor-Leste\\s*+Time|JT|KT|LT|MT|okelau\\s*+Time|onga\\s*+Time|OT|RT|urkey\\s*+Time|urkmenistan\\s*+Time|uvalu\\s*+Time|VT|laanbaatar\\s*+Time|LAT|ruguay\\s*+Time|st-Nera\\s*+Time|TC|YT|zbekistan\\s*+Time|ZT|anuatu\\s*+Time|enezuela\\s*+Time|ET|ladivostok\\s*+Time|LAT|OST|ostok\\s*+Time|UT|ake\\s*+Time|AKT|allis\\s*+&\\s*+Futuna\\s*+Time|AT|EST|est\\s*+Indonesia\\s*+Time|est\\s*+Samoa\\s*+Daylight\\s*+Time|est\\s*+Samoa\\s*+Standard\\s*+Time|estern\\s*+African\\s*+Time|estern\\s*+European\\s*+Summer\\s*+Time|estern\\s*+European\\s*+Time|estern\\s*+Greenland\\s*+Summer\\s*+Time|estern\\s*+Greenland\\s*+Time|ET|FT|GST|GT|IB|IT|ITA|SDT|SST|injiang\\s*+Standard\\s*+Time|JT|AKT|akutsk\\s*+Time|ekaterinburg\\s*+Time|EKT)~(Fri|Friday|Mon|Monday|Sat|Saturday|Sun|Sunday|Thu|Thursday|Tue|Tuesday|Wed|Wednesday)\\}(\\p{IsNd}++)(AM|PM)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("3h`#>  `I,Z (r7!]", timeZone0, locale0);
      assertEquals("3h`#>  `I,Z (r7!]", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$zQ[>");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("$zQ[>", timeZone0, locale0);
      try { 
        fastDateParser0.parse("NST");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"NST\" does not match \\$(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville\\s*+Standard\\s*+Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay\\s*+Standard\\s*+Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|ORAT|PDT|PET|PETT|PGT|Philippines\\s*+Standard\\s*+Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk\\s*+Time|SRET|SRT|SST|SYOT|TAHT|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT|\u30A2\u30A4\u30EB\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u30A2\u30AF\u30BF\u30A6\u6642\u9593|\u30A2\u30AF\u30C8\u30D9\u6642\u9593|\u30A2\u30AF\u30EC\u6642\u9593|\u30A2\u30BC\u30EB\u30D0\u30A4\u30B8\u30E3\u30F3\u6642\u9593|\u30A2\u30BE\u30EC\u30B9\u590F\u6642\u9593|\u30A2\u30BE\u30EC\u30B9\u6642\u9593|\u30A2\u30CA\u30C9\u30A5\u30A4\u30EA\u6642\u9593|\u30A2\u30D5\u30AC\u30CB\u30B9\u30BF\u30F3\u6642\u9593|\u30A2\u30DE\u30BE\u30F3\u6642\u9593|\u30A2\u30E9\u30B9\u30AB\u590F\u6642\u9593|\u30A2\u30E9\u30B9\u30AB\u6A19\u6E96\u6642|\u30A2\u30E9\u30D3\u30A2\u6A19\u6E96\u6642|\u30A2\u30EB\u30BC\u30F3\u30C1\u30F3\u6642\u9593|\u30A2\u30EB\u30DE\u30A2\u30BF\u6642\u9593|\u30A2\u30EB\u30E1\u30CB\u30A2\u6642\u9593|\u30A4\u30B9\u30E9\u30A8\u30EB\u590F\u6642\u9593|\u30A4\u30B9\u30E9\u30A8\u30EB\u6A19\u6E96\u6642|\u30A4\u30E9\u30F3\u590F\u6642\u9593|\u30A4\u30E9\u30F3\u6A19\u6E96\u6642|\u30A4\u30EB\u30AF\u30FC\u30C4\u30AF\u6642\u9593|\u30A4\u30F3\u30C9\u30B7\u30CA\u6642\u9593|\u30A4\u30F3\u30C9\u6A19\u6E96\u6642|\u30A4\u30F3\u30C9\u6D0B\u5730\u57DF\u6642\u9593|\u30A4\u30FC\u30B9\u30BF\u30FC\u5CF6\u590F\u6642\u9593|\u30A4\u30FC\u30B9\u30BF\u30FC\u5CF6\u6642\u9593|\u30A6\u30A7\u30FC\u30AF\u6642\u9593|\u30A6\u30B9\u30C1\u30CD\u30E9\u6642\u9593|\u30A6\u30BA\u30D9\u30AD\u30B9\u30BF\u30F3\u6642\u9593|\u30A6\u30E9\u30B8\u30AA\u30B9\u30C8\u30AF\u6642\u9593|\u30A6\u30E9\u30FC\u30F3\u30D0\u30FC\u30C8\u30EB\u6642\u9593|\u30A6\u30EB\u30B0\u30A2\u30A4\u6642\u9593|\u30A8\u30AB\u30C6\u30EA\u30F3\u30D6\u30EB\u30B0\u6642\u9593|\u30A8\u30AF\u30A2\u30C9\u30EB\u6642\u9593|\u30AA\u30E0\u30B9\u30AF\u6642\u9593|\u30AA\u30E9\u30EB\u6642\u9593|\u30AB\u30FC\u30DC\u30D9\u30EB\u30C7\u6642\u9593|\u30AC\u30A4\u30A2\u30CA\u6642\u9593|\u30AC\u30E9\u30D1\u30B4\u30B9\u6642\u9593|\u30AC\u30F3\u30D3\u30A2\u6642\u9593|\u30AC\u30FC\u30CA\u6A19\u6E96\u6642|\u30AD\u30B8\u30EB\u30AA\u30EB\u30C0\u6642\u9593|\u30AD\u30E5\u30FC\u30D0\u590F\u6642\u9593|\u30AD\u30E5\u30FC\u30D0\u6A19\u6E96\u6642|\u30AD\u30EB\u30AE\u30B9\u30BF\u30F3\u6642\u9593|\u30AE\u30EB\u30D0\u30FC\u30C8\u8AF8\u5CF6\u6642\u9593|\u30AF\u30C3\u30AF\u8AF8\u5CF6\u6642\u9593|\u30AF\u30E9\u30B9\u30CE\u30E4\u30EB\u30B9\u30AF\u6642\u9593|\u30AF\u30EA\u30B9\u30DE\u30B9\u8AF8\u5CF6\u6642\u9593|\u30B0\u30A2\u30E0\u6A19\u6E96\u6642|\u30B0\u30EA\u30CB\u30C3\u30B8\u6A19\u6E96\u6642|\u30B0\u30EB\u30B8\u30A2\u6642\u9593|\u30B3\u30B3\u30B9\u8AF8\u5CF6\u6642\u9593|\u30B3\u30B9\u30E9\u30A8\u6642\u9593|\u30B3\u30ED\u30F3\u30D3\u30A2\u6642\u9593|\u30B5\u30DE\u30E9\u6642\u9593|\u30B5\u30E2\u30A2\u6A19\u6E96\u6642|\u30B5\u30F3\u30D4\u30A8\u30FC\u30EB\u30FB\u30DF\u30AF\u30ED\u30F3\u8AF8\u5CF6\u590F\u6642\u9593|\u30B5\u30F3\u30D4\u30A8\u30FC\u30EB\u30FB\u30DF\u30AF\u30ED\u30F3\u8AF8\u5CF6\u6A19\u6E96\u6642|\u30B7\u30F3\u30AC\u30DD\u30FC\u30EB\u6642\u9593|\u30B9\u30EA\u30CA\u30E0\u6642\u9593|\u30BB\u30A4\u30B7\u30A7\u30EB\u6642\u9593|\u30BD\u30ED\u30E2\u30F3\u8AF8\u5CF6\u6642\u9593|\u30BF\u30B8\u30AD\u30B9\u30BF\u30F3\u6642\u9593|\u30BF\u30D2\u30C1\u6642\u9593|\u30C1\u30E3\u30BF\u30E0\u590F\u6642\u9593|\u30C1\u30E3\u30BF\u30E0\u6A19\u6E96\u6642|\u30C1\u30E5\u30FC\u30AF\u6642\u9593|\u30C1\u30E7\u30A4\u30D0\u30EB\u30B5\u30F3\u6642\u9593|\u30C1\u30EA\u590F\u6642\u9593|\u30C1\u30EA\u6642\u9593|\u30C4\u30D0\u30EB\u6642\u9593|\u30C7\u30A4\u30D3\u30B9\u6642\u9593|\u30C7\u30E5\u30E2\u30F3\u30C7\u30E5\u30EB\u30F4\u30A3\u30EB\u6642\u9593|\u30C8\u30B1\u30E9\u30A6\u8AF8\u5CF6\u6642\u9593|\u30C8\u30EB\u30AF\u30E1\u30CB\u30B9\u30BF\u30F3\u6642\u9593|\u30C8\u30F3\u30AC\u6642\u9593|\u30CA\u30A6\u30EB\u6642\u9593|\u30CB\u30A6\u30A8\u5CF6\u6642\u9593|\u30CB\u30E5\u30FC\u30AB\u30EC\u30C9\u30CB\u30A2\u6642\u9593|\u30CB\u30E5\u30FC\u30B8\u30FC\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u30CB\u30E5\u30FC\u30B8\u30FC\u30E9\u30F3\u30C9\u6A19\u6E96\u6642|\u30CB\u30E5\u30FC\u30D5\u30A1\u30F3\u30C9\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u30CB\u30E5\u30FC\u30D5\u30A1\u30F3\u30C9\u30E9\u30F3\u30C9\u6A19\u6E96\u6642|\u30CD\u30D1\u30FC\u30EB\u6642\u9593|\u30CE\u30DC\u30B7\u30D3\u30EB\u30B9\u30AF\u6642\u9593|\u30CE\u30FC\u30D5\u30A9\u30FC\u30AF\u590F\u6642\u9593|\u30CE\u30FC\u30D5\u30A9\u30FC\u30AF\u6642\u9593|\u30CF\u30EF\u30A4\u590F\u6642\u9593|\u30CF\u30EF\u30A4\u6A19\u6E96\u6642|\u30D0\u30CC\u30A2\u30C4\u6642\u9593|\u30D0\u30F3\u30B0\u30E9\u30C7\u30B7\u30E5\u6642\u9593|\u30D1\u30AD\u30B9\u30BF\u30F3\u6642\u9593|\u30D1\u30D7\u30A2\u30CB\u30E5\u30FC\u30AE\u30CB\u30A2\u6642\u9593|\u30D1\u30E9\u30AA\u6642\u9593|\u30D1\u30E9\u30B0\u30A2\u30A4\u590F\u6642\u9593|\u30D1\u30E9\u30B0\u30A2\u30A4\u6642\u9593|\u30D4\u30C8\u30B1\u30EB\u30F3\u5CF6\u6A19\u6E96\u6642|\u30D5\u30A3\u30B8\u30FC\u590F\u6642\u9593|\u30D5\u30A3\u30B8\u30FC\u6642\u9593|\u30D5\u30A7\u30CB\u30C3\u30AF\u30B9\u8AF8\u5CF6\u6642\u9593|\u30D5\u30A7\u30EB\u30CA\u30F3\u30C9\u30FB\u30C7\u30FB\u30CE\u30ED\u30FC\u30CB\u30E3\u6642\u9593|\u30D5\u30A9\u30FC\u30AF\u30E9\u30F3\u30C9\u8AF8\u5CF6\u6642\u9593|\u30D6\u30E9\u30B8\u30EB\u6642\u9593|\u30D6\u30EB\u30CD\u30A4\u6642\u9593|\u30D6\u30FC\u30BF\u30F3\u6642\u9593|\u30D9\u30CD\u30BA\u30A8\u30E9\u6642\u9593|\u30DA\u30C8\u30ED\u30D1\u30D6\u30ED\u30D5\u30B9\u30AF\u30AB\u30E0\u30C1\u30E3\u30C4\u30AD\u30FC\u6642\u9593|\u30DA\u30EB\u30FC\u6642\u9593|\u30DB\u30D6\u30C9\u6642\u9593|\u30DC\u30B9\u30C8\u30FC\u30AF\u57FA\u5730\u6642\u9593|\u30DC\u30EA\u30D3\u30A2\u6642\u9593|\u30DD\u30F3\u30DA\u30A4\u6642\u9593|\u30DE\u30AC\u30C0\u30F3\u6642\u9593|\u30DE\u30C3\u30B3\u30FC\u30EA\u30FC\u5CF6\u590F\u6642\u9593|\u30DE\u30C3\u30B3\u30FC\u30EA\u30FC\u5CF6\u6642\u9593|\u30DE\u30EB\u30B1\u30B5\u30B9\u6642\u9593|\u30DE\u30EC\u30FC\u30B7\u30A2\u6642\u9593|\u30DE\u30FC\u30B7\u30E3\u30EB\u5CF6\u6642\u9593|\u30DF\u30E3\u30F3\u30DE\u30FC\u6642\u9593|\u30E2\u30B9\u30AF\u30EF\u6A19\u6E96\u6642|\u30E2\u30EB\u30B8\u30D6\u6642\u9593|\u30E2\u30FC\u30BD\u30F3\u6642\u9593|\u30E2\u30FC\u30EA\u30B7\u30E3\u30B9\u6642\u9593|\u30E4\u30AF\u30FC\u30C4\u30AF\u6642\u9593|\u30E9\u30A4\u30F3\u8AF8\u5CF6\u6642\u9593|\u30EC\u30E6\u30CB\u30AA\u30F3\u6642\u9593|\u30ED\u30BC\u30E9\u6642\u9593|\u30ED\u30FC\u30C9\u30CF\u30A6\u5CF6\u590F\u6642\u9593|\u30ED\u30FC\u30C9\u30CF\u30A6\u5CF6\u6A19\u6E96\u6642|\u30EF\u30EA\u30B9\u53CA\u3073\u30D5\u30C4\u30CA\u6642\u9593|\u4E2D\u56FD\u6A19\u6E96\u6642|\u4E2D\u592E\u30A4\u30F3\u30C9\u30CD\u30B7\u30A2\u6642\u9593|\u4E2D\u897F\u90E8\u6A19\u6E96\u6642\\(\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2\\)|\u4E2D\u90E8\u30A2\u30D5\u30EA\u30AB\u6642\u9593|\u4E2D\u90E8\u30E8\u30FC\u30ED\u30C3\u30D1\u590F\u6642\u9593|\u4E2D\u90E8\u30E8\u30FC\u30ED\u30C3\u30D1\u6642\u9593|\u4E2D\u90E8\u590F\u6642\u9593|\u4E2D\u90E8\u590F\u6642\u9593\\(\u5357\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2\\)|\u4E2D\u90E8\u590F\u6642\u9593\\(\u5357\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2/\u30CB\u30E5\u30FC\u30B5\u30A6\u30B9\u30A6\u30A7\u30FC\u30EB\u30BA\\)|\u4E2D\u90E8\u6A19\u6E96\u6642|\u4E2D\u90E8\u6A19\u6E96\u6642\\(\u30CE\u30FC\u30B6\u30F3\u30C6\u30EA\u30C8\u30EA\u30FC\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\\(\u5357\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\\(\u5357\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2/\u30CB\u30E5\u30FC\u30B5\u30A6\u30B9\u30A6\u30A7\u30FC\u30EB\u30BA\\)|\u4ECF\u5357\u65B9\u9818\u304A\u3088\u3073\u5357\u6975\u6642\u9593|\u4ECF\u9818\u30AE\u30A2\u30CA\u6642\u9593|\u5354\u5B9A\u4E16\u754C\u6642|\u5357\u30A2\u30D5\u30EA\u30AB\u6A19\u6E96\u6642|\u5357\u30B8\u30E7\u30FC\u30B8\u30A2\u5CF6\u6A19\u6E96\u6642|\u5927\u897F\u6D0B\u590F\u6642\u9593|\u5927\u897F\u6D0B\u6A19\u6E96\u6642|\u592A\u5E73\u6D0B\u590F\u6642\u9593|\u592A\u5E73\u6D0B\u6A19\u6E96\u6642|\u5C71\u5730\u590F\u6642\u9593|\u5C71\u5730\u6A19\u6E96\u6642|\u65E5\u672C\u6A19\u6E96\u6642|\u662D\u548C\u57FA\u5730\u6642\u9593|\u6771\u30A2\u30D5\u30EA\u30AB\u6642\u9593|\u6771\u30A4\u30F3\u30C9\u30CD\u30B7\u30A2\u6642\u9593|\u6771\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u6771\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9\u6642\u9593|\u6771\u30C6\u30A3\u30E2\u30FC\u30EB\u6642\u9593|\u6771\u30E8\u30FC\u30ED\u30C3\u30D1\u590F\u6642\u9593|\u6771\u30E8\u30FC\u30ED\u30C3\u30D1\u6642\u9593|\u6771\u90E8\u590F\u6642\u9593|\u6771\u90E8\u590F\u6642\u9593\\(\u30BF\u30B9\u30DE\u30CB\u30A2\\)|\u6771\u90E8\u590F\u6642\u9593\\(\u30CB\u30E5\u30FC\u30B5\u30A6\u30B9\u30A6\u30A7\u30FC\u30EB\u30BA\\)|\u6771\u90E8\u590F\u6642\u9593\\(\u30D3\u30AF\u30C8\u30EA\u30A2\\)|\u6771\u90E8\u6A19\u6E96\u6642|\u6771\u90E8\u6A19\u6E96\u6642\\(\u30AF\u30A4\u30FC\u30F3\u30BA\u30E9\u30F3\u30C9\\)|\u6771\u90E8\u6A19\u6E96\u6642\\(\u30BF\u30B9\u30DE\u30CB\u30A2\\)|\u6771\u90E8\u6A19\u6E96\u6642\\(\u30CB\u30E5\u30FC\u30B5\u30A6\u30B9\u30A6\u30A7\u30FC\u30EB\u30BA\\)|\u6771\u90E8\u6A19\u6E96\u6642\\(\u30D3\u30AF\u30C8\u30EA\u30A2\\)|\u6A3A\u592A\u6642\u9593|\u6E7E\u5CB8\u6A19\u6E96\u6642|\u82F1\u56FD\u590F\u6642\u9593|\u897F\u30A2\u30D5\u30EA\u30AB\u6642\u9593|\u897F\u30A4\u30F3\u30C9\u30CD\u30B7\u30A2\u6642\u9593|\u897F\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u897F\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9\u6642\u9593|\u897F\u30B5\u30E2\u30A2\u590F\u6642\u9593|\u897F\u30B5\u30E2\u30A2\u6642\u9593|\u897F\u30E8\u30FC\u30ED\u30C3\u30D1\u590F\u6642\u9593|\u897F\u30E8\u30FC\u30ED\u30C3\u30D1\u6642\u9593|\u897F\u90E8\u6A19\u6E96\u6642\\(\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2\\)|\u97D3\u56FD\u6A19\u6E96\u6642|\u9999\u6E2F\u6642\u9593)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$D7N>");
      Locale locale0 = new Locale("$D7N>", "$D7N>");
      FastDateParser fastDateParser0 = new FastDateParser("6yy[Fl6q=^g36Q", timeZone0, locale0);
      try { 
        fastDateParser0.parse("l0Ro!0q0DNvqk6Z3THD");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"l0Ro!0q0DNvqk6Z3THD\" does not match 6(\\p{IsNd}++)\\[(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(";;eN>");
      Locale locale0 = Locale.KOREA;
      Locale locale1 = new Locale("8~q!i", "8~q!i");
      FastDateParser fastDateParser0 = new FastDateParser("8~q!i", timeZone0, locale1);
      FastDateParser fastDateParser1 = new FastDateParser("8~q!i", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("s@z");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("s@z", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(92, "s@z");
      FastDateParser fastDateParser1 = new FastDateParser("s@z", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("4\"/j)t7R5");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("4\"/j)t7R5", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("]", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("s@z");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("s@z");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("s@z", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("2Z,uKQ'~q(", "2Z,uKQ'~q(");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("ACT", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("s@z");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("7+bA");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale(".O", ".O", ".O");
      FastDateParser fastDateParser0 = new FastDateParser(".O", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("\\.", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "6{^>Oz[]a.8lIFqYk}");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("6{^>Oz[]a.8lIFqYk}", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("6{^>Oz[]a.8lIFqYk}", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(467, "EQD+)Ff");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("k\"[>j{EM8bwkAF3", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("k\"[>j{EM8bwkAF3", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale(".O", ".O", ".O");
      FastDateParser fastDateParser0 = new FastDateParser(".O", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject(".O", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "6{^>Oz[]a.8lIFqYk}");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("6{^>Oz[]a.8lIFqYk}", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[6{^>Oz[]a.8lIFqYk},it,6{^>Oz[]a.8lIFqYk}]", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("5&");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("HT~*$Ouz5", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("5&");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("m1EWE", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("CN", locale1.getCountry());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("8DZ'}Kd*;Qqm", timeZone0, locale0);
      assertEquals("8DZ'}Kd*;Qqm", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("G{MMSZ", "G{MMSZ", "fJZyhshu4/");
      FastDateParser fastDateParser0 = new FastDateParser("zPV5", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("GMTCST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }
}
