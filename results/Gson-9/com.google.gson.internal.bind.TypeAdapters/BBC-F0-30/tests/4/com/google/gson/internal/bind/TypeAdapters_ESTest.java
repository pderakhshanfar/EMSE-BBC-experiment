/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 09:59:03 GMT 2021
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.ExclusionStrategy;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.ObjectConstructor;
import com.google.gson.internal.bind.ArrayTypeAdapter;
import com.google.gson.internal.bind.DateTypeAdapter;
import com.google.gson.internal.bind.ObjectTypeAdapter;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.internal.bind.TreeTypeAdapter;
import com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import java.io.Reader;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.URI;
import java.net.URL;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Locale;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      Gson gson0 = new Gson();
      Class<Calendar> class1 = Calendar.class;
      TypeAdapter<Calendar> typeAdapter0 = TypeAdapters.CALENDAR;
      TypeAdapterRuntimeTypeWrapper<Calendar> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Calendar>(gson0, typeAdapter0, class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<? extends Calendar>) class1, (TypeAdapter<? super Calendar>) typeAdapterRuntimeTypeWrapper0);
      Class<MockCalendar> class2 = MockCalendar.class;
      TypeToken<MockCalendar> typeToken0 = TypeToken.get(class2);
      TypeAdapter<MockCalendar> typeAdapter1 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      ArrayTypeAdapter<MockCalendar> arrayTypeAdapter0 = new ArrayTypeAdapter<MockCalendar>(gson0, typeAdapter1, class2);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper1 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, arrayTypeAdapter0, class0);
      Class<Object> class3 = Object.class;
      Class<Long> class4 = Long.class;
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactoryForMultipleTypes(class3, (Class<?>) class4, (TypeAdapter<? super Object>) typeAdapterRuntimeTypeWrapper1);
      assertNotSame(typeAdapterFactory0, typeAdapterFactory1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = Character.valueOf('r');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Class<Byte> class0 = Byte.class;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"r\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$9", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Excluder excluder0 = Excluder.DEFAULT;
      Gson gson0 = new Gson();
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TypeToken<AtomicInteger> typeToken0 = TypeToken.get(class0);
      JsonSerializer<AtomicInteger> jsonSerializer0 = (JsonSerializer<AtomicInteger>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      TreeTypeAdapter<AtomicInteger> treeTypeAdapter0 = new TreeTypeAdapter<AtomicInteger>(jsonSerializer0, (JsonDeserializer<AtomicInteger>) null, gson0, typeToken0, excluder0);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("java.util.concurrent.atomic.AtomicInteger");
      // Undeclared exception!
      try { 
        treeTypeAdapter0.fromJsonTree(jsonPrimitive0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"java.util.concurrent.atomic.AtomicInteger\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      Gson gson0 = new Gson();
      Class<Calendar> class1 = Calendar.class;
      TypeAdapter<Calendar> typeAdapter0 = gson0.getAdapter(class1);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super MockCalendar>) typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<InetAddress> class0 = InetAddress.class;
      Gson gson0 = new Gson();
      TypeAdapter<InetAddress> typeAdapter0 = gson0.getAdapter(class0);
      TypeAdapterRuntimeTypeWrapper<InetAddress> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<InetAddress>(gson0, typeAdapter0, class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, (TypeAdapter<InetAddress>) typeAdapterRuntimeTypeWrapper0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(class0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, typeAdapter0, class0);
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(2471);
      String string0 = typeAdapterRuntimeTypeWrapper0.toJson((Object) atomicIntegerArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonObject> class0 = JsonObject.class;
      StringReader stringReader0 = new StringReader("vDd");
      JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Class<MockCalendar> class0 = MockCalendar.class;
      ArrayTypeAdapter<MockCalendar> arrayTypeAdapter0 = new ArrayTypeAdapter<MockCalendar>(gson0, (TypeAdapter<MockCalendar>) null, class0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, arrayTypeAdapter0, class0);
      JsonObject jsonObject0 = new JsonObject();
      jsonArray0.add((JsonElement) jsonObject0);
      String string0 = typeAdapterRuntimeTypeWrapper0.toJson((Object) jsonArray0);
      assertEquals("[{}]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Class<Object> class0 = Object.class;
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, objectTypeAdapter0, class0);
      JsonObject jsonObject0 = new JsonObject();
      Boolean boolean0 = Boolean.valueOf("]FkftmsW");
      jsonObject0.addProperty("", boolean0);
      JsonElement jsonElement0 = typeAdapterRuntimeTypeWrapper0.toJsonTree(jsonObject0);
      assertTrue(jsonElement0.equals((Object)jsonObject0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicInteger atomicInteger0 = new AtomicInteger(2464);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(atomicInteger0);
      String string0 = gson0.toJson((JsonElement) jsonPrimitive0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<MockCalendar> class0 = MockCalendar.class;
      ArrayTypeAdapter<MockCalendar> arrayTypeAdapter0 = new ArrayTypeAdapter<MockCalendar>(gson0, (TypeAdapter<MockCalendar>) null, class0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, arrayTypeAdapter0, class0);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter");
      String string0 = typeAdapterRuntimeTypeWrapper0.toJson((Object) jsonPrimitive0);
      assertEquals("\"com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter\"", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Class<Character> class0 = Character.TYPE;
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, objectTypeAdapter0, class0);
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      String string0 = typeAdapterRuntimeTypeWrapper0.toJson((Object) jsonNull0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((JsonElement) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      TypeAdapterFactory typeAdapterFactory0 = DateTypeAdapter.FACTORY;
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TypeToken<AtomicInteger> typeToken0 = TypeToken.get(class0);
      Integer integer0 = Integer.getInteger("r9HoV5", 2446);
      jsonArray0.add((Number) integer0);
      JsonSerializer<AtomicInteger> jsonSerializer0 = (JsonSerializer<AtomicInteger>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<AtomicInteger> jsonDeserializer0 = (JsonDeserializer<AtomicInteger>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      TreeTypeAdapter<AtomicInteger> treeTypeAdapter0 = new TreeTypeAdapter<AtomicInteger>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      AtomicInteger atomicInteger0 = treeTypeAdapter0.fromJsonTree(jsonArray0);
      assertNull(atomicInteger0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      AtomicInteger atomicInteger0 = new AtomicInteger(551);
      JsonDeserializer<AtomicInteger> jsonDeserializer0 = (JsonDeserializer<AtomicInteger>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(atomicInteger0).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TypeToken<AtomicInteger> typeToken0 = TypeToken.get(class0);
      TreeTypeAdapter<AtomicInteger> treeTypeAdapter0 = new TreeTypeAdapter<AtomicInteger>((JsonSerializer<AtomicInteger>) null, jsonDeserializer0, gson0, typeToken0, objectTypeAdapter0.FACTORY);
      JsonObject jsonObject0 = new JsonObject();
      AtomicInteger atomicInteger1 = treeTypeAdapter0.fromJsonTree(jsonObject0);
      assertEquals((short)551, atomicInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      TypeAdapterFactory typeAdapterFactory0 = DateTypeAdapter.FACTORY;
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TypeToken<AtomicInteger> typeToken0 = TypeToken.get(class0);
      JsonSerializer<AtomicInteger> jsonSerializer0 = (JsonSerializer<AtomicInteger>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<AtomicInteger> jsonDeserializer0 = (JsonDeserializer<AtomicInteger>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      TreeTypeAdapter<AtomicInteger> treeTypeAdapter0 = new TreeTypeAdapter<AtomicInteger>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      AtomicInteger atomicInteger0 = treeTypeAdapter0.fromJsonTree(jsonArray0);
      assertNull(atomicInteger0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TypeToken<AtomicInteger> typeToken0 = TypeToken.get(class0);
      JsonDeserializer<AtomicInteger> jsonDeserializer0 = (JsonDeserializer<AtomicInteger>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TreeTypeAdapter<AtomicInteger> treeTypeAdapter0 = new TreeTypeAdapter<AtomicInteger>((JsonSerializer<AtomicInteger>) null, jsonDeserializer0, gson0, typeToken0, objectTypeAdapter0.FACTORY);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      AtomicInteger atomicInteger0 = treeTypeAdapter0.fromJsonTree(jsonElement0);
      assertNull(atomicInteger0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<MockCalendar> class0 = MockCalendar.class;
      ArrayTypeAdapter<MockCalendar> arrayTypeAdapter0 = new ArrayTypeAdapter<MockCalendar>(gson0, (TypeAdapter<MockCalendar>) null, class0);
      Class<AtomicInteger> class1 = AtomicInteger.class;
      TypeToken<AtomicInteger> typeToken0 = TypeToken.get(class1);
      JsonSerializer<AtomicInteger> jsonSerializer0 = (JsonSerializer<AtomicInteger>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<AtomicInteger> jsonDeserializer0 = (JsonDeserializer<AtomicInteger>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      TreeTypeAdapter<AtomicInteger> treeTypeAdapter0 = new TreeTypeAdapter<AtomicInteger>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, arrayTypeAdapter0.FACTORY);
      Boolean boolean0 = Boolean.FALSE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      AtomicInteger atomicInteger0 = treeTypeAdapter0.fromJsonTree(jsonPrimitive0);
      assertNull(atomicInteger0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Long long0 = new Long(0L);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) long0);
      JsonSerializer<AtomicInteger> jsonSerializer0 = (JsonSerializer<AtomicInteger>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<AtomicInteger> jsonDeserializer0 = (JsonDeserializer<AtomicInteger>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TypeToken<AtomicInteger> typeToken0 = TypeToken.get(class0);
      TreeTypeAdapter<AtomicInteger> treeTypeAdapter0 = new TreeTypeAdapter<AtomicInteger>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, objectTypeAdapter0.FACTORY);
      AtomicInteger atomicInteger0 = treeTypeAdapter0.fromJsonTree(jsonElement0);
      assertNull(atomicInteger0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Gson gson0 = new Gson();
      Double double0 = new Double(1.0);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.addProperty("com.google.gson.internal.bind.TypeAdapters$6", "com.google.gson.internal.bind.TypeAdapters$6");
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonObject0, class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.google.gson.internal.bind.TypeAdapters$6\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonObject> class0 = JsonObject.class;
      TypeAdapter<JsonObject> typeAdapter0 = gson0.getAdapter(class0);
      ArrayTypeAdapter<JsonObject> arrayTypeAdapter0 = new ArrayTypeAdapter<JsonObject>(gson0, typeAdapter0, class0);
      JsonElement jsonElement0 = arrayTypeAdapter0.toJsonTree((Object) null);
      Class<GregorianCalendar> class1 = GregorianCalendar.class;
      GregorianCalendar gregorianCalendar0 = gson0.fromJson(jsonElement0, class1);
      assertNull(gregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      GregorianCalendar gregorianCalendar0 = gson0.fromJson((JsonElement) jsonObject0, class0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<MockCalendar> class0 = MockCalendar.class;
      ObjectConstructor<Object> objectConstructor0 = (ObjectConstructor<Object>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<Object> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Object>(objectConstructor0, hashMap0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, reflectiveTypeAdapterFactory_Adapter0, class0);
      UUID uUID0 = MockUUID.fromString("F7kQTuicY~5A");
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)typeAdapterRuntimeTypeWrapper0.toJsonTree(uUID0);
      assertFalse(jsonPrimitive0.isNumber());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("null");
      Class<UUID> class0 = UUID.class;
      UUID uUID0 = gson0.fromJson((Reader) stringReader0, class0);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("z@");
      Class<UUID> class0 = UUID.class;
      UUID uUID0 = gson0.fromJson((Reader) stringReader0, class0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      Object object0 = gson0.fromJson(jsonElement0, (Type) class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("com.google.gson.internal.bind.TypeAdapters$29");
      Class<InetAddress> class0 = InetAddress.class;
      Inet4Address inet4Address0 = (Inet4Address)gson0.fromJson((Reader) stringReader0, class0);
      assertFalse(inet4Address0.isMCGlobal());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<URI> class0 = URI.class;
      Gson gson0 = new Gson();
      MockFileWriter mockFileWriter0 = new MockFileWriter("END_ARRAY");
      gson0.toJson((Object) null, (Type) class0, (Appendable) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, objectTypeAdapter0, class0);
      URI uRI0 = MockURI.aFileURI;
      String string0 = typeAdapterRuntimeTypeWrapper0.toJson((Object) uRI0);
      assertEquals("\"file:///tmp/foo.bar\"", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URI> class0 = URI.class;
      URI uRI0 = gson0.fromJson("null", class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URI> class0 = URI.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("jmNL?ep$>$", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in query at index 8: jmNL?ep$>$
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$23", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, objectTypeAdapter0, class0);
      URL uRL0 = MockURL.getHttpExample();
      String string0 = typeAdapterRuntimeTypeWrapper0.toJson((Object) uRL0);
      assertEquals("\"http://www.someFakeButWellFormedURL.org/fooExample\"", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      Float float0 = gson0.fromJson("null", (Type) class0);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      try { 
        gson0.fromJson("nk", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: nk
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<MockCalendar> class0 = MockCalendar.class;
      ArrayTypeAdapter<MockCalendar> arrayTypeAdapter0 = new ArrayTypeAdapter<MockCalendar>(gson0, (TypeAdapter<MockCalendar>) null, class0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, arrayTypeAdapter0, class0);
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = typeAdapterRuntimeTypeWrapper0.toJson((Object) stringBuffer0);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      Class<StringBuffer> class1 = StringBuffer.class;
      StringBuffer stringBuffer0 = gson0.fromJson(jsonElement0, class1);
      assertNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Class<StringBuffer> class0 = StringBuffer.class;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_ARRAY
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<MockCalendar> class0 = MockCalendar.class;
      ArrayTypeAdapter<MockCalendar> arrayTypeAdapter0 = new ArrayTypeAdapter<MockCalendar>(gson0, (TypeAdapter<MockCalendar>) null, class0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, arrayTypeAdapter0, class0);
      StringBuilder stringBuilder0 = new StringBuilder(1);
      String string0 = typeAdapterRuntimeTypeWrapper0.toJson((Object) stringBuilder0);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuilder> class0 = StringBuilder.class;
      StringBuilder stringBuilder0 = gson0.fromJson("null", class0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuilder> class0 = StringBuilder.class;
      StringBuilder stringBuilder0 = gson0.fromJson("hourOfDay", class0);
      assertEquals("hourOfDay", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      Boolean boolean0 = new Boolean(true);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      String string0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      String string0 = gson0.fromJson(jsonElement0, class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      JsonPrimitive jsonPrimitive0 = gson0.fromJson("Nu!jv2", class0);
      Class<String> class1 = String.class;
      String string0 = gson0.fromJson((JsonElement) jsonPrimitive0, class1);
      assertEquals("Nu!jv2", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertTrue(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = new Character(':');
      String string0 = gson0.toJson((Object) character0);
      assertEquals("\":\"", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("@");
      Class<Character> class0 = Character.class;
      Character character0 = gson0.fromJson((Reader) stringReader0, class0);
      assertEquals('@', (char)character0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("null");
      Class<Character> class0 = Character.class;
      Character character0 = gson0.fromJson((Reader) stringReader0, class0);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("com.google.gson.internal.bind.TypeAdapters$26$1");
      Class<Character> class0 = Character.class;
      try { 
        gson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting character, got: com.google.gson.internal.bind.TypeAdapters$26$1
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      StringReader stringReader0 = new StringReader("null");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      MockGregorianCalendar mockGregorianCalendar0 = gson0.fromJson(jsonReader0, (Type) class0);
      assertNull(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("vDd");
      JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
      Class<Long> class0 = Long.TYPE;
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"vDd\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$12", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Integer integer0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.JAPANESE;
      Class<Integer> class0 = Integer.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) locale0);
      try { 
        gson0.fromJson(jsonElement0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"ja\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      try { 
        gson0.fromJson("@TD,fM VE; Ig<", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"@TD\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$10", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      Class<Byte> class0 = Byte.class;
      Byte byte0 = gson0.fromJson(jsonElement0, class0);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = new Character('6');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Gson gson0 = new Gson();
      Boolean boolean0 = Boolean.TRUE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean1 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Gson gson0 = new Gson();
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(class0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, typeAdapter0, class0);
      BitSet bitSet0 = new BitSet();
      bitSet0.set(1721, 65279);
      // Undeclared exception!
      typeAdapterRuntimeTypeWrapper0.toJson((Object) bitSet0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Gson gson0 = new Gson();
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(class0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, typeAdapter0, class0);
      BitSet bitSet0 = new BitSet(5);
      String string0 = typeAdapterRuntimeTypeWrapper0.toJson((Object) bitSet0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BitSet> class0 = BitSet.class;
      try { 
        gson0.fromJson("@)TD,fM VE; KIg<", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Gson gson0 = new Gson();
      Boolean boolean0 = Boolean.valueOf("");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<Currency> class0 = Currency.class;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BOOLEAN
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<MockCalendar> class0 = MockCalendar.class;
      ArrayTypeAdapter<MockCalendar> arrayTypeAdapter0 = new ArrayTypeAdapter<MockCalendar>(gson0, (TypeAdapter<MockCalendar>) null, class0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, arrayTypeAdapter0, class0);
      Locale locale0 = Locale.CANADA;
      Currency currency0 = Currency.getInstance(locale0);
      String string0 = typeAdapterRuntimeTypeWrapper0.toJson((Object) currency0);
      assertEquals("\"CAD\"", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<MockCalendar> class0 = MockCalendar.class;
      TypeAdapter<MockCalendar> typeAdapter0 = gson0.getAdapter(class0);
      Class<Character> class1 = Character.TYPE;
      TypeAdapterRuntimeTypeWrapper<MockCalendar> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<MockCalendar>(gson0, typeAdapter0, class1);
      ArrayTypeAdapter<MockCalendar> arrayTypeAdapter0 = new ArrayTypeAdapter<MockCalendar>(gson0, typeAdapterRuntimeTypeWrapper0, class0);
      Class<Boolean> class2 = Boolean.TYPE;
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper1 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, arrayTypeAdapter0, class2);
      AtomicInteger atomicInteger0 = new AtomicInteger((-919));
      String string0 = typeAdapterRuntimeTypeWrapper1.toJson((Object) atomicInteger0);
      assertEquals("-919", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectConstructor<Object> objectConstructor0 = (ObjectConstructor<Object>) mock(ObjectConstructor.class, new ViolatedAssumptionAnswer());
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<Object> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Object>(objectConstructor0, hashMap0);
      Class<Byte> class0 = Byte.class;
      TypeToken<Byte> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, reflectiveTypeAdapterFactory_Adapter0, type0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      String string0 = typeAdapterRuntimeTypeWrapper0.toJson((Object) atomicBoolean0);
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = Character.valueOf('%');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BOOLEAN but was STRING
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<MockCalendar> class0 = MockCalendar.class;
      ArrayTypeAdapter<MockCalendar> arrayTypeAdapter0 = new ArrayTypeAdapter<MockCalendar>(gson0, (TypeAdapter<MockCalendar>) null, class0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, arrayTypeAdapter0, class0);
      Byte byte0 = new Byte((byte) (-30));
      String string0 = typeAdapterRuntimeTypeWrapper0.toJson((Object) byte0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      Class<Object> class0 = Object.class;
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, objectTypeAdapter0, class0);
      Class<MockCalendar> class1 = MockCalendar.class;
      TypeToken<MockCalendar> typeToken0 = TypeToken.get(class1);
      Excluder excluder0 = Excluder.DEFAULT;
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(exclusionStrategy0).shouldSkipClass(any(java.lang.Class.class));
      Excluder excluder1 = excluder0.withExclusionStrategy(exclusionStrategy0, true, true);
      excluder1.create(gson0, typeToken0);
      // Undeclared exception!
      try { 
        typeAdapterRuntimeTypeWrapper0.toJson((Object) excluder1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: com.google.gson.ExclusionStrategy. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, objectTypeAdapter0, class0);
      InetAddress inetAddress0 = MockInetAddress.getByName((String) null);
      String string0 = typeAdapterRuntimeTypeWrapper0.toJson((Object) inetAddress0);
      assertEquals("\"127.0.0.1\"", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, objectTypeAdapter0, class0);
      String string0 = typeAdapterRuntimeTypeWrapper0.toJson((Object) gson0);
      AtomicInteger atomicInteger0 = new AtomicInteger(551);
      JsonDeserializer<AtomicInteger> jsonDeserializer0 = (JsonDeserializer<AtomicInteger>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(atomicInteger0).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      Class<AtomicInteger> class1 = AtomicInteger.class;
      TypeToken<AtomicInteger> typeToken0 = TypeToken.get(class1);
      TreeTypeAdapter<AtomicInteger> treeTypeAdapter0 = new TreeTypeAdapter<AtomicInteger>((JsonSerializer<AtomicInteger>) null, jsonDeserializer0, gson0, typeToken0, objectTypeAdapter0.FACTORY);
      JsonObject jsonObject0 = new JsonObject();
      Character character0 = new Character('6');
      jsonObject0.addProperty(string0, character0);
      AtomicInteger atomicInteger1 = treeTypeAdapter0.fromJsonTree(jsonObject0);
      assertEquals(551L, atomicInteger1.longValue());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = new Short((short)0);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) short0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      JsonDeserializer<AtomicInteger> jsonDeserializer0 = (JsonDeserializer<AtomicInteger>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TypeToken<AtomicInteger> typeToken0 = TypeToken.get(class0);
      TreeTypeAdapter<AtomicInteger> treeTypeAdapter0 = new TreeTypeAdapter<AtomicInteger>((JsonSerializer<AtomicInteger>) null, jsonDeserializer0, gson0, typeToken0, objectTypeAdapter0.FACTORY);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<AtomicInteger>) treeTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<Object>) objectTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Gson gson0 = new Gson();
      Long long0 = new Long(0L);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) long0);
      Class<Byte> class0 = Byte.class;
      Byte byte0 = gson0.fromJson(jsonElement0, class0);
      assertEquals((byte)0, (byte)byte0);
  }
}
