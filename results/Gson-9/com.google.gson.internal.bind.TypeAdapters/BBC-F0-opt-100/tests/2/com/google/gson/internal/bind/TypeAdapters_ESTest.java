/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 02:42:53 GMT 2021
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.bind.ArrayTypeAdapter;
import com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import java.io.Reader;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.net.InetAddress;
import java.net.URI;
import java.net.URL;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      Class<Object> class1 = Object.class;
      Class<GregorianCalendar> class2 = GregorianCalendar.class;
      ArrayTypeAdapter<GregorianCalendar> arrayTypeAdapter0 = new ArrayTypeAdapter<GregorianCalendar>(gson0, (TypeAdapter<GregorianCalendar>) null, class2);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<?>) class0, (TypeAdapter<? super Object>) arrayTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = new Character('C');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertEquals("c", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      AtomicInteger atomicInteger0 = new AtomicInteger(123);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(atomicInteger0);
      Byte byte0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertEquals((byte)123, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) "- )B");
      Class<Integer> class0 = Integer.TYPE;
      try { 
        gson0.fromJson(jsonElement0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"- )B\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super Object>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Gson gson0 = new Gson();
      Class<JsonNull> class1 = JsonNull.class;
      TypeToken<JsonNull> typeToken0 = TypeToken.get(class1);
      TypeAdapter<JsonNull> typeAdapter0 = gson0.getAdapter(typeToken0);
      ArrayTypeAdapter<JsonNull> arrayTypeAdapter0 = new ArrayTypeAdapter<JsonNull>(gson0, typeAdapter0, class1);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, (TypeAdapter<Object>) arrayTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(1633);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) atomicIntegerArray0);
      // Undeclared exception!
      try { 
        jsonElement0.getAsJsonObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Object: [java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663,java.lang.Long@0000001663]
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gson gson0 = new Gson();
      Boolean boolean0 = new Boolean("z})f=Il)$ycIHa:+]j");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      JsonPrimitive jsonPrimitive1 = (JsonPrimitive)gson0.toJsonTree((Object) jsonPrimitive0);
      assertFalse(jsonPrimitive1.isString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      Class<JsonObject> class0 = JsonObject.class;
      try { 
        gson0.fromJson(jsonElement0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonNull
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gson gson0 = new Gson();
      Boolean boolean0 = new Boolean("09K2hcTh");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<JsonObject> class0 = JsonObject.class;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<JsonObject> class0 = JsonObject.class;
      TypeToken<JsonObject> typeToken0 = TypeToken.get(class0);
      Gson gson0 = new Gson();
      StringBuffer stringBuffer0 = new StringBuffer("com.google.gson.internal.bind.TypeAdapters$14");
      JsonElement jsonElement0 = gson0.toJsonTree((Object) stringBuffer0);
      TypeAdapter<JsonObject> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
      TypeAdapterRuntimeTypeWrapper<JsonObject> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<JsonObject>(gson0, typeAdapter0, class0);
      // Undeclared exception!
      try { 
        typeAdapterRuntimeTypeWrapper0.fromJsonTree(jsonElement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<JsonObject> class0 = JsonObject.class;
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      try { 
        gson0.fromJson((JsonElement) jsonArray0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonArray
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float(0.0);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) float0);
      Class<JsonObject> class0 = JsonObject.class;
      try { 
        gson0.fromJson(jsonElement0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      TypeToken<Calendar> typeToken0 = TypeToken.get(class0);
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.BOOLEAN_FACTORY;
      TypeAdapter<Calendar> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      assertNotNull(typeAdapter0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonDeserializer<Boolean> jsonDeserializer0 = (JsonDeserializer<Boolean>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) jsonDeserializer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: com.google.gson.JsonDeserializer. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((JsonElement) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) gson0);
      Class<JsonNull> class0 = JsonNull.class;
      try { 
        gson0.fromJson(jsonElement0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonNull but was com.google.gson.JsonObject
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) locale0);
      Class<Locale> class0 = Locale.class;
      Locale locale1 = gson0.fromJson(jsonElement0, class0);
      assertEquals("zh_TW", locale1.toString());
      assertNotNull(locale1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson(jsonElement0, class0);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("com.google.gson.internal.Streams$AppendableWriter$CurrentWrite");
      gson0.toJson((Object) null, (Type) class0, (Appendable) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Character character0 = Character.valueOf('5');
      jsonObject0.addProperty("Numeric values must be finite, but was ", character0);
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      GregorianCalendar gregorianCalendar0 = gson0.fromJson((JsonElement) jsonObject0, class0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      GregorianCalendar gregorianCalendar0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(gregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      GregorianCalendar gregorianCalendar0 = gson0.fromJson((JsonElement) jsonObject0, class0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("com.google.gson.internal.Streams$AppendableWriter$CurrentWrite");
      gson0.toJson((Object) gregorianCalendar0, (Type) class0, (Appendable) mockPrintWriter0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gson gson0 = new Gson();
      UUID uUID0 = MockUUID.randomUUID();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) uUID0);
      assertTrue(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("null");
      Object object0 = gson0.fromJson((Reader) stringReader0, (Type) class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StringReader stringReader0 = new StringReader("X3%:]Zkv");
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 5 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gson gson0 = new Gson();
      InetAddress inetAddress0 = MockInetAddress.getByName("_}v'h");
      JsonElement jsonElement0 = gson0.toJsonTree((Object) inetAddress0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<InetAddress> class0 = InetAddress.class;
      Gson gson0 = new Gson();
      AtomicIntegerArray atomicIntegerArray0 = gson0.fromJson("null", (Type) class0);
      assertNull(atomicIntegerArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      try { 
        gson0.fromJson("*Xj6`+oDILM0:", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 14 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gson gson0 = new Gson();
      URI uRI0 = MockURI.URI("");
      JsonElement jsonElement0 = gson0.toJsonTree((Object) uRI0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URI> class0 = URI.class;
      URI uRI0 = gson0.fromJson("null", class0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URI> class0 = URI.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("`uZ#:Md&R`YV mWOt", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in path at index 0: `uZ
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$23", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) uRL0);
      assertFalse(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      try { 
        gson0.fromJson("a3Pd", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: a3Pd
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuffer> class0 = StringBuffer.class;
      StringBuffer stringBuffer0 = gson0.fromJson("null", class0);
      assertNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuffer> class0 = StringBuffer.class;
      try { 
        gson0.fromJson("G%HG#Br^=1Bv[%##3)", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 7 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) stringBuilder0);
      Class<Locale> class0 = Locale.class;
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonElement0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuilder> class0 = StringBuilder.class;
      StringBuilder stringBuilder0 = gson0.fromJson("null", class0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Gson gson0 = new Gson();
      Long long0 = new Long(0L);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) long0);
      Class<StringBuilder> class0 = StringBuilder.class;
      StringBuilder stringBuilder0 = gson0.fromJson(jsonElement0, class0);
      assertNotNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<String> class0 = String.class;
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("kiK?:y</");
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 6 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      StringReader stringReader0 = new StringReader("null");
      String string0 = gson0.fromJson((Reader) stringReader0, class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("false");
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson((Reader) stringReader0, class0);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Character character0 = Character.valueOf('\u0010');
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) character0);
      assertTrue(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("- )B");
      Class<Character> class0 = Character.TYPE;
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      JsonPrimitive jsonPrimitive0 = gson0.fromJson("null", (Type) class0);
      assertNull(jsonPrimitive0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("Expected a boolean but was ");
      Class<Character> class0 = Character.TYPE;
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting character, got: Expected
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      try { 
        gson0.fromJson("A3K^Jvu>", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"A3K^Jvu>\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$12", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(1421);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) atomicIntegerArray0);
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      AtomicIntegerArray atomicIntegerArray1 = gson0.fromJson(jsonElement0, class0);
      assertEquals(1421, atomicIntegerArray1.length());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      Character character0 = new Character('C');
      jsonArray0.add(character0);
      Gson gson0 = new Gson();
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"C\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("null");
      Class<Integer> class0 = Integer.TYPE;
      Float float0 = gson0.fromJson((Reader) stringReader0, (Type) class0);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonNull> class0 = JsonNull.class;
      TypeToken<JsonNull> typeToken0 = TypeToken.get(class0);
      TypeAdapter<JsonNull> typeAdapter0 = gson0.getAdapter(typeToken0);
      ArrayTypeAdapter<JsonNull> arrayTypeAdapter0 = new ArrayTypeAdapter<JsonNull>(gson0, typeAdapter0, class0);
      JsonElement jsonElement0 = arrayTypeAdapter0.toJsonTree((Object) null);
      Class<Short> class1 = Short.class;
      Short short0 = gson0.fromJson(jsonElement0, class1);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader(" path ");
      Class<Short> class0 = Short.class;
      TypeToken<Short> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      try { 
        gson0.fromJson((Reader) stringReader0, type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"path\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$10", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      Byte byte0 = gson0.fromJson("null", (Type) class0);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      try { 
        gson0.fromJson("J3K^Jvu>", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"J3K^Jvu>\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$9", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("- )B");
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      StringReader stringReader0 = new StringReader("null");
      Object object0 = gson0.fromJson((Reader) stringReader0, (Type) class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonObject0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BOOLEAN but was BEGIN_OBJECT
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Gson gson0 = new Gson();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      JsonArray jsonArray0 = (JsonArray)gson0.toJsonTree((Object) bitSet0);
      assertEquals(8, jsonArray0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      Class<BitSet> class1 = BitSet.class;
      TypeAdapter<BitSet> typeAdapter0 = gson0.getAdapter(class1);
      TypeAdapterRuntimeTypeWrapper<BitSet> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<BitSet>(gson0, typeAdapter0, class0);
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      BitSet bitSet0 = typeAdapterRuntimeTypeWrapper0.fromJsonTree(jsonNull0);
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BitSet> class0 = BitSet.class;
      try { 
        gson0.fromJson("a3Pd", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Currency> class0 = Currency.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("~", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Currency", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.TAIWAN;
      Currency currency0 = Currency.getInstance(locale0);
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) currency0);
      assertFalse(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicInteger atomicInteger0 = new AtomicInteger(1607);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) atomicInteger0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicInteger> class0 = AtomicInteger.class;
      try { 
        gson0.fromJson("tRyixHtb%xB!T", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"tRyixHtb%xB!T\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) atomicBoolean0);
      assertTrue(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      try { 
        gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$8", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Gson gson0 = new Gson();
      Byte byte0 = new Byte((byte) (-113));
      JsonElement jsonElement0 = gson0.toJsonTree((Object) byte0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) gson0);
      JsonElement jsonElement1 = gson0.toJsonTree((Object) jsonElement0);
      assertTrue(jsonElement1.equals((Object)jsonElement0));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = new Short((short)116);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) short0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonObject> class0 = JsonObject.class;
      TypeToken<JsonObject> typeToken0 = TypeToken.get(class0);
      TypeAdapter<JsonObject> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      Class<BitSet> class1 = BitSet.class;
      TypeAdapter<BitSet> typeAdapter0 = gson0.getAdapter(class1);
      TypeAdapterRuntimeTypeWrapper<BitSet> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<BitSet>(gson0, typeAdapter0, class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class1, (TypeAdapter<BitSet>) typeAdapterRuntimeTypeWrapper0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      String string0 = gson0.fromJson(jsonElement0, (Type) class0);
      assertNull(string0);
  }
}
