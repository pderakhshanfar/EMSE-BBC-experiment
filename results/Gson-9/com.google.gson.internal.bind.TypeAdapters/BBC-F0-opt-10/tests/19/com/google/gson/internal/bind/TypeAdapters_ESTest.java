/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 03:08:38 GMT 2021
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.bind.ArrayTypeAdapter;
import com.google.gson.internal.bind.TreeTypeAdapter;
import com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.Reader;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.URI;
import java.net.URL;
import java.nio.CharBuffer;
import java.nio.LongBuffer;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      TypeToken<MockCalendar> typeToken0 = TypeToken.get(class0);
      Gson gson0 = new Gson();
      TypeAdapter<MockCalendar> typeAdapter0 = gson0.getAdapter(typeToken0);
      ArrayTypeAdapter<MockCalendar> arrayTypeAdapter0 = new ArrayTypeAdapter<MockCalendar>(gson0, typeAdapter0, class0);
      Class<Object> class1 = Object.class;
      Class<Locale> class2 = Locale.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class1, (Class<?>) class2, (TypeAdapter<? super Object>) arrayTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<Object>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$10", class0);
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      try { 
        gson0.fromJson("A-", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"A-\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$9", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<JsonArray> class0 = JsonArray.class;
      Gson gson0 = new Gson();
      TypeAdapter<JsonArray> typeAdapter0 = gson0.getAdapter(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, typeAdapter0);
      Class<URL> class1 = URL.class;
      JsonSerializer<Object> jsonSerializer0 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<Object> class2 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class2);
      TreeTypeAdapter<Object> treeTypeAdapter0 = new TreeTypeAdapter<Object>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(class1, class1, (TypeAdapter<? super URL>) treeTypeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonObject> class0 = JsonObject.class;
      try { 
        gson0.fromJson("[", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.EOFException: End of input at line 1 column 2
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gson gson0 = new Gson();
      Double double0 = new Double((-1221.53175628273));
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      JsonPrimitive jsonPrimitive1 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertFalse(jsonPrimitive1.isString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      try { 
        gson0.fromJson(string0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a string but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gson gson0 = new Gson();
      MockPrintStream mockPrintStream0 = new MockPrintStream("3<e^qu% H;aNb>S'");
      gson0.toJson((Object) gson0, (Appendable) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) charArrayWriter0);
      String string0 = gson0.toJson(jsonElement0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("y0)!TqYdx");
      String string0 = gson0.toJson((JsonElement) jsonPrimitive0);
      assertEquals("\"y0)!TqYdx\"", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      AtomicInteger atomicInteger0 = new AtomicInteger();
      jsonArray0.add((Number) atomicInteger0);
      // Undeclared exception!
      try { 
        jsonArray0.getAsJsonObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Object: [java.util.concurrent.atomic.AtomicInteger@0000000004]
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      MockFile mockFile0 = new MockFile("G-)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      gson0.toJson((Object) jsonNull0, (Appendable) bufferedWriter0);
      assertFalse(jsonNull0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gson gson0 = new Gson();
      Boolean boolean0 = Boolean.valueOf("nZ-xB;EPi2.s");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      String string0 = gson0.toJson((JsonElement) jsonPrimitive0);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((JsonElement) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonObject> class0 = JsonObject.class;
      try { 
        gson0.fromJson("null", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonNull
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonObject> class0 = JsonObject.class;
      try { 
        gson0.fromJson(" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      Boolean boolean0 = new Boolean("X4%>*3d<==Rh8S]");
      jsonArray0.add(boolean0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.ATOMIC_INTEGER_ARRAY_FACTORY;
      JsonSerializer<URL> jsonSerializer0 = (JsonSerializer<URL>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<URL> jsonDeserializer0 = (JsonDeserializer<URL>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TreeTypeAdapter<URL> treeTypeAdapter0 = new TreeTypeAdapter<URL>(jsonSerializer0, jsonDeserializer0, (Gson) null, (TypeToken<URL>) null, typeAdapterFactory0);
      // Undeclared exception!
      try { 
        treeTypeAdapter0.fromJsonTree(jsonArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.TreeTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Short short0 = new Short((short)1864);
      jsonObject0.addProperty("lgX<Tk4A){,5<}8w", (Number) short0);
      Class<JsonPrimitive> class0 = JsonPrimitive.class;
      try { 
        gson0.fromJson((JsonElement) jsonObject0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a com.google.gson.JsonPrimitive but was com.google.gson.JsonObject
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      Gson gson0 = new Gson();
      Locale locale0 = Locale.US;
      gson0.toJson((Object) locale0, (Appendable) bufferedWriter0);
      assertEquals("USA", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("_", (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Locale> class0 = Locale.class;
      Locale locale0 = gson0.fromJson("BEGIN_OBJECT", class0);
      assertEquals("begin_OBJECT", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      TypeToken<GregorianCalendar> typeToken0 = TypeToken.get(class0);
      Class<? super GregorianCalendar> class1 = typeToken0.getRawType();
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class1);
      assertTrue(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gson gson0 = new Gson();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(231, 231, 13);
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      TypeToken<GregorianCalendar> typeToken0 = TypeToken.get(class0);
      Class<? super GregorianCalendar> class1 = typeToken0.getRawType();
      gson0.toJsonTree((Object) mockGregorianCalendar0, (Type) class1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-54269136000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=250,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=103,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Calendar> class0 = Calendar.class;
      Calendar calendar0 = gson0.fromJson((JsonElement) jsonNull0, class0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      String string0 = gson0.toString();
      // Undeclared exception!
      try { 
        gson0.fromJson(string0, (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gson gson0 = new Gson();
      CharBuffer charBuffer0 = CharBuffer.allocate('F');
      UUID uUID0 = MockUUID.fromString("W V}1\"+");
      gson0.toJson((Object) uUID0, (Appendable) charBuffer0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(32, charBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      UUID uUID0 = gson0.fromJson("null", class0);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      UUID uUID0 = gson0.fromJson("A-", class0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonSerializer<JsonArray> jsonSerializer0 = (JsonSerializer<JsonArray>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<JsonArray> jsonDeserializer0 = (JsonDeserializer<JsonArray>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<JsonArray> class0 = JsonArray.class;
      TypeToken<JsonArray> typeToken0 = TypeToken.get(class0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.ENUM_FACTORY;
      TreeTypeAdapter<JsonArray> treeTypeAdapter0 = new TreeTypeAdapter<JsonArray>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      ArrayTypeAdapter<JsonArray> arrayTypeAdapter0 = new ArrayTypeAdapter<JsonArray>(gson0, treeTypeAdapter0, class0);
      JsonElement jsonElement0 = arrayTypeAdapter0.toJsonTree((Object) null);
      Class<InetAddress> class1 = InetAddress.class;
      InetAddress inetAddress0 = gson0.fromJson(jsonElement0, class1);
      assertNull(inetAddress0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("VLTqGcgf");
      Class<InetAddress> class0 = InetAddress.class;
      Inet4Address inet4Address0 = (Inet4Address)gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertEquals("200.42.42.0", inet4Address0.getHostAddress());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      URI uRI0 = MockURI.aFTPURI;
      gson0.toJson((Object) uRI0, (Appendable) bufferedWriter0);
      assertEquals("", uRI0.getRawPath());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<URI> class0 = URI.class;
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      MockCalendar mockCalendar0 = gson0.fromJson(jsonElement0, (Type) class0);
      assertNull(mockCalendar0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<URI> class0 = URI.class;
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.fromJson(">#/Wb&|}+tU]", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in path at index 0: >
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$23", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      TypeToken<GregorianCalendar> typeToken0 = TypeToken.get(class0);
      Class<? super GregorianCalendar> class1 = typeToken0.getRawType();
      TypeAdapter<URL> typeAdapter0 = TypeAdapters.URL;
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, typeAdapter0, class1);
      String string0 = typeAdapterRuntimeTypeWrapper0.toJson((URL) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      URL uRL0 = MockURL.getFtpExample();
      gson0.toJson((Object) uRL0, (Appendable) charArrayWriter0);
      assertEquals("\"ftp://ftp.someFakeButWellFormedURL.org/fooExample\"", charArrayWriter0.toString());
      assertEquals(51, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      Character character0 = gson0.fromJson("null", (Type) class0);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<URL> class0 = URL.class;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("This is not a JSON Primitive.", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: This
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Gson gson0 = new Gson();
      MockFile mockFile0 = new MockFile("{}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      StringBuffer stringBuffer0 = new StringBuffer("{}");
      gson0.toJson((Object) stringBuffer0, (Appendable) mockPrintWriter0);
      assertEquals(2, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<StringBuffer> class0 = StringBuffer.class;
      Gson gson0 = new Gson();
      Class<JsonArray> class1 = JsonArray.class;
      ArrayTypeAdapter<JsonArray> arrayTypeAdapter0 = new ArrayTypeAdapter<JsonArray>(gson0, (TypeAdapter<JsonArray>) null, class1);
      JsonElement jsonElement0 = arrayTypeAdapter0.toJsonTree((Object) null);
      Locale locale0 = gson0.fromJson(jsonElement0, (Type) class0);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder();
      gson0.toJson((Object) stringBuilder0, (Appendable) stringBuilder0);
      assertEquals("\"\"", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      Class<String> class1 = String.class;
      String string0 = gson0.fromJson(jsonElement0, class1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("87N?J^T'\"3<");
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson((Reader) stringReader0, class0);
      assertEquals("87N?J^T'\"3<", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) "/bJdpI 5mug");
      Class<Character> class0 = Character.TYPE;
      try { 
        gson0.fromJson(jsonElement0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting character, got: /bJdpI 5mug
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      Character character0 = gson0.fromJson("null", (Type) class0);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      try { 
        gson0.fromJson("_]TSO?U0o5GynX>", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      JsonNull jsonNull1 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(jsonNull1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = Character.valueOf(',');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Class<Long> class0 = Long.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \",\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$12", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Gson gson0 = new Gson();
      MockPrintStream mockPrintStream0 = new MockPrintStream("3<e^qu% H;aNb>S'");
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(3044);
      gson0.toJson((Object) atomicIntegerArray0, (Appendable) mockPrintStream0);
      assertEquals(3044, atomicIntegerArray0.length());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      try { 
        gson0.fromJson("[s", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"s\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      Character character0 = gson0.fromJson("null", (Type) class0);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("");
      Class<Integer> class0 = Integer.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      JsonNull jsonNull1 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(jsonNull1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      try { 
        gson0.fromJson("H9O", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"H9O\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$10", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      Class<Byte> class0 = Byte.TYPE;
      Object object0 = gson0.fromJson(jsonElement0, (Type) class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      try { 
        gson0.fromJson("4;Y^G", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("");
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean0 = gson0.fromJson(jsonElement0, class0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Gson gson0 = new Gson();
      Object object0 = new Object();
      JsonElement jsonElement0 = gson0.toJsonTree(object0);
      Class<Boolean> class0 = Boolean.class;
      try { 
        gson0.fromJson(jsonElement0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BOOLEAN but was BEGIN_OBJECT
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      long[] longArray0 = new long[8];
      longArray0[0] = 994L;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      BitSet bitSet0 = BitSet.valueOf(longBuffer0);
      gson0.toJson((Object) bitSet0, (Appendable) bufferedWriter0);
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BitSet> class0 = BitSet.class;
      try { 
        gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$10", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JsonDeserializer<URL> jsonDeserializer0 = (JsonDeserializer<URL>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) jsonDeserializer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: com.google.gson.JsonDeserializer. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Currency> class0 = Currency.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("Error: Expecting: bitset number value (1, 0), Found: ", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Currency", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Locale locale0 = Locale.PRC;
      Currency currency0 = Currency.getInstance(locale0);
      gson0.toJson((Object) currency0, (Appendable) charArrayWriter0);
      assertEquals("CNY", currency0.getCurrencyCode());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      AtomicInteger atomicInteger0 = new AtomicInteger(4398);
      gson0.toJson((Object) atomicInteger0, (Appendable) charArrayWriter0);
      assertEquals(4398L, atomicInteger0.longValue());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("");
      Class<AtomicInteger> class0 = AtomicInteger.class;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      gson0.toJson((Object) atomicBoolean0, (Appendable) bufferedWriter0);
      assertFalse(atomicBoolean0.get());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      try { 
        gson0.fromJson("UPPER_CAMEL_CASE_WITH_SPACES", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      gson0.toJson((Object) inetAddress0, (Appendable) charArrayWriter0);
      assertEquals(11, charArrayWriter0.size());
      assertEquals("\"127.0.0.1\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Gson gson0 = new Gson();
      MockFile mockFile0 = new MockFile("r");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      Short short0 = new Short((short)31);
      gson0.toJson((Object) short0, (Appendable) bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.CURRENCY_FACTORY;
      Class<Double> class0 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Double> typeAdapter0 = gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newTypeHierarchyFactory(class0, typeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 3687, 0, 8, 8, 0, 1, 0, 8, 3687);
      Locale locale0 = new Locale("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      gson0.toJson((Object) mockGregorianCalendar0, (Appendable) charArrayWriter0);
      assertEquals(1964, charArrayWriter0.size());
  }
}
