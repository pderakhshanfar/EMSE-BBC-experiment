/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 09:53:37 GMT 2020
 */

package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonWriter_ESTest extends JsonWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("[", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      
      JsonWriter jsonWriter2 = jsonWriter1.name("java.lang.Float@0000000003");
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter2, jsonWriter0);
      assertSame(jsonWriter2, jsonWriter1);
      assertNotNull(jsonWriter2);
      assertEquals("[", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertTrue(jsonWriter2.getSerializeNulls());
      assertFalse(jsonWriter2.isHtmlSafe());
      assertFalse(jsonWriter2.isLenient());
      
      // Undeclared exception!
      try { 
        jsonWriter2.value(0L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      JsonWriter jsonWriter1 = jsonWriter0.value("Y\"Xh{mkq\"SAT8");
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("\"Y\\\"Xh{mkq\\\"SAT8\"", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("[", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      
      // Undeclared exception!
      try { 
        jsonWriter0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      jsonWriter0.setLenient(true);
      assertEquals("", stringWriter0.toString());
      assertTrue(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      JsonWriter jsonWriter1 = jsonWriter0.value(true);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("true", stringWriter0.toString());
      assertTrue(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      jsonWriter0.setHtmlSafe(true);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertTrue(jsonWriter0.isHtmlSafe());
      
      JsonWriter jsonWriter1 = jsonWriter0.value(false);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("false", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertTrue(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(60);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      
      jsonWriter0.setSerializeNulls(false);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      
      JsonWriter jsonWriter1 = jsonWriter0.value(true);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("true", stringWriter0.toString());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      assertFalse(jsonWriter1.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      jsonWriter0.setSerializeNulls(false);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      JsonWriter jsonWriter1 = jsonWriter0.value("=");
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("\"=\"", stringWriter0.toString());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      jsonWriter0.setHtmlSafe(true);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      Short short0 = new Short((short)203);
      assertEquals((short)203, (short)short0);
      assertNotNull(short0);
      
      JsonWriter jsonWriter1 = jsonWriter0.value((Number) short0);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.isHtmlSafe());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("[", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      
      jsonWriter1.setSerializeNulls(false);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertEquals("[", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      
      JsonWriter jsonWriter2 = jsonWriter0.beginObject();
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter2, jsonWriter0);
      assertSame(jsonWriter2, jsonWriter1);
      assertNotNull(jsonWriter2);
      assertEquals("[{", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter2.isHtmlSafe());
      assertFalse(jsonWriter2.isLenient());
      assertFalse(jsonWriter2.getSerializeNulls());
      
      JsonWriter jsonWriter3 = jsonWriter0.endObject();
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter3);
      assertSame(jsonWriter3, jsonWriter2);
      assertSame(jsonWriter3, jsonWriter0);
      assertSame(jsonWriter3, jsonWriter1);
      assertNotNull(jsonWriter3);
      assertEquals("[{}", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter3.isHtmlSafe());
      assertFalse(jsonWriter3.getSerializeNulls());
      assertFalse(jsonWriter3.isLenient());
      
      JsonWriter jsonWriter4 = jsonWriter1.value((Number) null);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter4);
      assertSame(jsonWriter0, jsonWriter3);
      assertSame(jsonWriter1, jsonWriter3);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter4);
      assertSame(jsonWriter4, jsonWriter0);
      assertSame(jsonWriter4, jsonWriter1);
      assertSame(jsonWriter4, jsonWriter2);
      assertSame(jsonWriter4, jsonWriter3);
      assertNotNull(jsonWriter4);
      assertEquals("[{},null", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      assertFalse(jsonWriter4.isLenient());
      assertFalse(jsonWriter4.getSerializeNulls());
      assertFalse(jsonWriter4.isHtmlSafe());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      
      jsonWriter0.setLenient(true);
      assertEquals("", stringWriter0.toString());
      assertTrue(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      JsonWriter jsonWriter1 = jsonWriter0.value(1L);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("1", stringWriter0.toString());
      assertTrue(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertTrue(jsonWriter1.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("{", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
      
      JsonWriter jsonWriter2 = jsonWriter1.name("V");
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter2, jsonWriter1);
      assertSame(jsonWriter2, jsonWriter0);
      assertNotNull(jsonWriter2);
      assertEquals("{", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
      assertFalse(jsonWriter2.isHtmlSafe());
      assertFalse(jsonWriter2.isLenient());
      assertTrue(jsonWriter2.getSerializeNulls());
      
      jsonWriter0.setHtmlSafe(true);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter0, jsonWriter1);
      assertEquals("{", stringWriter0.toString());
      assertTrue(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      
      JsonWriter jsonWriter3 = jsonWriter2.value((-1L));
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter0, jsonWriter3);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter3);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter2, jsonWriter1);
      assertSame(jsonWriter2, jsonWriter3);
      assertSame(jsonWriter2, jsonWriter0);
      assertSame(jsonWriter3, jsonWriter1);
      assertSame(jsonWriter3, jsonWriter2);
      assertSame(jsonWriter3, jsonWriter0);
      assertNotNull(jsonWriter3);
      assertEquals("{\"V\":-1", stringWriter0.toString());
      assertTrue(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertTrue(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      assertFalse(jsonWriter2.isLenient());
      assertTrue(jsonWriter2.isHtmlSafe());
      assertTrue(jsonWriter2.getSerializeNulls());
      assertFalse(jsonWriter3.isLenient());
      assertTrue(jsonWriter3.getSerializeNulls());
      assertTrue(jsonWriter3.isHtmlSafe());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      jsonWriter0.setSerializeNulls(false);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      JsonWriter jsonWriter1 = jsonWriter0.value(0L);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("0", stringWriter0.toString());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2675);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      jsonWriter0.setLenient(true);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertTrue(jsonWriter0.isLenient());
      
      JsonWriter jsonWriter1 = jsonWriter0.value((double) 2675);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("2675.0", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertTrue(jsonWriter0.isLenient());
      assertTrue(jsonWriter1.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      jsonWriter0.setHtmlSafe(true);
      assertEquals("", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.isHtmlSafe());
      
      JsonWriter jsonWriter1 = jsonWriter0.value((-0.7091956134133357));
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("-0.7091956134133357", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      
      jsonWriter0.setSerializeNulls(false);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      
      JsonWriter jsonWriter1 = jsonWriter0.value(5332.7);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("5332.7", stringWriter0.toString());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter1.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      jsonWriter0.setLenient(true);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("null", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertTrue(jsonWriter1.isLenient());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      jsonWriter0.setHtmlSafe(true);
      assertEquals("", stringWriter0.toString());
      assertTrue(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("null", stringWriter0.toString());
      assertTrue(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertTrue(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      jsonWriter0.setHtmlSafe(true);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      JsonWriter jsonWriter1 = jsonWriter0.name("Infinity");
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertTrue(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      jsonWriter0.setSerializeNulls(false);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      JsonWriter jsonWriter1 = jsonWriter0.name("java.lang.Float@0000000003");
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(14);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      jsonWriter0.setLenient(true);
      assertEquals("", stringWriter0.toString());
      assertTrue(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue("{*|S");
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("{*|S", stringWriter0.toString());
      assertTrue(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      
      jsonWriter0.setHtmlSafe(true);
      assertEquals("", stringWriter0.toString());
      assertTrue(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue("jV");
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("jV", stringWriter0.toString());
      assertTrue(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      
      jsonWriter0.setSerializeNulls(false);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.getSerializeNulls());
      
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue("Infinity");
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("Infinity", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      jsonWriter0.setLenient(true);
      assertEquals("", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertTrue(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      boolean boolean0 = jsonWriter0.isLenient();
      assertTrue(boolean0);
      assertEquals("", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertTrue(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      jsonWriter0.setHtmlSafe(true);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertTrue(jsonWriter0.isHtmlSafe());
      
      boolean boolean0 = jsonWriter0.isHtmlSafe();
      assertTrue(boolean0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertTrue(jsonWriter0.isHtmlSafe());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      jsonWriter0.setSerializeNulls(false);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      boolean boolean0 = jsonWriter0.getSerializeNulls();
      assertFalse(boolean0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("{", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      
      jsonWriter1.setLenient(true);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertEquals("{", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertTrue(jsonWriter0.isLenient());
      assertTrue(jsonWriter1.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      
      JsonWriter jsonWriter2 = jsonWriter0.name("Infinity");
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter2, jsonWriter1);
      assertSame(jsonWriter2, jsonWriter0);
      assertNotNull(jsonWriter2);
      assertEquals("{", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertTrue(jsonWriter0.isLenient());
      assertTrue(jsonWriter2.isLenient());
      assertTrue(jsonWriter2.getSerializeNulls());
      assertFalse(jsonWriter2.isHtmlSafe());
      
      JsonWriter jsonWriter3 = jsonWriter1.value("Infinity");
      assertSame(jsonWriter0, jsonWriter3);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter1, jsonWriter3);
      assertSame(jsonWriter3, jsonWriter1);
      assertSame(jsonWriter3, jsonWriter2);
      assertSame(jsonWriter3, jsonWriter0);
      assertNotNull(jsonWriter3);
      assertEquals("{\"Infinity\":\"Infinity\"", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertTrue(jsonWriter0.isLenient());
      assertTrue(jsonWriter1.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter3.isHtmlSafe());
      assertTrue(jsonWriter3.isLenient());
      assertTrue(jsonWriter3.getSerializeNulls());
      
      JsonWriter jsonWriter4 = jsonWriter3.endObject();
      assertSame(jsonWriter0, jsonWriter3);
      assertSame(jsonWriter0, jsonWriter4);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter4);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter1, jsonWriter3);
      assertSame(jsonWriter3, jsonWriter1);
      assertSame(jsonWriter3, jsonWriter2);
      assertSame(jsonWriter3, jsonWriter0);
      assertSame(jsonWriter3, jsonWriter4);
      assertSame(jsonWriter4, jsonWriter2);
      assertSame(jsonWriter4, jsonWriter3);
      assertSame(jsonWriter4, jsonWriter1);
      assertSame(jsonWriter4, jsonWriter0);
      assertNotNull(jsonWriter4);
      assertEquals("{\"Infinity\":\"Infinity\"}", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertTrue(jsonWriter0.isLenient());
      assertTrue(jsonWriter1.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter3.isHtmlSafe());
      assertTrue(jsonWriter3.isLenient());
      assertTrue(jsonWriter3.getSerializeNulls());
      assertTrue(jsonWriter4.isLenient());
      assertFalse(jsonWriter4.isHtmlSafe());
      assertTrue(jsonWriter4.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("[", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      
      jsonWriter1.setLenient(true);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertEquals("[", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertTrue(jsonWriter0.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.isLenient());
      
      JsonWriter jsonWriter2 = jsonWriter1.endArray();
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter2, jsonWriter0);
      assertSame(jsonWriter2, jsonWriter1);
      assertNotNull(jsonWriter2);
      assertEquals("[]", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertTrue(jsonWriter0.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.isLenient());
      assertFalse(jsonWriter2.isHtmlSafe());
      assertTrue(jsonWriter2.getSerializeNulls());
      assertTrue(jsonWriter2.isLenient());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("[", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
      
      jsonWriter0.setHtmlSafe(true);
      assertSame(jsonWriter0, jsonWriter1);
      assertEquals("[", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.isHtmlSafe());
      
      JsonWriter jsonWriter2 = jsonWriter1.endArray();
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter2, jsonWriter1);
      assertSame(jsonWriter2, jsonWriter0);
      assertNotNull(jsonWriter2);
      assertEquals("[]", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertTrue(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter2.isHtmlSafe());
      assertFalse(jsonWriter2.isLenient());
      assertTrue(jsonWriter2.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("[", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      
      jsonWriter0.setSerializeNulls(false);
      assertSame(jsonWriter0, jsonWriter1);
      assertEquals("[", stringWriter0.toString());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      
      JsonWriter jsonWriter2 = jsonWriter1.endArray();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter2, jsonWriter0);
      assertSame(jsonWriter2, jsonWriter1);
      assertNotNull(jsonWriter2);
      assertEquals("[]", stringWriter0.toString());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      assertFalse(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter2.isHtmlSafe());
      assertFalse(jsonWriter2.isLenient());
      assertFalse(jsonWriter2.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      jsonWriter0.setLenient(true);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("{", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.isLenient());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      jsonWriter0.setHtmlSafe(true);
      assertEquals("", stringWriter0.toString());
      assertTrue(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("{", stringWriter0.toString());
      assertTrue(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertTrue(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("{", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      
      JsonWriter jsonWriter2 = jsonWriter1.name("V");
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter2, jsonWriter1);
      assertSame(jsonWriter2, jsonWriter0);
      assertNotNull(jsonWriter2);
      assertEquals("{", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter2.isHtmlSafe());
      assertTrue(jsonWriter2.getSerializeNulls());
      assertFalse(jsonWriter2.isLenient());
      
      jsonWriter2.setHtmlSafe(true);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter2, jsonWriter1);
      assertSame(jsonWriter2, jsonWriter0);
      assertEquals("{", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertTrue(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter2.getSerializeNulls());
      assertFalse(jsonWriter2.isLenient());
      assertTrue(jsonWriter2.isHtmlSafe());
      
      JsonWriter jsonWriter3 = jsonWriter2.beginArray();
      assertSame(jsonWriter0, jsonWriter3);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter3);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter2, jsonWriter3);
      assertSame(jsonWriter2, jsonWriter1);
      assertSame(jsonWriter2, jsonWriter0);
      assertSame(jsonWriter3, jsonWriter0);
      assertSame(jsonWriter3, jsonWriter2);
      assertSame(jsonWriter3, jsonWriter1);
      assertNotNull(jsonWriter3);
      assertEquals("{\"V\":[", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertTrue(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter2.getSerializeNulls());
      assertFalse(jsonWriter2.isLenient());
      assertTrue(jsonWriter2.isHtmlSafe());
      assertTrue(jsonWriter3.getSerializeNulls());
      assertFalse(jsonWriter3.isLenient());
      assertTrue(jsonWriter3.isHtmlSafe());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      jsonWriter0.setSerializeNulls(false);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("[", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("null", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
      
      // Undeclared exception!
      try { 
        jsonWriter1.value(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      JsonWriter jsonWriter1 = jsonWriter0.value("QJ~'D#Te.$;S()BQ!E");
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("\"QJ~'D#Te.$;S()BQ!E\"", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      
      // Undeclared exception!
      try { 
        jsonWriter1.value("QJ~'D#Te.$;S()BQ!E");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("null", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
      
      Byte byte0 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        jsonWriter0.value((Number) byte0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("{", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      
      // Undeclared exception!
      try { 
        jsonWriter0.value(0L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("null", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      
      // Undeclared exception!
      try { 
        jsonWriter1.value(364.3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      // Undeclared exception!
      try { 
        jsonWriter0.setIndent((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      JsonWriter jsonWriter1 = jsonWriter0.name(";[J|)W");
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      
      // Undeclared exception!
      try { 
        jsonWriter1.jsonValue(";[J|)W");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("null", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter1.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      
      // Undeclared exception!
      try { 
        jsonWriter0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("[", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      
      JsonWriter jsonWriter2 = jsonWriter1.value("2&B(:#O:aWA_4Yk,N");
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter2, jsonWriter0);
      assertSame(jsonWriter2, jsonWriter1);
      assertNotNull(jsonWriter2);
      assertEquals("[\"2&B(:#O:aWA_4Yk,N\"", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertTrue(jsonWriter2.getSerializeNulls());
      assertFalse(jsonWriter2.isHtmlSafe());
      assertFalse(jsonWriter2.isLenient());
      
      JsonWriter jsonWriter3 = jsonWriter2.beginObject();
      assertSame(jsonWriter0, jsonWriter3);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter3);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter2, jsonWriter3);
      assertSame(jsonWriter2, jsonWriter0);
      assertSame(jsonWriter2, jsonWriter1);
      assertSame(jsonWriter3, jsonWriter2);
      assertSame(jsonWriter3, jsonWriter0);
      assertSame(jsonWriter3, jsonWriter1);
      assertNotNull(jsonWriter3);
      assertEquals("[\"2&B(:#O:aWA_4Yk,N\",{", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertTrue(jsonWriter2.getSerializeNulls());
      assertFalse(jsonWriter2.isHtmlSafe());
      assertFalse(jsonWriter2.isLenient());
      assertFalse(jsonWriter3.isLenient());
      assertFalse(jsonWriter3.isHtmlSafe());
      assertTrue(jsonWriter3.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("{", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      
      JsonWriter jsonWriter2 = jsonWriter0.name("");
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter2, jsonWriter0);
      assertSame(jsonWriter2, jsonWriter1);
      assertNotNull(jsonWriter2);
      assertEquals("{", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertTrue(jsonWriter2.getSerializeNulls());
      assertFalse(jsonWriter2.isLenient());
      assertFalse(jsonWriter2.isHtmlSafe());
      
      JsonWriter jsonWriter3 = jsonWriter1.beginObject();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter3);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter3);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter3, jsonWriter0);
      assertSame(jsonWriter3, jsonWriter1);
      assertSame(jsonWriter3, jsonWriter2);
      assertNotNull(jsonWriter3);
      assertEquals("{\"\":{", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertTrue(jsonWriter3.getSerializeNulls());
      assertFalse(jsonWriter3.isHtmlSafe());
      assertFalse(jsonWriter3.isLenient());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("{", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      
      JsonWriter jsonWriter2 = jsonWriter1.name("kv`|8s8OKz.]<9f!");
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter2, jsonWriter0);
      assertSame(jsonWriter2, jsonWriter1);
      assertNotNull(jsonWriter2);
      assertEquals("{", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter2.isHtmlSafe());
      assertTrue(jsonWriter2.getSerializeNulls());
      assertFalse(jsonWriter2.isLenient());
      
      JsonWriter jsonWriter3 = jsonWriter1.value(false);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter0, jsonWriter3);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter3);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter3, jsonWriter0);
      assertSame(jsonWriter3, jsonWriter2);
      assertSame(jsonWriter3, jsonWriter1);
      assertNotNull(jsonWriter3);
      assertEquals("{\"kv`|8s8OKz.]<9f!\":false", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter3.isHtmlSafe());
      assertFalse(jsonWriter3.isLenient());
      assertTrue(jsonWriter3.getSerializeNulls());
      
      JsonWriter jsonWriter4 = jsonWriter0.name("java.lang.Byte@0000000003");
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter0, jsonWriter3);
      assertSame(jsonWriter0, jsonWriter4);
      assertSame(jsonWriter4, jsonWriter1);
      assertSame(jsonWriter4, jsonWriter2);
      assertSame(jsonWriter4, jsonWriter3);
      assertSame(jsonWriter4, jsonWriter0);
      assertNotNull(jsonWriter4);
      assertEquals("{\"kv`|8s8OKz.]<9f!\":false", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter4.getSerializeNulls());
      assertFalse(jsonWriter4.isLenient());
      assertFalse(jsonWriter4.isHtmlSafe());
      
      JsonWriter jsonWriter5 = jsonWriter3.beginArray();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter5);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter0, jsonWriter3);
      assertSame(jsonWriter0, jsonWriter4);
      assertSame(jsonWriter1, jsonWriter4);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter3);
      assertSame(jsonWriter1, jsonWriter5);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter3, jsonWriter0);
      assertSame(jsonWriter3, jsonWriter4);
      assertSame(jsonWriter3, jsonWriter2);
      assertSame(jsonWriter3, jsonWriter5);
      assertSame(jsonWriter3, jsonWriter1);
      assertSame(jsonWriter5, jsonWriter3);
      assertSame(jsonWriter5, jsonWriter2);
      assertSame(jsonWriter5, jsonWriter0);
      assertSame(jsonWriter5, jsonWriter1);
      assertSame(jsonWriter5, jsonWriter4);
      assertNotNull(jsonWriter5);
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter3.isHtmlSafe());
      assertFalse(jsonWriter3.isLenient());
      assertTrue(jsonWriter3.getSerializeNulls());
      assertTrue(jsonWriter5.getSerializeNulls());
      assertFalse(jsonWriter5.isLenient());
      assertFalse(jsonWriter5.isHtmlSafe());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      JsonWriter jsonWriter1 = jsonWriter0.value(0.0);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("0.0", stringWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      
      jsonWriter0.setLenient(true);
      assertSame(jsonWriter0, jsonWriter1);
      assertEquals("0.0", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      JsonWriter jsonWriter2 = jsonWriter0.beginArray();
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter2, jsonWriter1);
      assertSame(jsonWriter2, jsonWriter0);
      assertNotNull(jsonWriter2);
      assertEquals("0.0[", stringWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter2.isHtmlSafe());
      assertTrue(jsonWriter2.isLenient());
      assertTrue(jsonWriter2.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals("null", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      
      // Undeclared exception!
      try { 
        jsonWriter1.nullValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      JsonWriter jsonWriter2 = jsonWriter1.name("kv`|8s8OKz.]<9f!");
      jsonWriter2.value("kv`|8s8OKz.]<9f!");
      // Undeclared exception!
      try { 
        jsonWriter2.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      // Undeclared exception!
      try { 
        jsonWriter1.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.setIndent("[");
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      jsonWriter1.jsonValue("[");
      assertEquals("[\n[[", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.value("\n");
      assertEquals("\"\\n\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.setHtmlSafe(true);
      jsonWriter0.value("*}=dQIa!OchJB");
      assertTrue(jsonWriter0.isHtmlSafe());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      try { 
        jsonWriter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete document
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      jsonWriter0.close();
      jsonWriter1.close();
      assertEquals("null", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      jsonWriter1.close();
      // Undeclared exception!
      try { 
        jsonWriter1.flush();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonWriter is closed.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.flush();
      assertTrue(jsonWriter0.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.name("7");
      assertTrue(jsonWriter1.getSerializeNulls());
      
      jsonWriter1.setSerializeNulls(false);
      assertFalse(jsonWriter0.getSerializeNulls());
      
      jsonWriter0.nullValue();
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.name("");
      // Undeclared exception!
      try { 
        jsonWriter0.nullValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.jsonValue((String) null);
      assertEquals("null", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.value((String) null);
      assertEquals("null", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      jsonWriter1.close();
      // Undeclared exception!
      try { 
        jsonWriter1.name("5CO-C0C7lv<]");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonWriter is closed.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.name("'");
      // Undeclared exception!
      try { 
        jsonWriter0.name("'");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      // Undeclared exception!
      try { 
        jsonWriter0.name((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      jsonWriter1.close();
      // Undeclared exception!
      try { 
        jsonWriter0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonWriter is closed.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter0.beginArray();
      JsonWriter jsonWriter3 = jsonWriter0.beginArray();
      JsonWriter jsonWriter4 = jsonWriter2.beginArray();
      JsonWriter jsonWriter5 = jsonWriter1.beginArray();
      JsonWriter jsonWriter6 = jsonWriter0.beginArray();
      JsonWriter jsonWriter7 = jsonWriter1.beginArray();
      JsonWriter jsonWriter8 = jsonWriter7.beginArray();
      jsonWriter0.beginArray();
      jsonWriter5.beginArray();
      JsonWriter jsonWriter9 = jsonWriter6.beginArray();
      JsonWriter jsonWriter10 = jsonWriter0.beginArray();
      JsonWriter jsonWriter11 = jsonWriter3.beginArray();
      jsonWriter11.beginObject();
      JsonWriter jsonWriter12 = jsonWriter11.name("<Q");
      jsonWriter12.beginArray();
      jsonWriter4.beginArray();
      jsonWriter3.beginArray();
      jsonWriter10.beginArray();
      jsonWriter11.beginArray();
      JsonWriter jsonWriter13 = jsonWriter4.beginArray();
      jsonWriter13.beginArray();
      JsonWriter jsonWriter14 = jsonWriter4.beginArray();
      jsonWriter6.beginArray();
      jsonWriter1.beginArray();
      jsonWriter5.beginArray();
      jsonWriter8.beginArray();
      jsonWriter9.beginArray();
      jsonWriter14.beginArray();
      jsonWriter3.beginArray();
      JsonWriter jsonWriter15 = jsonWriter12.beginArray();
      jsonWriter15.beginArray();
      jsonWriter6.beginArray();
      assertEquals("[[[[[[[[[[[[[{\"<Q\":[[[[[[[[[[[[[[[[[[", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.beginArray();
      jsonWriter0.name("java.lang.Double@0000000002");
      // Undeclared exception!
      try { 
        jsonWriter0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Dangling name: java.lang.Double@0000000002
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.setIndent("");
      assertTrue(jsonWriter0.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JsonWriter jsonWriter0 = null;
      try {
        jsonWriter0 = new JsonWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      try { 
        jsonWriter1.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete document
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      // Undeclared exception!
      try { 
        jsonWriter0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      boolean boolean0 = jsonWriter0.getSerializeNulls();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.isLenient();
      assertTrue(jsonWriter0.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.isHtmlSafe();
      assertTrue(jsonWriter0.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.setLenient(true);
      Byte byte0 = new Byte((byte)45);
      jsonWriter0.value((Number) byte0);
      assertTrue(jsonWriter0.isLenient());
  }
}
