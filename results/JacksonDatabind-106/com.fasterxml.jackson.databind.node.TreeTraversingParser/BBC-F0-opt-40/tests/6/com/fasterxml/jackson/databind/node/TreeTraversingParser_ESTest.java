/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 23:14:37 GMT 2021
 */

package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonStreamContext;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NodeCursor;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.util.RawValue;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TreeTraversingParser_ESTest extends TreeTraversingParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextBooleanValue();
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextFieldName();
      assertTrue(treeTraversingParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      int int0 = treeTraversingParser0.readBinaryValue((OutputStream) byteArrayBuilder0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(2.14748365E9F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      treeTraversingParser0.enable(jsonParser_Feature0);
      JsonParser jsonParser0 = treeTraversingParser0.skipChildren();
      assertFalse(jsonParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.overrideStdFeatures((-1635), (-1635));
      JsonParser jsonParser0 = treeTraversingParser0.skipChildren();
      assertEquals(0, jsonParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextToken();
      assertEquals(4, treeTraversingParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode((short) (-1250));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonToken jsonToken0 = treeTraversingParser0.nextToken();
      assertTrue(jsonToken0.isScalarValue());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      BooleanNode booleanNode0 = jsonNodeFactory0.booleanNode(true);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      JsonToken jsonToken0 = treeTraversingParser0.nextToken();
      assertEquals(9, jsonToken0.id());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.close();
      boolean boolean0 = treeTraversingParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextFieldName();
      int int0 = treeTraversingParser0.getTextLength();
      assertEquals(4, treeTraversingParser0.currentTokenId());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextTextValue();
      char[] charArray0 = treeTraversingParser0.getTextCharacters();
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      JsonParser jsonParser0 = binaryNode0.traverse();
      jsonParser0.nextTextValue();
      String string0 = jsonParser0.getText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.getParsingContext();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertEquals(0, jsonStreamContext0.getCurrentIndex());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, (short)1);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertTrue(jsonStreamContext0.inArray());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertEquals((short)10, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigDecimal bigDecimal0 = new BigDecimal((-1654), mathContext0);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertEquals((byte) (-118), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Long long0 = new Long(0L);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(long0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      long long1 = treeTraversingParser0.getLongValue();
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Byte byte0 = new Byte((byte)3);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(byte0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-1345.5645F));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals((-1345L), long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FloatNode floatNode0 = new FloatNode(0.0F);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0, objectMapper0);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(2.14748365E9F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode((short) (-1250));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals((-1250), int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Double double0 = new Double((-1900.990984));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals((-1900.991F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(2.14748365E9F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals(2.147483648E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode((short) (-1250));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals((-1250.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Double double0 = new Double(4.9E-324);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Byte byte0 = new Byte((byte)109);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(byte0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((short)109, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-1345.5645F));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((byte) (-65), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      NodeCursor.ObjectCursor nodeCursor_ObjectCursor0 = (NodeCursor.ObjectCursor)treeTraversingParser0._nodeCursor;
      NodeCursor.RootCursor nodeCursor_RootCursor0 = new NodeCursor.RootCursor(objectNode0, nodeCursor_ObjectCursor0);
      treeTraversingParser0._nodeCursor = (NodeCursor) nodeCursor_RootCursor0;
      nodeCursor_RootCursor0._currentName = "] -- unresolved forward-reference?";
      String string0 = treeTraversingParser0.getCurrentName();
      assertEquals("] -- unresolved forward-reference?", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ArrayNode arrayNode0 = objectNode0.putArray("|.");
      ValueNode valueNode0 = arrayNode0.pojoNode(objectNode0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      ObjectCodec objectCodec0 = treeTraversingParser0.getCodec();
      assertNull(objectCodec0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      Integer integer0 = new Integer(15711167);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(integer0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeatureArray0[1];
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      deserializationFeatureArray0[8] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, objectReader0);
      ObjectCodec objectCodec0 = treeTraversingParser0.getCodec();
      assertSame(objectCodec0, objectReader0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Integer integer0 = new Integer(89);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(integer0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((byte)89, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-1345.5645F));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((short) (-1345), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Short short0 = new Short((short)1024);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, objectMapper0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertFalse(jsonNode0.isArray());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ArrayNode arrayNode0 = objectNode0.withArray("r`jF");
      NumericNode numericNode0 = arrayNode0.numberNode((-2695L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertTrue(jsonNode0.canConvertToLong());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertTrue(jsonNode0.isIntegralNumber());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(2.14748365E9F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertSame(jsonNode0, numericNode0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode(2712.8369115977);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, objectMapper0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertSame(numericNode0, jsonNode0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      BigDecimal bigDecimal0 = new BigDecimal(4243.932978578458);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertFalse(jsonNode0.isShort());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertTrue(jsonNode0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode((short) (-1250));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertEquals((-1250.0F), jsonNode0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MissingNode missingNode0 = new MissingNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isArray());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Long long0 = new Long((-73L));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(long0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isShort());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Byte byte0 = new Byte((byte)112);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(byte0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertTrue(jsonNode0.canConvertToLong());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(2.14748365E9F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertTrue(jsonNode0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("", (short)191);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode1);
      NodeCursor.ObjectCursor nodeCursor_ObjectCursor0 = (NodeCursor.ObjectCursor)treeTraversingParser0._nodeCursor;
      NodeCursor.RootCursor nodeCursor_RootCursor0 = new NodeCursor.RootCursor(objectNode1, nodeCursor_ObjectCursor0);
      treeTraversingParser0._nodeCursor = (NodeCursor) nodeCursor_RootCursor0;
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isInt());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Double double0 = new Double(4.9E-324);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isArray());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      BigDecimal bigDecimal0 = new BigDecimal(4243.932978578458);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isObject());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BooleanNode booleanNode0 = new BooleanNode(true);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertEquals("true", jsonNode0.asText());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0, (ObjectCodec) null);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isShort());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.close();
      // Undeclared exception!
      try { 
        treeTraversingParser0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(0.8F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MissingNode missingNode0 = new MissingNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      try { 
        treeTraversingParser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (NOT_AVAILABLE) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DecimalNode decimalNode0 = new DecimalNode((BigDecimal) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getLongValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getIntValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TextNode textNode0 = new TextNode("d-N8");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      try { 
        treeTraversingParser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_STRING) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      TextNode textNode0 = jsonNodeFactory0.textNode("2a7@s=sfPpV_S");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      try { 
        treeTraversingParser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_STRING) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MissingNode missingNode0 = new MissingNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (NOT_AVAILABLE) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(Float.NEGATIVE_INFINITY);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MissingNode missingNode0 = new MissingNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (NOT_AVAILABLE) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectNode objectNode0 = arrayNode0.addObject();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      try { 
        treeTraversingParser0.currentNumericNode();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<POJONode> class0 = POJONode.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      TreeTraversingParser treeTraversingParser0 = null;
      try {
        treeTraversingParser0 = new TreeTraversingParser((JsonNode) null, objectReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TreeTraversingParser treeTraversingParser0 = null;
      try {
        treeTraversingParser0 = new TreeTraversingParser((JsonNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      byte[] byteArray0 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      TextNode textNode0 = jsonNodeFactory0.textNode("2a7@s=sfPpV_S");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.nextTextValue();
      char[] charArray0 = treeTraversingParser0.getTextCharacters();
      assertEquals(13, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      JsonLocation jsonLocation0 = treeTraversingParser0.getCurrentLocation();
      assertEquals((-1), jsonLocation0.getColumnNr());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MissingNode missingNode0 = new MissingNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      treeTraversingParser0.nextTextValue();
      treeTraversingParser0.nextToken();
      try { 
        treeTraversingParser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.currentNode();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf((-3488.813F));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      MockFile mockFile0 = new MockFile("VM~|R7mb", "VM~|R7mb");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      int int0 = treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) mockFileOutputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      try { 
        treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getBinaryValue((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      ObjectNode objectNode0 = arrayNode0.objectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0, objectMapper0);
      byte[] byteArray0 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(Float.NEGATIVE_INFINITY);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      JsonParser jsonParser0 = binaryNode0.traverse();
      boolean boolean0 = jsonParser0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.close();
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertTrue(treeTraversingParser0.isClosed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MissingNode missingNode0 = new MissingNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ArrayNode arrayNode0 = objectNode0.putArray("|.");
      ValueNode valueNode0 = arrayNode0.pojoNode(objectNode0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      ObjectNode objectNode1 = (ObjectNode)treeTraversingParser0.getEmbeddedObject();
      assertFalse(objectNode1.isFloatingPointNumber());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(Float.NEGATIVE_INFINITY);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      JsonParser.NumberType jsonParser_NumberType0 = treeTraversingParser0.getNumberType();
      assertEquals(JsonParser.NumberType.FLOAT, jsonParser_NumberType0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      RawValue rawValue0 = new RawValue(nullNode0);
      ValueNode valueNode0 = arrayNode0.rawValueNode(rawValue0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.nextTextValue();
      String string0 = treeTraversingParser0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      treeTraversingParser0.nextTextValue();
      String string0 = treeTraversingParser0.getText();
      assertEquals("0.0", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ArrayNode arrayNode0 = objectNode0.putArray("V9=)");
      NumericNode numericNode0 = arrayNode0.numberNode((-3689L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.nextTextValue();
      String string0 = treeTraversingParser0.getText();
      assertEquals("-3689", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.nextToken();
      int int0 = treeTraversingParser0.getTextLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextNode textNode0 = new TextNode(".1");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0._closed = true;
      treeTraversingParser0.nextTextValue();
      assertTrue(treeTraversingParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.overrideCurrentName("");
      assertFalse(treeTraversingParser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextBooleanValue();
      assertTrue(treeTraversingParser0.hasCurrentToken());
      
      treeTraversingParser0.nextIntValue(3600);
      treeTraversingParser0.overrideCurrentName("R/OcJt#b12{T'h");
      assertFalse(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextNode textNode0 = new TextNode("d-N8");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.nextValue();
      assertEquals(6, treeTraversingParser0.getCurrentTokenId());
      
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getCurrentName();
      assertFalse(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      objectNode0.put("?QC\"9LCt^`HL$P", (-3515.0F));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.getText();
      assertEquals(5, treeTraversingParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      treeTraversingParser0.nextTextValue();
      treeTraversingParser0.skipChildren();
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.skipChildren();
      assertEquals(JsonToken.END_OBJECT, treeTraversingParser0.currentToken());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      NullNode nullNode0 = NullNode.getInstance();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      NodeCursor.RootCursor nodeCursor_RootCursor0 = (NodeCursor.RootCursor)treeTraversingParser0._nodeCursor;
      NodeCursor.ObjectCursor nodeCursor_ObjectCursor0 = new NodeCursor.ObjectCursor(objectNode0, nodeCursor_RootCursor0);
      NodeCursor.RootCursor nodeCursor_RootCursor1 = new NodeCursor.RootCursor(objectNode0, nodeCursor_ObjectCursor0);
      treeTraversingParser0._nodeCursor = (NodeCursor) nodeCursor_RootCursor1;
      treeTraversingParser0.nextToken();
      assertTrue(treeTraversingParser0.isExpectedStartObjectToken());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.getText();
      assertEquals(4, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.getEmbeddedObject();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MissingNode missingNode0 = new MissingNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextToken();
      treeTraversingParser0.close();
      assertFalse(treeTraversingParser0.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, objectMapper0);
      arrayNode0.addNull();
      treeTraversingParser0.nextToken();
      // Undeclared exception!
      try { 
        treeTraversingParser0.nextToken();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0, (ObjectCodec) null);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getDoubleValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.BigIntegerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      try { 
        treeTraversingParser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(Double.NEGATIVE_INFINITY);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextCharacters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      JsonLocation jsonLocation0 = treeTraversingParser0.getTokenLocation();
      assertEquals((-1), jsonLocation0.getColumnNr());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertEquals("ROOT", jsonStreamContext0.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      try { 
        treeTraversingParser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      boolean boolean0 = treeTraversingParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      int int0 = treeTraversingParser0.getTextOffset();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Short short0 = new Short((short)1024);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, objectMapper0);
      boolean boolean0 = treeTraversingParser0.hasTextCharacters();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0, (ObjectCodec) null);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayList<JsonNode> arrayList0 = new ArrayList<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, arrayList0);
      NumericNode numericNode0 = arrayNode0.numberNode((byte)3);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals(3.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      Version version0 = treeTraversingParser0.version();
      assertEquals(10, version0.getMinorVersion());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Integer integer0 = new Integer(89);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(integer0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      treeTraversingParser0.setCodec(objectMapper0);
      assertNull(treeTraversingParser0.currentToken());
  }
}
