/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 23:19:10 GMT 2021
 */

package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonStreamContext;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.DupDetector;
import com.fasterxml.jackson.core.json.JsonReadContext;
import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.core.json.JsonWriteFeature;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.AbstractTypeResolver;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NodeCursor;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.util.RawValue;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.Clock;
import java.time.chrono.JapaneseDate;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TreeTraversingParser_ESTest extends TreeTraversingParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = objectNode0.putPOJO("com.fasterxml.jackson.databind.node.TreeTraversingParser", (Object) null);
      ObjectNode objectNode2 = objectNode1.put("", 0.0F);
      NodeCursor.ArrayCursor nodeCursor_ArrayCursor0 = new NodeCursor.ArrayCursor(binaryNode0, (NodeCursor) null);
      NodeCursor.RootCursor nodeCursor_RootCursor0 = new NodeCursor.RootCursor(objectNode2, nodeCursor_ArrayCursor0);
      treeTraversingParser0._nodeCursor = (NodeCursor) nodeCursor_RootCursor0;
      JsonToken jsonToken0 = treeTraversingParser0.nextValue();
      assertFalse(jsonToken0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      binaryNode0.isTextual();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0._nodeCursor = null;
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextCharacters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DecimalNode decimalNode0 = new DecimalNode((BigDecimal) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ObjectReader objectReader1 = objectReader0.withFormatDetection((DataFormatReaders) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      objectReader1.withoutAttribute((Object) null);
      ObjectReader objectReader2 = objectReader1.with(jsonParser_Feature0);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_SINGLE_QUOTES;
      ObjectReader objectReader3 = objectReader2.without((FormatFeature) jsonReadFeature0);
      Clock clock0 = MockClock.systemUTC();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now(clock0);
      ObjectReader objectReader4 = objectReader3.withValueToUpdate(japaneseDate0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, objectReader4);
      treeTraversingParser0.currentNumericNode();
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertNull(bigDecimal0);
      
      treeTraversingParser0.getNumberType();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getIntValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JsonNodeFactory.withExactBigDecimals(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-1);
      BinaryNode binaryNode0 = new BinaryNode(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      byteArrayBuilder0.appendTwoBytes((byte) (-1));
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      byteArrayBuilder0.setCurrentSegmentLength((byte) (-1));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0, (ObjectCodec) null);
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(binaryNode0, (ObjectCodec) null);
      // Undeclared exception!
      try { 
        treeTraversingParser1.readBinaryValue((Base64Variant) null, (OutputStream) byteArrayBuilder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      treeTraversingParser0.getNumberType();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "j");
      Random.setNextRandom(2525);
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      bigIntegerNode0.toString();
      treeTraversingParser0.clearCurrentToken();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      treeTraversingParser0.readBinaryValue((OutputStream) pipedOutputStream0);
      bigIntegerNode0.traverse();
      bigIntegerNode0.isNull();
      treeTraversingParser0.version();
      treeTraversingParser0.getBigIntegerValue();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextCharacters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(Double.POSITIVE_INFINITY);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      treeTraversingParser0.getFloatValue();
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      TextNode textNode0 = jsonNodeFactory0.textNode("P");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      Base64Variant base64Variant0 = new Base64Variant("com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember", "com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember", false, 'b', (-1649));
      try { 
        treeTraversingParser0.getBinaryValue(base64Variant0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot access contents of TextNode as binary due to broken Base64 encoding: Illegal character 'P' (code 0x50) in base64 content
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3104);
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(3104, 1586, mockRandom0);
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      treeTraversingParser0.configure(jsonParser_Feature0, false);
      treeTraversingParser0.disable(jsonParser_Feature0);
      bigIntegerNode0.canConvertToInt();
      treeTraversingParser0.getNumberValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte)3;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigInteger1.gcd(bigInteger2);
      bigInteger0.compareTo(bigInteger1);
      treeTraversingParser0.getNumberType();
      treeTraversingParser0.getLongValue();
      treeTraversingParser0.getNumberValue();
      treeTraversingParser0.getDecimalValue();
      JsonLocation jsonLocation0 = treeTraversingParser0.getTokenLocation();
      assertEquals((-1L), jsonLocation0.getCharOffset());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ALLOW_COERCION_OF_SCALARS");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[B?`IZ^");
      Random.setNextRandom((-1301));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-31);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-31);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)49;
      byteArray0[8] = (byte)64;
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.getBinaryValue((Base64Variant) null);
      treeTraversingParser0.getTextOffset();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextCharacters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0, (ObjectCodec) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      try { 
        treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(4);
      Double double0 = Double.valueOf(Double.POSITIVE_INFINITY);
      ValueNode valueNode0 = arrayNode0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.getParsingContext();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      Float float0 = new Float(10.338192F);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(float0);
      ((NumericNode) valueNode0).asLong();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getValueAsDouble((double) 10.338192F);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      treeTraversingParser0.getByteValue();
      treeTraversingParser0.getText();
      NodeCursor.RootCursor nodeCursor_RootCursor0 = (NodeCursor.RootCursor)treeTraversingParser0._nodeCursor;
      treeTraversingParser0._nodeCursor = (NodeCursor) nodeCursor_RootCursor0;
      MockPrintStream mockPrintStream0 = new MockPrintStream("10.338192");
      nodeCursor_RootCursor0._currentName = "F0Nz>#p";
      treeTraversingParser0.getCurrentName();
      treeTraversingParser0.getNumberType();
      treeTraversingParser0.overrideCurrentName("10.338192");
      // Undeclared exception!
      try { 
        treeTraversingParser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      objectNode0.withArray("zn^]]Eh%vS`#.(G}th");
      ObjectNode objectNode1 = objectNode0.put("", false);
      ObjectNode objectNode2 = objectNode1.put("", (-3751L));
      NodeCursor.ArrayCursor nodeCursor_ArrayCursor0 = new NodeCursor.ArrayCursor(objectNode2, (NodeCursor) null);
      objectNode2.asDouble((-2796.84));
      JsonPointer jsonPointer0 = nodeCursor_ArrayCursor0.pathAsPointer(false);
      Byte byte0 = new Byte((byte)92);
      jsonNodeFactory0.numberNode(byte0);
      objectNode2.at(jsonPointer0);
      objectNode1.remove("");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode2);
      treeTraversingParser0.getCodec();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      objectNode1.retain((Collection<String>) linkedList0);
      treeTraversingParser0.version();
      FloatNode floatNode0 = new FloatNode(0.8F);
      POJONode pOJONode0 = new POJONode(floatNode0);
      List<JsonNode> list0 = pOJONode0.findParents("");
      objectNode1.findValues("5gG$S5$,yZ", list0);
      treeTraversingParser0.isClosed();
      treeTraversingParser0.isNaN();
      treeTraversingParser0.getEmbeddedObject();
      treeTraversingParser0.nextToken();
      treeTraversingParser0.setCodec((ObjectCodec) null);
      treeTraversingParser0.overrideCurrentName("5gG$S5$,yZ");
      assertEquals(1, treeTraversingParser0.currentTokenId());
      
      System.setCurrentTimeMillis((-3751L));
      // Undeclared exception!
      try { 
        treeTraversingParser0.nextToken();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedHashMap$LinkedHashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextValue();
      treeTraversingParser0.getTextLength();
      // Undeclared exception!
      try { 
        treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DoubleNode doubleNode0 = new DoubleNode(0.0);
      doubleNode0.asText();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      treeTraversingParser0.currentNode();
      treeTraversingParser0.currentNumericNode();
      treeTraversingParser0.getNumberValue();
      String string0 = treeTraversingParser0.getCurrentName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      JsonNode jsonNode0 = jsonNodeFactory0.missingNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0);
      JsonNode jsonNode1 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode1.isFloat());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DecimalNode decimalNode0 = new DecimalNode((BigDecimal) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ObjectReader objectReader1 = objectReader0.withFormatDetection((DataFormatReaders) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      objectReader1.withoutAttribute((Object) null);
      ObjectReader objectReader2 = objectReader1.with(jsonParser_Feature0);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_SINGLE_QUOTES;
      ObjectReader objectReader3 = objectReader2.without((FormatFeature) jsonReadFeature0);
      Clock clock0 = MockClock.systemUTC();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now(clock0);
      ObjectReader objectReader4 = objectReader3.withValueToUpdate(japaneseDate0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, objectReader4);
      treeTraversingParser0.currentNumericNode();
      treeTraversingParser0.getDecimalValue();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getLongValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.getBinaryValue((Base64Variant) null);
      treeTraversingParser0.nextToken();
      int int0 = treeTraversingParser0.getTextLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      NullNode nullNode0 = NullNode.getInstance();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.close();
      treeTraversingParser0._startContainer = true;
      // Undeclared exception!
      try { 
        treeTraversingParser0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WEAK_MATCH");
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      ArrayNode arrayNode0 = objectNode0.putArray("P@;I6PT4AJx'");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      treeTraversingParser0.getTextOffset();
      arrayNode0.add(0);
      treeTraversingParser0.nextToken();
      arrayNode0.removeAll();
      Random.setNextRandom(0);
      treeTraversingParser0.skipChildren();
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      
      treeTraversingParser0.nextToken();
      assertEquals(0, treeTraversingParser0.getTextOffset());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      NullNode nullNode0 = NullNode.getInstance();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      treeTraversingParser0._nextToken = jsonToken0;
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.getText();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextTextValue();
      treeTraversingParser0.getText();
      treeTraversingParser0.getTextCharacters();
      assertEquals(12, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(Double.POSITIVE_INFINITY);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      Class<ShortNode> class0 = ShortNode.class;
      ObjectReader objectReader1 = objectReader0.forType(class0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      ObjectReader objectReader2 = objectReader1.with(jsonParser_Feature0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0, objectReader2);
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) treeTraversingParser0);
      dupDetector0.child();
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(dupDetector0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "nO^HMJm+GB{HBk'QKy");
      jsonReadContext0.pathAsPointer();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "nO^HMJm+GB{HBk'QKy");
      DupDetector.rootDetector((JsonParser) treeTraversingParser0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dupDetector0.reset();
      JsonReadContext jsonReadContext1 = new JsonReadContext(jsonReadContext0, dupDetector0, 1, 2, 1470);
      dupDetector0.reset();
      JsonPointer jsonPointer0 = JsonPointer.forPath(jsonReadContext1, true);
      objectReader0.at(jsonPointer0);
      treeTraversingParser0.version();
      treeTraversingParser0.getCurrentLocation();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.currentNumericNode();
      int int0 = treeTraversingParser0.getTextOffset();
      assertEquals(0, int0);
      
      treeTraversingParser0.getIntValue();
      treeTraversingParser0.getParsingContext();
      treeTraversingParser0.getNumberValue();
      treeTraversingParser0.version();
      assertEquals(0, treeTraversingParser0.getTextOffset());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)4;
      treeTraversingParser0.setRequestPayloadOnError(byteArray0, "");
      treeTraversingParser0.nextIntValue(65599);
      nullNode0.isPojo();
      treeTraversingParser0.getTokenLocation();
      treeTraversingParser0.close();
      treeTraversingParser0.getValueAsString();
      StringWriter stringWriter0 = new StringWriter(2);
      nullNode0.asBoolean(false);
      treeTraversingParser0.getText((Writer) stringWriter0);
      treeTraversingParser0.version();
      treeTraversingParser0.getParsingContext();
      FileSystemHandling.shouldAllThrowIOExceptions();
      treeTraversingParser0.getValueAsBoolean(true);
      try { 
        treeTraversingParser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         // Request payload : -\u0004
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      NullNode nullNode0 = NullNode.instance;
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextTextValue();
      treeTraversingParser0.getText();
      assertEquals(12, treeTraversingParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      bigDecimal0.setScale((-1346), 4);
      jsonNodeFactory0.numberNode(bigDecimal0);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 2611);
      NumericNode numericNode0 = arrayNode0.numberNode((short)1);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.getDecimalValue();
      treeTraversingParser0.currentNumericNode();
      treeTraversingParser0.nextIntValue(14);
      treeTraversingParser0.getText();
      treeTraversingParser0.getShortValue();
      treeTraversingParser0.getTextCharacters();
      treeTraversingParser0.getDoubleValue();
      treeTraversingParser0.currentNode();
      treeTraversingParser0.hasTextCharacters();
      treeTraversingParser0.getTextLength();
      System.setCurrentTimeMillis((-997L));
      treeTraversingParser0.getCurrentName();
      int int0 = treeTraversingParser0.getTextOffset();
      assertEquals(7, treeTraversingParser0.getCurrentTokenId());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      NullNode nullNode0 = NullNode.instance;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      nullNode0.canConvertToLong();
      treeTraversingParser0.nextBooleanValue();
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.currentName();
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NullNode nullNode0 = NullNode.instance;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.nextBooleanValue();
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextTextValue();
      treeTraversingParser0.nextFieldName();
      try { 
        treeTraversingParser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NullNode nullNode0 = NullNode.instance;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.overrideStdFeatures((-128), (-128));
      JsonParser jsonParser0 = treeTraversingParser0.skipChildren();
      assertEquals(0, jsonParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = false;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put((String) null, (-3087L));
      ArrayNode arrayNode0 = objectNode1.putArray("wsE");
      Double double0 = new Double((-3087L));
      ValueNode valueNode0 = arrayNode0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.getFloatValue();
      treeTraversingParser0.getIntValue();
      treeTraversingParser0.getCurrentName();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("`uu/", "", false, '>', 1793);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      NullNode nullNode0 = NullNode.getInstance();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      RawValue rawValue0 = new RawValue(nullNode0);
      ValueNode valueNode0 = jsonNodeFactory0.rawValueNode(rawValue0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.nextTextValue();
      treeTraversingParser0.getText();
      assertEquals(12, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NullNode nullNode0 = NullNode.instance;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      nullNode0.asBoolean();
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.getText();
      Random.setNextRandom(136);
      int int0 = treeTraversingParser0.getTextLength();
      assertEquals(4, treeTraversingParser0.currentTokenId());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf(358L);
      longNode0.iterator();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      treeTraversingParser0.nextValue();
      treeTraversingParser0.getDecimalValue();
      treeTraversingParser0.currentNumericNode();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      RawValue rawValue0 = new RawValue(longNode0);
      jsonNodeFactory0.rawValueNode(rawValue0);
      TextNode textNode0 = jsonNodeFactory0.textNode("");
      treeTraversingParser0.setCurrentValue(textNode0);
      longNode0.asBoolean();
      treeTraversingParser0.close();
      treeTraversingParser0.getText();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)5;
      BinaryNode binaryNode0 = new BinaryNode(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextIntValue((byte)118);
      treeTraversingParser0.getTextLength();
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      RawValue rawValue0 = new RawValue(decimalNode0);
      ValueNode valueNode0 = jsonNodeFactory0.rawValueNode(rawValue0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.nextTextValue();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(3);
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      JsonInclude.Value.merge((JsonInclude.Value) null, (JsonInclude.Value) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPropertyInclusion((JsonInclude.Value) null);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[2];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      ObjectMapper objectMapper4 = objectMapper3.disable(jsonGenerator_FeatureArray0);
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      objectMapper4.configure(jsonGenerator_Feature2, false);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, objectMapper4);
      treeTraversingParser0.getCodec();
      treeTraversingParser0.getDoubleValue();
      Random.setNextRandom(3);
      treeTraversingParser0.getCurrentLocation();
      treeTraversingParser0.getDoubleValue();
      treeTraversingParser0.getFloatValue();
      Number number0 = treeTraversingParser0.getNumberValue();
      assertEquals((byte)3, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NullNode nullNode0 = NullNode.getInstance();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0._closed = true;
      treeTraversingParser0.getEmbeddedObject();
      Random.setNextRandom(1799);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IntNode.valueOf((-1420));
      MockPrintStream mockPrintStream0 = new MockPrintStream("W'4j^");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      objectMapper0.configure(serializationFeature0, true);
      FloatNode floatNode0 = FloatNode.valueOf((-1420));
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(floatNode0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      treeTraversingParser0.getEmbeddedObject();
      injectableValues_Std0.addValue("W'4j^", (Object) "px]Az0gN']Qp8qe(");
      ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(floatNode0, objectReader0);
      TreeTraversingParser treeTraversingParser2 = new TreeTraversingParser(floatNode0, objectReader1);
      long long0 = treeTraversingParser2.getLongValue();
      assertEquals((-1420L), long0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      Float float0 = new Float(10.338192F);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(float0);
      ((NumericNode) valueNode0).asLong();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.getValueAsDouble((double) 10.338192F);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      treeTraversingParser0.getEmbeddedObject();
      assertEquals(8, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.nextFieldName();
      try { 
        treeTraversingParser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.nextToken();
      int int0 = treeTraversingParser0.getTextLength();
      assertEquals(6, treeTraversingParser0.currentTokenId());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      BigDecimal bigDecimal0 = new BigDecimal(1052);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigDecimal0);
      jsonNodeFactory0.numberNode((short)254);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.getParsingContext();
      treeTraversingParser0.getNumberValue();
      treeTraversingParser0.getNumberType();
      treeTraversingParser0.currentNumericNode();
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getIntValue();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("com.fasterxml.jackson.databind.node.TreeTraversingParser$1", "com.fasterxml.jackson.databind.node.TreeTraversingParser$1", false, '=', 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 58)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      treeTraversingParser0.nextToken();
      assertEquals(10, treeTraversingParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8ufW");
      ShortNode shortNode0 = ShortNode.valueOf((short) (-314));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      treeTraversingParser0.nextLongValue((short) (-314));
      treeTraversingParser0.currentNode();
      assertEquals(7, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      NullNode nullNode0 = NullNode.getInstance();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      nullNode0.isNumber();
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      treeTraversingParser0._nextToken = jsonToken0;
      treeTraversingParser0.nextToken();
      int int0 = treeTraversingParser0.getTextLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      NullNode nullNode0 = NullNode.getInstance();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0, (ObjectCodec) null);
      treeTraversingParser0.getCurrentName();
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getTextLength();
      treeTraversingParser0.close();
      treeTraversingParser0.close();
      try { 
        treeTraversingParser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      NullNode nullNode0 = NullNode.getInstance();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0, (ObjectCodec) null);
      treeTraversingParser0.close();
      treeTraversingParser0.overrideCurrentName("*K.TiBtz4-Cx");
      try { 
        treeTraversingParser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(decimalNode0);
      TreeTraversingParser treeTraversingParser2 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser2.close();
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((short)3879);
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.remainder(bigInteger1);
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      SerializedString serializedString0 = new SerializedString(")");
      treeTraversingParser0.nextFieldName((SerializableString) serializedString0);
      treeTraversingParser0.currentNode();
      treeTraversingParser0.getText();
      treeTraversingParser0.getValueAsInt();
      treeTraversingParser0.getText();
      treeTraversingParser0.currentNumericNode();
      treeTraversingParser0.getIntValue();
      assertEquals(7, treeTraversingParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((short)3879);
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.remainder(bigInteger1);
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      SerializedString serializedString0 = new SerializedString(")");
      treeTraversingParser0.nextFieldName((SerializableString) serializedString0);
      treeTraversingParser0.currentNode();
      treeTraversingParser0.getText();
      treeTraversingParser0.getValueAsInt();
      treeTraversingParser0.getText();
      try { 
        treeTraversingParser0.currentNumericNode();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_STRING) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((short)3879);
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      SerializedString serializedString0 = new SerializedString("K>");
      treeTraversingParser0.nextFieldName((SerializableString) serializedString0);
      treeTraversingParser0.currentNode();
      treeTraversingParser0.getText();
      treeTraversingParser0.getValueAsInt();
      treeTraversingParser0.getText();
      treeTraversingParser0.getBigIntegerValue();
      assertEquals(7, treeTraversingParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      MockRandom mockRandom0 = new MockRandom(0L);
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.close();
      SerializedString serializedString0 = new SerializedString("K>");
      treeTraversingParser0.isClosed();
      nullNode0.asBoolean();
      treeTraversingParser0.currentNode();
      treeTraversingParser0.getText();
      treeTraversingParser0.getValueAsInt();
      treeTraversingParser0.getText();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      arrayNode0.objectNode();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonParser_FeatureArray0);
      ObjectMapper objectMapper2 = objectMapper1.copy();
      Vector<Module> vector0 = new Vector<Module>(4, 1328);
      ObjectMapper objectMapper3 = objectMapper2.registerModules((Iterable<? extends Module>) vector0);
      Float float0 = new Float((float) 1328);
      arrayNode0.numberNode(float0);
      SerializedString serializedString0 = new SerializedString("");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      ObjectMapper objectMapper4 = objectMapper3.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, objectMapper4);
      treeTraversingParser0.skipChildren();
      treeTraversingParser0.getParsingContext();
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((short)3879);
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(textNode0);
      treeTraversingParser1.close();
      treeTraversingParser0.getDoubleValue();
      TreeTraversingParser treeTraversingParser2 = new TreeTraversingParser(textNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser2.getBinaryValue((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.getBinaryValue();
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(textNode0, (ObjectCodec) null);
      textNode0.intValue();
      treeTraversingParser1.getCurrentName();
      try { 
        treeTraversingParser0.currentNumericNode();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_STRING) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DoubleNode doubleNode0 = DoubleNode.valueOf(2718.66);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      treeTraversingParser0.version();
      doubleNode0.isTextual();
      treeTraversingParser0.getIntValue();
      treeTraversingParser0.overrideCurrentName("");
      treeTraversingParser0.getNumberType();
      treeTraversingParser0.getEmbeddedObject();
      treeTraversingParser0.currentNumericNode();
      String string0 = "IC.w+9iE_tpxKrJNTvE";
      TypeReference<String> typeReference0 = (TypeReference<String>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        treeTraversingParser0.readValueAs((TypeReference<?>) typeReference0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for parser, needed for deserialization
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      decimalNode0.asText("com.fasterxml.jackson.databind.util.NameTransformer");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      decimalNode0.fieldNames();
      treeTraversingParser0.getBinaryValue();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Float float0 = new Float(1259.4731F);
      jsonNodeFactory0.numberNode(float0);
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.nextToken();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      jsonpCharacterEscapes0.getEscapeSequence((-16711681));
      treeTraversingParser1.nextFieldName((SerializableString) null);
      treeTraversingParser0.currentNode();
      treeTraversingParser1.getText();
      treeTraversingParser1.getDecimalValue();
      treeTraversingParser1.isNaN();
      treeTraversingParser0.hasTextCharacters();
      // Undeclared exception!
      try { 
        treeTraversingParser1._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1);
      NumericNode numericNode0 = arrayNode0.numberNode((-2595.5623F));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      SerializedString serializedString0 = new SerializedString("K>");
      treeTraversingParser0.nextFieldName((SerializableString) serializedString0);
      treeTraversingParser0.currentNode();
      treeTraversingParser0.getText();
      treeTraversingParser0.getDecimalValue();
      treeTraversingParser0.isNaN();
      treeTraversingParser0.hasTextCharacters();
      // Undeclared exception!
      try { 
        treeTraversingParser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0, (ObjectCodec) null);
      treeTraversingParser0.nextFieldName((SerializableString) null);
      treeTraversingParser0.currentNode();
      treeTraversingParser0.getText();
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_NULL) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JsonNodeFactory.withExactBigDecimals(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-1);
      BinaryNode binaryNode0 = new BinaryNode(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0, (ObjectCodec) null);
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(binaryNode0, (ObjectCodec) null);
      int int0 = treeTraversingParser1.readBinaryValue((Base64Variant) null, (OutputStream) byteArrayBuilder0);
      assertEquals(4, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      IntNode.valueOf((-1420));
      MockPrintStream mockPrintStream0 = new MockPrintStream("W'4j^");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      objectMapper0.configure(serializationFeature0, true);
      FloatNode floatNode0 = new FloatNode(1.0F);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(floatNode0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      treeTraversingParser0.getEmbeddedObject();
      injectableValues_Std0.addValue("W'4j^", (Object) "px]Az0gN']xp8Ce(");
      ObjectReader objectReader1 = objectReader0.with((InjectableValues) injectableValues_Std0);
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(floatNode0, objectReader0);
      TreeTraversingParser treeTraversingParser2 = new TreeTraversingParser(floatNode0, objectReader1);
      long long0 = treeTraversingParser2.getLongValue();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IntNode intNode0 = IntNode.valueOf((-1420));
      MockPrintStream mockPrintStream0 = new MockPrintStream("W'4j^");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(dataOutputStream0, true);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
      treeTraversingParser0.clearCurrentToken();
      treeTraversingParser0.overrideCurrentName("W'4j^");
      treeTraversingParser0.getParsingContext();
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isBigDecimal());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      JsonSetter.Value.empty();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode(1041.8F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, objectMapper0);
      treeTraversingParser0.getIntValue();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      treeTraversingParser0.close();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextCharacters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      Nulls nulls0 = Nulls.FAIL;
      Nulls nulls1 = Nulls.SKIP;
      JsonSetter.Value.construct(nulls0, nulls1);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode(1041.8F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, objectMapper0);
      treeTraversingParser0.getCurrentLocation();
      treeTraversingParser0.close();
      treeTraversingParser0.isNaN();
      treeTraversingParser0.hasTextCharacters();
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(arrayNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser1._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      Nulls nulls0 = Nulls.FAIL;
      Nulls nulls1 = Nulls.SKIP;
      JsonSetter.Value.construct(nulls0, nulls1);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode(1041.8F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, objectMapper0);
      treeTraversingParser0.getCurrentLocation();
      treeTraversingParser0.close();
      try { 
        treeTraversingParser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      Float float0 = new Float(10.338192F);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(float0);
      ((NumericNode) valueNode0).asLong();
      valueNode0.isBoolean();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getValueAsDouble((double) 10.338192F);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      treeTraversingParser0.getByteValue();
      treeTraversingParser0.getText();
      MockPrintStream mockPrintStream0 = new MockPrintStream("10.338192");
      treeTraversingParser0.getCurrentName();
      treeTraversingParser0.getNumberType();
      treeTraversingParser0.overrideCurrentName("10.338192");
      treeTraversingParser0.getDoubleValue();
      treeTraversingParser0.getBinaryValue((Base64Variant) null);
      treeTraversingParser0.getFloatValue();
      assertEquals(8, treeTraversingParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      Float float0 = new Float(10.338192F);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(float0);
      ((NumericNode) valueNode0).asLong();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getValueAsDouble((double) 10.338192F);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      treeTraversingParser0.getByteValue();
      treeTraversingParser0.getText();
      MockPrintStream mockPrintStream0 = new MockPrintStream("10.338192");
      treeTraversingParser0.getCurrentName();
      treeTraversingParser0.getNumberType();
      treeTraversingParser0.overrideCurrentName("10.338192");
      treeTraversingParser0.getDoubleValue();
      treeTraversingParser0.getBinaryValue((Base64Variant) null);
      treeTraversingParser0.currentNumericNode();
      assertEquals(8, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      Nulls nulls0 = Nulls.FAIL;
      Nulls nulls1 = Nulls.SKIP;
      JsonSetter.Value.construct(nulls0, nulls1);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode(1041.8F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, objectMapper0);
      treeTraversingParser0.getCurrentLocation();
      treeTraversingParser0.close();
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(arrayNode0);
      treeTraversingParser0.isClosed();
      System.setCurrentTimeMillis(500);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-106);
      FloatNode floatNode0 = new FloatNode((byte) (-119));
      long long0 = new Byte((byte)0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      treeTraversingParser0.nextToken();
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(floatNode0);
      treeTraversingParser1.getValueAsDouble(3113.86);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      treeTraversingParser1.getByteValue();
      treeTraversingParser0.getText();
      MockPrintStream mockPrintStream0 = new MockPrintStream("[recursive type; ");
      treeTraversingParser0.getCurrentName();
      treeTraversingParser1.getNumberType();
      treeTraversingParser1.overrideCurrentName((String) null);
      treeTraversingParser1.getDoubleValue();
      byte[] byteArray1 = treeTraversingParser1.getBinaryValue((Base64Variant) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MissingNode.getInstance();
      MissingNode missingNode0 = MissingNode.getInstance();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Float float0 = new Float(0.0F);
      jsonNodeFactory0.numberNode(float0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      treeTraversingParser0.nextToken();
      jsonNodeFactory0.objectNode();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        treeTraversingParser0.getByteValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (NOT_AVAILABLE) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte)101;
      byteArray0[8] = (byte) (-106);
      BinaryNode binaryNode0 = new BinaryNode(byteArray0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(jsonParser_Feature0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("JSON", object0);
      ObjectReader objectReader1 = objectReader0.with((InjectableValues) injectableValues_Std1);
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(binaryNode0, objectReader1);
      try { 
        treeTraversingParser1.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IntNode intNode0 = IntNode.valueOf(0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      treeTraversingParser0.getDoubleValue();
      intNode0.findValuesAsText("UTF-8");
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ArrayNode arrayNode0 = objectNode0.putArray("");
      NumericNode numericNode0 = arrayNode0.numberNode(0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      treeTraversingParser0.nextFieldName((SerializableString) serializedString0);
      arrayNode0.doubleValue();
      BooleanNode booleanNode0 = jsonNodeFactory0.booleanNode(true);
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(booleanNode0);
      treeTraversingParser1.currentNode();
      try { 
        treeTraversingParser1.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_TRUE) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      BigDecimal bigDecimal0 = new BigDecimal((-2145L));
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      decimalNode0.fieldNames();
      treeTraversingParser0.getBinaryValue();
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser1.isClosed();
      treeTraversingParser1.hasTextCharacters();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        treeTraversingParser1.getByteValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((short)3879);
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.clearCurrentToken();
      treeTraversingParser0.overrideCurrentName("com.fasterxml.jackson.databind.node.TreeTraversingParser");
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertNull(jsonStreamContext0.getCurrentName());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      Nulls nulls0 = Nulls.FAIL;
      Nulls nulls1 = Nulls.SKIP;
      JsonSetter.Value.construct(nulls0, nulls1);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode(1041.8F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, objectMapper0);
      treeTraversingParser0.getIntValue();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextCharacters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ArrayNode arrayNode0 = objectNode0.putArray("");
      NumericNode numericNode0 = arrayNode0.numberNode(0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      treeTraversingParser0.nextFieldName((SerializableString) serializedString0);
      arrayNode0.doubleValue();
      treeTraversingParser0.currentNode();
      treeTraversingParser0.getIntValue();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      treeTraversingParser0.getText();
      treeTraversingParser0.getDecimalValue();
      treeTraversingParser0.isNaN();
      treeTraversingParser0.hasTextCharacters();
      // Undeclared exception!
      try { 
        treeTraversingParser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-1.0));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((short) (-1), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      POJONode pOJONode0 = new POJONode(textNode0);
      LinkedList<JsonNode> linkedList0 = new LinkedList<JsonNode>();
      textNode0.findValues("");
      List<JsonNode> list0 = pOJONode0.findParents((String) null, (List<JsonNode>) linkedList0);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, list0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(1598);
      ObjectNode objectNode0 = arrayNode0.insertObject((-2976));
      ObjectNode objectNode1 = objectNode0.put("L=de", 9.223372E18F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode1);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertTrue(jsonStreamContext0.inObject());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "y'2!)/");
      Float float0 = new Float(10.338192F);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode(189);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.isNaN();
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals(189.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      decimalNode0.asText("com.fasterxml.jackson.databind.util.NameTransformer");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      decimalNode0.fieldNames();
      treeTraversingParser0.getBinaryValue();
      treeTraversingParser0.isClosed();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(3116);
      ObjectNode objectNode0 = arrayNode0.insertObject(3116);
      ObjectNode objectNode1 = objectNode0.removeAll();
      ObjectNode objectNode2 = objectNode1.put("w[-*gAXot", "0");
      objectNode0.decimalValue();
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(arrayNode0);
      objectNode1.isBinary();
      objectNode1.iterator();
      treeTraversingParser1.nextLongValue((-1L));
      treeTraversingParser0.getCurrentName();
      treeTraversingParser0.getNumberType();
      TreeTraversingParser treeTraversingParser2 = new TreeTraversingParser(objectNode2);
      treeTraversingParser2.overrideCurrentName("com.fasterxml.jackson.core.util.InternCache");
      assertFalse(treeTraversingParser2.hasTextCharacters());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      BigInteger bigInteger0 = BigInteger.ONE;
      ObjectNode objectNode1 = objectNode0.put("2^#{M", bigInteger0);
      ObjectNode objectNode2 = objectNode1.putNull("2^#{M");
      ObjectNode objectNode3 = objectNode2.put("2^#{M", "2^#{M");
      objectNode2.decimalValue();
      jsonNodeFactory0.numberNode(4488L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode3);
      objectNode1.isBinary();
      objectNode2.iterator();
      treeTraversingParser0.nextLongValue(0L);
      try { 
        treeTraversingParser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((short)3879);
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      textNode0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.setConfig((DeserializationConfig) null);
      HashMap<String, LongNode> hashMap0 = new HashMap<String, LongNode>();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      ObjectMapper objectMapper2 = objectMapper1.setFilterProvider(simpleFilterProvider0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0, objectMapper3);
      treeTraversingParser0.getTokenLocation();
      try { 
        treeTraversingParser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_STRING) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      decimalNode0.asText("com.fasterxml.jackson.databind.util.NameTransformer");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      decimalNode0.fieldNames();
      treeTraversingParser0.getBinaryValue();
      decimalNode0.isContainerNode();
      treeTraversingParser0.isClosed();
      treeTraversingParser0.hasTextCharacters();
      decimalNode0.fieldNames();
      treeTraversingParser0.getCodec();
      treeTraversingParser0.overrideStdFeatures(1, 1);
      decimalNode0.equals((Object) treeTraversingParser0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.skipChildren();
      treeTraversingParser0.getNumberValue();
      assertEquals(8, treeTraversingParser0.currentTokenId());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(",");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(dataOutputStream0, true);
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(decimalNode0, (ObjectCodec) null);
      int int0 = treeTraversingParser1.readBinaryValue((Base64Variant) null, (OutputStream) dataOutputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      Float float0 = new Float(10.338192F);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(float0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.nextToken();
      jsonNodeFactory0.objectNode();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      treeTraversingParser0.getByteValue();
      byte[] byteArray0 = new byte[1];
      treeTraversingParser0.getText();
      treeTraversingParser0.getDecimalValue();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        treeTraversingParser0.readValueAs(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for parser, needed for deserialization
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      Float float0 = new Float(0.0F);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(float0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.nextToken();
      jsonNodeFactory0.objectNode();
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      decimalNode0.fieldNames();
      treeTraversingParser0.getCodec();
      treeTraversingParser0.overrideStdFeatures(108, 108);
      decimalNode0.equals((Object) float0);
      treeTraversingParser0.nextToken();
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(decimalNode0, (ObjectCodec) null);
      treeTraversingParser1.skipChildren();
      try { 
        treeTraversingParser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ArrayNode arrayNode0 = objectNode0.putArray("hm\u000F9Z^v(");
      objectNode0.replace("hm\u000F9Z^v(", arrayNode0);
      arrayNode0.numberNode(0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      ValueNode valueNode0 = arrayNode0.numberNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      treeTraversingParser0.nextFieldName((SerializableString) serializedString0);
      arrayNode0.doubleValue();
      treeTraversingParser0.currentNode();
      treeTraversingParser0.getIntValue();
      treeTraversingParser0.getTextCharacters();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      RawValue rawValue0 = new RawValue((SerializableString) null);
      ArrayNode arrayNode0 = objectNode0.putArray("com.fasterxml.jackson.databind.node.TreeTraversingParser");
      RawValue rawValue1 = new RawValue("\"<#fx+zE*n*>~<uZ");
      arrayNode0.rawValueNode(rawValue1);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      treeTraversingParser0.currentNode();
      JsonNodeFactory jsonNodeFactory1 = JsonNodeFactory.withExactBigDecimals(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-87);
      jsonNodeFactory1.binaryNode(byteArray0);
      treeTraversingParser0.overrideCurrentName("\"<#fx+zE*n*>~<uZ");
      try { 
        treeTraversingParser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1030);
      RawValue rawValue0 = new RawValue((SerializableString) null);
      ValueNode valueNode0 = arrayNode0.rawValueNode(rawValue0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.currentNode();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte)114;
      jsonNodeFactory0.binaryNode(byteArray0);
      treeTraversingParser0.overrideCurrentName("`oi");
      treeTraversingParser0.getEmbeddedObject();
      boolean boolean0 = treeTraversingParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(66);
      BigInteger bigInteger0 = new BigInteger(66, mockRandom0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.put("lI}l", (-231.0263));
      ArrayNode arrayNode0 = objectNode1.withArray("");
      NumericNode numericNode0 = arrayNode0.numberNode((long) 66);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      treeTraversingParser0.nextFieldName((SerializableString) serializedString0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      arrayNode0.doubleValue();
      treeTraversingParser0.currentNode();
      treeTraversingParser0.getIntValue();
      treeTraversingParser0.getTextCharacters();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      String string0 = "-xOY0(CVNQ>g;O:'1&";
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      treeTraversingParser0.hasTextCharacters();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      decimalNode0.fieldNames();
      treeTraversingParser0.getCodec();
      int int0 = 1;
      JsonParser jsonParser0 = treeTraversingParser0.overrideStdFeatures(1, 200);
      decimalNode0.equals((Object) jsonParser0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.skipChildren();
      try { 
        treeTraversingParser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextNode textNode0 = new TextNode("-~0@?D?00K3#{im~W");
      POJONode pOJONode0 = new POJONode(textNode0);
      JsonNode jsonNode0 = pOJONode0.deepCopy();
      pOJONode0.isContainerNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0, (ObjectCodec) null);
      try { 
        treeTraversingParser0.currentNumericNode();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      decimalNode0.asText("com.fasterxml.jackson.databind.util.NameTransformer");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      decimalNode0.doubleValue();
      treeTraversingParser0.getBinaryValue((Base64Variant) null);
      decimalNode0.fieldNames();
      treeTraversingParser0.getBinaryValue();
      decimalNode0.isContainerNode();
      treeTraversingParser0.isClosed();
      treeTraversingParser0.hasTextCharacters();
      decimalNode0.fieldNames();
      treeTraversingParser0.getCodec();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      treeTraversingParser0.overrideStdFeatures(1, 1);
      decimalNode0.equals((Object) treeTraversingParser0);
      treeTraversingParser0.nextToken();
      JsonParser jsonParser0 = treeTraversingParser0.skipChildren();
      treeTraversingParser0.getNumberValue();
      jsonParser0.getFloatValue();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "", true, '&', (-2801));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      BigInteger bigInteger0 = BigInteger.ONE;
      ObjectNode objectNode1 = objectNode0.put("2^#{M", bigInteger0);
      ObjectNode objectNode2 = objectNode1.removeAll();
      ObjectNode objectNode3 = objectNode2.put("2^#{M", "2^#{M");
      objectNode1.intValue();
      objectNode2.decimalValue();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode3);
      objectNode0.numberNode(1688);
      BigInteger.valueOf(0);
      objectNode1.isBinary();
      objectNode2.iterator();
      long long0 = new Integer(0);
      treeTraversingParser0.overrideCurrentName("");
      treeTraversingParser0.getCurrentName();
      // Undeclared exception!
      try { 
        treeTraversingParser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      Float float0 = new Float(0.0F);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(float0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.nextToken();
      jsonNodeFactory0.objectNode();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      treeTraversingParser0.getByteValue();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      treeTraversingParser0.getText();
      jsonNodeFactory0.binaryNode(byteArray0, (int) (byte)0, (int) (byte)0);
      treeTraversingParser0.getDecimalValue();
      jsonNodeFactory0.numberNode(Double.POSITIVE_INFINITY);
      treeTraversingParser0.getBigIntegerValue();
      treeTraversingParser0.getTextLength();
      treeTraversingParser0.isNaN();
      treeTraversingParser0.currentNode();
      treeTraversingParser0.getTextOffset();
      // Undeclared exception!
      try { 
        treeTraversingParser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ShortNode shortNode0 = new ShortNode((short)3879);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      treeTraversingParser0.isClosed();
      boolean boolean0 = treeTraversingParser0.hasTextCharacters();
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
      Stack<Module> stack0 = new Stack<Module>();
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<? extends Module>) stack0);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectReader objectReader0 = objectMapper2.reader(deserializationFeature1);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_YAML_COMMENTS;
      ObjectReader objectReader1 = objectReader0.without((FormatFeature) jsonReadFeature0);
      treeTraversingParser0.setCodec(objectReader1);
      assertFalse(treeTraversingParser0.hasTextCharacters());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(66);
      BigInteger bigInteger0 = new BigInteger(66, mockRandom0);
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0, (ObjectCodec) null);
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.isNaN();
      int int0 = treeTraversingParser0.getTextOffset();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      objectNode0.withArray("zn^]]Eh%vS`#.(G}th");
      ObjectNode objectNode1 = objectNode0.put("", false);
      ObjectNode objectNode2 = objectNode1.put("", (-3751L));
      NodeCursor.ArrayCursor nodeCursor_ArrayCursor0 = new NodeCursor.ArrayCursor(objectNode2, (NodeCursor) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode2, (ObjectCodec) null);
      try { 
        treeTraversingParser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MissingNode missingNode0 = MissingNode.getInstance();
      JsonNode jsonNode0 = missingNode0.deepCopy();
      missingNode0.isPojo();
      missingNode0.isNull();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0);
      treeTraversingParser0.skipChildren();
      treeTraversingParser0.overrideCurrentName("1e,^~W:.5*");
      try { 
        treeTraversingParser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (NOT_AVAILABLE) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-48);
      BinaryNode binaryNode0 = arrayNode0.binaryNode(byteArray0, (int) (byte)0, (int) (byte)0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      Nulls nulls0 = Nulls.FAIL;
      Nulls nulls1 = Nulls.SKIP;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.construct(nulls0, nulls1);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode(1041.8F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, objectMapper0);
      treeTraversingParser0.getCurrentLocation();
      treeTraversingParser0.close();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)27;
      BinaryNode binaryNode0 = new BinaryNode(byteArray0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(binaryNode0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(deserializationFeatureArray0);
      TreeTraversingParser treeTraversingParser0 = null;
      try {
        treeTraversingParser0 = new TreeTraversingParser((JsonNode) null, objectReader1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      Float float0 = new Float(0.0F);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(float0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      jsonNodeFactory0.objectNode();
      treeTraversingParser0.getByteValue();
      byte[] byteArray0 = new byte[1];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      treeTraversingParser0.enable(jsonParser_Feature0);
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        treeTraversingParser0.getText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.getEmbeddedObject();
      treeTraversingParser0.getBigIntegerValue();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAbstractTypeResolver((AbstractTypeResolver) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null resolver
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0, (ObjectCodec) null);
      try { 
        treeTraversingParser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_NULL) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(3);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ArrayNode arrayNode0 = objectNode0.putArray("");
      objectNode0.replace("", arrayNode0);
      NumericNode numericNode0 = arrayNode0.numberNode(0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      treeTraversingParser0.nextFieldName((SerializableString) serializedString0);
      arrayNode0.doubleValue();
      treeTraversingParser0.currentNode();
      treeTraversingParser0.getIntValue();
      treeTraversingParser0.getTextCharacters();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.skipChildren();
      try { 
        treeTraversingParser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      nullNode0.fields();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.nextTextValue();
      Random.setNextRandom((-2925));
      treeTraversingParser0.nextToken();
      assertEquals(0, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.with("6[$jBZ]W5f");
      ArrayNode arrayNode0 = objectNode1.withArray("6[$jBZ]W5f");
      Float float0 = new Float(1836.78F);
      ValueNode valueNode0 = arrayNode0.numberNode(float0);
      arrayNode0.add(2757);
      BigInteger bigInteger0 = BigInteger.ONE;
      jsonNodeFactory0.numberNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.getNumberValue();
      treeTraversingParser0.overrideCurrentName("6[$jBZ]W5f");
      treeTraversingParser0.getCurrentLocation();
      treeTraversingParser0.getCurrentName();
      treeTraversingParser0.getCodec();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte) (-89);
      byteArray0[8] = (byte)124;
      treeTraversingParser0.setRequestPayloadOnError(byteArray0, "6[$jBZ]W5f");
      treeTraversingParser0.setCodec((ObjectCodec) null);
      treeTraversingParser0.getEmbeddedObject();
      String string0 = treeTraversingParser0.getCurrentName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      decimalNode0.asText("com.fasterxml.jackson.databind.util.NameTransformer");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      decimalNode0.doubleValue();
      treeTraversingParser0.getBinaryValue((Base64Variant) null);
      decimalNode0.fieldNames();
      treeTraversingParser0.getBinaryValue();
      decimalNode0.isContainerNode();
      treeTraversingParser0.isClosed();
      treeTraversingParser0.hasTextCharacters();
      decimalNode0.fieldNames();
      treeTraversingParser0.getCodec();
      TreeTraversingParser treeTraversingParser1 = (TreeTraversingParser)treeTraversingParser0.overrideStdFeatures(1, 1);
      decimalNode0.equals((Object) treeTraversingParser0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.skipChildren();
      treeTraversingParser0.getNumberValue();
      treeTraversingParser1.currentNumericNode();
      assertEquals(8, treeTraversingParser0.getCurrentTokenId());
      assertFalse(treeTraversingParser0.hasTextCharacters());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      POJONode pOJONode0 = new POJONode(textNode0);
      LinkedList<JsonNode> linkedList0 = new LinkedList<JsonNode>();
      List<JsonNode> list0 = pOJONode0.findParents((String) null, (List<JsonNode>) linkedList0);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, list0);
      NumericNode numericNode0 = arrayNode0.numberNode(0.0F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, (ObjectCodec) null);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      hashMap0.put("f;mfFdi0ID:d", objectNode0);
      String string0 = "";
      ArrayNode arrayNode0 = objectNode0.putArray("");
      objectNode0.replace("", arrayNode0);
      NumericNode numericNode0 = arrayNode0.numberNode(0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jsonNodeFactory0.numberNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      treeTraversingParser0.nextFieldName((SerializableString) serializedString0);
      arrayNode0.doubleValue();
      treeTraversingParser0.currentNode();
      treeTraversingParser0.getIntValue();
      treeTraversingParser0.getTextCharacters();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      String string0 = "com.fasterxml.jackson.databind.util.NameTransformer";
      decimalNode0.asText("com.fasterxml.jackson.databind.util.NameTransformer");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      decimalNode0.doubleValue();
      Base64Variant base64Variant0 = null;
      treeTraversingParser0.getBinaryValue((Base64Variant) null);
      decimalNode0.fieldNames();
      treeTraversingParser0.getBinaryValue();
      decimalNode0.isContainerNode();
      treeTraversingParser0.isClosed();
      treeTraversingParser0.hasTextCharacters();
      decimalNode0.fieldNames();
      treeTraversingParser0.getCodec();
      treeTraversingParser0.overrideStdFeatures(1, 1);
      decimalNode0.equals((Object) treeTraversingParser0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.skipChildren();
      treeTraversingParser0.getNumberValue();
      int int0 = (-2801);
      Base64Variant base64Variant1 = null;
      try {
        base64Variant1 = new Base64Variant((Base64Variant) null, "", true, '&', (-2801));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      BigInteger bigInteger0 = BigInteger.ONE;
      ObjectNode objectNode1 = objectNode0.put("2^#{M", bigInteger0);
      ObjectNode objectNode2 = objectNode1.removeAll();
      ObjectNode objectNode3 = objectNode2.put("2^#{M", "2^#{M");
      objectNode1.intValue();
      objectNode2.decimalValue();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode3);
      BigInteger.valueOf((-2147483648L));
      objectNode1.isBinary();
      objectNode2.iterator();
      treeTraversingParser0.nextLongValue(0L);
      treeTraversingParser0.getCurrentName();
      // Undeclared exception!
      try { 
        treeTraversingParser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Integer integer0 = new Integer(114);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(integer0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[4];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS;
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.ESCAPE_NON_ASCII;
      formatFeatureArray0[1] = (FormatFeature) jsonWriteFeature0;
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      formatFeatureArray0[2] = (FormatFeature) jsonReadFeature1;
      JsonReadFeature jsonReadFeature2 = JsonReadFeature.ALLOW_MISSING_VALUES;
      formatFeatureArray0[3] = (FormatFeature) jsonReadFeature2;
      ObjectReader objectReader2 = objectReader1.withoutFeatures(formatFeatureArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, objectReader2);
      int int0 = treeTraversingParser0.getTextOffset();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.put("write raw value", true);
      ObjectNode objectNode2 = objectNode1._put("com.fasterxml.jackson.core.exc.StreamReadException", objectNode0);
      ObjectNode objectNode3 = objectNode2.put("", (short)24);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper2 = objectMapper1.copy();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[4];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonGenerator_FeatureArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      ObjectMapper objectMapper4 = objectMapper3.disable(deserializationFeature0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode3, objectMapper4);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((short)0);
      jsonNodeFactory0.numberNode((int) (short)0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(0.0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JsonNode jsonNode0 = null;
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      objectMapper0.findAndRegisterModules();
      TreeTraversingParser treeTraversingParser0 = null;
      try {
        treeTraversingParser0 = new TreeTraversingParser((JsonNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("-xOY0(CVNQ>g;O:'1&", true);
      ObjectNode objectNode2 = objectNode1.put("-xOY0(CVNQ>g;O:'1&", 0);
      RawValue rawValue0 = new RawValue(objectNode1);
      ObjectNode objectNode3 = objectNode2.putRawValue("", rawValue0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode3);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MissingNode missingNode0 = MissingNode.getInstance();
      JsonNode jsonNode0 = missingNode0.deepCopy();
      missingNode0.isPojo();
      missingNode0.isNull();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0);
      treeTraversingParser0.skipChildren();
      try { 
        treeTraversingParser0.getByteValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (NOT_AVAILABLE) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1030);
      RawValue rawValue0 = new RawValue((SerializableString) null);
      ValueNode valueNode0 = arrayNode0.rawValueNode(rawValue0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.currentNode();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte)114;
      jsonNodeFactory0.binaryNode(byteArray0);
      treeTraversingParser0.overrideCurrentName("`oi");
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ShortNode shortNode0 = new ShortNode((short)3879);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      treeTraversingParser0.isClosed();
      treeTraversingParser0.hasTextCharacters();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
      Stack<Module> stack0 = new Stack<Module>();
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<? extends Module>) stack0);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      objectMapper2.reader(deserializationFeature1);
      // Undeclared exception!
      try { 
        JsonReadFeature.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.core.json.JsonReadFeature.
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
