/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 21:08:04 GMT 2020
 */

package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonStreamContext;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RawValue;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TreeTraversingParser_ESTest extends TreeTraversingParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(58.7547);
      JsonParser jsonParser0 = doubleNode0.traverse();
      jsonParser0.nextFieldName();
      jsonParser0.skipChildren();
      assertEquals(8, jsonParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(0.0);
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)doubleNode0.traverse();
      treeTraversingParser0.nextValue();
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextTextValue();
      assertTrue(treeTraversingParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(58.7547);
      JsonParser jsonParser0 = doubleNode0.traverse();
      jsonParser0.overrideStdFeatures(1786, 1786);
      JsonParser jsonParser1 = jsonParser0.skipChildren();
      assertEquals(0, jsonParser1.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.overrideStdFeatures((-422), (-422));
      JsonParser jsonParser0 = treeTraversingParser0.skipChildren();
      assertEquals(0, jsonParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0, objectMapper0);
      JsonToken jsonToken0 = treeTraversingParser0.nextToken();
      assertFalse(jsonToken0.isStructEnd());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(0.0);
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)doubleNode0.traverse();
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextToken();
      assertEquals(4, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0, objectMapper0);
      JsonToken jsonToken0 = treeTraversingParser0.nextToken();
      assertFalse(jsonToken0.isNumeric());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      POJONode pOJONode0 = new POJONode(jsonNodeFactory0);
      JsonNode jsonNode0 = pOJONode0.path("G13]Q5tzb");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0, objectMapper0);
      JsonToken jsonToken0 = treeTraversingParser0.nextToken();
      assertFalse(jsonToken0.isNumeric());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(Double.NEGATIVE_INFINITY);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IntNode intNode0 = IntNode.valueOf(0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
      treeTraversingParser0.close();
      boolean boolean0 = treeTraversingParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.nextFieldName();
      int int0 = treeTraversingParser0.getTextLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.nextFieldName();
      String string0 = treeTraversingParser0.getText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IntNode intNode0 = IntNode.valueOf(0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
      treeTraversingParser0.close();
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertNull(jsonStreamContext0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertEquals(0, jsonStreamContext0.getCurrentIndex());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertNull(jsonStreamContext0.getCurrentName());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 125);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      ValueNode valueNode0 = arrayNode0.numberNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertNotSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-96);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0, objectMapper0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertEquals((byte) (-96), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Double double0 = new Double(0.0);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, (ObjectCodec) null);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(2);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(117);
      NumericNode numericNode0 = arrayNode0.numberNode((-1748.4F));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals((-1748L), long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Float float0 = new Float(0.0F);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(float0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode((-1.0));
      JsonParser jsonParser0 = doubleNode0.traverse();
      int int0 = jsonParser0.getIntValue();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FloatNode floatNode0 = new FloatNode(0.0F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(58.7547);
      JsonParser jsonParser0 = doubleNode0.traverse();
      float float0 = jsonParser0.getFloatValue();
      assertEquals(58.7547F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(2);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-1470));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals((-1470.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((byte)0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode((-1.0));
      JsonParser jsonParser0 = doubleNode0.traverse();
      BigDecimal bigDecimal0 = jsonParser0.getDecimalValue();
      assertEquals((short) (-1), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      Boolean boolean0 = Boolean.TRUE;
      ObjectNode objectNode1 = objectNode0.put(") not numeric, cannot use numeric value accessors", boolean0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode1);
      treeTraversingParser0.nextValue();
      treeTraversingParser0.nextTextValue();
      String string0 = treeTraversingParser0.getCurrentName();
      assertEquals(") not numeric, cannot use numeric value accessors", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0, objectMapper0);
      ObjectCodec objectCodec0 = treeTraversingParser0.getCodec();
      assertSame(objectMapper0, objectCodec0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      byte[] byteArray0 = new byte[6];
      BinaryNode binaryNode0 = arrayNode0.binaryNode(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0, objectMapper0);
      byte[] byteArray1 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      byte[] byteArray0 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(0.0F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(58.7547);
      JsonParser jsonParser0 = doubleNode0.traverse();
      BigInteger bigInteger0 = jsonParser0.getBigIntegerValue();
      assertEquals((byte)58, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((short)0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertSame(jsonNode0, numericNode0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-187L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertFalse(jsonNode0.isBigDecimal());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((byte)0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertTrue(jsonNode0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      Float float0 = new Float(958.0F);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(float0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertTrue(jsonNode0.canConvertToInt());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(58.7547);
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)doubleNode0.traverse();
      DoubleNode doubleNode1 = (DoubleNode)treeTraversingParser0.currentNumericNode();
      assertFalse(doubleNode1.booleanValue());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertFalse(jsonNode0.isObject());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertTrue(jsonNode0.isIntegralNumber());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Short short0 = new Short((short) (-116));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isObject());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode((-1.0));
      POJONode pOJONode0 = new POJONode(doubleNode0);
      JsonNode jsonNode0 = pOJONode0.path("");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0);
      JsonNode jsonNode1 = treeTraversingParser0.currentNode();
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode1.asToken());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(2);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertTrue(jsonNode0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Float float0 = new Float(0.0F);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(float0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.booleanValue());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Double double0 = new Double(0.0);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, (ObjectCodec) null);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isArray());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      BigInteger bigInteger0 = BigInteger.TEN;
      ValueNode valueNode0 = arrayNode0.numberNode(bigInteger0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(arrayNode0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, objectReader0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertEquals(JsonNodeType.NUMBER, jsonNode0.getNodeType());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 125);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      ValueNode valueNode0 = arrayNode0.numberNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isShort());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BooleanNode booleanNode0 = new BooleanNode(true);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertEquals(JsonToken.VALUE_TRUE, jsonNode0.asToken());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf((-2286L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.booleanValue());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      byte[] byteArray0 = new byte[9];
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode(byteArray0, (int) (byte)24, (int) (byte)0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      try { 
        treeTraversingParser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      try { 
        treeTraversingParser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_STRING) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      try { 
        treeTraversingParser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_STRING) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.close();
      try { 
        treeTraversingParser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      RawValue rawValue0 = new RawValue("Cannot override _serializer: had a %s, trying to set to %s");
      ValueNode valueNode0 = jsonNodeFactory0.rawValueNode(rawValue0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      try { 
        treeTraversingParser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(Double.NEGATIVE_INFINITY);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(2);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.close();
      try { 
        treeTraversingParser0.currentNumericNode();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<TextNode> class0 = TextNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TreeTraversingParser treeTraversingParser0 = null;
      try {
        treeTraversingParser0 = new TreeTraversingParser((JsonNode) null, objectReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TreeTraversingParser treeTraversingParser0 = null;
      try {
        treeTraversingParser0 = new TreeTraversingParser((JsonNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      byte[] byteArray0 = treeTraversingParser0.getBinaryValue();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(2);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      Float float0 = new Float(958.0F);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(float0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.nextFieldName();
      String string0 = treeTraversingParser0.getText();
      assertEquals("958.0", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      Float float0 = new Float(958.0F);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(float0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonLocation jsonLocation0 = treeTraversingParser0.getCurrentLocation();
      assertEquals((-1L), jsonLocation0.getByteOffset());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      byte[] byteArray0 = new byte[6];
      BinaryNode binaryNode0 = arrayNode0.binaryNode(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0, objectMapper0);
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      byte[] byteArray0 = new byte[3];
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((byte)2);
      int int0 = treeTraversingParser0.readBinaryValue((OutputStream) byteArrayBuilder0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(0.0F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2278);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 15);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      int int0 = treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) objectOutputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TextNode textNode0 = arrayNode0.textNode("com.fasterxml.jackson.databind.deser.DeserializerCache");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.deser.DeserializerCache");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      // Undeclared exception!
      try { 
        treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(59.0329744710693);
      JsonParser jsonParser0 = doubleNode0.traverse();
      jsonParser0.close();
      byte[] byteArray0 = jsonParser0.getBinaryValue((Base64Variant) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Float float0 = new Float(0.0F);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(float0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(valueNode0);
      JsonParser jsonParser0 = valueNode0.traverse((ObjectCodec) objectReader0);
      jsonParser0.nextFieldName();
      jsonParser0.nextToken();
      boolean boolean0 = jsonParser0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(2);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.close();
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      BinaryNode binaryNode0 = BinaryNode.valueOf(byteArray0);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0, objectMapper0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertSame(byteArray0, object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      RawValue rawValue0 = new RawValue("com.fasterxml.jackson.databind.node.TreeTraversingParser");
      ValueNode valueNode0 = jsonNodeFactory0.rawValueNode(rawValue0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertSame(object0, rawValue0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(2);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextToken();
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(2);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(58.7547);
      JsonParser jsonParser0 = doubleNode0.traverse();
      jsonParser0.nextToken();
      jsonParser0.nextToken();
      jsonParser0.nextToken();
      jsonParser0.getEmbeddedObject();
      assertTrue(jsonParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf((-2286L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      JsonParser.NumberType jsonParser_NumberType0 = treeTraversingParser0.getNumberType();
      assertEquals(JsonParser.NumberType.LONG, jsonParser_NumberType0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode((-1.0));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      RawValue rawValue0 = new RawValue(doubleNode0);
      ValueNode valueNode0 = jsonNodeFactory0.rawValueNode(rawValue0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.nextFieldName();
      String string0 = treeTraversingParser0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      BinaryNode binaryNode0 = BinaryNode.valueOf(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextFieldName();
      String string0 = treeTraversingParser0.getText();
      assertEquals("AAAAAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Float float0 = new Float(0.0F);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(float0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.nextFieldName();
      int int0 = treeTraversingParser0.getTextLength();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(2);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.nextToken();
      char[] charArray0 = treeTraversingParser0.getTextCharacters();
      assertArrayEquals(new char[] {'2'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JavaType javaType0 = TypeFactory.unknownType();
      ObjectReader objectReader0 = objectMapper0.readerFor(javaType0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0, objectReader0);
      treeTraversingParser0.nextFieldName();
      char[] charArray0 = treeTraversingParser0.getTextCharacters();
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      Boolean boolean0 = Boolean.TRUE;
      ObjectNode objectNode1 = objectNode0.put(") not numeric, cannot use numeric value accessors", boolean0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode1);
      treeTraversingParser0.nextValue();
      treeTraversingParser0.nextTextValue();
      treeTraversingParser0.getText();
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode((-0.48455712980682686));
      JsonParser jsonParser0 = doubleNode0.traverse();
      jsonParser0.close();
      String string0 = jsonParser0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((double) (-1957));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.overrideCurrentName((String) null);
      assertNull(treeTraversingParser0.getLastClearedToken());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(2);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.nextToken();
      assertEquals(7, treeTraversingParser0.getCurrentTokenId());
      
      treeTraversingParser0.nextToken();
      treeTraversingParser0.overrideCurrentName("PUBLIC_ONLY");
      assertFalse(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.getCurrentName();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      treeTraversingParser0.nextValue();
      treeTraversingParser0.skipChildren();
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(0.0);
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)doubleNode0.traverse();
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextTextValue();
      treeTraversingParser0.getText();
      assertEquals(4, treeTraversingParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(59.0329744710693);
      JsonParser jsonParser0 = doubleNode0.traverse();
      jsonParser0.close();
      jsonParser0.close();
      assertTrue(jsonParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Float float0 = new Float(0.0F);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(float0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(2);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((short)2, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JavaType javaType0 = TypeFactory.unknownType();
      ObjectReader objectReader0 = objectMapper0.readerFor(javaType0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0, objectReader0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextCharacters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(2);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Short short0 = new Short((short) (-116));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonLocation jsonLocation0 = treeTraversingParser0.getTokenLocation();
      assertEquals((-1L), jsonLocation0.getCharOffset());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule((String) null, version0);
      POJONode pOJONode0 = new POJONode(simpleModule0);
      List<JsonNode> list0 = pOJONode0.findValues("43k]]al yl%:/");
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, list0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertEquals("Array", jsonStreamContext0.typeDesc());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      try { 
        treeTraversingParser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Short short0 = new Short((short) (-116));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((short) (-116), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IntNode intNode0 = IntNode.valueOf(0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
      boolean boolean0 = treeTraversingParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Float float0 = new Float(0.0F);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(float0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      int int0 = treeTraversingParser0.getTextOffset();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JavaType javaType0 = TypeFactory.unknownType();
      ObjectReader objectReader0 = objectMapper0.readerFor(javaType0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0, objectReader0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      boolean boolean0 = treeTraversingParser0.hasTextCharacters();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(2);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      ObjectCodec objectCodec0 = treeTraversingParser0.getCodec();
      assertNull(objectCodec0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0, objectMapper0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertSame(number0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Short short0 = new Short((short) (-116));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals((-116.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IntNode intNode0 = IntNode.valueOf(0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
      Version version0 = treeTraversingParser0.version();
      assertEquals("jackson-databind", version0.getArtifactId());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(2);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      treeTraversingParser0.setCodec(objectMapper0);
      assertFalse(treeTraversingParser0.requiresCustomCodec());
  }
}
