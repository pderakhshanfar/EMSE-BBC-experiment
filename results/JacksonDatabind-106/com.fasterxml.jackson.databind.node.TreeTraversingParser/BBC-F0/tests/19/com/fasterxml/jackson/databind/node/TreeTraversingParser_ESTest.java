/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 21:11:52 GMT 2020
 */

package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonStreamContext;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TreeTraversingParser_ESTest extends TreeTraversingParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(1542.2467F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      treeTraversingParser0.nextTextValue();
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextIntValue(2);
      assertEquals(JsonToken.END_ARRAY, treeTraversingParser0.currentToken());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      byte[] byteArray0 = new byte[4];
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      treeTraversingParser0.enable(jsonParser_Feature0);
      JsonParser jsonParser0 = treeTraversingParser0.skipChildren();
      assertFalse(jsonParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      JsonNode jsonNode0 = decimalNode0.findPath("");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0, (ObjectCodec) null);
      JsonToken jsonToken0 = treeTraversingParser0.nextToken();
      assertNull(jsonToken0.asString());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LongNode longNode0 = new LongNode(1402L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      treeTraversingParser0.close();
      boolean boolean0 = treeTraversingParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.nextToken();
      int int0 = treeTraversingParser0.getTextLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0, (ObjectCodec) null);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextToken();
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertNull(jsonStreamContext0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertFalse(jsonStreamContext0.hasCurrentIndex());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      Byte byte0 = Byte.valueOf((byte)55);
      ValueNode valueNode0 = arrayNode0.numberNode(byte0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertEquals("root", jsonStreamContext0.typeDesc());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, (ObjectCodec) null);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      BigInteger bigInteger0 = BigInteger.TEN;
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertEquals((byte)10, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((long) (byte)0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, (ObjectCodec) null);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-1L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, (ObjectCodec) null);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LongNode longNode0 = new LongNode(0L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LongNode longNode0 = new LongNode((-1169L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals((-1169), int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((long) (byte)0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, (ObjectCodec) null);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf((-1161L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals((-1161.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, (ObjectCodec) null);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((byte)100);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals(100.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((byte)118);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((short)118, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, (ObjectCodec) null);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LongNode longNode0 = new LongNode((-1161L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((byte)119, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LongNode longNode0 = new LongNode((-20L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((byte) (-20), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ValueNode valueNode0 = jsonNodeFactory0.numberNode((Long) null);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, objectMapper0);
      ObjectCodec objectCodec0 = treeTraversingParser0.getCodec();
      assertSame(objectCodec0, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LongNode longNode0 = new LongNode(1366L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      byte[] byteArray0 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigDecimal0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      deserializationFeatureArray0[8] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, objectReader0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((byte)1, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LongNode longNode0 = new LongNode((-1L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((short) (-1), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((short)195);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, objectMapper0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertTrue(jsonNode0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf((-1161L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertTrue(jsonNode0.canConvertToLong());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((byte)100);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertEquals(100L, jsonNode0.longValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      Double double0 = new Double((-376.1589498));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertTrue(jsonNode0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      BigInteger bigInteger0 = BigInteger.TEN;
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigInteger0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, objectMapper0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertFalse(jsonNode0.isObject());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertFalse(jsonNode0.isIntegralNumber());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 3);
      Float float0 = new Float(325.08038);
      ValueNode valueNode0 = arrayNode0.numberNode(float0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, (ObjectCodec) null);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertFalse(jsonNode0.isBigInteger());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ShortNode shortNode0 = new ShortNode((short) (-1000));
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)shortNode0.traverse();
      ShortNode shortNode1 = (ShortNode)treeTraversingParser0.currentNode();
      assertEquals(0, shortNode1.size());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MissingNode missingNode0 = new MissingNode();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0, objectMapper0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertSame(jsonNode0, missingNode0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((long) (byte)0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, (ObjectCodec) null);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertNull(jsonNode0.textValue());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((byte)4);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertTrue(jsonNode0.isInt());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(1677);
      Float float0 = new Float(943.1883012277);
      ValueNode valueNode0 = arrayNode0.numberNode(float0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, objectMapper0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isInt());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(3634.0733188537);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<POJONode> class0 = POJONode.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0, objectReader0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isObject());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, (ObjectCodec) null);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertTrue(jsonNode0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.valueOf(true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0, objectMapper0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertTrue(jsonNode0.asBoolean());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isInt());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(1542.2467F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      treeTraversingParser0.nextLongValue(3020L);
      treeTraversingParser0.nextTextValue();
      treeTraversingParser0._startContainer = true;
      // Undeclared exception!
      try { 
        treeTraversingParser0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, (ObjectCodec) null);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextValue();
      try { 
        treeTraversingParser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0, (ObjectCodec) null);
      try { 
        treeTraversingParser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf(1000000000L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      treeTraversingParser0.close();
      try { 
        treeTraversingParser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.valueOf(true);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      try { 
        treeTraversingParser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_TRUE) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((byte)0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.close();
      try { 
        treeTraversingParser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getBinaryValue((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.valueOf(true);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_TRUE) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TreeTraversingParser treeTraversingParser0 = null;
      try {
        treeTraversingParser0 = new TreeTraversingParser((JsonNode) null, (ObjectCodec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TreeTraversingParser treeTraversingParser0 = null;
      try {
        treeTraversingParser0 = new TreeTraversingParser((JsonNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      byte[] byteArray0 = new byte[0];
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      byte[] byteArray1 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertEquals("[", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LongNode longNode0 = new LongNode(0L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextNode textNode0 = TextNode.valueOf("");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.nextToken();
      long long0 = treeTraversingParser0.getValueAsLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, (ObjectCodec) null);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      BigInteger bigInteger0 = BigInteger.TEN;
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonLocation jsonLocation0 = treeTraversingParser0.getCurrentLocation();
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ShortNode shortNode0 = new ShortNode((short) (-1000));
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)shortNode0.traverse();
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextToken();
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Byte byte0 = new Byte((byte)0);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(byte0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.close();
      try { 
        treeTraversingParser0.currentNumericNode();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(262144);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      int int0 = treeTraversingParser0.readBinaryValue((OutputStream) pipedOutputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      int int0 = treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g.X", true);
      // Undeclared exception!
      try { 
        treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      byte[] byteArray0 = treeTraversingParser0.getBinaryValue();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, (ObjectCodec) null);
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<DecimalNode> class0 = DecimalNode.class;
      Class<BigIntegerNode> class1 = BigIntegerNode.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class1, javaTypeArray0);
      Class<LongNode> class2 = LongNode.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(collectionType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonNode jsonNode0 = beanSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) resolvedRecursiveType0, true);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0);
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LongNode longNode0 = new LongNode(1402L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      treeTraversingParser0.close();
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      byte[] byteArray0 = new byte[4];
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0, (ObjectCodec) null);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertSame(byteArray0, object0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      ValueNode valueNode0 = arrayNode0.pojoNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertSame(object0, jsonNodeFactory0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LongNode longNode0 = new LongNode((-1L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      treeTraversingParser0.close();
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(1542.2467F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      JsonParser.NumberType jsonParser_NumberType0 = treeTraversingParser0.getNumberType();
      assertEquals(JsonParser.NumberType.FLOAT, jsonParser_NumberType0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      byte[] byteArray0 = new byte[0];
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextNode textNode0 = new TextNode("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter");
      POJONode pOJONode0 = new POJONode(textNode0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(959L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.nextToken();
      int int0 = treeTraversingParser0.getTextLength();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.nextToken();
      char[] charArray0 = treeTraversingParser0.getTextCharacters();
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(1542.2467F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      treeTraversingParser0.nextIntValue((-1637));
      char[] charArray0 = treeTraversingParser0.getTextCharacters();
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      treeTraversingParser0._nextToken = jsonToken0;
      treeTraversingParser0.nextToken();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((long) (byte)0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, (ObjectCodec) null);
      treeTraversingParser0.overrideCurrentName(") not numeric, cannot use numeric value accessors");
      assertFalse(treeTraversingParser0.canParseAsync());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.overrideCurrentName("");
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.valueOf(false);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      treeTraversingParser0.nextToken();
      assertEquals(10, treeTraversingParser0.getCurrentTokenId());
      
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getCurrentName();
      assertFalse(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<DecimalNode> class0 = DecimalNode.class;
      Class<BigIntegerNode> class1 = BigIntegerNode.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class1, javaTypeArray0);
      Class<LongNode> class2 = LongNode.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(collectionType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonNode jsonNode0 = beanSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) resolvedRecursiveType0, true);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0);
      String string0 = treeTraversingParser0.getCurrentName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.skipChildren();
      assertEquals(4, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0, objectMapper0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.skipChildren();
      assertEquals(2, treeTraversingParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Byte byte0 = new Byte((byte)0);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(byte0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.close();
      String string0 = treeTraversingParser0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IntNode intNode0 = IntNode.valueOf(1242);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.nextValue();
      treeTraversingParser0.nextToken();
      treeTraversingParser0.close();
      assertEquals(0, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<DecimalNode> class0 = DecimalNode.class;
      Class<BigIntegerNode> class1 = BigIntegerNode.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class1, javaTypeArray0);
      Class<LongNode> class2 = LongNode.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(collectionType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonNode jsonNode0 = beanSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) resolvedRecursiveType0, true);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0);
      treeTraversingParser0.nextIntValue((-2228));
      treeTraversingParser0.nextValue();
      treeTraversingParser0.getCurrentName();
      assertEquals(JsonToken.VALUE_STRING, treeTraversingParser0.currentToken());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(1542.2467F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals(1542L, long0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_STRING) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextCharacters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(1542.2467F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals(1542, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      BigInteger bigInteger0 = BigInteger.TEN;
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonLocation jsonLocation0 = treeTraversingParser0.getTokenLocation();
      assertEquals((-1L), jsonLocation0.getByteOffset());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(3634.0733188537);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<POJONode> class0 = POJONode.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0, objectReader0);
      // Undeclared exception!
      try { 
        treeTraversingParser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 2999);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertFalse(jsonStreamContext0.hasCurrentIndex());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, (ObjectCodec) null);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((long) (byte)0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, (ObjectCodec) null);
      boolean boolean0 = treeTraversingParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(1542.2467F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      int int0 = treeTraversingParser0.getTextOffset();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(1542.2467F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      boolean boolean0 = treeTraversingParser0.hasTextCharacters();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(1542.2467F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      ObjectCodec objectCodec0 = treeTraversingParser0.getCodec();
      assertNull(objectCodec0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 2999);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      try { 
        treeTraversingParser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(1542.2467F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals(1542.2467F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(1542.2467F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      Version version0 = treeTraversingParser0.version();
      assertEquals("jackson-databind", version0.getArtifactId());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((byte)100);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      treeTraversingParser0.setCodec(objectMapper0);
      assertFalse(treeTraversingParser0.hasTextCharacters());
  }
}
