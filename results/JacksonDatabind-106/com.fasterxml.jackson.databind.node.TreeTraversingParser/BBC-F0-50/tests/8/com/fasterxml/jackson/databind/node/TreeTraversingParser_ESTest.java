/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:23:40 GMT 2021
 */

package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonStreamContext;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.util.RawValue;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TreeTraversingParser_ESTest extends TreeTraversingParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.FALSE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      treeTraversingParser0.nextFieldName((SerializableString) null);
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextTextValue();
      assertEquals(JsonToken.END_ARRAY, treeTraversingParser0.currentToken());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      treeTraversingParser0.enable(jsonParser_Feature0);
      JsonParser jsonParser0 = treeTraversingParser0.skipChildren();
      assertEquals(0, jsonParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ShortNode shortNode0 = ShortNode.valueOf((short) (-781));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      treeTraversingParser0.overrideStdFeatures((short) (-781), (short) (-781));
      JsonParser jsonParser0 = treeTraversingParser0.skipChildren();
      assertEquals(0, jsonParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      treeTraversingParser0.nextFieldName((SerializableString) serializedString0);
      treeTraversingParser0.nextToken();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MissingNode missingNode0 = new MissingNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      JsonToken jsonToken0 = treeTraversingParser0.nextToken();
      assertEquals(JsonToken.NOT_AVAILABLE, jsonToken0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.close();
      boolean boolean0 = treeTraversingParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      treeTraversingParser0.nextToken();
      int int0 = treeTraversingParser0.getTextLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.nextToken();
      char[] charArray0 = treeTraversingParser0.getTextCharacters();
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      POJONode pOJONode0 = new POJONode("");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      treeTraversingParser0.nextFieldName((SerializableString) serializedString0);
      String string0 = treeTraversingParser0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      RawValue rawValue0 = new RawValue(arrayNode0);
      ValueNode valueNode0 = arrayNode0.rawValueNode(rawValue0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextTextValue();
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertNull(jsonStreamContext0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertTrue(jsonStreamContext0.inObject());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ArrayNode arrayNode0 = objectNode0.putArray("");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, (ObjectCodec) null);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertEquals(0, jsonStreamContext0.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertSame(bigInteger0, number0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertEquals((byte)10, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-86);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertEquals((short)170, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0);
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(1);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0, (ObjectCodec) null);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      BigInteger bigInteger0 = BigInteger.TEN;
      ValueNode valueNode0 = arrayNode0.numberNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, objectMapper0);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0, (ObjectCodec) null);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf((-41.50478F));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0, (ObjectCodec) null);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals((-41.50478F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0, (ObjectCodec) null);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals(10.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IntNode intNode0 = new IntNode((-174));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals((-174.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      BigDecimal bigDecimal1 = treeTraversingParser0.getDecimalValue();
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      IntNode intNode0 = new IntNode((-1288));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((short) (-1288), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      treeTraversingParser0.overrideCurrentName("Current token (");
      String string0 = treeTraversingParser0.getCurrentName();
      assertEquals("Current token (", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      BigInteger bigInteger0 = BigInteger.TEN;
      ValueNode valueNode0 = arrayNode0.numberNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, objectMapper0);
      ObjectCodec objectCodec0 = treeTraversingParser0.getCodec();
      assertSame(objectMapper0, objectCodec0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(38);
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((byte)38, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IntNode intNode0 = new IntNode((-1288));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((short) (-1288), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      Short short0 = new Short((short) (-1));
      ValueNode valueNode0 = arrayNode0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, objectMapper0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertFalse(jsonNode0.booleanValue());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf((-3173L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertEquals((-3173), jsonNode0.intValue());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IntNode intNode0 = new IntNode((-1288));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertEquals((short) (-1288), jsonNode0.shortValue());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FloatNode floatNode0 = new FloatNode(0.0F);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<TextNode> class0 = TextNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0, objectReader0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertTrue(jsonNode0.canConvertToInt());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertFalse(jsonNode0.isObject());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertFalse(jsonNode0.isIntegralNumber());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf((-1.0));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertEquals((-1.0), jsonNode0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      Short short0 = new Short((short)9);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isObject());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MissingNode missingNode0 = new MissingNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertSame(missingNode0, jsonNode0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf(4085L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonNode0.asToken());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IntNode intNode0 = new IntNode((-174));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertSame(jsonNode0, intNode0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf((-41.50478F));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0, (ObjectCodec) null);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertTrue(jsonNode0.canConvertToLong());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf((-1.0));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isShort());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isFloat());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, jsonNode0.numberType());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isFloat());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 198);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      arrayNode0.insertArray((-494));
      treeTraversingParser0.nextValue();
      // Undeclared exception!
      try { 
        treeTraversingParser0.nextToken();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      treeTraversingParser0.nextValue();
      treeTraversingParser0.nextLongValue(0L);
      treeTraversingParser0._startContainer = true;
      // Undeclared exception!
      try { 
        treeTraversingParser0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0, (ObjectCodec) null);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      try { 
        treeTraversingParser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getLongValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      TextNode textNode0 = jsonNodeFactory0.textNode("");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      try { 
        treeTraversingParser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_STRING) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DecimalNode decimalNode0 = new DecimalNode((BigDecimal) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getIntValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      try { 
        treeTraversingParser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_STRING) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0, (ObjectCodec) null);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getFloatValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.BigIntegerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FloatNode floatNode0 = new FloatNode((-41.50478F));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0, (ObjectCodec) null);
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.nextTextValue();
      try { 
        treeTraversingParser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode((BigInteger) null);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0, objectMapper0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getDoubleValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.BigIntegerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      BigInteger bigInteger0 = BigInteger.TEN;
      ValueNode valueNode0 = arrayNode0.numberNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, objectMapper0);
      treeTraversingParser0.close();
      try { 
        treeTraversingParser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_TRUE) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1028);
      ObjectNode objectNode0 = arrayNode0.insertObject(1028);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0, (ObjectCodec) null);
      try { 
        treeTraversingParser0.currentNumericNode();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TreeTraversingParser treeTraversingParser0 = null;
      try {
        treeTraversingParser0 = new TreeTraversingParser((JsonNode) null, (ObjectCodec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TreeTraversingParser treeTraversingParser0 = null;
      try {
        treeTraversingParser0 = new TreeTraversingParser((JsonNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getBinaryValue((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getValueAsString();
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IntNode intNode0 = new IntNode((-174));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      treeTraversingParser0.nextFieldName((SerializableString) serializedString0);
      String string0 = treeTraversingParser0.getText();
      assertEquals("-174", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      Short short0 = new Short((short)9);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonLocation jsonLocation0 = treeTraversingParser0.getCurrentLocation();
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0._closed = true;
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      byte[] byteArray0 = new byte[7];
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode(byteArray0, 2, (int) (byte)1);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("8|x!R3U~1tu");
      int int0 = treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) mockPrintStream0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 198);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) pipedOutputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      byte[] byteArray0 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      byte[] byteArray0 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(Float.NEGATIVE_INFINITY);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0, (ObjectCodec) null);
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      treeTraversingParser0.close();
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertTrue(treeTraversingParser0.isClosed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      byte[] byteArray0 = new byte[0];
      BinaryNode binaryNode0 = arrayNode0.binaryNode(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNotSame(byteArray0, object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf((-1.0));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ArrayNode arrayNode0 = objectNode0.putArray("");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, (ObjectCodec) null);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      RawValue rawValue0 = new RawValue(textNode0);
      ValueNode valueNode0 = arrayNode0.rawValueNode(rawValue0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertSame(rawValue0, object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.getEmbeddedObject();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.put("HHBe(Y", (double) 0.0F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode1);
      treeTraversingParser0.nextLongValue((-778L));
      treeTraversingParser0.nextToken();
      JsonParser.NumberType jsonParser_NumberType0 = treeTraversingParser0.getNumberType();
      assertEquals(JsonParser.NumberType.DOUBLE, jsonParser_NumberType0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      BinaryNode binaryNode0 = new BinaryNode(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getValueAsString();
      assertEquals("AAAAAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      RawValue rawValue0 = new RawValue(arrayNode0);
      ValueNode valueNode0 = arrayNode0.rawValueNode(rawValue0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.nextValue();
      treeTraversingParser0._nodeCursor = null;
      String string0 = treeTraversingParser0.getValueAsString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(Float.NEGATIVE_INFINITY);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0, (ObjectCodec) null);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertEquals("-Infinity", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      Short short0 = new Short((short)9);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.nextValue();
      char[] charArray0 = treeTraversingParser0.getTextCharacters();
      assertArrayEquals(new char[] {'9'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.nextTextValue();
      int int0 = treeTraversingParser0.getTextLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.put("HHBe(Y", (double) 0.0F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode1);
      treeTraversingParser0.nextLongValue((-778L));
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getText();
      assertEquals(5, treeTraversingParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0._closed = true;
      treeTraversingParser0.nextTextValue();
      assertTrue(treeTraversingParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextToken();
      treeTraversingParser0.overrideCurrentName(": (");
      assertTrue(treeTraversingParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      treeTraversingParser0.nextFieldName((SerializableString) serializedString0);
      treeTraversingParser0.nextFieldName(jsonFactory0.DEFAULT_ROOT_VALUE_SEPARATOR);
      treeTraversingParser0.getCurrentName();
      assertTrue(treeTraversingParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, objectReader0);
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.skipChildren();
      assertEquals(4, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.skipChildren();
      assertEquals(2, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectNode objectNode0 = arrayNode0.objectNode();
      ObjectNode objectNode1 = objectNode0._put("6uE5#]F?=;4", arrayNode0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode1, objectMapper0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextTextValue();
      treeTraversingParser0.nextTextValue();
      assertEquals(JsonToken.START_ARRAY, treeTraversingParser0.currentToken());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      treeTraversingParser0.nextFieldName((SerializableString) serializedString0);
      treeTraversingParser0.nextFieldName(jsonFactory0.DEFAULT_ROOT_VALUE_SEPARATOR);
      treeTraversingParser0.nextFieldName(jsonFactory0.DEFAULT_ROOT_VALUE_SEPARATOR);
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      BigInteger bigInteger0 = BigInteger.TEN;
      ValueNode valueNode0 = arrayNode0.numberNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, objectMapper0);
      treeTraversingParser0.close();
      treeTraversingParser0.close();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IntNode intNode0 = new IntNode((-174));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals((-174L), long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      Short short0 = new Short((short)9);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((byte)9, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      RawValue rawValue0 = new RawValue(arrayNode0);
      ValueNode valueNode0 = arrayNode0.rawValueNode(rawValue0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextCharacters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf((-1.0));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      JsonLocation jsonLocation0 = treeTraversingParser0.getTokenLocation();
      assertEquals((-1L), jsonLocation0.getCharOffset());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectNode objectNode0 = arrayNode0.objectNode();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0, objectMapper0);
      // Undeclared exception!
      try { 
        treeTraversingParser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      Short short0 = new Short((short)9);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertFalse(jsonStreamContext0.hasCurrentIndex());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IntNode intNode0 = new IntNode((-1288));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
      boolean boolean0 = treeTraversingParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      int int0 = treeTraversingParser0.getTextOffset();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      Short short0 = new Short((short)9);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      boolean boolean0 = treeTraversingParser0.hasTextCharacters();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      ObjectCodec objectCodec0 = treeTraversingParser0.getCodec();
      assertNull(objectCodec0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      Short short0 = new Short((short)9);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals(9.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      Short short0 = new Short((short)9);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      Version version0 = treeTraversingParser0.version();
      assertEquals(2, version0.getMajorVersion());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(293.842F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0, (ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      treeTraversingParser0.setCodec(objectMapper0);
      assertEquals(0, treeTraversingParser0.currentTokenId());
  }
}
