/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 01:08:19 GMT 2021
 */

package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonStreamContext;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.NodeCursor;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TreeTraversingParser_ESTest extends TreeTraversingParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NullNode nullNode0 = NullNode.getInstance();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.nextTextValue();
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextFieldName();
      assertEquals(4, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      Short short0 = new Short((short)0);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      treeTraversingParser0.setCodec(objectMapper0);
      assertFalse(treeTraversingParser0.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      byte[] byteArray0 = new byte[2];
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0, (ObjectCodec) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedOutputStream0.connect(pipedInputStream0);
      int int0 = treeTraversingParser0.readBinaryValue((OutputStream) pipedOutputStream0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-9223372036854775808L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      treeTraversingParser0.configure(jsonParser_Feature0, true);
      JsonParser jsonParser0 = treeTraversingParser0.skipChildren();
      assertFalse(jsonParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.overrideStdFeatures((-336), (-336));
      JsonParser jsonParser0 = treeTraversingParser0.skipChildren();
      assertEquals(0, jsonParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LongNode longNode0 = new LongNode((-16L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      File file0 = MockFile.createTempFile("A%8sr5", "A%8sr5", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      int int0 = treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) mockFileOutputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      Short short0 = new Short((short)0);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.nextToken();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.FALSE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      JsonToken jsonToken0 = treeTraversingParser0.nextToken();
      assertFalse(jsonToken0.isStructStart());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LongNode longNode0 = new LongNode(427L);
      POJONode pOJONode0 = new POJONode(longNode0);
      JsonNode jsonNode0 = pOJONode0.path(618);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0);
      JsonToken jsonToken0 = treeTraversingParser0.nextToken();
      assertFalse(jsonToken0.isScalarValue());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      Double double0 = new Double((-573.73006357284));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.close();
      boolean boolean0 = treeTraversingParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0, (ObjectCodec) null);
      treeTraversingParser0.nextTextValue();
      int int0 = treeTraversingParser0.getTextLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode((-1.0));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      treeTraversingParser0.nextFieldName();
      int int0 = treeTraversingParser0.getTextLength();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TextNode textNode0 = TextNode.valueOf("");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.nextFieldName();
      String string0 = treeTraversingParser0.getText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      Double double0 = new Double((-573.73006357284));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.close();
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertNull(jsonStreamContext0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(3);
      ObjectNode objectNode0 = arrayNode0.addObject();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertNull(jsonStreamContext0.getCurrentName());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertTrue(jsonStreamContext0.inArray());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-41);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertSame(bigInteger0, number0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, (ObjectCodec) null);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)85;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertSame(bigInteger0, number0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      BigDecimal bigDecimal0 = new BigDecimal(708L);
      ValueNode valueNode0 = arrayNode0.numberNode(bigDecimal0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, objectMapper0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertNotSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      Short short0 = new Short((short)0);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-1074.8F));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals((-1074L), long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      Short short0 = new Short((short)0);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((byte)35);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, (ObjectCodec) null);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals(35, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-1074.8F));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals((-1074), int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LongNode longNode0 = new LongNode(0L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      Stack<JsonNode> stack0 = new Stack<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, stack0);
      Short short0 = new Short((short)93);
      ValueNode valueNode0 = arrayNode0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, (ObjectCodec) null);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals(93.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FloatNode floatNode0 = new FloatNode((-1074.8F));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals((-1074.8F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(0.0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ShortNode shortNode0 = new ShortNode((short)4);
      BigInteger bigInteger0 = shortNode0.bigIntegerValue();
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals(4.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(77.5);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0, (ObjectCodec) null);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((byte)77, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf((-1308.8226F));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((short) (-1308), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonNode jsonNode0 = coreXMLSerializers_XMLGregorianCalendarSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0);
      treeTraversingParser0.nextValue();
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getCurrentName();
      assertEquals("type", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      NullNode nullNode0 = NullNode.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0, objectMapper0);
      ObjectCodec objectCodec0 = treeTraversingParser0.getCodec();
      assertSame(objectCodec0, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ArrayNode arrayNode0 = objectNode0.putArray("-G,sk@(b]V");
      byte[] byteArray0 = new byte[9];
      BinaryNode binaryNode0 = arrayNode0.binaryNode(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0, (ObjectCodec) null);
      byte[] byteArray1 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      Stack<JsonNode> stack0 = new Stack<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, stack0);
      Short short0 = new Short((short)93);
      ValueNode valueNode0 = arrayNode0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, (ObjectCodec) null);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((short)93, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FloatNode floatNode0 = new FloatNode((-1074.8F));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((short) (-1074), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LongNode longNode0 = new LongNode((-15L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertEquals(JsonParser.NumberType.LONG, jsonNode0.numberType());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-146));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertNull(jsonNode0.textValue());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf((-1308.8226F));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      FloatNode floatNode1 = (FloatNode)treeTraversingParser0.currentNumericNode();
      assertFalse(floatNode1.isNaN());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(3086.621534809285);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertFalse(jsonNode0.isObject());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigInteger0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, objectMapper0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertTrue(jsonNode0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      Short short0 = new Short((short)926);
      ValueNode valueNode0 = arrayNode0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertEquals(926, jsonNode0.intValue());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertFalse(jsonNode0.isMissingNode());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      Short short0 = new Short((short)0);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isMissingNode());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      POJONode pOJONode0 = new POJONode(binaryNode0);
      JsonNode jsonNode0 = pOJONode0.path(0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0);
      JsonNode jsonNode1 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode1.isBigDecimal());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf((-1L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonNode0.asToken());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      POJONode pOJONode0 = new POJONode(jsonNodeFactory0);
      List<JsonNode> list0 = pOJONode0.findValues("~|NdfqziK$t+,){");
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, list0);
      NumericNode numericNode0 = arrayNode0.numberNode(30);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isBigDecimal());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-1074.8F));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isArray());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ArrayNode arrayNode0 = objectNode0.putArray("npc,");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      ValueNode valueNode0 = arrayNode0.numberNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      NodeCursor.RootCursor nodeCursor_RootCursor0 = (NodeCursor.RootCursor)treeTraversingParser0._nodeCursor;
      NodeCursor.ArrayCursor nodeCursor_ArrayCursor0 = new NodeCursor.ArrayCursor(objectNode0, nodeCursor_RootCursor0);
      NodeCursor.ObjectCursor nodeCursor_ObjectCursor0 = new NodeCursor.ObjectCursor(objectNode0, nodeCursor_ArrayCursor0);
      NodeCursor.RootCursor nodeCursor_RootCursor1 = new NodeCursor.RootCursor(objectNode0, nodeCursor_ObjectCursor0);
      treeTraversingParser0._nodeCursor = (NodeCursor) nodeCursor_RootCursor1;
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isShort());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(77.5);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0, (ObjectCodec) null);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertNull(jsonNode0.textValue());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertNull(jsonNode0.textValue());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BooleanNode booleanNode0 = new BooleanNode(true);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertEquals(0, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertEquals(0, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      TextNode textNode0 = jsonNodeFactory0.textNode("com.fasterxml.jackson.databind.introspect.AnnotationCollector$OneCollector");
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0, objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-1525));
      // Undeclared exception!
      try { 
        treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) byteArrayBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NullNode nullNode0 = NullNode.getInstance();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.close();
      treeTraversingParser0._startContainer = true;
      // Undeclared exception!
      try { 
        treeTraversingParser0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      POJONode pOJONode0 = new POJONode(jsonNodeFactory0);
      List<JsonNode> list0 = pOJONode0.findValues("~|NdfqziK$t+,){");
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, list0);
      NumericNode numericNode0 = arrayNode0.numberNode(30);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0, objectMapper0);
      try { 
        treeTraversingParser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_NULL) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getLongValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.BigIntegerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode((BigInteger) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0, objectMapper0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getIntValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.BigIntegerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0, (ObjectCodec) null);
      try { 
        treeTraversingParser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getDoubleValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.FALSE;
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0, objectMapper0);
      try { 
        treeTraversingParser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_FALSE) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(Double.POSITIVE_INFINITY);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(Double.POSITIVE_INFINITY);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DecimalNode decimalNode0 = new DecimalNode((BigDecimal) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, (ObjectCodec) null);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(0.0);
      POJONode pOJONode0 = new POJONode(doubleNode0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      Double double0 = new Double((-573.73006357284));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.close();
      try { 
        treeTraversingParser0.currentNumericNode();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = null;
      try {
        treeTraversingParser0 = new TreeTraversingParser((JsonNode) null, objectMapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TreeTraversingParser treeTraversingParser0 = null;
      try {
        treeTraversingParser0 = new TreeTraversingParser((JsonNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      byte[] byteArray0 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      byte[] byteArray0 = new byte[1];
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0, (ObjectCodec) null);
      treeTraversingParser0.nextFieldName();
      String string0 = treeTraversingParser0.getText();
      assertEquals("AA==", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LongNode longNode0 = new LongNode((-15L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertEquals("-15", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      TextNode textNode0 = jsonNodeFactory0.textNode("");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      try { 
        treeTraversingParser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_STRING) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((byte)35);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, (ObjectCodec) null);
      treeTraversingParser0.close();
      try { 
        treeTraversingParser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonNode jsonNode0 = coreXMLSerializers_XMLGregorianCalendarSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0);
      treeTraversingParser0.nextValue();
      treeTraversingParser0.nextToken();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getBinaryValue((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ArrayNode arrayNode0 = objectNode0.putArray((String) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      byte[] byteArray0 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(Double.POSITIVE_INFINITY);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NullNode nullNode0 = NullNode.getInstance();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.close();
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0, (ObjectCodec) null);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertSame(byteArray0, object0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      POJONode pOJONode0 = new POJONode(contextAttributes0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertSame(contextAttributes0, object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      Short short0 = new Short((short)0);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NullNode nullNode0 = NullNode.getInstance();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.close();
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-9223372036854775808L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonParser.NumberType jsonParser_NumberType0 = treeTraversingParser0.getNumberType();
      assertEquals(JsonParser.NumberType.LONG, jsonParser_NumberType0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NullNode nullNode0 = NullNode.instance;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      treeTraversingParser0._nextToken = jsonToken0;
      treeTraversingParser0.nextFieldName();
      String string0 = treeTraversingParser0.getValueAsString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.nextValue();
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      treeTraversingParser0.nextLongValue(235L);
      treeTraversingParser0._nextToken = jsonToken0;
      treeTraversingParser0.nextFieldName();
      String string0 = treeTraversingParser0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NullNode nullNode0 = NullNode.instance;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.nextFieldName();
      String string0 = treeTraversingParser0.getText();
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ArrayNode arrayNode0 = objectNode0.putArray("npc,");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      ValueNode valueNode0 = arrayNode0.numberNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertEquals("1E+1", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-9223372036854775808L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.nextBooleanValue();
      char[] charArray0 = treeTraversingParser0.getTextCharacters();
      assertEquals(20, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextBooleanValue();
      char[] charArray0 = treeTraversingParser0.getTextCharacters();
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NullNode nullNode0 = NullNode.instance;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      treeTraversingParser0._nextToken = jsonToken0;
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.getText();
      assertEquals(5, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(0.0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      treeTraversingParser0.close();
      String string0 = treeTraversingParser0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf((-1L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      treeTraversingParser0.overrideCurrentName("UkH*Lbn0\"y|uy");
      assertFalse(treeTraversingParser0.canParseAsync());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NullNode nullNode0 = NullNode.getInstance();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.overrideCurrentName("Zy,#e7fM");
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      NullNode nullNode0 = NullNode.instance;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.currentName();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.skipChildren();
      assertEquals(4, treeTraversingParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectNode objectNode0 = arrayNode0.objectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.skipChildren();
      assertEquals(2, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(0.0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.nextFieldName();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NullNode nullNode0 = NullNode.getInstance();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextToken();
      assertEquals(4, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      Double double0 = new Double((-573.73006357284));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.close();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonNode jsonNode0 = coreXMLSerializers_XMLGregorianCalendarSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0);
      String string0 = treeTraversingParser0.getCurrentName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      LinkedList<JsonNode> linkedList0 = new LinkedList<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, linkedList0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      try { 
        treeTraversingParser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf((-1.0));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ArrayNode arrayNode0 = objectNode0.putArray("npc,");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      ValueNode valueNode0 = arrayNode0.numberNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-9223372036854775808L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ArrayNode arrayNode0 = objectNode0.putArray("npc,");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      ValueNode valueNode0 = arrayNode0.numberNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextCharacters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      Stack<JsonNode> stack0 = new Stack<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, stack0);
      Short short0 = new Short((short)93);
      ValueNode valueNode0 = arrayNode0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, (ObjectCodec) null);
      JsonLocation jsonLocation0 = treeTraversingParser0.getTokenLocation();
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ArrayNode arrayNode0 = objectNode0.putArray("npc,");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      ValueNode valueNode0 = arrayNode0.numberNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertEquals("root", jsonStreamContext0.typeDesc());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ArrayNode arrayNode0 = objectNode0.putArray("npc,");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      ValueNode valueNode0 = arrayNode0.numberNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonLocation jsonLocation0 = treeTraversingParser0.getCurrentLocation();
      assertEquals((-1), jsonLocation0.getLineNr());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-9223372036854775808L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf((-1L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      boolean boolean0 = treeTraversingParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(Double.POSITIVE_INFINITY);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      int int0 = treeTraversingParser0.getTextOffset();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ArrayNode arrayNode0 = objectNode0.putArray("npc,");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      ValueNode valueNode0 = arrayNode0.numberNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      boolean boolean0 = treeTraversingParser0.hasTextCharacters();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NullNode nullNode0 = NullNode.instance;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      ObjectCodec objectCodec0 = treeTraversingParser0.getCodec();
      assertNull(objectCodec0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getFloatValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.BigIntegerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-9223372036854775808L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      Version version0 = treeTraversingParser0.version();
      assertFalse(version0.isUknownVersion());
  }
}
