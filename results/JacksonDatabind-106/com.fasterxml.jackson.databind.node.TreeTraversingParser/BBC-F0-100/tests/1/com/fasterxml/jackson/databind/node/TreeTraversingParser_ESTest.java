/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 19:31:57 GMT 2021
 */

package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonStreamContext;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NodeCursor;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.util.RawValue;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TreeTraversingParser_ESTest extends TreeTraversingParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(0.0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      treeTraversingParser0.setCodec(objectMapper0);
      assertFalse(treeTraversingParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = treeTraversingParser0.readBinaryValue((OutputStream) byteArrayOutputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.overrideStdFeatures(2033, 2033);
      JsonParser jsonParser0 = treeTraversingParser0.skipChildren();
      assertFalse(jsonParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ValueNode valueNode0 = jsonNodeFactory0.rawValueNode((RawValue) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.overrideStdFeatures((-119), (-119));
      JsonParser jsonParser0 = treeTraversingParser0.skipChildren();
      assertEquals(0, jsonParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      NumericNode numericNode0 = arrayNode0.numberNode(0.0F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      int int0 = treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) mockPrintStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MissingNode missingNode0 = new MissingNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextToken();
      assertEquals(4, treeTraversingParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.valueOf(true);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      JsonToken jsonToken0 = treeTraversingParser0.nextToken();
      assertEquals("true", jsonToken0.asString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MissingNode missingNode0 = new MissingNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      JsonToken jsonToken0 = treeTraversingParser0.nextToken();
      assertFalse(jsonToken0.isNumeric());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(Float.NEGATIVE_INFINITY);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MissingNode missingNode0 = MissingNode.getInstance();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      treeTraversingParser0._closed = true;
      boolean boolean0 = treeTraversingParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextBooleanValue();
      int int0 = treeTraversingParser0.getTextLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.nextBooleanValue();
      int int0 = treeTraversingParser0.getTextLength();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.nextBooleanValue();
      char[] charArray0 = treeTraversingParser0.getTextCharacters();
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      byte[] byteArray0 = new byte[1];
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 2319);
      BinaryNode binaryNode0 = arrayNode0.binaryNode(byteArray0, 0, 0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextBooleanValue();
      char[] charArray0 = treeTraversingParser0.getTextCharacters();
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ShortNode shortNode0 = ShortNode.valueOf((short) (-197));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0, (ObjectCodec) null);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextToken();
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertNull(jsonStreamContext0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertFalse(jsonStreamContext0.inRoot());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(4660);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertFalse(jsonStreamContext0.hasCurrentIndex());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, objectMapper0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf((-1.0F));
      BigInteger bigInteger0 = floatNode0.bigIntegerValue();
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertSame(number0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(0.0F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(4896.1226F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals(4896L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Integer integer0 = new Integer((-1637));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(integer0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals((-1637L), long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(0.0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(1968.5482F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals(1968, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(0.0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(1968.5482F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals(1968.5482F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ShortNode shortNode0 = ShortNode.valueOf((short) (-197));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0, (ObjectCodec) null);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals((-197.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      NumericNode numericNode0 = arrayNode0.numberNode((double) 0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ShortNode shortNode0 = ShortNode.valueOf((short) (-2));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals((-2.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, objectMapper0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(4896.1226F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((byte)32, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Integer integer0 = new Integer((-1637));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(integer0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((byte) (-101), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      POJONode pOJONode0 = new POJONode("com.fasterxml.jackson.databind.node.TreeTraversingParser");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
      ObjectCodec objectCodec0 = treeTraversingParser0.getCodec();
      assertNull(objectCodec0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(4896.1226F);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, objectMapper0);
      ObjectCodec objectCodec0 = treeTraversingParser0.getCodec();
      assertSame(objectCodec0, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(1890.5923195);
      POJONode pOJONode0 = new POJONode(doubleNode0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
      byte[] byteArray0 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ShortNode shortNode0 = new ShortNode((short) (-2));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((byte) (-2), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(0L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf(1402L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((short)1402, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ShortNode shortNode0 = ShortNode.valueOf((short)4);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertEquals(4L, jsonNode0.longValue());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf(1402L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertEquals(JsonParser.NumberType.LONG, jsonNode0.numberType());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Byte byte0 = new Byte((byte)21);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(byte0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, objectMapper0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertFalse(jsonNode0.isBigInteger());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(0.0F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      FloatNode floatNode0 = (FloatNode)treeTraversingParser0.currentNumericNode();
      assertFalse(floatNode0.isNaN());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(0.0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertEquals((short)0, jsonNode0.shortValue());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertTrue(jsonNode0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      BigInteger bigInteger0 = BigInteger.ZERO;
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertTrue(jsonNode0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ShortNode shortNode0 = ShortNode.valueOf((short)4);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0, objectMapper0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.booleanValue());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MissingNode missingNode0 = new MissingNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isIntegralNumber());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Long long0 = new Long(0L);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(long0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertSame(jsonNode0, valueNode0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((byte)2);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, (ObjectCodec) null);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonNode0.asToken());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      NumericNode numericNode0 = arrayNode0.numberNode(0.0F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isDouble());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      NumericNode numericNode0 = arrayNode0.numberNode((double) 0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertEquals((short)0, jsonNode0.shortValue());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertSame(jsonNode0, decimalNode0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      BooleanNode booleanNode0 = jsonNodeFactory0.booleanNode(true);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isDouble());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertEquals(JsonParser.NumberType.BIG_INTEGER, jsonNode0.numberType());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, objectMapper0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getIntValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      try { 
        treeTraversingParser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_NULL) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      try { 
        treeTraversingParser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.valueOf(true);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      try { 
        treeTraversingParser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_TRUE) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      POJONode pOJONode0 = new POJONode("com.fasterxml.jackson.databind.node.TreeTraversingParser");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      LongNode longNode0 = new LongNode(0L);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(longNode0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, objectReader0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      POJONode pOJONode0 = new POJONode("com.fasterxml.jackson.databind.node.TreeTraversingParser");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
      try { 
        treeTraversingParser0.currentNumericNode();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = null;
      try {
        treeTraversingParser0 = new TreeTraversingParser((JsonNode) null, objectMapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TreeTraversingParser treeTraversingParser0 = null;
      try {
        treeTraversingParser0 = new TreeTraversingParser((JsonNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      byte[] byteArray0 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(0.0F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonLocation jsonLocation0 = treeTraversingParser0.getCurrentLocation();
      assertEquals((-1), jsonLocation0.getLineNr());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.nextIntValue(15);
      treeTraversingParser0.nextFieldName();
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.close();
      try { 
        treeTraversingParser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getBinaryValue((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      byte[] byteArray0 = treeTraversingParser0.getBinaryValue();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IntNode intNode0 = IntNode.valueOf(3);
      POJONode pOJONode0 = new POJONode(intNode0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      POJONode pOJONode0 = new POJONode("com.fasterxml.jackson.databind.node.TreeTraversingParser");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
      treeTraversingParser0.close();
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      byte[] byteArray0 = new byte[1];
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 2319);
      BinaryNode binaryNode0 = arrayNode0.binaryNode(byteArray0, 0, 0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextBooleanValue();
      boolean boolean0 = treeTraversingParser0.getValueAsBoolean(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      POJONode pOJONode0 = new POJONode("com.fasterxml.jackson.databind.node.TreeTraversingParser");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertEquals("com.fasterxml.jackson.databind.node.TreeTraversingParser", object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MissingNode missingNode0 = MissingNode.getInstance();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      treeTraversingParser0.close();
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(Double.NEGATIVE_INFINITY);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0, objectReader0);
      JsonParser.NumberType jsonParser_NumberType0 = treeTraversingParser0.getNumberType();
      assertEquals(JsonParser.NumberType.DOUBLE, jsonParser_NumberType0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextValue();
      String string0 = treeTraversingParser0.getText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      treeTraversingParser0.nextBooleanValue();
      String string0 = treeTraversingParser0.getText();
      assertEquals("[", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode(0.0F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertEquals("0.0", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ShortNode shortNode0 = ShortNode.valueOf((short)200);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      treeTraversingParser0.nextBooleanValue();
      String string0 = treeTraversingParser0.getText();
      assertEquals("200", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      TextNode textNode0 = jsonNodeFactory0.textNode("");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.nextBooleanValue();
      String string0 = treeTraversingParser0.getText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ValueNode valueNode0 = jsonNodeFactory0.rawValueNode((RawValue) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.nextBooleanValue();
      String string0 = treeTraversingParser0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      HashMap<String, BigIntegerNode> hashMap0 = new HashMap<String, BigIntegerNode>();
      HashMap<String, JsonNode> hashMap1 = new HashMap<String, JsonNode>(hashMap0);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap1);
      Integer integer0 = new Integer(66);
      ObjectNode objectNode1 = objectNode0.put("", integer0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode1);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextBooleanValue();
      String string0 = treeTraversingParser0.getText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((byte)37);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.close();
      String string0 = treeTraversingParser0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      POJONode pOJONode0 = new POJONode("com.fasterxml.jackson.databind.node.TreeTraversingParser");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
      treeTraversingParser0.overrideCurrentName("com.fasterxml.jackson.databind.node.TreeTraversingParser");
      assertFalse(treeTraversingParser0.hasTextCharacters());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.nextIntValue(15);
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.overrideCurrentName((String) null);
      assertFalse(treeTraversingParser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(0.0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.nextBooleanValue();
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getCurrentName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(4660);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      String string0 = treeTraversingParser0.getCurrentName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      treeTraversingParser0.nextBooleanValue();
      treeTraversingParser0.skipChildren();
      assertEquals(JsonToken.END_ARRAY, treeTraversingParser0.currentToken());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      treeTraversingParser0.nextBooleanValue();
      treeTraversingParser0.skipChildren();
      assertEquals(JsonToken.END_OBJECT, treeTraversingParser0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0._put("F`1;A?~u4&9]IBw", objectNode0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode1);
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.nextBooleanValue();
      Boolean boolean0 = treeTraversingParser0.nextBooleanValue();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Byte byte0 = new Byte((byte)21);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(byte0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, objectMapper0);
      treeTraversingParser0.close();
      treeTraversingParser0.nextToken();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MissingNode missingNode0 = MissingNode.getInstance();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      treeTraversingParser0._startContainer = true;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      treeTraversingParser0._nextToken = jsonToken0;
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.nextBooleanValue();
      assertEquals(2, treeTraversingParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      RawValue rawValue0 = new RawValue((String) null);
      ValueNode valueNode0 = jsonNodeFactory0.rawValueNode(rawValue0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.nextValue();
      NodeCursor.RootCursor nodeCursor_RootCursor0 = (NodeCursor.RootCursor)treeTraversingParser0._nodeCursor;
      NodeCursor.ArrayCursor nodeCursor_ArrayCursor0 = new NodeCursor.ArrayCursor(valueNode0, nodeCursor_RootCursor0);
      treeTraversingParser0._nodeCursor = (NodeCursor) nodeCursor_ArrayCursor0;
      treeTraversingParser0.getText();
      assertTrue(treeTraversingParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.close();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, objectMapper0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getDoubleValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextNode textNode0 = new TextNode("4RT");
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0, objectMapper0);
      try { 
        treeTraversingParser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_STRING) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(Double.NEGATIVE_INFINITY);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0, objectReader0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      BigInteger bigInteger0 = BigInteger.TEN;
      ValueNode valueNode0 = arrayNode0.numberNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextCharacters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(Float.NEGATIVE_INFINITY);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(4896.1226F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonLocation jsonLocation0 = treeTraversingParser0.getTokenLocation();
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MissingNode missingNode0 = new MissingNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertNull(jsonStreamContext0.getCurrentName());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      RawValue rawValue0 = new RawValue((String) null);
      ValueNode valueNode0 = jsonNodeFactory0.rawValueNode(rawValue0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      try { 
        treeTraversingParser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ArrayNode arrayNode0 = objectNode0.withArray((String) null);
      Float float0 = new Float(Float.NEGATIVE_INFINITY);
      ValueNode valueNode0 = arrayNode0.numberNode(float0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MissingNode missingNode0 = MissingNode.getInstance();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      boolean boolean0 = treeTraversingParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(Double.NEGATIVE_INFINITY);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0, objectReader0);
      int int0 = treeTraversingParser0.getTextOffset();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IntNode intNode0 = IntNode.valueOf(3);
      POJONode pOJONode0 = new POJONode(intNode0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
      boolean boolean0 = treeTraversingParser0.hasTextCharacters();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      BigInteger bigInteger0 = BigInteger.TEN;
      ValueNode valueNode0 = arrayNode0.numberNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertSame(number0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode((BigInteger) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0, objectMapper0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getFloatValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.BigIntegerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      HashMap<String, BigIntegerNode> hashMap0 = new HashMap<String, BigIntegerNode>();
      HashMap<String, JsonNode> hashMap1 = new HashMap<String, JsonNode>(hashMap0);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap1);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      Version version0 = treeTraversingParser0.version();
      assertTrue(version0.isSnapshot());
  }
}
