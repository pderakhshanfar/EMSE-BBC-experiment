/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 19:38:48 GMT 2021
 */

package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonStreamContext;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NodeCursor;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RawValue;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.text.DateFormat;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TreeTraversingParser_ESTest extends TreeTraversingParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("", "UNWRAP_ROOT_VALUE");
      ObjectNode objectNode2 = objectNode1._put("", objectNode0);
      Double double0 = new Double(0.0);
      ObjectNode objectNode3 = objectNode2.put("", double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode3);
      hashMap0.put("UNWRAP_ROOT_VALUE", objectNode0);
      treeTraversingParser0.nextToken();
      // Undeclared exception!
      try { 
        treeTraversingParser0.nextToken();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(Double.POSITIVE_INFINITY);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.getNumberValue();
      System.setCurrentTimeMillis(0L);
      treeTraversingParser0.currentNumericNode();
      String string0 = "";
      // Undeclared exception!
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(0L);
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      bigIntegerNode0.isTextual();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      treeTraversingParser0.getTokenLocation();
      treeTraversingParser0.getBigIntegerValue();
      String string0 = "`cxaJi5V:Q#d/";
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Lt", "`cxaJi5V:Q#d/", false, '\\', 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 13)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2589);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, placeholderForType0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(collectionLikeType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonNode jsonNode0 = beanSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, true);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0);
      treeTraversingParser0.nextFieldName();
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.nextValue();
      treeTraversingParser0.nextIntValue((-1166));
      treeTraversingParser1.nextFieldName();
      treeTraversingParser0.nextToken();
      // Undeclared exception!
      try { 
        treeTraversingParser1._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4 :T2fy+hmH");
      DecimalNode decimalNode0 = new DecimalNode((BigDecimal) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.nextBooleanValue();
      treeTraversingParser0.getParsingContext();
      treeTraversingParser0.version();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DecimalNode decimalNode0 = new DecimalNode((BigDecimal) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getDecimalValue();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getDoubleValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      POJONode pOJONode0 = new POJONode(decimalNode0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
      treeTraversingParser0.nextToken();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-52);
      BinaryNode binaryNode0 = BinaryNode.valueOf(byteArray0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(binaryNode0, objectMapper0);
      NodeCursor.RootCursor nodeCursor_RootCursor0 = (NodeCursor.RootCursor)treeTraversingParser1._nodeCursor;
      NodeCursor.ArrayCursor nodeCursor_ArrayCursor0 = new NodeCursor.ArrayCursor(decimalNode0, nodeCursor_RootCursor0);
      treeTraversingParser0._nodeCursor = (NodeCursor) nodeCursor_ArrayCursor0;
      treeTraversingParser0.getValueAsString();
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextValue();
      // Undeclared exception!
      try { 
        treeTraversingParser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "URI9qi/");
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.nextTextValue();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getLongValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextTextValue();
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextLongValue(842L);
      decimalNode0.bigIntegerValue();
      treeTraversingParser0._startContainer = true;
      // Undeclared exception!
      try { 
        treeTraversingParser0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      IntNode intNode0 = IntNode.valueOf(32768);
      BigInteger bigInteger0 = intNode0.bigIntegerValue();
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      Random.setNextRandom(70);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LongNode.valueOf((-8L));
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      textNode0.isValueNode();
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      treeTraversingParser0._nextToken = jsonToken0;
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      treeTraversingParser0.nextFieldName();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte)90;
      byteArray1[3] = (byte)125;
      byteArray1[4] = (byte)5;
      byteArray1[5] = (byte)40;
      byteArray1[6] = (byte)4;
      byteArray1[7] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)3;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      bigDecimal0.divide(bigDecimal1, roundingMode0);
      jsonNodeFactory0.numberNode(bigDecimal0);
      treeTraversingParser0.skipChildren();
      treeTraversingParser0.skipChildren();
      treeTraversingParser0.getTextLength();
      assertEquals(JsonToken.END_ARRAY, treeTraversingParser0.currentToken());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getIntValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.BigIntegerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NullNode nullNode0 = NullNode.instance;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      treeTraversingParser0.nextLongValue(0L);
      treeTraversingParser0._startContainer = true;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      treeTraversingParser0._nextToken = jsonToken0;
      treeTraversingParser0.nextValue();
      treeTraversingParser0.nextValue();
      treeTraversingParser0.getTextCharacters();
      try { 
        treeTraversingParser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_NULL) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TextNode textNode0 = TextNode.valueOf("]R");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      try { 
        treeTraversingParser0.getBinaryValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot access contents of TextNode as binary due to broken Base64 encoding: Illegal character ']' (code 0x5d) in base64 content
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      NullNode nullNode0 = NullNode.getInstance();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      BigDecimal bigDecimal0 = new BigDecimal(1400.696447);
      ObjectNode objectNode1 = objectNode0.put(")=i/l%g7Nr^x8+%k$", bigDecimal0);
      Long long0 = new Long((-9223372036854775793L));
      ObjectNode objectNode2 = objectNode1.put("", long0);
      Double double0 = new Double(734.61);
      ObjectNode objectNode3 = objectNode2.put("com.fasterxml.jackson.databind.util.EnumResolver", double0);
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(objectNode3);
      treeTraversingParser1.nextToken();
      treeTraversingParser0.getCurrentValue();
      POJONode pOJONode0 = new POJONode((Object) null);
      pOJONode0.canConvertToLong();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Boolean boolean0 = Boolean.TRUE;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean0);
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      ObjectMapper objectMapper3 = objectMapper2.setTypeFactory(typeFactory1);
      TreeTraversingParser treeTraversingParser2 = new TreeTraversingParser(nullNode0, objectMapper3);
      treeTraversingParser2.getBinaryValue();
      treeTraversingParser1.getText();
      treeTraversingParser1.skipChildren();
      // Undeclared exception!
      try { 
        treeTraversingParser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      treeTraversingParser0.getValueAsInt(547);
      treeTraversingParser0.getNumberType();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getFloatValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.BigIntegerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(1427L);
      Random.setNextRandom(1740);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      LinkedList<JsonNode> linkedList0 = new LinkedList<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, linkedList0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1740, (-2888), mockRandom0);
      ValueNode valueNode0 = arrayNode0.numberNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.overrideCurrentName("");
      treeTraversingParser0.currentNode();
      treeTraversingParser0.getNumberValue();
      treeTraversingParser0.getIntValue();
      treeTraversingParser0.nextToken();
      treeTraversingParser0.version();
      Class<POJONode> class0 = POJONode.class;
      // Undeclared exception!
      try { 
        treeTraversingParser0.readValueAs(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for parser, needed for deserialization
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "G");
      ObjectNode objectNode1 = objectNode0.put("P", "H6B`");
      Boolean boolean0 = Boolean.TRUE;
      ObjectNode objectNode2 = objectNode1.put("", boolean0);
      ObjectNode objectNode3 = objectNode2.putNull("EMPTY");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode3);
      jsonNodeFactory0.objectNode();
      boolean boolean1 = treeTraversingParser0.isNaN();
      assertFalse(boolean1);
      
      treeTraversingParser0.version();
      treeTraversingParser0.getTokenLocation();
      Random.setNextRandom(500);
      objectNode1.without("r-&rJ>^;]2oKio");
      objectNode1.pojoNode("");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      objectMapper0.disable(deserializationFeature0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      treeTraversingParser0.overrideCurrentName("");
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.appendTwoBytes((-3339));
      int int0 = treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) byteArrayBuilder0);
      assertEquals(0, int0);
      
      String string0 = treeTraversingParser0.getCurrentName();
      assertNotNull(string0);
      assertFalse(boolean0.equals((Object)boolean1));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DoubleNode doubleNode0 = new DoubleNode(1729.254076);
      DoubleNode.valueOf((byte)5);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      doubleNode0.binaryValue();
      treeTraversingParser0.currentNode();
      treeTraversingParser0.currentNumericNode();
      treeTraversingParser0.isNaN();
      doubleNode0.iterator();
      doubleNode0.fields();
      treeTraversingParser0.nextTextValue();
      treeTraversingParser0.getCurrentName();
      treeTraversingParser0.getParsingContext();
      String string0 = treeTraversingParser0.getText();
      assertEquals("1729.254076", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      BigInteger bigInteger0 = BigInteger.ONE;
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigInteger0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setMixInResolver((ClassIntrospector.MixInResolver) null);
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      objectMapper0.setTypeFactory((TypeFactory) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, objectMapper2);
      treeTraversingParser0.getDoubleValue();
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      objectMapper2.disable(serializationFeature0);
      treeTraversingParser0.getBigIntegerValue();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
      objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
      objectMapper1.isEnabled(jsonFactory_Feature0);
      ObjectMapper.findModules();
      treeTraversingParser0.getNumberValue();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      objectMapper1.writer(dateFormat0);
      treeTraversingParser0.getCurrentLocation();
      treeTraversingParser0.getCurrentName();
      objectMapper2.findAndRegisterModules();
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      DoubleNode doubleNode0 = DoubleNode.valueOf(500);
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(doubleNode0);
      objectMapper0.writer(contextAttributes1);
      Random.setNextRandom(0);
      treeTraversingParser0.getCurrentName();
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertFalse(jsonNode0.isShort());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Short short0 = new Short((short) (-3176));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertTrue(jsonNode0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MissingNode missingNode0 = new MissingNode();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper2 = objectMapper1.setSubtypeResolver(stdSubtypeResolver0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      ObjectMapper objectMapper3 = objectMapper2.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0, objectMapper3);
      treeTraversingParser0.currentNode();
      try { 
        treeTraversingParser0.currentNumericNode();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (NOT_AVAILABLE) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextValue();
      treeTraversingParser0.getTextCharacters();
      // Undeclared exception!
      try { 
        treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(Double.POSITIVE_INFINITY);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.getNumberValue();
      System.setCurrentTimeMillis(0L);
      treeTraversingParser0.currentNumericNode();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.getBinaryValue((Base64Variant) null);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getTextCharacters();
      // Undeclared exception!
      try { 
        treeTraversingParser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.skipChildren();
      boolean boolean0 = treeTraversingParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getTextCharacters();
      int int0 = treeTraversingParser0.getTextLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNotNull(object0);
      
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      BufferRecycler bufferRecycler0 = jsonFactory2._getBufferRecycler();
      binaryNode0.isTextual();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2886);
      int int0 = treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) byteArrayBuilder0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      binaryNode0.toPrettyString();
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getText();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      String string0 = ") not numeric, cannot use numeric value accessors";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]QYhLAH5\"#.");
      ObjectNode objectNode1 = objectNode0.put(") not numeric, cannot use numeric value accessors", (Boolean) null);
      ArrayNode arrayNode0 = objectNode1.putArray("com.fasterxml.jackson.databind.node.TreeTraversingParser$1");
      Float float0 = new Float(2.2250738585072014E-308);
      ValueNode valueNode0 = arrayNode0.numberNode(float0);
      Float float1 = new Float((-1679.7F));
      jsonNodeFactory0.numberNode(float1);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.currentNode();
      treeTraversingParser0.currentNumericNode();
      treeTraversingParser0.getNumberType();
      treeTraversingParser0.version();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      binaryNode0.longValue();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.readBinaryValue((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0);
      ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
      Locale locale0 = Locale.ENGLISH;
      ObjectMapper objectMapper4 = objectMapper3.setLocale(locale0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, objectMapper4);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LongNode.valueOf((-8L));
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BooleanNode booleanNode0 = BooleanNode.FALSE;
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_GETTERS;
      POJONode pOJONode0 = new POJONode(mapperFeature0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getText();
      Random.setNextRandom(580);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "4Lb(mMcj>*.;r?;m");
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getNumberType();
      byte[] byteArray0 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LongNode longNode0 = LongNode.valueOf((-26L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      longNode0.asDouble(0.0);
      treeTraversingParser0.readBinaryValue((OutputStream) null);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((short) (-26), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LongNode longNode0 = LongNode.valueOf((-1L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      treeTraversingParser0.getValueAsString();
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isFloatingPointNumber());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      decimalNode0.isBoolean();
      treeTraversingParser0._nextToken = jsonToken0;
      treeTraversingParser0.nextToken();
      JsonLocation jsonLocation0 = treeTraversingParser0.getTokenLocation();
      assertEquals((-1), jsonLocation0.getLineNr());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.readBinaryValue((OutputStream) null);
      treeTraversingParser0.overrideCurrentName("ACCEPT_EMPTY_STRING_AS_NULL_OBJECT");
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      treeTraversingParser0.nextTextValue();
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextToken();
      treeTraversingParser0.currentNode();
      assertEquals(JsonToken.END_ARRAY, treeTraversingParser0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LongNode longNode0 = LongNode.valueOf((-1L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      treeTraversingParser0.configure(jsonParser_Feature0, true);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getText();
      treeTraversingParser0.getIntValue();
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.FALSE;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ObjectNode objectNode1 = objectNode0.remove((Collection<String>) set0);
      ArrayNode arrayNode0 = objectNode1.withArray("");
      ObjectNode objectNode2 = arrayNode0.objectNode();
      ObjectNode objectNode3 = objectNode2.put("", 1.0F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode3);
      treeTraversingParser0.getBinaryValue();
      try { 
        treeTraversingParser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LongNode longNode0 = new LongNode((-1L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      treeTraversingParser0.nextToken();
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(longNode0);
      treeTraversingParser1.nextToken();
      treeTraversingParser1.nextToken();
      JsonStreamContext jsonStreamContext0 = treeTraversingParser1.getParsingContext();
      assertNull(jsonStreamContext0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0, (ObjectCodec) null);
      treeTraversingParser0.currentNode();
      treeTraversingParser0.getLongValue();
      String string0 = ") not numeric, cannot use numeric value accessors";
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant(") not numeric, cannot use numeric value accessors", ") not numeric, cannot use numeric value accessors", false, '8', 55296);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 49)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = treeTraversingParser0.readBinaryValue((OutputStream) byteArrayOutputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LongNode longNode0 = LongNode.valueOf(2994L);
      longNode0.asInt((-1588));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      treeTraversingParser0.clearCurrentToken();
      treeTraversingParser0.currentNumericNode();
      treeTraversingParser0.getValueAsInt();
      treeTraversingParser0.getNumberType();
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getTextCharacters();
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(longNode0);
      treeTraversingParser1.skipChildren();
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertEquals(0, jsonStreamContext0.getCurrentIndex());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      treeTraversingParser0.close();
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextNode textNode0 = TextNode.valueOf("");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.nextToken();
      char[] charArray0 = treeTraversingParser0.getTextCharacters();
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      treeTraversingParser0._startContainer = true;
      boolean boolean0 = treeTraversingParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      Double double0 = new Double((-1344.94));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Current token (");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.getIntValue();
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getLongValue();
      treeTraversingParser0.version();
      treeTraversingParser0.setCurrentValue(fileSystemHandling0);
      treeTraversingParser0.getValueAsBoolean();
      treeTraversingParser0.getParsingContext();
      treeTraversingParser0.getLongValue();
      treeTraversingParser0.getDecimalValue();
      treeTraversingParser0.isNaN();
      treeTraversingParser0.getDoubleValue();
      treeTraversingParser0.version();
      treeTraversingParser0.getDecimalValue();
      treeTraversingParser0.getCurrentName();
      treeTraversingParser0.getText();
      treeTraversingParser0.getNumberValue();
      treeTraversingParser0.getCurrentLocation();
      treeTraversingParser0.getCurrentLocation();
      treeTraversingParser0.getLongValue();
      // Undeclared exception!
      try { 
        treeTraversingParser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LongNode longNode0 = LongNode.valueOf(2994L);
      longNode0.asInt((-1625));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      treeTraversingParser0.clearCurrentToken();
      treeTraversingParser0.getNumberType();
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getTextCharacters();
      String string0 = treeTraversingParser0.getText();
      assertEquals("2994", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      treeTraversingParser0.getBinaryValue();
      byteArrayBuilder0.appendThreeBytes(261);
      treeTraversingParser0.readBinaryValue((OutputStream) byteArrayBuilder0);
      try { 
        treeTraversingParser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_TRUE) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf(2994L);
      longNode0.asInt((-1625));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      treeTraversingParser0.clearCurrentToken();
      treeTraversingParser0.isClosed();
      treeTraversingParser0.getDoubleValue();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      treeTraversingParser0.nextIntValue(1);
      treeTraversingParser0.getTextLength();
      treeTraversingParser0.getFloatValue();
      treeTraversingParser0.getValueAsBoolean(true);
      treeTraversingParser0.getLongValue();
      treeTraversingParser0.isClosed();
      FileSystemHandling.shouldAllThrowIOExceptions();
      treeTraversingParser0.getTextCharacters();
      treeTraversingParser0.getCurrentLocation();
      int int0 = new Integer((-1625));
      treeTraversingParser0.getDecimalValue();
      treeTraversingParser0.isNaN();
      treeTraversingParser0.getFloatValue();
      treeTraversingParser0.getDecimalValue();
      treeTraversingParser0.getNumberType();
      // Undeclared exception!
      try { 
        treeTraversingParser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf(2994L);
      longNode0.isPojo();
      longNode0.asInt((-1625));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      treeTraversingParser0.clearCurrentToken();
      treeTraversingParser0.isClosed();
      treeTraversingParser0.getDoubleValue();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      treeTraversingParser0.nextIntValue(1);
      treeTraversingParser0.getTextLength();
      treeTraversingParser0.getFloatValue();
      treeTraversingParser0.getValueAsBoolean(true);
      treeTraversingParser0.getLongValue();
      treeTraversingParser0.isClosed();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        treeTraversingParser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      Long long0 = new Long((-1767L));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(long0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      ObjectMapper objectMapper2 = objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      ObjectMapper objectMapper3 = objectMapper2.setPropertyNamingStrategy((PropertyNamingStrategy) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, objectMapper3);
      treeTraversingParser0.overrideCurrentName("Illegal character '");
      ObjectCodec objectCodec0 = treeTraversingParser0.getCodec();
      assertSame(objectMapper3, objectCodec0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.skipChildren();
      treeTraversingParser0.getDecimalValue();
      assertEquals(0, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.FALSE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextToken();
      try { 
        treeTraversingParser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.close();
      assertEquals(0, treeTraversingParser0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8DK$@4");
      RawValue rawValue0 = new RawValue(objectNode0);
      jsonNodeFactory0.rawValueNode(rawValue0);
      Integer integer0 = new Integer((-3233));
      jsonNodeFactory0.pojoNode(objectNode0);
      ObjectNode objectNode1 = objectNode0.put("2^l'o/C", integer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ObjectNode objectNode2 = objectNode1.put(") not numeric, cannot use numeric value accessors", 2854L);
      Long long0 = new Long((-3233));
      ObjectNode objectNode3 = objectNode2.put("2^l'o/C", long0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode3);
      treeTraversingParser0.getTokenLocation();
      Byte byte0 = Byte.valueOf((byte)4);
      objectNode2.numberNode(byte0);
      treeTraversingParser0.version();
      System.setCurrentTimeMillis((-3233));
      treeTraversingParser0.nextFieldName();
      objectNode3.with("AnnotationIntrospector returned key deserializer definition of type ");
      treeTraversingParser0.getTextCharacters();
      treeTraversingParser0.getText();
      treeTraversingParser0.getEmbeddedObject();
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.close();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      treeTraversingParser0.isClosed();
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertNull(jsonNode0.textValue());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getTextCharacters();
      assertEquals(4, treeTraversingParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      decimalNode0.forEach(consumer0);
      treeTraversingParser0.currentNode();
      boolean boolean0 = treeTraversingParser0.hasCurrentToken();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#LB.|KD ;1");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#LB.|KD ;1");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      bigInteger0.shiftLeft(5);
      treeTraversingParser0.getDoubleValue();
      treeTraversingParser0.getDecimalValue();
      treeTraversingParser0.nextToken();
      bigInteger0.not();
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getCodec();
      System.setCurrentTimeMillis(0L);
      try { 
        treeTraversingParser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) byteArrayOutputStream0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((byte)10, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.getNumberType();
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getTextCharacters();
      assertEquals(8, treeTraversingParser0.getCurrentTokenId());
      
      String string0 = treeTraversingParser0.getText();
      assertEquals("10", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getTextCharacters();
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.booleanValue());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((short)3517);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.currentNumericNode();
      treeTraversingParser0.close();
      assertNull(treeTraversingParser0.currentToken());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ShortNode shortNode0 = new ShortNode((short)2686);
      shortNode0.asLong();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0, (ObjectCodec) null);
      treeTraversingParser0.getValueAsDouble();
      treeTraversingParser0.getCurrentLocation();
      treeTraversingParser0.getDoubleValue();
      treeTraversingParser0.getNumberType();
      treeTraversingParser0.getParsingContext();
      treeTraversingParser0.close();
      treeTraversingParser0.nextToken();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = treeTraversingParser0.readBinaryValue((OutputStream) byteArrayOutputStream0);
      treeTraversingParser0.isNaN();
      treeTraversingParser0.getNumberType();
      int int1 = treeTraversingParser0.getTextOffset();
      assertTrue(int1 == int0);
      
      treeTraversingParser0.getBigIntegerValue();
      assertEquals(0, treeTraversingParser0.getTextOffset());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(booleanNode0);
      treeTraversingParser0.nextToken();
      char[] charArray0 = treeTraversingParser0.getTextCharacters();
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.getLongValue();
      treeTraversingParser0.close();
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.nextToken();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextCharacters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.getFloatValue();
      treeTraversingParser0.isNaN();
      treeTraversingParser0.getDoubleValue();
      treeTraversingParser0.close();
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      decimalNode0.fields();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      decimalNode0.bigIntegerValue();
      treeTraversingParser0.getNumberValue();
      treeTraversingParser0.close();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0, (ObjectCodec) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      NodeCursor.ArrayCursor nodeCursor_ArrayCursor0 = new NodeCursor.ArrayCursor(nullNode0, (NodeCursor) null);
      treeTraversingParser0._nodeCursor = (NodeCursor) nodeCursor_ArrayCursor0;
      treeTraversingParser0.enable(jsonParser_Feature0);
      treeTraversingParser0.nextBooleanValue();
      treeTraversingParser0.skipChildren();
      assertEquals(4, treeTraversingParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      treeTraversingParser0.close();
      String string0 = treeTraversingParser0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.isNaN();
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.getNumberType();
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getTextCharacters();
      treeTraversingParser0.getTextLength();
      treeTraversingParser0.currentNumericNode();
      int int0 = treeTraversingParser0.getTextOffset();
      assertEquals(8, treeTraversingParser0.getCurrentTokenId());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-1.0));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.overrideCurrentName("com.fasterxml.jackson.databind.deser.ValueInstantiators$Base");
      treeTraversingParser0.getLongValue();
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DecimalNode decimalNode0 = new DecimalNode((BigDecimal) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getDecimalValue();
      assertEquals(8, treeTraversingParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.getNumberType();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValueExact();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger1);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      treeTraversingParser0.getFloatValue();
      JsonParser jsonParser0 = treeTraversingParser0.skipChildren();
      assertEquals(0, jsonParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      Double double0 = Double.valueOf(9.223372036854776E18);
      jsonNodeFactory0.numberNode(double0);
      ObjectNode objectNode1 = objectNode0.put("", (-1776.2155444044056));
      ObjectNode objectNode2 = objectNode1.deepCopy();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      objectNode2.with("rK93");
      ObjectNode objectNode3 = objectNode2.retain((Collection<String>) linkedList0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode3);
      treeTraversingParser0.getTokenLocation();
      treeTraversingParser0.overrideCurrentName("");
      NodeCursor.ObjectCursor nodeCursor_ObjectCursor0 = (NodeCursor.ObjectCursor)treeTraversingParser0.getParsingContext();
      assertEquals(JsonToken.END_OBJECT, nodeCursor_ObjectCursor0.endToken());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      Byte byte0 = new Byte((byte)3);
      ValueNode valueNode0 = arrayNode0.numberNode(byte0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      POJONode pOJONode0 = new POJONode((Object) null);
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      booleanNode0.isValueNode();
      booleanNode0.isBinary();
      valueNode0.binaryValue();
      treeTraversingParser0.getValueAsBoolean();
      treeTraversingParser0.isNaN();
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.nextToken();
      treeTraversingParser0.isClosed();
      assertEquals(0, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      pOJONode0.asDouble();
      Byte byte0 = new Byte((byte)3);
      pOJONode0.findParents("Cxw[#1OXE=n\"V");
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      booleanNode0.isBinary();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.canReadTypeId();
      treeTraversingParser0.getNumberValue();
      boolean boolean0 = treeTraversingParser0.hasTextCharacters();
      assertFalse(boolean0);
      
      treeTraversingParser0.getCodec();
      assertFalse(treeTraversingParser0.hasTextCharacters());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      arrayNode0.objectNode();
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_CREATORS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, (ObjectCodec) null);
      treeTraversingParser0.setCodec(objectMapper1);
      treeTraversingParser0.close();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      Byte byte0 = new Byte((byte)3);
      ValueNode valueNode0 = arrayNode0.numberNode(byte0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      POJONode pOJONode0 = new POJONode((Object) null);
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      booleanNode0.isValueNode();
      booleanNode0.isBinary();
      treeTraversingParser0.getValueAsBoolean();
      treeTraversingParser0.isNaN();
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.getLongValue();
      // Undeclared exception!
      try { 
        treeTraversingParser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      bigDecimal0.divide(bigDecimal1, (-933), 1);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.getParsingContext();
      treeTraversingParser0.getIntValue();
      treeTraversingParser0.close();
      treeTraversingParser0.getCurrentName();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.getIntValue();
      treeTraversingParser0.close();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal1 = bigDecimal0.stripTrailingZeros();
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal1);
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(decimalNode0, (ObjectCodec) null);
      boolean boolean0 = treeTraversingParser1.hasTextCharacters();
      assertFalse(boolean0);
      
      treeTraversingParser0.getEmbeddedObject();
      JsonParser jsonParser0 = treeTraversingParser1.skipChildren();
      assertEquals(0, jsonParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(4199);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, (ObjectCodec) null);
      treeTraversingParser0.getTextOffset();
      bigInteger0.longValueExact();
      treeTraversingParser0.getCodec();
      bigInteger0.testBit(2255);
      JsonNodeFactory jsonNodeFactory1 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory1.arrayNode(0);
      arrayNode0.isValueNode();
      POJONode pOJONode0 = new POJONode(bigDecimal0);
      jsonNodeFactory1.pojoNode(pOJONode0);
      jsonNodeFactory1.numberNode(bigInteger0);
      treeTraversingParser0.getCurrentLocation();
      treeTraversingParser0.nextValue();
      treeTraversingParser0.getCurrentLocation();
      treeTraversingParser0.getParsingContext();
      TreeTraversingParser treeTraversingParser1 = new TreeTraversingParser(valueNode0);
      treeTraversingParser1.getIntValue();
      treeTraversingParser1.close();
      assertTrue(treeTraversingParser1.isClosed());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValueExact();
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      treeTraversingParser0._nextToken = jsonToken0;
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals(10.0F, float0, 0.01F);
      
      JsonParser jsonParser0 = treeTraversingParser0.skipChildren();
      assertFalse(jsonParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(4199);
      bigDecimal0.stripTrailingZeros();
      DecimalNode.valueOf(bigDecimal0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.overrideCurrentName((String) null);
      treeTraversingParser0.getCurrentLocation();
      treeTraversingParser0.nextValue();
      treeTraversingParser0.getCurrentLocation();
      treeTraversingParser0.getParsingContext();
      treeTraversingParser0.close();
      try { 
        treeTraversingParser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      treeTraversingParser0.getCurrentName();
      BigInteger bigInteger1 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jsonNodeFactory0.numberNode(bigInteger0);
      treeTraversingParser0.getTextOffset();
      bigInteger0.longValueExact();
      treeTraversingParser0.getCodec();
      bigInteger0.testBit(0);
      jsonNodeFactory0.arrayNode(0);
      arrayNode0.isValueNode();
      jsonNodeFactory0.pojoNode(arrayNode0);
      jsonNodeFactory0.numberNode(bigInteger0);
      treeTraversingParser0.overrideCurrentName("G`k:OXKgGCkRbT3j");
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      jsonNodeFactory0.binaryNode((byte[]) null);
      mathContext0.equals((Object) null);
      mathContext0.getPrecision();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      IntNode intNode0 = new IntNode(0);
      BigDecimal bigDecimal1 = intNode0.decimalValue();
      bigDecimal0.add(bigDecimal1, mathContext0);
      treeTraversingParser0.getCodec();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      treeTraversingParser0.getTextOffset();
      treeTraversingParser0.getCodec();
      arrayNode0.isValueNode();
      jsonNodeFactory0.pojoNode(arrayNode0);
      treeTraversingParser0.overrideCurrentName("G`k:OXKgGCkRbT3j");
      treeTraversingParser0.getCurrentLocation();
      treeTraversingParser0.nextValue();
      treeTraversingParser0.getCurrentLocation();
      treeTraversingParser0.getCurrentName();
      try { 
        treeTraversingParser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      Integer integer0 = new Integer(2941);
      ObjectNode objectNode1 = objectNode0.put("", integer0);
      ObjectNode objectNode2 = objectNode1.put("}3WR(SzqKbJ[", true);
      ObjectNode objectNode3 = objectNode2.deepCopy();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode3);
      treeTraversingParser0.nextTextValue();
      treeTraversingParser0.close();
      try { 
        treeTraversingParser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(4199);
      bigDecimal0.stripTrailingZeros();
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, (ObjectCodec) null);
      boolean boolean0 = treeTraversingParser0.hasTextCharacters();
      assertFalse(boolean0);
      
      treeTraversingParser0.getEmbeddedObject();
      assertFalse(treeTraversingParser0.hasTextCharacters());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.getEmbeddedObject();
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextCharacters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonAutoDetect jsonAutoDetect0 = mock(JsonAutoDetect.class, new ViolatedAssumptionAnswer());
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).creatorVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).fieldVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).getterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).isGetterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).setterVisibility();
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.from(jsonAutoDetect0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      ObjectMapper objectMapper2 = objectMapper1.setDateFormat(dateFormat0);
      ObjectReader objectReader0 = objectMapper2.reader();
      decimalNode0.isBoolean();
      Class<BigIntegerNode>[] classArray0 = (Class<BigIntegerNode>[]) Array.newInstance(Class.class, 2);
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      classArray0[0] = class0;
      Class<BigIntegerNode> class1 = BigIntegerNode.class;
      classArray0[1] = class1;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      decimalNode0.forEach(consumer0);
      objectMapper1.registerSubtypes(classArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, objectReader0);
      treeTraversingParser0.getCurrentLocation();
      decimalNode0.floatValue();
      treeTraversingParser0.version();
      treeTraversingParser0.getCurrentLocation();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextCharacters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      binaryNode0.longValue();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.getValueAsLong(0L);
      binaryNode0.doubleValue();
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.FALSE;
      booleanNode0.toPrettyString();
      booleanNode0.toString();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      booleanNode0.isValueNode();
      booleanNode0.isBinary();
      treeTraversingParser0.getValueAsBoolean();
      treeTraversingParser0.isNaN();
      treeTraversingParser0.nextFieldName();
      try { 
        treeTraversingParser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_FALSE) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      SimpleModule simpleModule0 = new SimpleModule();
      Class<DoubleNode> class0 = DoubleNode.class;
      Class<Object> class1 = Object.class;
      SimpleModule simpleModule1 = simpleModule0.setMixInAnnotation(class0, class1);
      ValueNode valueNode0 = jsonNodeFactory0.pojoNode(simpleModule1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)86;
      jsonNodeFactory0.binaryNode(byteArray0, (int) (byte)86, (int) (byte)0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonParser_FeatureArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      objectMapper2.treeAsTokens(valueNode0);
      ObjectMapper objectMapper3 = objectMapper2.configure(deserializationFeature0, false);
      Class<Integer> class2 = Integer.class;
      ObjectReader objectReader0 = objectMapper3.readerFor(class2);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, objectReader0);
      treeTraversingParser0.getEmbeddedObject();
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.nextToken();
      assertEquals(8, treeTraversingParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = true;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      String string0 = "#C!H%mQgev>^1";
      short short0 = (short)0;
      objectNode0.put("#C!H%mQgev>^1", "#C!H%mQgev>^1");
      objectNode0.binaryNode((byte[]) null);
      ObjectNode objectNode1 = objectNode0.put("#C!H%mQgev>^1", (short)0);
      objectNode0.asBoolean(true);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode1);
      treeTraversingParser0.getTokenLocation();
      try { 
        treeTraversingParser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectNode objectNode0 = arrayNode0.addObject();
      ObjectNode objectNode1 = objectNode0.putNull((String) null);
      ObjectNode objectNode2 = objectNode1.put((String) null, 0.0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      JsonInclude.Include jsonInclude_Include1 = JsonInclude.Include.NON_DEFAULT;
      Class<String> class0 = String.class;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include1, class0, class0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Value0);
      ObjectMapper objectMapper3 = objectMapper2.setPropertyNamingStrategy((PropertyNamingStrategy) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode2, objectMapper3);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.setCodec(objectMapper0);
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      Byte byte0 = new Byte((byte)3);
      ValueNode valueNode0 = arrayNode0.numberNode(byte0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      POJONode pOJONode0 = new POJONode((Object) null);
      pOJONode0.asDouble();
      Byte byte1 = new Byte((byte)3);
      arrayNode0.numberNode(byte1);
      List<JsonNode> list0 = pOJONode0.findParents("Cxw[#1OXE=n\"V");
      List<JsonNode> list1 = arrayNode0.findValues("Cxw[#1OXE=n\"V", list0);
      arrayNode0.findValues("Cxw[#1OXE=n\"V", list1);
      treeTraversingParser0.getBigIntegerValue();
      treeTraversingParser0.isClosed();
      treeTraversingParser0.getDecimalValue();
      treeTraversingParser0.currentNumericNode();
      treeTraversingParser0.getEmbeddedObject();
      treeTraversingParser0.getNumberValue();
      treeTraversingParser0.currentNode();
      treeTraversingParser0.version();
      treeTraversingParser0.getCurrentName();
      treeTraversingParser0.getBigIntegerValue();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Cxw[#1OXE=n\"V", (String) null, false, ' ', (byte)3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode(0.0F);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Locale locale0 = Locale.US;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, objectMapper3);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jsonNodeFactory0.numberNode(bigInteger0);
      treeTraversingParser0.getTextOffset();
      bigInteger0.longValueExact();
      treeTraversingParser0.getCodec();
      bigInteger0.testBit(0);
      jsonNodeFactory0.arrayNode(0);
      arrayNode0.isValueNode();
      jsonNodeFactory0.pojoNode(arrayNode0);
      jsonNodeFactory0.numberNode(bigInteger0);
      treeTraversingParser0.overrideCurrentName("G`k:OXKgGCkRbT3j");
      treeTraversingParser0.getCurrentLocation();
      treeTraversingParser0.nextValue();
      treeTraversingParser0.getCurrentLocation();
      treeTraversingParser0.getParsingContext();
      try { 
        treeTraversingParser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      jsonNodeFactory0.numberNode(1.0);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(0.0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.overrideStdFeatures(1, 1);
      treeTraversingParser0.getEmbeddedObject();
      treeTraversingParser0.getEmbeddedObject();
      treeTraversingParser0.isNaN();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(503);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[9];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      JsonParser.Feature jsonParser_Feature8 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[8] = jsonParser_Feature8;
      objectMapper0.enable(jsonParser_FeatureArray0);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPropertyInclusion(jsonInclude_Include0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, objectMapper3);
      treeTraversingParser0.currentNode();
      try { 
        treeTraversingParser0.currentNumericNode();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      TreeTraversingParser treeTraversingParser0 = null;
      try {
        treeTraversingParser0 = new TreeTraversingParser((JsonNode) null, objectMapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      bigIntegerNode0.asDouble(0.0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.add(bigInteger0);
      bigInteger0.add(bigInteger1);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      double double0 = 1.0;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "", true, 'K', 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0);
      objectMapper0.createArrayNode();
      ObjectNode objectNode0 = objectMapper2.createObjectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0, objectMapper0);
      treeTraversingParser0.setCodec(objectMapper1);
      try { 
        treeTraversingParser0.currentNumericNode();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      jsonNodeFactory0.textNode("");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      treeTraversingParser0.getValueAsBoolean();
      try { 
        treeTraversingParser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TreeTraversingParser treeTraversingParser0 = null;
      try {
        treeTraversingParser0 = new TreeTraversingParser((JsonNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      Integer integer0 = new Integer(2941);
      ObjectNode objectNode1 = objectNode0.put("", integer0);
      ObjectNode objectNode2 = objectNode1.put("}3WR(SzqKbJ[", true);
      ObjectNode objectNode3 = objectNode2.deepCopy();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode3);
      treeTraversingParser0.close();
      assertTrue(treeTraversingParser0.isClosed());
  }
}
