/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:26:05 GMT 2021
 */

package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonStreamContext;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NodeCursor;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.util.RawValue;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TreeTraversingParser_ESTest extends TreeTraversingParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      NumericNode numericNode0 = arrayNode0.numberNode((short)2087);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      treeTraversingParser0.setCodec(objectMapper0);
      assertFalse(treeTraversingParser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MissingNode missingNode0 = MissingNode.getInstance();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      treeTraversingParser0.enable(jsonParser_Feature0);
      JsonParser jsonParser0 = treeTraversingParser0.skipChildren();
      assertFalse(jsonParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      JsonParser jsonParser0 = treeTraversingParser0.overrideStdFeatures((-2249), (-1));
      JsonParser jsonParser1 = jsonParser0.skipChildren();
      assertEquals(0, jsonParser1.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ShortNode shortNode0 = ShortNode.valueOf((short)346);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) byteArrayOutputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      byte[] byteArray0 = new byte[9];
      BinaryNode binaryNode0 = arrayNode0.binaryNode(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      int int0 = treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) byteArrayBuilder0);
      assertEquals(9, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      BooleanNode booleanNode0 = arrayNode0.booleanNode(false);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      JsonToken jsonToken0 = treeTraversingParser0.nextToken();
      assertEquals("false", jsonToken0.asString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      POJONode pOJONode0 = new POJONode(arrayNode0);
      JsonNode jsonNode0 = pOJONode0.path((-2264));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0);
      JsonToken jsonToken0 = treeTraversingParser0.nextToken();
      assertEquals(JsonToken.NOT_AVAILABLE, jsonToken0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Double double0 = new Double((-510.34538629));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.close();
      boolean boolean0 = treeTraversingParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextToken();
      int int0 = treeTraversingParser0.getTextLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      NumericNode numericNode0 = arrayNode0.numberNode((short)2087);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.nextToken();
      int int0 = treeTraversingParser0.getTextLength();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextToken();
      char[] charArray0 = treeTraversingParser0.getTextCharacters();
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      treeTraversingParser0.nextLongValue(3);
      treeTraversingParser0.nextToken();
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertNull(jsonStreamContext0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertEquals("OBJECT", jsonStreamContext0.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertFalse(jsonStreamContext0.inRoot());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0, objectMapper0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertEquals((byte)10, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      NumericNode numericNode0 = arrayNode0.numberNode((short)2087);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals(2087L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      Integer integer0 = new Integer((-832));
      arrayNode0.insert(91, integer0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextToken();
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals((-832L), long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(0.0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ShortNode shortNode0 = ShortNode.valueOf((short)346);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals(346, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Double double0 = new Double((-510.34538629));
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ValueNode valueNode0 = arrayNode0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals((-510), int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Double double0 = new Double(0.0);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Double double0 = new Double((-510.34538629));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals((-510.3454F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ShortNode shortNode0 = new ShortNode((short)0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Double double0 = new Double((-510.34538629));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      double double1 = treeTraversingParser0.getDoubleValue();
      assertEquals((-510.34538629), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Double double0 = new Double((-510.34538629));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((short) (-510), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Double double0 = new Double(3810.9);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((short)3810, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = objectNode0.put("index value outside legal index range [0..%s]", 0.0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode1);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getCurrentName();
      assertEquals("index value outside legal index range [0..%s]", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("", (Float) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode1);
      treeTraversingParser0.nextBooleanValue();
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getCurrentName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LongNode longNode0 = new LongNode(2147483647L);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0, objectReader0);
      ObjectCodec objectCodec0 = treeTraversingParser0.getCodec();
      assertSame(objectReader0, objectCodec0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonNode jsonNode0 = objectReader0.createObjectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0);
      byte[] byteArray0 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      byte[] byteArray0 = new byte[9];
      BinaryNode binaryNode0 = arrayNode0.binaryNode(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      byte[] byteArray1 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      byte[] byteArray0 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ShortNode shortNode0 = new ShortNode((short)256);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayList<JsonNode> arrayList0 = new ArrayList<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, arrayList0);
      Integer integer0 = new Integer(2);
      ValueNode valueNode0 = arrayNode0.numberNode(integer0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((short)2, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      NumericNode numericNode0 = arrayNode0.numberNode((short)2087);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertFalse(jsonNode0.isInt());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LongNode longNode0 = new LongNode(3547L);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0, objectReader0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertTrue(jsonNode0.canConvertToLong());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1);
      Byte byte0 = new Byte((byte)1);
      ValueNode valueNode0 = arrayNode0.numberNode(byte0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertFalse(jsonNode0.isBigInteger());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      Float float0 = new Float((-2617.3625943224015));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(float0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertFalse(jsonNode0.isShort());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Double double0 = new Double((-510.34538629));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertTrue(jsonNode0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertFalse(jsonNode0.isShort());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertEquals(0, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ShortNode shortNode0 = new ShortNode((short)2085);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertSame(shortNode0, jsonNode0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode(151L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertEquals((short)151, jsonNode0.shortValue());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      IntNode intNode0 = IntNode.valueOf(1);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertEquals(JsonParser.NumberType.INT, jsonNode0.numberType());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(5067.964F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertTrue(jsonNode0.canConvertToLong());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Double double0 = new Double((-510.34538629));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertTrue(jsonNode0.isDouble());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isArray());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DecimalNode decimalNode0 = new DecimalNode((BigDecimal) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isObject());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isFloat());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MissingNode missingNode0 = new MissingNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isLong());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      Double double0 = new Double(556);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      arrayNode0.insert(556, (JsonNode) valueNode0);
      treeTraversingParser0.nextToken();
      // Undeclared exception!
      try { 
        treeTraversingParser0.nextToken();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MissingNode missingNode0 = MissingNode.getInstance();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      treeTraversingParser0.close();
      treeTraversingParser0._startContainer = true;
      // Undeclared exception!
      try { 
        treeTraversingParser0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      byte[] byteArray0 = new byte[8];
      BinaryNode binaryNode0 = arrayNode0.binaryNode(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Double double0 = new Double(566.8);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.close();
      try { 
        treeTraversingParser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getLongValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      try { 
        treeTraversingParser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getIntValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getFloatValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.BigIntegerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>(2398);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      try { 
        treeTraversingParser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DecimalNode decimalNode0 = new DecimalNode((BigDecimal) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getDoubleValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      try { 
        treeTraversingParser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      JsonNode jsonNode0 = jsonNodeFactory0.missingNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0);
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (NOT_AVAILABLE) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      try { 
        treeTraversingParser0.currentNumericNode();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      TreeTraversingParser treeTraversingParser0 = null;
      try {
        treeTraversingParser0 = new TreeTraversingParser((JsonNode) null, objectReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TreeTraversingParser treeTraversingParser0 = null;
      try {
        treeTraversingParser0 = new TreeTraversingParser((JsonNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      NumericNode numericNode0 = arrayNode0.numberNode((short)2087);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertEquals("2087", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Double double0 = new Double((-510.34538629));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertEquals("-510.34538629", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1);
      Byte byte0 = new Byte((byte)1);
      ValueNode valueNode0 = arrayNode0.numberNode(byte0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonLocation jsonLocation0 = treeTraversingParser0.getCurrentLocation();
      assertEquals((-1L), jsonLocation0.getCharOffset());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ShortNode shortNode0 = new ShortNode((short)2085);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      treeTraversingParser0.close();
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      MockFile mockFile0 = new MockFile("F`4xVij_c", "F`4xVij_c");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      try { 
        treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getBinaryValue((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      POJONode pOJONode0 = new POJONode(arrayNode0);
      JsonNode jsonNode0 = pOJONode0.path((-2264));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0);
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ShortNode shortNode0 = new ShortNode((short)2085);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ShortNode shortNode0 = new ShortNode((short)2085);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      treeTraversingParser0.close();
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      NullNode nullNode0 = NullNode.instance;
      RawValue rawValue0 = new RawValue(nullNode0);
      ValueNode valueNode0 = arrayNode0.rawValueNode(rawValue0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertSame(object0, rawValue0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1);
      Byte byte0 = new Byte((byte)1);
      ValueNode valueNode0 = arrayNode0.numberNode(byte0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      NumericNode numericNode0 = arrayNode0.numberNode((short)2087);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.close();
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ShortNode shortNode0 = new ShortNode((short)2085);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      JsonParser.NumberType jsonParser_NumberType0 = treeTraversingParser0.getNumberType();
      assertEquals(JsonParser.NumberType.INT, jsonParser_NumberType0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MissingNode missingNode0 = new MissingNode();
      POJONode pOJONode0 = new POJONode(missingNode0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
      treeTraversingParser0.nextLongValue((byte)54);
      String string0 = treeTraversingParser0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertEquals("{", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Double double0 = new Double(3810.9);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.nextToken();
      char[] charArray0 = treeTraversingParser0.getTextCharacters();
      assertArrayEquals(new char[] {'3', '8', '1', '0', '.', '9'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      TextNode textNode0 = jsonNodeFactory0.textNode("");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = objectNode0.put("", 0.0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode1);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getText();
      assertEquals(5, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Double double0 = new Double((-510.34538629));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.close();
      String string0 = treeTraversingParser0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectNode objectNode0 = arrayNode0.insertObject(2615);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      treeTraversingParser0.overrideCurrentName("/L3xrqlq7OW");
      assertFalse(treeTraversingParser0.hasTextCharacters());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectNode objectNode0 = arrayNode0.insertObject(2615);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.overrideCurrentName(";ra8U.");
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Double double0 = new Double((-510.34538629));
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ValueNode valueNode0 = arrayNode0.numberNode(double0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.currentName();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      String string0 = treeTraversingParser0.getCurrentName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.skipChildren();
      assertEquals(4, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.skipChildren();
      assertEquals(2, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      arrayNode0.insertObject(1);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextToken();
      assertEquals(JsonToken.START_OBJECT, treeTraversingParser0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      TextNode textNode0 = jsonNodeFactory0.textNode("");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.nextFieldName();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ShortNode shortNode0 = ShortNode.valueOf((short) (-1192));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      treeTraversingParser0._nextToken = jsonToken0;
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextLongValue((short) (-1192));
      treeTraversingParser0.nextToken();
      assertEquals(2, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ShortNode shortNode0 = ShortNode.valueOf((short) (-1192));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextLongValue((short) (-1192));
      assertEquals(4, treeTraversingParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ShortNode shortNode0 = new ShortNode((short)2085);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.close();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ShortNode shortNode0 = new ShortNode((short)19);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals(19.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextCharacters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MissingNode missingNode0 = new MissingNode();
      POJONode pOJONode0 = new POJONode(missingNode0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
      try { 
        treeTraversingParser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DecimalNode decimalNode0 = new DecimalNode((BigDecimal) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      JsonLocation jsonLocation0 = treeTraversingParser0.getTokenLocation();
      assertEquals((-1L), jsonLocation0.getByteOffset());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      NodeCursor.RootCursor nodeCursor_RootCursor0 = (NodeCursor.RootCursor)treeTraversingParser0.getParsingContext();
      assertNull(nodeCursor_RootCursor0.endToken());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ShortNode shortNode0 = ShortNode.valueOf((short) (-1192));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      treeTraversingParser0.nextLongValue((short) (-1192));
      treeTraversingParser0.nextToken();
      try { 
        treeTraversingParser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      Float float0 = new Float((-2617.3625943224015));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(float0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((byte) (-57), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      boolean boolean0 = treeTraversingParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ShortNode shortNode0 = ShortNode.valueOf((short)2107);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      int int0 = treeTraversingParser0.getTextOffset();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      Float float0 = new Float((-2617.3625943224015));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(float0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      boolean boolean0 = treeTraversingParser0.hasTextCharacters();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1);
      Byte byte0 = new Byte((byte)1);
      ValueNode valueNode0 = arrayNode0.numberNode(byte0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      ObjectCodec objectCodec0 = treeTraversingParser0.getCodec();
      assertNull(objectCodec0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ShortNode shortNode0 = new ShortNode((short)2085);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals(2085.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1);
      Byte byte0 = new Byte((byte)1);
      ValueNode valueNode0 = arrayNode0.numberNode(byte0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      Version version0 = treeTraversingParser0.version();
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
  }
}
