/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 31 14:21:22 GMT 2021
 */

package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonStreamContext;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NodeCursor;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.util.RawValue;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TreeTraversingParser_ESTest extends TreeTraversingParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(3017.277096058926);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      treeTraversingParser0.setCodec(objectMapper0);
      assertEquals(0, treeTraversingParser0.getTextOffset());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IntNode intNode0 = new IntNode(728);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      treeTraversingParser0.enable(jsonParser_Feature0);
      JsonParser jsonParser0 = treeTraversingParser0.skipChildren();
      assertEquals(0, jsonParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.overrideStdFeatures((-619), (-619));
      JsonParser jsonParser0 = treeTraversingParser0.skipChildren();
      assertEquals(0, jsonParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      int int0 = treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) dataOutputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      JsonToken jsonToken0 = treeTraversingParser0.nextToken();
      assertEquals("true", jsonToken0.asString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MissingNode missingNode0 = new MissingNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      JsonToken jsonToken0 = treeTraversingParser0.nextToken();
      assertFalse(jsonToken0.isNumeric());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      treeTraversingParser0.close();
      boolean boolean0 = treeTraversingParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextToken();
      int int0 = treeTraversingParser0.getTextLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf(204L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      treeTraversingParser0.nextToken();
      int int0 = treeTraversingParser0.getTextLength();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IntNode intNode0 = new IntNode(728);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
      treeTraversingParser0.nextFieldName();
      char[] charArray0 = treeTraversingParser0.getTextCharacters();
      assertArrayEquals(new char[] {'7', '2', '8'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      JsonNode jsonNode0 = pOJONode0.path(842);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0, (ObjectCodec) null);
      treeTraversingParser0.nextLongValue(842);
      treeTraversingParser0.nextFieldName();
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertNull(jsonStreamContext0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      ObjectNode objectNode0 = arrayNode0.objectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertTrue(jsonStreamContext0.inObject());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertFalse(jsonStreamContext0.hasCurrentIndex());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertEquals("ROOT", jsonStreamContext0.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DecimalNode decimalNode0 = new DecimalNode((BigDecimal) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-16);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertNotSame(bigDecimal0, number0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      IntNode intNode0 = new IntNode(728);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals(728L, long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode((long) (short) (-318));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals((-318L), long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode(0.0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, objectMapper0);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IntNode intNode0 = new IntNode(728);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals(728, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LongNode longNode0 = new LongNode((-568L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals((-568), int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IntNode intNode0 = new IntNode(728);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals(728.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LongNode longNode0 = new LongNode((-568L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals((-568.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode(0.0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, objectMapper0);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LongNode longNode0 = new LongNode((-2384L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals((-2384.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode(0L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IntNode intNode0 = new IntNode(5);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((short)5, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode((long) (short) (-318));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((byte) (-62), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      Float float0 = new Float((double) 4893);
      objectNode0.put("", float0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextFieldName();
      String string0 = treeTraversingParser0.getCurrentName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0, objectMapper0);
      ObjectCodec objectCodec0 = treeTraversingParser0.getCodec();
      assertSame(objectMapper0, objectCodec0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(10000);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, (ObjectCodec) null);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((short)10000, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LongNode longNode0 = new LongNode((-2350L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((byte) (-46), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ShortNode shortNode0 = new ShortNode((short)4);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertSame(shortNode0, jsonNode0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      Byte byte0 = new Byte((byte)27);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(byte0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertEquals(27.0F, jsonNode0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode(6.819231F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertEquals(6.819231033325195, jsonNode0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(3017.277096058926);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertTrue(jsonNode0.isDouble());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertFalse(jsonNode0.isShort());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode(0L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertEquals(0, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertEquals(0, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ShortNode shortNode0 = ShortNode.valueOf((short)3306);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertEquals(3306.0F, jsonNode0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MissingNode missingNode0 = MissingNode.getInstance();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertTrue(jsonNode0.isMissingNode());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LongNode longNode0 = new LongNode((-2384L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertEquals((-2384.0F), jsonNode0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IntNode intNode0 = new IntNode(728);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(intNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertTrue(jsonNode0.isInt());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf((-1260.424F));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertNull(jsonNode0.textValue());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode(0.0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, objectMapper0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertEquals(0L, jsonNode0.longValue());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      MockRandom mockRandom0 = new MockRandom(1609L);
      BigInteger bigInteger0 = BigInteger.probablePrime(5, mockRandom0);
      ValueNode valueNode0 = arrayNode0.numberNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isBigDecimal());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      NullNode nullNode0 = arrayNode0.nullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      NodeCursor.RootCursor nodeCursor_RootCursor0 = (NodeCursor.RootCursor)treeTraversingParser0._nodeCursor;
      NodeCursor.RootCursor nodeCursor_RootCursor1 = new NodeCursor.RootCursor(arrayNode0, nodeCursor_RootCursor0);
      NodeCursor.ArrayCursor nodeCursor_ArrayCursor0 = new NodeCursor.ArrayCursor(decimalNode0, nodeCursor_RootCursor1);
      treeTraversingParser0._nodeCursor = (NodeCursor) nodeCursor_ArrayCursor0;
      treeTraversingParser0.nextFieldName(jsonFactory0.DEFAULT_ROOT_VALUE_SEPARATOR);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isIntegralNumber());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0, objectMapper0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isIntegralNumber());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertTrue(jsonNode0.isFloatingPointNumber());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NullNode nullNode0 = NullNode.instance;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.close();
      treeTraversingParser0._startContainer = true;
      // Undeclared exception!
      try { 
        treeTraversingParser0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      try { 
        treeTraversingParser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      try { 
        treeTraversingParser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      try { 
        treeTraversingParser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DecimalNode decimalNode0 = new DecimalNode((BigDecimal) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, objectMapper0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      try { 
        treeTraversingParser0.currentNumericNode();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TreeTraversingParser treeTraversingParser0 = null;
      try {
        treeTraversingParser0 = new TreeTraversingParser((JsonNode) null, (ObjectCodec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TreeTraversingParser treeTraversingParser0 = null;
      try {
        treeTraversingParser0 = new TreeTraversingParser((JsonNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.nextIntValue((-734));
      String string0 = treeTraversingParser0.getText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.close();
      String string0 = treeTraversingParser0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      NullNode nullNode0 = arrayNode0.nullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      JsonLocation jsonLocation0 = treeTraversingParser0.getCurrentLocation();
      assertEquals((-1), jsonLocation0.getLineNr());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      JsonNode jsonNode0 = pOJONode0.path(842);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0, (ObjectCodec) null);
      treeTraversingParser0.nextLongValue(842);
      treeTraversingParser0.nextFieldName();
      try { 
        treeTraversingParser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NullNode nullNode0 = NullNode.getInstance();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      int int0 = treeTraversingParser0.readBinaryValue((OutputStream) byteArrayBuilder0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0, objectMapper0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getBinaryValue((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      byte[] byteArray0 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.getBinaryValue((Base64Variant) null);
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      JsonNode jsonNode0 = pOJONode0.path(842);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0, (ObjectCodec) null);
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NullNode nullNode0 = new NullNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      treeTraversingParser0.close();
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertTrue(treeTraversingParser0.isClosed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NullNode nullNode0 = NullNode.instance;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ValueNode valueNode0 = jsonNodeFactory0.rawValueNode((RawValue) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonNode jsonNode0 = dOMSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf(21L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      treeTraversingParser0._closed = true;
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf(21L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      JsonParser.NumberType jsonParser_NumberType0 = treeTraversingParser0.getNumberType();
      assertEquals(JsonParser.NumberType.LONG, jsonParser_NumberType0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      POJONode pOJONode0 = new POJONode(decimalNode0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.nextValue();
      char[] charArray0 = treeTraversingParser0.getTextCharacters();
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.close();
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectNode objectNode0 = arrayNode0.objectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      treeTraversingParser0.overrideCurrentName("");
      assertEquals(0, treeTraversingParser0.getTextOffset());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.overrideCurrentName("");
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getCurrentName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      treeTraversingParser0._nextToken = jsonToken0;
      treeTraversingParser0.nextFieldName();
      String string0 = treeTraversingParser0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.skipChildren();
      assertEquals(JsonToken.END_ARRAY, treeTraversingParser0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.skipChildren();
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      arrayNode0.addObject();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      treeTraversingParser0.nextToken();
      JsonToken jsonToken0 = treeTraversingParser0.nextToken();
      assertFalse(jsonToken0.isScalarValue());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      JsonNode jsonNode0 = pOJONode0.path(842);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0, (ObjectCodec) null);
      treeTraversingParser0.nextLongValue(842);
      treeTraversingParser0.nextFieldName();
      JsonNode jsonNode1 = treeTraversingParser0.currentNode();
      assertNull(jsonNode1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.nextToken();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf(21L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      treeTraversingParser0._nextToken = jsonToken0;
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextToken();
      assertEquals(JsonToken.END_OBJECT, treeTraversingParser0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf(21L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextToken();
      assertEquals(4, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf(21L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      treeTraversingParser0._nextToken = jsonToken0;
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertEquals("{", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf(21L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getText();
      assertTrue(treeTraversingParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.close();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf(21L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals(21.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      try { 
        treeTraversingParser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0, objectMapper0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextCharacters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      try { 
        treeTraversingParser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      JsonNode jsonNode0 = pOJONode0.path(842);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0, (ObjectCodec) null);
      JsonLocation jsonLocation0 = treeTraversingParser0.getTokenLocation();
      assertEquals((-1L), jsonLocation0.getByteOffset());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf(21L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NullNode nullNode0 = NullNode.instance;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_NULL) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      byte[] byteArray0 = new byte[2];
      BinaryNode binaryNode0 = arrayNode0.binaryNode(byteArray0, (int) (byte)4, (int) (byte)0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      boolean boolean0 = treeTraversingParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      byte[] byteArray0 = new byte[2];
      BinaryNode binaryNode0 = arrayNode0.binaryNode(byteArray0, (int) (byte)4, (int) (byte)0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      int int0 = treeTraversingParser0.getTextOffset();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      boolean boolean0 = treeTraversingParser0.hasTextCharacters();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode(0L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      ObjectCodec objectCodec0 = treeTraversingParser0.getCodec();
      assertNull(objectCodec0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      JsonNode jsonNode0 = pOJONode0.path(842);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0, (ObjectCodec) null);
      Version version0 = treeTraversingParser0.version();
      assertFalse(version0.isUnknownVersion());
  }
}
