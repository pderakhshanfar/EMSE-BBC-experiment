/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 31 08:29:45 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckSideEffects;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NameReferenceGraph;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.PreprocessorSymbolTable;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.jscomp.ScopedAliases;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.StatementFusion;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.rhino.Node;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ScopedAliases_ESTest extends ScopedAliases_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, (CompilerOptions.AliasTransformationHandler) null);
      scopedAliases0.hotSwapScript((Node) null, (Node) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "");
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, (CompilerOptions.AliasTransformationHandler) null);
      scopedAliases0.hotSwapScript(node0, node0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Logger logger0 = Logger.getLogger("JSC_GOOG_SCOPE_NON_ALIAS_LOCAL");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      CheckSideEffects.StripProtection checkSideEffects_StripProtection0 = new CheckSideEffects.StripProtection(compiler0);
      Compiler compiler1 = new Compiler();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects_StripProtection0, syntacticScopeCreator0);
      nodeTraversal0.getCurrentNode();
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable((Node) null);
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, (CompilerOptions.AliasTransformationHandler) null);
      nodeTraversal0.getCurrentNode();
      scopedAliases0.hotSwapScript((Node) null, (Node) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      Node node0 = new Node(0, 0, 2384);
      scopedAliases0.hotSwapScript(node0, node0);
      Node node1 = Node.newNumber((double) 2384, 57, 30);
      node0.getString();
      node0.addChildBefore(node1, node1);
      scopedAliases0.hotSwapScript(node0, node0);
      scopedAliases0.hotSwapScript(node0, node0);
      // Undeclared exception!
      try { 
        scopedAliases0.process(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "");
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
      PreprocessorSymbolTable preprocessorSymbolTable1 = new PreprocessorSymbolTable(node0);
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, (CompilerOptions.AliasTransformationHandler) null);
      Node node1 = new Node(12, node0, node0);
      Node node2 = new Node(37, node1);
      scopedAliases0.hotSwapScript(node1, node1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      defaultPassConfig0.getPreprocessorSymbolTable();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = compiler0.parseTestCode("(@]k9:opN/h &}^,4qZ");
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      scopedAliases0.process(node1, node1);
      StatementFusion statementFusion0 = new StatementFusion();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node2 = Node.newString("^p ME^drH", 65536, 65536);
      scopedAliases0.process(node2, node2);
      Node node3 = peepholeRemoveDeadCode0.optimizeSubtree(node2);
      statementFusion0.endTraversal(compiler0);
      Node node4 = statementFusion0.tryFuseStatementsAggressively(node3);
      node4.setType(55);
      statementFusion0.isEcmaScript5OrGreater();
      scopedAliases0.process(node4, node3);
      Node node5 = ControlFlowAnalysis.getExceptionHandler(node3);
      scopedAliases0.hotSwapScript(node5, node4);
      exploitAssigns0.nodeTypeMayHaveSideEffects(node1);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = null;
      try {
        peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(statementFusion0.SHOULD_FAVOR_COMMA_OVER_SEMI_COLON);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.externAndJsRoot;
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable((Node) null);
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, (CompilerOptions.AliasTransformationHandler) null);
      scopedAliases0.process((Node) null, (Node) null);
      // Undeclared exception!
      try { 
        scopedAliases0.hotSwapScript(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      defaultPassConfig0.getPreprocessorSymbolTable();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = compiler0.parseTestCode("(@]k9:opN/h &}^,4qZ");
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      node0.toStringTree();
      scopedAliases0.process(node1, node1);
      StatementFusion statementFusion0 = new StatementFusion();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node2 = Node.newString("^p ME^drH", 65536, 65536);
      scopedAliases0.process(node2, node2);
      Node node3 = peepholeRemoveDeadCode0.optimizeSubtree(node2);
      statementFusion0.endTraversal(compiler0);
      Node node4 = statementFusion0.tryFuseStatementsAggressively(node3);
      node4.setType(55);
      statementFusion0.isEcmaScript5OrGreater();
      scopedAliases0.process(node4, node3);
      scopedAliases0.process(node1, node3);
      scopedAliases0.process(node0, node1);
      Node node5 = ControlFlowAnalysis.getExceptionHandler(node3);
      scopedAliases0.hotSwapScript(node5, node4);
      exploitAssigns0.nodeTypeMayHaveSideEffects(node1);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = null;
      try {
        peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(statementFusion0.SHOULD_FAVOR_COMMA_OVER_SEMI_COLON);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.gogle.common.collect.vultisets$EntrySet");
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, (CompilerOptions.AliasTransformationHandler) null);
      Node node1 = new Node(37, node0);
      scopedAliases0.hotSwapScript(node0, node1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "");
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, (CompilerOptions.AliasTransformationHandler) null);
      Node node1 = new Node((-1), node0);
      scopedAliases0.hotSwapScript(node0, node1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ScopedAliases scopedAliases0 = new ScopedAliases((AbstractCompiler) null, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      scopedAliases0.hotSwapScript((Node) null, (Node) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Node node0 = new Node(37);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      Compiler compiler0 = new Compiler();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
      scopedAliases0.hotSwapScript(node0, node0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ScopedAliases scopedAliases0 = new ScopedAliases((AbstractCompiler) null, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      scopedAliases0.process(node0, node0);
      scopedAliases0.hotSwapScript(node0, node0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      Compiler compiler0 = new Compiler();
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, (CompilerOptions.AliasTransformationHandler) null);
      scopedAliases0.hotSwapScript(node0, node0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      defaultPassConfig0.getPreprocessorSymbolTable();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, (CompilerOptions.AliasTransformationHandler) null);
      Node node0 = new Node(105, 105, 2);
      scopedAliases0.hotSwapScript(node0, node0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      Compiler compiler0 = new Compiler();
      Node node1 = new Node(0, node0);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, (CompilerOptions.AliasTransformationHandler) null);
      scopedAliases0.hotSwapScript(node1, node0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      Compiler compiler0 = new Compiler();
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      defaultPassConfig0.getPreprocessorSymbolTable();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, (CompilerOptions.AliasTransformationHandler) null);
      Node node1 = new Node(1, node0);
      scopedAliases0.hotSwapScript(node1, node0);
  }
}
