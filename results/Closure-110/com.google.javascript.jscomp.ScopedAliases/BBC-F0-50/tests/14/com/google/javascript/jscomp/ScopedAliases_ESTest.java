/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 31 22:38:27 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableBiMap;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.CoverageInstrumentationCallback;
import com.google.javascript.jscomp.CoverageInstrumentationPass;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.FileInstrumentationData;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PeepholeFoldWithTypes;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.PreprocessorSymbolTable;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ScopedAliases;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplatizedType;
import java.io.File;
import java.io.PrintStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ScopedAliases_ESTest extends ScopedAliases_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.options;
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig((CompilerOptions) null);
      defaultPassConfig0.getPreprocessorSymbolTable();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "0GrN! |";
      String string1 = null;
      File file0 = MockFile.createTempFile("0GrN! |", (String) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) string0);
      Compiler compiler0 = new Compiler(printStream0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      PreprocessorSymbolTable preprocessorSymbolTable0 = defaultPassConfig0.getPreprocessorSymbolTable();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = compilerOptions0.getAliasTransformationHandler();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
      Node node0 = null;
      // Undeclared exception!
      try { 
        scopedAliases0.hotSwapScript(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "C";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) string0);
      Compiler compiler0 = new Compiler(printStream0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      PreprocessorSymbolTable preprocessorSymbolTable0 = defaultPassConfig0.getPreprocessorSymbolTable();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
      String string1 = "JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS";
      Node node0 = compiler0.parseSyntheticCode(string1, string0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[7];
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      jSTypeArray0[0] = (JSType) templateType0;
      String string2 = "";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string2, node0, jSTypeArray0[0]);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      JSDocInfo jSDocInfo0 = enumElementType0.getJSDocInfo();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      jSTypeArray0[1] = (JSType) objectType0;
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
      String string3 = "";
      int int0 = 83;
      JSType jSType0 = jSTypeRegistry1.getType((StaticScope<JSType>) enumType1, string3, objectType0.NOT_A_TYPE, node0.SYNTHETIC_BLOCK_PROP, int0);
      jSTypeArray0[2] = jSType0;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType1 = modificationVisitor0.caseTemplateType(templateType0);
      jSTypeArray0[3] = jSType1;
      TemplatizedType templatizedType0 = JSType.toMaybeTemplatizedType(jSTypeArray0[2]);
      jSTypeArray0[4] = (JSType) templatizedType0;
      JSType jSType2 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[5] = jSType2;
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
      JSType jSType3 = jSTypeRegistry1.getNativeType(jSTypeNative0);
      jSTypeArray0[6] = jSType3;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      scopedAliases0.hotSwapScript(node0, node1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      Compiler compiler0 = new Compiler((PrintStream) null);
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler1, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      scopedAliases0.process((Node) null, (Node) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      defaultPassConfig0.getPreprocessorSymbolTable();
      ScopedAliases scopedAliases0 = new ScopedAliases((AbstractCompiler) null, (PreprocessorSymbolTable) null, (CompilerOptions.AliasTransformationHandler) null);
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      lightweightMessageFormatter0.getLevelName(compilerOptions0.checkMissingGetCssNameLevel);
      File file0 = MockFile.createTempFile("wFR]vLK:4x8", "@E1|#;(a)");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      double double0 = (-1.0);
      mockPrintStream0.print(double0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = compiler0.parseSyntheticCode(compilerOptions0.inputDelimiter, compilerOptions0.aliasStringsBlacklist);
      scopedAliases0.hotSwapScript(node0, node0);
      scopedAliases0.process(node0, node0);
      scopedAliases0.hotSwapScript(node0, node0);
      scopedAliases0.hotSwapScript(node0, node0);
      // Undeclared exception!
      try { 
        scopedAliases0.hotSwapScript(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      defaultPassConfig0.getPreprocessorSymbolTable();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      Node node0 = Node.newString("F3'!u,");
      scopedAliases0.process(node0, node0);
      Node node1 = Node.newNumber((double) 4095);
      scopedAliases0.process(node1, node1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      defaultPassConfig0.getPreprocessorSymbolTable();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      Node node0 = Node.newString("F3'!u,");
      Node node1 = Node.newNumber((double) 1, 54, (-2066));
      scopedAliases0.hotSwapScript(node0, node0);
      scopedAliases0.process(node1, node0);
      Compiler compiler1 = new Compiler((PrintStream) null);
      ScopedAliases scopedAliases1 = new ScopedAliases(compiler1, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      scopedAliases1.process(node1, node0);
      scopedAliases0.process(node0, node1);
      scopedAliases0.hotSwapScript(node0, node1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      defaultPassConfig0.getPreprocessorSymbolTable();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler1 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ScopedAliases scopedAliases0 = new ScopedAliases((AbstractCompiler) null, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler1);
      Node node0 = Node.newString("F3'!u,");
      scopedAliases0.process(node0, node0);
      Node node1 = Node.newNumber((double) node0.OPT_ARG_NAME);
      scopedAliases0.process(node0, node1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      Node node0 = Node.newString("");
      defaultPassConfig0.getPreprocessorSymbolTable();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      scopedAliases0.process(node0, node0);
      Node node1 = Node.newNumber(1.0);
      scopedAliases0.process(node0, node0);
      Node node2 = new Node(1, node1);
      scopedAliases0.hotSwapScript(node1, node2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      Compiler compiler1 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler1, "U]O");
      Node node1 = new Node(461, node0, node0);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node2);
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
      Node node3 = Node.newString("U]O");
      scopedAliases0.process(node2, node2);
      Node node4 = Node.newNumber(0.0);
      scopedAliases0.process(node3, node0);
      scopedAliases0.process(node3, node2);
      defaultPassConfig0.getPreprocessorSymbolTable();
      ScopedAliases scopedAliases1 = new ScopedAliases(compiler1, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      scopedAliases1.hotSwapScript(node4, node0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      Node node0 = Node.newString("F3'!u,");
      Node node1 = new Node(37, node0);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      node0.putProp(2147483645, compilerOptions_AliasTransformationHandler0);
      Node node2 = peepholeFoldWithTypes0.optimizeSubtree(node1);
      scopedAliases0.process(node2, node0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      Node node0 = Node.newString("goog.scope");
      node0.setType(38);
      Node node1 = new Node(37, node0);
      Compiler compiler0 = new Compiler();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      scopedAliases0.hotSwapScript(node1, node0);
      scopedAliases0.hotSwapScript(node1, node1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      Node node0 = Node.newString("goog.scope");
      node0.setType(38);
      Node.newString("dE3^", 48, 37);
      Node node1 = new Node(37, node0);
      Compiler compiler0 = new Compiler();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      scopedAliases0.process(node0, node0);
      ScopedAliases scopedAliases1 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      scopedAliases1.hotSwapScript(node1, node0);
      scopedAliases1.hotSwapScript(node1, node1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      Node node0 = Node.newString("goog.scope");
      node0.setType(38);
      Node node1 = Node.newString("dE3^", 48, 37);
      Node node2 = new Node(37, node0);
      Compiler compiler0 = new Compiler();
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node3 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
      scopedAliases0.process(node0, node3);
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler1 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ScopedAliases scopedAliases1 = new ScopedAliases(compiler0, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler1);
      scopedAliases0.hotSwapScript(node2, node0);
      scopedAliases1.hotSwapScript(node1, node0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      Node node0 = Node.newString("goog.scope");
      node0.setType(38);
      Node node1 = new Node(37, node0);
      Node node2 = new Node((-4020), node1);
      Compiler compiler0 = new Compiler();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      ScopedAliases scopedAliases1 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      scopedAliases1.hotSwapScript(node1, node0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      Node node0 = Node.newString("goog.|cope");
      node0.setType(105);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = peepholeRemoveDeadCode0.tryOptimizeBlock(node0);
      Node node2 = new Node(15, node0, 36, 16);
      Compiler compiler0 = new Compiler();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      scopedAliases0.hotSwapScript(node1, node2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      Node node0 = Node.newString("goog.|cope");
      node0.setType(105);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = peepholeRemoveDeadCode0.tryOptimizeBlock(node0);
      Node node2 = new Node(15, node0, 36, 16);
      Compiler compiler0 = new Compiler();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      scopedAliases0.hotSwapScript(node2, node1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      Node node0 = Node.newString("goog.scope");
      node0.setType(38);
      Node node1 = new Node(37, node0);
      Node node2 = new Node(49, node1);
      Compiler compiler0 = new Compiler();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      Node node3 = Normalize.parseAndNormalizeTestCode(compiler0, "goog.scope");
      scopedAliases0.hotSwapScript(node2, node3);
      scopedAliases0.hotSwapScript(node0, node2);
      scopedAliases0.process(node3, node2);
  }
}
