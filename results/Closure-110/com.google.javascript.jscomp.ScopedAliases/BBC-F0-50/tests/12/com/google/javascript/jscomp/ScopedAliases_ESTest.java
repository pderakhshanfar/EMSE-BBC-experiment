/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 31 08:30:11 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.PeepholeMinimizeConditions;
import com.google.javascript.jscomp.PreprocessorSymbolTable;
import com.google.javascript.jscomp.ReorderConstantExpression;
import com.google.javascript.jscomp.ScopedAliases;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ScopedAliases_ESTest extends ScopedAliases_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(false);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.ScopedAliases$AliasedNode");
      Node node1 = peepholeMinimizeConditions0.optimizeSubtree(node0);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node1);
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
      scopedAliases0.hotSwapScript(node0, node1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      defaultPassConfig0.getPreprocessorSymbolTable();
      compilerOptions0.outputJsStringUsage = false;
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      int int0 = (-2211);
      String string0 = "JSC_GOOG_SCOPE_USES_THROW";
      defaultPassConfig0.getPassGraph();
      compilerOptions0.setAcceptConstKeyword(false);
      int int1 = 49;
      scopedAliases0.process((Node) null, (Node) null);
      Node node0 = Node.newString(int0, string0, int1, int1);
      scopedAliases0.hotSwapScript(node0, node0);
      // Undeclared exception!
      try { 
        scopedAliases0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      defaultPassConfig0.getPreprocessorSymbolTable();
      defaultPassConfig0.getIntermediateState();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, (CompilerOptions.AliasTransformationHandler) null);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      tightenTypes0.getTopScope();
      TightenTypes.ConcreteScope tightenTypes_ConcreteScope0 = tightenTypes0.new ConcreteScope((TightenTypes.ConcreteScope) null);
      Node node0 = tightenTypes_ConcreteScope0.getRootNode();
      scopedAliases0.hotSwapScript((Node) null, (Node) null);
      // Undeclared exception!
      try { 
        scopedAliases0.hotSwapScript(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("oWqpmqE1Xk");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      defaultPassConfig0.getPreprocessorSymbolTable();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, (CompilerOptions.AliasTransformationHandler) null);
      mockPrintStream0.println((Object) compiler0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "The local variable {0} is in a goog.scope and is not an alias.");
      scopedAliases0.hotSwapScript(node0, node0);
      node0.appendStringTree(mockPrintStream0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      scopedAliases0.process(node0, node0);
      SyntheticAst syntheticAst0 = new SyntheticAst("enum initializer must be an object literal or an enum");
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      node0.setSideEffectFlags(57);
      peepholeFoldConstants0.isEcmaScript5OrGreater();
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      scopedAliases0.hotSwapScript(node2, node1);
      scopedAliases0.hotSwapScript(node2, node1);
      // Undeclared exception!
      try { 
        scopedAliases0.process(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got SCRIPT
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("oWqpmqE1Xk");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      defaultPassConfig0.getPreprocessorSymbolTable();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, (CompilerOptions.AliasTransformationHandler) null);
      mockPrintStream0.println((Object) compiler0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "The local variable {0} is in a goog.scope and is not an alias.");
      scopedAliases0.hotSwapScript(node0, node0);
      node0.appendStringTree(mockPrintStream0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      scopedAliases0.process(node0, node0);
      defaultPassConfig0.getPreprocessorSymbolTable();
      ScopedAliases scopedAliases1 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, (CompilerOptions.AliasTransformationHandler) null);
      scopedAliases1.process(node0, (Node) null);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig((CompilerOptions) null);
      defaultPassConfig0.getPreprocessorSymbolTable();
      ScopedAliases scopedAliases0 = new ScopedAliases((AbstractCompiler) null, (PreprocessorSymbolTable) null, (CompilerOptions.AliasTransformationHandler) null);
      scopedAliases0.process((Node) null, (Node) null);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("oWqpmqE1Xk");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      defaultPassConfig0.getPreprocessorSymbolTable();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = null;
      ScopedAliases scopedAliases0 = new ScopedAliases((AbstractCompiler) null, (PreprocessorSymbolTable) null, (CompilerOptions.AliasTransformationHandler) null);
      boolean boolean0 = true;
      mockPrintStream0.println((Object) compiler0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "oWqpmqE1Xk");
      scopedAliases0.hotSwapScript(node0, node0);
      node0.appendStringTree(mockPrintStream0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(boolean0);
      String string0 = "enum initializer must be an object literal or an enum";
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(false);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.ScopedAliases$AliasedNode");
      Node node1 = peepholeMinimizeConditions0.optimizeSubtree(node0);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node1);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      compilerOptions0.getAliasTransformationHandler();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = compilerOptions0.getAliasTransformationHandler();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
      Normalize.parseAndNormalizeTestCode(compiler0, "?h`IwHL#mQ,)");
      ScopedAliases scopedAliases1 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node2 = new Node(49, node1, node1, 1204, 2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      scopedAliases0.hotSwapScript(node3, node0);
      scopedAliases0.hotSwapScript(node0, node1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      defaultPassConfig0.getPreprocessorSymbolTable();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = compilerOptions0.getAliasTransformationHandler();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "");
      Node node1 = new Node(37, node0, 4, 2);
      node0.isUnscopedQualifiedName();
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node2 = reorderConstantExpression0.optimizeSubtree(node1);
      node1.isEquivalentToTyped(node2);
      scopedAliases0.process(node2, node2);
      scopedAliases0.hotSwapScript(node2, node0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "CaSouremKt()");
      Node node1 = new Node(16, node0, node0, node0);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
      node0.addChildrenToBack(node1);
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
      scopedAliases0.hotSwapScript(node0, node1);
      // Undeclared exception!
      try { 
        scopedAliases0.process(node0, node1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
