/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 03 13:08:59 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AbstractPeepholeOptimization;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.InlineProperties;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PeepholeFoldWithTypes;
import com.google.javascript.jscomp.PreprocessorSymbolTable;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ReorderConstantExpression;
import com.google.javascript.jscomp.ScopedAliases;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.Node;
import java.io.FileDescriptor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ScopedAliases_ESTest extends ScopedAliases_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      defaultPassConfig0.getPreprocessorSymbolTable();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, (CompilerOptions.AliasTransformationHandler) null);
      scopedAliases0.hotSwapScript((Node) null, (Node) null);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      scopedAliases0.process((Node) null, (Node) null);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber((-4409.0), 0, 0);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
      int int0 = (-608);
      Node[] nodeArray0 = null;
      scopedAliases0.process(node0, node0);
      Node node1 = new Node(47, (Node[]) null, 2, 57);
      Node node2 = AbstractPeepholeOptimization.validateResult(node1);
      // Undeclared exception!
      try { 
        node0.replaceChild(node2, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      defaultPassConfig0.getPreprocessorSymbolTable();
      SourceFile sourceFile0 = SourceFile.fromCode("4% ieCWP(>m[/", "JSC_GOOG_SCOPE_ALIAS_REDEFINED");
      Node node0 = compiler0.parse(sourceFile0);
      node0.children();
      Node node1 = new Node((-1829), node0);
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = compilerOptions0.getAliasTransformationHandler();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      scopedAliases0.hotSwapScript(node1, node1);
      scopedAliases0.hotSwapScript(node1, (Node) null);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Compiler compiler0 = new Compiler();
          SyntheticAst syntheticAst0 = new SyntheticAst("HaYdn$lR)&qq`qO");
          Node node0 = syntheticAst0.getAstRoot(compiler0);
          ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
          Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
          Node node2 = new Node((-2366), node1, node1, 8, (-357));
          Node node3 = Node.newString(0, "HaYdn$lR)&qq`qO");
          Compiler compiler1 = new Compiler();
          CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
          ScopedAliases scopedAliases0 = new ScopedAliases(compiler1, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
          scopedAliases0.process(node1, node1);
          scopedAliases0.process(node0, node2);
          CompilerOptions compilerOptions0 = new CompilerOptions();
          CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler1 = compilerOptions0.getAliasTransformationHandler();
          ScopedAliases scopedAliases1 = new ScopedAliases(compiler1, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler1);
          scopedAliases1.process(node3, node2);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
          MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
          PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
          Compiler compiler2 = new Compiler(printStreamErrorManager0);
          InlineProperties inlineProperties0 = new InlineProperties(compiler2);
          InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = null;
          try {
            inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PreprocessorSymbolTable preprocessorSymbolTable0 = null;
      SyntheticAst syntheticAst0 = new SyntheticAst("HaYdn$lR)&qq`qO");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
      Node node2 = new Node(37, node1, node1, 8, (-357));
      Node node3 = Node.newString(0, "HaYdn$lR)&qq`qO");
      Compiler compiler1 = new Compiler();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler1, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      scopedAliases0.process(node1, node1);
      scopedAliases0.process(node0, node2);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Node.newString((String) null);
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler1 = compilerOptions0.getAliasTransformationHandler();
      ScopedAliases scopedAliases1 = new ScopedAliases(compiler1, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler1);
      scopedAliases1.process(node3, node2);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      scopedAliases0.process(node3, node3);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      Node node0 = compiler0.parseTestCode("The aliases {0} has a cycle.");
      scopedAliases0.process(node0, node0);
      ScopedAliases scopedAliases1 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      scopedAliases1.process(node0, node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.getAliasTransformationHandler();
      AbstractCompiler abstractCompiler0 = null;
      ScopedAliases scopedAliases2 = new ScopedAliases((AbstractCompiler) null, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      scopedAliases2.process(node0, node0);
      NodeTraversal.Callback nodeTraversal_Callback0 = null;
      NodeTraversal nodeTraversal0 = null;
      try {
        nodeTraversal0 = new NodeTraversal(abstractCompiler0, nodeTraversal_Callback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      defaultPassConfig0.getPreprocessorSymbolTable();
      SourceFile sourceFile0 = SourceFile.fromCode("4% ieCWP(>m[/", "JSC_GOOG_SCOPE_ALIAS_REDEFINED");
      defaultPassConfig0.getPassGraph();
      Node node0 = compiler0.parse(sourceFile0);
      node0.children();
      Node node1 = new Node((-1810), node0);
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = compilerOptions0.getAliasTransformationHandler();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      node0.addChildToFront(node1);
      scopedAliases0.process(node0, node0);
      scopedAliases0.hotSwapScript(node1, node0);
      scopedAliases0.hotSwapScript(node1, node1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntheticAst syntheticAst0 = new SyntheticAst("HaYdn$lR)&qq`qO");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
      node1.addSuppression("HaYdn$lR)&qq`qO");
      Node node2 = new Node((-1002), node0, node1, 53, 37);
      Compiler compiler1 = new Compiler();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
      ScopedAliases scopedAliases0 = new ScopedAliases((AbstractCompiler) null, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
      scopedAliases0.hotSwapScript(node0, node0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceFile sourceFile0 = SourceFile.fromCode("4% ieCWP(>m[/", "JSC_GOOG_SCOPE_ALIAS_REDEFINED");
      Node node0 = compiler0.parse(sourceFile0);
      node0.children();
      compilerOptions0.setTrustedStrings(false);
      Node node1 = new Node((-1810), node0);
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = compilerOptions0.getAliasTransformationHandler();
      node0.addChildToFront(node1);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node1);
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
      scopedAliases0.hotSwapScript(node1, node0);
      long long0 = 1213L;
      System.setCurrentTimeMillis(long0);
  }
}
