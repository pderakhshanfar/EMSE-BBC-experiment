/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 03 13:08:58 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.DisambiguatePrivateProperties;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PreprocessorSymbolTable;
import com.google.javascript.jscomp.ScopedAliases;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.TemplatizedType;
import java.io.File;
import java.io.PrintStream;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ScopedAliases_ESTest extends ScopedAliases_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = "pd${Q>*ONK\"8<Z_R";
      File file0 = MockFile.createTempFile("pd${Q>*ONK\"8<Z_R", "pd${Q>*ONK\"8<Z_R", (File) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      boolean boolean0 = false;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, boolean0);
      int int0 = 0;
      int int1 = 0;
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) string0, int0, int1);
      Compiler compiler0 = new Compiler(printStream0);
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      PreprocessorSymbolTable preprocessorSymbolTable0 = defaultPassConfig0.getPreprocessorSymbolTable();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = compilerOptions0.getAliasTransformationHandler();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
      String string1 = "AR\"$yUQs+|&(m@YTb";
      Normalize.parseAndNormalizeSyntheticCode(compiler0, string1, compilerOptions0.syntheticBlockStartMarker);
      // Undeclared exception!
      try { 
        compiler0.getTypeRegistry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = compilerOptions0.getAliasTransformationHandler();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      Node node0 = compiler0.externsRoot;
      scopedAliases0.process((Node) null, (Node) null);
      // Undeclared exception!
      try { 
        scopedAliases0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Node node0 = Node.newString("dp\"", 0, (-181));
      Node node1 = new Node(46, node0, node0, node0);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node1);
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ScopedAliases scopedAliases0 = new ScopedAliases((AbstractCompiler) null, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
      scopedAliases0.hotSwapScript(node0, node1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable((Node) null);
      ScopedAliases scopedAliases0 = new ScopedAliases((AbstractCompiler) null, preprocessorSymbolTable0, (CompilerOptions.AliasTransformationHandler) null);
      scopedAliases0.process((Node) null, (Node) null);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Node node0 = Node.newString("dp\"", 0, (-181));
      Node node1 = new Node(46, node0, node0, node0);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node1);
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = compilerOptions0.getAliasTransformationHandler();
      ScopedAliases scopedAliases0 = new ScopedAliases((AbstractCompiler) null, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
      scopedAliases0.process(node0, node1);
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      Node node2 = compiler_IntermediateState0.externsRoot;
      scopedAliases0.hotSwapScript(node1, node2);
      scopedAliases0.hotSwapScript(node2, node0);
      DisambiguatePrivateProperties disambiguatePrivateProperties0 = null;
      try {
        disambiguatePrivateProperties0 = new DisambiguatePrivateProperties(compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.externAndJsRoot;
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable((Node) null);
      preprocessorSymbolTable0.getAllSymbols();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = false;
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
      // Undeclared exception!
      try { 
        scopedAliases0.hotSwapScript((Node) null, (Node) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = compilerOptions0.getAliasTransformationHandler();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      SyntheticAst syntheticAst0 = new SyntheticAst("oL=e5;6d");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      scopedAliases0.hotSwapScript(node1, node1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = compilerOptions0.getAliasTransformationHandler();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      SyntheticAst syntheticAst0 = new SyntheticAst("oL=e5;6d");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      exploitAssigns0.optimizeSubtree(node0);
      scopedAliases0.process(node0, node0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(2795);
      Node node1 = new Node(2795, node0, node0, 1027, 2795);
      Node node2 = new Node(2795, node1, node1, node1, 31, 2);
      Node node3 = exploitAssigns0.optimizeSubtree(node2);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node3);
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
      SyntheticAst syntheticAst0 = new SyntheticAst("JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS");
      syntheticAst0.getAstRoot(compiler0);
      scopedAliases0.process(node3, node1);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(2795);
      Node node1 = new Node(4, node0, node0, node0, 38, 29);
      SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascript.jscomp.ScopedAliases$AliasedTypeNode");
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = compilerOptions0.getAliasTransformationHandler();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
      Node node2 = new Node(37, node1, node1, 616, 30);
      scopedAliases0.process(node1, node2);
  }
}
