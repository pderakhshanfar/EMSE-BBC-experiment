/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 31 22:33:00 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import com.google.javascript.rhino.jstype.TemplatizedType;
import com.google.javascript.rhino.jstype.Visitor;
import java.io.CharArrayWriter;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(115);
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setAllFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((JSType[]) null);
      String string0 = null;
      int int0 = (-1968);
      // Undeclared exception!
      try { 
        node0.setChangeTime(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node1.getAncestors();
      node1.isContinue();
      node0.isFunction();
      node1.getIntProp(2);
      node0.isParamList();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.removeProp(0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node.newString("3-HT;n");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newString((-1925), "FUNCTION_INSTANCE_TYPE");
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 2909;
      Node node0 = Node.newString((-3536), (String) null, 0, 2909);
      Node node1 = node0.cloneTree();
      node0.isDec();
      // Undeclared exception!
      try { 
        node1.cloneNode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = Node.newNumber(0.5, (-6052), (-6052));
      Node node1 = Node.newString((String) null, 2, 42);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(54, nodeArray0, 54, 54);
      node0.toString();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = Node.newString("", (-286), (-286));
      node0.setSourceEncodedPositionForTree((-286));
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString("!xGhQy");
      node0.isBreak();
      Node node1 = Node.newString(30, "!xGhQy", 36, 8);
      node1.isContinue();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2, (-102), 2);
      Node node1 = new Node(2, node0, node0, node0, 12, 1686);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node0);
      Node node2 = new Node(2, node0, node0, node0, node0);
      node1.removeChildAfter(node2);
      node1.getDirectives();
      // Undeclared exception!
      try { 
        node1.isDec();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node.mergeLineCharNo(588, 588);
      Node node0 = Node.newString(21, (String) null, 3579, 4520);
      boolean boolean0 = node0.isOptionalArg();
      node0.setOptionalArg(boolean0);
      node0.isOnlyModifiesThisCall();
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        node0.setDouble(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = Node.newString("b/(-R1+");
      Node node1 = new Node(3164, node0, 21, 4095);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.isOnlyModifiesArgumentsCall();
      node0.isTypeOf();
      node0.isParamList();
      node0.getChangeTime();
      node0.siblings();
      node0.toString(false, false, false);
      Node node3 = node0.cloneNode();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node1.setJSDocInfo(jSDocInfo0);
      node3.isQualifiedName();
      Node node4 = Node.newString(55, "}q+w[Zt<B", 0, 0);
      node3.isAdd();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("STRING b/(-R1+");
      node3.isNew();
      Node node5 = node0.getChildBefore(node4);
      Set<String> set0 = null;
      node1.setDirectives(set0);
      node4.removeChild(node5);
      Node node6 = node1.getChildAtIndex(node4.EMPTY_BLOCK);
      node0.replaceChildAfter(node2, node6);
      node0.isDo();
      // Undeclared exception!
      try { 
        node1.getType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newNumber((double) 112);
      Node node1 = new Node(1571, 32, 53);
      node0.copyInformationFrom(node1);
      node0.isLocalResultCall();
      node0.setDouble(112);
      node0.isName();
      int int0 = Node.JSDOC_INFO_PROP;
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node node0 = Node.newNumber((double) 2);
      node0.isLocalResultCall();
      node0.setDouble(2);
      node0.isName();
      node0.isQualifiedName();
      Node node1 = new Node(53, node0, node0);
      // Undeclared exception!
      try { 
        node1.addChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newString("", 123, 123);
      Node node1 = new Node(57);
      Node node2 = node1.useSourceInfoFromForTree(node1);
      node1.copyInformationFromForTree(node2);
      node0.getQualifiedName();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isTrue();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      node3.mayMutateGlobalStateOrThrow();
      node1.isObjectLit();
      node0.isLabelName();
      node2.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = Node.newNumber(25.941340621951746);
      node0.toString(false, true, false);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(36, node0, node0, node0, node0, 0, 48);
      node1.isOptionalArg();
      node0.isStringKey();
      node1.addChildToFront(node0);
      node1.isVar();
      node1.checkTreeEqualsImpl(node0);
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newNumber(1.2);
      node0.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node node0 = Node.newNumber((double) 2);
      node0.isLocalResultCall();
      node0.getLength();
      node0.setSourceFileForTesting("B,z");
      Node node1 = Node.newNumber((double) 31);
      node0.toString(false, false, false);
      node1.toString();
      node1.setString("B,z");
      node1.isDebugger();
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 31.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node(1186);
      node0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newString((-2618), "EkWnj@?|*;2r\"gmv$");
      Node.newString("\";~D8fRKOO%:{}_0");
      node0.isCase();
      node0.isNull();
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString((-1925), "FUNCTION_INSTANCE_TYPE");
      node0.setWasEmptyNode(false);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("FUNCTION_INSTANCE_TYPE");
      node0.isVarArgs();
      node0.isDefaultCase();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node(36, 0, 0);
      node0.getInputId();
      node0.setInputId((InputId) null);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newString("Aa^V!g:a,dlSe", 52, 32);
      node0.addSuppression("Aa^V!g:a,dlSe");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("", 305, (-2676));
      nodeArray0[0] = node0;
      node0.setDouble(48);
      nodeArray0[0].getChangeTime();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newString(60, "IF", 32, 100);
      Node node1 = new Node(31, node0, node0, node0, 30, 48);
      node0.getChildBefore(node1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newString("should never be called");
      node0.isCatch();
      Node node1 = Node.newString(30, "should never be called", 36, 8);
      node0.isAdd();
      Node node2 = node1.cloneNode();
      node0.isScript();
      node2.isTypeOf();
      node1.addChildAfter(node0, node2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 0, 0);
      node0.removeProp(0);
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(46, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesThis();
      node0.setSideEffectFlags(node_SideEffectFlags0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(112);
      node0.mayMutateArguments();
      node0.isAnd();
      node0.isWhile();
      node0.setChangeTime(4);
      Node node1 = Node.newString(38, "", 32, 8);
      node0.setOptionalArg(false);
      node1.isOnlyModifiesThisCall();
      node1.toString();
      Node node2 = node1.cloneNode();
      node2.isScript();
      node2.isDec();
      node1.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newString("@9Z7bH> e%0nB1d");
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(101, 40, 16);
      node0.isNoSideEffectsCall();
      node0.getProp(40);
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newString("should never be called");
      node0.isLabel();
      Node.newString(30, "should never be called", 36, 8);
      node0.isAdd();
      node0.isSyntheticBlock();
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(0, 56, (-729));
      node1.addChildrenToBack(node0);
      node0.getChildCount();
      Node node2 = new Node(16, node1, 152, 56);
      node0.isFalse();
      node0.getLength();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString((-1953), "CusLa5tOQ");
      node0.isUnscopedQualifiedName();
      node0.isParamList();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node node0 = Node.newNumber((double) 2);
      node0.isLocalResultCall();
      node0.setDouble(2);
      node0.isName();
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newString("]!KH0%q/&6", 693, 693);
      node0.isQualifiedName();
      node0.isNew();
      Node node1 = new Node(54, node0, node0, node0, node0);
      node1.setOptionalArg(false);
      node0.toString();
      Node node2 = node1.cloneTree();
      node2.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = new Node(112);
      node0.mayMutateArguments();
      node0.isWhile();
      node0.setChangeTime(4);
      Node node1 = Node.newString(38, ")a", 32, 8);
      node0.setOptionalArg(true);
      node1.isOnlyModifiesThisCall();
      node1.toString();
      Node node2 = new Node(53, 16, 48);
      node2.isDec();
      node1.isQualifiedName();
      node1.isLabelName();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      Node node4 = node2.cloneTree();
      Node node5 = node2.useSourceInfoIfMissingFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags4.clearAllFlags();
      node5.isBreak();
      node4.getJsDocBuilderForNode();
      node3.getLength();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node0.isFor();
      Node node6 = new Node(17, node4, node0, 103, 57);
      node6.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newNumber(0.5, 1559, 1559);
      node0.siblings();
      node0.getSideEffectFlags();
      node0.putIntProp(1559, 1559);
      node0.addSuppression((String) null);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append((String) null);
      node_FileLevelJsDocBuilder0.append((String) null);
      node0.setWasEmptyNode(false);
      node_FileLevelJsDocBuilder0.append("|}F+rx`/-{^u");
      node0.isVarArgs();
      node0.isLocalResultCall();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[6];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry1.createParameters(jSTypeArray0);
      Node node1 = new Node(0, 15, (-1378));
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node1.setOptionalArg(true);
      Node.extractLineno(4);
      Node node3 = Node.newNumber((-1.0));
      node3.isEquivalentToTyped(node1);
      node2.removeChild(node1);
      node0.useSourceInfoFrom(node1);
      node2.isComma();
      node3.isEmpty();
      node2.isObjectLit();
      double double0 = (-680.7124398);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(54, node0);
      node1.getChildBefore(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node0.setSideEffectFlags(node_SideEffectFlags2);
      // Undeclared exception!
      try { 
        node0.siblings();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[7];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags4.clearAllFlags();
      Node node0 = jSTypeRegistry1.createParameters(jSTypeArray0);
      node0.getLength();
      node0.toString();
      Node node1 = Node.newNumber((double) 38, 57, (-1));
      Node node2 = node1.cloneNode();
      Node node3 = new Node(16);
      node3.isScript();
      Node node4 = new Node(32, node2, node3, node1);
      node4.isTypeOf();
      node3.getDouble();
      node4.isHook();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = Node.newString("", 1, 2);
      Node node2 = new Node(112);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      Node node4 = new Node((-234));
      String string0 = node4.getQualifiedName();
      Node node5 = node3.useSourceInfoIfMissingFromForTree(node4);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Im  m", false);
      node4.setStaticSourceFile(simpleSourceFile0);
      Node node6 = new Node(56);
      node6.hasMoreThanOneChild();
      node6.isGetElem();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node5.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("<invalid>");
      node3.isArrayLit();
      Node node7 = new Node(30, node5, node1, node4, node6);
      node7.isNew();
      node4.getChildBefore(node6);
      node0.isCall();
      Node.newString(string0);
      node5.getDouble();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 0;
      Node node0 = Node.newString("", 29, 0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = jSDocInfo0.getAssociatedNode();
      Node node2 = new Node(0, node0, (Node) null, (Node) null, (-656), 0);
      int int1 = (-696);
      Node node3 = new Node(int0, node2, node1, node0, node0, int1, node2.EMPTY_BLOCK);
      node3.addChildrenToBack(node1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newString(43, "EVAL_ERROR_FUNCTION_TYPE", 43, 43);
      Node node1 = new Node(42, node0, node0, node0);
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node0 = new Node(47, (Node) null, (Node) null, (Node) null, (-2340), (-2340));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 11;
      Node node0 = Node.newNumber(2453.78746408784, 11, 11);
      int int1 = 281;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12288);
      node_SideEffectFlags0.clearAllFlags();
      node0.setSideEffectFlags(node_SideEffectFlags0);
      Node node1 = new Node(node0.REFLECTED_OBJECT, node0.CHANGE_TIME, int1);
      // Undeclared exception!
      try { 
        node1.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newNumber((double) 8287, 1483, 8287);
      Node node1 = new Node(8287, node0, node0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newNumber((-1559.4051843020907));
      Node node1 = new Node(0, node0, node0, node0);
      Node node2 = new Node((-1443), node0, node0, node0, node1, 37, (-147));
      Node node3 = node0.removeChildAfter(node1);
      int int0 = 2;
      Node.newNumber((double) node2.CHANGE_TIME, node0.FREE_CALL, int0);
      // Undeclared exception!
      try { 
        node1.removeProp(node3.FLAG_NO_THROWS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("", 305, (-2676));
      nodeArray0[0] = node0;
      Node node1 = new Node(2, node0, node0, node0, node0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      InputId inputId0 = new InputId("]!KH0R/&6");
      Node node0 = Node.newString(693, "");
      node0.setLineno(693);
      node0.isTrue();
      Node node1 = Node.newString("");
      node0.addChildToFront(node1);
      Node node2 = new Node(48, node0, node1, node0, node0);
      node2.getType();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node(1037, 1037, (-4704));
      Node node1 = new Node(1, node0, node0, node0, node0);
      node0.removeChildAfter(node1);
      node0.useSourceInfoFromForTree(node1);
      Node node2 = null;
      try {
        node2 = new Node(node0.LENGTH, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newString((-1925), "FUNCTION_INSTANCE_TYPE");
      Node node1 = new Node(2, node0, node0, node0, node0);
      node0.clonePropsFrom(node1);
      Node node2 = new Node((-1925), node0, node0, node0, 2, 4095);
      String string0 = "not a StringNode";
      // Undeclared exception!
      try { 
        node2.setString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newString("", 305, (-2676));
      Node node1 = Node.newString("", (-3705), (-1));
      node1.isEquivalentTo(node0, true, true, true);
      Node node2 = Node.newString(4, "<6", 1, 1181);
      node2.removeChildren();
      node1.getExistingIntProp((-3117));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString("", (-2676), 152);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(49, nodeArray0);
      node0.removeChildAfter(node1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newNumber(25.941340621951746);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(36, node0, node0, node0, node0, 0, 48);
      node1.isOptionalArg();
      node0.isStringKey();
      node1.isOnlyModifiesArgumentsCall();
      int int0 = (-1962);
      Node node2 = new Node(188, node1, node1, node1, node0, 43, (-1962));
      node2.addChildToFront(node0);
      // Undeclared exception!
      try { 
        node2.isVar();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(112);
      node0.mayMutateArguments();
      node0.isAnd();
      node0.isWhile();
      node0.setChangeTime(4);
      node0.setOptionalArg(false);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newNumber(0.5, 1559, 1559);
      node0.siblings();
      node0.getSourceOffset();
      node0.getSideEffectFlags();
      node0.putIntProp(1559, 1559);
      node0.addSuppression((String) null);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append((String) null);
      node_FileLevelJsDocBuilder0.append((String) null);
      node0.isLabelName();
      node0.isScript();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newString((-1925), "FUNCTION_INSTANCE_TYPE");
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.getBooleanProp((-1925));
      node0.isLabelName();
      node0.children();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      node0.isFromExterns();
      node0.isAnd();
      node0.isWith();
      node0.setChangeTime(4);
      node0.hasMoreThanOneChild();
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[7];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry1.createParameters(jSTypeArray0);
      node0.getLength();
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.wasEmptyNode();
      node0.removeProp(0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.isDefaultCase();
      node0.isAnd();
      node0.isGetProp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<TemplateType> arrayList0 = new ArrayList<TemplateType>();
      Iterator<TemplateType> iterator0 = arrayList0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.addChildrenAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      Node node1 = new Node(36, (Node[]) null);
      node1.removeChild(node0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newString("h\"Gg&5w", (-651), (-651));
      Node node1 = new Node(43, node0, node0, node0, node0);
      node1.getQualifiedName();
      node0.getJsDocBuilderForNode();
      Node node2 = node0.cloneNode();
      node2.isScript();
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.ProxyObjectType", 117, 305);
      Node node1 = new Node(1, node0, node0);
      node0.addChildAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newString("", (-2676), 152);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(49, nodeArray0);
      node0.mayMutateArguments();
      node0.addChildrenAfter(node1, node0);
      node1.removeChild(nodeArray0[0]);
      int int0 = 732;
      // Undeclared exception!
      try { 
        Node.extractCharno(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node.newString(401, "++)c;`mDT^gN");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplateType((JSType) null);
      JSType.toMaybeFunctionType((JSType) null);
      ObjectType.cast((JSType) null);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType((JSType) null);
      jSTypeRegistry0.createNullableType(jSType0);
      boolean boolean0 = false;
      JSType[] jSTypeArray0 = new JSType[1];
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node(8388608, 8388608, 8388608);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      node0.isDelProp();
      String string0 = node0.getQualifiedName();
      Node node1 = node0.clonePropsFrom(node0);
      node0.isEquivalentToShallow(node1);
      Node.newString((String) null, 32, 32);
      // Undeclared exception!
      try { 
        Node.newString(string0, node0.POST_FLAG, node1.STATIC_SOURCE_FILE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = (-642);
      Node node0 = null;
      Node node1 = Node.newNumber((-1.0));
      node1.isEquivalentToShallow((Node) null);
      // Undeclared exception!
      try { 
        node1.children();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = new Node(112);
      node0.mayMutateArguments();
      node0.isAnd();
      node0.isGetProp();
      Node node1 = null;
      node0.isEquivalentToShallow((Node) null);
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(44);
      int int0 = 440;
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      node0.removeChild(node0);
      nodeArray0[3] = node0;
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = new Node(112);
      node0.isWhile();
      node0.setChangeTime(4);
      Node node1 = Node.newString(38, ")a", 32, 8);
      node1.removeChild(node0);
      node1.isOnlyModifiesThisCall();
      // Undeclared exception!
      try { 
        node1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(259, (Node) null, (Node) null, (Node) null, (Node) null);
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newString((-1548), "F");
      Node node1 = new Node(0, node0, node0, (-468), 52);
      node1.isDelProp();
      node1.getQualifiedName();
      node0.clonePropsFrom(node1);
      node1.isEquivalentToShallow(node0);
      Node node2 = node1.detachFromParent();
      boolean boolean0 = true;
      node2.setIsSyntheticBlock(boolean0);
      node0.setSideEffectFlags(node1.SIDE_EFFECTS_ALL);
      // Undeclared exception!
      try { 
        node0.isEquivalentToShallow(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newString("", (-286), (-286));
      Node node1 = new Node((-1774), node0, node0, 8, 38);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = node0.detachFromParent();
      // Undeclared exception!
      try { 
        node0.copyInformationFromForTree(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = new Node(693, node0, node0, node0);
      node1.isDelProp();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = Node.newString("", (-286), (-286));
      Node node1 = new Node((-1774), node0, node0, 8, 1616);
      node0.isEquivalentToTyped(node1);
      node0.setSourceEncodedPositionForTree((-286));
      node1.isThrow();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newNumber(45.121399912647, 4431, 108);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node0.isDelProp();
      node0.getQualifiedName();
      Node node2 = node1.clonePropsFrom(node0);
      node0.isEquivalentToShallow(node1);
      String string0 = "";
      // Undeclared exception!
      try { 
        Node.newString(string0, node2.FLAG_ARGUMENTS_UNMODIFIED, node1.QUOTED_PROP);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getChangeTime();
      Node node1 = new Node(50, node0, node0, node0, node0, 0, 32);
      node0.isDefaultCase();
      Node node2 = new Node(38, node1);
      node0.putIntProp(52, 54);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.hasMoreThanOneChild();
      node2.checkTreeEqualsImpl(node0);
      Node node3 = node2.cloneNode();
      node3.isScript();
      node3.getSourceFileName();
      node1.isTypeOf();
      node3.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(0, 56, (-729));
      node1.addChildrenToBack(node0);
      node1.getInputId();
      node0.setInputId((InputId) null);
      Node node2 = Node.newString(49, "|j,:F;_)K7>1o2OH#L#");
      node1.getIndexOfChild(node2);
      node1.getBooleanProp(40);
      Node node3 = new Node(154, node2, node2, node1, 55, 39);
      node0.isScript();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node2.isTry();
      node1.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newString("h\"Gg&5w", (-651), (-651));
      Node node1 = new Node(43, node0, node0, node0, node0);
      node1.getQualifiedName();
      Node node2 = new Node(31, 49, 4095);
      node2.checkTreeEqualsImpl(node1);
      node0.setString("h\"Gg&5w");
      Node node3 = Node.newString(1, "h\"Gg&5w", 100, (-607));
      node3.mayMutateArguments();
      node3.isQuotedString();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node2.isDelProp();
      node3.isCase();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = new Node((-2792), (Node[]) null, (-2792), (-2792));
      node0.isLocalResultCall();
      // Undeclared exception!
      try { 
        node0.isDebugger();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = new Node(29, (-536870912), 29);
      Node node1 = new Node(32, (Node[]) null, 31, 42);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isGetterDef();
      // Undeclared exception!
      try { 
        node0.getCharno();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "com.google.javascript.rhino.jstype.FunctionType$PropAccess";
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.FunctionType$PropAccess", (-2568), (-2568));
      Node node1 = Node.newString("com.google.javascript.rhino.Node$NodeMismatch");
      Node node2 = node0.srcref(node1);
      node0.isVarArgs();
      node1.isVarArgs();
      node0.detachChildren();
      node0.toString(true, true, true);
      node0.getBooleanProp(0);
      node0.isQuotedString();
      node0.isWhile();
      node1.isSyntheticBlock();
      int int0 = 0;
      node1.addChildrenAfter(node2, node0);
      node2.setLength(int0);
      node2.getChildBefore(node1);
      node2.addSuppression(string0);
      node1.mayMutateArguments();
      SimpleErrorReporter simpleErrorReporter0 = null;
      try {
        simpleErrorReporter0 = new SimpleErrorReporter();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newNumber((double) 2, 2, 2);
      node0.useSourceInfoFromForTree((Node) null);
      // Undeclared exception!
      try { 
        node0.isCatch();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newNumber((double) 101);
      node0.getString();
      node0.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newString(1004, "", 1004, 1004);
      node0.isLabelName();
      node0.setString("Node tree inequality:\nTree1:\n");
      Node node1 = Node.newString(1, "com.google.javasWriptAChino.Nodg$AncestorIterable", 38, (-690));
      node1.isQuotedString();
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newNumber(6.721534673400339);
      node0.getAncestors();
      node0.mayMutateArguments();
      node0.mayMutateGlobalStateOrThrow();
      node0.detachChildren();
      Node node1 = new Node(31, node0, node0);
      node1.isOptionalArg();
      node1.isVarArgs();
      node1.addChildBefore(node0, node0);
      // Undeclared exception!
      try { 
        node0.isVarArgs();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.FunctionType$PropAccess", (-2568), (-2568));
      Node node1 = Node.newString("com.google.javascript.rhino.Node$NodeMismatch");
      node0.srcref(node1);
      node0.isVarArgs();
      InputId inputId0 = new InputId("}:26[|mv(YxE");
      Node node2 = Node.newString(720, "com.google.javascript.rhino.Node$NodeMismatch");
      node2.setLineno(12);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      node2.hasChildren();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      JSType.toMaybeTemplateType((JSType) templateType0);
      node1.setOptionalArg(true);
      Node node4 = new Node(31, node0);
      node4.isOnlyModifiesThisCall();
      node4.setDouble(1.0);
      node3.isVoid();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.FunctionType$PropAccess", (-2568), (-2568));
      Node node1 = new Node(56, node0, node0);
      node0.isVarArgs();
      node1.isVarArgs();
      node1.detachChildren();
      node0.toString(true, true, true);
      node0.getBooleanProp((-3));
      node0.isQuotedString();
      node1.getInputId();
      node0.isWhile();
      node1.isSyntheticBlock();
      node0.isEmpty();
      node0.isFalse();
      node0.toStringTree();
      node0.setQuotedString();
      node0.getLength();
      node1.isEquivalentToTyped(node0);
      node1.getChildAtIndex(57);
      node1.removeChild(node0);
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newString("&rxn}jBn");
      node0.isNoSideEffectsCall();
      Node node1 = new Node((-2787), node0, node0, node0);
      InputId inputId0 = new InputId("");
      node0.setInputId(inputId0);
      node1.getChangeTime();
      node1.isFromExterns();
      node0.getNext();
      node1.isReturn();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      node0.isFromExterns();
      node0.isAnd();
      node0.isWith();
      node0.setChangeTime(4);
      node0.hasMoreThanOneChild();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(0, 56, (-729));
      node1.addChildrenToBack(node0);
      node1.setSourceEncodedPositionForTree(1610612736);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newNumber((-894.34119));
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = new Node(36, 0, 0);
      InputId inputId0 = new InputId("com.google.common.base.CharMatcher$NegatedFastMatcher");
      node0.setInputId(inputId0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newString("", 24, 42);
      Node node1 = new Node(0, node0, 52, 29);
      node1.setSourceFileForTesting("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[6];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_TYPE;
      ObjectType objectType0 = jSTypeRegistry1.getNativeObjectType(jSTypeNative0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      FunctionType functionType0 = jSTypeRegistry1.createFunctionType((JSType) objectType0, (List<JSType>) immutableList0);
      jSTypeArray0[0] = (JSType) functionType0;
      EnumType enumType0 = jSTypeRegistry1.createEnumType("Object#Key", node1, objectType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      FunctionType functionType1 = enumElementType1.getConstructor();
      jSTypeArray0[1] = (JSType) functionType1;
      JSType jSType0 = jSTypeRegistry1.createOptionalType(objectType0);
      jSTypeArray0[2] = jSType0;
      JSType jSType1 = jSTypeRegistry0.createNullableType(functionType0);
      jSTypeArray0[3] = jSType1;
      EnumElementType enumElementType2 = enumType1.getElementsType();
      enumElementType2.getOwnerFunction();
      jSTypeArray0[4] = (JSType) null;
      enumElementType1.getTypeOfThis();
      jSTypeArray0[5] = null;
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.checkTreeEquals(node2);
      node1.getInputId();
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newString((-2437), "", (-2943), (-2437));
      node0.setSourceFileForTesting("ARRAY_TYPE");
      Node node1 = new Node((-2437), node0, Integer.MAX_VALUE, (-86));
      node1.wasEmptyNode();
      node1.isDebugger();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newNumber((-190.3169171069));
      node0.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newString((-4261), "Zw7`$$?>mS5", 21, 1658);
      node0.isOptionalArg();
      node0.setOptionalArg(true);
      node0.isOnlyModifiesThisCall();
      node0.setDouble(1658);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = new Node(112);
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newNumber((-421.6134931));
      Node node1 = new Node(2048, node0, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.isVarArgs();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("\n\nSubtree2: ", false);
      simpleSourceFile0.getLineOffset(4);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node3 = Node.newNumber((double) 0, 4095, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags3.setThrows();
      node1.getSideEffectFlags();
      node3.getBooleanProp((-335));
      node2.getBooleanProp(49);
      node3.removeChild(node0);
      Node node4 = node0.useSourceInfoIfMissingFrom(node2);
      node4.isDo();
      node3.getNext();
      node1.addChildAfter(node2, node3);
      // Undeclared exception!
      try { 
        node0.isEquivalentTo(node4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newString("gr[{(+W9h rjF[t+!2");
      Node node1 = Node.newString(48, "@Z>[ }slK^");
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.toString();
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newString("length");
      node0.useSourceInfoIfMissingFromForTree((Node) null);
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.newString((String) null);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = Node.newString("r8\nqtV", (-14), (-14));
      Node node1 = Node.newString("", 0, 0);
      node0.addChildAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node(3106);
      node0.isLocalResultCall();
      node0.getLineno();
      Node node1 = new Node(49, (Node[]) null, (-2059), 0);
      node1.setSideEffectFlags(node0.FLAG_GLOBAL_STATE_UNMODIFIED);
      node0.addChildrenToFront(node1);
      node0.isDelProp();
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags(node1.REFLECTED_OBJECT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[7];
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      jSTypeArray0[0] = (JSType) objectType0;
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType(objectType0, immutableList0);
      TemplateTypeMap templateTypeMap0 = templatizedType0.getTemplateTypeMap();
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, templateTypeMap0);
      JSType jSType0 = templateTypeMapReplacer0.caseNumberType();
      jSTypeArray0[1] = jSType0;
      TemplatizedType templatizedType1 = jSTypeRegistry0.createTemplatizedType((ObjectType) templatizedType0, immutableList0);
      jSTypeArray0[2] = (JSType) templatizedType1;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) objectType0, jSTypeArray0);
      jSTypeArray0[3] = (JSType) functionType0;
      JSType jSType1 = templateTypeMapReplacer0.caseBooleanType();
      jSTypeArray0[4] = jSType1;
      Node node0 = Node.newString("Named type with empty name component", 0, 0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, jSTypeArray0[1]);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      enumElementType0.getConstructor();
      jSTypeArray0[5] = (JSType) null;
      JSType jSType2 = templateTypeMapReplacer0.caseNoType();
      jSTypeArray0[6] = jSType2;
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node1.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node0 = Node.newString(51, "missing prop: ", 51, 51);
      Node node1 = new Node(42, 9, 54);
      node0.getIndexOfChild(node1);
      node0.getJSType();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[6];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeArray0[0] = jSType0;
      TemplateType templateType0 = jSTypeRegistry1.createTemplateType("C-z9yx7");
      jSTypeArray0[1] = (JSType) templateType0;
      TemplateType templateType1 = jSTypeRegistry0.getObjectElementKey();
      jSTypeArray0[2] = (JSType) templateType1;
      JSType jSType1 = modificationVisitor0.caseNumberType();
      jSTypeArray0[3] = jSType1;
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1, nodeArray0, 16384, 16384);
      JSType.toMaybeFunctionType(jSType0);
      EnumType enumType0 = jSTypeRegistry1.createEnumType("Object#Element", node0, (JSType) null);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      // Undeclared exception!
      try { 
        enumElementType0.getOwnerFunction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newNumber((-1246.333454));
      node0.getIntProp((-2439));
      Node node1 = new Node((-974), node0, 56, 36);
      node1.removeChildren();
      node1.siblings();
      node1.isTypeOf();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = null;
      node0.setVarArgs(false);
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      jSTypeRegistry0.createTemplatizedType((ObjectType) null, (Map<TemplateType, JSType>) hashMap0);
      TemplatizedType templatizedType0 = JSType.toMaybeTemplatizedType(jSType0);
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) templatizedType0);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) templateType0);
      SimpleErrorReporter.getMessage0(jSTypeRegistry0.OBJECT_INDEX_TEMPLATE);
      // Undeclared exception!
      try { 
        templatizedType0.defineSynthesizedProperty(jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE, objectType0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString(2519, "\"Gg&5w", 3887, 43);
      Node node1 = new Node(2519, node0, node0, node0, 4, 55);
      node1.setSourceEncodedPosition(38);
      Node node2 = node1.removeChildren();
      node1.getSourceFileName();
      Node node3 = new Node(11, node1);
      node0.isGetElem();
      node1.clonePropsFrom(node2);
      node1.getProp(4);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = new Node(3616);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = new Node(102);
      node0.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.setQuotedString();
      // Undeclared exception!
      try { 
        node_SideEffectFlags2.clearSideEffectFlags();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Object object0 = new Object();
      node_SideEffectFlags0.clearSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node node0 = Node.newNumber((double) 2);
      node0.isLocalResultCall();
      String string0 = "O\\N\\jjSh`<7]NK#";
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newNumber((double) 8287, 1483, 8287);
      Node node1 = new Node(8287, node0, node0, 51, 46);
      Node node2 = new Node(132, node1, node0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 0;
      Node[] nodeArray0 = new Node[5];
      Node node0 = Node.newString(128, "D~JQq]VI3VD\"C3p", 2, 2);
      nodeArray0[0] = node0;
      Node node1 = new Node(1, node0, 54, 4096);
      nodeArray0[1] = node1;
      Node node2 = new Node(57, node1, node0, 30, 1);
      nodeArray0[2] = node2;
      Node node3 = new Node(node2.FLAG_LOCAL_RESULTS, node1, node1.COLUMN_BITS, node1.IS_DISPATCHER);
      nodeArray0[3] = node3;
      SimpleErrorReporter simpleErrorReporter0 = null;
      try {
        simpleErrorReporter0 = new SimpleErrorReporter();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(1128, node0, node0, node0, node0);
      node1.isOptionalArg();
      node0.isStringKey();
      node1.setOptionalArg(true);
      node0.isOnlyModifiesThisCall();
      Node node2 = new Node(4, node1, node0, 67, 0);
      node2.setQuotedString();
      node0.children();
      // Undeclared exception!
      try { 
        node2.isThrow();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 441;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(441, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newNumber((double) 2);
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(117);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.valueOf();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[8];
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType((JSType) null);
      jSTypeArray0[0] = jSType0;
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newString(4, "!?xGh^QD");
      Node node1 = new Node(3036, 49, 51);
      Node node2 = new Node(4, node0, node0, node1, node0, 130, 921);
      node0.addChildToBack(node2);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = (-1443);
      Node node0 = Node.newNumber((-1559.4051843020907));
      int int1 = 0;
      Node node1 = new Node(0, node0, node0, node0);
      Node node2 = new Node((-1443), node0, node0, node0, node1, 37, (-147));
      node0.removeChildAfter(node1);
      int int2 = (-1330);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(0, 56, (-729));
      node1.addChildrenToBack(node0);
      node1.getLength();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = Node.newNumber((-190.3169171069));
      Node node1 = new Node(0, node0, node0, node0);
      node1.getLength();
      node1.isQualifiedName();
      node1.addChildBefore(node0, node0);
      int int0 = 0;
      String string0 = "var_args_name";
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = Node.newNumber(6.721534673400339);
      node0.mayMutateArguments();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node(31, node0, node0);
      node1.isOptionalArg();
      node1.isVarArgs();
      node1.addChildBefore(node0, node0);
      // Undeclared exception!
      try { 
        node0.isVarArgs();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 693;
      Node node0 = Node.newString(693, "");
      Node node1 = new Node(1, node0, node0, node0, node0);
      Node node2 = node0.clonePropsFrom(node1);
      node2.addChildBefore(node1, node1);
      // Undeclared exception!
      try { 
        node0.setLineno(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = "&SAWm=;({UmkMax5";
      simpleErrorReporter0.warning("!dy[KkMSR{6&/@}8!^q", "y5}3gxM0:Cn@", 1449, 1090);
      Node node0 = Node.newString("", 0, 1090);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("", node0, (ImmutableList<TemplateType>) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node0, functionType0);
      String string1 = "[NiXDrs_r.!82KLZf";
      node0.setString(string1);
      Node node1 = Node.newString(string0);
      node0.copyInformationFrom(node1);
      functionType0.getParameters();
      // Undeclared exception!
      try { 
        enumType0.getElementsType();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(256);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags4.setMutatesArguments();
      int int0 = 413;
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(413);
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node1.addChildrenToFront(node0);
      nodeArray0[1] = node1;
      node1.getProp(50);
      Node node2 = Node.newString(57, "Object#Element", 15, 40);
      nodeArray0[2] = node2;
      node0.addChildToFront(node0);
      Node node3 = new Node(int0, nodeArray0);
      String string0 = "srFSC?";
      // Undeclared exception!
      try { 
        SimpleErrorReporter.getMessage(string0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newString("\"Gg&5w");
      Node node1 = Node.newNumber((-1588.68), 57, 4095);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setSourceEncodedPositionForTree(29);
      node1.getChildCount();
      node1.addChildrenToFront(node0);
      node0.hasChild(node1);
      node1.isNull();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = Node.newString("", 91, 91);
      Node node1 = new Node((-1));
      Node node2 = Node.newNumber((-395.50671));
      Node node3 = node2.copyInformationFrom(node1);
      Node node4 = node1.useSourceInfoFromForTree(node3);
      node4.getQualifiedName();
      Node node5 = node0.useSourceInfoIfMissingFromForTree(node4);
      node2.setOptionalArg(true);
      node1.isOptionalArg();
      node5.removeFirstChild();
      node1.isName();
      node2.setOptionalArg(false);
      Node node6 = new Node(1, node0, node1);
      node6.isOnlyModifiesThisCall();
      node5.getIntProp(4095);
      node2.getChildCount();
      node6.addChildrenToFront(node2);
      Node.newString("NO_OBJECT_TYPE");
      node3.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newString("b/(-R1+");
      Node node1 = new Node(3164, node0, 21, 4095);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.isOnlyModifiesArgumentsCall();
      node0.isTypeOf();
      node0.isParamList();
      node0.getChangeTime();
      node0.siblings();
      node0.toString(false, false, false);
      Node node3 = node0.cloneNode();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node4 = node1.setJSDocInfo(jSDocInfo0);
      node3.isQualifiedName();
      Node node5 = Node.newString(55, "}q+w[Zt<B", 0, 0);
      node3.isAdd();
      node0.getJsDocBuilderForNode();
      node1.addChildrenToFront(node2);
      node0.getProp(node4.ORIGINALNAME_PROP);
      int int0 = 46;
      String string0 = "";
      Node.newString(int0, string0, node5.FLAG_ARGUMENTS_UNMODIFIED, node1.IS_DISPATCHER);
      node4.addChildToFront(node3);
      node1.setSourceEncodedPositionForTree(node3.INPUT_ID);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newNumber(2453.78746408784, 11, 11);
      Node node1 = new Node(57, 56, 53);
      node1.addChildToFront(node0);
      Node node2 = new Node(11, node0, node0, node0, node1);
      int int0 = 3226;
      node1.getNext();
      String string0 = null;
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = Node.newString((-1925), "FUNCTION_INSTANCE_TYPE");
      node0.toString();
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.FunctionType$PropAccess", (-2568), (-2568));
      Node node1 = new Node(57, node0, node0, node0, node0, 8, 0);
      node0.isNoSideEffectsCall();
      Node node2 = new Node(40, node1, node1, node1);
      InputId inputId0 = new InputId("gPfJ");
      node0.getInputId();
      node1.setInputId((InputId) null);
      node0.getChangeTime();
      Node node3 = new Node(285, node0);
      node3.isFromExterns();
      node1.getNext();
      node1.isReturn();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newString("jGG{r_$*?Sn-u<q");
      Node node1 = new Node(38, 49, 403);
      node0.addChildrenToBack(node1);
      node0.getChildCount();
      Node node2 = new Node(57, node1, 57, 53);
      node1.isFalse();
      node1.mayMutateArguments();
      // Undeclared exception!
      try { 
        node2.addChildrenAfter(node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = Node.newString("", 116, 112);
      Node node1 = new Node(108, node0, node0, node0);
      node1.isOr();
      node0.getChangeTime();
      Node node2 = new Node(2, node0);
      node0.isQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
      node2.isScript();
      // Undeclared exception!
      try { 
        node1.isGetProp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ObjectArrays");
      Node node1 = new Node(46, node0, node0, node0);
      InputId inputId0 = new InputId("");
      node0.getInputId();
      node0.setInputId((InputId) null);
      Node node2 = Node.newString(2, (String) null);
      node2.getChangeTime();
      node1.isFromExterns();
      node2.getNext();
      node2.isReturn();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = Node.newNumber(0.5, 1581, 1581);
      node0.siblings();
      int int0 = Node.DIRECTIVES;
      node0.getSideEffectFlags();
      node0.putIntProp(1581, 1581);
      node0.addSuppression((String) null);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append((String) null);
      node_FileLevelJsDocBuilder0.append((String) null);
      Node node1 = Node.newString(46, (String) null);
      node1.getAncestors();
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node.extractLineno(1940);
      Node node0 = new Node(0);
      Node node1 = new Node(29, node0, node0, 38, 48);
      node0.addChildToBack(node1);
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = Node.newString("\"Gg&5w");
      node0.isGetElem();
      node0.isObjectLit();
      Node node1 = new Node(16, node0, node0);
      node1.getStaticSourceFile();
      node0.addChildToFront(node1);
      node1.isTry();
      node0.getJsDocBuilderForNode();
      node1.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = (-1443);
      Node node0 = Node.newNumber((-1559.4051843020907));
      int int1 = 0;
      Node node1 = new Node(0, node0, node0, node0);
      node0.toString(true, true, true);
      InputId inputId0 = new InputId("]!KH0R/&6");
      node0.setInputId(inputId0);
      Node node2 = new Node((-1443), node0, node0, node0, node1, 37, (-147));
      Node node3 = node0.removeChildAfter(node1);
      int int2 = (-1330);
      int int3 = 3406;
      Node node4 = new Node(int2, node3, node0, int1, int3);
      int int4 = 693;
      String string0 = "";
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[6];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeArray0[0] = jSType0;
      TemplateType templateType0 = jSTypeRegistry1.createTemplateType("C-z9yx7");
      jSTypeArray0[1] = (JSType) templateType0;
      Visitor<Node> visitor0 = (Visitor<Node>) mock(Visitor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(visitor0).caseTemplateType(any(com.google.javascript.rhino.jstype.TemplateType.class));
      templateType0.visit(visitor0);
      TemplateType templateType1 = jSTypeRegistry0.getObjectElementKey();
      jSTypeArray0[2] = (JSType) templateType1;
      JSType jSType1 = modificationVisitor0.caseNumberType();
      jSTypeArray0[3] = jSType1;
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1, nodeArray0, 16384, 16384);
      node0.isCast();
      JSType.toMaybeFunctionType(jSType0);
      EnumType enumType0 = jSTypeRegistry1.createEnumType("Object#Element", node0, (JSType) null);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      // Undeclared exception!
      try { 
        enumElementType0.getOwnerFunction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-729));
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newString(78, "reflected_object");
      Node node1 = new Node((-2830), node0, node0, node0, (-2779), 27591);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = node2.getChildBefore(node1);
      String string0 = "Usu7=`48 Z";
      node3.setSourceFileForTesting(string0);
      node0.isAssignAdd();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      // Undeclared exception!
      try { 
        node1.getChildBefore(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = new Node(1037, 1037, (-4704));
      Node node1 = new Node(1, node0, node0, node0, node0);
      Node node2 = new Node(36, node1, 57, 57);
      node0.useSourceInfoFromForTree(node1);
      Node node3 = new Node(52, node0, node0);
      node2.removeFirstChild();
      String string0 = "c%yzo;pF%CZZv::K";
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newString("", 123, 123);
      Node node1 = node0.useSourceInfoFromForTree(node0);
      node0.isTrue();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      node0.mayMutateGlobalStateOrThrow();
      node0.isObjectLit();
      node1.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = Node.newNumber(0.5, (-4096), (-4045));
      Node node1 = new Node(148, node0, node0, 32, 530);
      Node node2 = new Node(102, node0, node0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.isDefaultCase();
      node0.isAnd();
      node0.isGetProp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setChangeTime((-53));
      Node node1 = Node.newNumber((-254.500320119), 36, Integer.MAX_VALUE);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.getProp(1);
      node0.isNoSideEffectsCall();
      Node node3 = Node.newString("32 m", 57, 39);
      node2.addChildrenToBack(node3);
      node1.setSourceEncodedPositionForTree(0);
      Node node4 = node0.removeChildAfter(node3);
      node0.getDirectives();
      node4.isAssign();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("", 305, (-2659));
      nodeArray0[0] = node0;
      Node node1 = new Node(2, node0, node0, node0, node0);
      node1.removeChildAfter(node0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      node2.useSourceInfoIfMissingFromForTree(node0);
      node3.isBreak();
      node0.getJsDocBuilderForNode();
      node3.setSourceEncodedPosition(8);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node.mergeLineCharNo(588, 588);
      Node node0 = Node.newString("%dYPAPiFt\"?|X:YP`", 4520, 86);
      Node node1 = new Node(41);
      node0.setOptionalArg(false);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node0.useSourceInfoFromForTree(node1);
      node0.getQualifiedName();
      node2.useSourceInfoIfMissingFromForTree(node1);
      Node.extractLineno(46);
      Node node4 = Node.newNumber((double) 4);
      node2.removeChild(node0);
      node3.useSourceInfoFrom(node1);
      node0.isComma();
      node4.isEmpty();
      node0.isFalse();
      node2.setQuotedString();
      String string0 = "";
      // Undeclared exception!
      try { 
        node1.setSourceFileForTesting(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node.extractLineno(1542);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[6];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeArray0[0] = jSType0;
      TemplateType templateType0 = jSTypeRegistry1.createTemplateType("C-z9yx7");
      jSTypeArray0[1] = (JSType) templateType0;
      Node[] nodeArray0 = new Node[7];
      JSType[] jSTypeArray1 = new JSType[4];
      jSTypeArray1[1] = (JSType) templateType0;
      jSTypeArray1[2] = jSType0;
      jSTypeArray1[3] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray1);
      nodeArray0[1] = node0;
      Node[] nodeArray1 = new Node[5];
      nodeArray1[1] = node0;
      nodeArray1[4] = node0;
      Node node1 = new Node(8, nodeArray1);
      nodeArray0[3] = node1;
      JSType.toMaybeTemplateType((JSType) templateType0);
      TemplateType templateType1 = jSTypeRegistry0.getObjectElementKey();
      TemplateType[] templateTypeArray0 = new TemplateType[3];
      templateTypeArray0[0] = templateType1;
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newString("", (-2676), 152);
      Node[] nodeArray0 = new Node[16];
      nodeArray0[0] = node0;
      Node node1 = new Node(49, nodeArray0);
      nodeArray0[0].removeChildAfter(node1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isHook();
      node0.getChangeTime();
      Node node1 = new Node(46, node0, node0, node0, node0, 43, 12);
      node1.isDefaultCase();
      Node node2 = new Node(2692, node1);
      node2.putIntProp(8, 4095);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node2.isOptionalArg();
      node1.isName();
      node2.setOptionalArg(true);
      node1.isOnlyModifiesThisCall();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node2;
      nodeArray0[1] = node0;
      nodeArray0[2] = node2;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node2;
      nodeArray0[6] = node0;
      Node node3 = new Node(47, nodeArray0, (-460), 39);
      double double0 = 1667.8549;
      node3.setDouble(double0);
      nodeArray0[1].isName();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = new Node(33, (Node[]) null);
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = Node.newString("@9ZI7bH> e%0nB1d");
      node0.hasChildren();
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newString("b/(-R1+");
      Node node1 = new Node(3164, node0, 21, 4095);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.isOnlyModifiesArgumentsCall();
      node0.isTypeOf();
      node0.isParamList();
      node0.getChangeTime();
      node0.siblings();
      node0.toString(false, false, false);
      Node node3 = node0.cloneNode();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node1.setJSDocInfo(jSDocInfo0);
      node3.isQualifiedName();
      Node node4 = Node.newString(55, "}q+w[Zt<B", 0, 0);
      node3.isAdd();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      Node.newNumber(0.0);
      node_FileLevelJsDocBuilder0.append("STRING b/(-R1+");
      node2.isArrayLit();
      node3.isNew();
      Node node5 = node0.getChildBefore(node4);
      Set<String> set0 = node0.getDirectives();
      node2.setDirectives(set0);
      Set<String> set1 = null;
      node1.setDirectives(set1);
      node4.removeChild(node5);
      Node node6 = node1.getChildAtIndex(node4.EMPTY_BLOCK);
      node0.replaceChildAfter(node2, node6);
      // Undeclared exception!
      try { 
        node0.isDo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.children();
      node0.isSyntheticBlock();
      node0.getProp((-642));
      node0.putProp((-642), (Object) null);
      Node node1 = Node.newString("");
      node0.copyInformationFrom(node1);
      node0.getJsDocBuilderForNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setMutatesArguments();
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = Node.newString(115, "IsAssignableFrom(");
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.getBooleanProp(118);
      node0.isLabelName();
      node0.children();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      node0.isDefaultCase();
      Node node1 = Node.newString("3-HT;n", 57, (-3685));
      node1.putIntProp(39, 2);
      node1.setSourceEncodedPositionForTree(42);
      node0.getChildCount();
      node1.addChildrenToFront(node0);
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newNumber((double) 86);
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      InputId inputId0 = new InputId("]!KH0R/&6");
      Node node0 = Node.newString(693, "");
      node0.setLineno(693);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = Node.newString(693, "");
      node0.setLineno(693);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getBooleanProp(3733);
      node0.getChangeTime();
      Node node1 = Node.newString(46, "Lls", 52, 33);
      node0.isOptionalArg();
      node1.setOptionalArg(true);
      node0.isOnlyModifiesThisCall();
      node0.setDouble((-428.72383015));
      node1.isVoid();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      node0.isAnd();
      Node node1 = new Node(47, node0, node0, node0);
      node0.setChangeTime(4);
      node0.hasMoreThanOneChild();
      node0.isBlock();
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      node0.setOptionalArg(false);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      Node node4 = node2.useSourceInfoIfMissingFromForTree(node0);
      Node.extractLineno(43);
      Node node5 = Node.newNumber(0.0);
      node5.removeChild(node1);
      Node node6 = node5.useSourceInfoFrom(node4);
      node6.isComma();
      node3.isEmpty();
      // Undeclared exception!
      try { 
        node2.isFalse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = Node.newNumber(0.5, 1559, 1559);
      node0.siblings();
      node0.getSourceOffset();
      node0.getSideEffectFlags();
      node0.addSuppression((String) null);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append((String) null);
      node_FileLevelJsDocBuilder0.append((String) null);
      node0.isDo();
      node0.getType();
      node0.getChangeTime();
      Node node1 = new Node(36, node0, node0, node0, 676, (-2729));
      node1.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      int int0 = Node.FLAG_LOCAL_RESULTS;
      Node node0 = Node.newString("");
      node0.isNumber();
      node0.isDo();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      node0.isDefaultCase();
      Node node1 = new Node(54, node0);
      node1.putIntProp(39, 2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node0.setSideEffectFlags(node_SideEffectFlags2);
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "com.google.javascript.rhino.jstype.FunctionType$PropAccess";
      Node node0 = new Node((-2568));
      Node node1 = Node.newString("com.google.javascript.rhino.Node$NodeMismatch");
      Node node2 = node0.srcref(node1);
      node0.isOnlyModifiesThisCall();
      node2.isNew();
      node1.isVarArgs();
      node0.detachChildren();
      node0.toString(false, false, true);
      int int0 = 0;
      node0.getBooleanProp(int0);
      node0.isQuotedString();
      // Undeclared exception!
      try { 
        node0.isWhile();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2568
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString((-651), "Object#Element");
      Node node1 = new Node(32);
      node0.toString(true, false, false);
      node1.toString();
      String string0 = "Object#Key";
      // Undeclared exception!
      try { 
        node0.setString(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -651
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newString("h\"Gg&5w", (-679), (-679));
      Node node1 = new Node(43, node0, node0, node0, node0);
      node1.getQualifiedName();
      Node node2 = new Node(4, node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.getJsDocBuilderForNode();
      node0.addChildrenToFront(node1);
      node0.hasChild(node2);
      // Undeclared exception!
      try { 
        node0.isNull();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[6];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeArray0[0] = jSType0;
      TemplateType templateType0 = jSTypeRegistry1.createTemplateType("C-z9yx7");
      jSTypeArray0[1] = (JSType) templateType0;
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(122, 0, 122);
      nodeArray0[0] = node0;
      Node node1 = new Node(105, nodeArray0, 1051, (-1503));
      Node node2 = new Node(0, node1, node1);
      EnumType enumType0 = jSTypeRegistry1.createEnumType("\"g?Feb[#/", node2, templateType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      enumElementType1.getPropertyNode("URSH");
      Node node3 = new Node((-5587), (Node) null);
      Visitor<Node> visitor0 = (Visitor<Node>) mock(Visitor.class, new ViolatedAssumptionAnswer());
      doReturn(node3).when(visitor0).caseTemplateType(any(com.google.javascript.rhino.jstype.TemplateType.class));
      templateType0.visit(visitor0);
      TemplateType templateType1 = jSTypeRegistry0.getObjectElementKey();
      jSTypeArray0[2] = (JSType) templateType1;
      JSType jSType1 = modificationVisitor0.caseNumberType();
      jSTypeArray0[3] = jSType1;
      Node[] nodeArray1 = new Node[0];
      int int0 = 16384;
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      Object object0 = new Object();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("prev is not a child of this node.", true);
      Node node0 = null;
      Node node1 = new Node(1219, (Node) null);
      node1.checkTreeEqualsImpl(node0);
      int int0 = 116;
      node1.getProp(int0);
      int int1 = 63;
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = Node.newNumber((-190.3169171069));
      node0.mayMutateArguments();
      node0.getChangeTime();
      node0.isDefaultCase();
      Node node1 = new Node((-1623), node0);
      node0.putIntProp(304, 867);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesThis();
      node1.setSideEffectFlags(node_SideEffectFlags1);
      node1.siblings();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(1128, node0, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node0.isDelProp();
      node1.isWhile();
      node1.setSideEffectFlags(node_SideEffectFlags0);
      node1.siblings();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node((-864), node0, node0, node0);
      node1.getLength();
      node1.isQualifiedName();
      Node node2 = Node.newString("lP@k&&SHEHSBkfal", 3238, 120);
      node2.addChildBefore(node1, node1);
      int int0 = 2194;
      String string0 = "M>Bf/{4D%XZDb8/\"e1";
      Node node3 = Node.newString(int0, string0);
      String string1 = ".<";
      // Undeclared exception!
      try { 
        node3.setString(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getBooleanProp(3733);
      node0.getChangeTime();
      Node node1 = Node.newString(46, "Lls", 52, 33);
      node0.putIntProp(4095, 38);
      node0.setSourceEncodedPositionForTree(1);
      node0.getChildCount();
      node1.addChildrenToFront(node0);
      node0.isLocalResultCall();
      node1.getAncestors();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = new Node(101, 11, (-3));
      node0.getProp(11);
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.getAncestors();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newNumber(0.5, 1559, 1559);
      node0.siblings();
      node0.getSourceOffset();
      node0.getSideEffectFlags();
      node0.addSuppression((String) null);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append((String) null);
      node_FileLevelJsDocBuilder0.append((String) null);
      node0.isDo();
      node0.getType();
      node0.getChangeTime();
      Node node1 = new Node(36, node0, node0, node0, 676, (-2729));
      node1.getJSType();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newNumber(1557.62750104219);
      Node node1 = Node.newNumber(181.473194867, 38, 54);
      node0.toString();
      node1.checkTreeEquals(node0);
      node0.isExprResult();
      Node node2 = node0.srcrefTree(node1);
      node2.mayMutateGlobalStateOrThrow();
      node2.getQualifiedName();
      node0.isContinue();
      node1.setSideEffectFlags(2765);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      int int0 = Node.IS_CONSTANT_NAME;
      node0.isDefaultCase();
      Node node1 = Node.newString("3-HT;n", 57, (-3685));
      node1.setSourceEncodedPositionForTree(42);
      node0.getChildCount();
      Node.newString("");
      node0.srcrefTree(node1);
      Node.newString((-612), "|P-?6lDu{DE&C");
      node1.addChildrenToFront(node0);
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      Node node1 = Node.newString("3-HT;n", 57, (-3685));
      node1.putIntProp(39, 2);
      node1.setSourceEncodedPositionForTree(42);
      node0.getChildCount();
      node1.addChildrenToFront(node0);
      Node.newString("3-HT;n");
      node0.isLocalResultCall();
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getBooleanProp(3733);
      node0.getChangeTime();
      Node node1 = Node.newString(46, "Lls", 52, 33);
      node1.isQuotedString();
      node0.isOnlyModifiesThisCall();
      node0.setDouble((-428.72383015));
      node1.isVoid();
      node0.setType(57);
      Node node2 = new Node(56, 51, 105);
      node0.useSourceInfoIfMissingFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = Node.newString("should never be called");
      node0.isLabel();
      Node node1 = Node.newString(30, "should never be called", 36, 8);
      node1.setType(43);
      node0.isFromExterns();
      node0.isAdd();
      node0.isSyntheticBlock();
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = Node.newString((-1548), "F");
      Node node1 = new Node(0, node0, node0, 30, 52);
      node1.isDelProp();
      node1.getQualifiedName();
      node0.setCharno(1);
      node0.clonePropsFrom(node1);
      node1.isEquivalentToShallow(node0);
      node1.detachFromParent();
      String string0 = "";
      int int0 = 2048;
      // Undeclared exception!
      try { 
        Node.newString(string0, node1.SIDE_EFFECTS_ALL, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newNumber(2426.33);
      Node node1 = new Node((-431), node0, 4, 54);
      node1.setCharno(124);
      Node node2 = new Node((-1806), node1, node1, node1, node1);
      node2.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.isDefaultCase();
      node0.isAnd();
      node0.isGetProp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setChangeTime((-53));
      Node node1 = Node.newNumber((-254.500320119), 36, Integer.MAX_VALUE);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.getProp(1);
      node0.isNoSideEffectsCall();
      Node node3 = Node.newString("32 m", 57, 39);
      node2.addChildrenToBack(node3);
      node3.isEquivalentTo(node1, true, false, false);
      node1.setSourceEncodedPositionForTree(0);
      Node node4 = node0.removeChildAfter(node3);
      node0.getDirectives();
      node4.isAssign();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = Node.newString("dA=");
      node0.setQuotedString();
      Node node1 = Node.newNumber(0.0);
      Node node2 = new Node(12);
      node2.removeChild(node0);
      node2.getString();
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node1, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = Node.newString((-1548), "F");
      Node node1 = new Node(0, node0, node0, 30, 52);
      node0.isAdd();
      node1.getQualifiedName();
      Node node2 = node0.clonePropsFrom(node1);
      node1.isEquivalentToShallow(node0);
      Node node3 = node2.useSourceInfoFrom(node1);
      node2.isComma();
      node0.isEmpty();
      node3.isFalse();
      node3.setQuotedString();
      node2.setSourceFileForTesting("com.google.common.collect.Sets$1");
      node3.getLength();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node.newString("X9`%");
      Node node0 = Node.newString("", (-122), 0);
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = Node.newString(112, "", 112, 112);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isSwitch();
      node0.isName();
      node0.isEmpty();
      node0.isFalse();
      node0.isSetterDef();
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      InputId inputId0 = new InputId("]!KH0R/&6");
      Node node0 = Node.newString(693, "");
      node0.setLineno(693);
      node0.isTrue();
      Node node1 = Node.newString("");
      node1.isOnlyModifiesArgumentsCall();
      node0.addChildToFront(node1);
      node1.isVar();
      Node node2 = new Node(48, node0, node1, node0, node0);
      node2.getType();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newString(124, "com.google.common.collect.ArrayListMultimap", 101, (-213));
      node0.isLabelName();
      node0.isStringKey();
      node0.setOptionalArg(false);
      node0.getLength();
      node0.isDo();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      InputId inputId0 = new InputId("]!KH0R/&6");
      Node node0 = new Node(693, (Node) null, (Node) null, (Node) null);
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$NodeMismatch");
      node0.isVarArgs();
      node0.isString();
      node0.hasChildren();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      TemplateType templateType1 = JSType.toMaybeTemplateType((JSType) templateType0);
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType0, templateType1, templateType0, templateType1, templateType1, templateType1, templateType1, templateType0, templateType0);
      immutableList0.subList(4095, 1044);
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node1.replaceChildAfter(node0, node0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$NodeMismatch");
      node0.isVarArgs();
      node0.isString();
      node0.hasChildren();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSType[] jSTypeArray0 = new JSType[1];
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = Node.newNumber(0.5, 1559, 1559);
      node0.siblings();
      node0.getSourceOffset();
      node0.getSideEffectFlags();
      node0.putIntProp(1559, 1559);
      node0.addSuppression((String) null);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append((String) null);
      node_FileLevelJsDocBuilder0.append((String) null);
      node0.isLabelName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.isString();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.ProxyObjectType", 2329, (-654));
      Node node1 = new Node((-654), node0, node0, node0, node0, (-654), (-3316));
      node0.isWhile();
      node0.setChangeTime((-3864));
      node1.setOptionalArg(false);
      node0.toString();
      node1.cloneTree();
      node0.cloneNode();
      node0.isDefaultCase();
      node1.hasChildren();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "com.google.javascript.rhino.jstype.FunctionType$PropAccess";
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.FunctionType$PropAccess", (-2568), (-2568));
      Node node1 = new Node(56, node0, node0);
      Node node2 = node0.srcref(node1);
      node0.isVarArgs();
      node1.isVarArgs();
      node0.detachChildren();
      node0.toString(true, true, true);
      node0.getBooleanProp(0);
      node0.isQuotedString();
      node0.isWhile();
      node1.isSyntheticBlock();
      int int0 = 0;
      node1.addChildrenAfter(node2, node0);
      node0.getJSDocInfo();
      node2.setLength(int0);
      node2.getChildBefore(node1);
      node2.addSuppression(string0);
      // Undeclared exception!
      try { 
        node1.mayMutateArguments();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = Node.newNumber((-1559.4051843020907));
      Node node1 = new Node(0, node0, node0, node0);
      node0.toString(true, true, true);
      node0.putProp(2, "]!KH0R/&6");
      Node node2 = Node.newString("NUMBER -1559.4051843020907");
      node0.copyInformationFrom(node2);
      node0.getJsDocBuilderForNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesThis();
      Node node3 = new Node((-1657), 49, 47);
      node1.getLength();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      node3.removeChildAfter((Node) null);
      node2.useSourceInfoIfMissingFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = new Node((-4096), node0, 36, 31);
      Node node2 = new Node(4118, node1, node1, node1, 52, 4095);
      node2.isWhile();
      Node node3 = new Node(15, node1, node1, node2);
      node1.addChildAfter(node2, node3);
      node3.isQuotedString();
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(node3.COLUMN_BITS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("rLR70n");
      Node node1 = new Node(36, node0, node0);
      node1.mayMutateArguments();
      Node node2 = new Node(4095, node0, node0, node1);
      node2.isDefaultCase();
      node0.isAnd();
      // Undeclared exception!
      try { 
        node1.isGetProp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) 4008, (-491), 54);
      Node node1 = new Node(4008, node0);
      Node node2 = new Node((-651), node1, node1, node0);
      int int0 = 126;
      node2.getIntProp(int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      Node node4 = node2.useSourceInfoIfMissingFromForTree(node0);
      node3.setOptionalArg(true);
      Node.extractLineno(43);
      Node node5 = Node.newNumber(0.0);
      node2.getDouble();
      node4.isEquivalentToTyped(node0);
      node5.removeChild(node1);
      Node node6 = node5.useSourceInfoFrom(node4);
      // Undeclared exception!
      try { 
        node6.isComma();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 57
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node1.getAncestors();
      node1.isContinue();
      node0.isFunction();
      try { 
        node1.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = Node.newString(1128, "<invalid>", 37, 101);
      node1.isOptionalArg();
      node1.isVarArgs();
      node0.putIntProp(56, 51);
      node1.setChangeTime((-2604));
      Node node2 = new Node(38);
      node2.cloneNode();
      node1.getDouble();
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newString("H", 112, 112);
      Node node1 = new Node(29);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      Node node4 = node2.useSourceInfoIfMissingFromForTree(node0);
      Node.extractLineno(43);
      Node node5 = new Node(52, node0, node2, 2, 30);
      node5.removeChild(node1);
      Node node6 = node5.useSourceInfoFrom(node4);
      node6.isComma();
      node3.isEmpty();
      node2.isFalse();
      node1.setQuotedString();
      String string0 = null;
      node1.setSourceFileForTesting(string0);
      // Undeclared exception!
      try { 
        node1.getLength();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = Node.newString("H", 112, 112);
      Node node1 = new Node(29);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      Node node4 = node2.useSourceInfoIfMissingFromForTree(node0);
      Node.extractLineno(43);
      Node node5 = new Node(52, node0, node2, 2, 30);
      node5.removeChild(node1);
      Node node6 = node5.useSourceInfoFrom(node4);
      node6.isComma();
      node3.isEmpty();
      node2.isFalse();
      node1.setQuotedString();
      node4.setDouble(node0.NO_SIDE_EFFECTS);
      // Undeclared exception!
      try { 
        node0.isDo();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = Node.newString("", (-2676), 152);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(49, nodeArray0);
      node1.removeChild(node0);
      Node.extractCharno(732);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = "reflected_object";
      Node node0 = Node.newString(78, "reflected_object");
      Node node1 = new Node(51, 40, 55);
      node0.useSourceInfoIfMissingFromForTree(node1);
      Node.extractLineno(31);
      Node node2 = new Node(388, node0, node0, 3681, 37);
      node2.removeChild(node0);
      Node node3 = node1.useSourceInfoFrom(node0);
      node3.isComma();
      node0.isEmpty();
      node3.isFalse();
      node3.setQuotedString();
      node0.setSourceFileForTesting(string0);
      node3.getLength();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = new Node(108);
      node0.mayMutateArguments();
      node0.isAnd();
      node0.setChangeTime(4);
      node0.setOptionalArg(false);
      node0.toString();
      node0.cloneNode();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("", 305, (-2659));
      node0.putIntProp((-2659), (-2659));
      node0.addSuppression((String) null);
      node0.isEmpty();
      node0.isFalse();
      node0.setQuotedString();
      node0.setDouble(2368.6);
      int int0 = 843;
      Node node1 = new Node(node0.COLUMN_BITS, nodeArray0, node0.FLAG_NO_THROWS, int0);
      node1.isDo();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = new Node(112);
      node0.isWhile();
      node0.setChangeTime(4);
      Node node1 = Node.newString(38, ")a", 32, 8);
      node1.isOnlyModifiesThisCall();
      node1.toString();
      node0.putIntProp(53, 54);
      node0.setDouble(42);
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = Node.newString("r8\nqtV", (-14), (-14));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      node0.isRegExp();
      node0.putIntProp((-2339), 48);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = Node.newString(8, "2");
      node1.setOptionalArg(false);
      Node node2 = Node.newNumber(561.49);
      Node node3 = new Node(105, node2, 2, 32);
      node3.getDouble();
      Node node4 = new Node(node3.STATIC_SOURCE_FILE, node3.NO_SIDE_EFFECTS, node0.INFERRED_FUNCTION);
      Node node5 = new Node(node1.DIRECT_EVAL, node1, node4.SIDE_EFFECTS_ALL, node4.FLAG_GLOBAL_STATE_UNMODIFIED);
      node4.isEquivalentToTyped(node5);
      node2.removeChild(node5);
      node5.isScript();
      node2.isEquivalentTo(node3);
      // Undeclared exception!
      try { 
        node3.isThis();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FUNCTION <invalid> 2 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      node0.isDefaultCase();
      Node node1 = Node.newString("3-HT;n", 57, (-3685));
      node1.putIntProp(39, 2);
      node1.setDouble(56);
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = Node.newNumber(45.121399912647, 4431, 108);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      Node node2 = Node.newString(2, "V@~ttyYbGmdMLK|(R");
      node0.getInputId();
      node0.isEmpty();
      node2.isVarArgs();
      node0.putIntProp((-2054), 57);
      boolean boolean0 = true;
      String string0 = node1.toString(true, true, true);
      jSDocInfo0.documentBlock(string0);
      node0.getLength();
      node2.replaceChildAfter(node0, node0);
      node0.getJSType();
      jSDocInfo0.setStableIdGenerator(boolean0);
      // Undeclared exception!
      try { 
        node1.isArrayLit();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id -2054
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = Node.newString(1041, "1d>:YsS2fdB0");
      node0.isOnlyModifiesArgumentsCall();
      node0.getSourceFileName();
      node0.getSideEffectFlags();
      node0.getDirectives();
      node0.getLength();
      node0.isSwitch();
      node0.isLocalResultCall();
      node0.isFunction();
      node0.getSourceFileName();
      node0.removeChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.setSideEffectFlags(node_SideEffectFlags0);
      node0.isNew();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setReturnsTainted();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1041
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node1.getAncestors();
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 157449, 56);
      node0.setDouble(56);
      node0.getDirectives();
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = Node.newString(1041, "1d>:YsS2fdB0");
      node0.isOnlyModifiesArgumentsCall();
      node0.getSourceFileName();
      node0.getSideEffectFlags();
      Node node1 = Node.newString((String) null, (-177), 1334);
      Node node2 = new Node(node0.INCRDECR_PROP, node0, node1, node0.SLASH_V, node0.VAR_ARGS_NAME);
      node1.isThrow();
      node1.removeChildAfter(node2);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = Node.newString(112, "", 112, 112);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isSwitch();
      node0.isSyntheticBlock();
      node0.mayMutateArguments();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = Node.newNumber(0.5, 1559, 1559);
      node0.siblings();
      node0.getSourceOffset();
      node0.getSideEffectFlags();
      node0.putIntProp(1559, 1559);
      node0.toStringTree();
      String string0 = null;
      // Undeclared exception!
      try { 
        node0.addSuppression(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 1559
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newNumber(0.7);
      node0.isLocalResultCall();
      node0.getLength();
      node0.setSourceFileForTesting("B,z");
      Node node1 = Node.newNumber((double) 31);
      node1.toString();
      node1.isDebugger();
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      int int0 = 0;
      Node node0 = Node.newString((-1548), "F");
      node0.toStringTree();
      Node node1 = new Node(int0, node0, node0, node0.VAR_ARGS_NAME, node0.LENGTH);
      // Undeclared exception!
      try { 
        node0.isNoSideEffectsCall();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1548
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("", 305, (-2676));
      nodeArray0[0] = node0;
      Node node1 = new Node(64, nodeArray0);
      node1.getChildBefore(node0);
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.isDefaultCase();
      node0.isAnd();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(4095, nodeArray0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.getQualifiedName();
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node0);
      node3.setOptionalArg(false);
      Node.extractLineno((-86));
      Node node4 = Node.newNumber((double) 4095);
      node3.getDouble();
      node1.isEquivalentToTyped(node2);
      node3.removeChild(node0);
      node1.useSourceInfoFrom(nodeArray0[0]);
      // Undeclared exception!
      try { 
        node4.isComma();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = Node.newString(1128, "<invalid>", 37, 101);
      node1.isOptionalArg();
      node1.mayMutateGlobalStateOrThrow();
      node1.setOptionalArg(true);
      node0.isOnlyModifiesThisCall();
      node0.setDouble(31);
      node1.isDo();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = Node.newString(10, "ERROR");
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$NodeMismatch");
      node0.isVarArgs();
      node0.isString();
      node0.hasChildren();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      JSType.toMaybeTemplateType((JSType) templateType0);
      node0.setOptionalArg(false);
      node0.isOnlyModifiesThisCall();
      node0.setDouble(1.0);
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.children();
      node0.isSyntheticBlock();
      node0.getProp((-642));
      Node node1 = new Node(870, node0);
      node1.getQualifiedName();
      int int0 = (-1588);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplateType((JSType) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node1, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      Node node2 = enumElementType0.getRootNode();
      Node node3 = new Node(int0, node0, node1, node1, node2);
      // Undeclared exception!
      try { 
        node3.useSourceInfoIfMissingFromForTree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = Node.newString("", (-286), (-286));
      node0.putBooleanProp((-286), true);
      Node node1 = new Node((-1774), node0, node0, 8, 1616);
      node1.isThrow();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = Node.newString((-2830), "reflected_object");
      Node node1 = new Node((-2830), node0, node0, node0, (-2779), 27591);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = node2.getChildBefore(node1);
      String string0 = "Usu7=`48 Z";
      node3.setSourceFileForTesting(string0);
      node0.isAssignAdd();
      // Undeclared exception!
      try { 
        node0.checkTreeTypeAwareEqualsImpl(node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = Node.newNumber(45.121399912647, 4431, 108);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      String string0 = "V@~ttyYbGmdMLK|(R";
      node0.replaceChild(node1, node1);
      Node.newString(node0.FLAG_THIS_UNMODIFIED, string0);
      node0.getInputId();
      // Undeclared exception!
      try { 
        node0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node node0 = Node.newNumber(45.121399912647, 4419, (-137));
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node0.replaceChild(node1, node1);
      node1.setSourceEncodedPositionForTree(node0.FLAG_GLOBAL_STATE_UNMODIFIED);
      node0.getChildCount();
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.isQualifiedName();
      node0.getQualifiedName();
      node2.setOptionalArg(true);
      node0.getIndexOfChild(node0);
      node0.getBooleanProp(9);
      Node node3 = new Node(48, node1, node1, node0, 83, 50);
      node2.getSourceFileName();
      node3.isScript();
      node1.isContinue();
      node1.isAssign();
      Node node4 = node1.useSourceInfoFromForTree(node0);
      Node node5 = node0.useSourceInfoIfMissingFrom(node4);
      node2.isGetterDef();
      node2.isCast();
      node5.isAssign();
      node4.replaceChild(node0, node0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Node node0 = Node.newNumber(0.5, 1559, 1559);
      node0.siblings();
      node0.getBooleanProp(1559);
      node0.getChangeTime();
      node0.putBooleanProp(1559, false);
      Node node1 = Node.newString(54, "STRING_TYPE", (-3374), (-451));
      node0.isOptionalArg();
      node0.setOptionalArg(false);
      node1.isOnlyModifiesThisCall();
      node0.setDouble(1.0);
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(108, 83, (-822));
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("Object#Element");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder1.append("Object#Element");
      node0.isFromExterns();
      node0.isScript();
      node0.isInc();
      node0.toString();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = Node.newNumber(45.121399912647, 4431, 108);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      Node node2 = Node.newString(2, "V@~ttyYbGmdMLK|(R");
      node0.getInputId();
      node0.isEmpty();
      node2.isVarArgs();
      boolean boolean0 = true;
      node1.toString(true, true, true);
      jSDocInfo0.documentBlock("NUMBER 45.121399912647 4431 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003]");
      node0.getLength();
      node2.replaceChildAfter(node0, node0);
      node0.getJSType();
      jSDocInfo0.setStableIdGenerator(boolean0);
      node1.isArrayLit();
      node0.isFromExterns();
      node1.isTypeOf();
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      boolean boolean0 = node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(120, node0, node0, node0, node0);
      node0.replaceChildAfter(node1, node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      JSDocInfo jSDocInfo0 = new JSDocInfo(boolean0);
      // Undeclared exception!
      try { 
        jSDocInfo0.getAssociatedNode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(1128, node0, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setMutatesThis();
      node1.replaceChildAfter(node0, node0);
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags1.setThrows();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$NodeMismatch");
      node0.isVarArgs();
      node0.isString();
      node0.hasChildren();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("com.google.javascript.rhino.Node$NodeMismatch", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      InputId inputId0 = new InputId("com.google.javascript.rhino.Node$NodeMismatch");
      node0.setInputId(inputId0);
      node0.getChangeTime();
      node0.isFromExterns();
      node0.getNext();
      Node node1 = Node.newString("X^m", 42, 2);
      node1.isReturn();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = Node.newString("&rxn}jBn");
      Node node1 = new Node((-2787), node0, node0, node0);
      InputId inputId0 = new InputId("&rxn}jBn");
      node0.setLineno(997);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("&rxn}jBn", true);
      node1.setStaticSourceFile(simpleSourceFile0);
      node0.setInputId(inputId0);
      node1.getChangeTime();
      node1.isFromExterns();
      node1.getNext();
      Node node2 = Node.newString("w.~", (-2604), (-40));
      node2.isReturn();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSType[] jSTypeArray0 = new JSType[6];
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeArray0[0] = jSType0;
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("C-z9yx7");
      jSTypeArray0[1] = (JSType) templateType0;
      Node node0 = Node.newString("Not declared as a constructor");
      Node node1 = new Node(0, node0, 132, 2);
      Node node2 = Node.newNumber((-901.2191269072));
      node1.getDouble();
      node1.isEquivalentToTyped(node2);
      int int0 = 113;
      String string0 = null;
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(46, node0, node0, node0, node0, 43, 12);
      node1.isDefaultCase();
      Node node2 = new Node(2692, node1);
      node2.putIntProp(8, 4095);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node0.isDelProp();
      node0.isAdd();
      node1.setSideEffectFlags(node_SideEffectFlags2);
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(2, 2, 2);
      node_SideEffectFlags0.setReturnsTainted();
      node0.isString();
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(51);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 51
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = Node.newNumber((-1.1684825400601486));
      node0.mayMutateArguments();
      node0.isDefaultCase();
      node0.isAnd();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(4095, nodeArray0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.getQualifiedName();
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node0);
      node3.setOptionalArg(false);
      Node.extractLineno((-86));
      Node node4 = Node.newNumber((double) 4095);
      node3.getDouble();
      node1.isEquivalentToTyped(node2);
      node3.removeChild(node0);
      node1.useSourceInfoFrom(nodeArray0[0]);
      // Undeclared exception!
      try { 
        node4.isComma();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(46, node0, node0, node0, node0, 43, 12);
      node0.useSourceInfoFrom(node1);
      node1.isDefaultCase();
      Node node2 = new Node(2692, node1);
      node2.putIntProp((-3), 4095);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.isEquivalentToTyped(node2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node1.setSideEffectFlags(node_SideEffectFlags2);
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = Node.newString(1041, "1d>:YsS2fdB0");
      node0.isOnlyModifiesArgumentsCall();
      node0.getSourceFileName();
      node0.getSideEffectFlags();
      node0.getDirectives();
      node0.getLength();
      node0.setDirectives((Set<String>) null);
      node0.isSwitch();
      node0.isLocalResultCall();
      node0.isFunction();
      node0.getSourceFileName();
      node0.removeChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.setSideEffectFlags(node_SideEffectFlags0);
      node0.isNew();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setReturnsTainted();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1041
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node1.getAncestors();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      node1.setDirectives(treeSet0);
      node1.isContinue();
      node0.isFunction();
      node1.isEquivalentTo(node0, false, true, false);
      node1.addChildToFront(node0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getChangeTime();
      Node node1 = new Node(50, node0, node0, node0, node0, 0, 32);
      node0.isDefaultCase();
      Node node2 = new Node(38, node1);
      node0.putIntProp(52, 54);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.hasMoreThanOneChild();
      node2.checkTreeEqualsImpl(node0);
      node0.getLength();
      node1.isDo();
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = Node.newString(1128, "<invalid>", 37, 101);
      node1.isOptionalArg();
      node1.mayMutateGlobalStateOrThrow();
      node1.setOptionalArg(true);
      node1.isOptionalArg();
      node0.isOnlyModifiesThisCall();
      node1.setDouble(39);
      node1.isDo();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isOr();
      node0.getChangeTime();
      Node node1 = new Node(54, node0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      String string0 = "NEW";
      Node node2 = new Node(39, node0, node1, 1827, 29);
      Node node3 = new Node(node0.LENGTH, node2, node2, node1, node1, node0.CHANGE_TIME, node0.EMPTY_BLOCK);
      int int0 = 8;
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((double) 36, 8388608, 8388608);
      node0.isAssignAdd();
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = Node.newString(1128, "<invalid>", 37, 101);
      node1.isFunction();
      node1.mayMutateGlobalStateOrThrow();
      node1.setOptionalArg(true);
      node1.isOptionalArg();
      node1.isIf();
      node0.setDouble(31);
      node1.isDo();
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = Node.newString(124, "\"Gg&5w", 124, (-213));
      node0.setString("\"Gg&5w");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isEquivalentToShallow(node0);
      node0.isOptionalArg();
      node0.isIf();
      node0.setDouble(40);
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = new Node(8388608, 8388608, 8388608);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      Node node1 = new Node(1313, nodeArray0);
      node0.removeChild(node1);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = Node.newNumber(0.5, 1559, 1559);
      node0.siblings();
      node0.getSourceOffset();
      node0.getSideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.createTemplateType("C-z9yx7");
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      int int0 = 1073741823;
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node1;
      nodeArray0[1] = node1;
      Node node2 = new Node(24, nodeArray0, 1157, 37);
      nodeArray0[2] = node2;
      nodeArray0[3] = node0;
      Node node3 = new Node(node1.INCRDECR_PROP);
      nodeArray0[4] = node3;
      nodeArray0[5] = node1;
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      node0.isDefaultCase();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      Node node1 = new Node(39, nodeArray0, 40, 37);
      // Undeclared exception!
      try { 
        node0.setDouble(node1.NO_SIDE_EFFECTS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of();
      jSTypeRegistry0.setTemplateTypeNames(immutableList0);
      Node node0 = Node.newString("Object#Key", (-651), 40);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = new Node((-7740), nodeArray0);
      nodeArray0[0].removeChildAfter(node0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.isWhile();
      int int0 = (-1306);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = new Node((-1306), nodeArray0, 153, 53);
      node1.setType(int0);
      // Undeclared exception!
      try { 
        nodeArray0[1].useSourceInfoIfMissingFromForTree(nodeArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newNumber(0.7);
      node0.isLocalResultCall();
      node0.getLength();
      node0.setSourceFileForTesting("B,z");
      Node node1 = Node.newNumber((double) 31);
      node1.toString();
      node0.setType(2);
      node1.isDebugger();
      node0.checkTreeEquals(node1);
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = Node.newString(1128, "<invalid>", 37, 101);
      node1.isOptionalArg();
      node1.mayMutateGlobalStateOrThrow();
      node1.setOptionalArg(true);
      node0.isOnlyModifiesThisCall();
      node1.isOnlyModifiesThisCall();
      Node node2 = Node.newNumber(1165.7469515686969, 37, 1548);
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node2.setSourceFileForTesting("<invalid>");
      node0.getLength();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      String string0 = "3-HT;n\\";
      Node node1 = Node.newString("3-HT;n", 57, (-3685));
      node1.putIntProp(39, 2);
      node1.setLength((-875));
      Node node2 = node0.getChildBefore(node1);
      int int0 = 37;
      node0.putIntProp(node2.STATIC_SOURCE_FILE, int0);
      // Undeclared exception!
      try { 
        node2.addSuppression(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = new Node(112);
      node0.mayMutateArguments();
      node0.setLength(112);
      node0.isAnd();
      node0.isWhile();
      node0.setOptionalArg(false);
      node0.isOnlyModifiesThisCall();
      node0.toString();
      Node node1 = node0.cloneNode();
      node1.isScript();
      node1.isDec();
      node0.isSetterDef();
      node0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getChangeTime();
      Node node1 = Node.newString(1128, "<invalid>", 37, 1128);
      node1.isOptionalArg();
      node1.mayMutateGlobalStateOrThrow();
      node1.isUnscopedQualifiedName();
      node0.setDouble(31);
      node1.isDo();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node.newString("<invalid>");
      node0.isOptionalArg();
      node0.isUnscopedQualifiedName();
      node0.getStaticSourceFile();
      node0.setDouble(31);
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[6];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeArray0[0] = jSType0;
      TemplateType templateType0 = jSTypeRegistry1.createTemplateType("C-z9yx7");
      jSTypeArray0[1] = (JSType) templateType0;
      Node[] nodeArray0 = new Node[7];
      JSType[] jSTypeArray1 = new JSType[4];
      jSTypeArray1[1] = (JSType) templateType0;
      jSTypeArray1[2] = jSType0;
      jSTypeArray1[3] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray1);
      node0.setSourceFileForTesting("?$lbT$}1:_");
      node0.isAssignAdd();
      Node node1 = new Node((-3), nodeArray0, 3681, 50);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.getChildBefore(node0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(54, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags3.clearAllFlags();
      node1.isBreak();
      node0.getJsDocBuilderForNode();
      Node node2 = Node.newString(95, (String) null);
      node2.setLineno(node0.STATIC_SOURCE_FILE);
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        node0.isEquivalentTo(node2, boolean1, boolean1, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = new Node(116);
      Node node1 = new Node((-2245), 36, 1024);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = node2.useSourceInfoFromForTree(node1);
      node3.getQualifiedName();
      Node node4 = node1.useSourceInfoIfMissingFromForTree(node3);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node1.isSwitch();
      node2.isBreak();
      node1.getJsDocBuilderForNode();
      node2.isOnlyModifiesThisCall();
      Node node5 = node2.cloneNode();
      node5.isScript();
      node1.isGetProp();
      node4.checkTreeEqualsImpl(node5);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(1128, node0, node0, node0, node0);
      node1.isOptionalArg();
      node0.isStringKey();
      node1.setOptionalArg(true);
      node0.isOnlyModifiesThisCall();
      node0.setDouble(31);
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.isWhile();
      Node node1 = Node.newString(46, "Lls", 52, 33);
      node0.setSideEffectFlags(0);
      boolean boolean0 = true;
      node0.isOptionalArg();
      // Undeclared exception!
      try { 
        node1.setOptionalArg(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = Node.newString("h\"Gg&5w");
      node0.mayMutateArguments();
      node0.setSourceFileForTesting("7");
      Node node1 = Node.newNumber((double) 0);
      node0.getType();
      node1.isOnlyModifiesArgumentsCall();
      node0.getQualifiedName();
      node0.setSideEffectFlags(40);
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = Node.newNumber(1841.7, 20, 2765);
      String string0 = node0.toString();
      Node node1 = Node.newString("");
      node0.srcrefTree(node1);
      node0.getProp(48);
      Node node2 = Node.newString("", 48, (-2476));
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node3 = node0.setJSDocInfo(jSDocInfo0);
      boolean boolean0 = false;
      boolean boolean1 = true;
      node0.toString(true, false, false);
      boolean boolean2 = true;
      Node node4 = Node.newNumber(2554.453278684, 4095, 31);
      node4.siblings();
      node2.getChildBefore(node3);
      boolean boolean3 = false;
      jSDocInfo0.setExterns(boolean3);
      node0.isEquivalentTo(node2, boolean0, boolean1, boolean2);
      node0.hasChildren();
      node2.getAncestor(node0.POST_FLAG);
      Node node5 = node2.getChildAtIndex(node0.ORIGINALNAME_PROP);
      node5.isLocalResultCall();
      node5.copyInformationFrom(node2);
      int int0 = (-2680);
      // Undeclared exception!
      try { 
        Node.newString(string0, int0, node3.REFLECTED_OBJECT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = Node.newString(1128, "<invalid>", 37, 101);
      node1.isOptionalArg();
      node0.isEmpty();
      node1.isVarArgs();
      node0.putIntProp((-2339), (-2339));
      node1.setChangeTime((-2604));
      node1.putBooleanProp(32, true);
      Node node2 = new Node(50, node1, node1, 2, 38);
      node2.children();
      node2.isThrow();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      InputId inputId0 = new InputId("]!KH0/&6");
      Node node0 = Node.newString("]!KH0/&6", 693, 693);
      node0.setLineno(693);
      node0.isTrue();
      inputId0.toString();
      Node node1 = new Node(54, node0, node0, node0, node0);
      node0.setInputId(inputId0);
      node0.toString();
      Node node2 = node1.cloneNode();
      node1.isScript();
      node1.children();
      node2.isDec();
      node1.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isOr();
      node0.getChangeTime();
      Node node1 = new Node(54, node0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags4.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags5.clearAllFlags();
      node1.isBreak();
      node1.getJsDocBuilderForNode();
      Node node2 = Node.newString(95, "NEW");
      node0.setLineno(57);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node2;
      nodeArray0[1] = node1;
      nodeArray0[2] = node2;
      Node node3 = new Node(54, nodeArray0);
      int int0 = 4431;
      int int1 = 1727;
      Node node4 = null;
      try {
        node4 = new Node(node1.VAR_ARGS_NAME, node0, node3, nodeArray0[1], nodeArray0[2], int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = Node.newString("b/(-R1+");
      Node node1 = new Node(3164, node0, 21, 4095);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.isOnlyModifiesArgumentsCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_PROTOTYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0);
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node4 = node3.useSourceInfoIfMissingFromForTree(node0);
      Node.extractLineno(2857);
      Node node5 = new Node(2188, node0, node0, 49, 2439);
      node5.removeChild(node2);
      int int0 = (-941);
      int int1 = 124;
      Node node6 = new Node(int0, node2, node0, node1, node0, node1.OPT_ARG_NAME, int1);
      node4.useSourceInfoFrom(node6);
      // Undeclared exception!
      try { 
        node4.isComma();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.hasChild(node0);
      node0.getChangeTime();
      Node node1 = new Node(46, node0, node0, node0, node0, 43, 12);
      node1.isDefaultCase();
      Node node2 = new Node(2692, node1);
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node2);
      Node node4 = Node.newString("");
      node3.isOnlyModifiesArgumentsCall();
      node1.addChildToFront(node0);
      node1.isVar();
      int int0 = 731;
      Node node5 = null;
      try {
        node5 = new Node(int0, node0, node4.SLASH_V, node2.SYNTHETIC_BLOCK_PROP);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = new Node(8388608, 8388608, 8388608);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node1 = new Node((-2131), node0, node0, node0, node0, (-2592), 43);
      node1.isBreak();
      node1.getJsDocBuilderForNode();
      Node.newString(2857, "");
      node0.setLineno(46);
      node0.isEquivalentTo(node0, false, false, true);
      Node node2 = Node.newNumber((-1.0), 4, 8388608);
      node2.getLength();
      Node node3 = new Node(125, node0, node0, node0);
      node1.checkTreeEquals(node3);
      nodeArray0[2].isSetterDef();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = Node.newString(112, "", 112, 112);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isSyntheticBlock();
      node0.mayMutateArguments();
      node0.getCharno();
      node0.getDirectives();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = Node.newString("\"Gg&5w");
      Node node1 = new Node(0, 56, (-728));
      node1.addChildrenToBack(node0);
      Node node2 = Node.newString("\"Gg&5w", 57, 4095);
      node2.setLineno(47);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      node0.setOptionalArg(false);
      Node.extractLineno((-2604));
      Node node1 = Node.newNumber((double) 8);
      node1.getDouble();
      node0.isEquivalentToTyped(node1);
      node0.removeChild(node1);
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.getIntProp(node0.SYNTHETIC_BLOCK_PROP);
      // Undeclared exception!
      try { 
        node0.isComma();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = Node.newString("H", 112, 112);
      Node node1 = new Node(29);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      Node node4 = node2.useSourceInfoIfMissingFromForTree(node0);
      Node.extractLineno(43);
      node4.isQuotedString();
      Node node5 = new Node(52, node0, node2, 2, 30);
      node5.removeChild(node1);
      Node node6 = node5.useSourceInfoFrom(node4);
      node6.isEquivalentTo(node5);
      node6.isComma();
      node3.isEmpty();
      node2.isFalse();
      node1.setQuotedString();
      node4.setDouble(node0.NO_SIDE_EFFECTS);
      // Undeclared exception!
      try { 
        node0.isDo();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      int int0 = (-214);
      int int1 = (-3264);
      Node node0 = new Node((-3264), (Node) null, (Node) null, (Node) null, (Node) null, (-214), (-3264));
      int int2 = 154;
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = Node.newString(1041, "1d>:YsS2fdB0");
      node0.isOnlyModifiesArgumentsCall();
      node0.getSourceFileName();
      node0.getSideEffectFlags();
      node0.getDirectives();
      node0.getLength();
      node0.isSwitch();
      node0.isLocalResultCall();
      node0.isFunction();
      node0.getSourceFileName();
      Node node1 = node0.removeChildren();
      node0.isNew();
      node0.isOr();
      StringWriter stringWriter0 = new StringWriter();
      node0.checkTreeEquals((Node) null);
      node1.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = Node.newString(1041, "1d>:YsS2fdB0");
      node0.isOnlyModifiesArgumentsCall();
      node0.getSourceFileName();
      node0.getDirectives();
      node0.getLength();
      node0.isSwitch();
      node0.isLocalResultCall();
      node0.isFunction();
      node0.getSourceFileName();
      Node node1 = node0.removeChildren();
      node0.isNew();
      node0.isOr();
      StringWriter stringWriter0 = new StringWriter();
      node0.checkTreeEquals((Node) null);
      node1.setSourceEncodedPosition(node0.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = Node.newString(124, "com.oogle.comon.collect.rrayListMultimap", 101, (-213));
      node0.isLabelName();
      node0.isStringKey();
      node0.setOptionalArg(false);
      int int0 = Node.FREE_CALL;
      node0.isEquivalentToTyped(node0);
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.isDefaultCase();
      node0.isAnd();
      node0.isGetProp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.mayMutateGlobalStateOrThrow();
      node0.setOptionalArg(true);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<TemplateType> arrayList0 = new ArrayList<TemplateType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) arrayList0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.isOnlyModifiesThisCall();
      node0.isOnlyModifiesThisCall();
      Node.newNumber((double) 1, 95, 1650);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.setSourceFileForTesting("!Hb[[@_ >WU_5&uZ");
      node1.getLength();
      node0.isNumber();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      Node node1 = Node.newString("", 8287, 43);
      node1.getJsDocBuilderForNode();
      node1.getLength();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node0.isNumber();
      node0.getJsDocBuilderForNode();
      node1.getLength();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node1.isDelProp();
      node1.isCase();
      node1.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = Node.newString(563, "", 563, (-5962));
      node0.getSideEffectFlags();
      Node node1 = Node.newString("");
      Node node2 = new Node(50, node0, node0, node1, 2, 46);
      node2.setLineno(53);
      node1.removeChildAfter(node0);
      node0.addChildrenToFront(node2);
      node0.getChangeTime();
      // Undeclared exception!
      try { 
        node0.isOnlyModifiesArgumentsCall();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = Node.newString(78, "reflected_object");
      Node node1 = new Node((-2830), node0, node0, node0, (-2779), 27591);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = node1.useSourceInfoFrom(node2);
      node1.isComma();
      node3.isEmpty();
      node1.isFalse();
      node2.setQuotedString();
      String string0 = "Xfct8.um";
      node2.setSourceFileForTesting(string0);
      node3.getLength();
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = new Node(Integer.MIN_VALUE);
      boolean boolean0 = true;
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.setIdGenerator(true);
      jSDocInfo0.getAssociatedNode();
      Node node1 = node0.srcrefTree((Node) null);
      // Undeclared exception!
      try { 
        node1.getJSDocInfo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.isDefaultCase();
      node0.isAnd();
      node0.isGetProp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setChangeTime(55);
      Node node1 = Node.newNumber((-254.500320119), 36, Integer.MAX_VALUE);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.getProp(1);
      node0.isNoSideEffectsCall();
      String string0 = "32 m\\";
      node2.getString();
      Node node3 = Node.newString(string0, node0.REFLECTED_OBJECT, node2.EMPTY_BLOCK);
      node2.addChildrenToBack(node3);
      node1.setSourceEncodedPositionForTree(node2.SIDE_EFFECTS_ALL);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 0.0 36 [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node.extractLineno(8);
      Node node1 = Node.newNumber((double) 0);
      node0.getDouble();
      Node.newNumber((double) 36);
      node0.isUnscopedQualifiedName();
      node1.clonePropsFrom(node0);
      node0.isEquivalentToShallow(node1);
      Node node2 = Node.newString("", 4095, 16);
      node1.setDouble(54);
      node2.isVoid();
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node.extractLineno(1542);
      Node node1 = Node.newNumber((double) 0);
      node0.getDouble();
      node1.isEquivalentToTyped(node0);
      node1.removeChild(node0);
      node1.useSourceInfoFrom(node0);
      int int0 = 2147;
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.isDefaultCase();
      node0.isAnd();
      node0.isGetProp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setChangeTime((-53));
      Node node1 = Node.newNumber((-254.500320119), 36, Integer.MAX_VALUE);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.getProp(1);
      node0.isNoSideEffectsCall();
      node0.setSourceFileForTesting("");
      node2.isAssignAdd();
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node2.getChildBefore(node1);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[6];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeArray0[0] = jSType0;
      JSType[] jSTypeArray1 = new JSType[4];
      jSTypeArray1[3] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray1);
      node0.isAssignAdd();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.getChildBefore(node0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = Node.newNumber((-1.1684825400601486));
      node0.mayMutateArguments();
      node0.isGetProp();
      node0.getQualifiedName();
      node0.isOptionalArg();
      node0.isStringKey();
      node0.setOptionalArg(false);
      node0.isOnlyModifiesThisCall();
      node0.setDouble((-1.1684825400601486));
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isVar();
      node0.getBooleanProp(3733);
      node0.getChangeTime();
      Node node1 = Node.newString(46, "Lls", 52, 33);
      node1.toString(true, true, true);
      node0.isInc();
      node1.setOptionalArg(true);
      node0.isOnlyModifiesThisCall();
      node0.setDouble(1547.3104);
      node1.isVoid();
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<TemplateType> arrayList0 = new ArrayList<TemplateType>();
      Iterator<TemplateType> iterator0 = arrayList0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      arrayList0.trimToSize();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = Node.newNumber(8.0, 38, 54);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      Node node2 = new Node(8199, node1, node1, node0, (-2051), 36);
      nodeArray0[1] = node2;
      Node node3 = new Node((-618), nodeArray0);
      int int0 = 49;
      Node node4 = new Node(int0, node1, node0.FREE_CALL, node0.DIRECT_EVAL);
      node4.removeChildAfter(node2);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = new Node(83, 83, 83);
      node0.isCatch();
      node0.isCast();
      node0.hasOneChild();
      node0.isContinue();
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isVar();
      node0.getBooleanProp(3733);
      node0.isVarArgs();
      node0.isVarArgs();
      node0.detachChildren();
      node0.toString(false, false, false);
      node0.getBooleanProp(3733);
      node0.isQuotedString();
      node0.isWhile();
      node0.isSyntheticBlock();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.addChildrenAfter(node1, node1);
      node0.getJSDocInfo();
      int int0 = 7;
      node1.setSourceEncodedPositionForTree(int0);
      // Undeclared exception!
      try { 
        node1.getChildCount();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      node0.isFromExterns();
      Node node1 = new Node(50);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.toString(false, true, false);
      node0.isName();
      node1.isQuotedString();
      node1.isEquivalentToShallow(node0);
      node2.isTypeOf();
      Node node3 = new Node(49);
      node3.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = "reflected_object";
      Node node0 = Node.newString(78, "reflected_object");
      Node node1 = new Node(51, 40, 55);
      node0.useSourceInfoIfMissingFromForTree(node1);
      Node.extractLineno(31);
      Node node2 = new Node(388, node0, node0, 3681, 37);
      node2.removeChild(node0);
      Node node3 = node1.useSourceInfoFrom(node0);
      node3.isComma();
      node0.isEmpty();
      node1.toString(false, false, false);
      node3.isFalse();
      node3.setQuotedString();
      node0.setSourceFileForTesting(string0);
      node3.getLength();
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node.extractLineno(1542);
      Node node1 = Node.newNumber((double) 0);
      node0.getDouble();
      Node node2 = Node.newNumber((double) 36);
      Node node3 = new Node(47, node0, node2, (-1511), 1020);
      node3.removeChild(node2);
      Node node4 = node0.useSourceInfoFrom(node3);
      node4.isComma();
      node4.isEmpty();
      node0.isFalse();
      node1.toStringTree();
      node1.setQuotedString();
      node0.getLength();
      int int0 = 43;
      node4.getChildAtIndex(int0);
      // Undeclared exception!
      try { 
        node1.isCall();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(37, node0, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags4.setMutatesGlobalState();
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(0, nodeArray0);
      node0.isQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
      node0.toString();
      node1.isDebugger();
      node1.checkTreeEquals(node2);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.hasChild(node0);
      node0.getChangeTime();
      Node node1 = new Node(46, node0, node0, node0, node0, 43, 12);
      node1.isDefaultCase();
      Node node2 = new Node(2692, node1);
      node2.putIntProp(8, 4095);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node0.isDelProp();
      node0.isAdd();
      node1.setSideEffectFlags(node_SideEffectFlags2);
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      node0.getChildCount();
      Node node1 = Node.newString(8, "");
      Node node2 = new Node(50, node0, node0, node0);
      node0.addChildrenToFront(node2);
      node0.hasChild(node0);
      node0.isScript();
      node1.isSyntheticBlock();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = Node.newString("", (-2676), 152);
      node0.getChildCount();
      Node node1 = Node.newString((-2210), "");
      node0.addChildrenToFront(node1);
      node0.hasChild(node1);
      node1.isScript();
      node0.isSyntheticBlock();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = new Node((-2975), node1, node0, node1, node1, 46, (-979));
      Node node3 = Node.newNumber((double) 32);
      node3.getDouble();
      Node node4 = Node.newNumber((double) 54);
      Node node5 = new Node((-413), node3, 1668, 29);
      node5.removeChild(node0);
      node2.useSourceInfoFrom(node4);
      node5.isComma();
      node3.isEmpty();
      node3.isInstanceOf();
      node5.toStringTree();
      // Undeclared exception!
      try { 
        node4.setQuotedString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = Node.newString(112, "H");
      Node node1 = new Node(29);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      Node node4 = node2.useSourceInfoIfMissingFromForTree(node0);
      Node.extractLineno(43);
      Node node5 = new Node(52, node0, node2, 2, 30);
      node5.removeChild(node1);
      Node node6 = node5.useSourceInfoFrom(node4);
      node6.isComma();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("&<\"s");
      node_FileLevelJsDocBuilder0.append("&<\"s");
      node3.isLabelName();
      node1.isScript();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node7 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node7.isContinue();
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = Node.newNumber(25.941340621951746);
      Node node1 = Node.newNumber((double) 29);
      node0.setSourceFileForTesting("gVA1,H}9ut'");
      Node node2 = Node.newNumber((double) 51, 38, 64);
      Node node3 = node0.clonePropsFrom(node2);
      node3.getJsDocBuilderForNode();
      node0.removeProp(node1.FREE_CALL);
      // Undeclared exception!
      try { 
        node2.getSourceOffset();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = Node.newString("\"Gg&5w");
      node0.isFor();
      node0.getJsDocBuilderForNode();
      Node.newString(38, "\"Gg&5w", 43, 56);
      Node.newNumber((-864.74));
      node0.getType();
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = Node.newString(1041, "1d>:YsS2fdB0");
      node0.isFor();
      node0.getSourceFileName();
      node0.getSideEffectFlags();
      node0.getDirectives();
      node0.getLength();
      node0.isSwitch();
      node0.isLocalResultCall();
      node0.isFunction();
      node0.getSourceFileName();
      Node node1 = node0.removeChildren();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      TemplatizedType templatizedType0 = JSType.toMaybeTemplatizedType((JSType) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("', '", node0, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      JSDocInfo jSDocInfo0 = enumElementType0.getOwnPropertyJSDocInfo(templatizedType0.NOT_A_CLASS);
      node1.setJSDocInfo(jSDocInfo0);
      // Undeclared exception!
      try { 
        node0.isNew();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.hasChild(node0);
      node0.getChangeTime();
      Node node1 = new Node(46, node0, node0, node0, node0, 43, 12);
      node1.isDefaultCase();
      node1.srcref(node0);
      Node node2 = new Node(2692, node1);
      node2.putIntProp(8, 4095);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setMutatesThis();
      node0.isDelProp();
      node2.isObjectLit();
      node1.setDouble(1);
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<TemplateType> arrayList0 = new ArrayList<TemplateType>();
      Iterator<TemplateType> iterator0 = arrayList0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(83, node0, node0, node0, node0);
      node1.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(0, 56, (-729));
      node0.getBooleanProp(55);
      Node node2 = new Node(122, node0, node1, node0, node0, 49, 31);
      Node node3 = new Node(108, node2, node0, node0, 52, 1);
      node1.isScript();
      node2.detachChildren();
      node0.isContinue();
      // Undeclared exception!
      try { 
        node3.isAssign();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isHook();
      node0.getChangeTime();
      Node node1 = new Node(46, node0, node0, node0, node0, 43, 12);
      node1.isDefaultCase();
      Node node2 = new Node(48, node1, node0, node1);
      int int0 = 8;
      // Undeclared exception!
      try { 
        node2.putIntProp(int0, node0.MAX_COLUMN_NUMBER);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      Node node4 = node2.useSourceInfoIfMissingFromForTree(node0);
      node3.setOptionalArg(true);
      node4.isOptionalArg();
      node3.removeFirstChild();
      node4.isName();
      node1.setOptionalArg(true);
      node1.isOnlyModifiesThisCall();
      Node[] nodeArray0 = new Node[2];
      node2.getIntProp((-941));
      nodeArray0[0] = node4;
      nodeArray0[1] = node0;
      Node node5 = new Node(35, nodeArray0, 43, 2);
      node1.setDouble(53);
      node4.isName();
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node node0 = new Node((-4073), 2870, (-3319));
      node0.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      node0.isString();
      node0.hasChildren();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      JSType.toMaybeTemplateType((JSType) templateType0);
      node0.setOptionalArg(false);
      node0.isOnlyModifiesThisCall();
      node0.setDouble(1.0);
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.hasChild(node0);
      node0.getChangeTime();
      Node node1 = new Node(46, node0, node0, node0, node0, 43, 12);
      node1.isDefaultCase();
      Node node2 = new Node(2692, node1);
      node2.putIntProp(8, 4095);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node0.isOptionalArg();
      node1.isIf();
      node2.setDouble(0.0);
      node0.isDo();
      node2.isBlock();
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node node0 = Node.newString("H", 112, 112);
      Node node1 = new Node(29);
      Node node2 = node1.copyInformationFrom(node0);
      node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node0);
      Node.extractLineno(43);
      node3.isQuotedString();
      Node node4 = new Node(52, node0, node2, 2, 30);
      node4.removeChild(node1);
      Node node5 = node4.useSourceInfoFrom(node3);
      node5.isEquivalentTo(node4);
      node1.setSourceFileForTesting((String) null);
      Node.newNumber((-1350.838163982342));
      node3.isInc();
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node node0 = new Node(112);
      node0.mayMutateArguments();
      node0.isAnd();
      node0.isEquivalentTo(node0);
      node0.setChangeTime(4);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node0.isTry();
      Node node1 = new Node(2, node0, node0);
      node1.isEquivalentTo(node0, false, false, true);
      node0.isAnd();
      node1.isDo();
      node1.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      Node node4 = node2.useSourceInfoIfMissingFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags4.setMutatesThis();
      node3.mayMutateGlobalStateOrThrow();
      node4.isDelProp();
      node3.isObjectLit();
      node4.setDouble(31);
      node2.isVoid();
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.hasChild(node0);
      node0.getChangeTime();
      Node node1 = new Node(46, node0, node0, node0, node0, 43, 12);
      node1.isDefaultCase();
      Node node2 = node1.srcref(node0);
      Node node3 = new Node(2692, node1);
      node3.putIntProp(8, 4095);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.newNumber(559.2085530215454);
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags5.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags7.setReturnsTainted();
      node_SideEffectFlags6.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags8.clearAllFlags();
      node2.isBreak();
      node0.getJsDocBuilderForNode();
      node0.getLength();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node2.isExprResult();
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      InputId inputId0 = new InputId("]!KH0/&6");
      Node node0 = Node.newString("]!KH0/&6", 693, 693);
      node0.setLineno(693);
      node0.isTrue();
      Node node1 = new Node(54, node0, node0, node0, node0);
      node0.setOptionalArg(true);
      node0.isOnlyModifiesThisCall();
      node0.setDouble(36);
      node1.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("", (-651), 1240);
      Node node1 = new Node(32);
      node1.useSourceInfoFromForTree(node1);
      node1.getQualifiedName();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node2.setOptionalArg(true);
      Node.extractLineno(0);
      Node node3 = Node.newNumber(3633.8496205587494);
      node2.getDouble();
      node0.isEquivalentToTyped(node3);
      node1.removeChild(node0);
      Node node4 = new Node(node2.SIDE_EFFECT_FLAGS, node1.JSDOC_INFO_PROP, node3.INPUT_ID);
      node1.useSourceInfoFrom(node4);
      node2.isComma();
      node0.isEmpty();
      // Undeclared exception!
      try { 
        node2.isObjectLit();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // TYPEOF [opt_arg: com.google.javascript.rhino.Node$IntPropListItem@0000000337] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = new Node(8388608, 8388608, 8388608);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      Node node1 = new Node((-941), node0, 57, 32);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.isWith();
      boolean boolean0 = node0.isTypeOf();
      node1.isParamList();
      node0.getChangeTime();
      node2.siblings();
      node0.toString(true, true, true);
      String string0 = "}q+w[Zt<B";
      Node node3 = nodeArray0[0].cloneNode();
      JSDocInfo jSDocInfo0 = new JSDocInfo(boolean0);
      // Undeclared exception!
      try { 
        node3.setJSDocInfo(jSDocInfo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 8388608
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Node node0 = Node.newString("\"Gg&5w");
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node.extractLineno(1542);
      Node node1 = Node.newNumber((double) 0);
      node0.getDouble();
      Node node2 = Node.newNumber((double) 36);
      Node node3 = new Node(4095, node2, 56, 42);
      node3.removeChild(node2);
      Node node4 = node2.useSourceInfoFrom(node3);
      node4.isComma();
      node4.isEmpty();
      node3.isInstanceOf();
      node1.toStringTree();
      node1.setQuotedString();
      node0.replaceChild(node2, node1);
      node0.getLength();
      int int0 = 43;
      // Undeclared exception!
      try { 
        node4.getChildAtIndex(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node node0 = Node.newNumber((double) 8287, 1483, 8287);
      Node node1 = new Node(8287, node0, node0, 51, 46);
      node0.isInstanceOf();
      Node node2 = new Node(4, node1, node1);
      node2.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node node0 = Node.newString(124, "\"Gg&5w", 101, (-192));
      node0.isLabelName();
      Node node1 = new Node(52, 54, (-1286));
      node0.putIntProp(47, 101);
      node0.addSuppression("com.google.javasWriptAChino.Nodg$AncestorIterable");
      node0.isEmpty();
      node0.isFalse();
      node0.isSetterDef();
      node0.getChildCount();
      node1.isInstanceOf();
      node0.getDirectives();
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.isWhile();
      node0.setIsSyntheticBlock(false);
      Node node1 = Node.newString(46, "Lls", 52, 33);
      node0.isOptionalArg();
      node1.setOptionalArg(true);
      node0.isOnlyModifiesThisCall();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node2 = new Node(319, nodeArray0, 55, (-74));
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node1.getChildBefore(node1);
      node1.getChildBefore(node0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      node0.mayMutateArguments();
      node0.isAnd();
      node0.isWhile();
      node0.setChangeTime(4);
      Node node1 = Node.newString(38, "", 32, 8);
      node0.setQuotedString();
      node0.setOptionalArg(false);
      node1.isOnlyModifiesThisCall();
      node1.toString();
      node0.getLength();
      node1.setIsSyntheticBlock(false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node1.isTry();
      node1.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isVar();
      node0.getBooleanProp(3733);
      node0.wasEmptyNode();
      node0.getChangeTime();
      Node node1 = Node.newString(46, "Lls", 52, 33);
      node1.toString(true, true, true);
      node0.isInc();
      node1.setOptionalArg(true);
      node0.isOnlyModifiesThisCall();
      node0.setDouble(1547.3104);
      node1.isVoid();
      node1.isUnscopedQualifiedName();
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.FunctionType$PropAccess", (-2568), (-2568));
      Node node1 = new Node(56, node0, node0);
      Node node2 = node0.srcref(node1);
      node0.isVarArgs();
      node1.isVarArgs();
      node0.detachChildren();
      node0.toString(true, true, true);
      node0.getBooleanProp((-3));
      node0.isQuotedString();
      node0.isWhile();
      node1.isSyntheticBlock();
      node0.isEmpty();
      node2.isFalse();
      node2.toStringTree();
      node0.setQuotedString();
      node0.getLength();
      node1.getChildAtIndex(57);
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.ProxyObjectType", 117, 305);
      Node node1 = Node.newString("", (-1482), 52);
      Node node2 = node1.getChildAtIndex(31);
      node2.removeProp(node0.IS_CONSTANT_NAME);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("Object#Element", (-651), 1240);
      Node node1 = new Node(32);
      Node node2 = node1.useSourceInfoFromForTree(node1);
      Node[] nodeArray0 = new Node[0];
      Node node3 = new Node(46, nodeArray0);
      node2.isQualifiedName();
      Node.newString("", 29, 1301);
      node0.getChildAtIndex((-607));
      node1.removeProp(4095);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      node0.isFromExterns();
      node0.isBreak();
      Node node1 = Node.newString("D");
      node1.addChildToFront(node0);
      node1.isVar();
      Node node2 = new Node(91, node1, node1, node0, node1);
      node0.getType();
      node1.mayMutateGlobalStateOrThrow();
      // Undeclared exception!
      try { 
        node2.getSourceOffset();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Node node0 = Node.newString((-2830), "reflected_object");
      Node node1 = new Node((-2830), node0, node0, node0, (-2779), 27591);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = new Node(1620, node2, node1, node0, node2);
      node1.isOptionalArg();
      boolean boolean0 = node2.isStringKey();
      node2.setOptionalArg(boolean0);
      node2.isOnlyModifiesThisCall();
      // Undeclared exception!
      try { 
        node3.setDouble(node2.DIRECT_EVAL);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Node node0 = Node.newNumber(3.585538681317835);
      node0.mayMutateArguments();
      node0.isAnd();
      node0.isGetProp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setChangeTime((-790));
      Node node1 = Node.newNumber((double) (-790), 4194304, 1);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.getProp(132);
      node0.isNoSideEffectsCall();
      Node node3 = Node.newString("32 m", 53, 57);
      node2.addChildrenToBack(node3);
      node0.setSourceEncodedPositionForTree(540);
      Node node4 = node3.removeChildAfter(node2);
      node4.getDirectives();
      node0.isAssign();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      node0.isDefaultCase();
      Node node1 = new Node(4095, node0);
      node0.putIntProp((-4304), 52);
      node0.setSourceEncodedPositionForTree(43);
      node1.getChildCount();
      node1.addChildrenToFront(node0);
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      InputId inputId0 = new InputId("]!KH0/&6");
      Node node0 = Node.newString(693, "");
      node0.setLineno(693);
      node0.isTrue();
      Node node1 = Node.newString("");
      node1.isOnlyModifiesArgumentsCall();
      node0.addChildToFront(node1);
      node1.isVar();
      node1.checkTreeEqualsImpl(node0);
      node1.getChildBefore(node0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(2, node0, node0, node0, node0);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      node2.useSourceInfoIfMissingFromForTree(node0);
      node3.setOptionalArg(true);
      Node.extractLineno(43);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      JSType jSType0 = templateType1.getLeastSupertype(templateType0);
      Visitor<Node> visitor0 = (Visitor<Node>) mock(Visitor.class, new ViolatedAssumptionAnswer());
      Node node4 = new Node(43, 47, 29);
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      hashMap0.put(templateType0, jSType0);
      TemplateTypeMap templateTypeMap0 = templatizedType0.getTemplateTypeMap();
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, templateTypeMap0);
      templateTypeMapReplacer0.caseNumberType();
      node1.putIntProp(32, 40);
      node2.checkTreeTypeAwareEqualsImpl(node3);
      node0.getLength();
      node3.isNumber();
      Node.mergeLineCharNo(31, (-3897));
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = Node.newString(1128, "<invalid>", 37, 101);
      node1.isFunction();
      node1.mayMutateGlobalStateOrThrow();
      node1.setOptionalArg(true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags4.clearAllFlags();
      node1.isBreak();
      node0.getJsDocBuilderForNode();
      node1.getLength();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.hasChild(node0);
      node0.getChangeTime();
      Node node1 = new Node(46, node0, node0, node0, node0, 43, 12);
      node1.isDefaultCase();
      node1.srcref(node0);
      Node node2 = new Node(2692, node1);
      node2.putIntProp(8, 4095);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node node3 = Node.newNumber(559.2085530215454);
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags5.setAllFlags();
      node1.isOptionalArg();
      node1.isIf();
      node3.setDouble(4095);
      node0.isDo();
      node2.isVoid();
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      InputId inputId0 = new InputId("com.google.javascript.rhino.jstype.FunctionType$PropAccess");
      Node node0 = Node.newString("63{.>C7,R'&n", (-2052), 27591);
      node0.isDelProp();
      Node node1 = new Node(1195, node0, node0);
      node1.getJSDocInfo();
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString("wFjf?4]", 8, 31);
      nodeArray0[0] = node0;
      Node node1 = Node.newString("wFjf?4]", 29, (-1748));
      nodeArray0[1] = node1;
      Node node2 = new Node(36, nodeArray0);
      node2.getInputId();
      node2.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getChangeTime();
      Node node1 = new Node(50, node0, node0, node0, node0, (-2052), 64);
      node0.isDefaultCase();
      Node node2 = new Node(38, node1);
      node0.putIntProp(52, (-1970));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node2.isOnlyModifiesThisCall();
      Node node3 = Node.newNumber((double) 42, (-487), 38);
      node2.checkTreeTypeAwareEqualsImpl(node3);
      node0.getLength();
      node3.isNumber();
      node0.cloneNode();
      node2.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Node node0 = Node.newString("\"Gg&5w");
      Node node1 = new Node(0, 56, (-729));
      node1.addChildrenToBack(node0);
      node0.getChildCount();
      Node node2 = new Node(16, node1, 152, 56);
      node2.useSourceInfoFromForTree(node1);
      node0.isFalse();
      node1.mayMutateArguments();
      node1.addChildrenToFront(node2);
      node1.isLocalResultCall();
      Node node3 = new Node(2, node0, (-2452), 52);
      node1.srcrefTree(node3);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.isQualifiedName();
      node0.getQualifiedName();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      node2.setOptionalArg(true);
      Node.extractLineno(43);
      Visitor<Node> visitor0 = (Visitor<Node>) mock(Visitor.class, new ViolatedAssumptionAnswer());
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node2;
      Node node4 = new Node(29, nodeArray0, 132, 42);
      node0.getIndexOfChild(node1);
      node4.getBooleanProp(2);
      node1.setDouble((-898.0));
      node3.isName();
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(0, 56, (-729));
      node1.addChildrenToBack(node0);
      node1.getInputId();
      node0.setInputId((InputId) null);
      Node node2 = Node.newString(49, "|j,:F;_)K7>1o2OH#L#");
      node1.getIndexOfChild(node2);
      node1.getBooleanProp(40);
      Node node3 = new Node(154, node2, node2, node1, (-3520), 39);
      node0.isScript();
      node3.isContinue();
      node3.isAssign();
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getChangeTime();
      Node node1 = new Node(50, node0, node0, node0, node0, (-2052), 32);
      node0.isDefaultCase();
      Node node2 = new Node(38, node1);
      node0.putIntProp(52, (-1970));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.hasMoreThanOneChild();
      Node node3 = Node.newNumber((double) 42, (-487), 38);
      node2.checkTreeEqualsImpl(node0);
      node0.getLength();
      node3.isNumber();
      node3.isDo();
      node1.isBlock();
      Node.extractCharno(125);
      node2.addChildrenAfter(node3, node3);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Node node0 = new Node((-465), 8287, 8287);
      node0.isAnd();
      Node node1 = new Node((-1577), node0, node0, node0);
      node0.setChangeTime(1993);
      node1.hasMoreThanOneChild();
      node1.isBlock();
      node1.isVoid();
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      Node node4 = node2.useSourceInfoIfMissingFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags4.setMutatesThis();
      node3.mayMutateGlobalStateOrThrow();
      node4.isDelProp();
      node3.isObjectLit();
      node4.setDouble(31);
      node2.isVoid();
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[7];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeArray0[0] = jSType0;
      jSTypeRegistry1.createTemplateType("C-z9yx7");
      jSType0.getLeastSupertype(jSTypeArray0[0]);
      Node node0 = new Node(83, (-822), (-822));
      node0.putIntProp(1, 4);
      node0.addSuppression("p~%v'^XN/53g");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = new Node(1508, node0, node0, node0, node0, 2176, (-957));
      node0.addChildrenToBack(node1);
      node0.setSourceEncodedPositionForTree(3000);
      Node node2 = node1.removeChildAfter(node0);
      node2.getDirectives();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = Node.newString(1128, "<invalid>", 37, 101);
      node1.isFunction();
      node1.mayMutateGlobalStateOrThrow();
      node1.setOptionalArg(true);
      node1.isEquivalentToShallow(node0);
      node1.isOptionalArg();
      node1.isIf();
      node0.setDouble(31);
      node1.isDo();
      node1.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.ProxyObjectType", 117, 305);
      Node node1 = new Node(1, node0, node0);
      node1.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      Node node1 = new Node(57, node0, node0, node0, node0, (-4940), 29);
      node1.isDefaultCase();
      Node node2 = node1.srcref(node0);
      Node node3 = new Node(132, node1);
      node2.putIntProp(49, (-670));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node node4 = Node.newNumber(1.0);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.clearAllFlags();
      Node node5 = new Node(31, node4, node3, node2);
      node5.isBreak();
      node2.getJsDocBuilderForNode();
      node3.getLength();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        node3.isExprResult();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = Node.newString(1128, "<invalid>", 37, 101);
      node1.isFunction();
      node1.mayMutateGlobalStateOrThrow();
      node1.setOptionalArg(true);
      node1.getString();
      Node node2 = Node.newString(" @}E1-*0o!", 53, 36);
      node0.addChildrenToBack(node1);
      node2.setSourceEncodedPositionForTree(5155);
      Node node3 = node1.removeChildAfter(node2);
      node3.getDirectives();
      node1.isAssign();
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Node node0 = Node.newString(1041, "1d>:YsS2fdB0");
      node0.isFor();
      node0.getSourceFileName();
      node0.getSideEffectFlags();
      node0.getDirectives();
      node0.getLength();
      node0.isSwitch();
      node0.isLocalResultCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.hasMoreThanOneChild();
      Node node1 = Node.newNumber((double) 32, 117, 53);
      Node node2 = new Node(49, node1, node0, 42, 1);
      node0.checkTreeEqualsImpl(node2);
      node2.getLength();
      node2.isNumber();
      node0.isDo();
      node0.isBlock();
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = Node.newString(1128, "<invalid>", 37, 101);
      node1.isOptionalArg();
      node0.isEmpty();
      node1.isVarArgs();
      node0.putIntProp((-2339), (-2339));
      node1.setChangeTime((-2604));
      node1.putBooleanProp(32, true);
      node0.isIf();
      node0.setDouble(57);
      Node node2 = new Node((-3492), node0, node1, node0, 53, 57);
      node0.isRegExp();
      node2.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node1.getAncestors();
      node1.isContinue();
      node0.isFunction();
      Node node2 = Node.newNumber((double) 39);
      node0.isScript();
      node2.isRegExp();
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$NodeMismatch");
      node0.isVarArgs();
      node0.isString();
      node0.hasChildren();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("com.google.javascript.rhino.Node$NodeMismatch", true);
      node0.toString(false, true, false);
      Node node1 = node0.cloneNode();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node1.setJSDocInfo(jSDocInfo0);
      node0.isQualifiedName();
      Node node2 = Node.newString(1490, "KV,ML6d)T^>E}", 43, 39);
      node2.isAdd();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      Node node3 = Node.newNumber((-2677.76808223357));
      node_FileLevelJsDocBuilder0.append("}q+w[Zt<B");
      node2.isArrayLit();
      node2.isNew();
      node1.getChildBefore(node0);
      node3.isCall();
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Node node0 = Node.newString("hL");
      node0.isQualifiedName();
      Node node1 = Node.newString(30, "hL", 36, 8);
      node0.isAdd();
      node0.isOptionalArg();
      node1.isContinue();
      node0.isTrue();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.isQualifiedName();
      node0.getQualifiedName();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      node2.setOptionalArg(true);
      Node.extractLineno(43);
      Visitor<Node> visitor0 = (Visitor<Node>) mock(Visitor.class, new ViolatedAssumptionAnswer());
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node2;
      Node node4 = new Node(29, nodeArray0, 132, 42);
      node0.getInputId();
      node4.setInputId((InputId) null);
      node0.getIndexOfChild(node1);
      node4.getBooleanProp(2);
      node0.isScript();
      node3.isContinue();
      node4.isAssign();
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.isDefaultCase();
      node0.isAnd();
      node0.isGetProp();
      node0.setChangeTime(55);
      node0.putIntProp(44, 2317);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isOptionalArg();
      node0.isName();
      node0.setOptionalArg(true);
      node0.isOnlyModifiesThisCall();
      node0.putIntProp(1664, 44);
      node0.setSourceEncodedPositionForTree(2317);
      node0.getChildCount();
      Node node1 = Node.newNumber(382.236823081);
      node1.addChildrenToFront(node0);
      node1.isLocalResultCall();
      node1.clonePropsFrom(node0);
      node_SideEffectFlags0.areAllFlagsSet();
      node0.getAncestors();
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      node0.isDefaultCase();
      Node node1 = new Node(33, 51, (-365));
      node0.checkTreeEquals(node1);
      Node node2 = Node.newString("3-HT;n", 57, (-3685));
      node2.putIntProp(39, 2);
      node2.setDouble(56);
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.hasChild(node0);
      node0.getChangeTime();
      Node node1 = new Node(46, node0, node0, node0, node0, 43, 12);
      node1.isDefaultCase();
      Node node2 = node1.srcref(node0);
      node2.getSideEffectFlags();
      node0.getDirectives();
      node0.getLength();
      node1.isSwitch();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TreeSet<TemplateType> treeSet0 = new TreeSet<TemplateType>();
      TreeSet<TemplateType> treeSet1 = new TreeSet<TemplateType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet1);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node3.isLocalResultCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.hasMoreThanOneChild();
      Node node4 = Node.newNumber((double) 8, 47, 48);
      Node node5 = new Node(43, (Node) null, node3, 46, (-4495));
      node2.checkTreeEqualsImpl(node1);
      node1.getLength();
      node0.isNumber();
      node2.isDo();
      // Undeclared exception!
      try { 
        node4.isBlock();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Node node0 = new Node(109, (Node) null, (Node) null, (-735), 109);
      int int0 = 49;
      node0.removeProp(int0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Node node0 = Node.newString("", 305, (-2676));
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Node node0 = Node.newString(1041, "1d>:YsS2fdB0");
      node0.isThis();
      node0.getSourceFileName();
      node0.getSideEffectFlags();
      node0.getDirectives();
      node0.getLength();
      node0.isSwitch();
      node0.isLocalResultCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.hasMoreThanOneChild();
      Node node1 = Node.newNumber((double) 32, 117, 53);
      Node node2 = new Node(49, node1, node0, 42, 1);
      node0.checkTreeEqualsImpl(node2);
      node2.getLength();
      node2.isNumber();
      node0.isDo();
      node0.isBlock();
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newNumber(0.7);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(true);
      node0.isBreak();
      node0.getJsDocBuilderForNode();
      node0.isBlock();
      node0.toString();
      Node node1 = node0.cloneNode();
      node0.isScript();
      node1.isGetProp();
      node0.checkTreeEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Node node0 = Node.newString(1041, "1d>:YsS2fdB0");
      node0.isFor();
      node0.getSourceFileName();
      node0.getSideEffectFlags();
      Set<String> set0 = new HashSet<String>();
      int int0 = Node.FREE_CALL;
      node0.isSwitch();
      node0.isLocalResultCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.hasMoreThanOneChild();
      Node node1 = Node.newNumber((double) 32, 117, 53);
      Node node2 = new Node(49, node1, node0, 42, 1);
      node1.checkTreeTypeAwareEqualsImpl(node1);
      node2.getLength();
      node2.isNumber();
      node0.isDo();
      node0.isBlock();
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Node node0 = new Node(108);
      node0.isAnd();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isBreak();
      node0.getJsDocBuilderForNode();
      node0.isOnlyModifiesThisCall();
      Node node1 = node0.cloneNode();
      node0.isScript();
      node1.isGetProp();
      node1.checkTreeEqualsImpl(node0);
      node1.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.copyInformationFrom(node0);
      node1.getSourceFileName();
      node2.getSideEffectFlags();
      node0.getDirectives();
      node0.getLength();
      node0.isSwitch();
      node2.isLocalResultCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.hasMoreThanOneChild();
      Node node3 = Node.newNumber((double) 15, 48, 15);
      Node node4 = new Node(1, node2);
      node1.checkTreeEqualsImpl(node2);
      int int0 = Node.FLAG_LOCAL_RESULTS;
      node0.isNumber();
      node0.isDo();
      node4.isBlock();
      node3.isGetProp();
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Node node0 = Node.newString((-2830), "reflected_object");
      Node node1 = new Node((-2830), node0, node0, node0, (-2779), 27591);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.getString();
      String string0 = "";
      Node node3 = Node.newString(string0, node2.QUOTED_PROP, node1.REFLECTED_OBJECT);
      node1.addChildrenToBack(node3);
      int int0 = 13;
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Node node0 = new Node(508, 508, (-1759));
      node0.removeProp((-1463));
      node0.getType();
      Node node1 = node0.getLastSibling();
      node1.setQuotedString();
      Node node2 = Node.newNumber((double) node1.SIDE_EFFECTS_FLAGS_MASK, node1.SYNTHETIC_BLOCK_PROP, node0.IS_CONSTANT_NAME);
      node0.isLocalResultCall();
      // Undeclared exception!
      try { 
        node2.checkTreeTypeAwareEqualsImpl(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getChangeTime();
      Node node1 = new Node(39, node0, node0, node0, node0);
      node1.replaceChildAfter(node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      String string0 = "<invalid>";
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = Node.newString(1127, "<invalid>", 37, 101);
      node1.isOptionalArg();
      node1.isVarArgs();
      node0.putIntProp(56, 51);
      node1.setChangeTime((-2604));
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("<invalid>", true);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl((Node) null);
      InputId inputId0 = new InputId(string0);
      node_NodeMismatch0.equals(inputId0);
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.copyInformationFrom(node0);
      node1.getSourceFileName();
      node2.getSideEffectFlags();
      node0.getDirectives();
      node0.getLength();
      node2.isExprResult();
      node2.isLocalResultCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.hasMoreThanOneChild();
      Node node3 = Node.newNumber((double) 15, 48, 15);
      Node node4 = new Node(1, node2);
      Node node5 = Node.newNumber(0.7);
      node5.addChildrenToFront(node0);
      node5.isLocalResultCall();
      Node node6 = node1.clonePropsFrom(node3);
      node_SideEffectFlags0.areAllFlagsSet();
      node4.getAncestors();
      node4.setString((String) null);
      node6.addChildAfter(node0, node4);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = "\"Gg&5w";
      Node.newString((-213), "\"Gg&5w", (-213), (-213));
      Node node0 = new Node(38);
      node0.setString("\"Gg&5w");
      Node node1 = Node.newString(string0);
      // Undeclared exception!
      try { 
        node0.isEquivalentToShallow(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newNumber(0.7);
      node0.isLocalResultCall();
      node0.getLength();
      node0.setSourceFileForTesting("B,z");
      Node node1 = Node.newNumber((double) 31);
      node1.toString();
      node1.setString("B,z");
      node1.isDebugger();
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 31.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.copyInformationFrom(node0);
      node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      node2.useSourceInfoIfMissingFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setAllFlags();
      node1.isUnscopedQualifiedName();
      node2.getQualifiedName();
      Node node3 = node0.clonePropsFrom(node1);
      node1.isEquivalentToShallow(node3);
      Node.newString("", 1933, 46);
      Node.newString("pZ", (-526), 51);
      node2.addChildAfter(node3, (Node) null);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Node node0 = new Node(8388608, 8388608, 8388608);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node1 = new Node((-2131), node0, node0, node0, node0, (-2592), 43);
      String string0 = "";
      node1.getExistingIntProp((-554));
      node1.addSuppression(string0);
      node1.isBreak();
      node1.getJsDocBuilderForNode();
      int int0 = 2857;
      String string1 = "";
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(2, 2, 2);
      node_SideEffectFlags0.setReturnsTainted();
      node0.isSyntheticBlock();
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(51);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 51
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Node node0 = new Node(916);
      Node node1 = new Node((-122), node0, node0, node0, node0, 147, (-1));
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = new Node(52, node2);
      Node node4 = node2.useSourceInfoFromForTree(node3);
      node0.getQualifiedName();
      Node node5 = node0.useSourceInfoIfMissingFromForTree(node2);
      node2.setOptionalArg(false);
      node2.isOptionalArg();
      node1.removeFirstChild();
      node2.isName();
      node4.setOptionalArg(true);
      node0.isInc();
      node2.getIntProp(29);
      node5.getChildCount();
      Node node6 = Node.newString("");
      node1.isLocalResultCall();
      node1.checkTreeTypeAwareEqualsImpl(node6);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Node node0 = new Node(112);
      node0.mayMutateArguments();
      node0.isAnd();
      node0.isEquivalentTo(node0);
      node0.setChangeTime(4);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node0.isTry();
      Node node1 = new Node(2, node0, node0);
      node1.isEquivalentTo(node0, false, false, true);
      node0.isAnd();
      node1.removeFirstChild();
      node0.siblings();
      node1.isReturn();
      Node node2 = node1.removeChildAfter(node0);
      // Undeclared exception!
      try { 
        node2.hasChildren();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[7];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeArray0[0] = jSType0;
      TemplateType templateType0 = jSTypeRegistry1.createTemplateType("C-z9yx7");
      JSType jSType1 = jSType0.getLeastSupertype(jSTypeArray0[0]);
      Node node0 = new Node(83, (-822), (-822));
      Node node1 = null;
      node0.clonePropsFrom((Node) null);
      node0.isEquivalentToShallow(node1);
      int int0 = 1;
      Node node2 = Node.newString(jSTypeRegistry1.OBJECT_INDEX_TEMPLATE, int0, jSType1.ENUMDECL);
      // Undeclared exception!
      try { 
        Node.newString(jSType0.NOT_A_CLASS, node2.FLAG_ARGUMENTS_UNMODIFIED, templateType0.ENUMDECL);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[7];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeArray0[0] = jSType0;
      jSTypeRegistry1.createTemplateType("C-z9yx7");
      jSType0.getLeastSupertype(jSTypeArray0[0]);
      Node node0 = new Node(83, (-822), (-822));
      Node node1 = Node.newString(2555, "Not declared as a type name");
      Node node2 = node0.clonePropsFrom(node1);
      node2.isEquivalentToShallow(node0);
      Node.newString("Not declared as a type name", 16, 8);
      Node.newString("Not declared as a constructor", 52, 748);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node3 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray0);
      node0.addChildAfter(node1, node3);
      node2.cloneTree();
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      node2.useSourceInfoIfMissingFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.clearAllFlags();
      node3.isBreak();
      node0.getJsDocBuilderForNode();
      node1.getLength();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node1.isFor();
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = Node.newString((-2001), "", 303, 13);
      node2.isFunction();
      node0.mayMutateGlobalStateOrThrow();
      node1.setOptionalArg(true);
      node3.isEquivalentToShallow(node0);
      node3.isOptionalArg();
      node2.isIf();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
      Node node4 = new Node(57, nodeArray0);
      double double0 = 8.0;
      node4.setDouble(double0);
      nodeArray0[2].isDo();
      nodeArray0[0].isSetterDef();
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("", (-651), 1240);
      Node node1 = new Node(32);
      Node node2 = node1.useSourceInfoFromForTree(node1);
      node1.getQualifiedName();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("^5KTCzW'u", false);
      node3.setStaticSourceFile(simpleSourceFile0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags6.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags7.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags8.clearAllFlags();
      node0.isBreak();
      node1.getJsDocBuilderForNode();
      node2.getLength();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node0.isTry();
      node3.isEquivalentTo(node2, false, false, false);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isHook();
      node0.getChangeTime();
      Node node1 = new Node(46, node0, node0, node0, node0, 43, 12);
      node1.mayMutateGlobalStateOrThrow();
      Node node2 = Node.newString(3056, "=?^U,^~@", 39, 46);
      node0.isOptionalArg();
      node0.isEmpty();
      node2.isVarArgs();
      node1.putIntProp(108, 113);
      node2.setChangeTime(51);
      node2.putBooleanProp(1240, false);
      Node node3 = new Node(4, node1, node1, 399, 50);
      Node node4 = new Node(93, node3);
      Node node5 = node4.useSourceInfoIfMissingFromForTree(node2);
      node5.srcref(node0);
      node5.children();
      node4.isThrow();
      node4.isFalse();
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Node node0 = Node.newString(1041, "1d>:YsS2fdB0", 1041, 1041);
      node0.isThis();
      node0.getSourceFileName();
      node0.getSideEffectFlags();
      node0.getDirectives();
      node0.getLength();
      node0.isSwitch();
      node0.isLocalResultCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.hasMoreThanOneChild();
      Node node1 = Node.newNumber((double) 32, 117, 53);
      Node node2 = new Node(49, node1, node0, 42, 1);
      node0.checkTreeEqualsImpl(node2);
      node2.getLength();
      node2.isNumber();
      node2.isContinue();
      node0.isBlock();
      node2.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = Node.newString(1128, "<invalid>", 37, 101);
      node1.isOptionalArg();
      node0.isEmpty();
      node1.isCast();
      node0.putIntProp((-2339), (-2339));
      node1.setChangeTime((-2604));
      node1.putBooleanProp(32, true);
      node0.isIf();
      node0.setDouble(57);
      Node node2 = new Node((-3492), node0, node1, node0, 53, 57);
      node0.isRegExp();
      node2.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Node node0 = Node.newString((-1548), "F");
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node((-2457), nodeArray0);
      node1.getDirectives();
      node0.getLength();
      node1.isExprResult();
      node0.isLocalResultCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.hasMoreThanOneChild();
      Node node2 = Node.newNumber((double) 4095, 4, 35);
      Node node3 = new Node(48, node2);
      Node node4 = Node.newNumber((double) 12);
      Node node5 = new Node(51, nodeArray0);
      Node node6 = Node.newString("");
      node5.addChildrenToFront(node6);
      node5.isLocalResultCall();
      Node node7 = node1.clonePropsFrom(node2);
      node_SideEffectFlags0.areAllFlagsSet();
      node4.getAncestors();
      node7.setString("");
      node6.addChildAfter(node5, node1);
      node_SideEffectFlags0.setReturnsTainted();
      node4.setSideEffectFlags(node_SideEffectFlags0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(54, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags3.clearAllFlags();
      node0.clonePropsFrom(node1);
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(0, nodeArray0);
      node0.isQualifiedName();
      Node node3 = new Node(0, node2, node1, node1, 57, 38);
      node3.removeChild(node2);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(54, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node1.setChangeTime(114);
      Node node2 = Node.newString(4095, "", 42, 113);
      node2.isOptionalArg();
      node1.setOptionalArg(false);
      node2.checkTreeEqualsImpl(node1);
      node0.isOnlyModifiesThisCall();
      node0.setDouble(8);
      node1.isDo();
      node1.setSourceEncodedPosition(48);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      InputId inputId0 = new InputId("]!KH0/&6");
      Node node0 = Node.newString("]!KH0/&6", 693, 693);
      node0.setLineno(693);
      node0.isTrue();
      Node node1 = new Node(54, node0, node0, node0, node0);
      node0.setOptionalArg(true);
      node0.isOnlyModifiesThisCall();
      node0.setDouble(36);
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Node node0 = Node.newNumber(25.941340621951746);
      node0.toString(false, true, false);
      node0.setJSType((JSType) null);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(36, node0, node0, node0, node0, 0, 48);
      node1.isOptionalArg();
      node0.isStringKey();
      node1.isOnlyModifiesArgumentsCall();
      node1.addChildToFront(node0);
      node1.isVar();
      node1.checkTreeEqualsImpl(node0);
      node0.getChildBefore(node1);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Node node0 = new Node(8388608, 8388608, 8388608);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      int int0 = (-1532);
      Node node1 = new Node((-192), node0, node0, node0, node0, 0, 53);
      int int1 = (-133);
      node0.getString();
      int int2 = 53;
      Node node2 = new Node(int0, node0, node1, nodeArray0[1], nodeArray0[2], int1, int2);
      nodeArray0[2].isOptionalArg();
      // Undeclared exception!
      try { 
        nodeArray0[1].isStringKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 8388608
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      InputId inputId0 = new InputId("]!KH0/&6");
      Node node0 = Node.newString("]!KH0/&6", 693, 693);
      node0.setLineno(693);
      node0.getStaticSourceFile();
      node0.isQualifiedName();
      node0.isTrue();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = new Node(54, node0, node0, node0, node0);
      node0.setOptionalArg(true);
      node1.addChildrenToBack(node0);
      node0.isOnlyModifiesThisCall();
      node0.isDec();
      // Undeclared exception!
      try { 
        node1.isQualifiedName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("", (-651), 1240);
      Node node1 = new Node(32);
      Node node2 = node1.useSourceInfoFromForTree(node1);
      node1.getQualifiedName();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("^5KTCzW'u", false);
      node3.setStaticSourceFile(simpleSourceFile0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags5.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags6.setMutatesGlobalState();
      node0.getLength();
      Node node4 = Node.newString("");
      node4.isNumber();
      node2.isDo();
      node2.isBlock();
      Node node5 = Node.newString((-2153), "+}q#-rQ]s5b*PwF");
      node5.isGetProp();
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "F8:w|$<5\"JwQa>c");
      int int0 = 48;
      Node node0 = Node.newString(48, "F8:w|$<5\"JwQa>c");
      double double0 = 25.941340621951746;
      node0.setSideEffectFlags((Node.SideEffectFlags) null);
      Node node1 = Node.newNumber(double0);
      node1.getProp(node0.SYNTHETIC_BLOCK_PROP);
      double double1 = (-2638.796);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      InputId inputId0 = new InputId("]!KH0/&6");
      Node node0 = Node.newString("]!KH0/&6", 693, 693);
      node0.setLineno(693);
      node0.isTrue();
      Node node1 = new Node(54, node0, node0, node0, node0);
      node0.setInputId(inputId0);
      node0.setOptionalArg(true);
      node1.setType(52);
      node0.isOnlyModifiesThisCall();
      node0.setDouble(36);
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("", (-651), 1240);
      Node node1 = new Node(32);
      Node node2 = node1.useSourceInfoFromForTree(node1);
      node1.getQualifiedName();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("^5KTCzW'u", false);
      node3.setStaticSourceFile(simpleSourceFile0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags6.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags7.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags8.clearAllFlags();
      node0.isBreak();
      node1.getJsDocBuilderForNode();
      node2.getLength();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node0.isTry();
      node1.siblings();
      node3.getParent();
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Node node0 = Node.newNumber(8.0, (-1761), (-1761));
      node0.getQualifiedName();
      node0.setSourceEncodedPosition((-1761));
      Node node1 = node0.removeFirstChild();
      node0.addChildToBack((Node) null);
      node1.getString();
      node0.mayMutateGlobalStateOrThrow();
      // Undeclared exception!
      try { 
        node0.copyInformationFrom(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Node node0 = Node.newNumber(6.721534673400339);
      node0.mayMutateArguments();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node(31, node0, node0);
      node1.isOptionalArg();
      node1.isVarArgs();
      node1.addChildToBack(node0);
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Node node0 = Node.newNumber((double) 112);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(1400, node0, node0, node0, node0, 675, 1);
      node1.isOptionalArg();
      node0.isStringKey();
      boolean boolean0 = true;
      node1.addChildToBack(node0);
      node0.setOptionalArg(boolean0);
      node1.isOnlyModifiesThisCall();
      // Undeclared exception!
      try { 
        node0.setDouble(node1.EMPTY_BLOCK);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isReturn();
      node0.getChangeTime();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = Node.newString(57, "<invalid>", 2406, 93);
      node1.isOptionalArg();
      node1.isRegExp();
      node0.isVarArgs();
      node1.putIntProp((-197), 57);
      node0.setChangeTime((-4752));
      node0.putBooleanProp(42, true);
      Node node2 = new Node(2, node1, node1, 37, 79);
      Node node3 = Node.newString("<invalid>", 38, (-359));
      node3.children();
      node2.isThrow();
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<TemplateType> arrayList0 = new ArrayList<TemplateType>();
      Iterator<TemplateType> iterator0 = arrayList0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node0 = Node.newNumber(8.0, 57, 54);
      node0.setString("Object#Key");
      JSType[] jSTypeArray0 = new JSType[0];
      // Undeclared exception!
      try { 
        immutableList0.toArray((Object[]) jSTypeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 8.0 57 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("Object#Element", (-651), 1240);
      Node node1 = new Node(32);
      Node node2 = node1.useSourceInfoFromForTree(node1);
      node1.getQualifiedName();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("^5KTCzW'u", false);
      node3.setStaticSourceFile(simpleSourceFile0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setAllFlags();
      node0.hasMoreThanOneChild();
      Node node4 = Node.newNumber((double) 4, 56, 16);
      Node node5 = new Node((-875), node0, node0, 2, 46);
      node4.checkTreeEqualsImpl(node0);
      node1.isOnlyModifiesThisCall();
      node2.setDouble(53);
      node3.isName();
      node3.isAssign();
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Node.mergeLineCharNo((-290), (-290));
      Node node0 = Node.newString("");
      Node node1 = new Node((-359), node0, node0, node0);
      node0.useSourceInfoFromForTree(node1);
      node0.getAncestors();
      Node node2 = null;
      node0.srcref((Node) null);
      node1.isEmpty();
      node0.isName();
      // Undeclared exception!
      try { 
        node1.getDirectives();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[7];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeArray0[0] = jSType0;
      jSTypeRegistry1.createTemplateType("C-z9yx7");
      jSType0.getLeastSupertype(jSTypeArray0[0]);
      Node node0 = new Node(83, (-822), (-822));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags4.clearAllFlags();
      Node node1 = jSTypeRegistry1.createParameters(jSTypeArray0);
      node1.isBreak();
      node0.getJsDocBuilderForNode();
      node1.getLength();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node1.isTry();
      node0.isEquivalentTo(node1, false, false, false);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[3] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.isAssignAdd();
      Node node1 = node0.cloneNode();
      node1.checkTreeEqualsImpl(node0);
      node1.getLength();
      node1.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isArrayLit();
      node0.getInputId();
      node0.getChangeTime();
      Node node1 = new Node(39, node0, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setThrows();
      Node node2 = new Node(51, 50, 49);
      node2.isNot();
      node0.isAdd();
      node1.setSideEffectFlags(node_SideEffectFlags0);
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Node node0 = Node.newNumber(1314.242641089584);
      node0.getInputId();
      node0.getChangeTime();
      Node node1 = new Node(39, node0, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setThrows();
      node1.isNot();
      node0.isScript();
      node0.isSyntheticBlock();
      node1.isContinue();
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      node2.cloneTree();
      Node node4 = node2.useSourceInfoIfMissingFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.clearAllFlags();
      node3.isBreak();
      node0.getJsDocBuilderForNode();
      node1.getLength();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node1.isFor();
      node4.copyInformationFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Node node0 = Node.newString(112, "");
      Node node1 = new Node(57);
      Node node2 = node1.copyInformationFrom(node0);
      node1.getSourceFileName();
      node2.getSideEffectFlags();
      node0.getDirectives();
      node0.getLength();
      node2.isExprResult();
      Node node3 = Node.newString(57, "StringNode: str is null", 32, 38);
      node0.isOptionalArg();
      node0.isRegExp();
      node2.isVarArgs();
      node1.putIntProp((-1895), 0);
      node3.setChangeTime(4);
      node3.putBooleanProp((-1499), false);
      Node node4 = new Node(21, node1, node1, (-1990), 38);
      Node.newString("StringNode: str is null", 47, 7);
      node4.children();
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("Object#Element", (-651), 1240);
      Node node1 = new Node(32);
      node1.useSourceInfoFromForTree(node1);
      node1.getQualifiedName();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("^5KTCzW'u", false);
      node2.setStaticSourceFile(simpleSourceFile0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setAllFlags();
      node0.hasMoreThanOneChild();
      Node node3 = Node.newNumber((double) 4, 56, 16);
      Node node4 = new Node((-875), node0, node0, 2, 46);
      node3.checkTreeEqualsImpl(node0);
      node1.isOnlyModifiesThisCall();
      node4.isEquivalentTo(node0);
      node3.isNumber();
      node1.isDo();
      node4.isBlock();
      node3.isGetProp();
      node1.getChildBefore(node3);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node.extractLineno(8);
      Node node1 = Node.newNumber((double) 0);
      node0.getDouble();
      Node.newNumber((double) 36);
      node1.isNE();
      node1.clonePropsFrom(node0);
      node0.isEquivalentToShallow(node1);
      Node node2 = Node.newString("", 4095, 16);
      Node.newString("px", 56, 407);
      node2.addChildAfter(node0, node1);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[6];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeArray0[0] = jSType0;
      Node[] nodeArray0 = new Node[7];
      JSType[] jSTypeArray1 = new JSType[4];
      jSTypeArray1[3] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray1);
      node0.setSourceFileForTesting("?$lbT$}1:_");
      node0.isAssignAdd();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.getChildBefore(node0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Node node0 = Node.newString("", 112, (-1572));
      Node node1 = new Node(124);
      Node node2 = new Node(1, node1, node0, node1, node0, 4095, 56);
      node0.isDefaultCase();
      Node node3 = new Node(124, node2, node2, node2);
      Node node4 = Node.newNumber((double) 56, 1105, 100);
      Node node5 = node3.useSourceInfoIfMissingFromForTree(node0);
      node2.getProp(32);
      node0.isNoSideEffectsCall();
      Node.newString("", 21, 4095);
      Node node6 = new Node(30, node5, node2, 4095, 57);
      node6.addChildrenToBack(node3);
      node4.setSourceEncodedPositionForTree(node3.OPT_ARG_NAME);
      Node node7 = node0.removeChildAfter(node3);
      node6.getDirectives();
      node7.isAssign();
      node6.isBreak();
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      Node node4 = node2.useSourceInfoIfMissingFromForTree(node0);
      node3.setOptionalArg(true);
      Node.extractLineno(43);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      templateType0.toMaybeTemplateType();
      Node node5 = node2.cloneNode();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node2.setJSDocInfo(jSDocInfo0);
      node5.isQualifiedName();
      Node node6 = Node.newString(51, "", 3386, 1);
      node6.isAdd();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      Node node7 = Node.newNumber((double) 43);
      node_FileLevelJsDocBuilder0.append("%Ign5CHo");
      node6.isArrayLit();
      node4.isNew();
      node7.getChildBefore(node1);
      node7.isCall();
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      node2.useSourceInfoIfMissingFromForTree(node0);
      Node.extractLineno(43);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Visitor<Node> visitor0 = (Visitor<Node>) mock(Visitor.class, new ViolatedAssumptionAnswer());
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      node3.getIndexOfChild(node1);
      node0.getBooleanProp(48);
      Node node4 = new Node(15, node2, node3, node1, 37, 0);
      node4.isScript();
      node4.isContinue();
      node3.isAssign();
      node2.useSourceInfoFromForTree(node4);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Node node0 = Node.newString("", 1004, 1004);
      node0.isLabelName();
      node0.setString("Node tree inequality:\nTree1:\n");
      Node node1 = Node.newString(1, "com.google.javascript.rhino.Node$AncestorIterable", 38, (-690));
      node1.toString();
      node1.cloneNode();
      node1.isScript();
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Node node0 = Node.newString(0, "var_args_name");
      node0.setString("var_args_name");
      Node.newString("var_args_name");
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      Node node1 = new Node(43);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      Node node3 = node0.copyInformationFrom(node2);
      Node node4 = node1.useSourceInfoFromForTree(node3);
      node1.getQualifiedName();
      node1.useSourceInfoIfMissingFromForTree(node3);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags5.setMutatesThis();
      node3.mayMutateGlobalStateOrThrow();
      node4.isDelProp();
      node2.setDouble(1694.06602);
      String string0 = "vL@2q{F?y@GM8_@T";
      ObjectType objectType0 = null;
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Node node0 = new Node(8388608, 8388608, 8388608);
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node0;
      Node node1 = new Node((-941), node0, 57, 32);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.isWith();
      node0.isTypeOf();
      node0.getSourceOffset();
      node0.getSideEffectFlags();
      node0.putIntProp((-597), 4);
      node1.addSuppression("ChEe)PYFO");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append((String) null);
      node_FileLevelJsDocBuilder0.append("StringNode: str is null");
      node2.isLabelName();
      node0.isScript();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("Object#Element", (-651), 1240);
      Node node1 = new Node(32);
      Node node2 = node1.useSourceInfoFromForTree(node1);
      node1.getQualifiedName();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("^5KTCzW'u", false);
      node3.setStaticSourceFile(simpleSourceFile0);
      node0.hasMoreThanOneChild();
      node2.isGetElem();
      node2.addChildBefore(node3, node0);
      node1.isNew();
      Node.newString(node1.LENGTH, jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE);
      int int0 = 9;
      // Undeclared exception!
      try { 
        Node.extractLineno(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      int int1 = Node.FLAG_THIS_UNMODIFIED;
      Node node0 = Node.newNumber((double) 2);
      node0.setDouble(2);
      node0.getChangeTime();
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Node node0 = Node.newNumber(0.5, 1559, 1559);
      node0.getChangeTime();
      Node node1 = new Node(36, node0, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node1.copyInformationFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setThrows();
      node1.isNot();
      node0.mayMutateArguments();
      node1.addChildrenAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Node node0 = Node.newString(" is not a string node", 64, 64);
      Node node1 = new Node(30);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node1.getQualifiedName();
      Node node4 = node1.useSourceInfoIfMissingFromForTree(node0);
      Node.extractLineno((-2521));
      node0.getProp((-92));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      node0.getIndexOfChild(node1);
      node3.getBooleanProp(12);
      Node node5 = new Node(383, node0, node2, node1, 45, 30);
      node2.isScript();
      node5.isContinue();
      Node node6 = new Node(30, node5, node4, 39, 2);
      node6.isAssign();
      String string0 = "unexpected prop id ";
      int int0 = 103;
      int int1 = 39;
      int int2 = 12;
      node1.setSourceEncodedPosition(int2);
      // Undeclared exception!
      try { 
        Node.newString(node3.SLASH_V, string0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isGetterDef();
      node0.getChangeTime();
      Node node1 = new Node(39, node0, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setThrows();
      Node node2 = new Node(51, 50, 49);
      node2.srcrefTree(node0);
      node2.isDelProp();
      node0.isAdd();
      node1.setSideEffectFlags(node_SideEffectFlags0);
      node0.siblings();
      int int0 = (-1820);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isArrayLit();
      node0.getInputId();
      node0.getChangeTime();
      Node node1 = new Node(39, node0, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setThrows();
      Node node2 = new Node(51, 50, 49);
      node2.isNot();
      node0.isAdd();
      node0.isScript();
      node0.isSyntheticBlock();
      node1.isThis();
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      int int0 = 126;
      Node node0 = new Node(126);
      node0.cloneNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.ALL_TYPE;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.jstype.AllType cannot be cast to com.google.javascript.rhino.jstype.ObjectType
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("Multiple entries with same ", "Multiple entries with same ", 149, 2);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[6];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeArray0[0] = jSType0;
      JSType[] jSTypeArray1 = new JSType[4];
      jSTypeArray1[2] = jSType0;
      jSTypeArray1[3] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray1);
      node0.setSourceFileForTesting("?$lbT$}1:_");
      node0.isNumber();
      Node.mergeLineCharNo(50, 31);
      node0.isHook();
      node0.getSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      jSType0.toDebugHashCodeString();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setThrows();
      node0.isDo();
      Node node1 = new Node((-1496), node0, 4, 51);
      Node node2 = new Node(42, node1, 30, 2);
      node0.useSourceInfoFrom(node2);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      int int0 = Node.INPUT_ID;
      Node node0 = new Node(1010);
      node0.getSourcePosition();
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Node node0 = Node.newString("", 109, 109);
      Node node1 = new Node(57);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      node2.useSourceInfoIfMissingFromForTree(node0);
      Node.extractLineno(43);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Visitor<Node> visitor0 = (Visitor<Node>) mock(Visitor.class, new ViolatedAssumptionAnswer());
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      node3.getIndexOfChild(node1);
      node3.isIn();
      Node node4 = new Node(15, node2, node3, node1, 37, 0);
      node4.isScript();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node4.isContinue();
      node3.isAssign();
      Node node5 = new Node(42, node3, 47, 2);
      node2.isFalse();
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      String string0 = "Lls";
      Node node1 = Node.newNumber((double) 12, 51, 30);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node2.getProp(1023);
      node1.isNoSideEffectsCall();
      node0.isGetProp();
      node0.isEquivalentToShallow(node1);
      node0.isEmpty();
      node2.cloneTree();
      node2.isCall();
      node0.isSwitch();
      Node node3 = node2.getChildAtIndex(2);
      node1.isGetElem();
      // Undeclared exception!
      try { 
        node0.addChildBefore(node3, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Node node0 = Node.newString("gr[{(+W9h rjF[t+!2");
      Node node1 = Node.newString(48, "@Z>[ }slK^");
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node1.isEquivalentToTyped(node0);
      node1.isCall();
      node2.toString();
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isOr();
      node0.getChangeTime();
      ArrayList<TemplateType> arrayList0 = new ArrayList<TemplateType>();
      Iterator<TemplateType> iterator0 = arrayList0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node.newNumber((double) 2, 36, 30);
      String string0 = "";
      node1.setString("");
      Object[] objectArray0 = new Object[0];
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[7];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeArray0[0] = jSType0;
      jSTypeRegistry1.createTemplateType("C-z9yx7");
      jSType0.getLeastSupertype(jSTypeArray0[0]);
      Node node0 = new Node(73, (-822), (-822));
      int int0 = 4;
      node0.putIntProp(1, 4);
      node0.addSuppression("p~%v'^XN/53g");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = null;
      node0.addChildrenToBack((Node) null);
      node0.setSourceEncodedPositionForTree(int0);
      node0.getChildCount();
      node0.addChildrenToFront(node1);
      node0.isLocalResultCall();
      // Undeclared exception!
      try { 
        node0.getProp(jSType0.NOT_ENUMDECL);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      Node node1 = node0.copyInformationFrom(node0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.getQualifiedName();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags2.setMutatesThis();
      node2.mayMutateGlobalStateOrThrow();
      node3.isDelProp();
      node2.isObjectLit();
      node3.setDouble(31);
      node1.isVoid();
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("Object#Element", (-651), 1240);
      Node node1 = new Node(32);
      Node node2 = node1.useSourceInfoFromForTree(node1);
      node1.getQualifiedName();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("^5KTCzW'u", false);
      node3.setStaticSourceFile(simpleSourceFile0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags6.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags7.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags8.setMutatesGlobalState();
      node_SideEffectFlags8.clearAllFlags();
      jSTypeRegistry0.setLastGeneration(true);
      node0.isBreak();
      node1.getJsDocBuilderForNode();
      node2.getLength();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node0.isTry();
      node3.isEquivalentTo(node2, false, false, false);
      node2.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(1128, node0, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setMutatesThis();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node1.hasMoreThanOneChild();
      node0.isGetElem();
      node1.addChildBefore(node0, node0);
      node1.isNew();
      int int0 = (-187);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node.extractLineno(8);
      Node node1 = Node.newNumber((double) 0);
      node0.getDouble();
      Node node2 = Node.newNumber((double) 36);
      node2.isName();
      node0.isQuotedString();
      node1.isEquivalentToShallow(node0);
      Node node3 = new Node(57, (Node) null, 49, 1001);
      node1.addChildrenAfter(node0, node3);
      int int0 = 31;
      Node.newNumber((double) node3.FLAG_ARGUMENTS_UNMODIFIED, node1.FLAG_THIS_UNMODIFIED, int0);
      // Undeclared exception!
      try { 
        node1.getJSDocInfo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      Node node0 = new Node((-651));
      Node node1 = new Node(32);
      Node node2 = node1.useSourceInfoFromForTree(node1);
      node1.getQualifiedName();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      node1.toString(true, false, false);
      node1.isName();
      node2.isQuotedString();
      node3.isEquivalentToShallow(node2);
      Node node4 = new Node(3052, node0, 37, 8);
      node4.addChildrenAfter(node1, node0);
      Node node5 = Node.newNumber((double) 55, 36, 53);
      node5.getJSDocInfo();
      node2.setSourceEncodedPositionForTree(11);
      node4.getChildCount();
      node5.addChildrenToFront(node3);
      Node.newString(jSTypeRegistry0.OBJECT_INDEX_TEMPLATE);
      node4.isLocalResultCall();
      node5.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Node node0 = Node.newString("\"Gg&5w");
      Node node1 = new Node(0, 56, (-729));
      node1.addChildrenToBack(node0);
      node0.getChildCount();
      Node node2 = new Node(16, node1, 37, 56);
      node0.isFalse();
      node1.mayMutateArguments();
      node1.addChildrenAfter(node2, node0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Node node0 = new Node((-651));
      node0.isScript();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      HashSet<TemplateType> hashSet0 = new HashSet<TemplateType>();
      ArrayDeque<TemplateType> arrayDeque0 = new ArrayDeque<TemplateType>(hashSet0);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) arrayDeque0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      immutableList0.replaceAll(unaryOperator0);
      node1.isEquivalentTo(node0, true, false, false);
      Node node2 = new Node(32, node0, node1, 2096, 2);
      node0.isEquivalentToShallow(node2);
      Node node3 = new Node(8388608, 32, 30);
      node0.addChildToBack(node3);
      node3.isTry();
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      node2.setSideEffectFlags(56);
      boolean boolean0 = false;
      JSDocInfo jSDocInfo0 = new JSDocInfo(boolean0);
      node3.setJSDocInfo(jSDocInfo0);
      arrayDeque0.add(templateType0);
      node0.isWhile();
      node3.getSideEffectFlags();
      // Undeclared exception!
      try { 
        node2.useSourceInfoFromForTree(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got TYPEOF
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString(1004, "", 1004, 1004);
      Node node1 = new Node(13, node0, 1, 30);
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.isWith();
      node1.isTypeOf();
      node1.getSourceOffset();
      node2.getSideEffectFlags();
      node1.putIntProp(33, 50);
      node0.addSuppression("4;k9Ei/8+I^r;Y");
      Node node3 = new Node(0, node1, node2);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node3.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append(string0);
      Node node4 = new Node(node3.COLUMN_MASK);
      // Undeclared exception!
      try { 
        node4.isLabelName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      Node node4 = node2.useSourceInfoIfMissingFromForTree(node0);
      Node.extractLineno(43);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags4.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.clearAllFlags();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.setLastGeneration(false);
      node4.isBreak();
      node2.getJsDocBuilderForNode();
      node2.getLength();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node4.isTry();
      node1.isEquivalentTo(node2, true, false, true);
      node3.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      Node node1 = Node.newString("", 8287, 43);
      Node node2 = Node.newString("\"Gg&5w", 1378, 40);
      node1.isEquivalentTo(node2, true, false, false);
      Node node3 = Node.newString(2, (String) null, 4095, 83);
      Node node4 = node0.removeChildren();
      Node node5 = node3.clonePropsFrom(node4);
      StaticSourceFile staticSourceFile0 = node3.getStaticSourceFile();
      node5.setStaticSourceFile(staticSourceFile0);
      int int0 = 2;
      node3.getExistingIntProp(int0);
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      Node node1 = Node.newString("", 8287, 43);
      Node node2 = Node.newString("\"Gg&5w", 1378, 40);
      node1.isEquivalentTo(node2, true, false, false);
      Node.newString(2, (String) null, 4095, 2);
      node0.isLabelName();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("");
      Node node1 = new Node(4095, node0, 1050, 92);
      Node node2 = node1.copyInformationFromForTree(node0);
      boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
      node0.isParamList();
      node1.getChangeTime();
      node1.siblings();
      node1.toString(false, false, true);
      String string1 = "}q+w[Zt<B";
      node2.cloneNode();
      JSDocInfo jSDocInfo0 = new JSDocInfo(boolean0);
      // Undeclared exception!
      try { 
        node0.setJSDocInfo(jSDocInfo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4095
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      Node node0 = new Node((-651));
      Node node1 = new Node(32);
      Node node2 = node1.useSourceInfoFromForTree(node1);
      node1.getQualifiedName();
      node1.useSourceInfoIfMissingFromForTree(node0);
      node1.toString(true, false, false);
      node2.isNE();
      Node node3 = node2.clonePropsFrom(node0);
      node3.isEquivalentToShallow(node0);
      Node node4 = Node.newString((String) null, 29, 2);
      String string0 = "qiHR1q";
      Node node5 = Node.newString(string0, node0.SIDE_EFFECTS_ALL, node2.MAX_COLUMN_NUMBER);
      node4.addChildAfter(node5, node1);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("Object#Element", (-651), 1237);
      Node node1 = new Node(4095, node0, node0, node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node1);
      node1.getQualifiedName();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("^5KTCzW'u", false);
      node3.setStaticSourceFile(simpleSourceFile0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags6.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags7.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags8.clearAllFlags();
      node0.isBreak();
      node1.getJsDocBuilderForNode();
      node2.getLength();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node0.isTry();
      node1.isDec();
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Node node0 = new Node(162);
      node0.addSuppression("rEH@ee[~}h3S");
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.ProxyObjectType", 2329, 38);
      Node node1 = new Node((-654), node0, node0, node0, node0, (-654), 103);
      node1.getJSDocInfo();
      node1.isSyntheticBlock();
      Node node2 = new Node(103, node1, node1);
      node2.isTrue();
      node0.getSourcePosition();
      node2.isExprResult();
      node2.isDec();
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags3.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[7];
      Node node0 = Node.newString(693, "Object#Element", 693, (-134));
      Node node1 = new Node(42, 52, 53);
      Node node2 = node0.copyInformationFrom(node1);
      node1.getSourceFileName();
      node0.getSideEffectFlags();
      node0.getDirectives();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node1.isExprResult();
      node1.isLocalResultCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.hasMoreThanOneChild();
      Node node3 = Node.newNumber(0.0, 55, 56);
      Node node4 = new Node(1, node3);
      Node node5 = Node.newNumber(0.0);
      node_SideEffectFlags0.clearSideEffectFlags();
      node0.addChildrenToFront(node4);
      Node node6 = new Node(56);
      node6.isLocalResultCall();
      Node node7 = node3.clonePropsFrom(node4);
      node_SideEffectFlags0.areAllFlagsSet();
      Node node8 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node8.getAncestors();
      node5.setString(jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE);
      node5.addChildAfter(node7, node8);
      node_SideEffectFlags0.setReturnsTainted();
      node2.setSideEffectFlags(node_SideEffectFlags0);
      int int1 = 32;
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Node node0 = Node.newNumber(25.941340621951746);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(102, node0, node0, node0, node0, (-188), 31);
      node1.isOptionalArg();
      node1.isStringKey();
      node0.setOptionalArg(false);
      node1.isOnlyModifiesThisCall();
      node0.isEquivalentToShallow(node1);
      node0.getFirstChild();
      node1.getJSDocInfo();
      node1.setDouble(25.941340621951746);
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Node node0 = new Node((-651));
      node0.isScript();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      HashSet<TemplateType> hashSet0 = new HashSet<TemplateType>();
      ArrayDeque<TemplateType> arrayDeque0 = new ArrayDeque<TemplateType>(hashSet0);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) arrayDeque0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      Function<Node, TemplateType> function0 = (Function<Node, TemplateType>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Node, ? extends JSType>) function0);
      immutableList0.replaceAll(unaryOperator0);
      node1.isEquivalentTo(node0, true, false, false);
      Node node2 = new Node(32, node0, node1, 2096, 2);
      node0.isEquivalentToShallow(node2);
      Node node3 = new Node(8388608, 32, 30);
      node3.isTry();
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      node2.getAncestor(38);
      node2.setSideEffectFlags(56);
      boolean boolean0 = false;
      JSDocInfo jSDocInfo0 = new JSDocInfo(boolean0);
      node3.setJSDocInfo(jSDocInfo0);
      arrayDeque0.add(templateType0);
      node0.isWhile();
      node3.getSideEffectFlags();
      // Undeclared exception!
      try { 
        node2.useSourceInfoFromForTree(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got TYPEOF
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Node[] nodeArray0 = new Node[7];
      Node node0 = Node.newString("", 305, (-2676));
      nodeArray0[0] = node0;
      Node node1 = new Node(2, node0, node0, node0, node0);
      Node.newString("", 4095, (-2676));
      node0.getAncestor(933);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node1.getAncestors();
      node1.isContinue();
      node0.isFunction();
      node0.getAncestor((-188));
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Node node0 = Node.newString("", (-1943), (-1943));
      Node node1 = new Node(1004, node0, node0);
      node1.getLastChild();
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Node node0 = Node.newString("h\"Gg&5w", (-651), (-651));
      Node node1 = new Node(43, node0, node0, node0, node0);
      node1.getQualifiedName();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("{proxy:", false);
      simpleSourceFile0.getLineOffset(48);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags5.clearAllFlags();
      node2.isBreak();
      node1.getJsDocBuilderForNode();
      node2.getLength();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node2.isTry();
      node2.isDec();
      node2.setSideEffectFlags((-2595));
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      Node node4 = node2.useSourceInfoIfMissingFromForTree(node0);
      Node.extractLineno(43);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.clearAllFlags();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.setLastGeneration(false);
      node4.isBreak();
      node2.getJsDocBuilderForNode();
      node2.getLength();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node4.isTry();
      node1.isEquivalentTo(node2, true, true, true);
      node3.isInstanceOf();
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.useSourceInfoFromForTree(node1);
      node0.getQualifiedName();
      node1.useSourceInfoIfMissingFromForTree(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Visitor<Node> visitor0 = (Visitor<Node>) mock(Visitor.class, new ViolatedAssumptionAnswer());
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      node2.getIndexOfChild(node1);
      node0.getBooleanProp(48);
      Node node3 = new Node(55, node0, node2, node1, 37, 0);
      node3.getSourceFileName();
      node3.isScript();
      node3.isContinue();
      node2.isAssign();
      Node node4 = node0.useSourceInfoFromForTree(node3);
      node2.useSourceInfoIfMissingFrom(node1);
      node4.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Node node0 = Node.newString(1004, "", 1004, 1004);
      node0.isLabelName();
      node0.setString("Node tree inequality:\nTree1:\n");
      Node node1 = Node.newString(1, "com.google.javasWriptAChino.Nodg$AncestorIterable", 38, (-690));
      node1.mayMutateArguments();
      node1.isQuotedString();
      node0.getSideEffectFlags();
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Node node0 = Node.newString((-2437), "", (-2943), (-2437));
      node0.setSourceFileForTesting("ARRAY_TYPE");
      Node node1 = new Node((-2437), node0, Integer.MAX_VALUE, (-86));
      Node node2 = Node.newNumber(1024.77825);
      node0.isScript();
      node1.isContinue();
      node0.isNot();
      node2.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.FunctionType$PropAccess", (-2568), (-2568));
      Node node1 = new Node(56, node0, node0);
      Node node2 = new Node(54, node1, 30, 57);
      node2.detachChildren();
      node0.getBooleanProp(46);
      node0.isQuotedString();
      node0.isWhile();
      node1.isSyntheticBlock();
      node0.isEmpty();
      node2.isFalse();
      node2.toStringTree();
      node2.isVar();
      node0.isDo();
      // Undeclared exception!
      try { 
        node2.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[6];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeArray0[0] = jSType0;
      JSType[] jSTypeArray1 = new JSType[4];
      jSTypeArray1[3] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray1);
      node0.isAssignAdd();
      Node node1 = node0.cloneNode();
      node0.isScript();
      node1.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Node node0 = Node.newString("", 35, 112);
      Node node1 = new Node((-454));
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isQualifiedName();
      node2.getQualifiedName();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node2);
      node0.setOptionalArg(false);
      Node.extractLineno(3288);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node3;
      nodeArray0[4] = node2;
      Node node4 = new Node(8192, nodeArray0, 2, 4095);
      Node node5 = new Node(node0.IS_NAMESPACE, node0, node1, nodeArray0[1]);
      node1.getIndexOfChild(node5);
      int int0 = 789;
      node3.getBooleanProp(int0);
      node3.isScript();
      // Undeclared exception!
      try { 
        node0.isContinue();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isReturn();
      node0.getChangeTime();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = Node.newString(1128, "<invalid>", 37, 101);
      node1.isOptionalArg();
      node0.isRegExp();
      node1.isVarArgs();
      node0.putIntProp((-2339), (-2339));
      node1.setChangeTime((-2643));
      node1.putBooleanProp(32, false);
      Node node2 = new Node(50, node1, node1, 2, 38);
      Node.newString("<invalid>", 16, 0);
      node0.children();
      node2.isThrow();
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      node_AncestorIterable0.iterator();
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("Multiple entries with same ", "Multiple entries with same ", 149, 2);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[6];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeArray0[0] = jSType0;
      JSType[] jSTypeArray1 = new JSType[4];
      jSTypeArray1[2] = jSType0;
      jSTypeArray1[3] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray1);
      node0.setSourceFileForTesting("?$lbT$}1:_");
      node0.isNumber();
      Node.mergeLineCharNo(50, 31);
      node0.isHook();
      node0.getSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setThrows();
      node0.isDo();
      node0.isArrayLit();
      node0.isNew();
      Node node1 = node0.getChildBefore((Node) null);
      node1.isCall();
      Node.newString("\"Gg&5w");
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Node node0 = Node.newNumber(25.941340621951746);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(36, node0, node0, node0, node0, 0, 48);
      node1.isOptionalArg();
      node0.isStringKey();
      node1.setOptionalArg(true);
      node0.isOnlyModifiesThisCall();
      node0.setDouble(31);
      node0.isName();
      node1.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Node node0 = Node.newString("h\"Gg&5w", 2066, 109);
      Node node1 = new Node(53);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node0.useSourceInfoFromForTree(node1);
      node3.getQualifiedName();
      Node node4 = new Node(42, 38, 1801);
      Node node5 = node4.useSourceInfoIfMissingFromForTree(node2);
      Node.extractLineno(113);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      node5.getIndexOfChild(node2);
      Node node6 = Node.newString(53, "");
      node6.isIn();
      Node node7 = new Node(50, node4, node0, node5, 16, 23);
      node7.isScript();
      node4.checkTreeTypeAwareEqualsImpl(node3);
      node7.isContinue();
      node4.isLabelName();
      node7.isScript();
      node6.isContinue();
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Node node0 = Node.newString(112, "", 112, 112);
      node0.mayMutateArguments();
      node0.isAnd();
      node0.isGetProp();
      node0.addSuppression("T!$pz1Fvm{|nze0<B");
      node0.setChangeTime(4);
      Node node1 = new Node(12);
      node0.isNE();
      Node node2 = Node.newNumber(0.0, 98, 38);
      Node node3 = Node.newNumber((double) 57, 48, 1);
      node0.isEquivalentToShallow(node1);
      Node node4 = Node.newString("TOP_LEVEL_PROTOTYPE", 40, 4095);
      node4.getSourceOffset();
      node3.removeProp((-309));
      node2.removeChild(node4);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<TemplateType> arrayList0 = new ArrayList<TemplateType>();
      Iterator<TemplateType> iterator0 = arrayList0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isThrow();
      InputId inputId0 = new InputId("Not declared as a constructor");
      node0.setInputId(inputId0);
      node0.wasEmptyNode();
      node0.isDelProp();
      node0.isQualifiedName();
      node0.isStringKey();
      node0.isWhile();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, objectType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      enumElementType0.getJSDocInfo();
      node0.setJSDocInfo((JSDocInfo) null);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("", 112, 112);
      node0.addChildrenAfter((Node) null, (Node) null);
      node0.mayMutateArguments();
      // Undeclared exception!
      try { 
        node0.isAnd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      int int0 = (-3554);
      Node node0 = Node.newString("?Ro:s:+ajH*0[9", (-3554), (-3554));
      Node node1 = new Node((-3554), node0);
      int int1 = 63;
      node1.setSideEffectFlags(154);
      Node node2 = new Node(int0, node1, int1, node0.VAR_ARGS_NAME);
      node2.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.JSDocInfo", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = Node.newString("com.google.javascript.rhino.JSDocInfo", 32, 57);
      node2.getQualifiedName();
      Node node4 = new Node(4, (-50), 39);
      node2.useSourceInfoIfMissingFromForTree(node4);
      Node.extractLineno(1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      node0.getIndexOfChild(node2);
      Node.newString(43, "com.google.javascript.rhino.JSDocInfo");
      node3.getAncestors();
      node2.isIn();
      Node node5 = new Node(2, (Node[]) null);
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
      JSType[] jSTypeArray0 = null;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      Node.extractLineno(43);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      node3.getIndexOfChild(node1);
      node0.getBooleanProp(48);
      node1.isScript();
      Node.newString("&tbpOzM,oV5e-A:y_", 47, 54);
      node1.removeProp(1);
      Node node4 = new Node(934, node0, node0, node3, node0);
      node4.removeChild(node0);
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      int int0 = 112;
      Node node0 = new Node(21, 21, 21);
      Node node1 = new Node(15, node0, node0, 30, 29);
      node0.srcrefTree(node1);
      Node node2 = new Node(112, node0, node0, node0, node0, 1, 110);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = null;
      try {
        jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Node node0 = Node.newString("r8\nqtV", (-14), (-14));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.setThrows();
      Node node1 = Node.newString("r8\nqtV", 49, 51);
      node0.isCatch();
      node0.isDelProp();
      node1.isCast();
      node1.setDouble(29);
      node1.isThrow();
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Node node0 = Node.newString("r8\nqtV", 154, (-1726));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      TemplateType[] templateTypeArray0 = new TemplateType[7];
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      templateTypeArray0[0] = templateType1;
      TemplateType templateType2 = templateType0.toMaybeTemplateType();
      templateTypeArray0[1] = templateType2;
      TemplateType templateType3 = JSType.toMaybeTemplateType((JSType) templateType1);
      templateTypeArray0[2] = templateType3;
      TemplateType templateType4 = JSType.toMaybeTemplateType((JSType) templateType0);
      templateTypeArray0[3] = templateType4;
      TemplateType templateType5 = templateType0.toMaybeTemplateType();
      templateTypeArray0[4] = templateType5;
      TemplateType templateType6 = jSTypeRegistry0.getObjectIndexKey();
      templateTypeArray0[5] = templateType6;
      TemplateType templateType7 = JSType.toMaybeTemplateType((JSType) templateType5);
      templateTypeArray0[6] = templateType7;
      ImmutableList<TemplateType> immutableList0 = ImmutableList.copyOf(templateTypeArray0);
      ImmutableList<JSType> immutableList1 = ImmutableList.of((JSType) templateType0, (JSType) templateType0, (JSType) templateType0);
      TemplateTypeMap templateTypeMap0 = jSTypeRegistry0.createTemplateTypeMap(immutableList0, immutableList1);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, templateTypeMap0);
      JSType jSType0 = templateTypeMapReplacer0.caseTemplateType(templateType0);
      jSTypeArray0[0] = jSType0;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("$UL^17", node0, templateType0);
      enumType0.getConstructor();
      jSTypeArray0[1] = (JSType) null;
      JSType jSType1 = jSTypeRegistry0.createFromTypeNodes(node0, "\"Gg&5w", templateType7);
      jSTypeArray0[2] = jSType1;
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Node node0 = Node.newString("h\"Gg&5w", 44, 44);
      node0.checkTreeTypeAwareEqualsImpl((Node) null);
      node0.getString();
      node0.hasOneChild();
      // Undeclared exception!
      try { 
        node0.getLineno();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Node node0 = Node.newString("h\"Gg&5w", (-651), (-651));
      Node node1 = new Node(43, node0, node0, node0, node0);
      Node node2 = new Node(31, 49, 4095);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.getJsDocBuilderForNode();
      Node node3 = new Node(48, (-2483), 38);
      node3.replaceChild(node2, node0);
      node2.isExprResult();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = null;
      try {
        node_SideEffectFlags1 = new Node.SideEffectFlags(node3.SIDE_EFFECTS_ALL);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 13, 39);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      Node node2 = node0.cloneNode();
      Node node3 = node2.cloneTree();
      jSDocInfo0.documentFileOverview(": ");
      Node node4 = Node.newNumber((double) 16, 1840, 52);
      node0.isTry();
      Node.NodeMismatch node_NodeMismatch0 = node4.checkTreeEqualsImpl(node1);
      Node.NodeMismatch node_NodeMismatch1 = node4.checkTreeTypeAwareEqualsImpl(node1);
      node3.useSourceInfoFrom(node1);
      Object object0 = null;
      node4.getChildBefore(node3);
      node_NodeMismatch0.equals(object0);
      node4.copyInformationFromForTree(node1);
      node4.isSwitch();
      node_NodeMismatch1.equals(node4);
      // Undeclared exception!
      try { 
        node3.isLabel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Node node0 = new Node(77);
      Node node1 = Node.newString("h\"Gg&5w");
      node1.putIntProp(52, 2);
      node0.useSourceInfoIfMissingFrom(node1);
      node0.getProp(0);
      node0.addChildToBack(node1);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.getJSDocInfo();
      node0.isSyntheticBlock();
      node1.isTrue();
      node0.getSourcePosition();
      node0.isExprResult();
      node1.isEquivalentToShallow(node0);
      node1.getBooleanProp(30);
      node0.getIntProp(37);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Node node0 = Node.newNumber(1.2);
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getChangeTime();
      Node node1 = new Node(50, node0, node0, node0, node0, (-2052), 32);
      node0.isDefaultCase();
      Node node2 = new Node(38, node1);
      node0.putIntProp(52, (-1970));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.hasMoreThanOneChild();
      Node node3 = Node.newNumber((double) 42, (-487), 38);
      node2.checkTreeEqualsImpl(node0);
      node0.getLength();
      node3.isNumber();
      node3.isDo();
      node1.isBlock();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isReturn();
      node0.getChangeTime();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = Node.newString(1128, "<invalid>", 37, 101);
      node1.isOptionalArg();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.setThrows();
      Node node2 = Node.newString("%s (%s) must be less than size (%s)", 1217, 50);
      node1.isCatch();
      node0.isDelProp();
      node1.isCast();
      node2.setDouble(53);
      node2.isThrow();
      int int0 = 1409;
      Node.newNumber((double) node2.COLUMN_MASK, int0, node1.IS_NAMESPACE);
      node2.isCatch();
      int int1 = 54;
      int int2 = 16;
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Node node0 = Node.newString(1004, "", 1004, 1004);
      node0.isLabelName();
      node0.getBooleanProp(1004);
      Node node1 = new Node((-562), node0, node0);
      node1.isQuotedString();
      node1.isWhile();
      node1.isSyntheticBlock();
      node0.isEmpty();
      node0.isFalse();
      node0.toStringTree();
      node0.isVar();
      int int0 = (-1131);
      Node node2 = null;
      try {
        node2 = new Node(int0, node1, node1, node0, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1004
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Node node0 = Node.newNumber(25.941340621951746);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(102, node0, node0, node0, node0, (-188), 31);
      node1.isOptionalArg();
      node1.isStringKey();
      node0.setOptionalArg(false);
      node1.isOnlyModifiesThisCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node2.isGetProp();
      node1.getJSType();
      node0.getLineno();
      node1.getCharno();
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node node0 = Node.newNumber((double) 2);
      node0.isLocalResultCall();
      node0.getLength();
      node0.setSourceFileForTesting("B,z");
      node0.getQualifiedName();
      Node node1 = new Node(0, node0, node0, 4095, 40);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = new Node(50, node1, node0, node2, node2, 16, 31);
      // Undeclared exception!
      try { 
        node3.isUnscopedQualifiedName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString("Object#Key", 1240, 1240);
      Node node1 = new Node(49);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.getQualifiedName();
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      node2.setStaticSourceFile(simpleSourceFile0);
      node3.hasMoreThanOneChild();
      node3.isGetElem();
      node2.removeChild(node1);
      double double0 = 373.0;
      Node.newNumber(double0);
      node1.toString();
      // Undeclared exception!
      try { 
        node1.cloneNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.copyInformationFrom(node1);
      Node node3 = node0.useSourceInfoFromForTree(node1);
      node0.getQualifiedName();
      Node node4 = node1.useSourceInfoIfMissingFromForTree(node3);
      Node.extractLineno(48);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      Node node5 = new Node(48, node4);
      node5.getIndexOfChild(node4);
      node2.getBooleanProp(1937);
      node4.isContinue();
      node4.getLength();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node1.isSetterDef();
      node4.isName();
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.isQualifiedName();
      node0.getQualifiedName();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      node2.addChildToBack(node0);
      node3.getStaticSourceFile();
      node3.setStaticSourceFile((StaticSourceFile) null);
      node2.getJSDocInfo();
      node3.isSyntheticBlock();
      node2.isTrue();
      node0.getSourcePosition();
      node3.isExprResult();
      node0.isEquivalentToShallow(node1);
      node0.getBooleanProp((-925));
      node1.getIntProp(629);
      node1.isThrow();
      node3.setLineno((-534));
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("Object#Element", (-651), 1240);
      Node node1 = new Node(32);
      Node node2 = node1.useSourceInfoFromForTree(node1);
      node1.getQualifiedName();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("^5KTCzW'u", false);
      node3.setStaticSourceFile(simpleSourceFile0);
      node0.hasMoreThanOneChild();
      node0.cloneNode();
      node2.isGetElem();
      node1.srcrefTree(node0);
      Node.newNumber(8.0);
      node3.toString();
      node0.cloneNode();
      node2.isScript();
      node0.isTypeOf();
      node1.addChildAfter(node2, node0);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.clearAllFlags();
      Node node0 = new Node((-561));
      node0.hasMoreThanOneChild();
      Node.newNumber(285.176017939002);
      node0.cloneNode();
      node0.isOnlyModifiesArgumentsCall();
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[7];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      Node node0 = new Node(83, 83, 83);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node node1 = new Node(60, node0, node0, node0);
      node0.useSourceInfoFromForTree(node1);
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags2.setAllFlags();
      node0.wasEmptyNode();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags4.clearAllFlags();
      Node node2 = jSTypeRegistry1.createParameters(jSTypeArray0);
      node0.getJsDocBuilderForNode();
      node2.getLength();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node2.isTry();
      node2.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Node node0 = new Node(112);
      node0.isWhile();
      node0.setChangeTime(4);
      Node node1 = Node.newString(38, ")a", 32, 8);
      node1.isOnlyModifiesThisCall();
      node1.toString();
      Node node2 = new Node(53, 16, 48);
      node1.isQualifiedName();
      node1.isLabelName();
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Node node0 = new Node(112);
      node0.mayMutateArguments();
      node0.isWhile();
      node0.setChangeTime(4);
      Node node1 = Node.newString(38, "", 32, 8);
      node0.setOptionalArg(true);
      node1.isOnlyModifiesThisCall();
      node1.toString();
      Node node2 = node1.cloneNode();
      node2.isScript();
      node2.isDec();
      node1.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      Node node0 = new Node((-651));
      Node node1 = new Node(39);
      node0.useSourceInfoFromForTree(node1);
      node1.getQualifiedName();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node2.setOptionalArg(true);
      Node.newNumber((double) 30);
      JSType[] jSTypeArray0 = new JSType[2];
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) null, jSTypeArray0);
      List<JSType> list0 = null;
      JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) templatizedType0, (JSType) templatizedType0, list0);
      jSTypeArray0[0] = jSType0;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createTemplateType(templatizedType0.EMPTY_TYPE_COMPONENT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      int int0 = (-1249);
      Node.extractCharno((-1249));
      Node[] nodeArray0 = new Node[7];
      Node[] nodeArray1 = new Node[2];
      Node node0 = Node.newString("]@N~}yGy", 8232, (-2132));
      nodeArray1[0] = node0;
      boolean boolean0 = true;
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node1 = jSDocInfo0.getAssociatedNode();
      nodeArray1[1] = null;
      Node node2 = new Node(2847, nodeArray1);
      Node node3 = new Node(int0, node2, node2, node1, node0, node2.DIRECTIVES, node2.QUOTED_PROP);
      nodeArray0[0] = node3;
      SimpleErrorReporter simpleErrorReporter0 = null;
      try {
        simpleErrorReporter0 = new SimpleErrorReporter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("Object#Element", (-651), 1240);
      Node node1 = new Node(32);
      Node node2 = node1.useSourceInfoFromForTree(node1);
      node1.getQualifiedName();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("^5KTCzW'u", false);
      node3.setStaticSourceFile(simpleSourceFile0);
      node2.putIntProp(16, 54);
      StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
      node1.setStaticSourceFile(staticSourceFile0);
      Node node4 = new Node(57);
      node0.hasMoreThanOneChild();
      Node node5 = new Node(1, 54, 77);
      node3.isGetElem();
      Node.newNumber((double) 42);
      node1.cloneNode();
      node1.isOnlyModifiesArgumentsCall();
      Node node6 = Node.newString((String) null);
      node6.isTypeOf();
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeRegistry1.createTemplateType("C-z9yx7");
      jSType0.toString();
      Node node0 = new Node(83, (-822), (-822));
      node0.putIntProp(1, 2);
      node0.addSuppression("p~%v'^XN/53g");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("&<s");
      node_FileLevelJsDocBuilder0.append("Object#Element");
      node0.isLabelName();
      node0.isInc();
      node0.isIn();
      node0.isVoid();
      node0.isComma();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("IS_NULL", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      Node node1 = enumElementType1.getRootNode();
      node0.replaceChildAfter((Node) null, (Node) null);
      node1.setSideEffectFlags(node0.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Node node0 = Node.newString("should Kever be calleC");
      node0.isLabel();
      Node node1 = Node.newString(30, "should Kever be calleC", 36, 8);
      node0.isAdd();
      node0.isEquivalentTo(node1, false, false, false);
      node0.isInstanceOf();
      node0.isDefaultCase();
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("should Kever be calleC", false);
      node_NodeMismatch0.equals(simpleSourceFile0);
      node1.isVoid();
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      TemplateType templateType0 = jSTypeRegistry1.createTemplateType("C-z9yx7");
      jSType0.toString();
      Node node0 = new Node(83, (-822), (-822));
      node0.putIntProp(1, 4);
      node0.addSuppression("p~%v'^XN/53g");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("&<s");
      node_FileLevelJsDocBuilder0.append("Object#Element");
      jSTypeRegistry1.getType((StaticScope<JSType>) templateType0, "Not declared as a type name", "&<s", (-3908), 29);
      node0.isLabelName();
      node0.isScript();
      node0.isInc();
      node0.isIn();
      node0.isVoid();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      Node node1 = jSTypeRegistry1.createParametersWithVarArgs(jSTypeArray0);
      node1.removeProp(153);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      node_NodeMismatch0.equals(jSTypeRegistry1);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Node node0 = Node.newString(693, "");
      node0.setLineno(693);
      node0.isTrue();
      Node node1 = Node.newString("");
      node1.isOnlyModifiesArgumentsCall();
      node1.isNot();
      node1.isAdd();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags5.setReturnsTainted();
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      TemplateType templateType0 = jSTypeRegistry1.createTemplateType("C-z9yx7");
      jSType0.toString();
      Node node0 = new Node(83, (-822), (-822));
      node0.putIntProp(1, 4);
      node0.addSuppression("p~%v'^XN/53g");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("&<s");
      node_FileLevelJsDocBuilder0.append("Object#Element");
      jSTypeRegistry1.getType((StaticScope<JSType>) templateType0, "Not declared as a type name", "&<s", (-3908), 29);
      node0.isLabel();
      node0.isScript();
      node0.isInc();
      node0.isIn();
      node0.isVoid();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      Node node1 = jSTypeRegistry1.createParametersWithVarArgs(jSTypeArray0);
      node1.removeProp(153);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      node_NodeMismatch0.equals(jSTypeRegistry1);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags((-6086));
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags3.setThrows();
      node0.isGetterDef();
      node0.isVar();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.checkTreeEquals(node0);
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(57);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      Node node4 = node2.useSourceInfoIfMissingFromForTree(node0);
      Node.extractLineno(43);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.clearAllFlags();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node[] nodeArray0 = new Node[1];
      Node node5 = new Node(44);
      nodeArray0[0] = node5;
      Node node6 = new Node((-1544), nodeArray0);
      node3.isQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node4.new FileLevelJsDocBuilder();
      node5.toString();
      node5.isDebugger();
      node1.checkTreeEquals(node4);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<TemplateType> arrayList0 = new ArrayList<TemplateType>();
      Iterator<TemplateType> iterator0 = arrayList0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      arrayList0.trimToSize();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node.newNumber(8.0, 38, 54);
      JSType[] jSTypeArray0 = new JSType[0];
      immutableList0.toArray((Object[]) jSTypeArray0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.copyInformationFrom(node1);
      node0.isBlock();
      node0.getString();
      // Undeclared exception!
      try { 
        Node.newString(jSTypeRegistry0.OBJECT_INDEX_TEMPLATE, node0.FLAG_ARGUMENTS_UNMODIFIED, node0.COLUMN_BITS);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newNumber((double) 2);
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = new Node(37, node0, node0, node0, node0);
      node1.setSideEffectFlags(40);
      node1.getQualifiedName();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node2.setOptionalArg(true);
      Node node3 = Node.newNumber((-1797.4));
      Node node4 = new Node(53, node1, node3, node0, node1);
      node4.getDouble();
      node3.isEquivalentToTyped(node1);
      // Undeclared exception!
      try { 
        node4.removeChild(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Node node0 = Node.newString(124, "\"Gg&5w", 101, (-213));
      node0.isLabelName();
      node0.setString("com.google.javasWriptAChino.Nodg$AncestorIterable");
      Node node1 = new Node(52, 54, (-1286));
      node1.addChildrenToFront(node0);
      node0.addSuppression("com.google.javasWriptAChino.Nodg$AncestorIterable");
      node0.isEmpty();
      node1.getIntProp(32);
      node0.isParamList();
      node1.isContinue();
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Node node0 = Node.newString(693, "");
      node0.setLineno(693);
      node0.isTrue();
      Node node1 = Node.newString("");
      node1.isOnlyModifiesArgumentsCall();
      node1.isNot();
      node1.isAdd();
      node1.isScript();
      node1.isSyntheticBlock();
      node1.isThis();
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("Object#Element", (-651), 1240);
      Node node1 = new Node(32);
      Node node2 = node1.useSourceInfoFromForTree(node1);
      node1.getQualifiedName();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("^5KTCzW'u", false);
      node3.setStaticSourceFile(simpleSourceFile0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node3.copyInformationFrom(node2);
      node3.isBlock();
      node1.getString();
      String string0 = "DEBUGGER";
      int int0 = 1073741824;
      Node node4 = Node.newString(string0, node3.FLAG_GLOBAL_STATE_UNMODIFIED, int0);
      // Undeclared exception!
      try { 
        node4.addChildrenToBack(node2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // TYPEOF [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000338] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Node node0 = Node.newNumber(25.941340621951746);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(102, node0, node0, node0, node0, (-188), 31);
      node1.isOptionalArg();
      node1.isStringKey();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags5.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags6.setMutatesGlobalState();
      node_SideEffectFlags4.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags7.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags7.setMutatesGlobalState();
      node_SideEffectFlags8.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags6.setMutatesGlobalState();
      node_SideEffectFlags0.clearAllFlags();
      node0.isLocalResultCall();
      node1.isDec();
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString("h\"Gg&5w", 43, 1240);
      Node node1 = new Node(154);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = new Node(8, (Node[]) null);
      node1.isQualifiedName();
      int int0 = 46;
      Node node4 = new Node(int0, node3, node1);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node5 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node1.addChildAfter(node2, node5);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      Node node0 = new Node((-651));
      Node node1 = new Node(32);
      Node node2 = node1.useSourceInfoFromForTree(node1);
      node1.getQualifiedName();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      node1.toString(true, false, false);
      node1.isName();
      node2.isQuotedString();
      node3.isEquivalentToShallow(node2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setThrows();
      node1.isDelProp();
      Node node4 = new Node(726, node0, node0, node2);
      node4.isWhile();
      node4.isNE();
      node4.isCase();
      node1.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node0 = Node.newString("Object#Key");
      node0.isEquivalentTo((Node) null, false, true, false);
      node0.isInstanceOf();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Node node0 = Node.newString(124, "\"Gg&5w", 101, (-213));
      node0.isWith();
      Node node1 = new Node(105, node0, node0, node0, node0, (-1755), 39);
      node1.isWhile();
      node1.setChangeTime(64);
      node0.setOptionalArg(false);
      node1.toString();
      node0.cloneTree();
      Node node2 = node0.cloneNode();
      node2.isOptionalArg();
      node0.isDefaultCase();
      node1.hasChildren();
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      Node node1 = new Node(1101, node0, node0, node0, node0, 15, 34);
      node0.isDefaultCase();
      Node node2 = new Node(2096, node1);
      node2.putIntProp(903, 37);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node2.hasMoreThanOneChild();
      Node node3 = Node.newNumber(32.0, 39, 40);
      node3.isLocalResultCall();
      node1.checkTreeEqualsImpl(node0);
      node0.getLength();
      node1.isNumber();
      Node node4 = Node.newString("P{} ", 56, 37);
      node4.isDo();
      node2.isBlock();
      Node node5 = node0.getParent();
      node5.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getChangeTime();
      Node node1 = new Node(50, node0, node0, node0, node0, 0, 32);
      node0.isDefaultCase();
      Node node2 = new Node(38, node1);
      node0.putIntProp(52, 54);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.hasMoreThanOneChild();
      Node node3 = Node.newNumber((double) 42, (-487), 38);
      node2.checkTreeEqualsImpl(node0);
      node0.getLength();
      node3.isDo();
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Node node0 = new Node(108);
      node0.mayMutateArguments();
      node0.isAnd();
      node0.isWhile();
      node0.setChangeTime(4);
      node0.setOptionalArg(false);
      node0.toString();
      Node node1 = node0.cloneNode();
      node1.isScript();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.ProxyObjectType", 2329, 38);
      Node node1 = new Node((-654), node0, node0, node0, node0, (-654), 103);
      node1.getJSDocInfo();
      node1.isSyntheticBlock();
      Node node2 = new Node(103, node1, node1);
      node2.isTrue();
      node0.getSourcePosition();
      node2.isExprResult();
      node1.isEquivalentToShallow(node2);
      node2.getBooleanProp(52);
      node2.getIntProp(2329);
      node0.isReturn();
      node2.setJSDocInfo((JSDocInfo) null);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      Node node0 = Node.newString("?", 55, 55);
      node0.getQualifiedName();
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(55, node0, node0, node0, 153, 38);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.getJSDocInfo();
      node2.replaceChildAfter(node1, node0);
      node2.checkTreeEquals(node0);
      node0.isQuotedString();
      // Undeclared exception!
      try { 
        node1.removeProp(node0.FLAG_ARGUMENTS_UNMODIFIED);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Node node0 = new Node(112);
      node0.mayMutateArguments();
      node0.isAnd();
      node0.isWhile();
      node0.setChangeTime(4);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      Node node1 = Node.newString(38, "", 32, 8);
      node1.getString();
      node0.setOptionalArg(false);
      node1.isOnlyModifiesThisCall();
      node1.toString();
      Node node2 = node1.cloneNode();
      node2.isScript();
      node0.setDouble(3973.985346504);
      node0.isName();
      String string0 = "^;t`";
      // Undeclared exception!
      try { 
        Node.newString(string0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DEFAULT_CASE [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004] [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Node node0 = Node.newString("r8\nqtV", (-14), (-14));
      node0.setOptionalArg(true);
      Node node1 = Node.newString("\"Gg&5w", 259, 101);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node1;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node1.isBreak();
      node1.type = 153;
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("2#5'<2odTK");
      node1.isArrayLit();
      Node node2 = new Node(112, node0);
      node2.toString();
      node1.isDebugger();
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getChangeTime();
      Node node1 = new Node(50, node0, node0, node0, node0, 0, 32);
      node0.isDefaultCase();
      Node node2 = new Node(38, node1);
      node0.putIntProp(52, 54);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node2.setOptionalArg(false);
      node0.isSyntheticBlock();
      node0.toString();
      node0.cloneNode();
      node1.isScript();
      node0.isTypeOf();
      node1.hasMoreThanOneChild();
      node1.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Node node0 = Node.newString("r8\nqtV", (-14), (-14));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      node0.isRegExp();
      node0.putIntProp((-2339), 48);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = Node.newString(8, "2");
      node1.setOptionalArg(false);
      Node node2 = new Node(105, node1, 2, 32);
      node2.getDouble();
      Node node3 = new Node(node2.STATIC_SOURCE_FILE, node2.NO_SIDE_EFFECTS, node0.INFERRED_FUNCTION);
      Node node4 = new Node(node1.DIRECT_EVAL, node1, node3.SIDE_EFFECTS_ALL, node3.FLAG_GLOBAL_STATE_UNMODIFIED);
      node3.isEquivalentToTyped(node4);
      node0.removeChild(node4);
      node4.isScript();
      node1.isEquivalentTo(node2);
      // Undeclared exception!
      try { 
        node2.isThis();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FUNCTION <invalid> 2 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      Node node0 = Node.newString(124, "\"Gg&5w", 124, (-220));
      node0.setString("\"Gg&5w");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.addChildrenToFront((Node) null);
      node0.isEquivalentToShallow(node0);
      node0.isOptionalArg();
      node0.isIf();
      // Undeclared exception!
      try { 
        node0.setDouble(node0.ORIGINALNAME_PROP);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getChangeTime();
      Node node1 = new Node(50, node0, node0, node0, node0, 0, 32);
      node0.isDefaultCase();
      Node node2 = new Node(38, node1);
      node0.putIntProp(52, 54);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.hasMoreThanOneChild();
      node2.checkTreeEqualsImpl(node0);
      Node node3 = node1.cloneNode();
      node3.isScript();
      node3.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getChangeTime();
      Node node1 = new Node(46, node0, node0, node0, node0, 43, 12);
      node1.isDefaultCase();
      Node node2 = new Node(39, node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      node2.setString("C'F<vPtwR?`Vm6BW");
      node2.useSourceInfoFrom(node1);
      // Undeclared exception!
      try { 
        node0.addChildAfter(node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Node node0 = new Node(108, 108, 108);
      node0.isWith();
      node0.isAnd();
      node0.isWhile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.getAncestors();
      node0.isContinue();
      node0.isFunction();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      node_SideEffectFlags0.setThrows();
      node0.isGetterDef();
      node0.isVar();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = new Node(39, 32, 2564);
      node1.checkTreeEquals(node0);
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = new Node(0, node0, node0, node0);
      node0.isOptionalArg();
      String string0 = "var_args_name";
      Node node2 = Node.newString(0, "var_args_name");
      node2.setVarArgs(false);
      node2.setString("var_args_name");
      node0.useSourceInfoFrom(node2);
      node1.addChildAfter(node0, node0);
      Node node3 = node1.srcrefTree(node0);
      // Undeclared exception!
      try { 
        node1.addChildBefore(node3, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Node node0 = Node.newString("", 112, 112);
      Node node1 = new Node(47, node0, node0, node0, 1, 37);
      Node node2 = node1.copyInformationFrom(node0);
      node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      node2.useSourceInfoIfMissingFromForTree(node0);
      Node.extractLineno(43);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesGlobalState();
      node1.setDouble(43);
      node0.isName();
      String string0 = "Recorded bad position information\nstart-char: ";
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getChangeTime();
      Node node1 = new Node(50, node0, node0, node0, node0, 0, 32);
      node0.isDefaultCase();
      Node node2 = new Node(38, node1);
      node0.putIntProp(52, 54);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.hasMoreThanOneChild();
      node2.checkTreeEqualsImpl(node0);
      node1.cloneNode();
      node2.isName();
      node0.getChangeTime();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      Node node0 = Node.newString(124, "\"Gg&5w", 101, (-213));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags(0);
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags4.setThrows();
      node0.isHook();
      node0.getSideEffectFlags();
      node0.isTrue();
      node0.isAnd();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getChangeTime();
      Node node1 = new Node(50, node0, node0, node0, node0, 0, 32);
      Node node2 = new Node(38, node1);
      node0.putIntProp(52, 54);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.hasMoreThanOneChild();
      node2.checkTreeEqualsImpl(node0);
      Node node3 = node2.cloneNode();
      node3.isScript();
      node3.getSourceFileName();
      node1.isTypeOf();
      node3.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      Node node0 = Node.newString("r8\nqtV", (-14), (-14));
      boolean boolean0 = true;
      node0.setOptionalArg(true);
      Node node1 = new Node(38);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.getQualifiedName();
      node0.useSourceInfoIfMissingFromForTree(node1);
      boolean boolean1 = true;
      boolean boolean2 = false;
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isFromExterns();
      node0.isAnd();
      node0.isWith();
      node0.setChangeTime(4);
      Node node1 = Node.newString(38, "", 32, 8);
      Node node2 = new Node(42, node1, node0, node0, 1364, 55);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node2);
      Object object0 = new Object();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node_NodeMismatch0.equals(object0);
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Node node0 = Node.newString("h\"Gg&5w", (-651), (-651));
      Node node1 = new Node(43, node0, node0, node0, node0);
      node1.getQualifiedName();
      Node node2 = new Node(31, 49, 4095);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.getJsDocBuilderForNode();
      node0.addChildrenToFront(node1);
      node0.hasChild(node2);
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      Node node0 = Node.newString(124, "\"Gg&5w", 101, (-213));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags(0);
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags4.setThrows();
      node0.isHook();
      node0.getSideEffectFlags();
      node0.isTrue();
      node0.isInstanceOf();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Node node0 = new Node(83, (-822), (-822));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags4.setThrows();
      node0.isCatch();
      node0.isCast();
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "p[;E]'@O6[<");
      Node node0 = Node.newNumber(15.0);
      Node node1 = null;
      Node node2 = node0.copyInformationFrom((Node) null);
      node0.setQuotedString();
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node1);
      // Undeclared exception!
      try { 
        node3.detachFromParent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isFromExterns();
      node0.isAnd();
      node0.isLabelName();
      String string0 = "t\\aryvi-ea)`a|";
      node0.setString((String) null);
      int int0 = 40;
      int int1 = (-2375);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("Object#Element", (-624), 1240);
      Node node1 = new Node(32);
      Node node2 = node1.useSourceInfoFromForTree(node1);
      node1.getQualifiedName();
      node1.useSourceInfoIfMissingFromForTree(node0);
      Node node3 = new Node((-2399), 30, 51);
      node0.setString((String) null);
      Node.newString(jSTypeRegistry0.OBJECT_INDEX_TEMPLATE);
      node3.mayMutateArguments();
      node2.isQuotedString();
      // Undeclared exception!
      try { 
        node3.getSideEffectFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      Node node0 = Node.newString(124, "\"Gg&5w", 101, (-213));
      node0.isLabelName();
      node0.setString("taryvi-ea)`a|");
      Node node1 = new Node((-1809), 54, (-1286));
      node0.putIntProp(47, (-14));
      node0.addSuppression("com.google.javasWriptAChino.Nodg$AncestorIterable");
      node0.isEmpty();
      node0.isFalse();
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      Node node0 = Node.newString(124, "\"Gg&5w", 101, (-192));
      node0.isLabelName();
      node0.setString("taryvi-ea)`a|");
      node0.putIntProp(47, 101);
      node0.addSuppression("com.google.javasWriptAChino.Nodg$AncestorIterable");
      node0.isEmpty();
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("Object#Element", (-651), 1240);
      Node node1 = new Node(32);
      Node node2 = node1.useSourceInfoFromForTree(node1);
      Node[] nodeArray0 = new Node[0];
      Node node3 = new Node(46, nodeArray0);
      node2.isQualifiedName();
      Node node4 = new Node(57, node0, node2);
      node4.srcref(node2);
      node4.addChildAfter(node1, node2);
      int int0 = 114;
      int int1 = 1;
      // Undeclared exception!
      try { 
        Node.newString(node0.SIDE_EFFECTS_FLAGS_MASK, jSTypeRegistry0.OBJECT_INDEX_TEMPLATE, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      Node node0 = new Node(108);
      node0.mayMutateArguments();
      node0.isAnd();
      node0.isWhile();
      boolean boolean0 = node0.isWith();
      node0.setChangeTime(125);
      Node node1 = Node.newString(772, "4T|M9UB", 16, 117);
      node1.isUnscopedQualifiedName();
      Node node2 = new Node(64, node1, node0, node1, 154, (-1768));
      Node node3 = Node.newString("\"Gg&5w");
      Node node4 = node2.useSourceInfoFromForTree(node3);
      node4.addChildrenToBack(node0);
      int int0 = (-2967);
      int int1 = 3604;
      Node node5 = new Node(int0, node2, node1, node1.FLAG_LOCAL_RESULTS, int1);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node5, node1);
      Object object0 = new Object();
      String string0 = "4T|M9UB";
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      // Undeclared exception!
      try { 
        node_NodeMismatch0.equals(locale_Category0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      InputId inputId0 = new InputId("\"Gg&5w");
      Node node0 = Node.newString("\"Gg&5w", 2088, 1313);
      node0.setLineno(1313);
      node0.isTrue();
      inputId0.toString();
      Node node1 = new Node(113, node0, node0, node0, node0);
      node1.setInputId(inputId0);
      node0.toString();
      Node node2 = node1.cloneNode();
      node2.isScript();
      node1.isDec();
      node2.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = Node.newString(1128, "<invalid>", 37, 101);
      node1.isVarArgs();
      node0.putIntProp(56, 51);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
      Object object0 = new Object();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("sa?lDfIa", true);
      node_NodeMismatch0.equals(node1);
      node1.isUnscopedQualifiedName();
      node1.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      Node node1 = Node.newString("", 8287, 43);
      node1.addChildrenToFront(node0);
      Node node2 = Node.newString("\"Gg&5w", 1378, 40);
      node1.isEquivalentTo(node2, true, false, false);
      Node.newString(2, (String) null, 4095, 2);
      node0.isLabelName();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      int int0 = 2329;
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.ProxyObjectType", 2329, 38);
      Node node1 = new Node((-654), node0, node0, node0, node0, (-654), 103);
      node1.getJSDocInfo();
      node1.isSyntheticBlock();
      Node node2 = new Node(103, node1, node1);
      node2.isTrue();
      node0.getSourcePosition();
      node2.removeChildren();
      node2.isExprResult();
      node2.setSideEffectFlags(43);
      node1.isEquivalentToShallow(node2);
      node0.isBlock();
      node2.getIntProp(int0);
      node2.isContinue();
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[7];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags4.clearAllFlags();
      Node node0 = jSTypeRegistry1.createParameters(jSTypeArray0);
      node0.getLength();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node0.isTry();
      node0.isNull();
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      InputId inputId0 = new InputId("]!KH0/&6");
      Node node0 = Node.newString("]!KH0/&6", 693, 693);
      node0.setLineno(693);
      node0.isTrue();
      inputId0.toString();
      Node node1 = new Node(54, node0, node0, node0, node0);
      node0.setInputId(inputId0);
      node0.toString();
      Node node2 = node1.cloneNode();
      node1.isScript();
      node2.isDec();
      node2.isEquivalentTo(node0, false, false, false);
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(415, "jOUi_S)s*CG~M!u#=~");
      Node node1 = new Node((-3184), node0, 3164, 16);
      Node node2 = node1.copyInformationFromForTree(node0);
      node1.isTypeOf();
      node0.isParamList();
      node0.getChangeTime();
      InputId inputId0 = new InputId("~,!0{*eud");
      inputId0.toString();
      node1.setInputId(inputId0);
      node2.setChangeTime((-5529));
      Node node3 = new Node(56, node0, node1, 47, 54);
      node1.children();
      node1.isThrow();
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      Node node0 = Node.newString("]!KH0%q/&6", 693, 693);
      node0.isQualifiedName();
      node0.isDefaultCase();
      Node node1 = new Node(54, node0, node0, node0, node0);
      node1.setOptionalArg(false);
      node0.toString();
      Node node2 = node1.cloneTree();
      node2.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      Node node0 = Node.newString("]!KH0/&6", 693, 693);
      node0.setLineno(693);
      node0.isQualifiedName();
      node0.isTrue();
      Node node1 = new Node(54, node0, node0, node0, node0);
      node1.setOptionalArg(true);
      node0.toString();
      Node node2 = node1.cloneTree();
      node2.cloneNode();
      node2.isDefaultCase();
      node1.hasChildren();
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      node0.isFromExterns();
      node0.isAnd();
      node0.cloneTree();
      node0.isWith();
      node0.setChangeTime(4);
      node0.hasMoreThanOneChild();
      node0.isBlock();
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      Node node0 = new Node(39, (-1056), 1660);
      node0.isInc();
      Node node1 = Node.newString(1, "|ZG!=)5*>");
      node0.addChildrenToBack(node1);
      Node node2 = Node.newString("|ZG!=)5*>", 12, 2012);
      Node node3 = node0.copyInformationFromForTree(node2);
      node1.removeProp(49);
      node2.type = (-476);
      Node node4 = node3.getChildBefore(node0);
      node4.children();
      node3.toStringTree();
      node4.isOptionalArg();
      node3.isQualifiedName();
      node0.addChildrenAfter(node2, node4);
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.getInputId();
      node0.getChangeTime();
      Node node1 = new Node(31, node0, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      node1.setOptionalArg(true);
      node1.isOnlyModifiesThisCall();
      Node node2 = node1.cloneNode();
      node1.isScript();
      node2.isDec();
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      node0.isDefaultCase();
      Node node1 = new Node(50);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      Node node3 = new Node(48, node0, node0);
      Node node4 = new Node(1062, node3, node1, node3, 2238, 31);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node3);
      Object object0 = new Object();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("ADD", true);
      node_NodeMismatch0.equals(node2);
      Node node5 = new Node(54, node0);
      node5.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Node node0 = new Node(108);
      node0.mayMutateArguments();
      node0.isAnd();
      node0.isWhile();
      node0.setChangeTime(4);
      node0.setOptionalArg(false);
      node0.toString();
      Node node1 = node0.cloneNode();
      node0.isDefaultCase();
      Node node2 = node1.copyInformationFrom(node0);
      node2.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[3] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.isAssignAdd();
      Node node1 = node0.cloneNode();
      node1.isOnlyModifiesThisCall();
      node0.isNE();
      node0.isRegExp();
      node1.getLastChild();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.getInputId();
      node0.getChangeTime();
      Node node1 = new Node(31, node0, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setThrows();
      node1.isNot();
      node1.isScript();
      node0.isSyntheticBlock();
      node1.isDelProp();
      node1.isCase();
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("Object#Element", (-651), 1240);
      Node node1 = new Node(32);
      Node node2 = node1.useSourceInfoFromForTree(node1);
      node1.getQualifiedName();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("^5KTCzW'u", false);
      node3.setStaticSourceFile(simpleSourceFile0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      Node.mergeLineCharNo(39, 132);
      int int0 = Node.JSDOC_INFO_PROP;
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      node3.isDo();
      node3.isArrayLit();
      node3.isNew();
      node2.getChildBefore((Node) null);
      node1.isCall();
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedHashSet<TemplateType> linkedHashSet0 = new LinkedHashSet<TemplateType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) linkedHashSet0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node1 = new Node(40);
      Node node2 = new Node(13, node0, node1, 50, 4095);
      node2.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      Node node0 = Node.newString("h\"Gg&5w", (-651), (-651));
      Node node1 = new Node(43, node0, node0, node0, node0);
      node1.getQualifiedName();
      Node node2 = new Node(31, 49, 4095);
      node2.useSourceInfoFrom(node1);
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node0.setString("h\"Gg&5w");
      Node node3 = Node.newString(1, "h\"Gg&5w", 100, (-607));
      node3.isEmpty();
      node3.getSideEffectFlags();
      node3.isNE();
      node1.isRegExp();
      node0.setSideEffectFlags(56);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Node node0 = new Node(108);
      node0.mayMutateArguments();
      node0.isAnd();
      node0.isWhile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.getAncestors();
      node0.isContinue();
      node0.isFunction();
      Node node1 = Node.newNumber(0.5, 50, 15);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node2 = new Node((-3820), node1, node0);
      node0.isObjectLit();
      Node.newNumber((-633.254060412));
      node2.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(54, node0);
      node1.getQualifiedName();
      Node node2 = new Node(56);
      Node node3 = new Node(33, node1, node2, 42, 86);
      Node node4 = node3.useSourceInfoIfMissingFromForTree(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node4.isSwitch();
      node1.isBlock();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      boolean boolean0 = node4.hasMoreThanOneChild();
      int int0 = Node.FLAG_LOCAL_RESULTS;
      node3.isTry();
      Node.newString((String) null);
      double double0 = 0.0;
      Node node5 = Node.newNumber(double0);
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        node5.isEquivalentTo(node4, boolean0, boolean0, boolean1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Node node0 = Node.newNumber(25.941340621951746);
      node0.mayMutateArguments();
      node0.getChangeTime();
      Node node1 = new Node(102, node0, node0, node0, node0, (-188), 31);
      node1.isOptionalArg();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags(54);
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags4.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags6.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setMutatesGlobalState();
      node_SideEffectFlags7.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags0.clearAllFlags();
      node0.isLocalResultCall();
      node1.isDec();
      node1.getSourceOffset();
      node0.isVoid();
      node1.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("", 112, 112);
      Node node1 = null;
      node0.getType();
      node0.isOnlyModifiesThisCall();
      node0.appendStringTree((Appendable) null);
      node0.addChildrenAfter(node1, node1);
      // Undeclared exception!
      try { 
        node0.mayMutateArguments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("", 112, 112);
      Node node1 = null;
      node0.getType();
      node0.appendStringTree((Appendable) null);
      node0.addChildrenAfter(node1, node1);
      // Undeclared exception!
      try { 
        node0.mayMutateArguments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      Node node0 = new Node(116);
      Node node1 = new Node((-2245), 36, 1024);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = node2.useSourceInfoFromForTree(node1);
      node3.getQualifiedName();
      Node node4 = node1.useSourceInfoIfMissingFromForTree(node3);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node1.isSwitch();
      node3.isBlock();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node2.hasMoreThanOneChild();
      int int0 = Node.FLAG_LOCAL_RESULTS;
      node0.isTry();
      Node.newString("Object#Key");
      node4.isEquivalentTo(node3, true, false, false);
      node1.isInstanceOf();
      node3.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      Node node0 = new Node(101, (-213), 124);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node_SideEffectFlags0.clearAllFlags();
      node0.isHook();
      node0.getSideEffectFlags();
      Node.newString("QOhk,m;;nu0o");
      node0.isTrue();
      node0.isAnd();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      Node node0 = Node.newNumber(6.721534673400339);
      node0.mayMutateArguments();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node(31, node0, node0);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node2.setStaticSourceFile(simpleSourceFile0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      Node node3 = Node.newNumber(32.0, 35, (-716));
      node2.checkTreeEqualsImpl(node3);
      node2.getLength();
      node1.isDo();
      Node node4 = new Node((-2050), node3, node2, node0, 57, 605);
      node2.isAdd();
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newNumber(0.7);
      node0.isLocalResultCall();
      node0.getLength();
      node0.setSourceFileForTesting("B,z");
      Node node1 = Node.newNumber((double) 31);
      String string0 = "r&+";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      node1.appendStringTree(mockPrintWriter1);
      node1.toString();
      node1.isDebugger();
      node0.checkTreeEquals(node1);
      node0.getString();
      node1.toStringTree();
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[3] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.isAssignAdd();
      node0.isTypeOf();
      node0.getQualifiedName();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = jSTypeRegistry1.createParametersWithVarArgs(jSTypeArray0);
      node0.replaceChild(node1, node1);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      Node node0 = Node.newNumber((double) 8287);
      node0.mayMutateArguments();
      node0.getChangeTime();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = Node.newString(1098, "<invalid>", 363, 54);
      node0.isOptionalArg();
      node0.isVarArgs();
      node0.putIntProp(0, 79);
      node1.setChangeTime(49);
      Node node2 = new Node(49, node0, node0, 657, (-2339));
      node1.children();
      node2.isThrow();
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getChangeTime();
      Node node1 = new Node(54);
      node1.isUnscopedQualifiedName();
      Node node2 = new Node(38, node1);
      node1.setLength(40);
      Node node3 = node0.cloneTree();
      node3.isCall();
      node0.isSwitch();
      node0.toString(false, true, true);
      node0.isString();
      node0.isQuotedString();
      Node node4 = new Node(94, node3);
      node4.isEquivalentToShallow(node2);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("NUMBER 0.0", false);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      node2.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("Object#Element", (-651), 1240);
      Node node1 = new Node(32);
      Node node2 = node1.useSourceInfoFromForTree(node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node3 = node1.setJSDocInfo(jSDocInfo0);
      node1.replaceChild(node0, node2);
      node0.setSourceEncodedPositionForTree(node1.IS_CONSTANT_NAME);
      int int0 = (-820);
      Node node4 = null;
      try {
        node4 = new Node(int0, node3, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Node node0 = new Node(112);
      node0.mayMutateArguments();
      node0.isAnd();
      node0.isEquivalentTo(node0);
      node0.setChangeTime(4);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node0.isTry();
      Node node1 = new Node(2, node0, node0);
      node0.isFunction();
      Node.newNumber((double) 31, 4095, 126);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node2 = new Node(4, 15, 43);
      node2.cloneNode();
      node0.isScript();
      node1.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Node node0 = new Node(108);
      node0.mayMutateArguments();
      node0.isAnd();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      simpleErrorReporter0.error("Object#Element", "h#+uxugTk<I7?", 102, 110);
      jSTypeRegistry0.setLastGeneration(true);
      node0.isSwitch();
      node0.isName();
      node0.isThis();
      Node node1 = Node.newNumber((double) 110);
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.ProxyObjectType", (-654), (-654));
      node0.getJSDocInfo();
      node0.isSyntheticBlock();
      Node node1 = new Node(103, node0, node0);
      node1.isTrue();
      node0.getSourcePosition();
      node1.isExprResult();
      node1.isDec();
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      String string0 = "]!KH0/&6";
      InputId inputId0 = new InputId("]!KH0/&6");
      Node node0 = new Node(39);
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(118, node0);
      Node node2 = node1.cloneTree();
      node1.isCall();
      node0.isSwitch();
      Node node3 = node0.getChildAtIndex(56);
      node3.isGetElem();
      // Undeclared exception!
      try { 
        node2.addChildAfter(node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      Node node0 = new Node(108);
      node0.mayMutateArguments();
      node0.isAnd();
      node0.isWhile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.getAncestors();
      node0.isContinue();
      node0.isFunction();
      Node.newNumber((double) 1, 50, 15);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = node0.cloneNode();
      node1.isOnlyModifiesArgumentsCall();
      node0.isScript();
      node1.isTypeOf();
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      Node node0 = Node.newString("should never be called");
      Node.newString("STRING_OBJECT_FUNCTION_TYPE", 152, 53);
      Node node1 = new Node(32, node0, node0, node0, node0);
      node0.getQualifiedName();
      Node node2 = new Node(39, 0, 1440);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.getJsDocBuilderForNode();
      node2.cloneNode();
      node0.isScript();
      node2.isGetProp();
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Node node0 = Node.newString(112, "", 112, 112);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isSwitch();
      node0.isName();
      node0.isSyntheticBlock();
      node0.isThis();
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node1.getAncestors();
      node1.isContinue();
      node0.isFunction();
      node0.cloneTree();
      node1.isEquivalentTo(node0, false, true, false);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString(1240, "Object#Key", (-640), 1240);
      Node node1 = new Node(32);
      Node node2 = node1.useSourceInfoFromForTree(node1);
      node1.getQualifiedName();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      node1.useSourceInfoFrom(node2);
      node3.isUnscopedQualifiedName();
      node3.setStaticSourceFile((StaticSourceFile) null);
      node0.hasMoreThanOneChild();
      node2.getString();
      node3.useSourceInfoFromForTree(node1);
      node1.isDo();
      Node node4 = new Node(node3.LENGTH);
      // Undeclared exception!
      try { 
        node0.isScript();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // TYPEOF is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newNumber((-4426.5148186), 154, (-2354));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isScript();
      node0.isFunction();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node node1 = new Node(86, node0, node0, node0, node0, 122, 644);
      String string0 = node1.toStringTree();
      node0.replaceChildAfter(node1, node1);
      Node node2 = node0.detachFromParent();
      node2.setQuotedString();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node2.wasEmptyNode();
      String string1 = "o:me*`e,_4SX2u\"K{V'";
      // Undeclared exception!
      try { 
        Node.newString(node0.FLAG_LOCAL_RESULTS, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getChangeTime();
      Node node1 = new Node(54);
      node1.isUnscopedQualifiedName();
      Node node2 = new Node(38, node1);
      node1.setLength(40);
      Node node3 = node0.cloneTree();
      node3.isCall();
      node0.isSwitch();
      node0.toString(false, true, true);
      node2.isName();
      node0.isQuotedString();
      Node node4 = new Node(86, node3);
      node4.isEquivalentToShallow(node2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node5 = Node.newString("6Ue)57gkvCH");
      node5.setSourceEncodedPositionForTree(16);
      node5.isExprResult();
      node2.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      Node node0 = Node.newString(112, "", 112, 112);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(true);
      node0.isBlock();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(1945, node0, node0, node0, 110, 43);
      node1.getLength();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Node node2 = node1.cloneNode();
      node1.isNE();
      Node node3 = Node.newNumber((double) 52);
      node3.isRegExp();
      node3.isNull();
      node2.isComma();
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      Node node0 = new Node(112);
      node0.mayMutateArguments();
      node0.isWhile();
      Node node1 = Node.newString(38, ")a", 32, 8);
      node0.setOptionalArg(true);
      node1.isOnlyModifiesThisCall();
      node1.toString();
      Node node2 = new Node(53, 16, 48);
      node2.isDec();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.isQualifiedName();
      node1.isLabelName();
      node0.useSourceInfoIfMissingFrom(node2);
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      Node node0 = new Node(124);
      node0.mayMutateArguments();
      node0.isAnd();
      node0.setChangeTime(2519);
      Node node1 = Node.newString(110, "\"Gg&5w", 108, 32);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setMutatesThis();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      node_SideEffectFlags3.setThrows();
      node1.isNot();
      node0.srcref(node1);
      node0.isScript();
      node1.isSyntheticBlock();
      node0.isContinue();
      node1.isGetProp();
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      Node node0 = Node.newString("r8\nqtV", (-14), (-14));
      node0.setOptionalArg(true);
      Node node1 = Node.newString("r8\nqtV", 259, 1161);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node1;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node1.isOnlyModifiesThisCall();
      node1.type = 153;
      node1.getJsDocBuilderForNode();
      Node[] nodeArray1 = new Node[0];
      Node node2 = new Node(116, nodeArray1);
      node2.isQualifiedName();
      Node node3 = new Node((-1396), node1, node0);
      node1.addChildAfter(node1, node0);
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.ProxyObjectType", 974, 974);
      node0.getJSDocInfo();
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(103, node0, node0);
      node1.isTrue();
      node1.copyInformationFrom(node0);
      node0.getSourcePosition();
      node1.isExprResult();
      node1.siblings();
      node0.isReturn();
      Node node2 = node1.removeChildAfter(node0);
      node2.isGetProp();
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      Node node0 = Node.newNumber(6.721534673400339);
      node0.mayMutateArguments();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node(31, node0, node0);
      node1.isOptionalArg();
      node1.isVarArgs();
      node1.cloneTree();
      node1.addChildBefore(node0, node0);
      // Undeclared exception!
      try { 
        node0.isVarArgs();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[6];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeArray0[0] = jSType0;
      JSType[] jSTypeArray1 = new JSType[4];
      jSTypeArray1[3] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray1);
      Node node1 = Node.newString("r8\nqtV", (-31), (-1));
      node0.isEquivalentTo(node1, true, true, true);
      Node.newString(11, "Not declared as a constructor", 121, 1971);
      node0.isLabelName();
      node1.isScript();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      Node node0 = Node.newString(124, "\"Gg&5w", 101, (-213));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node0.isDefaultCase();
      Node node1 = new Node(47, node0, node0, node0, node0);
      node0.setOptionalArg(true);
      node0.toString();
      node1.cloneTree();
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      Node node0 = new Node(116);
      Node node1 = new Node((-2245), 36, 1024);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = node2.useSourceInfoFromForTree(node1);
      node3.getQualifiedName();
      node2.putIntProp(36, 3);
      node2.getInputId();
      node1.addSuppression("!?xGh^QD");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
      node3.toString();
      node3.isDebugger();
      node2.removeChild(node1);
      int int0 = 4194304;
      Node node4 = new Node(int0, node0, node1, node1, node0.MAX_COLUMN_NUMBER, node2.FLAG_GLOBAL_STATE_UNMODIFIED);
      node1.checkTreeEquals(node3);
      node4.getString();
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      Node node0 = new Node(116);
      Node node1 = new Node((-2245), 36, 1024);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = node2.useSourceInfoFromForTree(node1);
      node3.getQualifiedName();
      node2.putIntProp(36, 3);
      node1.addSuppression("!?xGh^QD");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
      node3.toString();
      node0.isDebugger();
      Node node4 = Node.newNumber((double) 52);
      Node node5 = new Node(56, node4, node4, node1, (-1940), 2767);
      node1.checkTreeEquals(node5);
      node2.getString();
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      Node node0 = Node.newString(124, "\"Gg&5w", 101, (-213));
      node0.isLabelName();
      node0.setString("taryvi-ea)`a|");
      Node node1 = new Node(52, 54, (-1286));
      node0.putIntProp(47, 101);
      node0.addSuppression("com.google.javasWriptAChino.Nodg$AncestorIterable");
      node0.isEmpty();
      node0.isScript();
      node1.cloneTree();
      node1.isTypeOf();
      node0.removeProp(57);
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = false;
      Node node0 = Node.newString("~6/", 125, 125);
      Node node1 = new Node((-2245));
      Node node2 = new Node(42, node1, node0, node0, 4864, 48);
      Node node3 = node2.copyInformationFrom(node0);
      node0.useSourceInfoIfMissingFromForTree(node3);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("jsdoc_info", node0, (JSType) null);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Node node4 = enumElementType0.getPropertyNode(enumType0.NOT_A_CLASS);
      node1.isEquivalentToShallow(node4);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node node5 = new Node(node1.VAR_ARGS_NAME, node4, node0, node4);
      node5.hasMoreThanOneChild();
      int int0 = null;
      try {  
      int0 = Node.FLAG_LOCAL_RESULTS;
      } catch(NullPointerException e) {}
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      Node node0 = new Node(108);
      Node node1 = Node.newString("P7guX^`C5JFZk>rwio%");
      node1.copyInformationFrom(node0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.getQualifiedName();
      node1.putIntProp(891, 1);
      node1.addSuppression("_D`{cm");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node2.toString();
      node2.isDebugger();
      Node node3 = Node.newNumber((double) 46);
      Node node4 = Node.newString(2, "D76w~1X)*J6#?m`", 54, 8);
      Node node5 = new Node(108, node3, node4, node4, 38, 0);
      Node.newNumber((double) 1);
      Node node6 = new Node(977, node4, node5, node3, node4);
      node4.getString();
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      Node node0 = Node.newString("K", 112, 112);
      Node node1 = Node.newString(0, "K", 4, 1);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      Node node4 = node2.useSourceInfoIfMissingFromForTree(node0);
      Node.extractLineno(43);
      node4.isQuotedString();
      Node node5 = new Node(52, node0, node2, 2, 30);
      node2.getJsDocBuilderForNode();
      node3.isOnlyModifiesThisCall();
      Node node6 = node5.cloneNode();
      node6.isScript();
      node3.isGetProp();
      node6.checkTreeEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = new Node((-651));
      node0.getQualifiedName();
      Node node1 = null;
      node0.addChildToFront((Node) null);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        node0.setWasEmptyNode(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      Node node0 = Node.newString(".");
      node0.isFromExterns();
      node0.isLabel();
      node0.isWith();
      node0.setChangeTime(4);
      Node node1 = Node.newString(38, ".", 32, 8);
      Node node2 = new Node(42, node1, node0, node0, 1364, 55);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node2);
      Object object0 = new Object();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(".", false);
      node_NodeMismatch0.equals(object0);
      node1.isUnscopedQualifiedName();
      node1.addChildToFront(node2);
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      Node node0 = Node.newString("h\"g&5w", 85, 85);
      node0.getQualifiedName();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-125);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = new Node(111, 8, 12);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.getJsDocBuilderForNode();
      Node node2 = node1.cloneNode();
      node1.isScript();
      node0.isGetProp();
      node2.isCast();
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node1.getAncestors();
      node1.isContinue();
      node0.addChildrenToFront(node1);
      node0.isFunction();
      node1.getIntProp(node0.POST_FLAG);
      node1.hasChild(node0);
      node0.isNull();
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      Node node0 = Node.newString(124, "\"Gg&5w", 101, (-213));
      node0.isLabel();
      node0.setString("taryvi-ea)`a|");
      Node node1 = new Node(52, 54, (-1286));
      Node node2 = node1.cloneTree();
      node0.putIntProp(47, 101);
      node0.addSuppression("\"Gg&5w");
      node0.isEmpty();
      node0.isScript();
      node1.isTypeOf();
      node1.addChildToBack(node0);
      Node node3 = node2.useSourceInfoFromForTree(node1);
      node3.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.getInputId();
      node0.getChangeTime();
      Node node1 = new Node(31, node0, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setThrows();
      node1.isNot();
      node0.mayMutateArguments();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.isVoid();
      node1.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node node0 = Node.newString(65535, "', '", 101, 65535);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2281));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags(47);
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      HashSet<String> hashSet0 = new HashSet<String>();
      node0.setDirectives(hashSet0);
      Node node1 = Node.newString("', '", (-1302), 57);
      node0.isCatch();
      node1.isCast();
      node0.isGetterDef();
      node1.isAssignAdd();
  }
}
