/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 03 04:58:11 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import com.google.javascript.rhino.jstype.TemplatizedType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "m";
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      node1.isLabelName();
      node1.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node1.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags5.setThrows();
      node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      Node node2 = Node.newString("", 0, 32);
      node2.setSideEffectFlags(node_SideEffectFlags3);
      int int0 = (-886);
      // Undeclared exception!
      try { 
        Node.newString(node1.IS_CONSTANT_NAME, string0, node2.LENGTH, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setAllFlags();
      Node.newString(128, "com.google.javascript.rhino.Node$StringNode");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(126);
      node_SideEffectFlags0.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesGlobalState();
      Charset.defaultCharset();
      node_SideEffectFlags0.setAllFlags();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newNumber(954.38674);
      node0.getString();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newNumber(1.2);
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setReturnsTainted();
      Node node1 = Node.newString(1, "");
      node1.isLocalResultCall();
      node0.setDouble(312.35374);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSType[] jSTypeArray0 = new JSType[0];
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.extractCharno((-1));
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.clearAllFlags();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = Node.newString((String) null, 673, 673);
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString("Z@5gkL0?6x");
      node0.getDouble();
      node0.removeFirstChild();
      // Undeclared exception!
      try { 
        node0.getSourceFileName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING Z@5gkL0?6x is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = Node.newString("expected one element but was: <");
      Node node1 = new Node(57, 43, 1);
      node1.isOnlyModifiesThisCall();
      node0.getChildBefore(node1);
      int int0 = 100;
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isLabelName();
      node0.getIntProp((-2267));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = Node.newString(2532, "STRING m\n", 2532, 2532);
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node.mergeLineCharNo(31, 3156);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newString(".$:");
      Node node1 = new Node(8, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node0.setSideEffectFlags(node_SideEffectFlags1);
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = new Node(350, 350, 350);
      boolean boolean0 = false;
      node0.setSideEffectFlags((-335));
      node0.setWasEmptyNode(boolean0);
      // Undeclared exception!
      try { 
        node0.getJsDocBuilderForNode();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 350
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newString("0W~ *}.3,O");
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      Node node0 = Node.newString(" W$");
      node0.isLocalResultCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      TreeSet<JSType> treeSet1 = new TreeSet<JSType>((SortedSet<JSType>) treeSet0);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet1);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      node0.addSuppression("7v6{f0e");
      node0.putIntProp(55, 0);
      Node node1 = Node.newString("a+>%/Qd2I9Q");
      boolean boolean0 = node0.isEquivalentToShallow(node1);
      node1.getChangeTime();
      node1.getSourcePosition();
      node0.isTrue();
      node0.detachFromParent();
      boolean boolean1 = true;
      JSDocInfo jSDocInfo0 = new JSDocInfo(boolean1);
      jSDocInfo0.setNoShadow(boolean0);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      // Undeclared exception!
      try { 
        node2.isQualifiedName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node.extractCharno(41);
      Node node0 = Node.newString(41, "*hymgheC%}N%IVMh");
      Node node1 = new Node(22);
      node1.setIsSyntheticBlock(true);
      node1.toStringTree();
      node0.addChildrenAfter(node1, node1);
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      Node node2 = new Node(16, node0, 4, 16);
      node2.toStringTree();
      Node node3 = Node.newString((-3696), "com.google.common.collect.AbstractMapBasedMultimap");
      node1.setSourceEncodedPositionForTree((-1942));
      Node node4 = Node.newString("VwJG06D+2*/aT{yo}C", 40, 52);
      Node node5 = Node.newNumber(0.0, 38, 51);
      node5.setWasEmptyNode(false);
      node3.getChangeTime();
      node2.isSetterDef();
      node4.isCatch();
      node1.putBooleanProp(1441, true);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node1.setJSDocInfo(jSDocInfo0);
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.iterator();
      node5.putBooleanProp(57, false);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newString(0, "quoted", 1333, 1333);
      Node node1 = Node.newNumber(1023.113694857361, 147, 153);
      Node node2 = new Node(407, node0, node1, 3319, (-1372));
      node2.getBooleanProp((-1372));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node(50);
      node0.getAncestors();
      Node node1 = new Node(38, node0);
      node1.setWasEmptyNode(true);
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.children();
      Node node1 = new Node((-596), node0, node0, node0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node0.setChangeTime(1350);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer2);
      node_AncestorIterable0.forEach(consumer1);
      node_AncestorIterable0.forEach(consumer0);
      Consumer<Object> consumer3 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer3);
      Node node2 = Node.newString(0, ">0{NRKl17E2b0I\u0007R", (-638), 42);
      node_AncestorIterable0.spliterator();
      node_AncestorIterable0.iterator();
      node_AncestorIterable0.iterator();
      node_AncestorIterable0.iterator();
      node2.toStringTree();
      node1.isFunction();
      node2.getIndexOfChild(node0);
      int int0 = 103;
      node0.setSourceEncodedPositionForTree(int0);
      node2.isWhile();
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newString(".$:");
      Node node1 = new Node(8, node0, node0);
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node0.isIf();
      node1.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isLabelName();
      node0.isEquivalentToShallow(node0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.setSideEffectFlags(node_SideEffectFlags0);
      // Undeclared exception!
      try { 
        node0.isIf();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createParameters(jSTypeArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newNumber(1156.77);
      Node node1 = new Node((-1608), node0, node0, node0, 256, 57);
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(105);
      node0.putBooleanProp(105, true);
      node0.isComma();
      node0.getAncestor(105);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newString((-5), "Z@5gkL0?6x");
      node0.setChangeTime((-5));
      Node.newString("~", 42, 31);
      node0.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newNumber(3479.447109285445, (-536870912), (-536870912));
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node0.getAncestors();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      node0.wasEmptyNode();
      node1.isString();
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newString(".$:");
      Node node1 = new Node(8, node0, node0);
      Node node2 = Node.newString(48, ": ", (-1181), 1304);
      node1.isOr();
      node1.isNE();
      node2.children();
      node2.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 37;
      Node[] nodeArray0 = new Node[7];
      Node node0 = Node.newNumber(4546.6340607343, 37, 37);
      Node node1 = new Node(1073741823, node0, node0, node0);
      Node node2 = new Node(37, node1, node0, node1, (-1344), 50);
      int int1 = 0;
      Node node3 = new Node(int0, node2, node1, int1, node1.IS_NAMESPACE);
      Node node4 = null;
      try {
        node4 = new Node(int0, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("GG^PAq%");
      Node node1 = new Node(2, node0);
      node1.isLabelName();
      node1.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags(node0.POST_FLAG);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 98;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[6];
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("NO_TYPE");
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, jSTypeArray0);
      TemplateTypeMap templateTypeMap0 = templatizedType0.getTemplateTypeMap();
      // Undeclared exception!
      try { 
        templateTypeMap0.getTemplateTypeKeyByName(templatizedType0.EMPTY_TYPE_COMPONENT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newNumber(5682.3960465734835);
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newString(1826, "^by?]B+~m8$)xH", 1826, 1826);
      node0.setJSDocInfo((JSDocInfo) null);
      node0.children();
      Node node1 = Node.newString(46, "t9VxEwGI8Wbl*");
      node1.isQualifiedName();
      node1.children();
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = Node.newString("G,kirJ5", 40, 1826);
      Node node4 = node0.copyInformationFromForTree(node3);
      node1.isEquivalentToShallow(node3);
      node4.isEquivalentToShallow(node1);
      node2.setString("-=6S");
      node3.wasEmptyNode();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node node5 = node2.useSourceInfoIfMissingFrom(node4);
      node3.getInputId();
      node2.getJSDocInfo();
      Node.newString("msg.jsdoc.function.thisnotobject");
      node2.isFunction();
      node5.getLineno();
      node5.isCast();
      node3.setType(858);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newString(1093, "d^]`uR?p5NGg}54}", 1093, 93);
      Node node1 = Node.newString("d^]`uR?p5NGg}54}", (-880), 15);
      node0.copyInformationFromForTree(node1);
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newString("x9D96q");
      node0.setType(2331);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32);
      node0.isQualifiedName();
      node0.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node(29, (-1234), (-475));
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isLabelName();
      node0.isEquivalentToShallow(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2829);
      node0.isQualifiedName();
      node0.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = new Node((-2914), (-2146), (-2914));
      Node node1 = new Node(67, node0, node0, node0, node0, 2, 39);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newNumber(954.38674);
      node0.addSuppression("T!z/fP&N-0");
      node0.getStaticSourceFile();
      node0.getString();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newString(".$:");
      Node node1 = new Node(8, node0, node0);
      node0.wasEmptyNode();
      node1.isOr();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = new Node((-2728), 35, 892);
      node0.getInputId();
      node0.setInputId((InputId) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newString("'}==L", 372, 372);
      node0.isHook();
      node0.getParent();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newString(4, "Z@5gkL0?6x");
      node0.setString("second new child has existing parent");
      InputId inputId0 = new InputId("Z@5gkL0?6x");
      Node.newString(" is not a number node");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = new Node(130, 754, 130);
      node0.getDouble();
      node0.removeFirstChild();
      // Undeclared exception!
      try { 
        node0.getSourceFileName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // EXPR_RESULT 754 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newString(".$:");
      Node node1 = new Node(32, node0, node0, node0, node0, 39, 1);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = Node.newString(48, ": ", (-1181), 1304);
      node1.isOr();
      node2.isNE();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = Node.newString("Number node not created with Node.newNumber", 48, 46);
      Node node1 = Node.newNumber(1.0, 39, 85);
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.JSTypeRegistry");
      node0.getBooleanProp(49);
      node0.setType(40);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString(42, "2N&PLIU8)6vOu", 42, (-1181));
      nodeArray0[0] = node0;
      node0.isQualifiedName();
      node0.isComma();
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = new Node(54, node0, node0, node0, 57, 15);
      node1.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1570);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node1.copyInformationFromForTree(node0);
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node0.getSourceFileName();
      node1.isIn();
      Node node2 = node1.copyInformationFrom(node0);
      node0.toString(false, false, false);
      node1.isOr();
      node1.setWasEmptyNode(true);
      node0.isVar();
      node2.isEquivalentTo(node1, false, true, false);
      node0.isEmpty();
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newString(".$:");
      Node node1 = new Node(49, node0, 3268, 53);
      node1.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = new Node((-2174), node0, node0, node0, node0, 3455, 55);
      int int0 = 2850;
      Node node3 = new Node(int0, node1, node0);
      node0.addChildrenAfter(node1, node1);
      Node node4 = new Node(node3.QUOTED_PROP, node3, node3, node3.QUOTED_PROP, node0.VAR_ARGS_NAME);
      int int1 = 20;
      // Undeclared exception!
      try { 
        node4.getIntProp(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(1, "1WCcnS(c{N7ZK", (-2219), 0);
      node1.putBooleanProp(57, false);
      Locale locale0 = new Locale("", "    ");
      locale0.getDisplayName();
      locale0.getDisplayName((Locale) null);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      node0.getParent();
      boolean boolean0 = true;
      locale0.getExtensionKeys();
      boolean boolean1 = true;
      boolean boolean2 = true;
      int int0 = 0;
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      node0.setVarArgs(false);
      node0.isAssignAdd();
      node0.isBlock();
      Node.newString(39, "Object#Element");
      node0.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = new Node((-2912), (-2912), (-2912));
      Node node1 = Node.newNumber((double) 40);
      node1.putIntProp(2, 50);
      Node node2 = new Node((-323), node0, node0, node1);
      node2.replaceChild(node1, node1);
      Node node3 = new Node(node1.SYNTHETIC_BLOCK_PROP, node2, node1, node1, node1);
      // Undeclared exception!
      try { 
        node2.checkTreeEqualsImpl(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newString(3260, " j   ");
      Node node1 = new Node(43, node0, 30, 30);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.setSourceEncodedPosition(57);
      node0.isTrue();
      Node node3 = Node.newString(55, " j   ", 8, 39);
      Node node4 = Node.newNumber(249.76167364, 29, 128);
      node0.replaceChild(node3, node2);
      node2.isQuotedString();
      Node node5 = null;
      node4.checkTreeTypeAwareEqualsImpl(node5);
      // Undeclared exception!
      try { 
        node1.srcref(node5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(8, node0, node0, node0, (-1332), 56);
      node0.replaceChild(node1, node1);
      node0.isQuotedString();
      Node node2 = null;
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newString((String) null);
      // Undeclared exception!
      try { 
        node0.getLastChild();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 0;
      Node node0 = Node.newString(0, (String) null);
      Node node1 = null;
      try {
        node1 = new Node(int0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newString(1703, (String) null);
      node0.isTypeOf();
      SimpleErrorReporter simpleErrorReporter0 = null;
      try {
        simpleErrorReporter0 = new SimpleErrorReporter();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 1136;
      Node node0 = Node.newNumber((-3024.6744), 1136, 1136);
      node0.setWasEmptyNode(false);
      Node node1 = new Node(1);
      node0.replaceChild(node1, node1);
      node0.getProp(int0);
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newNumber(312.35374);
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newNumber((double) 2, 46, 49);
      node1.hasChildren();
      node1.isOptionalArg();
      Node node2 = node0.cloneTree();
      node0.setSourceEncodedPosition(0);
      node1.setChangeTime(57);
      node0.hasChild(node2);
      node2.getLength();
      node2.addChildToBack(node0);
      node2.toString();
      node0.setSourceEncodedPosition(31);
      node0.isDelProp();
      node0.isCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node0.isEquivalentTo(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesThis();
      node1.setWasEmptyNode(false);
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      Node node3 = new Node(16, node1, node2, node1, node2, 4095, 3);
      node3.removeChild(node0);
      node1.isFromExterns();
      node3.toStringTree();
      node2.isDec();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node.extractLineno(40);
      Node node0 = new Node(16777216, 0, 0);
      Node node1 = new Node((-2587), node0, node0);
      node1.addChildBefore(node0, node0);
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        node1.toString(boolean0, boolean1, boolean2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newString(1618, "");
      Node node1 = new Node(1618, node0, node0);
      node1.isContinue();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node.extractLineno(40);
      Node node0 = new Node(16777216);
      Node node1 = new Node(0, node0, node0);
      node1.addChildBefore(node0, node0);
      int int0 = 41;
      Node node2 = null;
      try {
        node2 = new Node(node1.SIDE_EFFECTS_ALL, node1, node0, node0, int0, node1.DIRECT_EVAL);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(130, 754, 8297);
      node0.isOnlyModifiesThisCall();
      node0.isLabelName();
      node0.isVar();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = jSDocInfo0.getAssociatedNode();
      node0.addChildBefore((Node) null, (Node) null);
      node1.isComma();
      node1.getChildCount();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicates");
      Node node1 = null;
      node0.addChildrenAfter((Node) null, (Node) null);
      // Undeclared exception!
      try { 
        node0.isIn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newString("opt_arg");
      Node node1 = null;
      node0.addChildrenAfter((Node) null, (Node) null);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node.extractCharno(41);
      Node node0 = Node.newString(41, "*hymgheC%}N%IVMh");
      Node node1 = new Node(22);
      node0.addChildrenAfter(node1, node1);
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 1885;
      Node node0 = new Node(1885, (Node) null);
      ErrorReporter errorReporter0 = null;
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      jSTypeRegistry0.getType("Object#Key");
      Node node0 = null;
      Node node1 = new Node(1, (Node) null);
      node1.checkTreeEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newNumber(954.38674);
      node0.siblings();
      node0.isTrue();
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isOnlyModifiesThisCall();
      node0.isLocalResultCall();
      Node node1 = new Node(50, node0);
      node1.setLength(47);
      node1.isTrue();
      node0.wasEmptyNode();
      node1.removeChildAfter(node0);
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = new Node(16, 155, 16);
      Node node1 = new Node(16, node0, (-726), 122910);
      node1.isIn();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = Node.newString(2532, "STRING m\n", 2532, 2532);
      node0.isLocalResultCall();
      node0.isInc();
      int int0 = 29;
      Node.extractCharno(32);
      node0.setDouble(32);
      node0.setLineno(int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newString(3267, "com.google.common.collect.AbstractMapBasedMultimap$KeySet");
      Node node1 = new Node(43, node0, 30, 30);
      node1.setSourceEncodedPosition(57);
      node1.isTrue();
      Node node2 = new Node(30);
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node2.isVar();
      node2.removeChildAfter(node0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = (-1532);
      Node[] nodeArray0 = new Node[3];
      Node.newString(0, "8bbttRPh3^A)$_G=5]");
      Node node0 = Node.newNumber(0.0, (-1532), 0);
      Node node1 = new Node(0, node0, node0, node0);
      Node node2 = new Node((-1532), node1, node0, node0, node0, 2115, 37);
      nodeArray0[0] = node2;
      node1.setCharno(node2.INCRDECR_PROP);
      Node node3 = new Node(node0.STATIC_SOURCE_FILE, node2, node2, node1.COLUMN_MASK, node2.DIRECTIVES);
      nodeArray0[1] = node3;
      Node[] nodeArray1 = new Node[2];
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 21;
      Node node0 = Node.newString(21, " CW'", 513, 21);
      Node node1 = new Node(21, node0, node0, node0, 48, (-1541));
      Node node2 = new Node(21, node1, node0, node1, node1, (-6024), 4);
      Node node3 = new Node(node1.FLAG_ARGUMENTS_UNMODIFIED);
      int int1 = 21;
      Node node4 = new Node(int0, node2, node3, node1.IS_CONSTANT_NAME, int1);
      // Undeclared exception!
      try { 
        node4.removeFirstChild();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-4636), 114, (-985));
      Node node1 = new Node((-4636), node0, node0, node0, node0, 12, 55);
      node1.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0);
      Node node1 = Node.newString(2349, "Z@5gkL0?6x");
      node1.setLineno((-74));
      node1.getBooleanProp(48);
      node0.isTypeOf();
      node0.isOr();
      Node node2 = node0.getLastSibling();
      node2.isLocalResultCall();
      node0.isInc();
      Node.extractCharno(57);
      node1.setDouble(50);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = new Node(105);
      Node node1 = new Node(30, node0, node0, 56, 46);
      node0.isInc();
      node1.addChildToFront(node0);
      // Undeclared exception!
      try { 
        Node.extractCharno(node1.INCRDECR_PROP);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = new Node((-1391), (-1391), 16384);
      Node node1 = Node.newString("fL.y`GA,?");
      node0.srcref(node1);
      node0.getStaticSourceFile();
      node0.getCharno();
      node0.isGetElem();
      node0.addChildrenToFront(node1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node(105);
      node0.removeProp(108);
      node0.isUnscopedQualifiedName();
      node0.setLineno(105);
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node.extractCharno((-1210));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node.newString(155, "2N&PLIU8)6vOu", 30, 155);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(524288, nodeArray0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("2N&PLIU8)6vOu");
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newString(154, "iF4", 8388608, 8388608);
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newNumber((-1991.93769507528));
      node0.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1620));
      node0.isTypeOf();
      Node node1 = node0.getLastSibling();
      node1.isLocalResultCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.removeFirstChild();
      node0.setQuotedString();
      node1.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newString("   ");
      node0.isFalse();
      node0.setDouble(2208.2917417075605);
      node0.detachChildren();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      Node node1 = new Node(42, node0, node0, 8, 20);
      Node node2 = new Node(42, node0, node1, node0, 125, 55);
      node2.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node((-3991), (Node) null, (Node) null, (Node) null, (Node) null, (-3991), 38);
      Node node1 = node0.cloneTree();
      node1.getAncestor(node0.IS_CONSTANT_NAME);
      node1.removeChildAfter(node0);
      // Undeclared exception!
      try { 
        node1.getBooleanProp(node0.COLUMN_MASK);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newString("Object#Key");
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      boolean boolean0 = false;
      node1.setVarArgs(false);
      node2.useSourceInfoIfMissingFrom(node1);
      Node node3 = node1.cloneTree();
      node3.isNoSideEffectsCall();
      node1.getAncestors();
      // Undeclared exception!
      try { 
        node3.replaceChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = new Node(50);
      node0.cloneTree();
      node0.isTrue();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isOnlyModifiesThisCall();
      node0.isLocalResultCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      node0.setVarArgs(false);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("m");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 7;
      Node node0 = Node.newString("oe5Pz4<p/Fwm1IVc");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node2 = new Node(43, node0, node0, node0, node1, 1154, 3951);
      nodeArray0[2] = node2;
      Node node3 = new Node(47, node0);
      nodeArray0[3] = node3;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 105;
      Node node0 = new Node(105);
      node0.addChildToFront(node0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node.extractCharno(32);
      node0.isCast();
      node0.addSuppression("/&qUa#nD:^!h&M");
      Node node1 = new Node(8, node0);
      // Undeclared exception!
      try { 
        node1.setType(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newNumber((-1830.202587366));
      Node node1 = new Node(0, node0, 47, 4095);
      node1.setDouble((-1373.10912225));
      node0.addChildToBack(node1);
      node1.setSourceEncodedPosition(node0.MAX_COLUMN_NUMBER);
      node1.addChildrenToFront(node0);
      // Undeclared exception!
      try { 
        node0.isDo();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      int int0 = Node.CHANGE_TIME;
      node0.addChildrenAfter(node0, node0);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = Node.newString(1059, "Object#Element");
      Node node2 = new Node(37, node0, node0);
      Node node3 = new Node(32, node2, node1, node0, node2);
      node3.isContinue();
      node2.isGetProp();
      // Undeclared exception!
      try { 
        node0.isCatch();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = (-15);
      int int1 = 1;
      Node[] nodeArray0 = new Node[6];
      Node node0 = new Node(0, 1024, 1024);
      Node node1 = new Node(3000, node0, node0, node0, node0);
      nodeArray0[0] = node1;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) null);
      nodeArray0[1] = node2;
      JSType[] jSTypeArray0 = new JSType[3];
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      jSTypeArray0[0] = (JSType) functionType0;
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newNumber(312.35374);
      node0.getJsDocBuilderForNode();
      Node node1 = new Node((-1031), node0, node0, node0, node0, 50, (-1668));
      node1.hasChildren();
      node1.isOptionalArg();
      Node node2 = node0.cloneTree();
      node0.setSourceEncodedPosition(0);
      node1.setChangeTime(57);
      node0.hasChild(node2);
      node2.getLength();
      node2.getSideEffectFlags();
      node2.addChildToBack(node0);
      node1.isRegExp();
      node2.toString();
      node0.setSourceEncodedPosition(node1.SIDE_EFFECTS_FLAGS_MASK);
      // Undeclared exception!
      try { 
        node0.isDelProp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      node1.isLabelName();
      node1.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node2 = new Node(262144, 55, 4095);
      node0.isThrow();
      node2.setSourceEncodedPosition(37);
      Node.newString("", 4, 1);
      Node node3 = new Node((-223), node0, 15, 46);
      node3.addChildToBack(node0);
      node0.isRegExp();
      node1.toString();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newString("4");
      node0.mayMutateArguments();
      node0.getLength();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isWhile();
      node0.setSourceEncodedPosition(8);
      Node node1 = Node.newString("{`ofNd,");
      node0.getDouble();
      node1.removeFirstChild();
      // Undeclared exception!
      try { 
        node1.getSourceFileName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newNumber(954.38674);
      Iterable<Node> iterable0 = new LinkedList<Node>();
      node0.isOptionalArg();
      Node node1 = new Node(85, node0, node0, node0, (-865), (-534));
      node0.addChildrenToBack(node1);
      node0.isTrue();
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isParamList();
      node0.isLocalResultCall();
      Node node1 = new Node(43, node0, node0, 39, 53);
      node0.hasChild(node1);
      node1.isTypeOf();
      Node node2 = new Node(119, node0, node1);
      node2.isOr();
      node1.getLastSibling();
      node0.isLocalResultCall();
      // Undeclared exception!
      try { 
        node0.isInc();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isOnlyModifiesThisCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      node0.hasMoreThanOneChild();
      node0.isTypeOf();
      Node node1 = node0.getLastSibling();
      node0.addChildToBack(node1);
      node0.putBooleanProp(51, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.hasChildren();
      String string0 = node1.toString();
      Node.newString(node0.FLAG_ARGUMENTS_UNMODIFIED, string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      node1.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node1.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags5.setThrows();
      node0.isEquivalentToShallow(node1);
      node1.isEquivalentToShallow(node0);
      node0.setString("");
      node0.wasEmptyNode();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.getInputId();
      node0.getJSDocInfo();
      Node node3 = Node.newString("");
      node3.hasChildren();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) null);
      node4.getLineno();
      node1.isCast();
      node1.setType(node0.COLUMN_BITS);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = new Node(0, 0, 27);
      node0.setCharno(0);
      node0.setWasEmptyNode(true);
      node0.isSetterDef();
      node0.isCatch();
      node0.putBooleanProp((-1443), false);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$ObjectPropListItem", (-2130), (-2130));
      node0.addSuppression("com.google.javascript.rhino.Node$ObjectPropListItem");
      Node node1 = new Node(0, node0, node0, node0, node0, 536870912, (-2130));
      node0.srcref(node1);
      node0.isCatch();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = new Node(52);
      node0.isWhile();
      Node node1 = new Node(43);
      node1.isSetterDef();
      Node.newString("y|h?Ka");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.setCharno(0);
      node0.isSetterDef();
      node0.isCatch();
      node0.putBooleanProp((-1443), false);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.getAncestors();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newNumber((-4702.56822), 2301, 2301);
      node0.getSourcePosition();
      node0.getSourceOffset();
      Node node1 = new Node(29, (Node[]) null);
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = Node.newNumber(3027.9539);
      Node node1 = Node.newString(49, "T(!J?GYBM&(", 50, 37);
      Node node2 = node1.useSourceInfoFrom(node0);
      node0.isEquivalentToShallow(node2);
      node0.isEquivalentTo(node1);
      node1.setSideEffectFlags(111);
      double double0 = 1051.11;
      node2.setDouble(double0);
      // Undeclared exception!
      try { 
        node2.detachChildren();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got THROW
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      UnaryOperator.identity();
      Node.extractCharno(29);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.detachFromParent();
      node0.isParamList();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newNumber((-1991.93769507528));
      node0.isCast();
      Node node1 = new Node((-40), node0, 130, 8297);
      node1.checkTreeEqualsImpl(node0);
      Node node2 = new Node(12, node1, node1, node1, node1, 42, 47);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.clearSideEffectFlags();
      node1.detachFromParent();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags4.setAllFlags();
      Node node3 = new Node(4095, node2, node1);
      node3.isIf();
      node0.isObjectLit();
      node1.isNew();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newNumber((-1991.93769507528));
      node0.isCast();
      Node node1 = new Node(24, node0, node0, node0, 42, 4095);
      Node node2 = new Node(29, node1, node0, node1, (-1349), 1);
      node2.addChildrenToBack(node0);
      node2.isTrue();
      node1.isGetElem();
      // Undeclared exception!
      try { 
        node2.isDelProp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newString("", 3000, 3000);
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node(4095, node0, node0, node0, 1, 725);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.addSuppression("");
      Node node3 = new Node(50, (Node[]) null);
      node2.checkTreeEquals(node1);
      node0.replaceChild(node3, node3);
      node0.isGetProp();
      int int0 = 0;
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newString(".$:");
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node(8, node0, node0);
      node0.wasEmptyNode();
      node1.isOr();
      node0.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 44;
      Node node0 = new Node(44, (Node[]) null);
      Node node1 = null;
      try {
        node1 = new Node(int0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "    ";
      Node node0 = Node.newString(0, "    ");
      Node node1 = Node.newNumber((double) 53);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.setSourceEncodedPosition(57);
      node0.mayMutateGlobalStateOrThrow();
      node1.removeChildAfter(node0);
      double double0 = 249.76167364;
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newString(3260, " j   ");
      Node node1 = new Node(43, node0, 30, 30);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = new Node(36);
      node2.putBooleanProp(119, true);
      node2.isComma();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(105, 105, 105);
      Node node1 = new Node(30, node0, node0, 56, 46);
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isInc();
      node1.addChildToFront(node0);
      Node.extractCharno(node1.INCRDECR_PROP);
      // Undeclared exception!
      try { 
        node0.setDouble(node1.FLAG_THIS_UNMODIFIED);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newString(1826, "^by?]B+~m8$)xH", 1826, 1826);
      Node node1 = node0.setJSDocInfo((JSDocInfo) null);
      node0.children();
      node0.setSourceEncodedPosition(30);
      node1.setChangeTime((-220));
      node1.hasChild(node0);
      node1.getLength();
      node0.getSideEffectFlags();
      node1.addChildToBack(node0);
      Node node2 = new Node(0, node1, node1, node0, 524288, 37);
      node2.isRegExp();
      node2.toString();
      node1.setSourceEncodedPosition(node2.SIDE_EFFECTS_FLAGS_MASK);
      node1.isDelProp();
      node2.isCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node1.INPUT_ID);
      // Undeclared exception!
      try { 
        node2.cloneTree();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isOnlyModifiesThisCall();
      node0.isLocalResultCall();
      node0.cloneNode();
      Node node1 = new Node(50, node0);
      node1.setLength(47);
      node1.isTrue();
      node0.wasEmptyNode();
      node1.removeChildAfter(node0);
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.setDirectives((Set<String>) null);
      node0.isCast();
      node0.isVar();
      node0.addSuppression("Object#Key");
      node0.setType(113);
      node_SideEffectFlags0.setAllFlags();
      node0.hasChildren();
      node0.isObjectLit();
      node0.isBreak();
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newString(1826, "^by?]B+~m8$)xH", 1826, 1826);
      node0.setJSDocInfo((JSDocInfo) null);
      node0.children();
      Node node1 = Node.newString(46, "^by?]B+~m8$)xH");
      node1.children();
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = Node.newString("G,kirJ5", 40, 1826);
      node3.mayMutateArguments();
      Node node4 = node0.copyInformationFromForTree(node3);
      node1.isEquivalentToShallow(node3);
      node4.isEquivalentToShallow(node1);
      node2.setString("-=6S");
      node3.wasEmptyNode();
      node2.checkTreeEqualsImpl(node1);
      Node node5 = node2.useSourceInfoIfMissingFrom(node4);
      node3.getInputId();
      node2.getJSDocInfo();
      Node.newString("msg.jsdoc.function.thisnotobject");
      node2.isFunction();
      node5.getLineno();
      node5.isCast();
      node3.setType(858);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newNumber((-2889.2908224614));
      node1.isSyntheticBlock();
      node0.isNull();
      node1.isVarArgs();
      node0.getBooleanProp(5791);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = Node.newString(1618, "");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType0, templateType0, templateType0);
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Iterable<? extends JSType>) immutableList0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList1);
      node0.toStringTree();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        node1.setOptionalArg(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1618
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node0 = Node.newString(110, "m");
      node0.isDo();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      node1.isLabelName();
      node1.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node1.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags5.setThrows();
      node_SideEffectFlags4.setMutatesGlobalState();
      boolean boolean0 = true;
      node1.setVarArgs(true);
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.clearAllFlags();
      node_SideEffectFlags7.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags3.clearSideEffectFlags();
      node1.setWasEmptyNode(false);
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      Node node2 = new Node(88, node0, node0, node0, node0, 2, (-1953));
      node1.removeChild(node0);
      node1.isFromExterns();
      node2.isAssign();
      node1.isLocalResultCall();
      node_SideEffectFlags0.setThrows();
      JSDocInfo jSDocInfo0 = null;
      try {
        jSDocInfo0 = new JSDocInfo(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = new Node(50);
      boolean boolean0 = node0.isOnlyModifiesThisCall();
      node0.isLocalResultCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      node0.removeChild((Node) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo(boolean0);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node0.getAncestors();
      Node.AncestorIterable node_AncestorIterable0 = null;
      try {
        node_AncestorIterable0 = new Node.AncestorIterable(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newNumber(312.35374);
      node0.getJsDocBuilderForNode();
      Node node1 = new Node((-1031), node0, node0, node0, node0, 50, (-1668));
      node1.hasChildren();
      node1.isDelProp();
      Node node2 = node0.cloneTree();
      node0.setSourceEncodedPosition(0);
      node1.setChangeTime(57);
      node0.hasChild(node2);
      node2.getLength();
      node2.getSideEffectFlags();
      node2.addChildToBack(node0);
      node1.isRegExp();
      node2.toString();
      node0.setSourceEncodedPosition(node1.SIDE_EFFECTS_FLAGS_MASK);
      // Undeclared exception!
      try { 
        node0.isDelProp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = new Node(8297);
      node0.putBooleanProp(5198, true);
      node0.isString();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isFor();
      node0.getType();
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = new Node(0, 0, 27);
      node0.setCharno(0);
      node0.setWasEmptyNode(true);
      node0.getChangeTime();
      node0.isSetterDef();
      node0.isCatch();
      node0.getProp(704);
      node0.putBooleanProp((-1443), false);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      node1.putBooleanProp(1, false);
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = new Node(1201, node1);
      node2.setLineno(4);
      node2.getBooleanProp(54);
      node0.isTypeOf();
      node1.isOr();
      Node node3 = node0.getLastSibling();
      node0.isLocalResultCall();
      node2.isInc();
      Node.extractCharno(29);
      node3.setDouble(418.461);
      node3.isNE();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isEquivalentToShallow(node0);
      node0.setDouble(0.0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2829);
      node0.isQualifiedName();
      node0.getSourceFileName();
      node0.getNext();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = Node.newNumber(312.35374);
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newNumber((double) 2, 46, 49);
      node1.hasChildren();
      node1.isOptionalArg();
      Node node2 = node0.cloneTree();
      node0.setSourceEncodedPosition(0);
      node1.setChangeTime(57);
      node0.hasChild(node2);
      node2.getLength();
      node2.addChildToBack(node0);
      node1.isRegExp();
      node2.toString();
      node0.setSourceEncodedPosition(31);
      node0.isDelProp();
      node0.isCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesGlobalState();
      node0.toString(false, false, true);
      node2.isOr();
      node1.setWasEmptyNode(true);
      node1.cloneTree();
      Node node3 = new Node(49, node1, node2, 15, 46);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(15);
      node0.toString(false, true, false);
      String string0 = "I1(pS?FnOdEvG2~W@:t";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      node0.appendStringTree(mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = new Node(105);
      node0.addChildToFront(node0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node.extractCharno(32);
      String string0 = node0.toString(true, false, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      node0.appendStringTree(mockPrintWriter0);
      Node node1 = node0.removeFirstChild();
      node1.getSourceFileName();
      node1.isVar();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = Node.newString(".$:");
      Node node1 = new Node(8, node0, node0);
      node0.wasEmptyNode();
      Node node2 = Node.newString(".$:", 29, 2659);
      Node.newString(".$:");
      node1.isRegExp();
      node2.isLabel();
      node1.toString();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = new Node((-850));
      node0.isAdd();
      node0.isCall();
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0);
      Node node1 = Node.newString(2349, "Z@5gkL0?6x");
      node1.setLineno((-74));
      node1.getBooleanProp(48);
      node0.isTypeOf();
      node0.isOr();
      Node node2 = node0.getLastSibling();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node3.isEquivalentTo(node1, true, false, true);
      node1.setDouble(37);
      String string0 = "xF0Idc:JN7";
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      node2.setStaticSourceFile(simpleSourceFile0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newString("optgarg");
      Node node1 = new Node(16, node0, node0, node0);
      node1.srcref(node0);
      node0.removeChildren();
      node0.detachChildren();
      node0.getIntProp(175);
      node1.isAssign();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = new Node(122);
      node0.isWhile();
      Node node1 = new Node((-850));
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node1.isStringKey();
      node1.isAdd();
      node1.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newString(1826, "^by?]B+~m8$)xH", 1826, 1826);
      Node node1 = node0.setJSDocInfo((JSDocInfo) null);
      node0.children();
      Node node2 = Node.newString(46, "t9VxEwGI8Wbl*");
      node2.isQualifiedName();
      node2.children();
      Node node3 = node0.clonePropsFrom(node2);
      Node node4 = Node.newString("G,kirJ5", 40, 1826);
      Node node5 = node0.copyInformationFromForTree(node4);
      node3.srcrefTree(node1);
      node2.isEquivalentToShallow(node4);
      node5.isEquivalentToShallow(node2);
      node3.setString("-=6S");
      node4.wasEmptyNode();
      node2.checkTreeTypeAwareEqualsImpl(node0);
      Node node6 = node3.useSourceInfoIfMissingFrom(node5);
      node4.getInputId();
      node3.getJSDocInfo();
      Node.newString("msg.jsdoc.function.thisnotobject");
      node3.isFunction();
      node6.getLineno();
      node6.isCast();
      node4.setType(858);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isOnlyModifiesThisCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      Node node1 = new Node(47, (-74), 155);
      node0.isThrow();
      Node node2 = Node.newString("4", 39, 50);
      node2.getLength();
      Node node3 = new Node(55, node2, 4095, 39);
      Node node4 = Node.newString(57, "4");
      node0.addChildToBack(node4);
      node1.isRegExp();
      node4.toString();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isOnlyModifiesThisCall();
      node0.isLocalResultCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      Node node1 = new Node(47, (-74), 155);
      node0.hasChild(node1);
      Node node2 = Node.newString("4");
      node2.getLength();
      Node node3 = new Node(55, node2, 4095, 39);
      node3.getSideEffectFlags();
      Node node4 = Node.newString(57, "4");
      node0.addChildToBack(node4);
      node1.isRegExp();
      node4.toString();
      node3.setSourceEncodedPosition(node0.MAX_COLUMN_NUMBER);
      node4.isDelProp();
      node0.isCall();
      int int0 = (-1439);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(int0);
      node_SideEffectFlags0.setMutatesArguments();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setMutatesGlobalState();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 57
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = Node.newString(1826, "^by?]B+~m8$)xH", 1826, 1826);
      node0.setJSDocInfo((JSDocInfo) null);
      node0.children();
      Node node1 = Node.newString(46, "t9VxEwGI8Wbl*");
      node1.isQualifiedName();
      node1.children();
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = Node.newString("G,kirJ5", 40, 1826);
      Node node4 = node0.copyInformationFromForTree(node3);
      node1.isEquivalentToShallow(node3);
      node4.isEquivalentToShallow(node1);
      node2.setString("-=6S");
      node3.wasEmptyNode();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node node5 = node2.useSourceInfoIfMissingFrom(node4);
      node3.getInputId();
      node2.getJSDocInfo();
      Node node6 = Node.newString("msg.jsdoc.function.thisnotobject");
      Object object0 = new Object();
      node1.putProp(52, object0);
      node6.isDebugger();
      node5.copyInformationFrom(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(15);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setMutatesArguments();
      Node node7 = Node.newString(2, "G,kirJ5");
      node7.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = new Node(105);
      node0.isString();
      node0.isFor();
      node0.isDebugger();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = new Node((-1364), 2519, 2519);
      Node node1 = new Node(8, node0, node0, node0, node0, 56, 46);
      node1.setQuotedString();
      node0.getSourceOffset();
      node0.srcrefTree(node1);
      // Undeclared exception!
      try { 
        node0.getIntProp(node1.LENGTH);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      List<JSType> list0 = null;
      int int0 = 3366;
      Node[] nodeArray0 = new Node[6];
      JSType[] jSTypeArray0 = new JSType[9];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      jSTypeRegistry0.getType("]y[P]xl5:x/lpqcWu");
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, jSTypeArray0);
      JSType jSType0 = modificationVisitor0.caseFunctionType(functionType0);
      jSTypeArray0[0] = jSType0;
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[15];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
      // Undeclared exception!
      try { 
        modificationVisitor0.caseFunctionType(functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ModificationVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = new Node(63, 51, (-735));
      Node node1 = new Node((-1332), node0, node0, 39, 1002);
      node1.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = Node.newNumber((double) 40);
      Node node1 = new Node((-3140), node0);
      Node node2 = new Node(40, node1, 30, 2);
      node1.type = 54;
      node2.getInputId();
      node2.isOnlyModifiesThisCall();
      node2.children();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newNumber(954.38674);
      node0.siblings();
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = new Node(112, 112, (-977));
      node0.getJSType();
      Node node1 = Node.newNumber(816.1273290433639);
      Node node2 = new Node((-1337), node1, node0, 38, (-1337));
      node0.clonePropsFrom(node2);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      node1.isLabelName();
      node1.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setReturnsTainted();
      Node node2 = Node.newString(1, "");
      Node node3 = new Node(2740, node2, node0);
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node.extractCharno(1618);
      Node node0 = Node.newString((String) null, 1618, 117);
      int int0 = Integer.MIN_VALUE;
      node0.getExistingIntProp(int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = Node.newString("", 42, 1756);
      node2.setWasEmptyNode(true);
      node0.getChangeTime();
      node2.isSetterDef();
      node1.isCatch();
      node1.getProp(34);
      node0.putBooleanProp(8, true);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node3 = node0.setJSDocInfo(jSDocInfo0);
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      node3.putBooleanProp(32, false);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "x9D96q";
      Node node0 = Node.newString("x9D96q");
      node0.setType(2330);
      Node node1 = new Node(16, node0, 8, 4095);
      node0.checkTreeEqualsImpl(node1);
      Node node2 = new Node(43, node1, node1, node1, node0, (-979), 148);
      node1.getAncestor(node2.INPUT_ID);
      Node node3 = new Node(node2.REFLECTED_OBJECT, node0, node1);
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = new Node(0, 0, 27);
      node0.setCharno(0);
      Node node1 = new Node(2, node0);
      node1.setLineno(47);
      node1.getBooleanProp(46);
      Node node2 = new Node(2481, node1, node1, node1, node0, 51, 53);
      node2.isTypeOf();
      node0.isOr();
      Node node3 = node0.getLastSibling();
      node3.isLocalResultCall();
      // Undeclared exception!
      try { 
        node1.isInc();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node1 = Node.newString("Object#Element");
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node1.setVarArgs(false);
      Node node3 = node2.useSourceInfoIfMissingFrom(node0);
      node0.cloneTree();
      node1.isNoSideEffectsCall();
      node2.getAncestors();
      node3.replaceChild(node1, node0);
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isOnlyModifiesThisCall();
      node0.isLocalResultCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      Node node1 = new Node(47, (-74), 155);
      node0.isThrow();
      Node node2 = Node.newString("4", 39, 50);
      node2.getLength();
      Node node3 = new Node(55, node2, 4095, 39);
      node3.getSideEffectFlags();
      Node node4 = Node.newString(57, "4");
      node0.addChildToBack(node4);
      node1.isRegExp();
      node4.toString();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isOnlyModifiesThisCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      node0.isThrow();
      Node node1 = node0.getLastSibling();
      node0.isAdd();
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0);
      Node node1 = Node.newString(2349, "Z@5gkL0?6x");
      node1.setLineno((-74));
      node1.getBooleanProp(48);
      node0.isTypeOf();
      node0.isOr();
      Node node2 = node0.getLastSibling();
      node2.getQualifiedName();
      node2.isLocalResultCall();
      node0.isInc();
      Node.extractCharno(57);
      node1.setDouble(50);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      node1.isLabelName();
      node0.isFalse();
      node0.isTypeOf();
      node0.isOr();
      node1.getQualifiedName();
      Node node2 = node1.getLastSibling();
      node2.isAdd();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isGetElem();
      node0.isLocalResultCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      Node node1 = new Node(47, (-74), 155);
      node0.hasChild(node1);
      String string0 = "4";
      Node node2 = Node.newString("4");
      node2.removeChildAfter(node1);
      node2.mayMutateArguments();
      node2.getLength();
      Node node3 = new Node(node0.INFERRED_FUNCTION, node2, node0.MAX_COLUMN_NUMBER, node0.EMPTY_BLOCK);
      node3.getSideEffectFlags();
      int int0 = 57;
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isAssign();
      Node node1 = Node.newString(" W$");
      node1.isLocalResultCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      node0.addChildToBack((Node) null);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isAssign();
      Node node1 = Node.newString(" W$");
      node1.isLocalResultCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      node0.addChildToBack((Node) null);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isOnlyModifiesThisCall();
      node0.isLocalResultCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      Node node1 = new Node(47, (-74), 155);
      node0.hasChild(node1);
      Node node2 = Node.newString("4");
      node2.getLength();
      node2.useSourceInfoFromForTree(node0);
      Node node3 = new Node(55, node2, 4095, 39);
      node3.getSideEffectFlags();
      Node node4 = Node.newString(57, "4");
      node0.addChildToBack(node4);
      node1.isRegExp();
      node4.toString();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = new Node(130, 754, 8287);
      Node node1 = new Node(130, node0, node0, node0);
      node1.setSourceEncodedPositionForTree(9);
      Node node2 = new Node((-1284), 30, 45);
      node0.isThrow();
      node1.isTypeOf();
      node1.isOr();
      Node node3 = node2.getLastSibling();
      node1.isLocalResultCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.removeFirstChild();
      node3.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isLabelName();
      node0.toStringTree();
      node0.setSourceEncodedPositionForTree(3564);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      node0.isEquivalentToShallow(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2829);
      node0.isQualifiedName();
      node0.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      String string0 = node0.toStringTree();
      node1.isLabelName();
      node1.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node1.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags6.setThrows();
      node_SideEffectFlags4.setMutatesGlobalState();
      node1.setVarArgs(true);
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags7 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags7.clearAllFlags();
      node_SideEffectFlags8.setAllFlags();
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags3.clearSideEffectFlags();
      node1.setWasEmptyNode(false);
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      Node node2 = new Node(88, node0, node0, node0, node0, 2, (-1953));
      node2.setSourceEncodedPositionForTree(57);
      node1.removeChild(node0);
      node1.isFromExterns();
      node2.isInc();
      node2.setString(string0);
      Node.extractCharno(node2.OPT_ARG_NAME);
      node0.setDouble(node2.SLASH_V);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node0 = Node.newString("is_dispatcher");
      node0.isFunction();
      node0.getLineno();
      node0.isCast();
      node0.setType((-1));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      String string0 = "Z@5gkL0?6x";
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = Node.newString("~", 42, 31);
      node2.mayMutateArguments();
      Node node4 = node2.copyInformationFromForTree(node3);
      Node node5 = Node.newString(4095, " is not a number node");
      node5.isEquivalentToShallow(node3);
      node3.isEquivalentToShallow(node0);
      node2.setString(" is not a number node");
      node0.wasEmptyNode();
      node5.checkTreeEqualsImpl(node2);
      node2.isLocalResultCall();
      // Undeclared exception!
      try { 
        node1.useSourceInfoIfMissingFrom(node4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 2850.834670167038 42 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = node0.clonePropsFrom(node0);
      Node node2 = new Node(54, node0);
      node1.mayMutateArguments();
      node1.copyInformationFromForTree(node2);
      node2.isEquivalentToShallow(node0);
      node0.setString("Z@5gkL0?6x");
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        FileSystemHandling.createFolder(evoSuiteFile0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 2850.834670167038 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = new Node(78);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      Node node1 = new Node((-2461), nodeArray0, 47, 5021);
      node0.removeChildAfter(node1);
      node0.isFor();
      node0.getType();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(1514, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = Node.newString(1826, "^by?]B+~m8$)xH", 1826, 1826);
      node0.setJSDocInfo((JSDocInfo) null);
      node0.children();
      Node node1 = Node.newString(46, "^by?]B+~m8$)xH");
      node1.children();
      Node node2 = new Node(2, node0);
      node2.setLineno(31);
      node2.getBooleanProp(4);
      int int0 = (-1830);
      Node[] nodeArray0 = new Node[3];
      Node node3 = new Node(1385, (-720), 34);
      nodeArray0[0] = node3;
      nodeArray0[1] = node1;
      nodeArray0[2] = node1;
      Node node4 = new Node(8, nodeArray0, 751619276, 51);
      Node node5 = new Node(int0, node1, node1, node4);
      node5.isTypeOf();
      nodeArray0[2].isOr();
      node3.getLastSibling();
      node4.isLocalResultCall();
      node0.isInc();
      int int1 = (-1749);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = 113;
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-2809), nodeArray0, 35, 98);
      Node node1 = new Node(98, node0, node0, node0, node0);
      Node node2 = new Node(35, node1, node0);
      int int1 = 8192;
      Node node3 = new Node(int0, node2, int1, node0.SIDE_EFFECTS_ALL);
      // Undeclared exception!
      try { 
        node3.copyInformationFrom(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = Node.newString(".$:");
      Node node1 = new Node(8, node0, node0);
      node0.isBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append((String) null);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append((String) null);
      node0.isDefaultCase();
      node1.isComma();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node2 = new Node(15, nodeArray0);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node2);
      node_NodeMismatch0.equals(node_FileLevelJsDocBuilder1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = Node.newString(1826, "^by?]B+~m8$)xH", 1826, 1826);
      Node node1 = node0.setJSDocInfo((JSDocInfo) null);
      Node node2 = Node.newString("%#J~");
      boolean boolean0 = false;
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node2;
      nodeArray0[2] = node2;
      nodeArray0[3] = node1;
      Node node3 = new Node(36, nodeArray0);
      node1.copyInformationFromForTree(node3);
      node0.setVarArgs(boolean0);
      node1.isNoSideEffectsCall();
      // Undeclared exception!
      try { 
        nodeArray0[2].isVarArgs();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = new Node((-3896), (-67), (-654));
      node0.setCharno(27);
      node0.setWasEmptyNode(true);
      node0.getChangeTime();
      Node node1 = new Node(30, 0, 1);
      node1.isSetterDef();
      node1.isCatch();
      node0.getProp(42);
      Node node2 = new Node(46, node1);
      node2.putBooleanProp(165, true);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node3 = node2.setJSDocInfo(jSDocInfo0);
      node2.getAncestors();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node_AncestorIterable0.iterator();
      node3.putBooleanProp((-3744), false);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newNumber((-4702.56822), (-4533), (-4533));
      node0.isLocalResultCall();
      Node node1 = Node.newNumber((double) 57, 488, 1451);
      node0.isEquivalentTo(node1);
      node0.isNoSideEffectsCall();
      node0.isEmpty();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newNumber(312.35374);
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newNumber((double) 2, 46, 49);
      node1.hasChildren();
      node1.isOptionalArg();
      Node node2 = node0.cloneTree();
      node0.setSourceEncodedPosition(0);
      node1.setChangeTime(57);
      node0.hasChild(node2);
      node2.getLength();
      node2.addChildToBack(node0);
      node2.toString();
      node0.setSourceEncodedPosition(31);
      node0.isDelProp();
      node0.isCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node0.isEquivalentTo(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setMutatesGlobalState();
      node0.toString(false, false, true);
      node2.isOr();
      node1.setWasEmptyNode(true);
      node1.cloneTree();
      Node node3 = new Node(49, node1, node2, 15, 46);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = new Node(130, 754, 130);
      Node node1 = new Node(4, node0, node0);
      node0.isEquivalentTo(node1);
      Node node2 = null;
      node0.getExistingIntProp(130);
      node0.addChildrenAfter(node2, node2);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 130
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = new Node(54, node0, node0, node0, 57, 15);
      node1.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1570);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node0.getSourceFileName();
      node1.isIn();
      Node node2 = node1.copyInformationFrom(node0);
      node0.toString(false, false, false);
      node1.isOr();
      node1.setWasEmptyNode(true);
      node0.isVar();
      node2.isEquivalentTo(node1, false, true, false);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = Node.newNumber(3027.9539);
      String string0 = "'<X)\\c&?]B}ZR0";
      Node node1 = Node.newString(49, "'<X)c&?]B}ZR0", 31, 37);
      Node node2 = new Node(2140586401, node0);
      node0.isEquivalentToShallow(node2);
      node0.isEquivalentTo(node2);
      node0.getSourceOffset();
      int int0 = 302;
      node0.wasEmptyNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(50);
      node1.isUnscopedQualifiedName();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      node2.setSideEffectFlags(node_SideEffectFlags0);
      node1.getSourceFileName();
      Node.newString(int0, string0);
      // Undeclared exception!
      try { 
        node0.isIn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2140586401
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = new Node(754, 148, 4095);
      Node.extractCharno(51);
      node0.isGetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1420);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      node0.setSideEffectFlags(node_SideEffectFlags2);
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = Node.newString(1826, "^by?]B+~m8$)xH", 1826, 1826);
      node0.setJSDocInfo((JSDocInfo) null);
      Node node1 = Node.newString(46, "t9VxEwGI8Wbl*");
      node1.isQualifiedName();
      node1.children();
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = Node.newString("G,kirJ5", 40, 1826);
      Node node4 = node0.copyInformationFromForTree(node3);
      node1.isEquivalentToShallow(node3);
      node4.isEquivalentToShallow(node1);
      node2.setString("t9VxEwGI8Wbl*");
      node3.wasEmptyNode();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node node5 = node2.useSourceInfoIfMissingFrom(node4);
      node3.getInputId();
      node2.getJSDocInfo();
      Node.newString("msg.jsdoc.function.thisnotobject");
      node5.getLineno();
      node5.isCast();
      node3.setType(858);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = new Node(31);
      Node node1 = new Node(12, node0, node0, node0, node0, 278, 223);
      boolean boolean0 = true;
      node0.setSideEffectFlags((Node.SideEffectFlags) null);
      boolean boolean1 = false;
      boolean boolean2 = false;
      node0.toString(boolean0, boolean1, boolean2);
      // Undeclared exception!
      try { 
        node1.wasEmptyNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = new Node(105);
      Node node1 = new Node(29);
      node1.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node1.isStringKey();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      node1.isLabelName();
      node1.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node_SideEffectFlags0.setMutatesThis();
      node1.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags2.setThrows();
      node0.getLastSibling();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node2.isEquivalentTo(node1, true, true, false);
      node1.setDouble(50);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Object#Element", true);
      node0.setStaticSourceFile(simpleSourceFile0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isLabelName();
      node0.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node0.isEmpty();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = new Node(104);
      Node node1 = Node.newString(57, "%%hA7", 53, 15);
      node0.isString();
      node0.isFor();
      node1.isEmpty();
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = Node.newString("opt_arg");
      Node node1 = null;
      node0.mayMutateArguments();
      node0.copyInformationFromForTree((Node) null);
      String string0 = "-=6S";
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newString(1826, "^by?]B+~m8$)xH", 1826, 1826);
      node0.setJSDocInfo((JSDocInfo) null);
      node0.children();
      Node node1 = Node.newString(46, "^by?]B+~m8$)xH");
      node1.children();
      node0.setLineno(31);
      node1.getBooleanProp(4);
      int int0 = (-1830);
      Node[] nodeArray0 = new Node[3];
      Node node2 = new Node(1385, (-720), 34);
      nodeArray0[2] = node2;
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      Node node3 = new Node(8, nodeArray0, 751619276, 51);
      node1.isFromExterns();
      Node node4 = new Node(int0, node1, node1, node3);
      node0.getDouble();
      node4.isTypeOf();
      nodeArray0[2].isOr();
      node3.getLength();
      // Undeclared exception!
      try { 
        node2.getLastSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isOnlyModifiesThisCall();
      node0.setSourceEncodedPosition(9);
      node0.setChangeTime((-1369));
      node0.isThrow();
      node0.isLocalResultCall();
      node0.setLineno(461845907);
      node0.setDouble(461845907);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = new Node(54, node0, node0, node0, 57, 15);
      node1.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node1.isLabelName();
      node0.toStringTree();
      node1.isEquivalentToShallow(node0);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags((-787));
      Node node2 = new Node(31, (Node[]) null, 4, (-2461));
      node2.isQualifiedName();
      node0.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      node1.isLabelName();
      node1.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node0.setChangeTime(44);
      Node node2 = new Node(3339, 38, 14);
      Node node3 = new Node(5110, node0, node0, node0, 366, (-3863));
      node3.hasChild(node0);
      Node node4 = Node.newString("?c0#.!O84=4");
      node4.getLength();
      Node node5 = Node.newString("4", 892, 54);
      Node.newString(56, "STRING m\n");
      Node node6 = node1.useSourceInfoFromForTree(node5);
      Node node7 = new Node((-503), node6, 1822, 15);
      node6.getSideEffectFlags();
      Node.newString(110, "STRING m\n");
      node4.addChildToBack(node6);
      node2.isRegExp();
      node5.toString();
      node3.addChildToFront(node7);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      node1.isLabelName();
      node1.toStringTree();
      node1.isOnlyModifiesThisCall();
      Node node2 = new Node(4, node0, node0, node1, (-121), 52);
      node2.hasChild(node0);
      Node node3 = Node.newString("STRING m\n");
      node2.getLength();
      Node node4 = Node.newString("com.UoogEe.javaseript.rhino.Node$ObjectPropListItem", 48, (-1));
      Node node5 = new Node(56, node3);
      node4.isInstanceOf();
      node0.setLineno(49);
      node1.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newNumber(954.38674);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      node0.isOptionalArg();
      Node node1 = new Node(85, node0, node0, node0, (-865), (-534));
      node0.addChildrenToBack(node1);
      node0.isTrue();
      node1.hasChild(node1);
      node1.isDelProp();
      node1.getExistingIntProp(1182);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node1 = Node.newString("Object#Element");
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node1.setVarArgs(false);
      Node node3 = node2.useSourceInfoIfMissingFrom(node0);
      Node node4 = node0.cloneTree();
      node1.isNoSideEffectsCall();
      node2.getAncestors();
      node1.isBlock();
      simpleErrorReporter0.error("S&`g<]nL?E#Hg%", "DICT", 35, 53);
      node3.replaceChild(node1, node0);
      boolean boolean0 = false;
      boolean boolean1 = true;
      node3.isEquivalentTo(node4, boolean0, boolean1, boolean0);
      // Undeclared exception!
      try { 
        node4.replaceChild(node2, node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isWhile();
      node0.setSourceEncodedPosition(51);
      Node node1 = Node.newString("G#Y=!QGis?XWq-=v&k'");
      node1.mayMutateArguments();
      node1.getLength();
      Node node2 = new Node(55, node1, 4095, 39);
      node0.isLocalResultCall();
      node2.putBooleanProp(8, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.getDirectives();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isGetElem();
      node0.isLocalResultCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      Node node1 = new Node(16, 50, 40);
      node0.isThrow();
      Node node2 = Node.newString("4", 31, 1687);
      node1.getLength();
      Node node3 = new Node((-1036), node0, 105, 29);
      node3.getSideEffectFlags();
      node2.getDirectives();
      Node.newString(40, "4");
      node2.addChildToBack(node3);
      node1.isRegExp();
      node0.toString();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = Node.newString(3267, "com.google.common.collect.AbstractMapBasedMultimap$KeySet");
      Node node1 = new Node(43, node0, 30, 30);
      node1.setSourceEncodedPosition(57);
      node1.isTrue();
      Node node2 = new Node(30);
      node0.getStaticSourceFile();
      node2.getAncestor(39);
      node1.putIntProp(1, 55);
      node1.setStaticSourceFile((StaticSourceFile) null);
      node2.isVar();
      node1.getSourceOffset();
      node1.isGetProp();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = Node.newString(1826, "^by?]B+~m8$)xH", 1826, 1826);
      Node node1 = node0.setJSDocInfo((JSDocInfo) null);
      Node node2 = Node.newString(46, "t9VxEwGI8Wbl*");
      node2.isQualifiedName();
      node2.children();
      Node node3 = node0.clonePropsFrom(node2);
      Node node4 = Node.newString("G,kirJ5", 40, 1826);
      Node node5 = node0.copyInformationFromForTree(node4);
      node2.isEquivalentToShallow(node4);
      node5.isEquivalentToShallow(node2);
      node3.setString("t9VxEwGI8Wbl*");
      node4.wasEmptyNode();
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node4.getInputId();
      node3.getJSDocInfo();
      Node.newString("msg.jsdoc.function.thisnotobject");
      node1.getLineno();
      node2.isCast();
      node4.setType(16);
      node4.isGetProp();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      node0.setVarArgs(false);
      node0.isNoSideEffectsCall();
      node0.isBlock();
      node0.removeFirstChild();
      node0.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node node0 = Node.newString((-1834), "com.google.javascript.rhino.Node$NumberNode", 841, (-1334));
      node0.getSourceFileName();
      Node node1 = new Node((-4628), node0, node0, node0);
      Node node2 = node1.removeFirstChild();
      node1.isTrue();
      node2.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = Node.newString(1826, "^by?]B+~m8$)-xH", 1826, 1826);
      Node node1 = Node.newString(46, "t9VxEwGI8Wbl*");
      node1.isQualifiedName();
      node1.children();
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = Node.newString("G,kirJ5", 40, 1826);
      Node node4 = node0.copyInformationFromForTree(node3);
      node1.isEquivalentToShallow(node3);
      node4.isEquivalentToShallow(node1);
      node2.setString("t9VxEwGI8Wbl*");
      node3.wasEmptyNode();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node3.getInputId();
      node2.getJSDocInfo();
      Node.newString("msg.jsdoc.function.thisnotobject");
      node0.getLineno();
      node1.isFromExterns();
      node3.setType(16);
      node3.isGetProp();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = new Node(11, 35, 313);
      node0.setChangeTime((-1139));
      node0.isFromExterns();
      node0.isOnlyModifiesArgumentsCall();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z1ok' ,)YZ+<`D");
      node0.getChildBefore((Node) null);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      node1.isLabelName();
      node1.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.setChangeTime(53);
      Node node2 = new Node(262144, 55, 4095);
      node0.isThrow();
      Node.newString("", 4, 1);
      Node node3 = new Node((-223), node0, 15, 46);
      Node node4 = Node.newString(709, "");
      node3.addChildToBack(node0);
      node0.isRegExp();
      node4.toString();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = 8297;
      Node node0 = new Node(130, 754, 8297);
      node0.isLabelName();
      node0.toStringTree();
      node0.isOnlyModifiesThisCall();
      node0.putIntProp((-55), 130);
      node0.setChangeTime(754);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(37);
      node0.isLabelName();
      node0.isVoid();
      node0.toStringTree();
      node0.toString();
      node0.getIntProp(int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = new Node((-3896), (-67), (-654));
      node0.setCharno(27);
      node0.setWasEmptyNode(true);
      node0.getChangeTime();
      Node node1 = new Node(30, 0, 1);
      node1.isSetterDef();
      node1.isCatch();
      node0.getProp(42);
      Node node2 = new Node(46, node1);
      node2.putBooleanProp(165, true);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node3 = node2.setJSDocInfo(jSDocInfo0);
      node2.getAncestors();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node_AncestorIterable0.iterator();
      node1.isInc();
      jSDocInfo0.setDescription("{%Bd2'c");
      Node.extractCharno(63);
      node3.setLineno(105);
      node3.setDouble(2.0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int int0 = 41;
      int int1 = 31;
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(31, 31, 31);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber(1720.2656568);
      nodeArray0[1] = node1;
      Node node2 = new Node(32, node0);
      nodeArray0[2] = node2;
      Node node3 = new Node(11, nodeArray0, (-1847), 24);
      Node node4 = new Node(int1, node3, nodeArray0[0]);
      int int2 = (-959);
      Node node5 = new Node(int0, node4, node4.REFLECTED_OBJECT, int2);
      node5.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isAssign();
      Node node1 = new Node((-1561), node0, node0);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      Node node2 = new Node(47, nodeArray0);
      node2.hasChild(nodeArray0[1]);
      String string0 = "4";
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isOnlyModifiesThisCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      Node node1 = new Node(47, (-74), 155);
      node0.isThrow();
      node0.isTypeOf();
      node1.isOr();
      Node node2 = node1.getLastSibling();
      node2.isLocalResultCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((JSType[]) null);
      node3.isInc();
      Node.extractCharno(node2.QUOTED_PROP);
      double double0 = (-3684.1592603000972);
      node0.setDouble(double0);
      node2.isVar();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = Node.newString("'}==L", 372, 372);
      node0.isHook();
      node0.getParent();
      node0.getBooleanProp(820);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = Node.newString(".$:");
      Node node1 = new Node(8, node0, node0);
      node0.setType(55);
      node0.isScript();
      Node node2 = new Node(36, node0, node1);
      node2.isNot();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.children();
      Node node1 = new Node(57, node0, node0, node0, (-596), 2);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node0.setChangeTime(1350);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer2);
      node_AncestorIterable0.forEach(consumer1);
      node_AncestorIterable0.forEach(consumer0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags1.setReturnsTainted();
      Node node2 = Node.newString((-284), "");
      Node node3 = new Node(428, node0, node2);
      node1.isContinue();
      node3.isGetProp();
      node1.isCatch();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      node1.isLabelName();
      node1.toStringTree();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.iterator();
      node_AncestorIterable0.forEach(consumer0);
      Node node2 = Node.newString((-455), "NUMBER 0.0\n", 626, 38);
      node_AncestorIterable0.spliterator();
      Consumer<Node> consumer1 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer1);
      node_AncestorIterable0.iterator();
      node_AncestorIterable0.iterator();
      node_AncestorIterable0.iterator();
      node1.toStringTree();
      node0.isFunction();
      node1.toString();
      node2.getIndexOfChild(node0);
      node0.setSourceEncodedPositionForTree(8);
      node0.isWhile();
      node1.isLocalResultCall();
      node2.putBooleanProp(55, false);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isGetElem();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1295));
      Node node1 = Node.newString("G#Y=!QGis?XWq-=v&k'");
      node1.mayMutateArguments();
      node1.getLength();
      Node node2 = new Node(55, node1, 4095, 39);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3260);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.valueOf();
      node2.mayMutateGlobalStateOrThrow();
      node1.removeProp(31);
      Node node3 = Node.newString(42, "");
      Node node4 = node3.setJSDocInfo((JSDocInfo) null);
      node2.isTry();
      node2.getIndexOfChild(node4);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = new Node(130);
      node0.isWhile();
      Node node1 = new Node((-840));
      node0.replaceChildAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = Node.newString("kCy");
      Node node1 = Node.newString("kCy", 50, 38);
      node0.getChangeTime();
      Node node2 = Node.newString("", 55, 42);
      node2.isIn();
      node0.isCatch();
      node2.setQuotedString();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node2.isEquivalentTo(node0, false, false, false);
      node3.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isGetElem();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1284));
      Node node1 = Node.newString("G#Y=!QGis?XWq-=v&k'");
      node1.mayMutateArguments();
      node1.getLength();
      Node node2 = new Node(55, node1, 4095, 39);
      int int0 = Node.SYNTHETIC_BLOCK_PROP;
      node2.mayMutateGlobalStateOrThrow();
      node1.removeProp(31);
      Node node3 = node1.setJSDocInfo((JSDocInfo) null);
      node1.isTry();
      node2.getIndexOfChild(node3);
      Node node4 = node2.useSourceInfoFromForTree(node0);
      node4.isNE();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = Node.newString(1826, "^by?]B+~m8$)xH", 1826, 1826);
      node0.setJSDocInfo((JSDocInfo) null);
      node0.children();
      Node node1 = Node.newString(46, "^by?]B+~m8$)xH");
      node1.children();
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = Node.newString("G,kirJ5", 40, 1826);
      node3.mayMutateArguments();
      Node node4 = node0.copyInformationFromForTree(node3);
      node1.isEquivalentToShallow(node3);
      node4.isEquivalentToShallow(node1);
      node2.setString("-=6S");
      node3.wasEmptyNode();
      node2.checkTreeEqualsImpl(node1);
      Node node5 = node2.useSourceInfoIfMissingFrom(node4);
      node3.getInputId();
      node2.getJSDocInfo();
      Node.newString("msg.jsdoc.function.thisnotobject");
      node0.setSourceEncodedPositionForTree(4);
      node2.isFunction();
      node5.getLineno();
      node5.isCast();
      node3.setType(858);
      node0.isNumber();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = new Node(47, node2, node2, node2, node2);
      node2.mayMutateArguments();
      Node node4 = node2.copyInformationFromForTree(node3);
      Node node5 = Node.newString(4095, " is not a number node");
      node0.isEquivalentToShallow(node1);
      node0.isEquivalentToShallow(node3);
      node3.isHook();
      Node node6 = node4.getParent();
      node5.setType(54);
      node6.isNumber();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = Node.newString("Wv6b?&6FbCMs", (-1816), 148);
      Node node1 = Node.newNumber((double) 43, 46, 148);
      Node node2 = new Node((-1816), node0, node0, node1);
      Node node3 = new Node((-1816), node2);
      node3.setType(1);
      node1.isNumber();
      node3.getLength();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append((String) null);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = new Node(16777216, 0, 0);
      node0.toString(true, false, false);
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      node0.appendStringTree(mockPrintWriter0);
      node0.addChildBefore(node0, node0);
      node0.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = Node.newString(1826, "^by?]B+~m8$)-xH", 1826, 1826);
      Node node1 = Node.newString(46, "t9VxEwGI8Wbl*");
      node1.isQualifiedName();
      node1.children();
      Node node2 = new Node(37, node0, node0, 52, 56);
      Node node3 = Node.newString("G,kirJ5", 40, 1826);
      Node node4 = node0.copyInformationFromForTree(node3);
      node1.isEquivalentToShallow(node3);
      node4.isEquivalentToShallow(node1);
      node2.setString("t9VxEwGI8Wbl*");
      node3.wasEmptyNode();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node3.getInputId();
      // Undeclared exception!
      try { 
        node2.getJSDocInfo();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CALL 52 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = new Node(122);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      boolean boolean0 = false;
      boolean boolean1 = false;
      node1.addChildBefore(node0, node0);
      String string0 = node1.toString(boolean0, boolean1, boolean1);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = "m";
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      node1.isLabelName();
      node1.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node1.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      node0.addChildBefore(node1, node1);
      // Undeclared exception!
      try { 
        node_SideEffectFlags2.setThrows();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isParamList();
      node0.isLocalResultCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      Node node1 = new Node(2, node0, node0);
      node0.hasChild(node1);
      node1.isTypeOf();
      Node node2 = new Node(119, node0, node1);
      node2.isOr();
      node1.getLastSibling();
      node0.isLocalResultCall();
      // Undeclared exception!
      try { 
        node0.isInc();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = Node.newString(".$:");
      Node node1 = new Node((-1113), node0, node0, (-2066), 111);
      node0.isEquivalentToShallow(node1);
      node0.isEquivalentToShallow(node1);
      node1.setString(".$:");
      node0.wasEmptyNode();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder(evoSuiteFile0);
      // Undeclared exception!
      try { 
        node1.checkTreeEqualsImpl(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1113
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      node1.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node0.setChangeTime(44);
      node1.useSourceInfoFrom(node0);
      node0.setLineno(2536);
      node0.getBooleanProp(52);
      node0.isTypeOf();
      node0.isOr();
      node1.getQualifiedName();
      node0.isLocalResultCall();
      node1.isInc();
      node0.setDouble(1603.6931518);
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(15);
      node0.setChangeTime(754);
      node0.toString(false, true, false);
      String string0 = "I1(pS?FnOdEvG2~W@:t";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      node0.appendStringTree(mockPrintWriter0);
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0);
      Node node1 = Node.newString(2349, "Z@5gkL0?6x");
      Node node2 = new Node(36, node1, node0, node0, 46, 91);
      Node node3 = new Node(31, 2, 147);
      node3.hasChild(node2);
      Node node4 = Node.newString("Z@5gkL0?6x");
      node0.getLength();
      Node.newString("", 29, 147);
      Node.newString(4095, "?c0#.!O84=4");
      node0.useSourceInfoFromForTree(node1);
      Node node5 = new Node(1, node0, 3339, 0);
      node5.getSideEffectFlags();
      int int0 = 64;
      String string0 = "com.google.javascript.rhino.jstype.Property";
      Node.newString(int0, string0);
      node4.addChildToBack(node3);
      node5.isRegExp();
      node5.toString();
      node4.addChildToFront(node3);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = Node.newString("Z@5gkL0?6x");
      Node node1 = Node.newString("Z@5gkL0?6x", 50, 38);
      Node node2 = Node.newString(46, "Z@5gkL0?6x");
      node2.isBlock();
      node0.isCatch();
      Node node3 = new Node((-886), node2, node1);
      node0.wasEmptyNode();
      Node node4 = new Node((-850), node2, 45, (-1119));
      node4.isOr();
      Node node5 = node0.removeFirstChild();
      node5.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = Node.newString(1059, "Object#Element");
      Node node2 = new Node(37, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      jSTypeRegistry0.getGreatestSubtypeWithProperty(objectType0, "Unknown class name");
      Node node3 = new Node(15, node1, node2, node1, 36, 42);
      node2.removeChild(node1);
      node3.isContinue();
      // Undeclared exception!
      try { 
        node1.isThis();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = new Node(130, 754, 754);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node node1 = new Node(42, node0, node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      Node node3 = new Node(37, node2, node1, node1, node1, 37, 303);
      node3.getChangeTime();
      node1.isSetterDef();
      node1.getProp(12);
      node0.isParamList();
      node1.isCall();
      Node node4 = Node.newString("e{E-8r <9)(i");
      node2.addChildToBack(node3);
      node3.isWhile();
      node3.isDefaultCase();
      node2.getChildBefore(node4);
      node3.isLabel();
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isAssign();
      node0.setLineno(43);
      node0.getBooleanProp(43);
      node0.isTypeOf();
      node0.isOr();
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      immutableList0.replaceAll(unaryOperator0);
      Node node1 = node0.getLastSibling();
      node1.isLocalResultCall();
      node1.isInc();
      Node.extractCharno(29);
      node1.setDouble(42);
      int int0 = (-164);
      node0.setLineno(int0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = Node.newString("m");
      node0.getStaticSourceFile();
      Node node1 = Node.newNumber((double) 0, 52, 0);
      node0.toStringTree();
      node0.isCast();
      node0.isFalse();
      node0.isTypeOf();
      node0.isOr();
      node1.getQualifiedName();
      Node node2 = node1.getLastSibling();
      node2.isAdd();
      node0.isName();
      node2.isTypeOf();
      node2.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      node1.isLabelName();
      node1.toStringTree();
      node1.isOnlyModifiesThisCall();
      node1.putIntProp(30, 38);
      node0.isThis();
      node0.setChangeTime(37);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(56);
      node1.isQualifiedName();
      node1.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = Node.newString(3261, " j   ");
      Node node1 = new Node(43, node0, 30, 30);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.setSourceEncodedPosition(57);
      node0.isTrue();
      Node.newString(55, " j   ", 8, 39);
      Node.newNumber(249.76167364, 29, 128);
      node0.getSideEffectFlags();
      node0.putIntProp(57, 1);
      node0.isThis();
      node1.getSourcePosition();
      node2.getSourceOffset();
      node1.setCharno((-4733));
      node2.getSourceOffset();
      node1.wasEmptyNode();
      node1.isCall();
      Node node3 = Node.newString(" j   ");
      node0.addChildToBack(node3);
      node1.isWhile();
      node3.isDefaultCase();
      Node node4 = node2.getChildBefore(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node4.LAST_PROP);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags3.areAllFlagsSet();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(8, node0, node0, node0, (-1332), 56);
      Node node2 = new Node(42, 49, (-1725));
      node2.getSideEffectFlags();
      node0.putIntProp(54, 1);
      boolean boolean0 = node2.isThis();
      node0.getSourcePosition();
      node0.getSourceOffset();
      node0.setCharno(311);
      node0.getLength();
      Node node3 = Node.newString("", 87, (-1));
      node2.getStaticSourceFile();
      node3.setStaticSourceFile((StaticSourceFile) null);
      Node node4 = Node.newString(37, "{Vzfx");
      node2.isLocalResultCall();
      Node node5 = new Node(57, node2, node3, node0, 2, 54);
      int int0 = 46;
      node0.putBooleanProp(int0, boolean0);
      node5.getChildAtIndex(node4.DIRECTIVES);
      node1.isIn();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = Node.newString("Cy8lA7", 1711, 729);
      Node node1 = null;
      node0.checkTreeEqualsImpl((Node) null);
      node0.getSourceOffset();
      node0.getQualifiedName();
      // Undeclared exception!
      try { 
        Node.newNumber((double) node0.POST_FLAG);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      node1.isLabelName();
      node1.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node0.setChangeTime(44);
      Node node2 = new Node(3339, 38, 14);
      Node node3 = new Node(5110, node0, node0, node0, 366, (-3863));
      node3.hasChild(node0);
      Node node4 = Node.newString("?c0#.!O84=4");
      node4.getLength();
      Node node5 = Node.newString("4", 892, 54);
      Node.newString(56, "STRING m\n");
      Node node6 = node1.useSourceInfoFromForTree(node5);
      Node node7 = new Node(50, 36, 2);
      node6.getSideEffectFlags();
      Node.newString(110, "STRING m\n");
      node4.addChildToBack(node6);
      node2.isRegExp();
      node5.toString();
      node3.addChildToFront(node7);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = new Node(105);
      node0.addChildToFront(node0);
      Node.extractCharno(32);
      node0.addChildAfter(node0, node0);
      node0.setDouble(node0.FLAG_THIS_UNMODIFIED);
      // Undeclared exception!
      try { 
        node0.isHook();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = Node.newString("Z@5gkL0?6x");
      Node node1 = Node.newString("Z@5gkL0?6x", 50, 38);
      node0.setWasEmptyNode(true);
      node0.getChangeTime();
      Node node2 = Node.newString(46, "");
      node2.isBlock();
      node0.isCatch();
      node2.setQuotedString();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags3.setThrows();
      node2.getLastSibling();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node3 = new Node(1, node0, node0, node1, node0, 2, 1);
      node2.isLabelName();
      Node node4 = new Node(56, node2);
      node2.isInstanceOf();
      node3.setLineno(111);
      node4.getSourcePosition();
      node3.addChildToFront(node0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node node0 = new Node(130, 754, 8287);
      Node node1 = new Node(130, node0, node0, node0);
      node1.setSourceEncodedPositionForTree(9);
      node1.setOptionalArg(false);
      Node node2 = node1.clonePropsFrom(node0);
      node2.getJSDocInfo();
      node1.setWasEmptyNode(false);
      node1.getSourceFileName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags4.valueOf();
      node2.mayMutateGlobalStateOrThrow();
      node2.removeProp(40);
      Node.newString(4, "");
      node2.isTry();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = node0.clonePropsFrom(node1);
      String string0 = "~";
      Node node3 = Node.newString("~", 42, 31);
      node2.mayMutateArguments();
      Node node4 = node2.copyInformationFromForTree(node3);
      Node node5 = Node.newString(4095, " is not a number node");
      node0.isEquivalentToShallow(node4);
      node5.isEquivalentToShallow(node0);
      node0.setString("Z@5gkL0?6x");
      node4.wasEmptyNode();
      node5.checkTreeEqualsImpl(node1);
      node5.isLocalResultCall();
      // Undeclared exception!
      try { 
        Node.newString(string0, node4.FLAG_NO_THROWS, node4.EMPTY_BLOCK);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 2850.834670167038 42 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = node0.clonePropsFrom(node0);
      Node node2 = new Node(54, node0);
      node1.mayMutateArguments();
      node1.isEquivalentToTyped(node0);
      node1.copyInformationFromForTree(node2);
      node2.isEquivalentToShallow(node0);
      node0.setString("Z@5gkL0?6x");
      node2.getDirectives();
      EvoSuiteFile evoSuiteFile0 = null;
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      node0.setVarArgs(false);
      Node node1 = new Node(1, node0);
      node1.putBooleanProp(1, true);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      node1.getAncestors();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      Node.AncestorIterable node_AncestorIterable1 = new Node.AncestorIterable(node2);
      node_AncestorIterable1.iterator();
      node2.isInc();
      jSDocInfo0.setDescription("{%Bd2'c");
      Node.extractCharno((-1184));
      node2.setLineno(65535);
      node2.setDouble(53);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = Node.newString("Rk$j2h");
      Node node1 = new Node(57);
      node0.wasEmptyNode();
      node0.isOr();
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = Node.newString(1826, "^by?]B+~m8$)xH", 1826, 1826);
      node0.setJSDocInfo((JSDocInfo) null);
      Node node1 = Node.newString(46, "t9VxEwGI8Wbl*");
      node1.isQualifiedName();
      node1.children();
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = Node.newString("G,kirJ5", 40, 1826);
      Node node4 = node0.copyInformationFromForTree(node3);
      node1.isEquivalentToShallow(node3);
      node4.isEquivalentToShallow(node1);
      node2.setString("-=6S");
      node3.wasEmptyNode();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node3.getInputId();
      node2.getJSDocInfo();
      Node node5 = Node.newString("t9VxEwGI8Wbl*");
      Object object0 = new Object();
      node1.putProp(52, object0);
      node5.isDebugger();
      node0.copyInformationFrom(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(15);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setMutatesArguments();
      Node node6 = Node.newString(2, "G,kirJ5");
      node6.srcref(node0);
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isOnlyModifiesThisCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      node0.setOptionalArg(true);
      Node node1 = new Node(50, node0, node0, node0, 31, (-2130));
      Node node2 = node1.clonePropsFrom(node0);
      node1.getJSDocInfo();
      node0.setWasEmptyNode(true);
      node0.getSourceFileName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.valueOf();
      node2.mayMutateGlobalStateOrThrow();
      node2.removeProp(46);
      Node.newString(1, (String) null);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = Node.newNumber(3027.9539);
      Node node1 = Node.newString(49, "'<X)c&?]B}ZR0", 31, 37);
      Node node2 = new Node(2140586401, node0);
      node0.isEquivalentToShallow(node2);
      node0.isEquivalentTo(node2);
      node0.getSourceOffset();
      node0.wasEmptyNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node2.isFunction();
      node2.getLineno();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node3.isCast();
      node0.setType((-1027));
      node1.isLabelName();
      node2.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(8, node0, node0, node0, (-1332), 56);
      node1.isEquivalentTo(node0);
      node0.isInstanceOf();
      node0.replaceChild(node1, node1);
      node0.isQuotedString();
      Node node2 = null;
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = new Node(40, node0);
      node1.isLabelName();
      node0.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node_SideEffectFlags0.setMutatesThis();
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags6.setThrows();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags7.clearSideEffectFlags();
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node1.isEmpty();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isGetElem();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1295));
      Node node1 = Node.newString("size must be non-negative");
      node1.mayMutateArguments();
      int int0 = Node.INPUT_ID;
      Node node2 = new Node(55, node1, 4095, 39);
      node0.isLocalResultCall();
      node2.putBooleanProp(8, false);
      node1.isExprResult();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = new Node(130, 754, 8287);
      Node node1 = new Node(130, node0, node0, node0);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags5.setThrows();
      Node.SideEffectFlags node_SideEffectFlags8 = new Node.SideEffectFlags();
      node_SideEffectFlags6.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags5.setThrows();
      Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags7.setThrows();
      node_SideEffectFlags8.setMutatesGlobalState();
      node_SideEffectFlags9.clearSideEffectFlags();
      node_SideEffectFlags10.clearAllFlags();
      node_SideEffectFlags4.setAllFlags();
      node0.isEmpty();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      node0.isVoid();
      Node node1 = new Node(51, node0, node0);
      Node node2 = new Node(57, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node2.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = new Node(40, node0);
      node1.isLabelName();
      node0.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node_SideEffectFlags0.setMutatesThis();
      node0.setSourceEncodedPositionForTree(31);
      boolean boolean0 = false;
      node1.setOptionalArg(false);
      Node node2 = node0.clonePropsFrom(node1);
      node1.getJSDocInfo();
      Node node3 = new Node(4095, node0, node0, node1, node0, 38, (-862048943));
      node3.setWasEmptyNode(boolean0);
      node2.getSourceFileName();
      Node.SideEffectFlags node_SideEffectFlags1 = null;
      try {
        node_SideEffectFlags1 = new Node.SideEffectFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = Node.newString("", 42, 1756);
      node0.addChildToFront(node1);
      node2.setWasEmptyNode(true);
      node0.getChangeTime();
      node2.isSetterDef();
      node1.isCatch();
      node1.getProp(34);
      node0.putBooleanProp(8, true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(15);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags4.setAllFlags();
      Node[] nodeArray0 = new Node[8];
      Node node3 = new Node(1, 31, 52);
      nodeArray0[1] = node0;
      nodeArray0[2] = node2;
      nodeArray0[3] = node2;
      nodeArray0[4] = node2;
      nodeArray0[5] = node1;
      nodeArray0[6] = node0;
      nodeArray0[7] = node1;
      Node node4 = new Node(32, nodeArray0, 55, (-3174));
      node4.isEmpty();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.setChangeTime(3390);
      node0.setSourceEncodedPosition(8);
      node0.setChangeTime((-1295));
      node0.mayMutateArguments();
      node0.getLength();
      Node node1 = new Node(55, node0, node0, node0, node0);
      node1.isIf();
      node0.isIn();
      node1.isReturn();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = new Node(40, node0);
      node1.isLabelName();
      node0.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node_SideEffectFlags0.setMutatesThis();
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags5.setThrows();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.iterator();
      node2.putBooleanProp(29, true);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = new Node(40, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node_SideEffectFlags0.setMutatesThis();
      node0.isOnlyModifiesThisCall();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setThrows();
      node0.isOr();
      Node node2 = node0.getLastSibling();
      node1.isLocalResultCall();
      node2.isInc();
      Node.extractCharno(8388608);
      node2.setDouble(43);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = Node.newString("", 42, 1756);
      node2.setWasEmptyNode(true);
      node0.getChangeTime();
      node2.isSetterDef();
      node1.isCatch();
      node1.getProp(34);
      node0.putBooleanProp(8, true);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node3 = node0.setJSDocInfo(jSDocInfo0);
      node3.siblings();
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      node3.putBooleanProp(32, false);
      node1.isVar();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = new Node((-850));
      node0.isVar();
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      node0.setVarArgs(false);
      Node node1 = new Node(1, node0);
      node1.putBooleanProp(1, true);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      node1.getAncestors();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      Node.AncestorIterable node_AncestorIterable1 = new Node.AncestorIterable(node2);
      node_AncestorIterable1.iterator();
      node2.isInc();
      jSDocInfo0.setDescription("{%Bd2'c");
      node0.getJSDocInfo();
      Node.extractCharno((-1184));
      node0.setDouble(0.0);
      node2.getSideEffectFlags();
      node0.mayMutateArguments();
      node2.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isOnlyModifiesThisCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      Node node1 = new Node(47, (-74), 49);
      node0.isThrow();
      node0.isTypeOf();
      node1.isOr();
      Node node2 = node1.getLastSibling();
      node2.isLocalResultCall();
      node1.getLineno();
      node2.isFromExterns();
      node2.setType(48);
      node2.isGetProp();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isOnlyModifiesThisCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      Node node1 = new Node(47, (-74), 155);
      node0.isThrow();
      node0.getProp(4095);
      node0.putBooleanProp(48, false);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      node_AncestorIterable0.iterator();
      node0.putBooleanProp(49, true);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isOnlyModifiesThisCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      Node node1 = new Node(47, (-74), 155);
      node1.setLineno(1387);
      node1.getBooleanProp(63);
      node0.isTypeOf();
      node0.isOr();
      node1.getQualifiedName();
      node1.isLocalResultCall();
      node1.isInc();
      node0.setDouble(312.35374);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.children();
      Node node1 = new Node(57, node0, node0, node0, (-596), 2);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node0.setChangeTime(1350);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer2);
      node_AncestorIterable0.forEach(consumer1);
      node_AncestorIterable0.forEach(consumer0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setNoShadow(true);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      node2.isQualifiedName();
      Node node3 = node1.getLastChild();
      node3.addChildrenAfter(node0, node0);
      int int0 = 1448;
      Node node4 = new Node(node0.EMPTY_BLOCK, node1, node0, node2, int0, node2.ORIGINALNAME_PROP);
      node4.useSourceInfoFrom(node2);
      String string0 = "eD<";
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = Node.newString("", 3000, 3000);
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node(4095, node0, node0, node0, 1, 720);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.addSuppression("");
      node2.checkTreeEquals(node1);
      node0.replaceChild(node0, node0);
      node0.isGetProp();
      int int0 = 0;
      // Undeclared exception!
      try { 
        node1.getExistingIntProp(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4095
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = Node.newString(407, "STRING m\n", 407, 407);
      node0.isOnlyModifiesThisCall();
      node0.isLocalResultCall();
      node0.isInc();
      int int0 = 29;
      int int1 = Node.extractCharno(32);
      Node node1 = new Node(3092479);
      node0.checkTreeEquals(node1);
      node0.setDouble(int1);
      node0.setLineno(int0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = Node.newString(1826, "^by?]B+~m8$)xH", 1826, 1826);
      node0.setJSDocInfo((JSDocInfo) null);
      Node node1 = Node.newString(46, "t9VxEwGI8Wbl*");
      node1.isQualifiedName();
      Vector<Node> vector0 = new Vector<Node>(48);
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = Node.newString("G,kirJ5", 40, 1826);
      Node node4 = node0.copyInformationFromForTree(node3);
      node1.isEquivalentToShallow(node3);
      node4.isEquivalentToShallow(node1);
      node2.setString("-=6S");
      node2.isFalse();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node3.getInputId();
      node2.getJSDocInfo();
      Node node5 = Node.newString("t9VxEwGI8Wbl*");
      Object object0 = new Object();
      node1.putProp(52, object0);
      node5.isDebugger();
      node0.copyInformationFrom(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(15);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setMutatesArguments();
      Node node6 = Node.newString(2, "G,kirJ5");
      node6.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = Node.newString(35, (String) null, 120, 120);
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = Node.newString("Wv6b?&6FbCMs", (-1816), 148);
      Node node1 = Node.newNumber((double) 43, 46, 148);
      Node node2 = new Node((-1816), node0, node0, node1);
      Node node3 = new Node((-1816), node2);
      node3.isBreak();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = Node.newString(3261, " j   ");
      Node node1 = new Node(43, node0, 30, 30);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.setSourceEncodedPosition(57);
      node0.isTrue();
      Node.newString(55, " j   ", 8, 39);
      Node node3 = Node.newNumber(249.76167364, 29, 128);
      node0.getSideEffectFlags();
      node0.putIntProp(57, 1);
      node0.isThis();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(56);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setThrows();
      Node node4 = node1.getLastSibling();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node_AncestorIterable0.iterator();
      node2.toStringTree();
      int int0 = 2075;
      Node node5 = new Node(int0, node3, node3, node0, node0);
      node5.isFunction();
      // Undeclared exception!
      try { 
        node4.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 3261
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0);
      Node node1 = Node.newString(2349, "Z@5gkL0?6x");
      Node.newString("", 0, 53);
      node1.setLineno((-74));
      node1.getBooleanProp(48);
      node0.isTypeOf();
      node0.isOr();
      node0.getQualifiedName();
      Node node2 = new Node(2, node0, node0);
      node0.isContinue();
      node1.isCase();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = Node.newNumber(312.35374);
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newNumber((double) 2, 46, 49);
      node1.hasChildren();
      node1.isOptionalArg();
      node0.setSourceEncodedPosition(0);
      node1.setChangeTime(57);
      node0.hasChild(node1);
      node1.getLength();
      node0.addChildToBack(node0);
      node1.toString();
      node0.setSourceEncodedPosition(31);
      node0.isDelProp();
      node0.isCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node0.isEquivalentTo(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesThis();
      node1.setWasEmptyNode(false);
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      Node node2 = new Node(1, node1, node1, node1, node1, 4095, 3);
      node2.removeChild(node0);
      node1.isFromExterns();
      node2.toStringTree();
      node2.isCase();
      node0.isDec();
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = Node.newString(";=]{De");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.detachChildren();
      Node node1 = Node.newNumber((double) 52);
      node1.addChildToFront(node0);
      node1.getSourceFileName();
      node1.isVarArgs();
      node0.isIf();
      node1.getChildCount();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node node1 = new Node((-1418), node0, node0, node0);
      node0.addChildToBack(node1);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.clearSideEffectFlags();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node2.isEquivalentTo(node0, true, false, false);
      node2.setSideEffectFlags(1074);
      node2.isSyntheticBlock();
      node2.getChildCount();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = new Node(122);
      node0.isWhile();
      Node node1 = new Node((-850));
      node0.getStaticSourceFile();
      node1.isOr();
      Node node2 = Node.newString(33, "com.google.javascript.rhino.Node$ObjectPropListItem", 1, 0);
      Node node3 = new Node(46, node0, node2, (-131), (-673));
      Node node4 = new Node(39, node1, node3, node2);
      node4.isNE();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = Node.newString("Z@5gkL0?6x", 4, 51);
      node0.setWasEmptyNode(true);
      node0.getChangeTime();
      node0.isSetterDef();
      node0.isCatch();
      node0.getProp(4);
      node0.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      node0.isGetElem();
      node0.isDelProp();
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = Node.newString("", 42, 1756);
      node2.setWasEmptyNode(true);
      node0.getChangeTime();
      node2.isSetterDef();
      node1.isCatch();
      node1.getProp(34);
      node1.getBooleanProp(54);
      node1.isTypeOf();
      node2.isOr();
      node2.getQualifiedName();
      node1.isLocalResultCall();
      node2.isInc();
      node2.setDouble(43);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node3 = jSDocInfo0.getAssociatedNode();
      node3.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = Node.newString("Wv6b?&6FbCMs", (-1839), (-1839));
      node0.setString("S");
      node0.wasEmptyNode();
      node0.checkTreeEqualsImpl(node0);
      Node node1 = new Node(57);
      node0.isString();
      node1.isFor();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      Node node2 = Node.newString("STRING m\n", (-2565), 50);
      node2.mayMutateArguments();
      Node node3 = node2.copyInformationFromForTree(node0);
      Node node4 = Node.newString(33, "com.google.javascript.rhino.Node$AncestorIterable");
      Node node5 = new Node(16);
      node5.isEquivalentToShallow(node1);
      node0.isEquivalentToShallow(node3);
      node3.setString("com.google.javascript.rhino.Node$AncestorIterable");
      node0.wasEmptyNode();
      node3.checkTreeEqualsImpl(node5);
      node4.isLocalResultCall();
      Node.newString("com.google.javascript.rhino.Node$AncestorIterable", 218, 2175);
      node2.getInputId();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node.newString("MU'9Uuv!MN.vm]pBl");
      node0.isFunction();
      node0.getLineno();
      Node node6 = new Node(48, node1, node5, node4);
      node3.isCast();
      node4.setType(93);
      node2.isParamList();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isWhile();
      node0.setChangeTime((-1282));
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Node node1 = new Node(78, node0, 8, 126);
      node1.isDebugger();
      node1.checkTreeEqualsImpl(node0);
      node0.clonePropsFrom(node1);
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = new Node((-3896), (-67), (-654));
      node0.setCharno(27);
      node0.setWasEmptyNode(true);
      node0.getChangeTime();
      Node node1 = new Node(30, 0, 1);
      node1.isSetterDef();
      node1.isCatch();
      node0.getProp(42);
      Node node2 = new Node(46, node1);
      node2.putBooleanProp(165, true);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node3 = node2.setJSDocInfo(jSDocInfo0);
      node2.getAncestors();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node_AncestorIterable0.iterator();
      node1.isInc();
      jSDocInfo0.setDescription("{%Bd2'c");
      Node.extractCharno(63);
      int int0 = 105;
      node2.clonePropsFrom(node0);
      node3.setLineno(int0);
      double double0 = 2.0;
      node2.isDo();
      node3.setDouble(double0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = Node.newString(1826, "^by?]B+~m8$)xH", 1826, 1826);
      Node node1 = node0.setJSDocInfo((JSDocInfo) null);
      node0.children();
      Node node2 = Node.newString(46, "^by?]B+~m8$)xH");
      node2.children();
      Node node3 = node0.clonePropsFrom(node2);
      Node node4 = Node.newString("^by?]B+~m8$)xH", 40, 1826);
      node3.isFalse();
      Node node5 = node0.copyInformationFromForTree(node4);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node4.setDirectives(linkedHashSet0);
      node2.isEquivalentToShallow(node4);
      node5.isEquivalentToShallow(node2);
      Node node6 = Node.newNumber((double) 1, 3663, 4095);
      Node node7 = new Node((-2521), node6, node6, node1, node4);
      Node node8 = new Node(38, node7, node6, node3);
      Node node9 = new Node(node3.FLAG_LOCAL_RESULTS, node4);
      node3.isBreak();
      node5.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.setDirectives((Set<String>) null);
      node0.getDouble();
      node0.removeFirstChild();
      // Undeclared exception!
      try { 
        node0.getSourceFileName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = Node.newString("~", 42, 31);
      node2.mayMutateArguments();
      Node node4 = node2.copyInformationFromForTree(node3);
      Node node5 = Node.newString(4095, " is not a number node");
      node0.isEquivalentToShallow(node1);
      node0.isEquivalentToShallow(node3);
      node1.setString("second new child has existing parent");
      node3.wasEmptyNode();
      node4.checkTreeEqualsImpl(node1);
      node2.isLocalResultCall();
      node5.useSourceInfoIfMissingFrom(node0);
      node3.getInputId();
      node5.getJSDocInfo();
      Node.newString("dD_3-dz9{k8G|&");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.isOr();
      node4.getQualifiedName();
      Node node6 = new Node(57, node5, node4);
      node2.isContinue();
      node4.isCase();
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = Node.newString(1826, "^by?]B+~m8$)xH", 1826, 1826);
      node0.setJSDocInfo((JSDocInfo) null);
      node0.children();
      Node node1 = Node.newString(46, "^by?]B+~m8$)xH");
      node1.children();
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = Node.newString("^by?]B+~m8$)xH", 40, 1826);
      node3.mayMutateArguments();
      Node node4 = node0.copyInformationFromForTree(node3);
      node1.isEquivalentToShallow(node3);
      node4.isEquivalentToShallow(node1);
      node2.setString("-=6S");
      node3.wasEmptyNode();
      node2.checkTreeEqualsImpl(node1);
      Node node5 = node2.useSourceInfoIfMissingFrom(node4);
      node3.getInputId();
      node2.getJSDocInfo();
      node0.setSourceEncodedPositionForTree(4);
      node2.isFunction();
      node5.getLineno();
      node5.isName();
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = Node.newString(".$:");
      Node node1 = new Node(3, node0, node0);
      node0.wasEmptyNode();
      node0.isAnd();
      node1.isName();
      node0.getBooleanProp(1205);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isLocalResultCall();
      node0.setSourceEncodedPosition(57);
      Node node1 = new Node(12, node0, node0);
      Node node2 = new Node(38, node1, node1);
      node2.isCast();
      node2.isCall();
      node1.getAncestors();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags5.setThrows();
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      node0.isStringKey();
      node0.isGetterDef();
      node0.getLineno();
      node2.isName();
      node2.getBooleanProp(29);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = Node.newString(".$:");
      Node node1 = new Node(31, node0, node0);
      node0.isIf();
      node1.isOr();
      node1.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = new Node(54, node0, node0, node0, 57, 15);
      node1.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1570);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node0.getSourceFileName();
      Node node2 = Node.newString(42, "<invalid>");
      node1.isIn();
      node2.isGetterDef();
      Node node3 = Node.newNumber((double) 38);
      node3.removeChildAfter(node1);
      int int0 = Node.IS_CONSTANT_NAME;
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node0 = Node.newString("is_dispatcher");
      node0.isUnscopedQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(114);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags2.setThrows();
      Node node1 = node0.getLastSibling();
      node_SideEffectFlags5.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags6.setMutatesArguments();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags3.setReturnsTainted();
      Node node2 = Node.newString(1982, "is_dispatcher");
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node0);
      node0.addChildrenToFront(node1);
      Node node4 = new Node(43, node1, node3);
      node0.isContinue();
      node0.isGetProp();
      // Undeclared exception!
      try { 
        node2.isCatch();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = Node.newString((-3496), "Z@5gkL0?6x");
      Node node1 = Node.newString("Z@5gkL0?6x", 50, 38);
      node0.setWasEmptyNode(true);
      node0.getChangeTime();
      Node node2 = Node.newString(46, "");
      node2.isIn();
      node0.isCatch();
      node2.setQuotedString();
      node2.getProp(56);
      node1.getBooleanProp(4);
      node2.isTypeOf();
      node1.isOr();
      node1.getQualifiedName();
      node1.isLocalResultCall();
      node0.isInc();
      node0.setDouble(312.35374);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node2.isInc();
      node1.setDouble(node0.IS_NAMESPACE);
      JSDocInfo jSDocInfo1 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node1.getSideEffectFlags();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -3496
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = Node.newString("", 42, 1756);
      node2.setWasEmptyNode(true);
      node0.getChangeTime();
      node2.isSetterDef();
      node1.isCatch();
      node1.getProp(34);
      node1.getBooleanProp(54);
      node1.isTypeOf();
      node2.isOr();
      node2.getQualifiedName();
      node1.isLocalResultCall();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      node2.getSideEffectFlags();
      Node node3 = new Node(15, node0, node0, 2, 55);
      node3.addChildrenToBack((Node) null);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("GG^PAq%");
      Node node1 = new Node((-1224), node0, node0, node0, (-288), 101);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      node0.addChildrenToBack((Node) null);
      node1.isTrue();
      node0.isGetElem();
      node0.isDelProp();
      // Undeclared exception!
      try { 
        node1.isFunction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = new Node(40, node0);
      node1.isLabelName();
      node0.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node_SideEffectFlags0.setMutatesThis();
      node0.isOnlyModifiesThisCall();
      Node node2 = Node.newString((-487), "f}-");
      Node node3 = Node.newString("com.googl.common.base.ChaMatcher$BitSetMatcher", (-842), 42);
      node0.setWasEmptyNode(true);
      node2.getChangeTime();
      node1.isSetterDef();
      node0.isCatch();
      Node node4 = Node.newString(1037, "", (-1638), 1850);
      node4.putBooleanProp(12, false);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node5 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node5.setJSDocInfo(jSDocInfo0);
      Node.AncestorIterable node_AncestorIterable0 = node3.getAncestors();
      node_AncestorIterable0.iterator();
      node3.putBooleanProp(85, true);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      Node node2 = Node.newString("STRING m\n", (-2565), 50);
      node2.mayMutateArguments();
      Node node3 = node2.copyInformationFromForTree(node0);
      Node node4 = Node.newString(33, "com.google.javascript.rhino.Node$AncestorIterable");
      Node node5 = new Node(16);
      node5.isEquivalentToShallow(node1);
      node0.isEquivalentToShallow(node3);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags4.setReturnsTainted();
      Node node6 = Node.newString(304, "STRING m\n");
      Node node7 = new Node(32, node0, node6);
      Node node8 = new Node(36, node4);
      Node node9 = new Node(159, node8, node2, node4, 15, 57);
      node7.isContinue();
      node5.isGetProp();
      node4.isCatch();
      node2.getJSDocInfo();
      node4.isNot();
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = ".$:";
      Node node0 = Node.newString(".$:");
      Node node1 = new Node(8, node0, node0);
      node0.getInputId();
      Node node2 = new Node(57, node1, node0, 52, 55);
      // Undeclared exception!
      try { 
        node2.isSetterDef();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = new Node(40, node0);
      node1.isLabelName();
      node0.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node_SideEffectFlags0.setMutatesThis();
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags2.setAllFlags();
      Node node2 = Node.newString(2, "com.google.common.collect.Iterators$3");
      Node node3 = new Node(39, node1, node1, 93, 47);
      Node node4 = new Node(37, node3, node1);
      int int0 = 1072;
      int int1 = 157;
      Node node5 = null;
      try {
        node5 = new Node(int0, node3, node3, node0, node2.FLAG_ARGUMENTS_UNMODIFIED, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      Node node2 = Node.newString(52, "STRING m\n");
      Node node3 = Node.newString("m", 1, 1716);
      node3.setWasEmptyNode(true);
      node2.getChangeTime();
      node1.isSetterDef();
      node2.isCatch();
      node3.isSyntheticBlock();
      node3.putBooleanProp(85, false);
      node2.getLineno();
      node2.isCast();
      node0.setType(4095);
      Node.newString(7, "m", (-1), 1);
      node1.isNumber();
      node2.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = Node.newString(4, "Z@5gkL0?6x");
      node0.isSyntheticBlock();
      Node node1 = Node.newNumber(954.38674);
      node1.setSourceEncodedPosition(51);
      node0.isBlock();
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = Node.newString(3261, " j   ");
      Node node1 = new Node(43, node0, 30, 30);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.setSourceEncodedPosition(57);
      node0.isTrue();
      Node node3 = Node.newString(55, " j   ", 8, 39);
      Node node4 = Node.newNumber(249.76167364, 29, 128);
      node0.getSideEffectFlags();
      node0.putIntProp(57, 1);
      node0.isThis();
      node1.getSourcePosition();
      node2.getSourceOffset();
      node1.setCharno((-4733));
      node2.getSourceOffset();
      node1.wasEmptyNode();
      node3.setString(" j   ");
      Node node5 = new Node(54, node4);
      node5.wasEmptyNode();
      node0.checkTreeEqualsImpl(node3);
      node1.isLocalResultCall();
      node2.getAncestor(8);
      Node.newString(" j   ", 155, 46);
      node5.getParent();
      node1.getBooleanProp(117);
      node4.setLineno((-4733));
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      node0.isWhile();
      node0.setChangeTime(29);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = new Node(15, node0);
      node1.isInstanceOf();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node1.getAncestor((-1282));
      JSType jSType0 = null;
      String string0 = "Object#Key";
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType(string0, node0, jSType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isWhile();
      node0.setChangeTime((-1282));
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = new Node((-1743), node0);
      node0.isInstanceOf();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node0.getAncestor(0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("GGPAq%", node0, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      FunctionType functionType0 = enumType1.getConstructor();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) enumType1);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node2.isEmpty();
      // Undeclared exception!
      try { 
        node0.isQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = new Node(1201, node1);
      node2.setLineno(4);
      node2.getBooleanProp(54);
      node0.isTypeOf();
      node0.setDouble(43);
      node1.isOr();
      Node node3 = node0.getLastSibling();
      node0.isLocalResultCall();
      node2.isInc();
      Node.extractCharno(29);
      node3.setDouble(418.461);
      node3.isNE();
      node2.isAnd();
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = Node.newNumber((-861.674389883374), 152, 152);
      Node node1 = Node.newString(42, "m", 32, 2464);
      node0.getAncestor(190);
      node1.getDouble();
      Node node2 = node1.copyInformationFrom(node0);
      node0.isOptionalArg();
      node1.addChildrenToFront(node2);
      node0.isQualifiedName();
      boolean boolean0 = node0.isNull();
      // Undeclared exception!
      try { 
        node2.setOptionalArg(boolean0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // THIS m 32 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = new Node(1201, node1);
      node2.setLineno(4);
      node2.getBooleanProp(54);
      node0.isTypeOf();
      node0.setDouble(43);
      node2.isGetterDef();
      Node node3 = node0.getLastSibling();
      node0.isLocalResultCall();
      node3.toStringTree();
      node0.isGetProp();
      Node node4 = new Node(52, node3, node3, node3, node1, (-2623), 40);
      node4.toString();
      node3.getIndexOfChild(node1);
      node4.setSourceEncodedPositionForTree(node0.LAST_PROP);
      int int0 = 49;
      String string0 = "]|z";
      // Undeclared exception!
      try { 
        Node.newString(int0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = Node.newNumber(3027.9539);
      Node node1 = Node.newString(49, "<X)(c&?]B}R0", 83, 37);
      Node node2 = new Node(2140586401, node0);
      node0.isEquivalentToShallow(node2);
      node0.isEquivalentTo(node2);
      node0.getSourceOffset();
      node0.wasEmptyNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isComma();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node3.isCast();
      node0.setType((-1027));
      node1.isLabelName();
      node2.isInstanceOf();
      node1.isIf();
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isParamList();
      node0.isLocalResultCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      Node node1 = new Node(2, node0, node0);
      node0.isDo();
      node1.isTypeOf();
      Node node2 = new Node(119, node0, node1);
      node2.isOr();
      node1.getLastSibling();
      node0.isLocalResultCall();
      // Undeclared exception!
      try { 
        node0.isInc();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = Node.newString(".$:");
      Node node1 = new Node(8, node0, node0);
      node1.wasEmptyNode();
      node1.isOr();
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = new Node(50);
      boolean boolean0 = node0.isOnlyModifiesThisCall();
      node0.isLocalResultCall();
      int int0 = 51;
      node0.setSourceEncodedPosition(51);
      int int1 = (-1332);
      node0.setChangeTime((-1332));
      node0.removeChild((Node) null);
      node0.setVarArgs(boolean0);
      // Undeclared exception!
      try { 
        node0.isAssignAdd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      node1.setLineno(4);
      node0.getBooleanProp(54);
      node0.isTypeOf();
      node0.setDouble(43);
      node1.isOr();
      Node node2 = node0.getLastSibling();
      node0.isLocalResultCall();
      node1.isInc();
      Node.extractCharno(29);
      node2.setDouble(4095);
      node2.isNE();
      node2.isSwitch();
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = Node.newString("Z@5gkL0?6x");
      Node.newString("Z@5gkL0?6x", 50, 38);
      Node node1 = Node.newString(46, "Z@5gkL0?6x");
      node1.isBlock();
      node0.isCatch();
      node1.setQuotedString();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      String string0 = "\\)%0UCe|\\T#~ik";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      node1.appendStringTree(mockPrintWriter0);
      node0.removeFirstChild();
      node0.getSourceFileName();
      node1.isVar();
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = "Z@5gkL0?6x";
      Node node0 = Node.newString("Z@5gkL0?6x");
      Node.newString("Z@5gkL0?6x", 50, 38);
      node0.setWasEmptyNode(true);
      node0.getChangeTime();
      Node node1 = Node.newString(46, "");
      node1.isSetterDef();
      node0.isCatch();
      node1.setQuotedString();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags3.setThrows();
      Node node2 = node1.getLastSibling();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      boolean boolean0 = true;
      node1.isEquivalentTo(node0, false, true, false);
      node2.setDouble(57);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      node3.setStaticSourceFile(simpleSourceFile0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = new Node(47, 152, 147);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) null);
      objectType0.getNormalizedReferenceName();
      node0.setJSType(objectType0);
      node0.isBlock();
      node0.getInputId();
      node0.setInputId((InputId) null);
      Node.extractCharno(153);
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      Node node2 = Node.newString(52, "STRING m\n");
      Node node3 = Node.newString("m", 1, 1716);
      node3.setWasEmptyNode(true);
      node2.getChangeTime();
      node1.isSetterDef();
      node0.isEquivalentToShallow(node3);
      String string0 = null;
      node1.setString((String) null);
      node1.wasEmptyNode();
      node2.checkTreeEqualsImpl(node3);
      node0.isLocalResultCall();
      int int0 = 93;
      int int1 = 1680;
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      node1.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node node2 = Node.newString("com.google.javascript.rhino.Node$ObjectPropListItem", 56, 4095);
      node2.removeChildren();
      node1.mayMutateArguments();
      node1.setLength((-2260));
      Node node3 = Node.newString("com.google.javascript.rhino.Node$ObjectPropListItem", 29, 54);
      node3.copyInformationFromForTree(node0);
      Node node4 = Node.newString(46, "m");
      node0.isEquivalentToShallow(node2);
      node0.wasEmptyNode();
      node0.checkTreeEqualsImpl(node1);
      node3.isLocalResultCall();
      Node node5 = Node.newString(",P[#{L)B8sEi", 4, 153);
      node4.getParent();
      node5.setChangeTime(4095);
      node5.getBooleanProp(0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isOnlyModifiesThisCall();
      node0.isLocalResultCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      node0.setVarArgs(false);
      node0.isAssignAdd();
      node0.isBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("nvs_}X?");
      node_FileLevelJsDocBuilder0.append("m");
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      node1.isLabelName();
      node1.toStringTree();
      node1.isOnlyModifiesThisCall();
      Node node2 = new Node(4, node0, node0, node1, (-121), 52);
      node2.hasChild(node0);
      Node node3 = Node.newString("STRING m\n");
      node2.getLength();
      Node.newString("com.google.javascript.rhino.Node$ObjectPropListItem", 48, (-1));
      Node node4 = Node.newString(39, "?c0#.!O84=4");
      node3.isLocalResultCall();
      Node node5 = new Node(0, node2, node4, node3, 54, 155);
      node5.isInc();
      node1.putBooleanProp(2, true);
      node3.getChildAtIndex(29);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isOnlyModifiesThisCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      node0.isThrow();
      node0.isTypeOf();
      node0.getLastSibling();
      node0.isAdd();
      node0.putBooleanProp(1, false);
      node0.getChildAtIndex(47);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node node0 = new Node(130, 754, 8297);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags5.setThrows();
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.setAllFlags();
      node0.isEmpty();
      Node node1 = new Node(15, node0);
      node1.isComma();
      node0.getChildAtIndex((-1374));
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = new Node((-464));
      node0.getInputId();
      node0.setInputId((InputId) null);
      Node node1 = new Node(30, node0, (Node) null, 56, 46);
      node0.isInc();
      // Undeclared exception!
      try { 
        node1.addChildToFront(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("GG^PAq%");
      Node node1 = new Node(148, node0);
      node1.isLabelName();
      node1.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(175);
      node0.isQualifiedName();
      node1.isComma();
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Node node0 = Node.newString(".$:");
      Node node1 = new Node(8, node0, node0);
      node0.wasEmptyNode();
      Node node2 = Node.newString(42, ".$:");
      node0.setSourceFileForTesting(";=]{De");
      node1.isNew();
      node2.isTry();
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Node node0 = Node.newString(3261, " j   ");
      Node node1 = new Node(43, node0, 30, 30);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.setSourceEncodedPosition(57);
      node0.isTrue();
      Node.newString(55, " j   ", 8, 39);
      Node node3 = Node.newNumber(249.76167364, 29, 128);
      node0.getSideEffectFlags();
      node0.putIntProp(57, 1);
      node0.isThis();
      node1.getSourcePosition();
      node2.getSourceOffset();
      node1.setCharno((-4733));
      node2.getSourceOffset();
      node1.wasEmptyNode();
      node1.isCall();
      Node node4 = new Node(38, node3, 50, 39);
      node3.setSourceFileForTesting(" j   ");
      node0.addChildToBack(node4);
      node1.isWhile();
      node4.isDefaultCase();
      Node node5 = node2.getChildBefore(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node5.LAST_PROP);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags3.areAllFlagsSet();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isOnlyModifiesThisCall();
      node0.isUnscopedQualifiedName();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      Node node1 = new Node(47, (-74), 155);
      Node node2 = Node.newString("4");
      node2.getLength();
      Node node3 = node2.useSourceInfoFromForTree(node0);
      Node node4 = new Node(55, node2, 4095, 39);
      node4.getSideEffectFlags();
      Node node5 = Node.newString(57, "4");
      node1.checkTreeEqualsImpl(node4);
      node0.addChildToBack(node5);
      node1.isRegExp();
      node3.isLabel();
      node5.toString();
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = node0.getLastSibling();
      node0.isLocalResultCall();
      Node.newNumber((double) 29);
      node1.isCast();
      Node.extractCharno(83);
      node0.isGetterDef();
      node1.isLabel();
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node node0 = Node.newString(",i[G*.}sm_ML6e&Ga,");
      node0.getSideEffectFlags();
      node0.isNoSideEffectsCall();
      node0.isLabelName();
      node0.isWhile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[3];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[6];
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.ARRAY_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSTypeNative jSTypeNative2 = JSTypeNative.TOP_LEVEL_PROTOTYPE;
      jSTypeNativeArray0[2] = jSTypeNative2;
      JSTypeNative jSTypeNative3 = JSTypeNative.U2U_FUNCTION_TYPE;
      jSTypeNativeArray0[3] = jSTypeNative3;
      JSTypeNative jSTypeNative4 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      jSTypeNativeArray0[4] = jSTypeNative4;
      JSTypeNative jSTypeNative5 = JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[5] = jSTypeNative5;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      jSTypeArray0[0] = jSType0;
      JSType.toMaybeFunctionType(jSType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType((FunctionType) null, jSType0);
      jSTypeArray0[1] = (JSType) functionType0;
      ImmutableList<TemplateType> immutableList0 = null;
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = Node.newString("Z@5gkL0?6x", 42, 31);
      node0.setDouble(3179.9);
      node2.mayMutateArguments();
      Node node4 = node2.copyInformationFromForTree(node3);
      Node node5 = Node.newString(4095, " is not a number node");
      node0.isEquivalentToShallow(node1);
      node0.isEquivalentToShallow(node3);
      node1.setString("second new child has existing parent");
      node3.wasEmptyNode();
      node4.checkTreeEqualsImpl(node1);
      node2.isLocalResultCall();
      node5.useSourceInfoIfMissingFrom(node0);
      node3.getInputId();
      node5.getJSDocInfo();
      Node node6 = Node.newString("dD_3-dz9{k8G|&");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.isOr();
      node4.getQualifiedName();
      Node node7 = new Node(57, node5, node4);
      node2.isContinue();
      node4.isCase();
      node6.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isOnlyModifiesThisCall();
      node0.isLocalResultCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      node0.setVarArgs(false);
      node0.isAssignAdd();
      Node node1 = new Node((-4733), node0, node0);
      node1.isOr();
      Node node2 = node0.getLastSibling();
      node1.isLocalResultCall();
      node2.isInc();
      node0.putBooleanProp((-2942), false);
      node1.getChildAtIndex(65536);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      node0.setVarArgs(false);
      Node node1 = new Node(1, node0);
      node1.putBooleanProp(1, true);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      node1.getAncestors();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      PriorityQueue<TemplateType> priorityQueue0 = new PriorityQueue<TemplateType>();
      ImmutableList<TemplateType> immutableList0 = ImmutableList.copyOf((Iterable<? extends TemplateType>) priorityQueue0);
      jSTypeRegistry0.createInterfaceType("", node1, immutableList0);
      Node.AncestorIterable node_AncestorIterable1 = new Node.AncestorIterable(node2);
      node_AncestorIterable1.iterator();
      node2.isInc();
      String string0 = "{%Bd2'c";
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = new Node(1201, node1);
      node2.setLineno(4);
      node2.getBooleanProp(54);
      node0.isTypeOf();
      node0.setDouble(43);
      node1.isOr();
      Node node3 = node0.getLastSibling();
      node0.isLocalResultCall();
      node1.setSourceFileForTesting((String) null);
      node2.isInc();
      Node.extractCharno(29);
      node3.setDouble(418.461);
      node3.isNE();
      node2.isAnd();
      node2.isGetterDef();
      node3.isString();
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = new Node(47, node2, node2, node2, node2);
      node2.mayMutateArguments();
      Node node4 = node2.copyInformationFromForTree(node3);
      Node.newString(4095, " is not a number node");
      node0.isEquivalentToShallow(node1);
      node0.isEquivalentToShallow(node3);
      node3.isHook();
      node4.getParent();
      node3.getBooleanProp(41);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = Node.newString(1059, "Object#Element");
      Node node2 = new Node(37, node0, node0);
      Node node3 = new Node(15, node1, node2, node1, 36, 2333);
      node3.isContinue();
      node2.isGetProp();
      node0.isCatch();
      node1.getJSDocInfo();
      node1.isDebugger();
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      Node node2 = Node.newString(52, "STRING m\n");
      Node node3 = Node.newString("m", 1, 1716);
      node3.setWasEmptyNode(true);
      node2.getChangeTime();
      node1.isSetterDef();
      node2.isCatch();
      node3.putBooleanProp(85, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.isVarArgs();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesGlobalState();
      node1.toString(true, true, true);
      node1.isOr();
      node1.setWasEmptyNode(false);
      node0.isVar();
      node2.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = new Node(54, node0, node0, node0, 57, 15);
      node1.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node0.getSourceFileName();
      node1.isIn();
      Node node2 = node1.copyInformationFrom(node0);
      node0.toString(false, false, false);
      node1.isOr();
      boolean boolean0 = true;
      node2.siblings();
      node1.addChildrenToFront(node0);
      // Undeclared exception!
      try { 
        node1.setWasEmptyNode(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Node node0 = Node.newNumber((-1830.202587366));
      Node node1 = new Node(31, node0, 54, 4095);
      node0.addChildToBack(node1);
      node1.setSourceEncodedPosition(4095);
      node1.addChildrenToFront(node0);
      node0.isDo();
      // Undeclared exception!
      try { 
        node1.getQualifiedName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Node node0 = Node.newString(4, "Z@5gkL0?6x");
      Node node1 = Node.newString("dD_3-dz9{k8G|&");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node2.isFunction();
      node0.getLineno();
      node2.replaceChildAfter(node1, node1);
      node1.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Node node0 = Node.newString("Wv6b?&6FbCMs", (-1816), 148);
      node0.setString("S");
      node0.wasEmptyNode();
      node0.checkTreeEqualsImpl(node0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((double) 2);
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node1.isAssignAdd();
      node0.isBlock();
      Node.newString(4095, "6~5");
      node0.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Node node0 = Node.newNumber(5682.3960465734835);
      Node.newString(4, "Z@5gkL0?6x");
      Node node1 = Node.newNumber(954.38674);
      Node node2 = new Node(16, node0, node0, node1, node1);
      node2.mayMutateArguments();
      Node node3 = node1.copyInformationFromForTree(node0);
      Node node4 = Node.newString(57, " is not a number node");
      node2.isEquivalentToShallow(node0);
      node0.isEquivalentToShallow(node1);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node2;
      Node node5 = new Node(40, nodeArray0);
      node2.checkTreeEquals(node2);
      Node node6 = new Node(64, node2, node1);
      nodeArray0[0].replaceChild(node6, node0);
      node4.isGetProp();
      int int0 = 1491;
      nodeArray0[0].getExistingIntProp(int0);
      node3.setSideEffectFlags(node2.FREE_CALL);
      int int1 = 51;
      int int2 = 8192;
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = Node.newString("~", 42, 31);
      node2.mayMutateArguments();
      Node node4 = node2.copyInformationFromForTree(node3);
      Node node5 = Node.newString(4095, "Z@5gkL0?6x");
      node0.isEquivalentToShallow(node1);
      node0.isEquivalentToShallow(node3);
      node3.wasEmptyNode();
      node4.checkTreeEqualsImpl(node1);
      node2.isLocalResultCall();
      Node node6 = node5.useSourceInfoIfMissingFrom(node0);
      node6.useSourceInfoIfMissingFrom(node2);
      node3.getInputId();
      node5.getJSDocInfo();
      Node.newString("dD_3-dz9{k8G|&");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node7 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node7.isFunction();
      node1.getLineno();
      node2.isCast();
      node1.getIntProp(1);
      node6.setJSDocInfo((JSDocInfo) null);
      Node.extractLineno(32);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(1171);
      node0.isOnlyModifiesThisCall();
      node0.isLocalResultCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime(51);
      node0.isAssignAdd();
      node0.isBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("zCLfdN_");
      node_FileLevelJsDocBuilder0.append("nvs_}X?");
      node_FileLevelJsDocBuilder0.append("nvs_}X?");
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Node node0 = Node.newNumber(3027.9539);
      String string0 = "'<X)\\c&?]B}ZR0";
      Node node1 = Node.newString(49, "'<X)c&?]B}ZR0", 31, 37);
      Node node2 = new Node(2140586401, node0);
      node0.isSwitch();
      node0.isEquivalentTo(node2);
      node0.getSourceOffset();
      int int0 = 302;
      node2.isBreak();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(50);
      node1.isUnscopedQualifiedName();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      node2.setSideEffectFlags(node_SideEffectFlags0);
      node1.getSourceFileName();
      Node.newString(int0, string0);
      // Undeclared exception!
      try { 
        node0.isIn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2140586401
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.children();
      Node node1 = new Node(57, node0, node0, node0, (-596), 2);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      node1.getExistingIntProp(1407);
      node1.setSideEffectFlags(node0.SIDE_EFFECT_FLAGS);
      node1.getLineno();
      // Undeclared exception!
      try { 
        node0.isCast();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 1407
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Node node0 = new Node(130, 754, 130);
      Node node1 = null;
      node0.getExistingIntProp(130);
      node0.addChildrenAfter(node1, node1);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 130
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = Node.newString(1059, "Object#Element");
      Node node2 = new Node(37, node0, node0);
      node2.getInputId();
      Node node3 = new Node(15, node1, node2, node1, 36, 2333);
      node3.isContinue();
      node2.isGetProp();
      node0.isCatch();
      node1.getJSDocInfo();
      node1.isDebugger();
      node3.isInstanceOf();
      node1.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      node1.isLabelName();
      node1.toStringTree();
      node1.isOnlyModifiesThisCall();
      node1.putIntProp(30, 38);
      node0.isThis();
      node0.setChangeTime(37);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2829);
      node1.setType(51);
      node0.isLabelName();
      node1.isVoid();
      node1.toStringTree();
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      node0.setVarArgs(true);
      Node node1 = new Node(1, node0);
      node1.putBooleanProp(1, true);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      Node.AncestorIterable node_AncestorIterable1 = new Node.AncestorIterable(node1);
      Node.AncestorIterable node_AncestorIterable2 = new Node.AncestorIterable(node2);
      node_AncestorIterable2.iterator();
      node2.isInc();
      jSDocInfo0.setDescription("{%Bd2'c");
      Node.extractCharno((-1184));
      node2.setDouble(53);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newNumber((-4702.56822), 2301, (-1427));
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setThrows();
      Node node1 = null;
      Node node2 = new Node(355, node0, (Node) null);
      node0.addChildrenAfter(node1, node2);
      Node node3 = node2.removeChildAfter(node0);
      node0.getIntProp(node3.JSDOC_INFO_PROP);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = new Node(47, node2, node2, node2, node2);
      node2.mayMutateArguments();
      Node node4 = node2.copyInformationFromForTree(node3);
      node4.setLineno((-2916));
      Node.newString(4095, " is not a number node");
      node0.isEquivalentToShallow(node1);
      node0.isEquivalentToShallow(node3);
      node3.isHook();
      node1.isNumber();
      node0.getLength();
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = new Node(54, node0, node0, node0, 57, 15);
      node1.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1570);
      node1.setChangeTime(36);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node_AncestorIterable0.iterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer2);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(57);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      Object object0 = new Object();
      node0.putProp(52, object0);
      node1.isAssignAdd();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      Node node3 = node2.setJSDocInfo(jSDocInfo0);
      node3.putBooleanProp(31, false);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(0.5);
      Node node1 = Node.newString(4095, "Z@5gkL0?6x");
      Node node2 = Node.newString("m", 30, 48);
      node2.setWasEmptyNode(false);
      node1.getChangeTime();
      node1.isSetterDef();
      node0.isCatch();
      node1.getProp(1);
      node2.isTypeOf();
      node0.isOr();
      node0.getQualifiedName();
      node0.isLocalResultCall();
      Node node3 = new Node(4095);
      node3.isInc();
      node0.setDouble((-1290.481175));
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Node node0 = Node.newString(4, "Z@5gkL0?6x");
      Node node1 = Node.newString("dD_3-dz9{k8G|&");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node0.setSideEffectFlags(node_SideEffectFlags4);
      node1.getSourceFileName();
      String string0 = "Dd`3oj2N9c<h%)H";
      // Undeclared exception!
      try { 
        Node.newString(node1.JSDOC_INFO_PROP, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got RETURN
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      Node node1 = Node.newString(47, "");
      Node node2 = node1.clonePropsFrom(node0);
      Node node3 = Node.newString("$)>3d", 43, 2);
      node1.mayMutateArguments();
      Node node4 = node2.copyInformationFromForTree(node1);
      node2.isEquivalentToShallow(node1);
      node3.isEquivalentToShallow(node2);
      node3.setString("m");
      node0.wasEmptyNode();
      node1.isLocalResultCall();
      Node.newString("com.google.javascript.rhino.Node$IntPropListItem", 3087, 692);
      node0.getParent();
      node4.getBooleanProp(110);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isOnlyModifiesThisCall();
      node0.isLocalResultCall();
      node0.setSourceEncodedPosition(51);
      node0.mayMutateArguments();
      Node node1 = Node.newString(3, "j!`", 2897, (-3367));
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.isEquivalentToShallow(node2);
      node2.copyInformationFromForTree(node0);
      node1.isEquivalentToShallow(node2);
      node0.setString("j!`");
      node0.isNew();
      node0.checkTreeEqualsImpl(node1);
      int int0 = 50;
      int int1 = 305;
      int int2 = (-3200);
      Node node3 = null;
      try {
        node3 = new Node(int0, node1, node0, node0, int1, int2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("GGPAq%");
      Node node1 = new Node(148, node0);
      node1.isLabelName();
      node1.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags7.setThrows();
      node_SideEffectFlags6.setMutatesGlobalState();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags8 = new Node.SideEffectFlags(51);
      node_SideEffectFlags8.clearAllFlags();
      node_SideEffectFlags6.setReturnsTainted();
      Node node2 = Node.newNumber((-182.0));
      node2.isEmpty();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node2.isExprResult();
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = Node.newNumber((double) 36);
      Node node3 = new Node(47, node2, node2, node2, node2);
      node2.mayMutateArguments();
      node2.copyInformationFromForTree(node3);
      Node node4 = Node.newString(4095, " is not a number node");
      node0.isEquivalentToShallow(node1);
      node0.isEquivalentToShallow(node3);
      node3.mayMutateGlobalStateOrThrow();
      node2.removeProp(8);
      Node.newString(0, "VgO90ppyfkic");
      node2.isUnscopedQualifiedName();
      node4.setLineno(46);
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Node node0 = Node.newString(1826, "^by?]B+~m8$)xH", 1826, 1826);
      Node node1 = node0.setJSDocInfo((JSDocInfo) null);
      node0.children();
      Node node2 = Node.newString(46, "^by?]B+~m8$)xH");
      node2.children();
      Node node3 = node0.clonePropsFrom(node2);
      Node.newString("^by?]B+~m8$)xH", 40, 1826);
      node2.setChangeTime(12);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Class<JSType> class0 = JSType.class;
      ServiceLoader<JSType> serviceLoader0 = ServiceLoader.load(class0);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) serviceLoader0);
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node4.setVarArgs(false);
      node3.isAssignAdd();
      node4.isBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append((String) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags3.areAllFlagsSet();
      node1.isStringKey();
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Node node0 = new Node((-850));
      node0.isStringKey();
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Node node0 = Node.newString(4, "Z@5gkL0?6x");
      Node node1 = Node.newNumber(954.38674);
      node0.isBlock();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.areAllFlagsSet();
      node0.isStringKey();
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Node node0 = Node.newNumber(2833.9677984996024);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = Node.newString("Z@5gkL0?6x", 42, 1756);
      node0.getChangeTime();
      node2.isSetterDef();
      node0.isOnlyModifiesArgumentsCall();
      node1.isCatch();
      node1.getProp(34);
      node1.isTypeOf();
      node2.isOr();
      node2.getQualifiedName();
      node1.isLocalResultCall();
      node2.isInc();
      node2.setDouble(43);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node3 = jSDocInfo0.getAssociatedNode();
      node3.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node1 = new Node((-2188), node0, node0);
      Node node2 = node1.srcref(node0);
      Node node3 = node2.getChildAtIndex(42);
      // Undeclared exception!
      try { 
        node3.toStringTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = Node.newString("~", 42, 31);
      node2.mayMutateArguments();
      Node node4 = node2.copyInformationFromForTree(node3);
      Node node5 = Node.newString(4095, " is not a number node");
      node0.isEquivalentToShallow(node1);
      node0.isEquivalentToShallow(node3);
      node1.setString("second new child has existing parent");
      node3.wasEmptyNode();
      node4.checkTreeEqualsImpl(node1);
      node2.isLocalResultCall();
      node5.useSourceInfoIfMissingFrom(node0);
      node3.getInputId();
      node5.getJSDocInfo();
      Node node6 = Node.newString(" is not a number node");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.isOr();
      node4.getQualifiedName();
      Node node7 = new Node(57, node5, node4);
      node2.isContinue();
      node4.isCase();
      node6.isNull();
      node3.toString();
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isOnlyModifiesThisCall();
      node0.setChangeTime((-1332));
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node0.getAncestors();
      node0.isEquivalentTo(node1, false, false, false);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      Node.newString(2, "duplicate child");
      Node.AncestorIterable node_AncestorIterable1 = new Node.AncestorIterable(node1);
      node_AncestorIterable0.iterator();
      node1.isInc();
      jSDocInfo0.setDescription("");
      Node.extractCharno((-1632));
      node0.setLineno((-916));
      node0.setDouble(4095);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isParamList();
      node0.isLocalResultCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      Node node1 = new Node(2, node0, node0);
      node0.isDo();
      node0.getInputId();
      node1.getJSDocInfo();
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(31, nodeArray0);
      node0.setSourceEncodedPositionForTree(40);
      node1.isFunction();
      node2.getLineno();
      Node node3 = new Node(42, 55, 53);
      node3.isCast();
      node3.getBooleanProp(8);
      node1.getLastChild();
      node0.checkTreeEquals(node2);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isLabelName();
      node0.isEquivalentToShallow(node0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node1 = new Node(1, node0, 3128, (-1508));
      node1.isDebugger();
      node0.checkTreeEqualsImpl(node1);
      Node node2 = node0.clonePropsFrom((Node) null);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[1] = node2;
      Node node3 = new Node(node0.DECR_FLAG, nodeArray0);
      node3.isOnlyModifiesThisCall();
      nodeArray0[1].addChildrenToFront(node1);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = Node.newNumber((double) 36);
      Node node3 = new Node(47, node2, node2, node2, node2);
      node2.mayMutateArguments();
      Node node4 = node2.copyInformationFromForTree(node3);
      Node.newString(4095, " is not a number node");
      node0.isEquivalentToShallow(node1);
      node0.isEquivalentToShallow(node3);
      node3.isBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("Z@5gkL0?6x");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags3.areAllFlagsSet();
      node3.isStringKey();
      node4.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Node node0 = Node.newString(1826, "^by?]B+~m8$)xH", 1826, 1826);
      node0.setJSDocInfo((JSDocInfo) null);
      node0.children();
      Node node1 = Node.newString(46, "^by?]B+~m8$)xH");
      node1.children();
      Node node2 = node0.clonePropsFrom(node1);
      Node.newString("^by?]B+~m8$)xH", 40, 1826);
      node1.setChangeTime(12);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Class<JSType> class0 = JSType.class;
      ServiceLoader<JSType> serviceLoader0 = ServiceLoader.load(class0);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) serviceLoader0);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node3.setVarArgs(false);
      node2.isAssignAdd();
      node3.mayMutateGlobalStateOrThrow();
      node2.removeProp(8);
      Node.newString(2619, "VgO90ppyfkic");
      node3.isUnscopedQualifiedName();
      node3.setLineno(2);
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Node node0 = Node.newString(".$:");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setAllFlags();
      Node node1 = new Node(8, node0, node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.isEquivalentToShallow(node0);
      node1.isEquivalentToShallow(node2);
      node0.setString(".$:");
      node2.setWasEmptyNode(true);
      node1.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = new Node(54, node0, node0, node0, 57, 15);
      node1.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node0.getSourceFileName();
      node1.isIn();
      Node node2 = node1.copyInformationFrom(node0);
      node0.toString(false, false, false);
      node1.isOr();
      node1.setWasEmptyNode(true);
      node0.isVar();
      node2.isEquivalentTo(node1, false, true, false);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = new Node(54, node0, node0, node0, 57, 15);
      node1.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1570);
      node1.setChangeTime(36);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.setNoShadow(true);
      JSDocInfo jSDocInfo1 = new JSDocInfo(true);
      Node node2 = node1.setJSDocInfo(jSDocInfo1);
      Node node3 = new Node((-574));
      node3.isQualifiedName();
      node3.getLastChild();
      node1.useSourceInfoFrom(node2);
      node1.isQuotedString();
      Node.AncestorIterable node_AncestorIterable0 = node3.getAncestors();
      Node.AncestorIterable node_AncestorIterable1 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      node2.putBooleanProp(40, false);
      node1.isGetElem();
      node2.setSideEffectFlags(node_SideEffectFlags0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isQuotedString();
      node0.setDirectives((Set<String>) null);
      node0.isCast();
      node0.isVar();
      node0.addSuppression("Object#Element");
      node0.setType(113);
      node0.isLabelName();
      node0.isVar();
      node0.toString();
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 87, 87);
      Node node1 = new Node((-3432), node0, 47, 1043);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.isDec();
      node0.isNE();
      int int0 = 5950;
      node0.setQuotedString();
      String string0 = " is not a number node";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        node1.getJSType();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.getType();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jSTypeRegistry0;
      objectArray0[1] = (Object) simpleErrorReporter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) immutableList0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) node0;
      objectArray0[6] = (Object) "GGPAq%";
      SimpleErrorReporter.getMessage("GGPAq%", objectArray0);
      int int0 = 13;
      Node node1 = null;
      try {
        node1 = new Node(int0, node0, node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property GGPAq%
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      node0.isVoid();
      Node node1 = new Node(29, 57, 4095);
      node1.addChildrenAfter(node0, node0);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Node node0 = Node.newNumber(3027.9539);
      Node node1 = Node.newString(49, "<X)(c&?]B}R0", 83, 37);
      Node node2 = node1.useSourceInfoFrom(node0);
      Node node3 = new Node(2140586401, node0);
      node0.isEquivalentToShallow(node3);
      node0.isEquivalentTo(node3);
      node0.getSourceOffset();
      node0.wasEmptyNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isComma();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node4 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node4.isCast();
      node0.setType((-1027));
      node1.isLabelName();
      node1.isVar();
      node2.isVoid();
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = new Node(54, node0, node0, node0, 57, 15);
      node1.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1570);
      node1.setChangeTime(36);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node_AncestorIterable0.iterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer2);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(57);
      node0.getSideEffectFlags();
      Node.newString(118, "x7!z{?j#.d@MP.|h^z");
      node1.setType(4095);
      node0.isLabelName();
      node1.isVar();
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = new Node(54, node0, node0, node0, 57, 15);
      node1.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1570);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node0.getSourceFileName();
      node1.isIn();
      Node node2 = node1.copyInformationFrom(node0);
      node0.toString(false, false, false);
      node2.isEquivalentTo(node1);
      node1.isOr();
      node1.setWasEmptyNode(true);
      node0.isVar();
      node2.isEquivalentTo(node1, false, true, false);
      node2.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isOnlyModifiesThisCall();
      node0.isLocalResultCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      node0.setVarArgs(false);
      node0.isAssignAdd();
      node0.isBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("nvs_}X?");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder1.append("nvs_}X?");
      node0.isDefaultCase();
      node0.isComma();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber((double) 4095);
      node0.toStringTree();
      node1.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node node2 = new Node(55, node1, node0, node0, node0, 46, 4);
      node2.cloneNode();
      node0.getParent();
      Node node3 = new Node(48, (Node[]) null, 43, (-2597));
      node1.isArrayLit();
      node0.isOptionalArg();
      int int0 = 50;
      int int1 = 309;
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Node node0 = Node.newString(3261, " j   ");
      Node node1 = new Node(43, node0, 30, 30);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.setSourceEncodedPosition(57);
      node0.isTrue();
      Node.newString(55, " j   ", 8, 39);
      Node node3 = Node.newNumber(249.29222471690716, 29, 128);
      node0.getSideEffectFlags();
      node0.putIntProp(57, 1);
      node0.isThis();
      node1.getSourcePosition();
      node1.setCharno((-4733));
      node2.getSourceOffset();
      node2.useSourceInfoFromForTree(node0);
      node1.isParamList();
      node1.isCall();
      Node node4 = Node.newString(" j   ");
      node2.wasEmptyNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node5 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node3.checkTreeEqualsImpl(node5);
      node0.isLocalResultCall();
      Node node6 = Node.newString("MUL", 42, 97);
      node6.getParent();
      node5.setChangeTime(3435);
      node4.getBooleanProp(8);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1816));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.children();
      Node node1 = new Node(57, node0, node0, node0, (-596), 2);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      node1.getSourceFileName();
      node0.isIn();
      node1.isGetterDef();
      node1.getLineno();
      node1.isName();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      node0.toStringTree();
      node1.isLabelName();
      node1.toStringTree();
      node1.isOnlyModifiesThisCall();
      node0.getSideEffectFlags();
      node1.putIntProp(30, 38);
      node0.isThis();
      node0.getSourcePosition();
      node1.getSourceOffset();
      node1.setCharno(43);
      node0.getSourceOffset();
      Node node2 = new Node((-3620), node0, node0);
      node2.isParamList();
      node2.isCall();
      Node node3 = Node.newString("com.google.common.collect.AbstractMultimap$Entries");
      Node node4 = new Node((-503), node3, node0, node0, node1, 52, 4095);
      node0.addChildToBack(node4);
      node2.isWhile();
      node3.isDefaultCase();
      node1.getChildBefore(node3);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node1.SYNTHETIC_BLOCK_PROP);
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setMutatesThis();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = Node.newString("~", 42, 31);
      node2.mayMutateArguments();
      Node node4 = node2.copyInformationFromForTree(node3);
      Node node5 = Node.newString(4095, " is not a number node");
      node3.cloneTree();
      node0.isEquivalentToShallow(node1);
      node0.isEquivalentToShallow(node3);
      node1.setString("second new child has existing parent");
      node4.checkTreeEqualsImpl(node1);
      node2.isLocalResultCall();
      node5.useSourceInfoIfMissingFrom(node0);
      node3.getInputId();
      node5.getJSDocInfo();
      Node node6 = Node.newString(" is not a number node");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.isOr();
      node4.getQualifiedName();
      Node node7 = new Node(57, node5, node4);
      node2.isContinue();
      node4.isCase();
      node0.putProp(50, (Object) null);
      node6.isNull();
      node3.toString();
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Node node0 = new Node(50);
      Node node1 = new Node(2, node0, node0, node0, 4574, 51);
      node1.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(46);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags2.clearAllFlags();
      node0.getSourceFileName();
      boolean boolean0 = node0.isIn();
      Node node2 = node0.copyInformationFrom(node1);
      node0.toString(false, false, false);
      node0.isOr();
      node2.setWasEmptyNode(boolean0);
      // Undeclared exception!
      try { 
        node0.isVar();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      node0.isOnlyModifiesThisCall();
      node0.setChangeTime((-1332));
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.getAncestors();
      Node node2 = new Node(39, node1, node1, node0);
      node1.isEquivalentTo(node2, true, true, false);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      Node.AncestorIterable node_AncestorIterable1 = new Node.AncestorIterable((Node) null);
      node_AncestorIterable0.iterator();
      node2.isInc();
      jSDocInfo0.setDescription("");
      Node.extractCharno((-1139));
      node2.setLineno(50);
      node2.setDouble(12);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      int int0 = 122;
      Node node0 = new Node(122);
      node0.isWhile();
      node0.copyInformationFrom((Node) null);
      int int1 = (-833);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Node node0 = Node.newNumber((-1991.93769507528));
      node0.isCast();
      Node node1 = new Node(9, node0, 126, 8297);
      node1.checkTreeEqualsImpl(node0);
      Node node2 = new Node(12, node1, node1, node1, node1, 42, 47);
      Node node3 = new Node(2, node2, node2);
      node1.addChildrenAfter(node3, node0);
      node1.removeChildAfter(node0);
      node1.getIntProp(4095);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Node node0 = Node.newString("Z@5gkL0?6x");
      Node node1 = Node.newString("Z@5gkL0?6x", 50, 38);
      node0.getChangeTime();
      Node node2 = Node.newString(46, "");
      node2.isBlock();
      node0.isCatch();
      node2.setQuotedString();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags3.setThrows();
      node2.getLastSibling();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node3 = new Node(1, node0, node0, node1, node0, 2, 1);
      node0.isIn();
      node3.isGetterDef();
      Node node4 = node3.removeChildAfter(node1);
      node1.getIntProp((-137));
      node4.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Node node0 = new Node((-2914), (-2146), (-2914));
      Node node1 = new Node(57, node0, node0, node0, node0, 2, 3434);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayDeque<UnknownType> arrayDeque0 = new ArrayDeque<UnknownType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) arrayDeque0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      arrayDeque0.add(unknownType0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.getCharno();
      node0.isAssignAdd();
      Node node1 = Node.newString("Number node not created with Node.newNumber", 49, 46);
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0);
      Node node1 = Node.newString(2349, "Z@5gkL0?6x");
      Node node2 = new Node(124, nodeArray0);
      node0.useSourceInfoIfMissingFrom(node2);
      node1.isTypeOf();
      node0.removeProp(38);
      Node node3 = Node.newString(925, "Z@5gkL0?6x");
      node3.isUnscopedQualifiedName();
      node2.setLineno(4095);
      node2.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Node node0 = Node.newString(1826, "^by?]B+~m8$)xH", 1826, 1826);
      node0.children();
      Node node1 = Node.newString(46, "^by?]B+~m8$)xH");
      node1.children();
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = Node.newString("^by?]B+~m8$)xH", 40, 1826);
      node2.isFalse();
      Node node4 = node0.copyInformationFromForTree(node3);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node3.setDirectives(linkedHashSet0);
      node1.isEquivalentToShallow(node3);
      node4.isEquivalentToShallow(node1);
      Node node5 = Node.newNumber((double) 1, 3663, 4095);
      node2.isInc();
      Node.extractCharno(53);
      node5.setDouble(0.0);
      node3.isNE();
      node2.isAnd();
      node0.isGetterDef();
      node4.isString();
      node1.isEquivalentToTyped(node2);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newNumber((-4702.56822), 2301, (-1427));
      node0.isEquivalentToTyped((Node) null);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals(node0);
      node0.getSourcePosition();
      // Undeclared exception!
      try { 
        node0.getSourceOffset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isOnlyModifiesThisCall();
      node0.isLocalResultCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      Node node1 = new Node(166, node0, node0, node0, 4, (-1628));
      Node node2 = Node.newNumber(5682.3960465734835, 1, (-1430));
      node1.hasChild(node2);
      Node node3 = Node.newString("StringNode: str is null");
      int int0 = 41;
      Node node4 = new Node(55, 41, 118);
      node4.getLength();
      Node.newString("com.google.javascript.rhino.Node$ObjectPropListItem", 37, 51);
      Node.newString(4095, "");
      node1.isLocalResultCall();
      Node node5 = new Node(4095, node3, node4, (Node) null, 56, 8);
      node1.isInc();
      boolean boolean0 = true;
      node3.putBooleanProp(node5.SIDE_EFFECTS_FLAGS_MASK, boolean0);
      Node node6 = new Node(node2.OPT_ARG_NAME);
      node6.getChildAtIndex(int0);
      int int1 = 22;
      node5.setSideEffectFlags(int1);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      int int0 = (-933);
      Node node0 = null;
      Node node1 = new Node((-933), (Node) null, (Node) null, (Node) null, 53, 53);
      int int1 = 35;
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Node node0 = new Node(130, 754, 8297);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags6.setReturnsTainted();
      node_SideEffectFlags5.setAllFlags();
      node_SideEffectFlags2.setThrows();
      Node node1 = node0.getLastSibling();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node2 = new Node(38, node0, node0, node0, node1, 117, (-1446));
      node2.isLabelName();
      int int0 = 436;
      JSType[] jSTypeArray0 = null;
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((JSType[]) null);
      Node node4 = new Node(int0, node3);
      node4.isInstanceOf();
      int int1 = 19;
      node0.setLineno(int1);
      Node node5 = Node.newString(jSTypeRegistry0.OBJECT_INDEX_TEMPLATE);
      node5.getSourcePosition();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Node node0 = Node.newString("   ");
      node0.isFalse();
      node0.setSideEffectFlags(2524);
      double double0 = 2208.2917417075605;
      // Undeclared exception!
      try { 
        node0.setDouble(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("GG^PAq%");
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.isLocalResultCall();
      Node.newString(4095, "GG^PAq%");
      node0.isDo();
      Node node2 = Node.newString("GG^PAq%", 256, 32);
      node2.isAnd();
      node0.isGetterDef();
      node2.isString();
      Node node3 = new Node(2050, (-1773), 1865);
      node2.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Node node0 = Node.newNumber(5682.3960465734835);
      Node.newString("Z@5gkL0?6m6x");
      Node node1 = Node.newNumber(954.38674);
      Node node2 = new Node((-5), node0, node0, node1, node1);
      node1.isAssignAdd();
      node1.copyInformationFromForTree(node1);
      Node.newString("Z@5gkL0?6m6x");
      node2.isEquivalentToShallow(node0);
      node0.isEquivalentToShallow(node1);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node2;
      Node node3 = Node.newString(" is not a number node", 47, 48);
      node2.checkTreeEquals(node2);
      node1.setType(32);
      node0.isLabelName();
      Node node4 = Node.newNumber((double) 0, 16, 4095);
      node4.isVar();
      node2.cloneTree();
      node0.isScript();
      node3.isAnd();
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString((-1656), "2N&PLIU8)6vOu", 42, (-1181));
      nodeArray0[0] = node0;
      Node node1 = new Node(42, nodeArray0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("2N&PLIU8)6vOu");
      node1.isStringKey();
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      int int0 = 2963;
      Node node0 = null;
      Node node1 = new Node(83, (Node) null, (Node) null, (Node) null, (Node) null);
      // Undeclared exception!
      try { 
        node1.getSideEffectFlags();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isOnlyModifiesThisCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1369));
      node0.isThrow();
      Node node1 = node0.getLastSibling();
      node1.isVarArgs();
      node0.setCharno(2);
      node0.isAdd();
      node1.isName();
      node1.mayMutateGlobalStateOrThrow();
      node1.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Node node0 = Node.newNumber(237.9430186572542);
      node0.isUnscopedQualifiedName();
      node0.setSourceFileForTesting("synthetic");
      Object object0 = new Object();
      node0.detachChildren();
      node0.isDelProp();
      node0.isGetterDef();
      Node node1 = Node.newString("STRING m\n", 570, 96);
      node1.setOptionalArg(true);
      node0.setIsSyntheticBlock(false);
      node1.isOptionalArg();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node node2 = new Node(40, node1, node1, (-753), 1);
      Node node3 = node1.copyInformationFrom(node2);
      node1.setDouble(31);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isAdd();
      node0.isGetterDef();
      node3.removeChildAfter(node1);
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Node node0 = Node.newNumber(237.9430186572542);
      node0.isUnscopedQualifiedName();
      node0.setSourceFileForTesting("synthetic");
      Object object0 = new Object();
      node0.putProp(45, object0);
      node0.isComma();
      node0.detachChildren();
      node0.isDelProp();
      node0.isGetterDef();
      Node node1 = Node.newString("STRING m\n", 570, 96);
      node1.setOptionalArg(true);
      node0.setIsSyntheticBlock(false);
      node1.isOptionalArg();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node node2 = new Node(125, node1, node1, (-753), 1);
      node1.copyInformationFrom(node2);
      node1.setDouble(31);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isAdd();
      node1.checkTreeEquals(node0);
      node1.isEmpty();
      node1.checkTreeEqualsImpl(node0);
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(294, "mP_Qbg~.+= @20K)", 294, 294);
      node0.setQuotedString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.getStaticSourceFile();
      node0.isQuotedString();
      Node node1 = Node.newString("NB8J$J@S1B");
      node0.addChildrenAfter(node1, node1);
      Node node2 = node0.getLastSibling();
      node2.getIntProp(node1.QUOTED_PROP);
      node2.checkTreeEqualsImpl(node0);
      node0.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString("'", 83, 2591);
      Node node1 = new Node(2969, node0, node0, 1023, 54);
      node1.isLabel();
      Node node2 = node1.copyInformationFrom(node0);
      node1.detachChildren();
      node1.getString();
      Node node3 = node0.removeFirstChild();
      node0.detachFromParent();
      node3.isOnlyModifiesArgumentsCall();
      node3.getSideEffectFlags();
      node2.isHook();
      // Undeclared exception!
      try { 
        node0.isLocalResultCall();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2969
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Node node0 = Node.newNumber(5682.3960465734835);
      Node.newString(4, "Z@5gkL0?6x");
      Node node1 = Node.newNumber(954.38674);
      Node node2 = new Node(16, node0, node0, node1, node1);
      node2.mayMutateArguments();
      Node node3 = node1.copyInformationFromForTree(node0);
      Node node4 = Node.newString(57, " is not a number node");
      node1.isFalse();
      node0.isEquivalentToShallow(node1);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node2;
      Node node5 = new Node(29, node2, node3, node3, 30, 4095);
      nodeArray0[0].checkTreeEquals(nodeArray0[0]);
      int int0 = 41;
      Node node6 = new Node(int0, node2, node1);
      nodeArray0[0].replaceChild(node6, node0);
      node4.isGetProp();
      int int1 = 1491;
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Node node0 = Node.newString(1826, "^by?]B+~m8$)xH", 1826, 1826);
      node0.children();
      Node node1 = Node.newString(46, "^by?]B+~m8$)xH");
      node1.children();
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = Node.newString("^by?]B+~m8$)xH", 40, 1826);
      Node node4 = node0.copyInformationFromForTree(node3);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node3.setDirectives(linkedHashSet0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(62);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node4.getLastSibling();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.checkTreeEquals(node0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node5 = new Node(54, node0, node4, node2, node1, 114, 16);
      Node node6 = Node.newNumber(312.35374);
      node6.isIn();
      node4.isGetterDef();
      node5.removeChildAfter(node6);
      int int0 = 102;
      node0.getIntProp(int0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(49, "Z@5gkL0?6x");
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = Node.newString("~", 42, 31);
      node2.mayMutateArguments();
      Node node4 = node2.copyInformationFromForTree(node3);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.clearAllFlags();
      node1.getSourceFileName();
      node2.isIn();
      Node node5 = new Node(154, node1, node3, node1, node1, 29, 7);
      node5.copyInformationFrom(node3);
      node2.isOr();
      node4.setWasEmptyNode(false);
      node4.isVar();
      node4.isEquivalentTo(node3, true, true, true);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Node node0 = Node.newString("x9D96q");
      node0.setType(2331);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node1 = new Node(154, node0, 42, 2331);
      node1.isDebugger();
      node1.checkTreeEqualsImpl(node0);
      node0.isEquivalentTo(node1, false, false, false);
      node1.getSourceFileName();
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = new Node(54, node0, node0, node0, 57, 15);
      node1.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1570);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node0.getSourceFileName();
      node1.isIn();
      Node node2 = node1.copyInformationFrom(node0);
      node0.toString(false, false, false);
      node1.isOr();
      node1.removeChildren();
      node1.setWasEmptyNode(true);
      node0.isVar();
      node2.isEquivalentTo(node1, false, true, false);
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = new Node(1201, node1);
      node2.setLineno(4);
      node2.getBooleanProp(54);
      node0.isTypeOf();
      node0.setDouble(43);
      node1.isOr();
      node0.getLastSibling();
      node0.isLocalResultCall();
      node1.setSourceFileForTesting((String) null);
      node2.isInc();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(8);
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.newNumber((double) 42);
      node2.isEmpty();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node2.isExprResult();
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Node node0 = Node.newString("jkuCy");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isBlock();
      node1.setLineno(100);
      node1.getBooleanProp(124);
      node0.isTypeOf();
      node0.isOr();
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      immutableList0.replaceAll(unaryOperator0);
      node1.addChildrenToBack(node0);
      Node node2 = node1.getLastSibling();
      node0.hasOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(595);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node2.setSideEffectFlags(node_SideEffectFlags0);
      node1.siblings();
      node0.addChildAfter(node1, node2);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Node node0 = Node.newString("O *a");
      node0.isFalse();
      Node node1 = new Node(1383, node0, node0, node0, 155, 53);
      node1.getSourceOffset();
      node1.wasEmptyNode();
      node0.isUnscopedQualifiedName();
      node0.isIn();
      node1.addChildAfter(node0, node0);
      node0.isLocalResultCall();
      node1.getIntProp(node0.IS_DISPATCHER);
      int int0 = null;
      try {  
      int0 = Node.COLUMN_MASK;
      } catch(MockIllegalArgumentException e) {}
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      Node node1 = new Node(1, node0);
      node1.putBooleanProp(1, true);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      Node.AncestorIterable node_AncestorIterable1 = new Node.AncestorIterable(node1);
      Node.AncestorIterable node_AncestorIterable2 = new Node.AncestorIterable(node2);
      node_AncestorIterable2.iterator();
      Node node3 = Node.newString(8, "Object#Element", (-571), 2723);
      Node node4 = null;
      node3.isEquivalentTo((Node) null, false, true, true);
      Node node5 = new Node(node1.INPUT_ID, node2, node0, node2);
      node5.wasEmptyNode();
      node3.addChildrenAfter(node4, node0);
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
      Node node6 = jSTypeRegistry1.createParameters((List<JSType>) immutableList0);
      // Undeclared exception!
      try { 
        node6.getSourcePosition();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Node node0 = new Node(130, 754, 8297);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.setMutatesGlobalState();
      node0.isNE();
      node0.isAnd();
      node0.isGetterDef();
      node0.isString();
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Node node0 = Node.newNumber(3027.9539);
      Node node1 = Node.newString(49, "<X)(c&?]B}R0", 83, 37);
      Node node2 = new Node(2140586401, node0);
      node0.isEquivalentToShallow(node2);
      node0.isEquivalentTo(node2);
      node0.getSourceOffset();
      node0.wasEmptyNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isComma();
      node1.getSourceOffset();
      Node node3 = new Node(83, 153, 8);
      node3.isAssignAdd();
      node3.isBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node3.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append((String) null);
      node_FileLevelJsDocBuilder0.append("CAST");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node3.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder1.append("GGPAq%");
      node3.isDefaultCase();
      node2.isComma();
      Node node4 = new Node(36, node1, node1, node1);
      node4.addChildToFront(node1);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      Node node1 = new Node(0, node0, node0, node0, 50, 2593);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node1.setChangeTime(0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node node2 = new Node(55, node1);
      Node node3 = Node.newString(15, "GGPAq%");
      Node node4 = new Node(38, node3, node3);
      node2.isContinue();
      Node.extractCharno(4);
      node4.isThrow();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node4.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Node node0 = Node.newString(3260, " j   ");
      Node node1 = new Node(43, node0, 30, 30);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.setSourceEncodedPosition(57);
      node2.isBlock();
      node0.isCatch();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node3 = new Node(51, nodeArray0);
      node3.setQuotedString();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setMutatesThis();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSType[] jSTypeArray0 = new JSType[0];
      node_SideEffectFlags0.setMutatesArguments();
      Node node0 = Node.newString((-2546), "*9+AwE$KaPoz9~");
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Node node0 = Node.newNumber(954.38674);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      node0.isOptionalArg();
      Node node1 = new Node(85, node0, node0, node0, (-865), (-534));
      node0.addChildrenToBack(node1);
      Node.newString(42, "kCy", 54, 53);
      node1.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Node node0 = Node.newNumber(3027.9539);
      Node node1 = Node.newString(49, "<X)(c&?]B}R0", 83, 37);
      Node node2 = node1.useSourceInfoFrom(node0);
      Node node3 = new Node(2140586401, node0);
      node0.isEquivalentToShallow(node3);
      node0.isEquivalentTo(node3);
      node0.getSourceOffset();
      node0.wasEmptyNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isComma();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      Node node4 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node4.isCast();
      node2.setType(54);
      node4.hasOneChild();
      Node node5 = new Node((-247), node0);
      node5.isInstanceOf();
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isGetElem();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1295));
      Node node1 = Node.newString("G#Y=!QGis?XWq-=v&k'");
      node1.mayMutateArguments();
      node1.getLength();
      Node node2 = new Node(55, node1, 4095, 39);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3260);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.valueOf();
      node2.mayMutateGlobalStateOrThrow();
      node1.removeProp(31);
      Node.newString(42, "");
      node2.isTry();
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Node node0 = Node.newNumber((-1965.8338512590935), (-490), 214);
      Node node1 = null;
      node0.cloneTree();
      Node node2 = node0.useSourceInfoFromForTree((Node) null);
      node2.replaceChild(node0, node1);
      node0.isThis();
      // Undeclared exception!
      try { 
        node0.children();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_TYPE;
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      linkedList0.add(jSType0);
      Node node1 = new Node(8, node0, node0, node0, 53, 55);
      node1.setLineno(2);
      node0.addChildrenToFront(node1);
      Node node2 = Node.newString(55, "X{o6I:", 1, 1);
      node2.getInputId();
      node1.isSetterDef();
      Node.newString("com.google.javascript.rhino.Node$NumberNode");
      node1.isScript();
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Node node0 = Node.newString("4");
      Node node1 = new Node((-1583), 49, 0);
      node0.copyInformationFrom(node1);
      node0.mayMutateArguments();
      int int0 = Node.OPT_ARG_NAME;
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = Node.newString(1059, "Object#Element");
      Node node2 = new Node(37, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      jSTypeRegistry0.getGreatestSubtypeWithProperty(objectType0, "Unknown class name");
      Node node3 = new Node(15, node1, node2, node1, 36, 2333);
      node3.isContinue();
      node2.isGetProp();
      node1.isThis();
      node1.getJSDocInfo();
      node1.isDebugger();
      node2.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.hasChildren();
      node0.setLineno(43);
      node0.getBooleanProp(43);
      node0.isTypeOf();
      node0.isCatch();
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      immutableList0.replaceAll(unaryOperator0);
      Node node1 = node0.getLastSibling();
      node1.isLocalResultCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(13);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node node2 = Node.newNumber((double) 49);
      node2.hasChildren();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.isExprResult();
      node0.isExprResult();
      node2.isCase();
      node0.clonePropsFrom(node2);
      node1.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isAssign();
      Node node1 = Node.newString(" W$");
      node1.isLocalResultCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      node0.srcrefTree(node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      node0.addChildToBack((Node) null);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Node node0 = Node.newNumber(3027.9539);
      Node node1 = Node.newString(49, "<X)(c&?]B}R0", 83, 37);
      node1.useSourceInfoFrom(node0);
      Node node2 = new Node(2140586401, node0);
      node0.isEquivalentToShallow(node2);
      node0.isEquivalentTo(node2);
      node0.getSourceOffset();
      node0.wasEmptyNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isComma();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getString();
      node3.isCast();
      int int0 = (-1027);
      node0.setType(int0);
      node1.isLabelName();
      int int1 = 1081;
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.setDirectives((Set<String>) null);
      node0.isCast();
      node0.isVar();
      Node.mergeLineCharNo(102, (-3488));
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      String string0 = " j   ";
      Node node0 = Node.newString(3261, " j   ");
      Node node1 = new Node(43, node0, 30, 30);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.setSourceEncodedPosition(57);
      node0.isTrue();
      Node node3 = Node.newString(55, " j   ", 8, 39);
      Node.newNumber(249.29222471690716, 29, 128);
      node0.getSideEffectFlags();
      node0.putIntProp(57, 1);
      node0.isThis();
      node1.getSourcePosition();
      node2.getSourceOffset();
      node1.setCharno((-4733));
      node2.getSourceOffset();
      node1.addChildAfter(node3, node3);
      node1.isParamList();
      node1.isCall();
      Node node4 = Node.newString(string0);
      // Undeclared exception!
      try { 
        node0.addChildToBack(node4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = Node.newNumber(0.0);
      Node node2 = new Node(4095, node0, node1, node1, 2810, 1);
      node2.getSourceOffset();
      node1.wasEmptyNode();
      node0.isUnscopedQualifiedName();
      node1.isIn();
      node2.addChildAfter(node0, node0);
      node0.isLocalResultCall();
      node2.getIntProp(node1.MAX_COLUMN_NUMBER);
      int int0 = null;
      try {  
      int0 = Node.COLUMN_MASK;
      } catch(MockIllegalArgumentException e) {}
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Node node0 = new Node(130, 754, 8297);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags7 = new Node.SideEffectFlags();
      node_SideEffectFlags6.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags5.setThrows();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags7.setMutatesGlobalState();
      node_SideEffectFlags8.clearSideEffectFlags();
      node_SideEffectFlags4.setAllFlags();
      node0.isIf();
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Node node0 = Node.newNumber(954.38674);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      node0.isOptionalArg();
      Node node1 = new Node(85, node0, node0, node0, (-865), (-534));
      node0.addChildrenToBack(node1);
      node0.isTrue();
      node0.isGetElem();
      node0.isDelProp();
      node1.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.hasChildren();
      node0.setLineno(43);
      node0.getBooleanProp(43);
      node0.isTypeOf();
      node0.isCatch();
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      immutableList0.replaceAll(unaryOperator0);
      Node node1 = node0.getLastSibling();
      node1.isLocalResultCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(13);
      node_SideEffectFlags0.clearAllFlags();
      Node node2 = Node.newNumber((double) 49);
      node2.hasChildren();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.isExprResult();
      node0.isExprResult();
      node0.isEmpty();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = new Node(54, node0, node0, node0, 57, 15);
      node1.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1570);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags7 = new Node.SideEffectFlags();
      node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags5.setAllFlags();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags6.clearSideEffectFlags();
      node_SideEffectFlags2.setAllFlags();
      node0.isIf();
      node1.isObjectLit();
      node1.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Node node0 = Node.newString((-2075), "com.google.javascript.rhino.Node$AbstractPropListItem");
      node0.cloneNode();
      Node node1 = new Node((-2075), node0, node0, node0, 1846, (-1332));
      node1.getSourceFileName();
      node1.setVarArgs(true);
      Node node2 = new Node(380, node1);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node2.wasEmptyNode();
      node2.isName();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Node node0 = Node.newNumber((-3957.828991880964), 2197, 64);
      Node node1 = Node.newNumber(0.5, (-1120), 21);
      node0.isEquivalentTo(node1, true, true, false);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 87, 87);
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.isDec();
      node0.isNE();
      node0.setQuotedString();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        node0.getJSType();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Node node0 = Node.newString("jkuCy");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isBlock();
      node1.setLineno(100);
      node1.getBooleanProp(124);
      node0.isTypeOf();
      node0.isOr();
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      immutableList0.replaceAll(unaryOperator0);
      node1.addChildrenToBack(node0);
      node1.getLastSibling();
      node0.hasOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(595);
      node_SideEffectFlags0.setAllFlags();
      node0.isAnd();
      node1.isGetterDef();
      node1.isString();
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      node0.setVarArgs(false);
      node1.putBooleanProp(4095, false);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node2 = new Node(32, node1, node0, node0, node1, 40, 1);
      Node node3 = node2.setJSDocInfo(jSDocInfo0);
      node3.isLocalResultCall();
      Node.newString(1, "Z@5gkL0?6x");
      node0.isDo();
      Node.newString("Z@5gkL0?6x", 2, 52);
      node3.setSideEffectFlags(1);
      node1.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Node.newString("dD_3-dz9{k8G|&");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.clearSideEffectFlags();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node0.isEmpty();
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isOnlyModifiesThisCall();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node0.getAncestors();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node1.isInc();
      Node node2 = new Node(38, node0);
      node2.setWasEmptyNode(true);
      node0.isVar();
      node0.isEquivalentTo(node1, false, true, false);
      node1.isNot();
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Node node0 = new Node(130, 754, 8297);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags5.setThrows();
      Node.SideEffectFlags node_SideEffectFlags7 = new Node.SideEffectFlags();
      node_SideEffectFlags6.setMutatesThis();
      node0.isFunction();
      Node node1 = null;
      node0.replaceChildAfter((Node) null, (Node) null);
      int int0 = 113;
      int int1 = (-1548);
      Node node2 = new Node(node0.JSDOC_INFO_PROP, node0, node0, node1, int0, int1);
      // Undeclared exception!
      try { 
        node2.getSourceFileName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Key");
      node0.setVarArgs(false);
      node0.putBooleanProp(53, false);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node0.isLocalResultCall();
      Node node2 = Node.newString(3207, "Object#Key");
      node2.isDo();
      String string0 = "new:";
      Node node3 = Node.newString("new:", 2, 48);
      Node node4 = node1.removeChildAfter(node3);
      node1.setSideEffectFlags(node4.COLUMN_MASK);
      node3.isVarArgs();
      String string1 = "~,8y\"c}U";
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = node0.clonePropsFrom(node1);
      node1.getChangeTime();
      Node node3 = Node.newString("~", 42, 31);
      node2.mayMutateArguments();
      Node node4 = node2.copyInformationFromForTree(node3);
      Node node5 = Node.newString(4095, " is not a number node");
      node0.isEquivalentToShallow(node1);
      node0.isEquivalentToShallow(node3);
      node1.setString("second new child has existing parent");
      node3.wasEmptyNode();
      node4.checkTreeEqualsImpl(node1);
      node2.isLocalResultCall();
      Node node6 = node5.useSourceInfoIfMissingFrom(node0);
      InputId inputId0 = new InputId("Z@5gkL0?6x");
      node5.getJSDocInfo();
      node0.setType(30);
      Node node7 = Node.newString(" is not a number node");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.isOr();
      node4.getQualifiedName();
      Node node8 = new Node(57, node5, node4);
      node2.isContinue();
      node4.isCase();
      node7.isNull();
      node3.toString();
      node7.srcrefTree(node6);
      node7.getBooleanProp(2);
      node6.isWhile();
      node4.useSourceInfoFrom(node8);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.setDirectives((Set<String>) null);
      node0.isCast();
      node0.isVar();
      node0.addSuppression("Object#Key");
      Node.mergeLineCharNo(102, (-3488));
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Node node0 = Node.newNumber(954.38674);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      node0.isOptionalArg();
      Node node1 = new Node(85, node0, node0, node0, (-865), (-534));
      node0.addChildrenToBack(node1);
      node0.isTrue();
      node0.isGetElem();
      node0.isReturn();
      node1.isNull();
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Node node0 = new Node(105);
      node0.putBooleanProp(105, true);
      node0.isString();
      node0.isFor();
      node0.getType();
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Node node0 = Node.newString("jkuCy");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      node0.isBlock();
      node1.setLineno(100);
      node1.getBooleanProp(124);
      Node node2 = new Node(30, node1, node0, 1997, 36);
      node1.addChildToBack(node2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setMutatesGlobalState();
      node1.isNE();
      node0.isAnd();
      node0.isString();
      node0.isFor();
      node0.getType();
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = null;
      Node node1 = new Node(122, (Node) null, 122, 122);
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Node node0 = new Node(130, 754, 8297);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.add(jSType0);
      Node node1 = new Node(2, node0, node0, node0, 31, 0);
      node0.setLineno((-1407));
      JSType[] jSTypeArray0 = new JSType[8];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      jSTypeArray0[6] = jSType0;
      jSTypeArray0[7] = jSType0;
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.addChildrenToFront(node2);
      Node node3 = Node.newString(5048, "Object#Element", 305, 38);
      node1.getInputId();
      node0.isSetterDef();
      Node.newString("/r2O\"@D,b'0zyzX(");
      node3.isScript();
      node3.isFunction();
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.setLineno((-2461));
      node0.getBooleanProp(43);
      node0.isTypeOf();
      node0.isCatch();
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      immutableList0.replaceAll(unaryOperator0);
      Node node1 = node0.getLastSibling();
      node0.getJSDocInfo();
      node1.setType(30);
      Node node2 = Node.newString("Object#Element");
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      node0.isOr();
      node2.getQualifiedName();
      Node node3 = new Node(49, node0, node2);
      node3.isContinue();
      node1.isCase();
      Node node4 = node1.copyInformationFromForTree(node0);
      node2.isNull();
      node0.isUnscopedQualifiedName();
      node2.toString();
      Node node5 = Node.newNumber(1.0, 112, (-222));
      node1.srcrefTree(node5);
      Node.newString("y: -i^ Z*vD[b", 147, 1932);
      node4.isSwitch();
      node4.getParent();
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Node node0 = new Node((-581));
      node0.putBooleanProp((-997), true);
      node0.isString();
      Node node1 = new Node((-133), node0);
      node1.isFor();
      node1.getType();
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"Q^Y+2XhjB;h*5TL16");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      functionType0.getTypesUnderShallowEquality(jSType0);
      ObjectType objectType0 = ObjectType.cast(functionType0);
      objectType0.getConstructor();
      functionType0.getRestrictedTypeGivenToBooleanOutcome(true);
      jSTypeRegistry0.getType((StaticScope<JSType>) objectType0, "Unknown class name", "first new child has existing parent", 0, 0);
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isAdd();
      node0.isQuotedString();
      node0.isDebugger();
      node0.isNull();
      node0.isLocalResultCall();
      Node node1 = Node.newString(29, "Not declared as a constructor", (-1295), 38);
      node0.isEquivalentTo(node1, true, false, false);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Node node0 = new Node(130, 754, 8297);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags7 = new Node.SideEffectFlags();
      node_SideEffectFlags6.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags5.setThrows();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags7.setMutatesGlobalState();
      node_SideEffectFlags8.clearSideEffectFlags();
      node_SideEffectFlags4.setAllFlags();
      node0.isLabel();
      node0.toString();
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isWhile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1696);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags5.setAllFlags();
      node_SideEffectFlags6.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags7.clearAllFlags();
      node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags6.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags9 = new Node.SideEffectFlags();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags8.setThrows();
      Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags11 = node_SideEffectFlags10.setAllFlags();
      node_SideEffectFlags11.setThrows();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags6.clearSideEffectFlags();
      node_SideEffectFlags9.setAllFlags();
      node0.isIf();
      node0.isObjectLit();
      node0.getJsDocBuilderForNode();
      Node node1 = node0.cloneTree();
      node1.removeChild(node0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      immutableList0.sort((Comparator<? super JSType>) null);
      node0.setLineno((-2461));
      node0.getBooleanProp(30);
      node0.isTypeOf();
      node0.isCatch();
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      immutableList0.replaceAll(unaryOperator0);
      Node node1 = Node.newString(16, "Object#Key");
      Node node2 = new Node(33, node0, node1, (-1442), 4095);
      Node node3 = node2.cloneNode();
      node1.getChangeTime();
      node2.cloneTree();
      node3.isCase();
      node0.copyInformationFromForTree(node1);
      node1.isNull();
      node0.isUnscopedQualifiedName();
      node1.setDouble(46.5459480998678);
      node2.getSideEffectFlags();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      HashSet<JSType> hashSet0 = new HashSet<JSType>(39, 2);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) hashSet0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isBlock();
      node1.setLineno(31);
      Node node2 = new Node(1044, node1, node0, node0);
      node2.getBooleanProp(16);
      node2.isTypeOf();
      node0.isOr();
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      ImmutableList<JSType> immutableList1 = ImmutableList.of();
      immutableList1.replaceAll(unaryOperator0);
      node1.addChildrenToBack(node2);
      Node node3 = node1.getLastSibling();
      node3.hasOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1276));
      node2.isAnd();
      node0.isGetterDef();
      node3.isString();
      node1.checkTreeEquals(node2);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Node node0 = Node.newString(3261, " j   ");
      Node node1 = node0.useSourceInfoIfMissingFromForTree(node0);
      node1.setSourceEncodedPosition(57);
      node0.isTrue();
      Node node2 = Node.newString(55, " j   ", 8, 39);
      Node.newNumber(249.29222471690716, 29, 128);
      node0.getSideEffectFlags();
      node0.putIntProp(57, 1);
      node0.isThis();
      node0.getSourcePosition();
      node1.getSourceOffset();
      node0.setCharno((-4733));
      node1.getSourceOffset();
      node0.isParamList();
      node0.isCall();
      Node.newString(" j   ");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      Node.newNumber(1.0);
      node0.hasChildren();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node3 = new Node(31, node0, node2, node0, node1);
      node3.isExprResult();
      node0.isExprResult();
      Node.extractCharno(2);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node0 = Node.newString("Object#Key");
      node0.setLineno((-2461));
      node0.getBooleanProp(43);
      node0.isQualifiedName();
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      immutableList0.replaceAll(unaryOperator0);
      Node node1 = node0.getLastSibling();
      node0.isLocalResultCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(36);
      node1.addChildToBack(node0);
      node0.isWhile();
      node1.isDefaultCase();
      node1.getChildBefore(node0);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags((-2260));
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags2.setAllFlags();
      node1.isStringKey();
      node1.isScript();
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("GGPAq%");
      Node node1 = new Node(148, node0);
      node1.isLabelName();
      node1.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(4);
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags4.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setAllFlags();
      node_SideEffectFlags6.setThrows();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags4.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags7.setAllFlags();
      node1.isObjectLit();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node2.getDirectives();
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      int int0 = (-2701);
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node((-2701), (Node) null, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Node node0 = Node.newString("STRING m\n", (-211), 307);
      node0.setIsSyntheticBlock(false);
      Node node1 = Node.newString(2423, "STRING m\n", 1510, 49);
      node1.setString("STRING m\n");
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = new Node((-1), 38, 123);
      node3.getDouble();
      node2.getString();
      Node node4 = node0.removeChildAfter(node3);
      node1.isSyntheticBlock();
      node0.isSyntheticBlock();
      node4.setSourceEncodedPositionForTree(node2.DIRECT_EVAL);
      node2.isFunction();
      node2.replaceChild(node4, node3);
      node0.addChildrenAfter(node4, node4);
      // Undeclared exception!
      try { 
        node2.removeFirstChild();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ERROR 38 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Node node0 = Node.newNumber((-1991.93769507528));
      node0.isCast();
      Node node1 = new Node(9, node0, 126, 8297);
      Node node2 = node1.srcrefTree(node0);
      InputId inputId0 = new InputId("GRlG$,X:f\" |B32vtOF");
      node2.setInputId(inputId0);
      node1.setDouble(0.0);
      node0.replaceChild(node1, node1);
      node2.toString();
      Node node3 = node1.useSourceInfoFromForTree(node2);
      boolean boolean0 = true;
      Node node4 = node3.cloneNode();
      // Undeclared exception!
      try { 
        node4.getChangeTime();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // BITOR [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      InputId inputId0 = new InputId("GRlG$,X:f\" |B32vtOF");
      node0.setInputId(inputId0);
      node0.setDouble(32);
      double double0 = 2766.3003130037;
      // Undeclared exception!
      try { 
        Node.newNumber(double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // EXPR_RESULT 130 [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Node node0 = Node.newNumber((-1991.93769507528));
      node0.isCast();
      Node node1 = new Node(9, node0, 126, 8297);
      node1.srcrefTree(node0);
      node1.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.isStringKey();
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Node node0 = Node.newNumber(3027.9539);
      Node node1 = new Node(4155, 55, 37);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-3584));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      jSTypeRegistry0.getNativeType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.isHook();
      Node node2 = new Node(98, node0, node1, node1, 52, 47);
      node0.setLineno(23);
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node2.addChildrenToFront(node3);
      Node.newString(43, "com.google.common.base.Predicates$OrPredicate", 50, 3798);
      node3.getInputId();
      Node node4 = Node.newNumber((double) 46, 42, 57);
      node4.isSetterDef();
      Node node5 = Node.newString("source_file");
      node5.isScript();
      node1.isFunction();
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"Q^Y+2XhjB;h*5TL16");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      functionType0.getTypesUnderShallowEquality(jSType0);
      ObjectType objectType0 = ObjectType.cast(functionType0);
      objectType0.getConstructor();
      functionType0.getRestrictedTypeGivenToBooleanOutcome(true);
      jSTypeRegistry0.getType((StaticScope<JSType>) objectType0, "Unknown class name", "first new child has existing parent", 0, 0);
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isAdd();
      node0.isQuotedString();
      node0.isDebugger();
      node0.setType(235);
      node0.isLabelName();
      Node node1 = new Node(1, 43, 57);
      node1.isVar();
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Node node0 = Node.newString("dD_3-dz9{k8G|&");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = Node.newString(21, "quoted");
      Node node2 = Node.newNumber(954.38674);
      Node node3 = Node.newString(42, "5j%dP77y9f-");
      Node node4 = new Node(57, node1, node0, node0, node3);
      node2.mayMutateArguments();
      node0.copyInformationFromForTree(node1);
      Node node5 = new Node(2451, node2, (-84), 52);
      node0.isEquivalentToShallow(node5);
      node3.isEquivalentToShallow(node1);
      node3.mayMutateGlobalStateOrThrow();
      node0.removeProp(51);
      Node node6 = Node.newString(29, " is not a number node");
      node5.isUnscopedQualifiedName();
      node5.setLineno(54);
      node6.isArrayLit();
      node0.isInstanceOf();
      node0.getNext();
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Node node0 = new Node(130, 754, 8297);
      node0.isOnlyModifiesThisCall();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.getAncestors();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node_AncestorIterable0.iterator();
      node1.wasEmptyNode();
      Node node2 = new Node((-2807), node1, node1, 36, 4095);
      node0.isInc();
      node0.addChildToFront(node2);
      Node.extractCharno(709);
      node1.setDouble((-1.0));
      node2.isIn();
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      node0.setVarArgs(true);
      Node node1 = new Node(1, node0);
      node1.putBooleanProp(1, true);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      Node.AncestorIterable node_AncestorIterable1 = new Node.AncestorIterable(node1);
      Node.AncestorIterable node_AncestorIterable2 = new Node.AncestorIterable(node2);
      node_AncestorIterable2.iterator();
      node2.isInc();
      jSDocInfo0.setDescription("{%Bd2'c");
      node0.getIntProp(29);
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Node node0 = new Node(130, 754, 8297);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.isLabelName();
      Node node1 = new Node(2, node0, node0, node0, 31, 0);
      node0.setLineno((-1407));
      JSType[] jSTypeArray0 = new JSType[8];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[7] = jSType0;
      jSTypeArray0[6] = jSType0;
      JSTypeNative jSTypeNative1 = JSTypeNative.NO_RESOLVED_TYPE;
      jSTypeRegistry0.getNativeFunctionType(jSTypeNative1);
      jSTypeArray0[7] = jSType0;
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.addChildrenToFront(node2);
      Node node3 = Node.newString(5048, "Object#Element", 305, 38);
      node1.getInputId();
      node0.isName();
      Node.newString("/r2O\"@D,b'0zyzX(");
      node2.isNew();
      node3.isFunction();
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Node node0 = new Node(87);
      node0.isString();
      node0.isFor();
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.setLineno((-2461));
      node0.getBooleanProp(43);
      node0.isTypeOf();
      node0.isCatch();
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      immutableList0.replaceAll(unaryOperator0);
      node0.isLocalResultCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(36);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node node1 = Node.newNumber((double) 31);
      node0.hasChildren();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.isExprResult();
      node0.isExprResult();
      Node.extractCharno(12);
      node1.getDouble();
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Node node0 = Node.newString(".$:");
      Node node1 = new Node(8, node0, node0);
      Node.newString(48, ": ", (-1181), 1304);
      node0.isEmpty();
      node0.isComma();
      node0.isArrayLit();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('p');
      node1.appendStringTree(charArrayWriter1);
      int int0 = (-751);
      int int1 = 828;
      int int2 = (-668);
      Node node2 = new Node(int0, node1, node1, int1, int2);
      node1.clonePropsFrom(node2);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Node node0 = Node.newString(3267, "com.google.common.collect.AbstractMapBasedMultimap$KeySet", 3267, 3267);
      Node node1 = new Node(43, node0, 30, 30);
      node1.setSourceEncodedPosition(57);
      node1.toString(false, false, false);
      String string0 = "com.google.javascript.rhino.Node$ObjectPropListItem";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      node1.appendStringTree(mockPrintWriter0);
      node1.removeFirstChild();
      node1.getSourceFileName();
      int int0 = 1391;
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Node node0 = Node.newNumber(3027.9539);
      Node node1 = Node.newString(49, "<X)(c&?]B}R0", 50, 37);
      Node node2 = node1.useSourceInfoFrom(node0);
      node0.isEquivalentToShallow(node2);
      node0.isEquivalentTo(node1);
      node0.getSourceOffset();
      node0.wasEmptyNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isComma();
      JSType[] jSTypeArray0 = new JSType[1];
      node0.isIn();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node3.isCast();
      node3.useSourceInfoFrom(node1);
      node1.setType(46);
      node1.isScript();
      Node node4 = new Node(96, node3);
      node1.isInstanceOf();
      Node node5 = Node.newString(991, "Should not happen\n");
      node5.isIf();
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isOnlyModifiesThisCall();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node0.getAncestors();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node1.isInc();
      Node node2 = new Node(38, node0);
      node2.setWasEmptyNode(true);
      node0.isVar();
      node0.isEquivalentTo(node1, false, true, false);
      node2.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Node node0 = new Node(130, 754, 8297);
      node0.isOptionalArg();
      Node node1 = node0.cloneTree();
      node1.setSourceEncodedPosition(57);
      Node node2 = new Node((-2534), node0, node0, node0, node1);
      node2.setChangeTime(52);
      node1.hasChild(node2);
      node2.getLength();
      node1.addChildToBack(node0);
      node2.toString();
      int int0 = 112;
      node1.setSourceEncodedPosition(int0);
      // Undeclared exception!
      try { 
        node2.isDelProp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newNumber((-4702.56822), 2301, (-1427));
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals(node0);
      node0.getSourcePosition();
      node0.setDouble((-4702.56822));
      node0.isHook();
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Node node0 = new Node(130, 754, 8297);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.clearAllFlags();
      node0.isAssignAdd();
      node0.isBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("");
      node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("nvs_}X?");
      node0.isDefaultCase();
      node0.isComma();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(8, nodeArray0);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      node_NodeMismatch0.equals(node_SideEffectFlags1);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      String string0 = "Z@5gkL0?6x";
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = new Node(37, node1, 50, (-769));
      Node node3 = null;
      Node node4 = node0.srcrefTree((Node) null);
      InputId inputId0 = new InputId(string0);
      node1.setInputId(inputId0);
      node1.setDouble(node4.QUOTED_PROP);
      // Undeclared exception!
      try { 
        node1.replaceChild(node4, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Node.mergeLineCharNo(4095, 4095);
      Node node0 = new Node((-356));
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(37, nodeArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node2 = node0.srcrefTree(node1);
      node2.setLineno(0);
      node2.isLocalResultCall();
      node1.wasEmptyNode();
      node0.getJSType();
      node2.isTypeOf();
      node1.isGetProp();
      node2.isVoid();
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Node node0 = new Node(130, 754, 8297);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags5.setThrows();
      Node.SideEffectFlags node_SideEffectFlags8 = new Node.SideEffectFlags();
      node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags5.setThrows();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags7.setThrows();
      node_SideEffectFlags3.setReturnsTainted();
      Node node1 = Node.newNumber((double) 48);
      Node node2 = node0.srcref(node1);
      node2.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getJSType();
      node0.putBooleanProp((-1564), false);
      Node node1 = new Node(4095, node0, node0, 40, 5196);
      Node node2 = node0.useSourceInfoFrom(node1);
      node0.setLineno(43);
      node0.getBooleanProp(52);
      node1.isTypeOf();
      node1.copyInformationFromForTree(node0);
      node1.isOr();
      node2.getQualifiedName();
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node4 = new Node(4031, node3, node0, (-3678), 51);
      node4.isLocalResultCall();
      node1.isInc();
      double double0 = (-87.8186);
      node4.setDouble(double0);
      node2.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Node node0 = Node.newString(3260, " j   ");
      Node.newString(" j   ");
      node0.getDouble();
      Node node1 = node0.removeFirstChild();
      // Undeclared exception!
      try { 
        node1.getSourceFileName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 3260
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isWhile();
      node0.setChangeTime((-1295));
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.setDescription((String) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesThis();
      node0.useSourceInfoIfMissingFrom((Node) null);
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags2.setThrows();
      // Undeclared exception!
      try { 
        node_SideEffectFlags2.setMutatesGlobalState();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Node node0 = Node.newString(")/svC2k$LPkx~X@w%B~");
      node0.getIntProp(670);
      node0.getChildCount();
      node0.type = 32;
      node0.isEmpty();
      node0.setSourceEncodedPositionForTree(103);
      node0.isCase();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-90);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node1 = new Node((-1), node0, node0, node0, node0);
      node0.replaceChild(node1, node1);
      int int0 = 1658;
      Node node2 = Node.newString(node0.LAST_PROP, string0, int0, node0.DIRECTIVES);
      int int1 = 8;
      Node node3 = node2.getChildBefore(node0);
      node2.getAncestor(int1);
      node2.isEmpty();
      node0.isQualifiedName();
      node2.replaceChildAfter(node1, node3);
      // Undeclared exception!
      try { 
        node0.isOr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isWhile();
      node0.setChangeTime((-1282));
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = new Node((-1743), node0);
      node0.isInstanceOf();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node2 = node1.removeFirstChild();
      Node node3 = new Node(48, node2, node1, node0, 53, 16);
      node0.setLineno(43);
      node3.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isWhile();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1295));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags8 = new Node.SideEffectFlags();
      node_SideEffectFlags7.setMutatesThis();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags6.setAllFlags();
      node_SideEffectFlags5.setThrows();
      node_SideEffectFlags7.setMutatesGlobalState();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags5.setAllFlags();
      node0.isIf();
      node0.isObjectLit();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node node1 = node0.getLastSibling();
      node0.isLocalResultCall();
      node1.setSourceFileForTesting("Object#Key");
      node1.isInc();
      Node.extractCharno((-1));
      node1.setDouble(485.65);
      node1.isNE();
      // Undeclared exception!
      try { 
        node1.isIf();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000339] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      Node node1 = node0.getLastSibling();
      node0.isLocalResultCall();
      node1.setSourceFileForTesting("Object#Key");
      node0.isInc();
      Node.extractCharno((-468));
      node1.setDouble(418.461);
      node1.isNE();
      // Undeclared exception!
      try { 
        node1.isAnd();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000339] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Node node0 = new Node(130, 754, 8287);
      Node node1 = new Node(130, node0, node0, node0);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags7 = new Node.SideEffectFlags();
      node_SideEffectFlags5.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags6.setThrows();
      node_SideEffectFlags7.setMutatesGlobalState();
      node_SideEffectFlags8.clearSideEffectFlags();
      node_SideEffectFlags9.clearAllFlags();
      node_SideEffectFlags3.setAllFlags();
      node0.isEmpty();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.isEquivalentTo(node0, false, true, false);
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"Q^Y+2XhjB;h*5TL16");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      functionType0.getTypesUnderShallowEquality(jSType0);
      ObjectType objectType0 = ObjectType.cast(functionType0);
      objectType0.getConstructor();
      functionType0.getRestrictedTypeGivenToBooleanOutcome(true);
      jSTypeRegistry0.getType((StaticScope<JSType>) objectType0, "Unknown class name", "first new child has existing parent", 0, 0);
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isAdd();
      node0.isQuotedString();
      node0.isDebugger();
      node0.setType(235);
      node0.isLabelName();
      Node node1 = new Node(1, 43, 57);
      Node node2 = new Node(148, node0, node1, node1);
      node2.srcrefTree(node0);
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Node node0 = Node.newNumber(954.38674);
      Node node1 = new Node(51, 42, 4095);
      node0.checkTreeEqualsImpl(node1);
      node0.isLocalResultCall();
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      InputId inputId0 = new InputId("STRING m\n");
      node0.getJSDocInfo();
      node1.setType(57);
      Node node3 = Node.newString("&usc\"Sy17X$xJ");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.isOr();
      node1.getQualifiedName();
      Node node4 = new Node(46, node2, node3);
      node4.addChildrenAfter(node3, node0);
      node4.isContinue();
      node4.isCase();
      // Undeclared exception!
      try { 
        node1.isNull();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Node node0 = Node.newNumber(3027.9539);
      Node node1 = Node.newString(49, "<X)(c&?]B}R0", 72, 37);
      Node node2 = node1.useSourceInfoFrom(node0);
      Node node3 = new Node(2140586401, node0);
      node0.isEquivalentToShallow(node3);
      node0.isEquivalentTo(node3);
      int int0 = Node.CHANGE_TIME;
      node0.wasEmptyNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(54);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags(123);
      node2.isFromExterns();
      node2.isStringKey();
      node3.isSwitch();
      Node node4 = Node.newNumber(0.5);
      node4.setSideEffectFlags(46);
      node4.isCall();
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Node node0 = Node.newString("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node2 = new Node(49, node0);
      node1.isInstanceOf();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node3 = new Node(52, node1, node2, node1, node1);
      node3.removeFirstChild();
      Node node4 = new Node(53, node1, node2, node0, 1653, (-1709));
      int int0 = 38;
      node4.setLineno(int0);
      node2.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Node node0 = new Node(130, 754, 8297);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags5.setThrows();
      Node.SideEffectFlags node_SideEffectFlags8 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags7.setThrows();
      node_SideEffectFlags9.setMutatesGlobalState();
      node_SideEffectFlags3.clearSideEffectFlags();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.isExprResult();
      Node node1 = new Node((-621), 50, 344);
      node1.isExprResult();
      Node.extractCharno((-223));
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Node node0 = Node.newString("m");
      node0.isGetElem();
      node0.setSourceEncodedPosition(46);
      node0.setChangeTime((-1295));
      Node node1 = Node.newString("G#Y=!QGis?XWq-=v&k'");
      node1.mayMutateArguments();
      node0.getLength();
      Node node2 = new Node(47, node1, 29, 428);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      node_SideEffectFlags0.setAllFlags();
      int int0 = Node.SYNTHETIC_BLOCK_PROP;
      node2.mayMutateGlobalStateOrThrow();
      node1.removeProp(30);
      Node node3 = Node.newString(12, "com.google.javascript.rhino.Node$ObjectPropListItem");
      node2.setJSDocInfo((JSDocInfo) null);
      node2.isTry();
      node1.getIndexOfChild(node3);
      node1.useSourceInfoFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isWhile();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = new Node(48, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node2 = node0.getAncestor(0);
      Node node3 = new Node((-102), node0, node2, node2, 50, 4095);
      node1.addChildrenToBack(node0);
      // Undeclared exception!
      try { 
        node2.isTrue();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Node node0 = Node.newString("Z@5gkL0?6x");
      node0.isVar();
      node0.addSuppression("Z@5gkL0?6x");
      node0.setType(113);
      Node node1 = new Node(57, node0, node0, node0, (-1960), 49);
      node1.isLabelName();
      node1.removeChild(node0);
      node1.isVar();
      Node node2 = new Node(1734, node0, node1, node1, 43, (-5232));
      Node node3 = new Node(42, node2, node2);
      Node node4 = new Node(2, node1, node3, node2, node1);
      node4.isVoid();
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isAssign();
      node0.setLineno(4095);
      node0.isHook();
      node0.isTypeOf();
      node0.isOr();
      Node node1 = node0.cloneNode();
      node1.getChangeTime();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.javascript.rhino.Node$ObjectPropListItem");
      node0.toString(false, false, false);
      node0.isEquivalentToTyped(node1);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.getJsDocBuilderForNode();
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Node node0 = new Node(130, 754, 8297);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags5.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setThrows();
      node_SideEffectFlags6.setMutatesGlobalState();
      node0.isLocalResultCall();
      Node.SideEffectFlags node_SideEffectFlags7 = new Node.SideEffectFlags((-2172));
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = Node.newNumber((double) 57);
      Node node2 = new Node(130, node1, node0, node0, node1);
      Node node3 = node2.srcref(node0);
      node3.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      String string0 = "STRING m\n";
      Node node0 = Node.newString("STRING m\n");
      node0.isVarArgs();
      boolean boolean0 = true;
      node0.setLength((-391));
      node0.getString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      node0.setLength(29);
      node0.getQualifiedName();
      node0.toString(true, true, false);
      node0.isNoSideEffectsCall();
      Node node1 = Node.newString("STRING m\n", 4095, 3283);
      MockFile mockFile0 = new MockFile((String) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, boolean0);
      node1.appendStringTree(mockFileWriter0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.setString(string0);
      node1.addChildAfter(node0, node0);
      // Undeclared exception!
      try { 
        node1.getAncestors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Node node0 = Node.newString(1826, "^by?]B+~m8$)xH", 1826, 1826);
      node0.setJSDocInfo((JSDocInfo) null);
      Node node1 = Node.newString(46, "t9VxEwGI8Wbl*");
      node0.isHook();
      node1.children();
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = Node.newString("G,kirJ5", 40, 1826);
      Node node4 = node0.copyInformationFromForTree(node3);
      node1.isEquivalentToShallow(node3);
      node4.isEquivalentToShallow(node1);
      node2.setString("t9VxEwGI8Wbl*");
      node3.wasEmptyNode();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node node5 = node2.useSourceInfoIfMissingFrom(node4);
      node2.getInputId();
      node2.getJSDocInfo();
      Node.newString("msg.jsdoc.function.thisnotobject");
      node5.getLineno();
      node5.isCast();
      node3.setType(858);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Node node0 = new Node(130, 754, 8297);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.add(jSType0);
      Node node1 = new Node(2, node0, node0, node0, 31, 0);
      node0.setLineno((-1407));
      JSType[] jSTypeArray0 = new JSType[8];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(3187);
      node_SideEffectFlags1.setMutatesThis();
      node0.cloneNode();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(4095);
      node1.getDouble();
      node1.removeFirstChild();
      node1.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Node node0 = new Node(130, 754, 754);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      node0.isCast();
      node0.isVar();
      node0.addSuppression("CharMatcher.ANY");
      node0.setType(130);
      node_SideEffectFlags0.setAllFlags();
      node0.hasChildren();
      node0.isObjectLit();
      node0.isBreak();
      node0.getJsDocBuilderForNode();
      node0.isCatch();
      node0.isWith();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      node0.setWasEmptyNode(true);
      node0.getChangeTime();
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Node node0 = Node.newString("jkuCy");
      Node node1 = Node.newString("jkuCy", 50, 38);
      node0.getChangeTime();
      Node node2 = Node.newString("", 55, 42);
      node2.isIn();
      node0.isCatch();
      node2.setQuotedString();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node.newNumber((double) 8);
      jSTypeRegistry0.createObjectType("jkuCy", node1, (ObjectType) null);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node2.isEquivalentTo(node0, false, true, false);
      node2.getIntProp(410);
      int int0 = Node.COLUMN_MASK;
      node3.isParamList();
      node0.isEquivalentTo(node1, false, false, true);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.setLineno((-2461));
      node0.getBooleanProp(43);
      node0.isTypeOf();
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      immutableList0.replaceAll(unaryOperator0);
      Node node1 = node0.getLastSibling();
      node0.getJSDocInfo();
      Node node2 = Node.newString("Object#Element");
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      node0.isOr();
      node2.getQualifiedName();
      Node node3 = new Node(49, node0, node2);
      node3.isContinue();
      node1.isCase();
      node1.copyInformationFromForTree(node0);
      node2.isNull();
      node0.isUnscopedQualifiedName();
      node2.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node4 = Node.newNumber(1.0, 112, (-222));
      node4.isNot();
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Node node0 = Node.newString(308, "STRING m\n", 308, 308);
      node0.removeProp((-3189));
      StringWriter stringWriter0 = new StringWriter(102);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "STRING m\n");
      node0.appendStringTree(stringWriter1);
      node0.detachChildren();
      node0.isOptionalArg();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "STRING m\n");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.getDouble();
      Node node1 = node0.cloneNode();
      Node node2 = node1.removeFirstChild();
      node2.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node node1 = node0.getLastSibling();
      node0.isLocalResultCall();
      node1.setSourceFileForTesting("Object#Key");
      node1.isInc();
      Node.extractCharno((-1));
      node1.setDouble(485.65);
      node1.isNE();
      // Undeclared exception!
      try { 
        node1.isAnd();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000339] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Node node0 = new Node(130, 754, 754);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      node0.isCast();
      node0.isVar();
      node0.addSuppression((String) null);
      node0.setType(37);
      node_SideEffectFlags3.setAllFlags();
      Node node1 = Node.newNumber((double) 43);
      node1.hasChildren();
      Node node2 = new Node((-2427), node0, node1, 0, 54);
      node2.isObjectLit();
      node0.isBreak();
      node0.getJsDocBuilderForNode();
      node2.isCatch();
      node0.isWith();
      node1.isNew();
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setAllFlags();
      jSTypeRegistry0.setLastGeneration(false);
      node0.isEmpty();
      node0.putBooleanProp((-341), true);
      node0.getChildAtIndex((-512));
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Node node0 = new Node(754, 13, 12);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(29);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags6.setThrows();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags7 = new Node.SideEffectFlags();
      node_SideEffectFlags7.setThrows();
      node_SideEffectFlags6.setMutatesArguments();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags2.clearSideEffectFlags();
      node0.isLabelName();
      node0.isVar();
      node0.isVoid();
      Node.extractLineno((-1));
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Node node0 = new Node(108);
      node0.isOnlyModifiesThisCall();
      node0.setChangeTime(211);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.getAncestors();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      boolean boolean0 = node1.isInc();
      Node node2 = null;
      Node node3 = new Node((-419), (Node) null);
      boolean boolean1 = true;
      node1.setWasEmptyNode(boolean0);
      node0.isVar();
      boolean boolean2 = true;
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Node node0 = Node.newString("Wv6b?&6FbCMs", (-1839), (-1839));
      node0.setString("S");
      node0.wasEmptyNode();
      node0.checkTreeEqualsImpl(node0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      Node node1 = new Node(29, node0, node0);
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      node1.addChildrenAfter(node0, node0);
      node0.removeChildAfter(nodeArray0[1]);
      int int0 = (-159);
      // Undeclared exception!
      try { 
        nodeArray0[1].getIntProp(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Node node0 = new Node(130);
      node0.isWhile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.getAncestor((-840));
      int int0 = (-2297);
      int int1 = 33;
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
      node0.setType((-2075));
      Node node1 = Node.newString("Object#Key");
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      node0.isOr();
      Node node2 = new Node(0, node0, node1);
      node2.isContinue();
      node2.isCase();
      Node node3 = node2.copyInformationFromForTree(node1);
      node0.isNull();
      node1.isUnscopedQualifiedName();
      node3.toString();
      Node node4 = jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node4.srcrefTree(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Node node0 = new Node(108);
      Node node1 = Node.newNumber((-1422.8091993923058));
      Node node2 = Node.newString((-4), "SO=_9/E}");
      Node node3 = Node.newNumber((double) 4);
      Node node4 = new Node(57, node2, node3, node1, node0);
      Node node5 = node0.copyInformationFromForTree(node4);
      node2.isLabel();
      node0.removeProp(305);
      Node node6 = new Node((-2286), node4, node2, 36, 1);
      node6.isUnscopedQualifiedName();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node5;
      nodeArray0[1] = node0;
      nodeArray0[2] = node4;
      String string0 = "com.google.common.collect.Iterators$MergingIterator";
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayDeque<UnknownType> arrayDeque0 = new ArrayDeque<UnknownType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) arrayDeque0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectType) null).when(unknownType0).toObjectType();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(unknownType0).toString();
      arrayDeque0.add(unknownType0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.getCharno();
      JSType[] jSTypeArray0 = new JSType[8];
      jSTypeArray0[0] = (JSType) unknownType0;
      jSTypeArray0[1] = (JSType) unknownType0;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, jSTypeArray0[1]);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      JSType jSType0 = enumElementType0.getPrimitiveType();
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = (JSType) unknownType0;
      jSTypeArray0[4] = (JSType) unknownType0;
      jSTypeArray0[5] = (JSType) unknownType0;
      jSTypeArray0[6] = (JSType) unknownType0;
      jSTypeArray0[7] = (JSType) unknownType0;
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isEmpty();
      node1.setType(26);
      node1.hasOneChild();
      Node node2 = new Node(108, node1);
      node0.isInstanceOf();
      node0.isIf();
      node0.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Node node0 = new Node((-980), 38, 1113);
      node0.setSourceEncodedPositionForTree(11);
      Node node1 = new Node(21, node0, node0, node0);
      Node node2 = new Node(38, node1, node1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node2.useSourceInfoFrom(node1);
      node0.isEquivalentTo(node2, false, true, true);
      node1.addChildrenAfter(node0, node2);
      node0.isOnlyModifiesArgumentsCall();
      int int0 = 36;
      node1.removeProp(int0);
      String string0 = "67=7d5fvqLr(";
      node1.isLocalResultCall();
      int int1 = 17;
      Node.newString(node1.LENGTH, string0, int1, node0.IS_DISPATCHER);
      int int2 = 20;
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("hTT:Ix", 8192, 8192);
      node0.setVarArgs(false);
      Node node1 = new Node(1, 53, 30);
      node0.isEquivalentToShallow(node1);
      node0.isComma();
      node1.isNew();
      node0.isDo();
      node0.replaceChildAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node0 = Node.newString("Object#Key");
      node0.setLineno((-2461));
      node0.getBooleanProp(30);
      node0.isTypeOf();
      node0.isCatch();
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      immutableList0.replaceAll(unaryOperator0);
      node0.isLocalResultCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(36);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      Node node1 = Node.newNumber((double) 31);
      node1.srcref(node0);
      node1.isQualifiedName();
      node0.getNext();
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Node node0 = Node.newString("Z@5gkL0?6x");
      Node node1 = Node.newString("Z@5gkL0?6x", 50, 38);
      node0.getChangeTime();
      node0.isBlock();
      node0.isCatch();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setReturnsTainted();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      String string0 = node1.getString();
      Node node2 = new Node(1, node0, node0, node1, node0, 2, 1);
      node0.isIn();
      node2.replaceChildAfter(node1, node0);
      // Undeclared exception!
      try { 
        Node.newString(node1.DIRECTIVES, string0, node1.COLUMN_BITS, node2.ORIGINALNAME_PROP);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      Node node0 = Node.newString("Z@5gkL0?6x");
      Node node1 = Node.newString("Z@5gkL0?6x", 50, 38);
      node0.getChangeTime();
      Node node2 = Node.newString(46, "");
      node2.isBlock();
      node0.isCatch();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      Node node3 = node2.getLastSibling();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.checkTreeEquals(node3);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node4 = new Node(1, node0, node0, node1, node0, 2, 1);
      node0.isIn();
      node4.isGetterDef();
      node4.replaceChildAfter(node1, node0);
      Node node5 = node4.removeChildAfter(node1);
      // Undeclared exception!
      try { 
        node5.addChildAfter(node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node((-1), node0, node0, node0, 87, 16);
      node0.isLabelName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4096);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(50);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node node2 = node1.copyInformationFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags2.clearAllFlags();
      node2.getSourceFileName();
      node1.isIn();
      Node node3 = node0.copyInformationFrom(node1);
      node0.toString(false, false, false);
      node1.setWasEmptyNode(true);
      node1.isVar();
      Node node4 = new Node(1, node1, node2, node2, node1);
      node0.isEquivalentTo(node4, true, false, false);
      node3.isEmpty();
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Node node0 = new Node(124, 741, 741);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      node0.isCast();
      node0.isLocalResultCall();
      node0.isThrow();
      node0.isTypeOf();
      node0.getLastSibling();
      node0.isAdd();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      Node node0 = Node.newNumber((-1991.93769507528));
      node0.isCast();
      Node node1 = new Node(9, node0, 126, 8297);
      node1.isBlock();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.areAllFlagsSet();
      node1.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.isStringKey();
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isWhile();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1295));
      Node node1 = Node.newString("G#Y=!QGis?XWq-=v&k'");
      node1.mayMutateArguments();
      Node node2 = new Node(55, node1, node1, node0, node0);
      node0.isLocalResultCall();
      node2.putBooleanProp(8, false);
      node2.cloneTree();
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      Node node0 = Node.newNumber((-1991.93769507528));
      node0.isCast();
      Node node1 = new Node(0, node0, 126, 8297);
      Node node2 = node1.srcrefTree(node0);
      node1.setDouble(0.0);
      node0.replaceChild(node1, node1);
      node2.toString();
      node1.getAncestors();
      Node node3 = node1.useSourceInfoFromForTree(node2);
      // Undeclared exception!
      try { 
        node3.isLocalResultCall();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isGetElem();
      node0.setSourceEncodedPosition(34);
      node0.setChangeTime((-1295));
      Node node1 = Node.newString("G#Y=!QGis?XWq-=v&k'");
      node1.mayMutateArguments();
      node1.isEquivalentToShallow(node0);
      boolean boolean0 = node0.isEquivalentToShallow((Node) null);
      String string0 = "Object#Key";
      node0.setString(string0);
      node0.getDouble();
      node1.setWasEmptyNode(boolean0);
      String string1 = "#fX}}H(84fi]w";
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = Node.newString("~", 42, 31);
      node2.mayMutateArguments();
      Node node4 = node2.copyInformationFromForTree(node3);
      Node node5 = Node.newString(4095, " is not a number node");
      node0.isEquivalentToShallow(node1);
      node0.isEquivalentToShallow(node3);
      node1.setString("second new child has existing parent");
      node3.wasEmptyNode();
      node4.checkTreeEqualsImpl(node1);
      node2.isLocalResultCall();
      Node node6 = node5.useSourceInfoIfMissingFrom(node0);
      InputId inputId0 = new InputId("Z@5gkL0?6x");
      node5.getJSDocInfo();
      node0.setType(30);
      Node.newString(" is not a number node");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node4.getQualifiedName();
      Node node7 = new Node(57, node5, node4);
      Node node8 = node7.removeFirstChild();
      node8.getSourceFileName();
      node6.isAdd();
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.clearSideEffectFlags();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node1.isEquivalentTo(node0, true, false, false);
      node1.setSideEffectFlags(1074);
      node1.getChildCount();
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getJSType();
      Node node1 = new Node(102, node0);
      node0.isLabelName();
      node1.useSourceInfoFrom(node0);
      Node node2 = Node.newString(42, "l$T5H3VELC8Ej1-");
      node2.setLineno(1);
      node1.getBooleanProp(37);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node3 = jSDocInfo0.getAssociatedNode();
      Node node4 = new Node(1073741823, node2, node2, (Node) null);
      node4.isGetProp();
      node2.isOr();
      node4.getQualifiedName();
      node3.isLocalResultCall();
      // Undeclared exception!
      try { 
        node1.isInc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isWhile();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1295));
      Node node1 = Node.newString("G#Y=!QGis?XWq-=v&k'");
      node1.mayMutateArguments();
      node1.getLength();
      Node node2 = new Node(154, node1, node0, 1, 29);
      node2.getChangeTime();
      node1.isCase();
      Node node3 = node2.copyInformationFromForTree(node0);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node3;
      nodeArray0[1] = node0;
      nodeArray0[2] = node3;
      nodeArray0[3] = node3;
      Node node4 = new Node(4095, nodeArray0, 40, 4);
      node4.isNull();
      node1.isUnscopedQualifiedName();
      double double0 = 0.7;
      Node.newNumber(double0);
      double double1 = Double.POSITIVE_INFINITY;
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isGetElem();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1295));
      Node node1 = Node.newString("G#Y=!QGis?XWq-=v&k'");
      node1.mayMutateArguments();
      node1.getLength();
      Node node2 = new Node(55, node1, 4095, 39);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3260);
      node0.getChangeTime();
      node1.isCase();
      Node node3 = node0.copyInformationFromForTree(node1);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node1;
      nodeArray0[1] = node1;
      nodeArray0[2] = node1;
      nodeArray0[3] = node3;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node4 = new Node(1, nodeArray0, 1677, 54);
      node4.isNull();
      nodeArray0[3].isUnscopedQualifiedName();
      double double0 = 36.0;
      node2.setDouble(double0);
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      Node node0 = new Node(130, 754, 754);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.clearAllFlags();
      node0.getCharno();
      node0.isAssignAdd();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node0.isEmpty();
      node0.isSyntheticBlock();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      Node node0 = new Node(130, 754, 754);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setAllFlags();
      Node node1 = new Node(42, node0, node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      node1.isEquivalentToShallow(node2);
      node2.isEquivalentToShallow(node1);
      String string0 = "),SIOIl'olG*!~wq";
      node0.setString("),SIOIl'olG*!~wq");
      Node[] nodeArray0 = null;
      Node node3 = new Node(node0.INCRDECR_PROP, nodeArray0);
      // Undeclared exception!
      try { 
        node3.wasEmptyNode();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // EXPR_RESULT 754 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      Node node0 = new Node(41, 41, 41);
      node0.isOnlyModifiesThisCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1332));
      Node node1 = Node.newString(2028, "m");
      node1.isDo();
      node0.isCase();
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.addSuppression("m");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 1, 1943);
      node2.appendStringTree(charBuffer0);
      node2.isNull();
      node1.isUnscopedQualifiedName();
      node1.setDouble(node2.JSDOC_INFO_PROP);
      node1.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
      JSType jSType1 = modificationVisitor0.caseFunctionType(functionType0);
      Node node0 = Node.newNumber(312.35374, (-180), 0);
      Node node1 = new Node(56, node0, node0, node0, node0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node0, jSType1);
      enumType0.getElementsType();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node2 = Node.newString((-2714), "Not declared as a type name");
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node2);
      node_AncestorIterable0.iterator();
      node2.isInc();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node1.isSyntheticBlock();
      node2.isTrue();
      Node.newString((String) null);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Not declared as a type name");
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) templateType0);
      jSTypeArray0[2] = (JSType) objectType0;
      jSTypeArray0[3] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
      JSType jSType1 = modificationVisitor0.caseFunctionType(functionType0);
      Node node0 = Node.newNumber(2213.1973469739946, 0, 26);
      Node node1 = new Node(115, node0, node0, node0, node0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("tC+<|g9h}+NF)g4", node1, jSType1);
      enumType0.getElementsType();
      Node.newString(585, "com.google.javascript.rhino.JSDocInfo$NamePosition");
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node_AncestorIterable0.iterator();
      node0.isInc();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(3084, nodeArray0, 126, 49);
      node2.isSyntheticBlock();
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = node0.clonePropsFrom(node1);
      node2.mayMutateArguments();
      Node node3 = node2.copyInformationFromForTree(node2);
      Node node4 = Node.newString(4095, " is not a number node");
      node0.isEquivalentToShallow(node1);
      node0.isEquivalentToShallow(node2);
      node1.setString("second new child has existing parent");
      node2.wasEmptyNode();
      node3.checkTreeEqualsImpl(node1);
      node2.isLocalResultCall();
      node4.useSourceInfoIfMissingFrom(node0);
      InputId inputId0 = new InputId("Z@5gkL0?6x");
      node4.getJSDocInfo();
      node0.setType(30);
      node2.setSideEffectFlags(29);
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isWhile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseNoType();
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      JSType jSType0 = modificationVisitor0.caseFunctionType(functionType0);
      Node node1 = Node.newNumber(1585.9822736295, 40, (-2678));
      Node node2 = new Node(15, node1, node1, node0, node1);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("prev is not a child of this node.", node2, functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Node node3 = Node.newString((-1639), "Unknown class name");
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, true);
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[0] = (JSType) functionType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = (JSType) enumElementType0;
      jSTypeArray0[3] = (JSType) enumType0;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = (JSType) enumElementType0;
      jSTypeArray0[6] = (JSType) enumElementType0;
      jSTypeRegistry1.createParameters(jSTypeArray0);
      node1.isCast();
      Node.mergeLineCharNo(49, 108);
      node3.isReturn();
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      Node node0 = Node.newNumber((-1991.93769507528));
      node0.isCast();
      Node node1 = new Node(9, node0, 126, 8297);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.isEquivalentToShallow(node1);
      node1.isEquivalentToShallow(node2);
      String string0 = "E~y?I,aL";
      node0.setString("E~y?I,aL");
      node1.clonePropsFrom(node2);
      Node node3 = new Node(node2.DECR_FLAG, node0);
      node3.wasEmptyNode();
      // Undeclared exception!
      try { 
        node0.checkTreeEqualsImpl(node3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -1991.93769507528 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isCast();
      node0.getStaticSourceFile();
      node0.isVar();
      node0.detachChildren();
      node0.isEmpty();
      node0.isArrayLit();
      node0.removeProp(83);
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      Node node0 = new Node(130, 754, 754);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.clearAllFlags();
      node0.getCharno();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      jSTypeRegistry0.setLastGeneration(false);
      node0.isEmpty();
      node0.isQualifiedName();
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      node0.isGetElem();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1295));
      Node node1 = Node.newString("G#Y=!QGis?XWq-=v&k'");
      node1.mayMutateArguments();
      node1.getLength();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node2 = new Node(55, node1, 4095, 39);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3260);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setAllFlags();
      node2.mayMutateGlobalStateOrThrow();
      node1.removeProp(31);
      Node.newString(42, "");
      node2.isTry();
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      node0.clonePropsFrom(node1);
      Node node2 = Node.newString("~", 42, 31);
      Node node3 = new Node(32, node1, node0, node1, 6425, 48);
      node0.addChildrenToBack(node1);
      node1.isStringKey();
      node3.isGetElem();
      node3.isDelProp();
      node2.isFunction();
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Node node0 = new Node(130);
      node0.isWhile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node node1 = new Node(3832, node0, node0);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.isEquivalentToShallow(node2);
      node1.isEquivalentToShallow(node2);
      String string0 = null;
      node2.setString((String) null);
      Node[] nodeArray0 = null;
      int int0 = (-574);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      Node node0 = Node.newString("jkuCy");
      node0.setSourceEncodedPosition((-1775));
      node0.isTrue();
      Node node1 = Node.newString(95, "p(xz}_e?", 13, 49);
      Node node2 = Node.newNumber((double) 2, 1085, 25);
      node1.getSideEffectFlags();
      node1.putIntProp(48, 51);
      node1.isThis();
      node1.getSourcePosition();
      node0.getSourceOffset();
      node0.setCharno(31);
      node1.getSourceOffset();
      node0.isParamList();
      node1.isCall();
      Node node3 = Node.newString("NUMBER_VALUE_OR_OBJECT_TYPE");
      node0.addChildToBack(node2);
      node0.isWhile();
      node3.isDefaultCase();
      node3.getChildBefore(node2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node0.EMPTY_BLOCK);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.areAllFlagsSet();
      node3.isStringKey();
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      Node node0 = Node.newNumber(954.38674);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      node0.isOptionalArg();
      Node node1 = new Node(85, node0, node0, node0, (-865), (-534));
      node0.addChildrenToBack(node1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isTrue();
      node0.isGetElem();
      Node node2 = node1.cloneNode();
      node2.getDirectives();
      node0.isDelProp();
      node1.isFunction();
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Node node0 = new Node(105);
      Node node1 = new Node(43, node0, node0, node0, node0);
      node1.isLabelName();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.setChangeTime(54);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      node1.isLocalResultCall();
      Node node3 = Node.newString(2576, "com.google.javascript.rhino.Node$StringNode");
      node2.isDo();
      Node node4 = new Node(130, node3, node2, node1, node0, 57, 52);
      node4.isContinue();
      node0.isCase();
      Node node5 = node0.copyInformationFromForTree(node2);
      node5.isNull();
      int int0 = (-347);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node1;
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      String string0 = "x9D96q";
      Node node0 = Node.newString("x9D96q");
      node0.setType(2331);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node1 = new Node(154, node0, 42, 2331);
      node1.isDebugger();
      node1.checkTreeEqualsImpl(node0);
      node1.clonePropsFrom(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("x9D96q", node0, (JSType) null);
      List<JSType> list0 = null;
      JSType jSType0 = jSTypeRegistry0.createFunctionType((ObjectType) enumType0, (JSType) enumType0, list0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      enumType0.autobox();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      jSTypeRegistry0.overwriteDeclaredType(enumType1.EMPTY_TYPE_COMPONENT, jSType0);
      // Undeclared exception!
      try { 
        enumElementType0.getJSDocInfo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      Node node0 = new Node(130, 754, 754);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.mayMutateArguments();
      node0.isVar();
      node0.addSuppression((String) null);
      node0.setType(49);
      Node node1 = node0.getLastSibling();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.checkTreeEquals(node0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node2 = new Node(49, node1, node0, node1, node0, 6, 2);
      node0.isIn();
      node0.replaceChildAfter(node2, node1);
      Node node3 = node1.removeChildAfter(node2);
      node3.addChildAfter(node0, node0);
      int int0 = 152;
      node0.getIntProp(int0);
      // Undeclared exception!
      try { 
        node2.getSourceOffset();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      Node node0 = Node.newNumber(2850.834670167038);
      Node node1 = Node.newString(4, "Z@5gkL0?6x");
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = Node.newString("~", 42, 31);
      node2.mayMutateArguments();
      Node node4 = node2.copyInformationFromForTree(node3);
      Node node5 = Node.newString(4095, " is not a number node");
      node0.isEquivalentToShallow(node1);
      node0.isEquivalentToShallow(node3);
      node1.setString("second new child has existing parent");
      node3.wasEmptyNode();
      node4.checkTreeEqualsImpl(node1);
      node2.isLocalResultCall();
      node5.useSourceInfoIfMissingFrom(node0);
      InputId inputId0 = new InputId("Z@5gkL0?6x");
      node5.getJSDocInfo();
      node0.setType(30);
      node3.isScript();
      Node node6 = new Node(49, node5, node2);
      node2.isNot();
      node6.cloneNode();
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      Node node0 = new Node(50);
      node0.isLocalResultCall();
      node0.setSourceEncodedPosition(57);
      Node node1 = new Node(12, node0, node0);
      Node node2 = new Node(38, node1, node1);
      node0.setSourceEncodedPosition(48);
      node1.setChangeTime((-1570));
      node0.isThrow();
      Node node3 = node2.getLastSibling();
      node3.isAdd();
      node3.isName();
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Node.extractLineno((-2703));
      Node node0 = new Node((-1950));
      Node node1 = Node.newNumber((double) 0, 37, 1);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      JSDocInfo jSDocInfo0 = enumElementType1.getOwnPropertyJSDocInfo(enumElementType0.UNKNOWN_NAME);
      node_NodeMismatch0.equals(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.setDirectives((Set<String>) null);
      node0.isCast();
      node0.isVar();
      node0.addSuppression("Object#Element");
      node0.setType(113);
      node0.isLabelName();
      node0.isVar();
      node0.cloneTree();
      node0.isScript();
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      Node node0 = Node.newNumber(5682.3960465734835);
      Node node1 = Node.newString(4, "Z@5gkL0?6m6x");
      Node node2 = Node.newNumber(954.38674);
      Node node3 = new Node(16, node0, node0, node2, node2);
      node1.hasMoreThanOneChild();
      Node node4 = node2.copyInformationFromForTree(node2);
      Node node5 = Node.newString(57, " is not a number node");
      node3.isEquivalentToShallow(node0);
      node0.isEquivalentToShallow(node2);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node3;
      Node node6 = Node.newString(" is not a number node", 47, 48);
      node3.checkTreeEquals(node3);
      node3.replaceChild(node6, node0);
      node5.isGetProp();
      int int0 = 1491;
      nodeArray0[0].getExistingIntProp(int0);
      node4.setSideEffectFlags(node3.FREE_CALL);
      node2.isInc();
      node6.setDouble(node1.SIDE_EFFECT_FLAGS);
      // Undeclared exception!
      try { 
        node5.getSideEffectFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Node node0 = Node.newString("Z@5gkL0?6x");
      Node node1 = new Node(0, node0, node0, node0, node0, 48, 49);
      Node node2 = Node.newString(46, "");
      node2.isBlock();
      node0.isCatch();
      node2.setQuotedString();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node node3 = node1.copyInformationFrom(node2);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node0.useSourceInfoFromForTree(node2);
      node1.cloneNode();
      node0.getChangeTime();
      node2.isCase();
      node3.copyInformationFromForTree(node1);
      node2.isNull();
      node3.isUnscopedQualifiedName();
      node0.setDouble(32);
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      Node node0 = new Node(130, 754, 754);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node node1 = new Node(42, node0, node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iB[(UTH?X71]-");
      Node node3 = new Node(37, node2, node1, node1, node1, 37, 303);
      node3.getChangeTime();
      node1.isSetterDef();
      node3.isCatch();
      node1.getProp(2072);
      node3.isTypeOf();
      node3.isOr();
      node0.getQualifiedName();
      node3.isLocalResultCall();
      node0.isInc();
      Node node4 = Node.newString(811, "EMPTY");
      node3.getSideEffectFlags();
      node0.getParent();
      node3.useSourceInfoFrom(node4);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node node1 = node0.getLastSibling();
      node0.isLocalResultCall();
      node1.setSourceFileForTesting("Object#Key");
      node1.isInc();
      Node.extractCharno((-1));
      Node node2 = node0.useSourceInfoFromForTree(node1);
      Node node3 = node2.cloneNode();
      node0.getChangeTime();
      node1.isCase();
      Node node4 = node3.copyInformationFromForTree(node1);
      node3.isNull();
      node4.isUnscopedQualifiedName();
      node1.setDouble(32);
      // Undeclared exception!
      try { 
        node1.getSideEffectFlags();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000340] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(754, 754, 2928);
      Node node1 = new Node(754, node0, 19, (-1789569704));
      node1.isCast();
      Node node2 = new Node((-944), node1, 1054, 130);
      Node node3 = node2.srcrefTree(node0);
      InputId inputId0 = new InputId("EdzX`1!4");
      node2.setInputId((InputId) null);
      node0.setDouble(54);
      node0.replaceChild(node2, node3);
      node3.toString();
      node3.useSourceInfoFromForTree(node1);
      Node node4 = node0.cloneNode();
      node4.getChangeTime();
      boolean boolean0 = node0.isCase();
      node4.copyInformationFromForTree(node3);
      node2.isNull();
      JSDocInfo jSDocInfo0 = null;
      try {
        jSDocInfo0 = new JSDocInfo(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 754
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Node node0 = new Node(122, 122, 122);
      node0.isNew();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Node node1 = new Node(0, node0, 4, 4095);
      node1.isDebugger();
      node0.checkTreeEqualsImpl(node1);
      Node node2 = node1.clonePropsFrom(node0);
      node1.isOnlyModifiesThisCall();
      node2.isSwitch();
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      Node node0 = Node.newString("m");
      Node node1 = new Node(39, node0, node0);
      node0.toStringTree();
      node1.isLabelName();
      node1.toStringTree();
      node0.getSideEffectFlags();
      // Undeclared exception!
      try { 
        node1.putIntProp(node0.VAR_ARGS_NAME, node0.SYNTHETIC_BLOCK_PROP);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      Node node0 = new Node(130, 754, 8297);
      node0.isOnlyModifiesThisCall();
      node0.isLabelName();
      Node node1 = new Node((-771), node0, 1, (-1827));
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.isFalse();
      node0.isTypeOf();
      Node node3 = new Node(56, node0, node1, 100, 303);
      node3.isOr();
      node0.getQualifiedName();
      node2.isLocalResultCall();
      node3.setDouble(node0.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Node node0 = new Node(122, 122, 122);
      node0.isNew();
      Node node1 = new Node((-850));
      node0.getStaticSourceFile();
      node0.checkTreeEqualsImpl(node1);
      node1.isLocalResultCall();
      node0.useSourceInfoIfMissingFrom(node1);
      InputId inputId0 = new InputId("missing prop: ");
      node1.getJSDocInfo();
      node0.setType(15);
      Node.newString("missing prop: ");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      Node node0 = Node.newString("Z@5gkL0?6x");
      Node node1 = Node.newString("Z@5gkL0?6x", 50, 38);
      Node node2 = Node.newString(46, "Z@5gkL0?6x");
      node2.isBlock();
      node0.isCatch();
      node2.setQuotedString();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      node0.checkTreeEquals((Node) null);
      node2.setType(node1.SIDE_EFFECT_FLAGS);
      // Undeclared exception!
      try { 
        node2.isLabelName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(152, 754, 8297);
      node0.isOnlyModifiesThisCall();
      node0.isCast();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.isEquivalentToShallow(node0);
      node0.wasEmptyNode();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.isLocalResultCall();
      node0.useSourceInfoIfMissingFrom(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags3.setAllFlags();
      jSTypeRegistry0.setLastGeneration(false);
      node0.isEmpty();
      Node node1 = jSTypeRegistry0.createOptionalParameters((JSType[]) null);
      node1.isQualifiedName();
      node0.isDec();
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      Node node1 = new Node(47, node0, node0, node0);
      node0.srcref(node1);
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.clearSideEffectFlags();
      InputId inputId0 = new InputId("Object#Element");
      node0.getJSDocInfo();
      node0.setType(127);
      Node.newString("yD*/*oH^[");
      SimpleErrorReporter.getMessage("yD*/*oH^[", jSTypeArray0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      // Undeclared exception!
      try { 
        node0.getQualifiedName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property yD*_/*oH^[
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Node node0 = new Node(130, 754, 754);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      node0.isInc();
      node0.addChildToFront((Node) null);
      int int0 = 8297;
      Node.extractCharno(int0);
      double double0 = (-590.86785);
      // Undeclared exception!
      try { 
        node0.setDouble(double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isOnlyModifiesThisCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1369));
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(2836, nodeArray0);
      Node node2 = node0.copyInformationFrom(node1);
      node0.toString(true, true, false);
      node1.isOr();
      boolean boolean0 = true;
      node2.setWasEmptyNode(boolean0);
      node1.isVar();
      boolean boolean1 = false;
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Key");
      node0.getJSType();
      Node node1 = new Node(102, node0);
      node0.isLabelName();
      node1.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(2);
      node0.isBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("INC\n    PARAM_LIST\n");
      node_FileLevelJsDocBuilder0.append("set1");
      node1.isEquivalentTo(node0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder1.append("ASSIGN");
      node1.isCase();
      node1.isArrayLit();
      node1.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      Node node0 = new Node(122);
      node0.isWhile();
      Node node1 = new Node((-850));
      Node node2 = new Node(147, node0);
      node0.setWasEmptyNode(false);
      Node node3 = Node.newString(38, "H!j\"-");
      node1.isCatch();
      node0.isWith();
      Node.newNumber((double) 53, (-44), (-2321));
      Node node4 = new Node(2147105795, node2, node3, 2145235884, 40);
      node4.removeChildren();
      node4.isNew();
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      Node node0 = Node.newString("x9D96q");
      node0.setType(2331);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node1 = new Node(154, node0, 42, 2331);
      node1.isDebugger();
      node1.checkTreeEqualsImpl(node0);
      Node node2 = node1.clonePropsFrom(node0);
      node2.isOnlyModifiesThisCall();
      Node.newString("x9D96q");
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.setLineno((-2461));
      node0.getBooleanProp(43);
      node0.isTypeOf();
      node0.isCatch();
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      immutableList0.replaceAll(unaryOperator0);
      Node node1 = node0.getLastSibling();
      node0.getJSDocInfo();
      node1.setType(30);
      Node node2 = Node.newString("Object#Element");
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      node0.isOr();
      node2.getQualifiedName();
      Node node3 = new Node(49, node0, node2);
      node3.isContinue();
      node1.isCase();
      Node node4 = node1.copyInformationFromForTree(node0);
      node2.isNull();
      node2.isNE();
      node2.toString();
      Node node5 = Node.newNumber(1.0, 112, (-222));
      Node node6 = node1.srcrefTree(node5);
      node6.clonePropsFrom(node1);
      node4.isQualifiedName();
      node5.isNew();
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      Node node0 = new Node(122, 122, 122);
      node0.isNew();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(404);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setAllFlags();
      Node node1 = new Node(43, node0, node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.isEquivalentToShallow(node0);
      node0.isEquivalentToShallow(node1);
      node1.setString("jkuCy");
      boolean boolean0 = true;
      node0.setWasEmptyNode(boolean0);
      String string0 = "FPRM";
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      Node node0 = new Node(130, 754, 754);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node node1 = new Node(42, node0, node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      Node node3 = new Node(37, node2, node1, node1, node1, 37, 303);
      node3.getChangeTime();
      node1.isSetterDef();
      String string0 = node3.toString(true, false, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      node1.appendStringTree(mockPrintWriter0);
      node3.removeFirstChild();
      node2.getSourceFileName();
      node2.isVar();
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      Node node0 = Node.newString(105, "source_file", (-245), 115);
      Node node1 = new Node(105, node0, 536870912, 40);
      node1.setSourceEncodedPosition(0);
      node0.isTrue();
      Node node2 = Node.newString(36, "free_call", 1, 30);
      Node node3 = Node.newNumber((double) 1, (-1506), 88);
      node3.putIntProp((-1209), 155);
      node1.isThis();
      node1.getSourcePosition();
      node0.getSourceOffset();
      node1.getLength();
      Node node4 = Node.newString("jkuCy", 46, (-1));
      node4.isEquivalentTo(node2, false, false, false);
      Node node5 = Node.newString(2, "com.~oogle.mavascript.rhino.Node$ObjectPropListtem");
      node1.isLocalResultCall();
      Node node6 = new Node(83, node5, node4, node1, 0, 31);
      node3.putBooleanProp(4095, false);
      node4.getChildAtIndex(1864);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      Node node0 = new Node(105);
      node0.addChildToFront(node0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node.extractCharno(32);
      boolean boolean0 = false;
      Node node1 = Node.newNumber((double) 54, (-3155), (-3155));
      node0.copyInformationFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags(36);
      node_SideEffectFlags5.setAllFlags();
      node_SideEffectFlags4.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags(31);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.checkTreeEquals(node1);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      Vector<JSType> vector0 = new Vector<JSType>();
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      Node node0 = new Node(130, 754, 8297);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2172));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.setThrows();
      node0.wasEmptyNode();
      Node node1 = node0.removeChildAfter((Node) null);
      node0.getIntProp(node1.EMPTY_BLOCK);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.setLineno((-2461));
      node0.getBooleanProp(43);
      node0.isTypeOf();
      node0.isCatch();
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      immutableList0.replaceAll(unaryOperator0);
      Node node1 = node0.getLastSibling();
      node0.getJSDocInfo();
      node1.setType(30);
      node1.isEquivalentToShallow(node0);
      Node node2 = Node.newString("Object#Key", 0, (-1113));
      node2.checkTreeEquals(node1);
      Node node3 = new Node((-130), 0, 132);
      node3.setType(32);
      node2.isLabelName();
      Node node4 = Node.newNumber((double) 52, 32, 31);
      node3.isVar();
      node1.cloneTree();
      node1.isScript();
      node4.isAnd();
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      node0.isVoid();
      InputId inputId0 = new InputId("GRlG$,X:f\" |B32vtOF");
      node0.setInputId(inputId0);
      Node.newString(40, "slash_v", 56, 31);
      node0.getInputId();
      node0.isSetterDef();
      Node.newString("com.google.common.collect.ImmutableList$SubList");
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Node node0 = new Node(105);
      node0.addChildToFront(node0);
      Node.extractCharno(32);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = node0.getAncestor(32);
      Node node2 = new Node(8, node1, node0, node0, 48, 39);
      Node node3 = Node.newString(node2.DECR_FLAG, jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE, node2.DIRECT_EVAL, node1.FLAG_THIS_UNMODIFIED);
      // Undeclared exception!
      try { 
        node3.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      Node node0 = new Node(105);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.setAllFlags();
      Node node1 = new Node(48, node0, node0);
      node0.copyInformationFromForTree(node1);
      Node node2 = Node.newNumber((double) 57, 37, 42);
      node0.isEquivalentToShallow(node2);
      node1.isBlock();
      node1.setString("duplicate child");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        node0.setWasEmptyNode(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 48
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      Node node0 = Node.newNumber((-1991.93769507528));
      node0.isCast();
      Node node1 = new Node(9, node0, 123, 8297);
      node1.isBlock();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setAllFlags();
      node1.isNot();
      node0.setWasEmptyNode(true);
      node1.isVar();
      node0.isEquivalentTo(node1, true, false, true);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isOnlyModifiesThisCall();
      node0.setSourceEncodedPosition(51);
      node0.setChangeTime((-1369));
      node0.setType((-1369));
      node0.isLabelName();
      node0.isVar();
      Node node1 = node0.cloneTree();
      node0.isScript();
      node1.isAnd();
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      Node node0 = new Node(130, 754, 754);
      boolean boolean0 = node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node node1 = new Node(42, node0, node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      node0.setSourceEncodedPositionForTree(56);
      node1.getChangeTime();
      node1.isSetterDef();
      node1.getProp(12);
      node2.isTypeOf();
      node2.isOr();
      node1.srcref(node2);
      node0.getQualifiedName();
      node2.isVar();
      node0.isInc();
      node2.setDouble(57);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setJaggerInject(boolean0);
      // Undeclared exception!
      try { 
        node2.isObjectLit();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // THIS 754 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Node node0 = new Node(122);
      node0.isWhile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node node1 = new Node(56, node0, node0);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = new Node(714, node2, node2, node0, node1, 46, 38);
      node3.getChangeTime();
      // Undeclared exception!
      try { 
        node2.isSetterDef();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(152, 152, 8297);
      node0.isOnlyModifiesThisCall();
      node0.isCast();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.isEquivalentToShallow(node0);
      node0.wasEmptyNode();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.isLocalResultCall();
      Node node1 = node0.useSourceInfoIfMissingFrom(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      node_SideEffectFlags0.setMutatesThis();
      Node node2 = new Node((-644), node0, 50, 49);
      node2.isDebugger();
      node1.checkTreeEqualsImpl(node0);
      Node node3 = Node.newNumber(4718.636622, 4, 8297);
      node1.srcrefTree(node3);
      node3.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      Node node0 = new Node(40);
      node0.isWhile();
      Node node1 = new Node(52);
      node0.getStaticSourceFile();
      node1.clonePropsFrom(node0);
      node0.setStaticSourceFile((StaticSourceFile) null);
      node1.isStringKey();
      node1.isAdd();
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      Node node0 = new Node(130, 754, 754);
      boolean boolean0 = node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = Node.newNumber((-515.973154172));
      node0.useSourceInfoIfMissingFromForTree(node1);
      node_SideEffectFlags0.setAllFlags();
      Node node2 = new Node(42, node0, node0);
      Node node3 = node2.copyInformationFromForTree(node0);
      Node node4 = new Node(37, node3, node2, node2, node2, 37, 303);
      node4.getChangeTime();
      node2.getProp(12);
      node4.isTypeOf();
      node4.isOr();
      node0.getQualifiedName();
      node4.isVar();
      node1.setLineno(9);
      node0.isInc();
      node3.setDouble(57);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setJaggerInject(boolean0);
      node3.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayDeque<UnknownType> arrayDeque0 = new ArrayDeque<UnknownType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) arrayDeque0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      arrayDeque0.add(unknownType0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.getCharno();
      node0.isAssignAdd();
      Node node1 = Node.newString(32768, "Not declared as a constructor", 16777216, 54);
      node0.hasOneChild();
      node1.isQualifiedName();
      node0.useSourceInfoFrom(node1);
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Key");
      node0.getJSType();
      Node node1 = new Node(102, node0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.clearAllFlags();
      node1.getSourceFileName();
      node1.isIn();
      node1.copyInformationFrom(node0);
      node0.toString(false, false, true);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, (JSType) null);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Node node2 = enumElementType0.getRootNode();
      node2.isOr();
      boolean boolean0 = true;
  }
}
