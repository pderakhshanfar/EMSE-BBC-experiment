/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 31 08:28:44 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplatizedType;
import com.google.javascript.rhino.jstype.UnionType;
import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayDeque;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node0.getAncestor(262);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = new Node(33);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node0.setSideEffectFlags(node_SideEffectFlags1);
      // Undeclared exception!
      try { 
        node0.isEmpty();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got GETPROP
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newString((-861), "");
      node0.isOnlyModifiesArgumentsCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = Node.newString((-861), "d!.iEc|Q6XQNWV");
      node0.isNew();
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newString("<_NZQ");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setAllFlags();
      node0.isSetterDef();
      node0.detachFromParent();
      // Undeclared exception!
      try { 
        node0.getCharno();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 21, 21);
      node0.getAncestor(21);
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(617, nodeArray0, 617, 617);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = new Node((-1586), (-4411), (-4411));
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = Node.newString((-876), "d!.iEc|Q6XQNWV");
      node0.isNew();
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 21;
      Node node0 = Node.newNumber(0.0, 21, 21);
      node0.getAncestor((-1025));
      node0.getAncestor(int0);
      // Undeclared exception!
      try { 
        node0.isObjectLit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = (-217);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-217));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber(3426.25743297, (-217), (-217));
      nodeArray0[0] = node0;
      Node node1 = new Node(29, node0, node0, node0, node0, (-44), 31);
      nodeArray0[1] = node1;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0);
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      nodeArray0[2] = node2;
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = Node.newString("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.setSourceFileForTesting("Object#Key");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node((-1768), (-1768), (-1768));
      Node node1 = new Node((-1768), node0, node0, node0, node0);
      node1.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = new Node(8, Integer.MIN_VALUE, 1256);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1256);
      node_SideEffectFlags0.setMutatesArguments();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = new Node(33);
      node0.isEquivalentTo(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node0.setSideEffectFlags(node_SideEffectFlags2);
      // Undeclared exception!
      try { 
        node0.isEmpty();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got GETPROP
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node.newNumber((-3490.14452), 4, 4);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node(85);
      node0.isObjectLit();
      Node node1 = new Node(8, node0, node0, node0, node0, 43, 50);
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newString(44, "AWUFdB&Hh(r*XFk");
      node0.removeProp(861);
      node0.isQuotedString();
      node0.getType();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = Node.newString(2, "}EU8V?wZ*d|7& 7");
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node(0, 2735, 2735);
      Node node1 = new Node((-1026), node0, node0, node0, node0, 52, (-1913));
      node0.removeFirstChild();
      Node node2 = Node.newNumber((double) 1);
      node1.toString(true, false, false);
      node0.replaceChildAfter(node1, node1);
      node0.getString();
      node1.mayMutateArguments();
      Node node3 = node1.srcref(node0);
      node3.isEquivalentToTyped(node2);
      // Undeclared exception!
      try { 
        node3.getJsDocBuilderForNode();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1026
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newString("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      JSType.toMaybeTemplatizedType(jSType0);
      node0.setJSType((JSType) null);
      node0.isOnlyModifiesArgumentsCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node0.setSideEffectFlags(node_SideEffectFlags0);
      node0.isSetterDef();
      // Undeclared exception!
      try { 
        node0.getQualifiedName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = new Node(256, 256, 256);
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node((-4219));
      node0.setSideEffectFlags((-332));
      node0.getQualifiedName();
      // Undeclared exception!
      try { 
        node0.isScript();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -4219
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newNumber((-3063.2620761162157));
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node(0, 3629, 3629);
      node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(889);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.areAllFlagsSet();
      node0.children();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newString("76])3*}$M.", (-1128), (-1128));
      InputId inputId0 = new InputId("");
      inputId0.toString();
      node0.setInputId(inputId0);
      node0.isNew();
      node0.isDo();
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 1351;
      Node node0 = new Node(1351);
      Node node1 = Node.newString(47, "\rJfYMMe^^R?");
      Node node2 = Node.newString(154, "\rJfYMMe^^R?");
      node2.isQuotedString();
      node1.removeFirstChild();
      node1.putProp((-1438), node2);
      node1.addChildAfter(node2, node2);
      node0.isOnlyModifiesArgumentsCall();
      boolean boolean0 = true;
      node1.setWasEmptyNode(boolean0);
      double double0 = 661.1419;
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newString(40, "", (-1766), 155);
      node0.type = (-650);
      node0.setOptionalArg(false);
      node0.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node(2968, 2968, 171);
      Node node1 = new Node((-336), node0, node0);
      node0.addChildAfter(node1, node1);
      node1.isInc();
      node0.isOr();
      int int0 = 571;
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(85, 85, 85);
      node0.isObjectLit();
      node0.isNot();
      node0.isNull();
      node0.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node((-928), (Node[]) null, (-928), 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.getString();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setThrows();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node((-861), (Node[]) null, (-384), (-861));
      node0.getChildCount();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newNumber((-3079.5834));
      Node node1 = new Node(55, node0, node0);
      node1.cloneTree();
      node1.hasChildren();
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = new Node(0, 3629, 3629);
      node0.cloneTree();
      node0.putBooleanProp(0, false);
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newString((-2510), "(w");
      Node node1 = Node.newString("(w", 40, 39);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newString("!0?k!OD=M,b9[7@[b", 739, 42);
      Node node1 = new Node(52, node0, node0);
      node1.isComma();
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = new Node(30, 260, 260);
      Node node1 = new Node(30, node0, node0);
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = (-2467);
      Node node0 = new Node((-2467));
      node0.setString("com.google.javascript.rhino.Node$IntPropListItem");
      int int1 = 16384;
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = new Node(2601, (-1427), 103);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      try { 
        node0.setString("Object#Key");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newString(1582, "j$BDisrUOSb_fb");
      node0.mayMutateArguments();
      Node node1 = new Node(38, node0);
      node0.isEquivalentToShallow(node1);
      Node node2 = Node.newString(1526, "FtE6AE");
      node0.addChildToBack(node1);
      node1.setString("j$BDisrUOSb_fb");
      node0.isUnscopedQualifiedName();
      node2.getAncestor(node0.DIRECT_EVAL);
      node0.clonePropsFrom(node2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node((-1586), (-4411), (-4411));
      nodeArray0[0] = node0;
      node0.getJSDocInfo();
      node0.setString("-~$4+5MAxO50?=q*Z");
      nodeArray0[0].isVar();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("9J4dN^Bc:]<6(<m");
      node0.setQuotedString();
      node0.isFalse();
      node0.isSetterDef();
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newString("9JsdN^Bc:]<6(<m");
      node0.setQuotedString();
      node0.isDo();
      node0.isOr();
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newString("+M~?BWhM98bOlYq\"", 93, 93);
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = new Node(1312, 1312, 1312);
      node0.detachChildren();
      node0.wasEmptyNode();
      node0.isOnlyModifiesThisCall();
      Node node1 = new Node(2, node0, node0, node0, node0);
      node0.isQuotedString();
      node0.toString(false, false, false);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newString(99, "&&X$B7+W;qY3}fs%b");
      node0.addSuppression("&&X$B7+W;qY3}fs%b");
      node0.isTry();
      node0.isBlock();
      node0.isFor();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newString("d!.iEc|Q6XQNWV", 2062, 2062);
      node0.isNew();
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getProp(306);
      node0.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node1.isEquivalentTo(node2, true, false, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(15);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node0.isFromExterns();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("9JsdN^Bc:]<6(<m");
      node0.setQuotedString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isEmpty();
      node0.setSourceFileForTesting("9JsdN^Bc:]<6(<m");
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isLabelName();
      int int0 = Node.REFLECTED_OBJECT;
      node0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newNumber(1091.696104, 38, 13);
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = Node.newString(4095, "Not declared as a constructor");
      node0.setQuotedString();
      node0.isEquivalentToTyped(node0);
      node0.isOr();
      Node node1 = node0.detachFromParent();
      node1.getCharno();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = new Node(33, 33, 2436);
      node0.isEquivalentTo(node0);
      node0.mayMutateArguments();
      node0.isNE();
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newString("+M~?BWhM98bOlYq\"", 93, 93);
      node0.getJSType();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString(2063, "", 2063, 2063);
      node0.setWasEmptyNode(true);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("");
      node0.isGetProp();
      node0.getString();
      node0.getJSType();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newString("PEU8V?wZ*d|7& 7");
      Node node1 = new Node(52, node0, node0, node0, node0);
      node1.getInputId();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.setInputId((InputId) null);
      Node node2 = Node.newString("j$BDisrUOSb_fb");
      node2.checkTreeEquals(node0);
      node2.replaceChild(node0, node1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(85);
      node0.isGetterDef();
      node0.isEquivalentTo(node0, false, false, false);
      Node node1 = new Node(46, node0, node0);
      node0.isNE();
      node1.isThrow();
      node1.toStringTree();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node((-1494));
      Node node1 = new Node((-1494), node0, node0, node0);
      node1.isNull();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = new Node((-2221));
      Node node1 = new Node(0, node0, node0, node0);
      node1.getQualifiedName();
      node0.toString();
      node1.addChildAfter(node0, node0);
      // Undeclared exception!
      try { 
        node1.getIndexOfChild(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2221
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("j$BDisrUOSb_fb");
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = Node.newString((-861), "d!.iEc|Q6XQNWV");
      node0.isAssignAdd();
      node0.getString();
      Node node1 = new Node(57, node0);
      Node node2 = new Node(12, node1, node1, node0);
      node2.isEquivalentToTyped(node0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node0 = new Node((-2221));
      node0.toString();
      Node node1 = null;
      node0.replaceChildAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newString("x", (-862048943), 2568);
      Node node1 = new Node((-862048943), node0, node0, node0, node0, 56, 13);
      node1.setLineno(0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newString("v@", 749, 749);
      node0.setLineno(16);
      Node node1 = Node.newString(2, "v@");
      node1.isBlock();
      node1.isParamList();
      node1.removeChild(node0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString((-1), "free_call");
      node0.setLineno(3437);
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = new Node((-1768));
      Node node1 = new Node(39, node0, node0, 39, 16);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node.extractCharno((-385));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-385));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setThrows();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayDeque<UnionType> arrayDeque0 = new ArrayDeque<UnionType>(0);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) arrayDeque0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(0, node0, node0);
      node1.checkTreeEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isBreak();
      node0.getIntProp(1718);
      Node node1 = new Node(1166);
      node1.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("8");
      Node node1 = Node.newString(37, "8", 1, 4095);
      node1.isEquivalentTo(node0);
      node0.isDelProp();
      node1.isNE();
      node1.isNumber();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node((-1768), (-657), (-1768));
      Node node1 = new Node((-1768), node0, node0, node0, node0);
      node1.checkTreeEquals(node0);
      node0.copyInformationFromForTree(node1);
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newString("uEi+Z");
      Node node1 = new Node((-2966), node0);
      node1.getSideEffectFlags();
      node1.useSourceInfoIfMissingFromForTree(node0);
      Node node2 = Node.newString("j$BDisrUOSb_fb");
      node0.isEquivalentToShallow(node2);
      Node node3 = new Node((-2966), node1, node0);
      node3.isOnlyModifiesThisCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newString("<_NZQ");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node0.isEquivalentToShallow((Node) null);
      node0.isOnlyModifiesThisCall();
      SimpleErrorReporter simpleErrorReporter0 = null;
      try {
        simpleErrorReporter0 = new SimpleErrorReporter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("z=gM?", (-464), (-464));
      Node node1 = new Node(2, node0, node0, node0, 2, 31);
      Node node2 = Node.newString((-1951), "z=gM?");
      Node node3 = new Node(30, node2, node0, 1217, 1);
      node1.addChildrenToBack(node3);
      node1.isBreak();
      node2.isInstanceOf();
      // Undeclared exception!
      try { 
        node3.isUnscopedQualifiedName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newNumber((-3079.5834));
      Node node1 = new Node(1, node0);
      Node node2 = node0.useSourceInfoFrom(node0);
      node0.srcrefTree(node2);
      node2.isName();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newString("uEi+Z");
      Node node1 = new Node((-2966), node0);
      node1.getSideEffectFlags();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      Node.newString(33, "*(MI(J*?lQ6A");
      node2.isBlock();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-630), (-630), 0);
      node0.toString();
      node0.isEquivalentTo(node0);
      node0.isAssign();
      node0.removeChild(node0);
      node0.setSourceEncodedPosition(node0.IS_DISPATCHER);
      // Undeclared exception!
      try { 
        node0.isEquivalentToShallow(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(37, "", 1, 4095);
      node1.setWasEmptyNode(true);
      node1.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node2 = new Node(15, node0, node1, node0, node0, 739, (-1));
      node2.isEquivalentToShallow(node1);
      node0.addChildToBack(node2);
      node1.isEquivalentTo(node2, true, true, false);
      node0.isFromExterns();
      node1.isBreak();
      Node node3 = new Node(42, node1);
      node0.checkTreeTypeAwareEqualsImpl(node3);
      node2.isAssign();
      node2.isQualifiedName();
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = new Node((-1768), (-657), (-1768));
      Node node1 = new Node((-1768), node0, node0, node0, node0);
      Node node2 = new Node(8, Integer.MIN_VALUE, 1256);
      Node node3 = new Node(48, node0, node2);
      node3.isAnd();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-106), (-106), (-106));
      Node node1 = new Node((-106), node0, node0, node0);
      Node node2 = node1.cloneTree();
      Node node3 = new Node((-106), node1, 35, 4);
      node3.setWasEmptyNode(false);
      node3.addChildBefore(node0, node0);
      node2.setLineno(node0.INCRDECR_PROP);
      node0.isDefaultCase();
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags(node1.INPUT_ID);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = new Node((-1768), (-657), (-1768));
      Node node1 = new Node((-1768), node0, node0, node0, node0);
      node0.addSuppression("The new child node has siblings.");
      node1.getLineno();
      node0.addChildBefore(node1, node1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(37, "", 1, 4095);
      node1.setWasEmptyNode(true);
      node1.getJsDocBuilderForNode();
      Node node2 = Node.newString("");
      Node node3 = node0.useSourceInfoFromForTree(node2);
      Node.newNumber((double) 57);
      node3.isDelProp();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString(117, "Mlp\">t|", (-775), (-775));
      Node node1 = new Node(117, node0, (-1025), 36);
      node1.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 147;
      String string0 = "";
      Node node0 = Node.newString(147, "");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.copyInformationFromForTree(node1);
      node0.removeProp(147);
      node0.getSourceOffset();
      node0.children();
      node0.addChildBefore((Node) null, (Node) null);
      // Undeclared exception!
      try { 
        node0.putProp(int0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString((-2112), "uEi+Z");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("uEi+Z");
      node0.isGetProp();
      node0.getString();
      node0.getJSType();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(37, "", 1, 4095);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node1.setQuotedString();
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-2518), (-2518));
      node0.getJsDocBuilderForNode();
      Node node1 = node0.cloneTree();
      node1.isNull();
      node1.isCast();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = Node.newString("+M~?-WhM98bBlYq\"", 93, 93);
      Node.newString((-482), "+M~?-WhM98bBlYq\"", 47, 51);
      node0.getString();
      node0.getJSType();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newString("", 13, (-354));
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = (-1109);
      Node node0 = new Node(0, (-1577), 3135);
      Node node1 = new Node(0);
      Node node2 = new Node(0, node0, node1, 32, 33);
      node2.removeProp((-1747));
      Node node3 = null;
      Node node4 = new Node((-1109), node2, node1, (Node) null, (Node) null);
      Node node5 = new Node(int0, node4, node3);
      int int1 = 48;
      int int2 = 152;
      Node node6 = new Node(int0, node5, node0, node0, int1, int2);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        node6.setOptionalArg(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString("");
      Node node2 = new Node((-2531), node0);
      Node node3 = new Node(1, node2, node0, node2, node1);
      node2.isNE();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, 0);
      node0.getLineno();
      Node node1 = new Node(56, node0, node0, node0, 2483, 49);
      node1.addChildToFront(node0);
      node1.addChildAfter(node0, node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      double double0 = 0.0;
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newNumber((-3079.5834));
      node0.hasChildren();
      Node node1 = new Node(56, node0, node0, node0, 42, 32);
      Node node2 = node0.useSourceInfoFrom(node0);
      node0.srcrefTree(node2);
      node2.isName();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newString("The new child node has siblings.", 148, 148);
      node0.isQualifiedName();
      node0.isIf();
      node0.setDouble(1.2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = new Node((-1768), (-1768), (-1768));
      Node node1 = new Node((-1768), node0, node0, node0, node0);
      node0.getJSDocInfo();
      node1.addChildToFront(node0);
      String string0 = "ssl4\"Xy@MvTP";
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = new Node(85);
      node0.isObjectLit();
      node0.isNot();
      node0.isGetElem();
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString((-1), "free_call");
      node0.addChildrenToBack(node0);
      Node node1 = Node.newNumber((-1436.005019751), 2, 51);
      node1.isDo();
      node0.getCharno();
      node0.removeChildren();
      node0.getInputId();
      node0.addChildToFront(node1);
      node0.isWhile();
      node1.setString("LEK7");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 755;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(755);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.clearSideEffectFlags();
      Node node0 = Node.newString(154, (String) null, 154, 755);
      int int1 = 57;
      Node node1 = null;
      try {
        node1 = new Node(int0, node0, node0, node0.QUOTED_PROP, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = new Node((-2221));
      node0.getProp(0);
      Node.newString((String) null, 40, 48);
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node(617, 617, 1139);
      node0.detachChildren();
      Node.newString(3610, (String) null, 29, 46);
      node0.isString();
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0, (-106), (-106));
      Node node1 = Node.newString(15, "^c<7SM13p7", (-1603), 278);
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 21, 21);
      node0.srcref((Node) null);
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newNumber(0.7, 115, 115);
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-630), (-630), 0);
      Node node1 = new Node((-630), node0, node0);
      node0.setSourceEncodedPositionForTree(30);
      node0.toString();
      node1.isEquivalentTo(node0);
      node1.isAssign();
      node1.removeChild(node0);
      node1.putBooleanProp(110, false);
      node0.setSourceEncodedPosition(47);
      node1.isEquivalentToShallow(node0);
      node1.toString();
      node0.isAssign();
      node1.getSideEffectFlags();
      int int0 = 118;
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(617);
      node0.setSourceEncodedPositionForTree(617);
      Node node1 = Node.newNumber(1.2, 32, (-2632));
      Node node2 = new Node(16, node0, node1, node0, node0);
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newNumber(1398.44076473859, 98, 26);
      node0.getDouble();
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newString(93, "+M~?BWhM98bOlYq\"");
      node0.setSourceEncodedPosition(115);
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = new Node((-2221));
      node0.getProp(0);
      Node node1 = new Node(43, node0, node0);
      node1.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isOr();
      Node node3 = node2.detachFromParent();
      node3.getCharno();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newNumber((double) 141, 122, 122);
      Node node1 = new Node(141, node0, node0, 57, 57);
      node1.getChildBefore(node0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node0 = new Node(105);
      node0.isGetProp();
      node0.getChangeTime();
      node0.getString();
      String string0 = "SvDG";
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node((-1768), (-657), (-1768));
      Node node1 = new Node((-1768), node0, node0, node0, node0);
      node1.setSourceEncodedPositionForTree(154);
      Node node2 = new Node(8, Integer.MIN_VALUE, 1256);
      node2.getAncestor(1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(37, "", 1, 4095);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder1.append("{H");
      node_FileLevelJsDocBuilder0.append("");
      node1.isGetProp();
      node1.getChangeTime();
      node0.getString();
      node1.getJSType();
      node0.toStringTree();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      JSDocInfo jSDocInfo0 = enumElementType0.getOwnPropertyJSDocInfo(jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE);
      // Undeclared exception!
      try { 
        node1.setJSDocInfo(jSDocInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-2252), (-2252), 0);
      node0.getString();
      int int0 = Node.REFLECTED_OBJECT;
      // Undeclared exception!
      try { 
        node0.removeChildren();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -2252.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-56), 0);
      node0.children();
      Node node1 = node0.cloneNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-667));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node1.setSourceEncodedPositionForTree(39);
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.clearSideEffectFlags();
      node_SideEffectFlags3.clearSideEffectFlags();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags5.setMutatesThis();
      node0.isInc();
      node0.isNumber();
      node1.setDirectives((Set<String>) null);
      node0.setSideEffectFlags(31);
      Node node2 = node0.srcref(node1);
      node2.removeProp(node0.ORIGINALNAME_PROP);
      node0.useSourceInfoFrom(node1);
      Node node3 = node2.srcrefTree(node0);
      // Undeclared exception!
      try { 
        node3.isName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newString(111, "/v$MWM>@MS$");
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = new Node(42, 42, 1809);
      node1.getStaticSourceFile();
      Node node2 = new Node(1780, node0, node1, node0, 16, 2);
      node2.children();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newNumber((-3098.151601703262));
      Node node1 = new Node(38);
      node0.hasChildren();
      node0.isDo();
      node0.isNumber();
      node0.isVarArgs();
      node1.isLabel();
      node0.isWhile();
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = new Node(1060);
      Node node1 = new Node(1060, node0, node0, node0, 1278, 4);
      Node node2 = new Node(1060, node1, node1, node1);
      node2.isWith();
      Node node3 = node1.getLastChild();
      node3.setDirectives((Set<String>) null);
      Node.mergeLineCharNo(49, 2);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = new Node(3634);
      Node node1 = Node.newString("!?iG", 16, 4095);
      node1.isNull();
      node0.isContinue();
      node1.isInc();
      node0.children();
      node1.children();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = Node.newString("jPhSOA", (-464), (-464));
      Node node1 = new Node(39, node0);
      Node node2 = Node.newNumber((-656.0));
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node2);
      node2.getProp(0);
      node3.setSourceEncodedPosition(98);
      node2.isRegExp();
      node1.getCharno();
      node1.getIndexOfChild(node2);
      node3.isInc();
      Node node4 = new Node(32);
      node4.isOptionalArg();
      node2.removeFirstChild();
      node2.useSourceInfoIfMissingFromForTree(node0);
      node3.isNot();
      node3.isNumber();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newNumber((-5972.619757634092));
      node0.isFromExterns();
      node0.removeChildren();
      node0.setSideEffectFlags(42);
      double double0 = 1.0;
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(1605);
      Node node1 = node0.cloneTree();
      node1.getBooleanProp(57);
      node0.isSyntheticBlock();
      node1.isInstanceOf();
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newNumber(0.0);
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = new Node((-1768), (-1768), (-1768));
      Node node1 = new Node(8, Integer.MIN_VALUE, 12);
      node1.getAncestor(1);
      node1.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = (-2429);
      int int1 = (-2252);
      int int2 = 0;
      Node node0 = Node.newNumber((double) (-2252), (-2252), 0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -2252.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 62, 62);
      Node node1 = new Node(51, node0, node0);
      node1.getString();
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newNumber((double) 307, 307, 1023);
      Node node1 = new Node(307, node0, (Node) null, (Node) null, 54, 15);
      node1.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 21, 21);
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[2];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
      ObjectType objectType0 = jSTypeRegistry1.getNativeObjectType(jSTypeNative0);
      jSTypeArray0[0] = (JSType) objectType0;
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry2.createOptionalType(objectType0);
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isContinue();
      node0.getString();
      int int0 = (-3078);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = new Node(3634);
      Node.newString("!?iG", 16, 4095);
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = Node.newString((-3757), "Or(", 0, 3000);
      node0.getAncestors();
      node0.getExistingIntProp(3000);
      node0.setQuotedString();
      int int0 = 105;
      node0.setLineno(int0);
      SimpleErrorReporter simpleErrorReporter0 = null;
      try {
        simpleErrorReporter0 = new SimpleErrorReporter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 3000
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString("");
      node1.mayMutateArguments();
      node0.getQualifiedName();
      node0.getAncestors();
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = new Node(85);
      node0.isVarArgs();
      node0.isHook();
      node0.getExistingIntProp(1048576);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node.extractCharno(618);
      Node node0 = Node.newString("CeQu}{s<l%>]GEpr|=");
      Node node1 = new Node(618, node0, node0);
      node0.getString();
      node0.getSideEffectFlags();
      Node node2 = new Node(618, node1, node1, 0, 47);
      node2.getSourceFileName();
      Node node3 = new Node(618, node2);
      node3.type = 178;
      node3.getSourceFileName();
      Node node4 = Node.newString("CeQu}{s<l%>]GEpr|=", 49, 40);
      node0.getJsDocBuilderForNode();
      boolean boolean0 = node4.isEquivalentTo(node0);
      node4.detachChildren();
      node1.setString((String) null);
      node0.putBooleanProp(node4.FLAG_NO_THROWS, boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = new Node(617, 617, 617);
      node0.detachChildren();
      node0.wasEmptyNode();
      node0.wasEmptyNode();
      Node node1 = new Node(2, node0, node0, node0, node0);
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = new Node(98, 98, 749);
      node0.isOr();
      Node node1 = new Node(1, node0, node0, node0);
      node0.getSourceFileName();
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(124.0);
      node0.getSourceOffset();
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newString(256, "(GE'");
      Node node1 = new Node(55, node0, node0, node0, node0);
      node1.isQuotedString();
      node0.replaceChild(node1, node1);
      node1.getLineno();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 938;
      Node node0 = Node.newNumber(0.0, 938, 0);
      Node node1 = Node.newNumber((double) 42);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.removeChild(node0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = null;
      try {
        linkedList0 = new LinkedList<JSType>();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = Node.newNumber(428.5487169021479);
      Node node1 = new Node((-3000), node0, node0);
      Node node2 = new Node((-3000), node1, node1, node1, node0, 49, 41);
      node2.isEmpty();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = Node.newString("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = new Node(8, node2, node2, node2, node2);
      node2.isThis();
      node3.getLastChild();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = 147;
      String string0 = "";
      Node node0 = Node.newString(147, "");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.copyInformationFromForTree(node1);
      node0.getSourceOffset();
      node0.children();
      node0.addChildBefore((Node) null, (Node) null);
      // Undeclared exception!
      try { 
        node0.putProp(int0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = new Node(3634, 3634, (-2101));
      node0.isInc();
      Node node1 = new Node(52);
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = Node.newString("!0?k!OD=M,b9&7@+b", 3742, 739);
      Node node1 = new Node(3742, node0, node0, node0, node0, 4095, 8);
      Node node2 = Node.newNumber(0.5);
      node2.checkTreeEquals(node0);
      Node node3 = node0.clonePropsFrom(node1);
      node0.toString();
      Node node4 = new Node(49, node0, node0, 21, (-3027));
      node4.getStaticSourceFile();
      node4.getJSDocInfo();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node3.setChangeTime(node0.JSDOC_INFO_PROP);
      node0.replaceChildAfter(node2, node4);
      node1.isSyntheticBlock();
      // Undeclared exception!
      try { 
        node1.isOnlyModifiesArgumentsCall();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = Node.newNumber((-3079.5834));
      Node node1 = new Node(1, node0);
      Node node2 = node0.useSourceInfoFrom(node0);
      node2.checkTreeEquals(node1);
      // Undeclared exception!
      try { 
        node2.addChildrenToFront(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = new Node(155, 155, 32768);
      Node node1 = new Node(48, node0, node0, node0, 51, 1);
      Node node2 = new Node(1869, node0, node0, 16, 41);
      node2.getAncestor(node1.FLAG_GLOBAL_STATE_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString(390, "uEi+Z");
      Node node1 = Node.newString(57, "uEi+Z", 30, 50);
      Node node2 = new Node((-2567), 42, 40);
      node0.isWith();
      Node node3 = Node.newString(36, "uEi+Z");
      Node node4 = node3.removeChildren();
      node3.isName();
      Node node5 = Node.newString("uli+", 1847, 55);
      node5.setWasEmptyNode(true);
      node5.clonePropsFrom(node2);
      node4.isInc();
      node1.isCatch();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = Node.newString("!0?k!OD=M,b9[7@[b", (-2136842853), 1021);
      Node node1 = Node.newString("!0?k!OD=M,b9[7@[b");
      Node node2 = Node.newNumber((-1.0));
      node1.checkTreeEquals(node0);
      Node node3 = node1.clonePropsFrom(node2);
      node3.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node4 = node0.setJSDocInfo(jSDocInfo0);
      Node node5 = Node.newNumber(1.0);
      node5.useSourceInfoIfMissingFromForTree(node3);
      node3.setCharno(57);
      node4.isEquivalentToShallow(node0);
      node1.isString();
      node1.isAssignAdd();
      node1.getChildCount();
      node4.replaceChild(node0, node1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("HdNb86#4,");
      Node node1 = Node.newNumber(1816.6741);
      node1.checkTreeEquals(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node3 = node1.clonePropsFrom(node2);
      node1.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node4 = node1.setJSDocInfo(jSDocInfo0);
      Node node5 = Node.newNumber(732.3382);
      Node node6 = node5.useSourceInfoIfMissingFromForTree(node4);
      node3.setCharno((-4096));
      node6.isEquivalentToShallow(node1);
      node5.isString();
      node1.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newString("_Ade3_:d}aq");
      node0.isBreak();
      node0.getIntProp(132);
      Node node1 = new Node(93);
      node1.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(37, "", 1, 4095);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder1.append("{H");
      node_FileLevelJsDocBuilder0.append("");
      node1.isGetProp();
      node1.getChangeTime();
      node0.getString();
      node1.getJSType();
      node0.toStringTree();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = new Node(49, node1);
      node2.setSourceEncodedPosition(173);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.clearSideEffectFlags();
      node0.isGetElem();
      node2.hasMoreThanOneChild();
      node1.checkTreeEquals(node2);
      node_SideEffectFlags2.setMutatesArguments();
      node2.cloneTree();
      node0.getAncestor(57);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node[] nodeArray0 = new Node[2];
      Node node0 = new Node(3159, nodeArray0);
      node0.useSourceInfoIfMissingFrom(nodeArray0[0]);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = 855;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[4];
      JSType jSType0 = null;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, jSTypeArray0);
      ObjectType objectType0 = ObjectType.cast(functionType0);
      jSTypeArray0[0] = (JSType) objectType0;
      String string0 = "";
      Node[] nodeArray0 = new Node[9];
      Node node0 = Node.newString("Not declared as a type name", 855, 295);
      Node node1 = new Node(855, node0, node0);
      nodeArray0[0] = node1;
      Node node2 = new Node(49, nodeArray0, 12, (-2740));
      nodeArray0[1] = node2;
      // Undeclared exception!
      try { 
        Node.newString(functionType0.NOT_A_TYPE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node((-1586), (-4411), (-4411));
      nodeArray0[0] = node0;
      Node node1 = new Node((-4411), nodeArray0);
      node1.siblings();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = new Node(3634);
      Node node1 = Node.newString("!?iG", 16, 4095);
      node1.isNull();
      node0.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = new Node(1408);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = new Node(13, nodeArray0);
      node0.removeChild(node1);
      // Undeclared exception!
      try { 
        node0.isGetterDef();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString(124, "Object#Element", 124, 571);
      nodeArray0[0] = node0;
      Node node1 = new Node(4, 1, 38);
      nodeArray0[1] = node1;
      Node node2 = new Node((-431), nodeArray0, (-2531), 4095);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node2.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      String string0 = "Not declared as a constructor";
      Node node0 = Node.newString("Not declared as a constructor");
      int int0 = (-978);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[3] = node0;
      Node node1 = new Node(47, nodeArray0);
      int int1 = 358;
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = Node.newNumber((-5972.619757634092));
      Node node1 = new Node(51, node0, node0, 37, (-1260));
      node1.isVarArgs();
      node0.isFromExterns();
      Node node2 = node1.removeChildren();
      node0.setSideEffectFlags(42);
      node1.getJsDocBuilderForNode();
      // Undeclared exception!
      try { 
        node2.isNull();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node((-1801), (-1801), (-1801));
      Node node1 = new Node(56);
      node0.isFromExterns();
      node0.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = new Node(85);
      node0.isObjectLit();
      node0.isNot();
      node0.isNull();
      node0.removeChildren();
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = Node.newString(117, "Mlp\">t|", (-775), (-775));
      Node node1 = new Node(117, node0, (-1025), 36);
      Node node2 = node1.removeChildren();
      node1.hasOneChild();
      node2.toString();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = Node.newNumber(1.2);
      Node node1 = new Node(2, node0, node0);
      Node node2 = node0.cloneTree();
      node2.hasChildren();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node.extractCharno((-385));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-385));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setThrows();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayDeque<UnionType> arrayDeque0 = new ArrayDeque<UnionType>(0);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) arrayDeque0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isLocalResultCall();
      Node node1 = new Node(0, node0, node0);
      Node node2 = node1.removeChildren();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
      node2.setVarArgs(false);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newNumber((double) 55);
      Node node1 = new Node(55, node0, node0);
      node1.setLineno(4095);
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newString(147, "");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.copyInformationFromForTree(node0);
      node0.removeProp(147);
      node0.getSourceOffset();
      node0.children();
      node0.addChildBefore((Node) null, (Node) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      // Undeclared exception!
      try { 
        node_SideEffectFlags1.setMutatesArguments();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = 1351;
      Node node0 = new Node(1351);
      Node node1 = Node.newString(47, "\rJfYMMe^^R?");
      Node node2 = new Node(30, node1, node1, node1, node1, 39, 1);
      node2.isQuotedString();
      node1.removeFirstChild();
      node1.putProp((-1438), node2);
      node1.addChildAfter(node2, node2);
      node0.isOnlyModifiesArgumentsCall();
      boolean boolean0 = true;
      node1.setWasEmptyNode(boolean0);
      double double0 = 661.1419;
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = Node.newNumber((-3079.5834));
      node0.isQuotedString();
      node0.isVoid();
      node0.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString((-1181), "input_id");
      Node.newString(0, "\rJfYMMe^^R?");
      Node node1 = new Node(1019);
      node1.isQuotedString();
      Node node2 = new Node(50, node1, 2135, 938);
      Node node3 = node2.removeFirstChild();
      node1.putProp((-1042), "input_id");
      node1.addChildAfter(node3, node2);
      node0.isOnlyModifiesArgumentsCall();
      boolean boolean0 = false;
      node0.setWasEmptyNode(boolean0);
      node0.addChildrenToBack(node3);
      double double0 = 1863.27768517207;
      int int0 = 1926;
      Node.newNumber(double0, int0, node3.INPUT_ID);
      // Undeclared exception!
      try { 
        node0.hasOneChild();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString(29, "/;bKE0c.0x:hCP", 29, (-1828));
      node0.setWasEmptyNode(true);
      node0.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = new Node(12, node0, node0);
      node0.hasMoreThanOneChild();
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = Node.newNumber((-5972.619757634092));
      node0.isEquivalentTo(node0);
      node0.removeChildren();
      node0.setSideEffectFlags(42);
      double double0 = 1.0;
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = 147;
      String string0 = "";
      Node node0 = Node.newString(147, "");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<TemplateType> stack0 = new Stack<TemplateType>();
      Iterator<TemplateType> iterator0 = stack0.iterator();
      ImmutableList<TemplateType> immutableList0 = ImmutableList.copyOf((Iterator<? extends TemplateType>) iterator0);
      jSTypeRegistry0.createInterfaceType("prototype", node0, immutableList0);
      JSType[] jSTypeArray0 = new JSType[0];
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = Node.newString("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      NoObjectType noObjectType0 = (NoObjectType)modificationVisitor0.caseNoObjectType();
      NoObjectType noObjectType1 = (NoObjectType)FunctionType.getTopDefiningInterface(noObjectType0, "hIN9");
      noObjectType0.isInvariant(noObjectType1);
      JSType.toMaybeTemplatizedType((JSType) noObjectType0);
      node0.setJSType((JSType) null);
      node0.isOnlyModifiesArgumentsCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node_SideEffectFlags0.setThrows();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node0.setSideEffectFlags(node_SideEffectFlags0);
      node0.isSetterDef();
      node0.getQualifiedName();
      InputId inputId0 = null;
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newString("76])3*}$M.", (-1128), (-1128));
      InputId inputId0 = new InputId("");
      inputId0.toString();
      node0.setInputId(inputId0);
      node0.isNew();
      node0.isOptionalArg();
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(1605);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node0.toStringTree();
      int int0 = 63;
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = node0.detachFromParent();
      // Undeclared exception!
      try { 
        node1.useSourceInfoIfMissingFromForTree(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = Node.newString("OT:_ktR{<<!4=<");
      node0.isThis();
      node0.detachFromParent();
      int int0 = null;
      try {  
      int0 = Node.IS_NAMESPACE;
      } catch(MockIllegalStateException e) {}
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int int0 = 499;
      Node node0 = Node.newString(499, ">nN{:5", 499, 42);
      node0.getLength();
      Node node1 = new Node(499, node0, node0, node0);
      node1.isVarArgs();
      node1.getQualifiedName();
      node1.isOnlyModifiesArgumentsCall();
      node1.wasEmptyNode();
      node0.setSideEffectFlags(811);
      node1.mayMutateArguments();
      node1.getChangeTime();
      // Undeclared exception!
      try { 
        node0.getInputId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 499
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = Node.newNumber((-3079.5834));
      Node node1 = new Node(1, node0);
      Node node2 = node0.useSourceInfoFrom(node0);
      node2.getLength();
      Node node3 = node0.srcrefTree(node2);
      node3.isBreak();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newString("!0?k!OD=M,b9[7@[b", 739, 739);
      Node node1 = new Node(52, node0, node0);
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newNumber((-1086.84448), (-862048943), (-862048943));
      node0.isGetterDef();
      node0.removeChildAfter((Node) null);
      node0.detachChildren();
      node0.isString();
      // Undeclared exception!
      try { 
        node0.isAssignAdd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = new Node((-1768), (-657), (-1768));
      Node node1 = new Node((-1768), node0, node0, node0, node0);
      node0.getInputId();
      node1.isWhile();
      node0.getJSType();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = new Node(0, 3629, 3629);
      node0.addSuppression("expectedValuesPerKey must be >= 0 but was %s");
      node0.putBooleanProp(0, false);
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(1605);
      Node node1 = node0.cloneTree();
      node1.getBooleanProp(57);
      Node node2 = node1.clonePropsFrom(node0);
      node2.isLocalResultCall();
      node0.isSyntheticBlock();
      node1.isInstanceOf();
      node0.isDelProp();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(617, nodeArray0);
      Node node1 = new Node(617, node0, node0, node0, node0, 57, 30);
      node1.isSyntheticBlock();
      node1.isInstanceOf();
      Node node2 = Node.newNumber((-678.3006));
      node2.isDelProp();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = Node.newString("x", 2568, 13);
      Node node1 = Node.newString(4095, "", 120, 1177);
      Node node2 = new Node(43, node0, node0, node0, node1, 4, 37);
      node1.isContinue();
      node0.isDo();
      node2.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = Node.newString("uEi+Z");
      Node node1 = new Node((-2966), node0);
      node1.getSideEffectFlags();
      node1.useSourceInfoIfMissingFromForTree(node0);
      Node node2 = Node.newString("uEi+Z");
      node0.isEquivalentToShallow(node2);
      Node node3 = new Node((-2966), node1, node0);
      node3.isOnlyModifiesThisCall();
      SimpleErrorReporter simpleErrorReporter0 = null;
      try {
        simpleErrorReporter0 = new SimpleErrorReporter();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-24), (-24));
      node0.getLineno();
      Node node1 = new Node(56, node0, node0, node0, 2483, 49);
      node1.addChildToFront(node0);
      node1.isNoSideEffectsCall();
      node1.addChildAfter(node0, node0);
      // Undeclared exception!
      try { 
        node0.checkTreeTypeAwareEqualsImpl(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(37, "", 39, 4095);
      node1.setWasEmptyNode(true);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder1.append("{H");
      node_FileLevelJsDocBuilder0.append("");
      node1.isGetProp();
      node0.getString();
      node1.getJSType();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(2063, node0, node0, node0, node0);
      node1.getProp(436);
      node0.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = Node.newNumber(228.56);
      Node node3 = node2.setJSDocInfo(jSDocInfo0);
      node3.detachChildren();
      node0.useSourceInfoIfMissingFromForTree(node3);
      node3.isEquivalentTo(node0, true, true, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-3285));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = new Node(98);
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(12, node0, node0, node0);
      node1.mayMutateArguments();
      node0.getQualifiedName();
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = new Node((-2221));
      Node node1 = new Node(0, node0, node0, node0);
      node0.mayMutateArguments();
      node1.getQualifiedName();
      node0.toString();
      node1.addChildAfter(node0, node0);
      // Undeclared exception!
      try { 
        node1.getIndexOfChild(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2221
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getProp(306);
      node0.putBooleanProp(306, true);
      Node node1 = new Node(46, node0, node0, node0);
      Node node2 = null;
      node0.isUnscopedQualifiedName();
      node1.addChildrenToFront(node0);
      int int0 = 2091;
      int int1 = 52;
      Node node3 = null;
      try {
        node3 = new Node(int0, node2, node0, node1, node1.SIDE_EFFECTS_ALL, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = Node.newNumber((-3209.5283926));
      node0.getInputId();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = Node.newString("j$BDisrUOSb_fb");
      node0.addChildrenToFront(node1);
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString(124, "Object#Element", 124, 572);
      nodeArray0[0] = node0;
      Node node1 = new Node(50, node0);
      node0.hasChildren();
      node0.addChildrenToFront(node0);
      node1.isSwitch();
      node1.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("The new child node has siblings.");
      node0.isParamList();
      Node node1 = new Node(103, node0, node0, node0);
      Node.newString("H9'#5");
      node1.checkTreeEquals(node0);
      node0.addChildrenToFront(node1);
      Node.mergeLineCharNo(2602, 50);
      node0.removeChild(node1);
      node0.isDefaultCase();
      node0.getJsDocBuilderForNode();
      Node node2 = Node.newString(40, "Node tree inequality:\nTree1:\nDEC\n    STRING The new child node has siblings.\n\n\nTree2:\nSTRING The new child node has siblings.\n\n\nSubtree1: DEC\n    STRING The new child node has siblings.\n\n\nSubtree2: STRING The new child node has siblings.\n");
      node2.isThrow();
      node0.checkTreeEquals(node2);
      Node node3 = node1.copyInformationFromForTree(node2);
      node2.setIsSyntheticBlock(false);
      node0.isGetElem();
      node1.isFor();
      Node node4 = node3.useSourceInfoFromForTree(node1);
      node3.getJsDocBuilderForNode();
      node0.isWhile();
      node3.getChildCount();
      node0.checkTreeTypeAwareEqualsImpl(node4);
      node2.srcref(node0);
      node0.setString("X{oQ!u@y");
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = Node.newNumber((double) 44, 44, 44);
      Node node1 = new Node(44, node0);
      node1.getInputId();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node2 = Node.newString("j$BDisrUOSb_fb");
      node1.addChildrenToFront(node2);
      node0.setString("=%");
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = Node.newString("BV`KQqvtrntw9$nHZi<", (-2073), 62);
      Node node1 = new Node(18, node0, node0, (Node) null);
      Node node2 = node1.useSourceInfoFrom(node0);
      Node node3 = node2.srcrefTree(node0);
      node3.isName();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString("(PDyQn<<i", (-464), 2193);
      Node node1 = new Node(2193, node0, node0, node0, 52, 22);
      nodeArray0[0] = node1;
      Node node2 = Node.newString("Not declared as a constructor");
      node0.setCharno((-4755));
      nodeArray0[1] = node2;
      Node node3 = Node.newString(1701, "(PDyQn<<i", 119, 55);
      nodeArray0[2] = node3;
      Node node4 = new Node(617, nodeArray0, 1, 1110);
      node3.setQuotedString();
      node4.isFalse();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("d%7FY[].3JcO&KHB");
      Node node1 = Node.newString("d%7FY[].3JcO&KHB");
      node1.setCharno(51);
      Node.newString("d%7FY[].3JcO&KHB", 2343, 54);
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(36, nodeArray0, (-861), 390);
      Node node1 = Node.newString(1, "+M~?BWhM98bOlYq\"");
      node0.isNot();
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString((-2234), "+M~?BWhM98bOlYq\"");
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = new Node((-1521));
      node0.isObjectLit();
      node0.isNot();
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = new Node((-2221));
      node0.getProp(0);
      Node node1 = new Node(43, node0, node0);
      node1.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.setJSDocInfo(jSDocInfo0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.isEquivalentTo(node0, true, true, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(39);
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      node2.isFromExterns();
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(12, node0, node0, node0);
      node1.mayMutateArguments();
      node0.getQualifiedName();
      node1.toString();
      node1.addChildAfter(node0, node0);
      // Undeclared exception!
      try { 
        node0.getIndexOfChild(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = new Node(1818);
      Node node1 = new Node(39, node0, node0, node0, 52, 47);
      node1.addChildrenAfter(node0, node0);
      Node node2 = new Node(node1.STATIC_SOURCE_FILE, node1, node0, node1, node0, node1.OPT_ARG_NAME, node0.FLAG_ARGUMENTS_UNMODIFIED);
      String string0 = "j$BDisrUOSb_fb";
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = new Node(89);
      Node node1 = Node.newString(4095, "('");
      node0.addChildrenToBack(node1);
      Node.newNumber((-865.4596327866265), 89, 1);
      node1.isCall();
      int int0 = Node.REFLECTED_OBJECT;
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString((-1), "free_call");
      node0.addChildrenToBack(node0);
      Node node1 = Node.newNumber((-1436.005019751), 2, 51);
      node1.hasOneChild();
      node0.getCharno();
      node0.removeChildren();
      node0.getInputId();
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = Node.newNumber((-2043.22546157), 1171, 105);
      Node node1 = new Node(1171, node0, node0, 30, 116);
      node1.getInputId();
      node1.getStaticSourceFile();
      node1.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node2);
      node3.setCharno(30);
      node0.isEquivalentTo(node3, true, false, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesThis();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = Node.newNumber((-3209.5283926));
      node0.getInputId();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 13, 13);
      node0.getProp(37);
      node0.putProp(13, (Object) null);
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 13, 13);
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = Node.newNumber((-1086.84448), (-862048943), (-862048943));
      node0.isGetterDef();
      Node node1 = Node.newString("{g0n!qtzS#iP-drf0K\"");
      node0.useSourceInfoFromForTree(node1);
      node0.removeChildAfter((Node) null);
      node0.detachChildren();
      node0.isString();
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node node0 = Node.newString("!0?k!OD=M,b9[7@[b", 3742, 739);
      Node node1 = Node.newString("!0?k!OD=M,b9[7@[b");
      Node node2 = Node.newNumber(0.5);
      node2.checkTreeEquals(node0);
      Node node3 = node0.clonePropsFrom(node1);
      node0.toString();
      Node node4 = new Node(39, node3, node0, node1);
      node4.getStaticSourceFile();
      node4.getJSDocInfo();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node3.setChangeTime(29);
      node0.replaceChildAfter(node2, node4);
      node1.isSyntheticBlock();
      node1.isOnlyModifiesArgumentsCall();
      node0.setQuotedString();
      node0.isHook();
      node4.isUnscopedQualifiedName();
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString(124, "Object#Element", 124, 571);
      nodeArray0[1] = node0;
      Node node1 = new Node(108, node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.getJsDocBuilderForNode();
      node0.getStaticSourceFile();
      node0.getChildCount();
      node2.checkTreeTypeAwareEqualsImpl(node1);
      Node node3 = node0.srcref(nodeArray0[0]);
      String string0 = "";
      node3.setString(string0);
      node1.isOr();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      node0.setChangeTime(173);
      node0.isEquivalentTo(node0);
      node0.isDelProp();
      node0.setType(33);
      node0.isNE();
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newString("r", 3000, (-3745));
      Node node1 = new Node(47, node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.getChildCount();
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node0.srcref(node2);
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = Node.newNumber((-3209.5283926));
      node0.getInputId();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = Node.newNumber((double) 51);
      node0.getSourceOffset();
      node1.isNoSideEffectsCall();
      node1.replaceChildAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "PARAM_LIST";
      Node node0 = Node.newString("PARAM_LIST", 25, 4119);
      Node node1 = new Node(1024, node0, node0, node0, 49, 4119);
      node1.getStaticSourceFile();
      node0.getJSDocInfo();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.replaceChildAfter(node0, node0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append(string0);
      // Undeclared exception!
      try { 
        node0.isGetProp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int int0 = 617;
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(617, nodeArray0);
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.setQuotedString();
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = Node.newString("uEi+Z");
      Node node1 = new Node((-2966), node0);
      node1.getSideEffectFlags();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      Node node3 = Node.newString("j$BDisrUOSb_fb");
      node3.setWasEmptyNode(true);
      Node node4 = new Node(4399, node1, node2, node2, 1, 2134);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node4.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder1.append("");
      node_FileLevelJsDocBuilder0.append("j$BDisrUOSb_fb");
      node2.isGetProp();
      Node node5 = Node.newNumber(0.0);
      node5.getString();
      node5.getJSType();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = new Node(148, 148, 148);
      Node node1 = new Node(32, node0, node0, node0, node0);
      Node node2 = new Node(57, node0, node0, node1);
      node1.getSourceFileName();
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = "!0?k!OD=M,b9&7@+b";
      Node node0 = Node.newString("!0?k!OD=M,b9&7@+b", 3742, 739);
      Node node1 = new Node(3742, node0, node0, node0, node0, 4095, 8);
      Node node2 = Node.newNumber(0.5);
      node2.checkTreeEquals(node0);
      int int0 = 21;
      Node node3 = new Node(16, node0, node2, node0, 49, 4095);
      node0.toString();
      Node node4 = new Node(node1.DIRECT_EVAL, node0, node0, int0, node2.FLAG_LOCAL_RESULTS);
      int int1 = (-1695);
      // Undeclared exception!
      try { 
        Node.newString(node2.INPUT_ID, string0, int1, node2.SLASH_V);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newString(113, "", 434, 98);
      Node node1 = new Node(98, node0, node0, node0, 40, 124);
      node1.children();
      Node node2 = new Node(32, node1, node1, node0, 98, 3);
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 21, 21);
      node0.isEquivalentTo((Node) null);
      node0.getSideEffectFlags();
      node0.isOnlyModifiesThisCall();
      int int0 = 1709;
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(36, nodeArray0, (-861), 390);
      Node node1 = Node.newString(1, "+M~?BWhM98bOlYq\"");
      node0.isEquivalentTo(node1);
      node0.isNot();
      node0.isDelProp();
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = new Node((-1768), (-657), (-1768));
      Node node1 = new Node(12, 43, 46);
      node1.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = new Node(99);
      node0.isVarArgs();
      node0.isHook();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = Node.newString("pv'HAYg");
      Node node2 = new Node(32, node0, node0, node1);
      node2.getSourceFileName();
      node2.hasOneChild();
      Node.newNumber((double) 50);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = new Node(85);
      node0.isObjectLit();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("S7S=", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isNot();
      node0.getBooleanProp(85);
      node0.isNull();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(36, nodeArray0, (-861), 390);
      Node node1 = Node.newString(1, "+M~?BWhM98bOlYq\"");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("+M~?BWhM98bOlYq\"", false);
      node1.setStaticSourceFile(simpleSourceFile0);
      node0.isNot();
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = Node.newString((-3757), "Or(", 0, 3000);
      node0.getAncestors();
      node0.setQuotedString();
      Node node1 = Node.newString("=mH)u-$[D%5^");
      node0.getIndexOfChild(node1);
      node0.setLineno(105);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) null);
      node0.addChildrenAfter(node2, node2);
      node0.isThis();
      String string0 = "NTr'cH])?XLt";
      Node.newString(string0);
      node0.isOr();
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = Node.newString("jPhSOA", (-464), (-464));
      Node node1 = new Node(39, node0);
      Node node2 = Node.newNumber((-656.0));
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node2);
      node2.getProp(0);
      node3.setSourceEncodedPosition(98);
      node2.isRegExp();
      node1.getCharno();
      node1.getIndexOfChild(node2);
      node3.isInc();
      Node node4 = new Node(32);
      node4.isOptionalArg();
      node2.useSourceInfoIfMissingFromForTree(node0);
      node3.isNot();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = new Node(32, 64, (-747));
      node0.isUnscopedQualifiedName();
      node0.getQualifiedName();
      node0.isBreak();
      node0.getChangeTime();
      Node node1 = new Node((-1052), node0);
      node0.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-303), nodeArray0, 35, 32);
      Node node1 = new Node((-303), node0, node0, node0);
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = Node.newString(584, "");
      node0.getIntProp(584);
      node0.removeProp(0);
      node0.setType(0);
      node0.isOptionalArg();
      node0.isComma();
      node0.isNew();
      node0.setLineno(16777216);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getIntProp(1718);
      Node node1 = new Node(1166);
      node1.setType(37);
      node0.isTrue();
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString((-1), "free_call");
      node0.isOnlyModifiesArgumentsCall();
      node0.setLineno(3437);
      node0.getSideEffectFlags();
      node0.isTypeOf();
      node0.getLength();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry1.createOptionalType(objectType0);
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = (JSType) objectType0;
      Node node0 = jSTypeRegistry1.createOptionalParameters(jSTypeArray0);
      node0.isContinue();
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = new Node(256, (-2147124153), (-2147124153));
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      Node node1 = new Node(38, nodeArray0);
      nodeArray0[2].siblings();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString("(PDyQn<<i", (-464), 2193);
      Node node1 = new Node(2193, node0, node0, node0, 52, 22);
      nodeArray0[0] = node1;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.areAllFlagsSet();
      node1.mayMutateArguments();
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 62, 62);
      node0.getQualifiedName();
      node0.isQualifiedName();
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(617, nodeArray0);
      Node node1 = new Node(617, node0, node0, node0, node0, 57, 30);
      node0.isCast();
      node1.isInstanceOf();
      node0.removeChildAfter(node1);
      int int0 = (-536870912);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node node0 = Node.newString("v@", 749, 749);
      node0.setLineno(16);
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = Node.newString("dG#C/zzK*H]iV");
      Node node1 = Node.newString("dG#C/zzK*H]iV", 57, 1);
      node0.removeChildAfter(node1);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Node node0 = Node.newString(44, "AWUFdB&Hh(r*XFk");
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(2, nodeArray0, 40, 3632);
      node1.isOr();
      Node node2 = new Node(0, node1, node1, node0);
      node0.isAdd();
      node0.isAnd();
      node2.removeChildAfter(node1);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(36, nodeArray0, 2436, 2436);
      Node node1 = Node.newString(57, "+M~?BWhM98bOlYq\"");
      node1.isEquivalentTo(node0);
      node1.isNot();
      node0.isDelProp();
      node1.isWhile();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      int int0 = 21;
      Node node0 = null;
      Node node1 = new Node(21, (Node) null, (-909), (-909));
      int int1 = 153;
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 13, 13);
      node0.getProp(37);
      node0.putBooleanProp(42, false);
      node0.putProp(13, (Object) null);
      node0.isTypeOf();
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = new Node((-1768));
      Node node1 = new Node(39, Integer.MIN_VALUE, 12);
      node1.isLabel();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("free_call", (-1), (-1));
      node0.type = (-1);
      node0.setLineno(3437);
      int int0 = Node.INPUT_ID;
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.newNumber((-59.842615106), 606, 5437);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString((-1), "free_call");
      Node node1 = Node.newString(39, "FUNCTION", 43, 4332);
      node1.removeChildAfter(node0);
      node0.detachChildren();
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = Node.newString(105, ")4i");
      Node node1 = Node.newString("node is not a} child");
      node1.checkTreeEquals(node0);
      node1.addChildrenToFront(node0);
      Node node2 = new Node(85, node0, node0, node0, node0);
      node1.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node node0 = Node.newString(1073741824, "cn=D4^?AE");
      Node node1 = new Node(38, node0, 38, 693);
      Node node2 = new Node(114, node0, node1, node1, node0, 4095, 10);
      node1.isVar();
      node2.isInstanceOf();
      double double0 = (-1885.304222218);
      Node node3 = Node.newNumber(double0);
      // Undeclared exception!
      try { 
        node3.isDelProp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = Node.newString("!0?k!OD=M,b9[7@[b", 3742, 739);
      Node node1 = Node.newString("!0?k!OD=M,b9[7@[b");
      Node node2 = Node.newNumber(0.5);
      node2.checkTreeEquals(node0);
      Node node3 = node0.clonePropsFrom(node1);
      node0.toString();
      Node node4 = new Node(39, node3, node0, node1);
      node4.getDouble();
      node4.getStaticSourceFile();
      node4.getJSDocInfo();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString((-1), "free_call");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("FUNCTION");
      Node node1 = new Node(39, node0, node0, node0, node0, 2, 55);
      node1.isGetProp();
      node1.getString();
      node0.getJSType();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString(29, "/;bKE0c.0x:hCP", 29, (-1828));
      node0.setWasEmptyNode(true);
      node0.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = new Node(54, node0, node0, node0, node0, 33, 50);
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(57);
      node0.isEquivalentTo(node1, true, true, true);
      node2.isInc();
      node1.isOptionalArg();
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node0);
      node3.isNot();
      node1.isGetElem();
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = new Node(33, 33, 2436);
      InputId inputId0 = new InputId("Wub}_wYVu(46_\"");
      Node node1 = Node.newString("Wub}_wYVu(46_\"");
      node1.checkTreeEquals(node0);
      node0.addChildrenToFront(node1);
      node1.isWith();
      Node node2 = new Node(1);
      node2.isName();
      node2.getDouble();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(36, nodeArray0, 2436, 2436);
      Node node1 = Node.newString(57, "+M~?BWhM98bOlYq\"");
      node1.isEquivalentTo(node0);
      node1.isNot();
      node0.isDelProp();
      Node.newString("");
      node0.isOr();
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = Node.newString("!0?k!OD=M,b9[7@[b", 3742, 739);
      Node node1 = Node.newString("!0?k!OD=M,b9[7@[b");
      Node node2 = Node.newNumber(0.5);
      node2.checkTreeEquals(node0);
      Node node3 = node0.clonePropsFrom(node1);
      node0.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node4 = node1.setJSDocInfo(jSDocInfo0);
      Node node5 = node2.useSourceInfoIfMissingFromForTree(node0);
      node5.isEquivalentToShallow(node4);
      node1.isEquivalentTo(node3, true, true, false);
      node1.isFromExterns();
      node5.isBreak();
      node3.isAssign();
      node4.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = Node.newString((-861), "d!.iEc|Q6XQNWV");
      node0.isNew();
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString((-1), "free_call");
      node0.addChildrenToBack(node0);
      Node node1 = Node.newNumber((-1.0), 2, 51);
      node1.hasOneChild();
      node0.getCharno();
      node0.isSyntheticBlock();
      node0.isInstanceOf();
      Node node2 = Node.newNumber((-1004.0));
      node1.isDelProp();
      node2.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = Node.newString(532, "ELLIPSIS", (-1531), 1194);
      Node node1 = new Node(532, node0, node0, node0, node0, 155, 8);
      node1.removeChildren();
      node0.getInputId();
      node1.isWhile();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = Node.newNumber((-1086.84448), (-862048943), (-862048943));
      node0.isGetterDef();
      node0.addSuppression("NOT_NULL");
      node0.setLineno(434);
      node0.isQuotedString();
      node0.isOr();
      node0.getSourceFileName();
      node0.isOr();
      node0.isDo();
      Node node1 = new Node(7, node0, node0);
      Node node2 = node1.getLastChild();
      node0.getExistingIntProp(33);
      node1.isInc();
      node1.isLocalResultCall();
      node0.isDefaultCase();
      node2.isAdd();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = Node.newString((-480), "hU_?q", (-480), 27);
      Node node1 = new Node(115, node0, node0, node0, node0, 617, 1771);
      node0.isSyntheticBlock();
      node0.isInstanceOf();
      Node.newNumber((double) 53);
      node1.isDelProp();
      Node.mergeLineCharNo(43, 855);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      int int0 = 147;
      String string0 = "";
      Node node0 = Node.newString(147, "");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.copyInformationFromForTree(node1);
      node0.getSourceOffset();
      node1.siblings();
      node0.addChildBefore((Node) null, (Node) null);
      // Undeclared exception!
      try { 
        node0.putProp(int0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = new Node((-2228));
      node0.getProp(0);
      Node node1 = new Node(38, 1, 43);
      node1.isVarArgs();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      Node node3 = new Node(40, node2);
      node3.isEquivalentTo(node0, true, true, false);
      node1.isLabel();
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = new Node(43, 29, 37);
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.getSourceOffset();
      node2.children();
      jSTypeRegistry0.getObjectElementKey();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(390, nodeArray0, 36, 665);
      node0.addSuppression("l'de6YR");
      node0.setLineno(344);
      node0.isQuotedString();
      node0.isOr();
      node0.getSourceFileName();
      node0.isOr();
      node0.isDo();
      Node node1 = node0.getLastChild();
      node0.getExistingIntProp(52);
      node0.isInc();
      node0.isArrayLit();
      node1.isDefaultCase();
      node0.isAdd();
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 52
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = Node.newString(147, "");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = Node.newNumber(612.502446777287, 46, 751);
      Node node4 = new Node(8, node2, node2, node3, node3);
      node2.isThis();
      node1.isScript();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = Node.newNumber((-2853.192), 749, 749);
      node0.isNE();
      node0.getDouble();
      Node node1 = node0.useSourceInfoIfMissingFromForTree(node0);
      node1.isScript();
      node1.isCatch();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = new Node(617, 617, 1199);
      node0.detachChildren();
      node0.wasEmptyNode();
      node0.wasEmptyNode();
      Node node1 = new Node(2, node0, node0, node0, node0);
      node0.isString();
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = new Node(617, 617, 617);
      node0.detachChildren();
      node0.wasEmptyNode();
      node0.wasEmptyNode();
      Node node1 = new Node(2, node0, node0, node0, node0);
      node0.isString();
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      int int0 = 1395;
      Node node0 = Node.newString("SyntaxError");
      Node node1 = new Node(1818, node0, node0, node0);
      node1.setType(93);
      node1.addChildrenAfter(node0, node0);
      Node node2 = new Node(int0, node1, node1, node1, node0.FLAG_GLOBAL_STATE_UNMODIFIED, node1.COLUMN_BITS);
      node2.getJSType();
      double double0 = 0.0;
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("$|p");
      Node node1 = node0.clonePropsFrom(node0);
      node0.isVarArgs();
      node0.isLabel();
      Node node2 = Node.newNumber((double) 56, 48, 57);
      node2.getLength();
      node0.isExprResult();
      node0.addChildrenAfter(node1, node2);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(1902, 16, 1902);
      node0.getAncestor(Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("}w)&!p<Y");
      Node node1 = null;
      node0.checkTreeEquals((Node) null);
      node0.addChildrenToFront(node1);
      Vector<Node> vector0 = null;
      try {
        vector0 = new Vector<Node>(node0.COLUMN_MASK);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(117, "Yf_6(5qG");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node1 = new Node(31, nodeArray0, 46, 57);
      nodeArray0[2].isOr();
      int int0 = 20;
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(36, nodeArray0, (-880), 390);
      node0.detachChildren();
      Node node1 = Node.newString(1, "+M~?BWhM98bOlYq\"");
      node1.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      int int0 = (-630);
      Node node0 = Node.newNumber((double) (-630), (-630), (-630));
      node0.setSourceEncodedPositionForTree(30);
      node0.isEquivalentTo(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.setJSDocInfo(jSDocInfo0);
      node0.useSourceInfoIfMissingFromForTree((Node) null);
      // Undeclared exception!
      try { 
        node0.getProp(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = new Node((-2221));
      node0.getProp(0);
      Node node1 = new Node(43, node0, node0);
      node1.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(31);
      node_SideEffectFlags0.setMutatesArguments();
      node2.setSideEffectFlags(node_SideEffectFlags1);
      node3.getChildBefore(node1);
      node3.isSetterDef();
      // Undeclared exception!
      try { 
        node2.getQualifiedName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2221
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = new Node(3);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node0.setSideEffectFlags(node_SideEffectFlags1);
      int int0 = 1556;
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(37, "", 1, 4095);
      node1.setWasEmptyNode(true);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder1.append("{H");
      node_FileLevelJsDocBuilder0.append("");
      node0.getJSDocInfo();
      node1.isGetProp();
      Node node2 = node0.removeChildAfter(node1);
      node2.detachChildren();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = new Node(3634);
      String string0 = "!4?ivG";
      node0.clonePropsFrom((Node) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        node0.setIsSyntheticBlock(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString(0, "\"$", 1023, 1023);
      node0.children();
      Node node1 = new Node(0, node0, node0, node0, 3263, (-2999));
      node1.isExprResult();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = Node.newString((-1), "(PDyQn<<i");
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node((-1), (Node) null, (Node) null);
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = new Node((-2221));
      node0.getProp(0);
      Node node1 = new Node(43, node0, node0);
      node1.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node1.isSyntheticBlock();
      node0.isDelProp();
      node2.setOptionalArg(true);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(36, nodeArray0, 2436, 2436);
      Node node1 = Node.newString(57, "+M~?BWhM98bOlYq\"");
      node1.isEquivalentTo(node0);
      node1.isNot();
      node0.addChildrenAfter(node1, node1);
      node1.isThis();
      node0.isWhile();
      // Undeclared exception!
      try { 
        node0.isGetElem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(37, "", 1, 4095);
      node1.setWasEmptyNode(true);
      node1.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node2 = new Node(15, node0, node1, node0, node0, 739, (-1));
      node2.isEquivalentToShallow(node1);
      node0.addChildToBack(node2);
      node1.isEquivalentTo(node2, true, true, false);
      node0.isFromExterns();
      node1.isBreak();
      node2.isAssign();
      node2.isQualifiedName();
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = Node.newString("PARAM_LIST", 25, 4119);
      Node node1 = new Node(4095, node0, node0, 39, 4095);
      node1.putBooleanProp(36, true);
      node0.isComma();
      node1.addChildToBack(node0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = new Node(85);
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = Node.newString("!0?k!OD=M,b9[7@[b", 3742, 739);
      Node node1 = Node.newString("!0?k!OD=M,b9[7@[b");
      Node node2 = Node.newNumber(0.5);
      node2.checkTreeEquals(node0);
      Node node3 = node0.clonePropsFrom(node1);
      node0.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node4 = node1.setJSDocInfo(jSDocInfo0);
      Node node5 = node2.useSourceInfoIfMissingFromForTree(node0);
      node5.isEquivalentToShallow(node4);
      node1.isEquivalentTo(node3, true, true, false);
      node1.isFromExterns();
      node5.isThis();
      node5.isWhile();
      node1.isGetElem();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = Node.newString(44, "AWUFdB&Hh(r*XFk");
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(2, nodeArray0, 40, 49);
      node1.isOr();
      Node node2 = new Node(0, node1, node1, node0);
      node2.getString();
      node2.replaceChildAfter(node1, node0);
      // Undeclared exception!
      try { 
        node0.isAssign();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = Node.newString("9JsdN^Bc:]<6(<m");
      node0.setQuotedString();
      node0.getBooleanProp(1);
      node0.setDouble(732.3382);
      node0.isNE();
      // Undeclared exception!
      try { 
        node0.isDelProp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING 9JsdN^Bc:]<6(<m [quoted: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newNumber(1874.3091971995, 21, 1871);
      Node node1 = new Node(1871, node0, node0, node0, node0);
      Node node2 = new Node(21, node1, 52, 0);
      Node node3 = node1.removeChildren();
      node3.addSuppression((String) null);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node2.isEquivalentTo(node0, true, false, false);
      node0.getString();
      node2.isUnscopedQualifiedName();
      node0.isVarArgs();
      node2.clonePropsFrom(node1);
      node3.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = Node.newString(155, "KYe.'_r");
      node0.getJSDocInfo();
      node0.setIsSyntheticBlock(true);
      node0.isOnlyModifiesArgumentsCall();
      node0.getSideEffectFlags();
      node0.getChangeTime();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = Node.newString(44, "AWUFdB&Hh(r*XFk");
      node0.setLength(44);
      node0.toStringTree();
      node0.isAdd();
      node0.isAnd();
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = Node.newString((-1793), "j$BDisrUOSb_fb");
      node0.isNoSideEffectsCall();
      Node node1 = Node.newString(50, "j$BDisrUOSb_fb", 51, 36);
      node0.addChildrenAfter(node1, node1);
      int int0 = (-5889);
      Node[] nodeArray0 = new Node[2];
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = Node.newString(364, "7e\"8:y|-<$S4=y");
      node0.isUnscopedQualifiedName();
      node0.isBreak();
      node0.getIntProp(364);
      Node node1 = new Node(272);
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getProp(306);
      Node node1 = new Node(46, node0, node0, node0);
      node1.setLength(2);
      Node node2 = null;
      node1.addChildrenToFront(node0);
      int int0 = 52;
      Node node3 = null;
      try {
        node3 = new Node(node0.SLASH_V, node2, node0, node1, node1.SIDE_EFFECTS_ALL, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = Node.newString(617, "uEfi+Z", (-4500), 43);
      node0.children();
      Node node1 = new Node(2, node0, node0, node0, 31, 46);
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = Node.newString(256, "(GEE");
      Node node1 = new Node(54, node0, node0);
      Node node2 = new Node(54, node0, 15, 1456);
      node2.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = Node.newString("(GE'", 256, 256);
      Node node1 = new Node(55, node0, node0, node0, node0);
      node0.isThis();
      node0.isLabelName();
      Node node2 = new Node(53, node0);
      node1.mayMutateArguments();
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = Node.newString(95, "+M~?BWhM98bOlYq\"");
      Node node1 = Node.newString("+M~?BWhM98bOlYq\"", 1328, 53);
      node1.setSourceFileForTesting("+M~?BWhM98bOlYq\"");
      node0.isEquivalentTo((Node) null, false, false, false);
      node1.isFromExterns();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("The new child node has siblings.");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      node0.setQuotedString();
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString("(PDyQn<<i", (-464), 2193);
      Node node1 = new Node(2193, node0, node0, node0, 52, 22);
      nodeArray0[0] = node1;
      Node node2 = Node.newString("Not declared as a constructor");
      node0.setCharno((-4755));
      node1.isEquivalentToShallow(node2);
      node0.isEquivalentTo(node2, false, false, false);
      node1.isFromExterns();
      node0.isBreak();
      node1.isAssign();
      node2.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(37, "", 1, 4095);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder1.append("{H");
      node_FileLevelJsDocBuilder0.append("");
      node1.isGetProp();
      node1.getBooleanProp(8);
      node0.isAssignAdd();
      node0.getString();
      Node node2 = new Node(29, node0);
      node0.isEquivalentToTyped(node1);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = Node.newString("!0?k!OD=M,b9[7@[b", 3742, 739);
      Node node1 = Node.newString("!0?k!OD=M,b9[7@[b");
      Node node2 = Node.newNumber(0.5);
      node2.checkTreeEquals(node0);
      node0.clonePropsFrom(node1);
      node0.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node3 = node1.setJSDocInfo(jSDocInfo0);
      Node node4 = node2.useSourceInfoIfMissingFromForTree(node0);
      node4.setCharno(12);
      node4.isEquivalentToShallow(node3);
      node0.isString();
      node2.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("9JsdN^Bc:]<6(<m");
      node0.setQuotedString();
      node0.isString();
      node0.isComma();
      node0.detachFromParent();
      // Undeclared exception!
      try { 
        node0.getCharno();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = Node.newString((String) null);
      // Undeclared exception!
      try { 
        node0.isBlock();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("j$BDisrUOSb_fb");
      Node node1 = Node.newString(39, "NEG", 31, 29);
      node1.setOptionalArg(false);
      node0.setWasEmptyNode(false);
      node0.getJsDocBuilderForNode();
      Node node2 = Node.newString((String) null);
      node1.useSourceInfoFromForTree(node2);
      double double0 = (-1.2068889170318624);
      Node.newNumber(double0);
      node0.isDelProp();
      // Undeclared exception!
      try { 
        node1.isSwitch();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[2];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
      ObjectType objectType0 = jSTypeRegistry1.getNativeObjectType(jSTypeNative0);
      jSTypeArray0[0] = (JSType) objectType0;
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry2.createOptionalType(objectType0);
      jSTypeArray0[1] = jSType0;
      JSType.isEquivalent(jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isContinue();
      node0.isCatch();
      node0.getString();
      String string0 = "synthetic";
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 62, 62);
      Node node1 = new Node(51, node0, node0);
      node0.getDouble();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = new Node((-2221));
      node0.getProp(0);
      Node node1 = new Node(43, node0, node0);
      node1.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      node2.children();
      Node node3 = new Node(39, node1, node0, node2, 0, 56);
      node1.isExprResult();
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = Node.newString("<_NZQ");
      node0.isBreak();
      node0.isVarArgs();
      node0.setSourceFileForTesting("dirct_eval");
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString("(PxDyQn<<i", (-464), 2193);
      Node node1 = new Node(40, node0);
      nodeArray0[0] = node1;
      Node node2 = Node.newNumber((double) 53);
      node1.useSourceInfoIfMissingFromForTree(node2);
      node1.getProp(37);
      node0.isNot();
      Node node3 = new Node(1442, 100, (-1110));
      node1.isBreak();
      node1.isEmpty();
      node0.setSourceFileForTesting("j$BDisrUOSb_fb");
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = new Node((-390), (-390), (-1430));
      node0.addChildToFront((Node) null);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      int int0 = 4764;
      Node.extractLineno(4764);
      Node[] nodeArray0 = new Node[6];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>((-229));
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      nodeArray0[0] = node0;
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(36, nodeArray0, 2436, 2436);
      Node node1 = Node.newString(57, "+M~?BWhM98bOlYq\"");
      node1.isEquivalentTo(node0);
      node1.isNot();
      node0.isDelProp();
      Node node2 = Node.newString("");
      node2.setLength(8);
      node2.isThrow();
      node0.isUnscopedQualifiedName();
      node1.getLastSibling();
      node0.setString("+M~?BWhM98bOlYq\"");
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = Node.newNumber((-22.3381), 1365, 1365);
      Node node1 = new Node(4095, node0, node0);
      node1.setDouble(52);
      Node node2 = node1.cloneTree();
      node1.isTry();
      // Undeclared exception!
      try { 
        Node.extractCharno(node2.SIDE_EFFECTS_FLAGS_MASK);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4095
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = Node.newNumber((-2853.192), 749, 749);
      Node node1 = new Node(50, node0, node0);
      node1.setDouble(42);
      int int0 = (-319);
      int int1 = (-821);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = Node.newNumber(1237.9, 749, 749);
      node0.getJSType();
      node0.toStringTree();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node((-1), node0);
      node0.setSourceEncodedPosition(25);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-4096));
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.clearSideEffectFlags();
      node1.isGetElem();
      node0.hasMoreThanOneChild();
      node1.checkTreeEquals(node0);
      node0.addChildToBack(node1);
      node_SideEffectFlags2.setMutatesArguments();
      Node node2 = node0.cloneTree();
      node0.getAncestor(node2.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 62, 62);
      Node node1 = new Node(51, node0, node0);
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString("uli+");
      Node node1 = Node.newString(8, "com.google.javascript.rhino.jstype.VoidType");
      node0.setQuotedString();
      node1.isGetterDef();
      node0.isContinue();
      Node node2 = new Node(536870912, node0, node1);
      node2.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = Node.newString(749, "Node tree inequality:\nTree1:\nASSIGN_URSH\n    STRING The new child node has siblings.\n\n\nTree2:\nSTRING The new child node has siblings.\n\n\nSubtree1: ASSIGN_URSH\n    STRING The new child node has siblings.\n\n\nSubtree2: STRING The new child node has siblings.\n", 749, 749);
      node0.isFunction();
      node0.isSwitch();
      node0.isParamList();
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString("");
      Node node2 = new Node(55, node0, node1, node0, node0);
      node1.isThis();
      node0.isLabelName();
      Node node3 = Node.newNumber((double) 4095, 49, 3204);
      Node node4 = node1.useSourceInfoIfMissingFromForTree(node3);
      node3.mayMutateArguments();
      node2.copyInformationFromForTree(node3);
      node1.isNE();
      node2.isThrow();
      node3.isOr();
      node4.children();
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = Node.newString(98, "prev is not a child of this node.", 434, 749);
      node0.isIf();
      node0.isSwitch();
      node0.isDefaultCase();
      node0.isParamList();
      InputId inputId0 = new InputId("prev is not a child of this node.");
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node node0 = new Node(3634);
      node0.setIsSyntheticBlock(true);
      Node node1 = Node.newString("!4?ivG", 16, 4095);
      node1.isNull();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = Node.newString("j$BDisrUOSb_fb");
      node0.setString("j$BDisrUOSb_fb");
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node node0 = Node.newString("Gnpd;5", 131, 787);
      Node node1 = new Node(843, node0, node0, node0, node0, 2057, 2048);
      node1.getChildCount();
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node node0 = Node.newString(256, "(GE'", 256, 256);
      Node node1 = new Node(55, node0, node0, node0, node0);
      node1.isNot();
      int int0 = Node.DIRECTIVES;
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node node2 = node1.srcref(node0);
      node0.isRegExp();
      node1.getJSType();
      node2.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node node0 = Node.newString(256, "(GE'");
      Node node1 = new Node(55, node0, node0, node0, node0);
      node0.isThis();
      Node node2 = node0.useSourceInfoFrom(node1);
      node1.srcrefTree(node2);
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = Node.newNumber(1303.38994816543);
      node0.setType((-1545));
      node0.isTry();
      node0.isDelProp();
      node0.addChildrenToFront((Node) null);
      node0.isNoSideEffectsCall();
      node0.isAssignAdd();
      int int0 = 101;
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node[] nodeArray0 = new Node[2];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      Node node0 = Node.newString(124, "Object#Element", 124, 571);
      nodeArray0[0] = node0;
      Node node1 = new Node(4, 1, 38);
      nodeArray0[1] = node1;
      Node.newString(126, "4Wbl+ESv");
      node0.isAssignAdd();
      node1.getType();
      Node node2 = Node.newString((-674), "r+H'Uo");
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      File file0 = MockFile.createTempFile("Qv_I[,6h5FJUC,", "com.google.common.base.CharMatcher$Or");
      String string0 = "='Qo7r$cR)6=<RfE";
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0, string0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE);
      node3.appendStringTree(printStream0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString("(PxDyQn<<i", (-464), 2193);
      Node node1 = new Node(40, node0);
      nodeArray0[0] = node1;
      Node node2 = Node.newNumber((double) 53);
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node2);
      node1.getProp(37);
      node1.setSourceEncodedPosition(108);
      node2.isRegExp();
      node3.getCharno();
      node1.getIndexOfChild(node0);
      node1.isInc();
      node1.isOptionalArg();
      node3.useSourceInfoIfMissingFromForTree(node1);
      node2.isNot();
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Node node0 = Node.newNumber((-1179.46404712), 1258, 1258);
      node0.isRegExp();
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = Node.newString("jPhSOA", (-464), (-464));
      Node node1 = new Node(39, node0);
      Node node2 = Node.newNumber((-656.0));
      node2.getProp(0);
      node1.setSourceEncodedPosition(98);
      node2.isRegExp();
      node1.getCharno();
      node1.getIndexOfChild(node2);
      node1.isInc();
      Node node3 = new Node(32);
      node3.isOptionalArg();
      node2.useSourceInfoIfMissingFromForTree(node0);
      node2.isNot();
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Node node0 = new Node(32, 64, (-709));
      node0.isUnscopedQualifiedName();
      node0.getQualifiedName();
      Node node1 = new Node((-654), node0, node0);
      node1.hasMoreThanOneChild();
      node0.isDebugger();
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
      node_NodeMismatch0.equals(simpleSourceFile0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(37, "", 1, 4095);
      Node node2 = new Node((-2074), node1);
      Node node3 = Node.newNumber((-1086.84448));
      Node node4 = node0.useSourceInfoIfMissingFromForTree(node2);
      node0.getProp(117);
      node4.isNot();
      Node node5 = new Node((-3790), 40, 2848);
      node1.isBreak();
      node2.isEmpty();
      node1.setSourceFileForTesting("j$BDisrUOSb_fb");
      node4.isArrayLit();
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node3);
      node_NodeMismatch0.equals((Object) null);
      node4.getLineno();
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node node0 = Node.newString((-680), (String) null);
      node0.getInputId();
      // Undeclared exception!
      try { 
        node0.isOnlyModifiesThisCall();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node[] nodeArray0 = new Node[2];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[17];
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeRegistry0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(124, "Object#Element", 124, 571);
      nodeArray0[0] = node0;
      Node node1 = new Node(31);
      nodeArray0[1] = node1;
      Node.newString(126, "4Wbl+ESv");
      node0.isAssignAdd();
      node1.getType();
      Node node2 = new Node(57, node0, node0, node0, node1, 56, 2);
      node1.useSourceInfoIfMissingFrom(node2);
      Node.newString("ZIXzl8`t*t `|!J`");
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node node0 = Node.newNumber((-3079.5834));
      Node node1 = new Node(76, node0, node0);
      Node node2 = node1.cloneTree();
      node1.hasChildren();
      node2.isQuotedString();
      node1.isVoid();
      node0.useSourceInfoIfMissingFrom(node2);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = Node.newString("PARAM_LIST", 22, (-3757));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = new Node(115, node0, node0, 47, 108);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.putBooleanProp((-601), true);
      node0.isComma();
      node0.addChildToBack(node1);
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = Node.newNumber((-3079.5834));
      node0.hasChildren();
      Node node1 = new Node((-2286), node0, node0);
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(37, "", 1, 4095);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder1.append("B ");
      node_FileLevelJsDocBuilder0.append("");
      node1.isGetProp();
      node1.getChangeTime();
      node0.getString();
      Node node2 = Node.newString("", 117, 84);
      node2.setLineno(31);
      node1.isCast();
      node1.isTry();
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString(29, "/;bKE0c.0x:hCP", 29, (-1828));
      node0.setWasEmptyNode(true);
      node0.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = new Node(54, node0, node0, node0, node0, 33, 50);
      node0.isEquivalentToShallow(node1);
      Node node2 = Node.newString(36, "/;bKE0c.0x:hCP", (-4291), 680);
      Node node3 = new Node(57);
      node2.addChildToBack(node3);
      node0.isEquivalentTo(node2, true, true, true);
      node3.isFromExterns();
      node2.isBreak();
      Node node4 = Node.newString(2, "{H");
      node4.isAssign();
      node1.isQualifiedName();
      node3.isIf();
      node0.isSwitch();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1347), 53);
      node0.isSwitch();
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newNumber((-914.5720058), 63, 105);
      node0.children();
      Node node1 = node0.cloneNode();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(43);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags3.clearAllFlags();
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(7070, nodeArray0, (-1543), 159);
      node2.setSourceEncodedPositionForTree((-2231));
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags4.setMutatesThis();
      node2.isInc();
      node1.setDirectives((Set<String>) null);
      node1.setSideEffectFlags(63);
      Node node3 = node1.srcref(node0);
      node3.getString();
      int int0 = 110;
      node2.removeProp(int0);
      Node node4 = node0.useSourceInfoFrom(node2);
      node4.srcrefTree(node1);
      Node node5 = node1.srcrefTree(node0);
      // Undeclared exception!
      try { 
        node5.isName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newNumber(1782.028548849807, 1665, 1665);
      node0.isCall();
      int int0 = Node.REFLECTED_OBJECT;
      Node node1 = new Node(766);
      node0.addChildToFront(node1);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(2062, "d!.iEc|Q6XQNWV");
      node1.addChildToBack(node0);
      node1.isNew();
      node1.isSetterDef();
      node0.isFunction();
      node0.addSuppression("");
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newNumber((-357.30857), (-306), (-306));
      Node node1 = new Node(148, node0, node0);
      node1.setDouble(57);
      Node node2 = node1.cloneTree();
      node2.isTry();
      // Undeclared exception!
      try { 
        Node.extractCharno(node0.DIRECTIVES);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SETTER_DEF is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Node node0 = Node.newString(749, "v@", 3677, (-1243));
      node0.children();
      Node node1 = new Node(147, (-820), 1);
      node1.isFor();
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.getJsDocBuilderForNode();
      node0.isWhile();
      node2.getChildCount();
      node1.checkTreeTypeAwareEqualsImpl((Node) null);
      node2.srcref(node1);
      String string0 = "X{oQ!u@y";
      node1.setString(string0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString((-1), "free_call");
      node0.addChildrenToBack(node0);
      Node.newNumber((-1436.005019751), 2, 51);
      node0.isCall();
      int int0 = Node.REFLECTED_OBJECT;
      node0.removeChildren();
      node0.getInputId();
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newNumber(1782.137609601066, 1665, 1665);
      node0.isCall();
      int int0 = Node.REFLECTED_OBJECT;
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node.newString("");
      Node node0 = Node.newString(37, "", 1, 4095);
      Node node1 = new Node(4095, node0);
      node0.isCall();
      int int0 = Node.FLAG_LOCAL_RESULTS;
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.Lists$RandomAccessListWrapper", 1060, 1060);
      node0.getType();
      Node node1 = Node.newString(49, "com.google.javascript.rhino.Node", (-1874), 1060);
      node0.addChildToBack(node1);
      Node node2 = Node.newString(31, "}`2CCv&FALl3aE*", 40, 1024);
      Node node3 = null;
      node0.setString("g3d:PXO");
      node2.replaceChild((Node) null, (Node) null);
      int int0 = 93;
      node2.setSourceEncodedPositionForTree(int0);
      node2.addChildBefore(node3, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node0.setCharno(node2.DIRECT_EVAL);
      node_SideEffectFlags0.valueOf();
      node1.isLabel();
      EvoSuiteFile evoSuiteFile0 = null;
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Node node0 = Node.newString(2063, "", 2063, 2063);
      node0.setWasEmptyNode(true);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("");
      node0.isGetProp();
      node0.getString();
      node0.getJSType();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(37, "", 1, 4095);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder1.append("{H");
      node_FileLevelJsDocBuilder0.append("");
      node1.isGetProp();
      node1.getChangeTime();
      node_FileLevelJsDocBuilder1.append("{H");
      node_FileLevelJsDocBuilder0.append("s[Epz[tvs+");
      node_FileLevelJsDocBuilder0.append("Cm@J~s*]DOX+[");
      node1.isGetProp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(56);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.areAllFlagsSet();
      node0.mayMutateArguments();
      Node node2 = new Node((-2203), node1, node0);
      node2.isNE();
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = Node.newString("PARAM_LIST", 25, 4119);
      Node node1 = new Node(4095, node0, node0, 39, 4095);
      node1.isBlock();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}=#I'EUFFM.S|Dj,!");
      node1.isParamList();
      node1.removeChild(node0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(37, "", 1, 4095);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder1.append("B ");
      node_FileLevelJsDocBuilder0.append("");
      node1.isGetProp();
      node0.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node0);
      node3.setCharno(2);
      node0.isEquivalentToShallow(node3);
      node3.isString();
      node1.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString("(PDyQn<<i", (-464), 2193);
      Node node1 = new Node(2193, node0, node0, node0, 52, 22);
      nodeArray0[0] = node1;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setThrows();
      Node node2 = Node.newString(38, "(PDyQn<<i");
      Node node3 = new Node(40, node2, node2, 39, 37);
      node3.isBreak();
      node0.isThrow();
      Node node4 = Node.newString((-2673), "STRING", 40, 48);
      node4.isAdd();
      node2.isGetProp();
      Node node5 = new Node(114, node0, node3, node3, node1, 32, 43);
      node5.isAnd();
      node4.isDec();
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("fJsdN^Bc:]<6(<m");
      node0.setQuotedString();
      node0.isOr();
      Node node1 = Node.newString(31, "fJsdN^Bc:]<6(<m", 56, 4);
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Node node0 = Node.newString("PEU8V?wZ*d|7& 7");
      Node node1 = Node.newNumber((-3209.5283926));
      node1.getInputId();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.setInputId((InputId) null);
      Node node2 = Node.newString("PEU8V?wZ*d|7& 7");
      node2.checkTreeEquals(node0);
      node1.addChildrenToFront(node2);
      node0.isSwitch();
      node0.isParamList();
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Node node0 = Node.newNumber((-3079.5834));
      Node node1 = node0.cloneTree();
      node0.hasChildren();
      node0.isInc();
      node0.isNumber();
      node0.setDirectives((Set<String>) null);
      node0.srcref(node1);
      node1.removeProp((-968));
      Node node2 = node1.useSourceInfoFrom(node0);
      node0.srcrefTree(node2);
      node2.isName();
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "epomvHJ2>");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=Vh");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "epomvHJ2>");
      Node node0 = Node.newString("epomvHJ2>", 11, 1103);
      node0.setWasEmptyNode(false);
      node0.putBooleanProp(1103, true);
      node0.isUnscopedQualifiedName();
      node0.addSuppression("epomvHJ2>");
      node0.putProp(11, "epomvHJ2>");
      node0.isOnlyModifiesThisCall();
      node0.isIf();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=Vh");
      node0.setVarArgs(false);
      node0.isCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("The new child node has siblings.", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.valueOf();
      node0.getType();
      node0.isWith();
      node0.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      int int0 = 390;
      Node node0 = Node.newString(390, "uEi+Z");
      node0.getSourceFileName();
      Node node1 = new Node(56, node0, node0, node0);
      int int1 = 21;
      int int2 = 88;
      node0.isEmpty();
      node1.isComma();
      node1.removeChildAfter(node0);
      Node node2 = new Node(int0, node0, node0, node1, node1, int1, int2);
      int int3 = (-2843);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      int int0 = 390;
      Node node0 = Node.newString(390, "uEi+Z");
      node0.getSourceFileName();
      Node node1 = new Node(56, node0, node0, node0);
      node0.isEmpty();
      node1.isComma();
      node1.removeChildAfter(node0);
      Node node2 = new Node(int0, node0, node0, node0, node0.IS_CONSTANT_NAME, node0.COLUMN_MASK);
      node1.isVoid();
      int int1 = null;
      try {  
      int1 = Node.DECR_FLAG;
      } catch(MockIllegalArgumentException e) {}
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Node node0 = new Node(85);
      node0.isVarArgs();
      node0.isHook();
      node0.hasOneChild();
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Node node0 = Node.newNumber((double) 32, 1867, 50);
      node0.setSourceEncodedPositionForTree(32);
      Node node1 = new Node(35, node0);
      node0.isEquivalentTo(node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      Node node3 = Node.newString("c|Z<6X");
      Node node4 = node3.useSourceInfoIfMissingFromForTree(node2);
      node0.getProp(654);
      node0.isNot();
      node4.isBlock();
      node4.isEmpty();
      node3.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Node node0 = Node.newNumber((-3079.5834));
      node0.hasChildren();
      Node node1 = new Node(1, node0);
      node1.getDirectives();
      Node node2 = node0.useSourceInfoFrom(node0);
      node0.srcrefTree(node2);
      node2.isName();
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Node node0 = Node.newString(147, "");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = Node.newNumber(612.502446777287, 46, 751);
      Node node4 = new Node(8, node2, node2, node3, node3);
      node4.getDirectives();
      node2.isThis();
      node1.isScript();
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Node node0 = Node.newString("");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node1 = Node.newString(0, "[-772_E'RB&s$'H'", 43, 37);
      Node node2 = new Node(1);
      Node node3 = Node.newString("d!.iEc|Q6XQNWV", 148, 1);
      node2.addChildToBack(node3);
      node0.isNull();
      node1.isOnlyModifiesArgumentsCall();
      node3.isLocalResultCall();
      node3.getSourcePosition();
      node1.useSourceInfoFrom(node3);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString(29, "/;bKE0c.0x:hCP", 29, (-1828));
      node0.setWasEmptyNode(true);
      node0.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = Node.newString(53, "{H");
      Node node2 = new Node(49, node1, node0, 42, 15);
      node1.isBreak();
      node0.isThrow();
      Node node3 = Node.newString(83, "Node tree inequality:\nTree1:\nASSIGN_URSH\n    STRING The new child node has siblings.\n\n\nTree2:\nSTRING The new child node has siblings.\n\n\nSubtree1: ASSIGN_URSH\n    STRING The new child node has siblings.\n\n\nSubtree2: STRING The new child node has siblings.\n", (-1185), 54);
      node3.isAdd();
      node0.isGetProp();
      int int0 = 121;
      Node node4 = Node.newNumber((double) 54);
      Node node5 = new Node(37, node4, node1, 40, 54);
      int int1 = 34;
      Node node6 = new Node(int0, node1, node2, node5, node5, node0.VAR_ARGS_NAME, int1);
      node6.isAnd();
      node0.isDec();
      node2.checkTreeTypeAwareEqualsImpl(node3);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("Ei^^`5");
      Node node1 = Node.newString(1, "Ei^^`5");
      Node node2 = new Node(15, node0, node1);
      node2.isName();
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Node node0 = Node.newNumber((double) 28, 28, 28);
      node0.getProp(37);
      node0.putBooleanProp(42, true);
      node0.putProp(37, "");
      node0.getProp(37);
      node0.isBlock();
      node0.isEmpty();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString(124, "Object#Element", 124, 571);
      node0.getInputId();
      node0.getJSDocInfo();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = Node.newString(43, "Node tree inequality:\nTree1:\nDEC\n    STRING The new child node has siblings.\n\n\nTree2:\nSTRING The new child node has siblings.\n\n\nSubtree1: DEC\n    STRING The new child node has siblings.\n\n\nSubtree2: STRING The new child node has siblings.\n", 37, 116);
      Node node1 = new Node((-497));
      Node node2 = Node.newString("Node tree inequality:\nTree1:\nDEC\n    STRING The new child node has siblings.\n\n\nTree2:\nSTRING The new child node has siblings.\n\n\nSubtree1: DEC\n    STRING The new child node has siblings.\n\n\nSubtree2: STRING The new child node has siblings.\n", 30, 42);
      node1.addChildToBack(node2);
      node0.isEquivalentTo(node2, false, false, true);
      node0.isWith();
      node2.isBreak();
      Node node3 = Node.newString(692, "inferred");
      node2.isAssign();
      node1.isQualifiedName();
      node3.isIf();
      node2.isSwitch();
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newNumber(3791.82088);
      Node node2 = new Node(5675, node0, node1);
      Node node3 = node2.cloneTree();
      node2.hasChildren();
      node3.isQuotedString();
      node3.isVoid();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      enumType1.getElementsType();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString(124, "Object#Element", 124, 571);
      nodeArray0[0] = node0;
      node0.isEquivalentTo(node0, true, false, false);
      node0.isFromExterns();
      node0.isBreak();
      Node node1 = Node.newString(306, "Object#Element");
      node0.isAssign();
      node1.isQualifiedName();
      node1.isIf();
      node0.isSwitch();
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString(29, "/;bKE0c.0x:hCP", 29, (-1828));
      node0.setWasEmptyNode(true);
      node0.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      String string0 = "{H";
      Node node1 = new Node(54, node0, node0, node0, node0, 33, 50);
      boolean boolean0 = node0.isEquivalentToShallow(node1);
      Node node2 = Node.newString(36, "/;bKE0c.0x:hCP", (-4291), 680);
      Node node3 = new Node(57);
      node0.isQuotedString();
      node2.addChildToBack(node3);
      Node node4 = new Node((-1325), 43, 301);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node3;
      StringWriter stringWriter0 = new StringWriter(40);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      node3.appendStringTree(stringBuffer0);
      Node node5 = Node.newString(string0);
      nodeArray0[1] = node5;
      nodeArray0[2] = node0;
      nodeArray0[3] = node1;
      nodeArray0[4] = node4;
      nodeArray0[5] = node2;
      int int0 = 42;
      nodeArray0[4].putBooleanProp(int0, boolean0);
      int int1 = 2435;
      Node node6 = new Node(node4.SIDE_EFFECTS_FLAGS_MASK, nodeArray0, node0.FLAG_THIS_UNMODIFIED, int1);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Node node0 = Node.newString((-1760), "Node tree inequality:\nTree1:\nDEC\n    STRING The new hildnode hap siblings.\n\n\nTree2:\nSTRING The new hildnode hap siblings.\n\n\nSubtree1: DEC\n    STRING The new hildnode hap siblings.\n\n\nSubtree2: STRING The new hildnode hap siblings.\n");
      boolean boolean0 = node0.isObjectLit();
      MockFile mockFile0 = new MockFile("'N5{3xw8", "'N5{3xw8");
      MockFile mockFile1 = new MockFile(mockFile0, "this");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, boolean0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      node0.appendStringTree(mockPrintWriter0);
      node0.isOr();
      node0.getSourcePosition();
      int int0 = 2979;
      // Undeclared exception!
      try { 
        node0.getBooleanProp(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1760
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString((-1), "free_call");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("FUNCTION");
      Node node1 = Node.newString((-1928), "HLB%fpL", 1962, (-1014));
      Node node2 = new Node(213);
      node0.addChildToBack(node2);
      node1.isEquivalentTo(node0, true, false, false);
      node1.isInc();
      node2.isOptionalArg();
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node1);
      node3.cloneTree();
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Node node0 = new Node(93);
      node0.getProp(93);
      node0.putBooleanProp(333, false);
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_TYPE;
      node0.putProp(42, jSTypeNative0);
      node0.getProp(333);
      node0.isBlock();
      node0.isEmpty();
      Node node1 = new Node(102, node0, node0, node0, 2740, 50);
      node1.isVar();
      Node.extractCharno(3429);
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Node node0 = Node.newString(98, "prev is not a child of this node.", 434, 749);
      node0.children();
      Node node1 = new Node(153, node0, node0, node0, 153, 1635);
      node1.mayMutateArguments();
      node1.clonePropsFrom(node0);
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Node node0 = Node.newNumber((-5972.619757634092));
      node0.isVarArgs();
      node0.isFromExterns();
      Node node1 = node0.removeChildren();
      node0.setSideEffectFlags(42);
      node0.getJsDocBuilderForNode();
      // Undeclared exception!
      try { 
        node1.isNull();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Node node0 = Node.newString("M", 28, 28);
      node0.putBooleanProp(42, true);
      node0.putProp(37, "M");
      node0.getProp(37);
      node0.isBlock();
      Node node1 = Node.newString(42, "M");
      node0.useSourceInfoIfMissingFrom(node1);
      node0.toStringTree();
      node1.setDouble(39);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Node node0 = Node.newNumber((double) 28, 28, 28);
      node0.getProp(37);
      node0.putBooleanProp(42, true);
      node0.putProp(37, "M");
      node0.getProp(37);
      node0.isBlock();
      Node node1 = new Node(2055, node0);
      node0.useSourceInfoIfMissingFrom(node1);
      Node.newString(154, ".9uy *R=:s!V21_wJm", 37, (-2740));
      node1.getJSType();
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node[] nodeArray0 = new Node[2];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[17];
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeRegistry0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(124, "Object#Element", 124, 571);
      nodeArray0[0] = node0;
      Node node1 = new Node(31);
      nodeArray0[1] = node1;
      Node.newString(126, "4Wbl+ESv");
      node0.isAssignAdd();
      node1.getType();
      Node node2 = new Node(57, node0, node0, node0, node1, 56, 2);
      node0.isEmpty();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node[] nodeArray0 = new Node[2];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[22];
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeRegistry0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(124, "Object#Element", 124, 571);
      nodeArray0[0] = node0;
      Node node1 = new Node(31);
      nodeArray0[1] = node1;
      Node.newString(37, "4Wbl+ESv");
      node0.isAssignAdd();
      node1.getType();
      Node node2 = new Node(57, node0, node0, node0, node1, 56, 2);
      node0.isEmpty();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Node.newString("");
      Node node0 = Node.newString(37, "", 1, 4095);
      Node node1 = Node.newString((-861), "frecall");
      node1.isOnlyModifiesArgumentsCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags((-744));
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node0.setSideEffectFlags(node_SideEffectFlags1);
      Node node2 = new Node(126);
      node2.isSetterDef();
      Node.newString("", 39, (-2181));
      node1.getQualifiedName();
      node2.setInputId((InputId) null);
      node0.getAncestors();
      node2.getString();
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(37, "", 1, 4095);
      Node node2 = Node.newString((-861), "");
      node2.isOnlyModifiesArgumentsCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(47);
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags((-744));
      node_SideEffectFlags2.setMutatesArguments();
      node1.setSideEffectFlags(node_SideEffectFlags2);
      node2.isFunction();
      node0.isSwitch();
      node1.isParamList();
      node1.getInputId();
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString(29, "/;bKE0c.0x:hCP", 29, (-1828));
      node0.setWasEmptyNode(true);
      node0.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = new Node(54, node0, node0, node0, node0, 33, 50);
      node0.isEquivalentToShallow(node1);
      Node.newString(32, "{H");
      node0.addChildToBack(node1);
      node0.isNew();
      Node node2 = Node.newNumber(3288.7206324, 105, 36);
      node2.setSourceEncodedPosition((-2694));
      node2.isSetterDef();
      node2.getChildAtIndex(721);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Node node0 = new Node(2968, 7, 171);
      node0.isOr();
      node0.getChildAtIndex(571);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Node.newString("");
      Node node0 = Node.newString(37, "", 1, 4095);
      Node node1 = Node.newString((-861), "");
      node1.isOnlyModifiesArgumentsCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags((-744));
      node_SideEffectFlags1.setMutatesArguments();
      node0.setSideEffectFlags(node_SideEffectFlags1);
      Node node2 = new Node(126);
      node2.isSetterDef();
      Node.newString("", 39, (-2181));
      node1.getQualifiedName();
      node1.isTypeOf();
      node2.isVarArgs();
      node0.getChildAtIndex((-309));
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = "~N1G2\"F";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~N1G2\"F");
      int int0 = 40;
      Node node0 = Node.newNumber((-630.0), 40, 40);
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~N1G2\"F");
      node0.setOptionalArg(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32);
      node0.getDouble();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      node_SideEffectFlags0.clearSideEffectFlags();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.setSideEffectFlags(node_SideEffectFlags0);
      node0.setIsSyntheticBlock(boolean0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean1);
      ObjectType objectType0 = null;
      // Undeclared exception!
      try { 
        FunctionType.getTopDefiningInterface(objectType0, jSTypeRegistry0.OBJECT_INDEX_TEMPLATE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Node node0 = Node.newString(44, "AWUFdB&Hh(r*XFk");
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(2, nodeArray0, 40, 49);
      node1.isOr();
      Node node2 = new Node(0, node1, node1, node0);
      node2.replaceChildAfter(node1, node0);
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 13, 13);
      node0.getProp(37);
      node0.putProp(13, node0);
      InputId inputId0 = new InputId("#Y!3G=~4xCI~~S");
      inputId0.toString();
      node0.setInputId(inputId0);
      node0.getAncestors();
      node0.getString();
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = Node.newString(43, "Node tree inequality:\nTree1:\nDEC\n    STRING The new child node has siblings.\n\n\nTree2:\nSTRING The new child node has siblings.\n\n\nSubtree1: DEC\n    STRING The new child node has siblings.\n\n\nSubtree2: STRING The new child node has siblings.\n", 37, 116);
      Node node1 = new Node((-497));
      Node node2 = Node.newString("Node tree inequality:\nTree1:\nDEC\n    STRING The new child node has siblings.\n\n\nTree2:\nSTRING The new child node has siblings.\n\n\nSubtree1: DEC\n    STRING The new child node has siblings.\n\n\nSubtree2: STRING The new child node has siblings.\n", 30, 42);
      node1.addChildToBack(node2);
      node1.getSourceFileName();
      node0.isEquivalentTo(node2, false, false, true);
      node0.isWith();
      node2.isBreak();
      Node node3 = Node.newString(692, "inferred");
      node2.isAssign();
      node1.isQualifiedName();
      node3.isIf();
      node2.isSwitch();
      node0.putIntProp(48, 49);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node[] nodeArray0 = new Node[2];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[17];
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeRegistry0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(124, "Object#Element", 124, 571);
      nodeArray0[0] = node0;
      Node node1 = Node.newString("Object#Key");
      nodeArray0[1] = node1;
      Node node2 = Node.newString(126, "4Wbl+ESv");
      node0.isAssignAdd();
      node1.getType();
      Node node3 = new Node(57, node0, node0, node0, node1, 56, 2);
      node0.addSuppression("Object#Key");
      Node node4 = node2.getChildBefore(node1);
      node2.removeFirstChild();
      node4.isGetElem();
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Node node0 = Node.newString(44, "AWUFdB&Hh(r*XFk");
      node0.removeProp(861);
      Node node1 = new Node(12);
      node0.getChildBefore(node1);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setAllFlags();
      Node node0 = Node.newNumber(3250.374855988);
      node0.setOptionalArg(false);
      node0.setDouble((-3079.5834));
      Node.newNumber((double) 40, 47, 4095);
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Node node0 = Node.newNumber(1292.0, 62, 62);
      node0.setDouble(62);
      Node node1 = Node.newNumber((double) 30);
      node0.addChildBefore(node1, node1);
      Node node2 = new Node(node0.DECR_FLAG, node0, node0);
      // Undeclared exception!
      try { 
        node0.hasMoreThanOneChild();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Node node0 = Node.newString("!0?k!OD=M,b9[7@[b", 3742, 739);
      Node node1 = new Node(4, node0, 8, 4095);
      Node node2 = Node.newNumber(0.5);
      Node node3 = node0.clonePropsFrom(node1);
      node0.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node4 = node1.setJSDocInfo(jSDocInfo0);
      Node node5 = Node.newString(29, "4Wbl+ESv");
      node3.isAssignAdd();
      Node node6 = new Node(8233, node2, node2);
      node6.getType();
      Node node7 = new Node(30, node4, node3, node5, node1, 1, 29);
      node4.isEmpty();
      node7.isVar();
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(37, "", 1, 4095);
      node1.getProp(11);
      node1.putBooleanProp(1481, true);
      node1.putProp(42, "");
      node1.getProp(103);
      node0.isBlock();
      Node node2 = new Node(54, node1);
      node2.useSourceInfoIfMissingFrom(node0);
      Node.newString(2, "fanS9PGmLAM@yyy?", (-1674), 47);
      node1.getJSType();
      node2.toStringTree();
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Node node0 = new Node(28, 28, 28);
      Node node1 = new Node(41, node0);
      Node.newNumber((-656.0));
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      Node node3 = new Node(1, node2, node1, node0);
      node3.getProp(node0.COLUMN_MASK);
      node2.isNot();
      int int0 = 115;
      Node node4 = null;
      try {
        node4 = new Node(node2.DECR_FLAG, node2.MAX_COLUMN_NUMBER, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("$|p");
      Node node1 = node0.clonePropsFrom(node0);
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node1.setDirectives(set0);
      Node node2 = node1.srcref(node0);
      node1.removeProp(32);
      Node node3 = new Node(1877, node2, node0, node1, node2);
      Node node4 = node0.useSourceInfoFrom(node3);
      node3.srcrefTree(node4);
      node4.isName();
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(12, node0, node0, node0);
      node1.mayMutateArguments();
      node0.getQualifiedName();
      node0.getJsDocBuilderForNode();
      node1.isNull();
      node0.isOnlyModifiesArgumentsCall();
      node0.isLocalResultCall();
      node1.getSourcePosition();
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node0 = jSDocInfo0.getAssociatedNode();
      Node node1 = new Node(137, (Node) null);
      Node node2 = node1.copyInformationFromForTree(node0);
      // Undeclared exception!
      try { 
        node2.isLabel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte) (-106);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString(872, "com.google.javascript.rhino.Node$NodeMismatch");
      Node node1 = new Node((-2444));
      node0.copyInformationFrom(node1);
      node0.isIf();
      node0.isCatch();
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newString("(PDyQn<<i", (-464), 2193);
      Node node1 = new Node(2193, node0, node0, node0, 52, 22);
      nodeArray0[0] = node1;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.clearAllFlags();
      Node node2 = Node.newString(38, "(PDyQn<<i");
      Node node3 = new Node(40, node2, node2, 39, 37);
      node3.clonePropsFrom(node1);
      node3.isBreak();
      node0.isInstanceOf();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.areAllFlagsSet();
      node1.mayMutateArguments();
      node2.isNE();
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 62, 62);
      node0.getQualifiedName();
      node0.setWasEmptyNode(true);
      node0.isQualifiedName();
      node0.setString("input_id");
      node0.isDec();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newNumber((-3098.151601703262));
      Node node1 = node0.cloneTree();
      node0.hasChildren();
      Node node2 = new Node((-2218));
      Node.newString("m10TamrZ|dA.74rw*!", 153, 36);
      node1.isNull();
      node2.isOnlyModifiesArgumentsCall();
      Node node3 = Node.newNumber((double) 12);
      node3.isEquivalentToTyped(node0);
      node3.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Node node0 = new Node(98, 98, 749);
      node0.isOr();
      Node node1 = new Node(46, node0, node0, node0);
      node1.toString(false, false, false);
      node1.getSourceFileName();
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Node node0 = Node.newString(93, "+M~?BWhM98bOlYq\"");
      Node node1 = Node.newNumber((double) 93, 62, 4095);
      node0.hasOneChild();
      Node node2 = new Node(1962, node1, node0, 53, 53);
      Node node3 = new Node(2032, node2, 16, (-2110));
      node3.isBreak();
      node0.toString(false, false, false);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString(124, "Object#Element", 124, 571);
      nodeArray0[0] = node0;
      node0.isEquivalentTo(node0, true, false, false);
      node0.isFromExterns();
      Node node1 = Node.newString("Object#Element", 54, 30);
      node1.addChildToBack(node0);
      node0.isNull();
      node0.isOnlyModifiesArgumentsCall();
      node0.isLocalResultCall();
      node1.getSourcePosition();
      node0.isParamList();
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("The new child node has siblings.");
      node0.isParamList();
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(103, node0, node0, node0);
      Node node2 = Node.newString("H9'#5");
      node1.checkTreeEquals(node0);
      node0.addChildrenToFront(node1);
      node1.checkTreeEquals(node2);
      int int0 = (-2891);
      Node node3 = new Node(int0, node0, node1);
      node3.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(boolean0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Node node0 = Node.newString(99, "&&X$B7+W;qY3}fs%b");
      node0.addSuppression("&&X$B7+W;qY3}fs%b");
      node0.isTry();
      Node.newString(40, "&&X$B7+W;qY3}fs%b");
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Node node0 = new Node(105, (-1586), 41);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      node0.addChildToFront(node0);
      nodeArray0[4] = node0;
      Node node1 = new Node(130, nodeArray0);
      nodeArray0[0].siblings();
      nodeArray0[4].isScript();
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Node node0 = Node.newString("");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = Node.newString((-17), "new child has existing sibling", (-2581), 55);
      boolean boolean0 = true;
      Node node2 = new Node(15, node0, node0);
      Node[] nodeArray0 = new Node[5];
      Node node3 = Node.newString(113, "new child has existing sibling");
      nodeArray0[0] = node3;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
      nodeArray0[3] = node0;
      nodeArray0[4] = node3;
      Node node4 = new Node((-905), nodeArray0);
      boolean boolean1 = false;
      node2.isEquivalentTo(node4, boolean1, boolean1, boolean0);
      nodeArray0[0].isFromExterns();
      nodeArray0[1].isBreak();
      int int0 = 26;
      String string0 = "Z[,5Oju";
      // Undeclared exception!
      try { 
        Node.newString(int0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("The new child node has siblings.");
      node0.isParamList();
      node0.setChangeTime(32);
      node0.children();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getAncestors();
      node0.isEquivalentToTyped(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.setDouble(48);
      Node.newNumber((double) node0.ORIGINALNAME_PROP, node0.SLASH_V, node0.FLAG_NO_THROWS);
      // Undeclared exception!
      try { 
        node0.isUnscopedQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING The new child node has siblings. [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Node node0 = Node.newString("PEU8V?wZ*d|7& 7");
      Node node1 = Node.newNumber((-3209.5283926));
      node1.getInputId();
      node1.setInputId((InputId) null);
      node0.setChangeTime(37);
      node1.children();
      node0.toStringTree();
      node1.getAncestors();
      node0.isEquivalentToTyped(node1);
      node0.setLength(51);
      node0.isWith();
      node0.setString("LABRA`");
      Node node2 = Node.newString(1, "LABRA`");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node3 = node2.useSourceInfoIfMissingFrom(node1);
      node3.setWasEmptyNode(true);
      node2.setLineno(7);
      Node node4 = node2.getChildAtIndex(83);
      node4.getFirstChild();
      int int0 = 218;
      node4.getBooleanProp(int0);
      Node node5 = node4.useSourceInfoFromForTree(node1);
      node5.isAnd();
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[17];
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      Node node0 = Node.newNumber((double) 124);
      node0.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      JSDocInfo jSDocInfo1 = new JSDocInfo();
      Node node1 = node0.setJSDocInfo(jSDocInfo1);
      Node node2 = Node.newNumber(4452.97435745);
      node2.useSourceInfoIfMissingFromForTree(node0);
      node0.setCharno((-947));
      node1.isEquivalentToShallow(node0);
      node1.isString();
      node1.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 62, 62);
      Node node1 = new Node(51, node0, node0);
      node1.isNumber();
      node1.isVarArgs();
      node0.isLabel();
      node1.isCase();
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node0 = new Node(105);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = Node.newString(29, "z+ bp\"Ktrm&U?QcZQm", 2443, 37);
      Node node2 = new Node(2, node0);
      Node.newNumber((double) 36);
      node1.getProp(57);
      node2.replaceChild(node0, node1);
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString(124, "Object#Element", 124, 571);
      nodeArray0[0] = node0;
      Node node1 = new Node(31);
      nodeArray0[1] = node1;
      Node.newString(126, "4Wbl+ESv");
      node1.isStringKey();
      node1.getType();
      Node node2 = new Node(30, node0, 1, 52);
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      node3.isQualifiedName();
      Node.newString("ZIXzl8`t*t `|!J`");
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString(131, "Object#Element", 131, 571);
      Node node1 = new Node(15, 15, 16);
      node0.addChildrenToBack(node1);
      node0.isStringKey();
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("The new child node has siblings.");
      node0.isParamList();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(103, node0, node0, node0, node0);
      Node node2 = Node.newString("H9'#5");
      node1.checkTreeEquals(node0);
      node0.addChildrenToFront(node1);
      Node.mergeLineCharNo(2602, 50);
      node0.removeChild(node1);
      node0.isDefaultCase();
      node0.getJsDocBuilderForNode();
      node1.isThrow();
      node0.checkTreeEquals(node2);
      Node node3 = node1.copyInformationFromForTree(node0);
      node2.setIsSyntheticBlock(false);
      node0.isGetElem();
      node1.isFor();
      Node node4 = node3.useSourceInfoFromForTree(node1);
      node3.getJsDocBuilderForNode();
      node4.getStaticSourceFile();
      node3.getChildCount();
      node0.checkTreeTypeAwareEqualsImpl(node4);
      node1.srcref(node0);
      node0.setString("X{oQ!u@y");
      node3.isOr();
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Node node0 = Node.newString("9JsdN^Bc:]<6(<m");
      node0.setQuotedString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isIn();
      node0.isThrow();
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Node node0 = Node.newString(93, "+M~?BWhM98bOlYq\"");
      Node node1 = Node.newNumber((double) 93, 62, 4095);
      node0.hasOneChild();
      Node node2 = new Node(1962, node1, node0, 53, 53);
      Node node3 = new Node(2032, node2, 16, (-2110));
      node3.getCharno();
      Node node4 = node2.removeChildren();
      node3.getInputId();
      node0.isWhile();
      node0.getIndexOfChild(node4);
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Node node0 = Node.newString("");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      node0.getStaticSourceFile();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d!.iEc|Q6XQNWV");
      Node node1 = new Node(0, 49, 749);
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(2, node0, node0);
      node0.isOnlyModifiesThisCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.hasChildren();
      node0.isQuotedString();
      node1.isVoid();
      node1.useSourceInfoIfMissingFrom(node2);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Node node0 = Node.newString(98, "prev is not a child of this node.", 434, 749);
      node0.children();
      node0.isQualifiedName();
      node0.isIf();
      node0.isSwitch();
      node0.isWhile();
      node0.getChildCount();
      Node node1 = new Node(12, node0, node0, node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = node1.srcref(node0);
      node1.setString("Node tree inequality:\nTree1:\nASSIGN_URSH\n    STRING The new child node has siblings.\n\n\nTree2:\nSTRING The new child node has siblings.\n\n\nSubtree1: ASSIGN_URSH\n    STRING The new child node has siblings.\n\n\nSubtree2: STRING The new child node has siblings.\n");
      node2.isOr();
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Node node0 = Node.newString("Object#Element");
      node0.getChildAtIndex((-4411));
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Node node0 = Node.newString("!0?k!OD=M,b9[7@[b", (-2136842853), 1021);
      Node node1 = Node.newString("!0?k!OD=M,b9[7@[b");
      Node node2 = Node.newNumber((double) 2);
      node1.checkTreeEquals(node0);
      Node node3 = new Node(31, node1, node0, node0, node2, 38, 47);
      node3.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node4 = node0.setJSDocInfo(jSDocInfo0);
      Node node5 = Node.newNumber(1.0);
      node5.useSourceInfoIfMissingFromForTree(node3);
      node3.setCharno(57);
      node4.isEquivalentToShallow(node0);
      node1.isAssignAdd();
      node1.getChildCount();
      node4.replaceChild(node0, node1);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Node node0 = Node.newString("9JsdN^Bc:]<6(<m");
      node0.setQuotedString();
      node0.isIn();
      Node.newString("The new child node has siblings.");
      Node node1 = new Node((-3134), node0);
      Node node2 = Node.newNumber((double) 40);
      node2.replaceChild(node0, node0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("The new child node has siblings.");
      node0.isParamList();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(103, node0, node0, node0, node0);
      Node node2 = Node.newString("H9'#5");
      node1.checkTreeEquals(node0);
      node0.addChildrenToFront(node1);
      Node.mergeLineCharNo(2602, 50);
      node0.removeChild(node1);
      node0.isDefaultCase();
      node0.getJsDocBuilderForNode();
      node1.isThrow();
      node0.checkTreeEquals(node2);
      Node node3 = node1.copyInformationFromForTree(node0);
      node2.setIsSyntheticBlock(false);
      node0.isGetElem();
      node1.isFor();
      node3.useSourceInfoFromForTree(node1);
      node3.getJsDocBuilderForNode();
      Node node4 = new Node(8);
      node1.isOptionalArg();
      Node node5 = node3.useSourceInfoIfMissingFromForTree(node0);
      Node node6 = new Node(12, node2);
      node6.isNot();
      node4.checkTreeEquals(node5);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Node.newString("");
      Node node0 = Node.newString(37, "", 1, 4095);
      Node node1 = Node.newString((-861), "");
      node1.isOnlyModifiesArgumentsCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags((-744));
      node_SideEffectFlags1.setMutatesArguments();
      node0.setSideEffectFlags(node_SideEffectFlags1);
      Node node2 = new Node(126);
      node2.isSetterDef();
      Node node3 = Node.newString("", 39, (-2181));
      node1.getQualifiedName();
      node1.isTypeOf();
      node2.isVarArgs();
      node3.isDebugger();
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("The new child node has siblings.");
      node0.isParamList();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(103, node0, node0, node0);
      Node.newString("H9'#5");
      node1.copyInformationFrom(node0);
      node1.checkTreeEquals(node0);
      node0.addChildrenToFront(node1);
      Node.mergeLineCharNo(2602, 50);
      node0.removeChild(node1);
      node0.isDefaultCase();
      node0.getJsDocBuilderForNode();
      Node node2 = Node.newString(40, "Node tree inequality:\nTree1:\nDEC\n    STRING The new child node has siblings.\n\n\nTree2:\nSTRING The new child node has siblings.\n\n\nSubtree1: DEC\n    STRING The new child node has siblings.\n\n\nSubtree2: STRING The new child node has siblings.\n");
      node2.isThrow();
      node0.checkTreeEquals(node2);
      Node node3 = node1.copyInformationFromForTree(node2);
      node2.setIsSyntheticBlock(false);
      node0.isGetElem();
      node1.isFor();
      Node node4 = node3.useSourceInfoFromForTree(node1);
      node3.getJsDocBuilderForNode();
      node4.getStaticSourceFile();
      node4.isDefaultCase();
      node2.isParamList();
      node4.getInputId();
      node4.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(37, "", 1, 4095);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("");
      node1.isGetProp();
      node1.getBooleanProp(8);
      node1.isIn();
      node0.getString();
      Node node2 = new Node(29, node0);
      node0.isEquivalentToTyped(node1);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Node node0 = new Node(98);
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Node node0 = new Node((-2221), (-2221), 0);
      node0.getProp(0);
      Node node1 = new Node(43, node0, node0);
      node1.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node2 = Node.newString(93, "I");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node3 = node1.useSourceInfoIfMissingFrom(node0);
      node3.setWasEmptyNode(false);
      node0.setLineno(55);
      node0.getChildAtIndex((-824));
      Node node4 = node1.getFirstChild();
      node2.getBooleanProp(8);
      node2.useSourceInfoFromForTree(node0);
      node4.isAnd();
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 46, 46);
      Node node1 = new Node(51, node0, node0);
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Node node0 = new Node((-2221));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1736));
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node1 = Node.newString(54, "[-772_E'RB&s$'H'", 40, 120);
      Node node2 = new Node(32);
      Node node3 = Node.newString("W/7_tU*j.mxwmCK", 38, 57);
      Node node4 = new Node(33, node2, node2, node0, node1);
      node4.addChildToBack(node0);
      node4.isNull();
      node2.isOnlyModifiesArgumentsCall();
      node0.isLocalResultCall();
      node0.getSourcePosition();
      node3.useSourceInfoFrom(node4);
      node3.getIndexOfChild(node2);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Node node0 = new Node((-2221));
      Node node1 = Node.newString(256, "(GE'");
      node0.addChildrenToBack(node1);
      Node node2 = new Node(49, 105, 46);
      node2.isWith();
      Node node3 = node0.removeChildren();
      node2.isName();
      node0.clonePropsFrom(node3);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Node node0 = Node.newString(99, "&&X$B7+W;qY3}fs%b");
      node0.addSuppression("&&X$B7+W;qY3}fs%b");
      node0.isWith();
      Node node1 = Node.newString("&&X$B7+W;qY3}fs%b", 16, 1);
      node0.isName();
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Node.extractCharno((-2832));
      Node node0 = new Node((-2832), (Node) null, (Node) null, (Node) null, (Node) null);
      String string0 = "+B";
      // Undeclared exception!
      try { 
        FileSystemHandling.shouldAllThrowIOExceptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "uli+");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Node tree inequality:\nTree1:\nDEC\n    STRING The new hildnode hap siblings.\n\n\nTree2:\nSTRING The new hildnode hap siblings.\n\n\nSubtree1: DEC\n    STRING The new hildnode hap siblings.\n\n\nSubtree2: STRING The new hildnode hap siblings.\n");
      Node node0 = Node.newNumber((-1436.1050632847657));
      node0.isFromExterns();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isAdd();
      Node node1 = new Node((-743), 183, 51);
      Node node2 = node0.srcref(node1);
      node0.removeProp(1231);
      Node node3 = node1.useSourceInfoFrom(node2);
      node2.srcrefTree(node0);
      Node node4 = Node.newNumber((double) 49, 79, 49);
      node4.useSourceInfoFrom(node3);
      node4.isName();
      node2.getNext();
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Node node0 = Node.newString("PARAM_LIST", 25, 4119);
      Node node1 = new Node(1024, node0, node0, node0, 49, 4119);
      node1.getStaticSourceFile();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.isEquivalentTo(node1, false, false, false);
      node0.isInc();
      node1.isOptionalArg();
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isNot();
      node2.isGetElem();
      node0.getDouble();
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Node node0 = Node.newString("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = Node.newString(4119, "Object#Element", 40, 434);
      Node node2 = new Node((-485), 3313, 13);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
      Node node3 = new Node((-954), nodeArray0, 16, 4095);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Node node0 = new Node((-2221));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node.newString(57, "j$BDisrUOSb_fb", 57, 87855567);
      Node node1 = new Node(1625);
      Node node2 = Node.newString(48, "Object#Key");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node2.isAssignAdd();
      node2.getType();
      node1.isEmpty();
      node2.isVar();
      node1.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Node node0 = Node.newNumber((-3079.5834));
      Node node1 = new Node(76, node0, node0);
      Node node2 = node1.cloneTree();
      Node.mergeLineCharNo(935, 4);
      node2.removeChild(node0);
      node0.isDefaultCase();
      node1.getJsDocBuilderForNode();
      // Undeclared exception!
      try { 
        node0.isThrow();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Node node0 = Node.newString("H9'#5");
      Node.newString("H9'#5");
      Node node1 = new Node((-2531), node0);
      Node.newNumber((double) 48);
      node1.replaceChild(node1, node1);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Node node0 = Node.newNumber((-3079.5834));
      Node node1 = new Node(76, node0, node0);
      Node node2 = node1.cloneTree();
      Node.mergeLineCharNo(935, 4);
      node2.removeChild(node0);
      node0.isDefaultCase();
      node1.getJsDocBuilderForNode();
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Node.newString("");
      Node node0 = Node.newString(37, "", 1, 4095);
      Node node1 = Node.newString((-861), "");
      node1.isOnlyModifiesArgumentsCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
      Node.newNumber((-2314.372398878916), 959, 50);
      node0.isTypeOf();
      Node.extractLineno(31);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString(124, "Object#Element", 124, 571);
      nodeArray0[0] = node0;
      node0.isEquivalentTo(node0, false, false, false);
      Node node1 = Node.newNumber((double) 54);
      node1.isNumber();
      node0.isVarArgs();
      node0.isLabel();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(37, "", 1, 4095);
      Node node2 = Node.newString((-861), "");
      node2.isOnlyModifiesArgumentsCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags((-744));
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node3 = node1.setJSDocInfo(jSDocInfo0);
      Node node4 = Node.newNumber((-656.0));
      Node node5 = Node.newString("OkBWN?", 1, 52);
      node3.isEquivalentToShallow(node5);
      node4.useSourceInfoIfMissingFromForTree(node3);
      node3.setCharno(2);
      Node node6 = Node.newString("fOVf", 620, 55);
      node6.isEquivalentToShallow(node1);
      node1.isString();
      node6.isAssignAdd();
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("9J4dN^Bc:]<6(<m");
      node0.setQuotedString();
      node0.isFalse();
      node0.isSetterDef();
      node0.isParamList();
      node0.getInputId();
      node0.getLength();
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Node node0 = Node.newNumber(12.0);
      Node node1 = new Node(1081, node0, node0, node0);
      node1.isHook();
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Node tree inequality:\nTree1:\nDEC\n    STRING The new hildnode hap siblings.\n\n\nTree2:\nSTRING The new hildnode hap siblings.\n\n\nSubtree1: DEC\n    STRING The new hildnode hap siblings.\n\n\nSubtree2: STRING The new hildnode hap siblings.\n");
      Node node0 = Node.newNumber((-1436.1050632847657));
      node0.isFromExterns();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isThrow();
      node0.isQualifiedName();
      node0.isHook();
      node0.getCharno();
      node0.getJSDocInfo();
      Node node1 = new Node(53, node0, node0, node0, 115, 962);
      Node node2 = Node.newString(36, "FLt6au6/a'");
      node1.mayMutateArguments();
      node0.getIndexOfChild(node1);
      node2.cloneTree();
      node1.isSetterDef();
      node2.wasEmptyNode();
      node0.isContinue();
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Node node0 = Node.newString("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.copyInformationFromForTree(node1);
      Node node2 = Node.newString(148, "(&+UdDw4m(F/R&G6<n[", 4095, 2);
      node2.isComma();
      Node node3 = node0.removeChildAfter(node2);
      Node node4 = new Node(node0.SIDE_EFFECT_FLAGS, node2.MAX_COLUMN_NUMBER, node3.LENGTH);
      int int0 = 1869;
      Node node5 = null;
      try {
        node5 = new Node(int0, node0, node4, node4, node2.VAR_ARGS_NAME, node0.NO_SIDE_EFFECTS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Node node0 = new Node((-2221));
      node0.getProp(0);
      Node node1 = new Node(43, node0, node0);
      node1.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.isNumber();
      node0.isVarArgs();
      node0.isLabel();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Node node0 = Node.newNumber((double) 28, 28, 28);
      node0.getProp(37);
      node0.putBooleanProp(42, true);
      node0.putProp(37, "M");
      node0.getProp(37);
      node0.isBlock();
      Node node1 = new Node(2055, node0);
      node1.hasChildren();
      node1.isDebugger();
      node0.isVoid();
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Node node0 = new Node(32, 64, (-747));
      node0.isUnscopedQualifiedName();
      Node node1 = Node.newNumber(0.0, 37, 1);
      node0.checkTreeEquals(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.clearAllFlags();
      node0.isQualifiedName();
      node1.mayMutateArguments();
      node1.isBlock();
      node1.hasChild(node0);
      node0.setString("Node tree inequality:\nTree1:\nTYPEOF\n\n\nTree2:\nNUMBER 0.0 37\n\n\nSubtree1: TYPEOF\n\n\nSubtree2: NUMBER 0.0 37\n");
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Node node0 = Node.newNumber((-3079.5834));
      node0.hasChildren();
      Node node1 = new Node(1, node0);
      Node node2 = node0.useSourceInfoFrom(node0);
      node2.hasChild(node1);
      node1.isVoid();
      InputId inputId0 = new InputId("ASSIGN_MUL");
      node1.isContinue();
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Node node0 = new Node(0);
      node0.getProp(0);
      node0.isEmpty();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node0);
      node2.isEquivalentTo(node0, true, true, false);
      node2.isFromExterns();
      Node node3 = new Node(11, node1, 669, 43);
      node3.hasChild(node1);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ks12oDBP9$<ZAC");
      Node node0 = Node.newString(466, "empty_block");
      Node node1 = new Node(1264, node0, (Node) null, node0, node0, 591, 43);
      node0.isEquivalentToShallow(node1);
      node0.isBlock();
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Node node0 = new Node((-2212), (-2212), 0);
      node0.getProp(0);
      Node node1 = new Node(43, node0, node0);
      node1.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.setWasEmptyNode(false);
      node0.getChildAtIndex((-824));
      Node node3 = node1.getFirstChild();
      node3.isAnd();
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, 2230, (-4499));
      Node node1 = new Node(2230, node0, node0, 19, 8);
      Node node2 = new Node(29, 16, 4095);
      Node node3 = new Node(2230, node1, node2, node0, node1);
      node3.isExprResult();
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "FUNCTION_INSTANCE_TYPE";
      Node node0 = Node.newString(1804, "FUNCTION_INSTANCE_TYPE");
      int int0 = 12;
      Node node1 = Node.newString("FUNCTION_INSTANCE_TYPE");
      Node node2 = new Node(153, node1, node1);
      Node node3 = new Node(49, node2, node2, node1, node0, (-1572), 43);
      Node node4 = new Node(int0, node1, node0, node3, node2);
      node0.srcrefTree(node4);
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("E?ek>&_ue!xG}");
      Node node1 = Node.newString("E?ek>&_ue!xG}");
      Node node2 = Node.newString(40, "E?ek>&_ue!xG}", 83, 114);
      Node node3 = new Node(57, node2);
      Node.newNumber(0.7);
      node3.useSourceInfoIfMissingFromForTree(node0);
      node3.getProp(125);
      Node node4 = new Node(378, 15, 54);
      node0.isBreak();
      node1.isEmpty();
      node1.setSourceFileForTesting("rIxg9{1T'wjMU\"3g^;");
      node4.isArrayLit();
      node3.isAdd();
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newNumber((-3079.5834));
      Node node1 = node0.cloneTree();
      node0.hasChildren();
      node0.isInc();
      node0.isFromExterns();
      Node node2 = new Node(51, node0, node1, node1, node1, 12, 57);
      node2.isAssign();
      node2.useSourceInfoIfMissingFrom(node1);
      Node.newString(1610612736, "uu ", (-2616), 32);
      node0.getJSType();
      node0.putIntProp(834, 113);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newNumber((-3079.5834));
      Node node1 = node0.cloneTree();
      node0.hasChildren();
      node0.isNot();
      Node node2 = new Node(30, (-126), 48);
      node0.isBreak();
      node0.isEmpty();
      node0.addChildrenToFront(node2);
      node1.setSourceFileForTesting("'80|v=cppEYhsq@t");
      node2.isArrayLit();
      Node node3 = new Node(39, node1, node1, 39, (-254));
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node3);
      node_NodeMismatch0.equals("'80|v=cppEYhsq@t");
      int int0 = Node.IS_NAMESPACE;
      node1.isRegExp();
      node3.isBlock();
      node0.getNext();
      Node.newString("BJc8dgd?5*F.@2s3V", 0, 29);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("fJsdN^Bc:]<6(<m");
      node0.setQuotedString();
      node0.isFalse();
      node0.isOr();
      Node node1 = node0.useSourceInfoIfMissingFrom((Node) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        node1.setWasEmptyNode(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString(124, "Object#Element", 124, 571);
      nodeArray0[0] = node0;
      Node node1 = new Node(4, 1, 38);
      nodeArray0[1] = node1;
      Node node2 = new Node((-431), nodeArray0, (-2531), 4095);
      node0.getNext();
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Node node0 = Node.newString("uEi+Z");
      Node node1 = new Node((-2966), node0);
      Node node2 = Node.newString("j$BDisrUOSb_fb");
      node2.getStaticSourceFile();
      node0.getSourceFileName();
      Node node3 = new Node(1, (-1983), (-458));
      node3.isOr();
      node1.isDo();
      Node node4 = new Node((-4590), node1, node1);
      node4.getLastChild();
      node0.getAncestor((-1499));
      node0.getQualifiedName();
      node1.mayMutateGlobalStateOrThrow();
      int int0 = 999;
      int int1 = 704;
      Node.mergeLineCharNo(int0, int1);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Node node0 = Node.newString(21, "4Wbl+ESv");
      node0.isStringKey();
      node0.getType();
      Node node1 = new Node(64, node0, 29, 5119);
      node1.useSourceInfoIfMissingFrom(node0);
      node1.isQualifiedName();
      Node.newString("KhHzvf|87MaEomX}");
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Node node0 = Node.newNumber((double) 28, 28, 28);
      node0.getProp(28);
      node0.putBooleanProp(37, true);
      node0.putProp(37, "M");
      node0.getProp(1624);
      node0.isBlock();
      Node node1 = new Node(155, node0);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node2);
      Node.newString(2, "com.google.common.collect.ImmutableMap", (-1271), 0);
      node3.getJSType();
      node3.toStringTree();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node4 = Node.newString("M", 31, 31);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node4, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      Node node5 = enumElementType1.getRootNode();
      node5.isFunction();
      node2.isParamList();
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Node node0 = new Node((-348), (-348), (-348));
      node0.setLineno(31);
      Node node1 = Node.newString("ANNOTATION", 55, 12);
      Node node2 = new Node((-849), node1, node1);
      node0.copyInformationFrom(node2);
      node0.isOnlyModifiesArgumentsCall();
      String string0 = node0.getString();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      node1.getSourceFileName();
      node0.hasMoreThanOneChild();
      Node node3 = null;
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(16, "", 959, 606);
      node0.getType();
      Node node2 = new Node((-2420), node1, node0, node1, node1, 29, 39);
      node2.isLocalResultCall();
      Node node3 = node2.useSourceInfoIfMissingFrom(node0);
      node0.isQualifiedName();
      Node node4 = Node.newString("nt");
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node4.setDirectives(set0);
      node4.addChildAfter(node3, node3);
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Node node0 = Node.newString(32, "DdZQ", 2097152, 2097152);
      Node node1 = Node.newString("DdZQ", (-5234), 1);
      node1.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder1.append("~mYb");
      node_FileLevelJsDocBuilder1.append("");
      node1.isGetProp();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.getProp((-1562));
      node1.isNot();
      Node node3 = new Node(379, 110, (-1562));
      node1.isBreak();
      node2.isEmpty();
      node0.setSourceFileForTesting("unexpected prop id ");
      node2.isArrayLit();
      Node.NodeMismatch node_NodeMismatch0 = node3.checkTreeTypeAwareEqualsImpl(node0);
      node_NodeMismatch0.equals("unexpected prop id ");
      int int0 = Node.IS_NAMESPACE;
      node3.isRegExp();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(37, "", 1, 4095);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder1.append("{H");
      node_FileLevelJsDocBuilder0.append("");
      node1.isGetProp();
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node1.getProp(47);
      node2.isNot();
      Node node3 = new Node(0, 710, (-126));
      node1.isBreak();
      node3.isEmpty();
      node1.setSourceFileForTesting("{H");
      node3.isArrayLit();
      Node.NodeMismatch node_NodeMismatch0 = node3.checkTreeTypeAwareEqualsImpl(node0);
      node_NodeMismatch0.equals(node_FileLevelJsDocBuilder1);
      int int0 = Node.IS_NAMESPACE;
      node3.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Node node0 = Node.newString("r", 3000, (-3745));
      Node node1 = new Node((-772), node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.getChildCount();
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node1);
      node0.srcref(node2);
      node2.isOptionalArg();
      node2.isNull();
      int int0 = Node.IS_NAMESPACE;
      Node node3 = node0.srcrefTree((Node) null);
      node3.getInputId();
      node_NodeMismatch0.equals(node3);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Node node0 = Node.newNumber((double) 28, 28, 28);
      node0.getProp(37);
      node0.putBooleanProp(42, true);
      node0.putProp(37, "M");
      node0.getProp(37);
      node0.isBlock();
      Node node1 = new Node(2055, node0);
      node1.isStringKey();
      node0.getType();
      Node node2 = new Node(39, node1, 36, 0);
      node2.useSourceInfoIfMissingFrom(node1);
      node1.isQualifiedName();
      Node.newString("[o49l4~}gjSKn:!,IyL");
      node2.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Node node0 = new Node(76);
      Node node1 = node0.cloneTree();
      node0.hasChildren();
      node0.isInc();
      node0.isNumber();
      node0.setDirectives((Set<String>) null);
      node0.srcref(node1);
      node1.removeProp((-968));
      Node node2 = node1.useSourceInfoFrom(node0);
      node0.srcrefTree(node2);
      node2.isName();
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Node node0 = Node.newString("uEi+Z");
      Node node1 = new Node((-2966), node0);
      Node node2 = Node.newString("j$BDisrUOSb_fb");
      node2.getStaticSourceFile();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "j$BDisrUOSb_fb");
      node1.setDouble(129.913133977);
      Node.newNumber((double) node0.INFERRED_FUNCTION, node1.DECR_FLAG, node2.FLAG_NO_THROWS);
      int int0 = (-1018);
      String string0 = "_]f=,|%D.G";
      Node node3 = Node.newString(int0, string0);
      // Undeclared exception!
      try { 
        node3.isUnscopedQualifiedName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2966
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = jSTypeRegistry1.createParametersWithVarArgs(jSTypeArray0);
      node0.copyInformationFromForTree(node1);
      Node node2 = new Node(4095, node0);
      Node.newNumber((double) 52, 55, 5522);
      node1.useSourceInfoIfMissingFrom(node2);
      Node.newString((-1292), "/Re9e\"~A", 262144, 39);
      node0.getJSType();
      node0.putIntProp(89, 115);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Node node0 = new Node((-343), (-343), 27591);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(13, node0, node0, node0, node0);
      node1.toString(true, true, true);
      Node node2 = node1.getFirstChild();
      Node node3 = node2.srcrefTree(node0);
      node1.setString("NE");
      node2.siblings();
      node3.clonePropsFrom(node0);
      node2.isDec();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      node0.addChildBefore(node3, node2);
      int int0 = 105;
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node[] nodeArray0 = new Node[2];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[22];
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeRegistry0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(124, "Object#Element", 124, 571);
      nodeArray0[0] = node0;
      node0.addChildrenToFront(node0);
      Node node1 = new Node(31);
      Node node2 = node1.srcref(node0);
      node2.removeProp(4463);
      Node node3 = node1.useSourceInfoFrom(node2);
      Node node4 = new Node(57, node2, node0, 0, 133);
      Node node5 = node4.srcrefTree(node3);
      node5.isName();
      node5.isInc();
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Node node0 = Node.newString("a");
      Node node1 = Node.newString(37, "a", 1, 4095);
      Node.newString((-861), "a");
      node0.isCatch();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
      Node node2 = Node.newNumber((-2314.372398878916), 959, 50);
      node1.isTypeOf();
      int int0 = Node.STATIC_SOURCE_FILE;
      node0.isObjectLit();
      node2.isComma();
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Node node0 = Node.newString("<_NZQ");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node node1 = new Node(309, node0, node0, node0, node0);
      Node node2 = new Node(113, node1);
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node0);
      node1.getProp(1231);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplateType((JSType) null);
      ObjectType.cast((JSType) null);
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplatizedType((JSType) null);
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = (JSType) null;
      jSTypeArray0[1] = (JSType) null;
      jSTypeArray0[2] = (JSType) null;
      jSTypeArray0[3] = (JSType) null;
      jSTypeArray0[4] = null;
      jSTypeArray0[5] = (JSType) null;
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null, jSTypeArray0);
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node2.replaceChild(node4, node3);
      Node node5 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node5.getLineno();
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isGetterDef();
      node0.setLineno(434);
      node0.isQuotedString();
      node0.isOr();
      node0.getSourceFileName();
      node0.isOr();
      Node node1 = new Node(57, node0, node0);
      Node node2 = node1.getLastChild();
      Node node3 = new Node(37, node1, node1, node0, node2);
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Node node0 = Node.newString("(PDyQn<<i", (-464), 2193);
      Node node1 = new Node(2193, node0, node0, node0, 52, 22);
      Node node2 = Node.newString(38, "(PDyQn<<i");
      Node node3 = new Node(40, node2, node2, 39, 37);
      node3.addChildToFront(node1);
      node3.isBreak();
      node2.setDouble(4);
      node0.isInstanceOf();
      node2.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(83, "28WmZ$");
      Node node1 = new Node(51, node0, 38, 54);
      node0.wasEmptyNode();
      Node node2 = Node.newString("28WmZ$");
      node2.setOptionalArg(false);
      node2.getIntProp(39);
      node2.isNoSideEffectsCall();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "', '");
      node2.removeProp((-3352));
      node2.isQuotedString();
      node2.isEquivalentTo(node1);
      node1.addChildToFront(node2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "28WmZ$");
      node1.getLength();
      node1.isDebugger();
      node1.getInputId();
      node0.isCast();
      node0.isTrue();
      node1.isSetterDef();
      node1.isLabel();
      node0.isOptionalArg();
      node2.hasOneChild();
      node2.isObjectLit();
      node1.toString(false, false, true);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Node node0 = new Node((-2221));
      node0.getProp(0);
      Node node1 = new Node(43, node0, node0);
      node1.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node4 = new Node(1459);
      node3.isEquivalentTo(node2, true, true, true);
      node1.isInc();
      node1.isOptionalArg();
      node1.useSourceInfoIfMissingFromForTree(node2);
      node0.isNot();
      node1.isGetElem();
      node4.getDouble();
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Node node0 = Node.newNumber((-3079.5834));
      Node node1 = new Node(76, node0, node0);
      Node node2 = node1.cloneTree();
      Node node3 = Node.newString(935, "The new child node already has a parent.");
      node3.getStaticSourceFile();
      node2.isAssignAdd();
      node0.isTypeOf();
      int int0 = Node.STATIC_SOURCE_FILE;
      node3.isObjectLit();
      node3.isComma();
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Node node0 = Node.newString(38, "(PDyQn<<i");
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newString("(PDyQn<<i", (-464), 2193);
      nodeArray0[0] = node0;
      Node node1 = Node.newString(38, "(PDyQn<<i");
      Node node2 = new Node(40, node1, node1, 39, 37);
      node2.addChildrenToBack(node0);
      node0.isThrow();
      node1.addChildBefore(node0, node0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newString("(PDyQn<<i", (-464), 2193);
      Node node1 = new Node(2193, node0, node0, node0, 52, 22);
      nodeArray0[0] = node1;
      Node node2 = Node.newString(38, "(PDyQn<<i");
      Node node3 = new Node(40, node2, node2, 39, 37);
      node3.addChildrenToBack(node1);
      node3.isBreak();
      node0.isInstanceOf();
      node2.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(105);
      node0.copyInformationFromForTree((Node) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "I+";
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      String string0 = "length";
      Node node0 = Node.newString(43, "length");
      node0.toStringTree();
      Node.extractLineno(43);
      String string1 = "u\\li+";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string1);
      Object[] objectArray0 = null;
      PrintWriter printWriter0 = mockPrintWriter0.printf(string0, objectArray0);
      node0.appendStringTree(printWriter0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newNumber(0.5);
      node0.isFromExterns();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isThrow();
      node0.isQualifiedName();
      Node node1 = Node.newNumber((-630.0));
      node0.isEquivalentTo(node1);
      node0.isNot();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      jSTypeArray0[0] = jSType0;
      jSType0.canBeCalled();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node2.isDelProp();
      Node node3 = Node.newString("Not declared as a constructor");
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node5 = new Node(36, node0, node4, node1, node3);
      node5.isOr();
      node3.isUnscopedQualifiedName();
      node1.hasChild(node0);
      node2.isFor();
      node4.getExistingIntProp(125);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Node node0 = Node.newNumber((-1086.84448), (-862048943), (-862048943));
      node0.isAssignAdd();
      node0.setLineno(434);
      node0.isQuotedString();
      node0.isOr();
      node0.getSourceFileName();
      node0.isOr();
      node0.isDo();
      Node node1 = new Node(18, node0, node0);
      Node node2 = node1.getLastChild();
      node1.getAncestor(31);
      node0.getQualifiedName();
      node0.addSuppression("The new child node has siblings.");
      node2.getLineno();
      node2.addChildBefore(node1, node0);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Node node0 = new Node(3634);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      Node node1 = new Node(16, node0, node0, node0);
      node1.addChildrenToBack(node0);
      // Undeclared exception!
      try { 
        node0.isStringKey();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Node node0 = new Node((-2221));
      Node node1 = new Node(43, node0, node0);
      node1.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      jSDocInfo0.setSuppressions(set0);
      node0.setJSDocInfo(jSDocInfo0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.isEquivalentTo(node0, true, false, false);
      node2.isFromExterns();
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Node node0 = new Node(0);
      node0.getProp(0);
      node0.isEmpty();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
      Node node1 = node0.useSourceInfoIfMissingFromForTree(node0);
      node1.isEquivalentTo(node0, true, true, false);
      node1.isFromExterns();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.setLineno((-1));
      node0.isOr();
      node0.getSourceFileName();
      node0.isObjectLit();
      Node node1 = new Node(1, node0, node0);
      node1.getAncestor(50);
      node0.getQualifiedName();
      node1.addSuppression("Object#Key");
      node0.getLineno();
      node1.addChildBefore(node0, node0);
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Node node0 = new Node(76);
      node0.cloneTree();
      node0.hasChildren();
      node0.isInc();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = Node.newString("+M~?BWhM98bOlYq\"", 51, 36);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node2 = new Node(1, nodeArray0);
      node2.addChildBefore(node0, node1);
      node1.isEmpty();
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Node node0 = Node.newNumber((-1086.84448), (-862048943), (-862048943));
      node0.isAssignAdd();
      node0.setLineno(434);
      node0.isOr();
      node0.getSourceFileName();
      node0.isObjectLit();
      Node node1 = new Node(18, node0, node0);
      node1.getAncestor(31);
      node0.getQualifiedName();
      node0.addSuppression("The new child node has siblings.");
      node1.getLineno();
      node1.addChildBefore(node1, node0);
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Node node0 = new Node((-2221));
      node0.getProp(0);
      Node node1 = new Node(43, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.copyInformationFromForTree(node0);
      Node node2 = Node.newNumber((-1.0), 55, 52);
      Node node3 = new Node(76, node2, node2, node0, node2);
      Node node4 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node4.isThis();
      node2.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("fJsdN^Bc:]<6(<m");
      node0.setQuotedString();
      node0.isOr();
      Node node1 = new Node(778, node0, node0, 8, 125);
      node1.setCharno(43);
      node1.isEquivalentToShallow(node0);
      node1.isDec();
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString(29, "/;bKE0c.0x:hCP", 29, (-1828));
      node0.setWasEmptyNode(true);
      node0.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.isEquivalentTo(node0, true, true, true);
      Node node1 = Node.newString("/;bKE0c.0x:hCP", 16, 1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      jSTypeArray0[0] = (JSType) templateType1;
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.isEquivalentTo(node2, false, true, true);
      node0.getIndexOfChild(node0);
      node1.cloneTree();
      node0.isNot();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node3 = node2.setJSDocInfo(jSDocInfo0);
      node3.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Node node0 = new Node(148, 16, (-3565));
      Node node1 = new Node(32, node0, node0, 53, (-1126));
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.setSourceEncodedPositionForTree(52);
      Node node3 = node0.srcref(node2);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node3.checkTreeTypeAwareEqualsImpl(node0);
      node2.setSourceFileForTesting((String) null);
      node0.getStaticSourceFile();
      node0.wasEmptyNode();
      node0.isOnlyModifiesThisCall();
      node2.removeFirstChild();
      node0.detachChildren();
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      String string0 = "/;bKE0c.0x:hCP";
      Node node0 = Node.newString(29, "/;bKE0c.0x:hCP", 29, (-1828));
      node0.setWasEmptyNode(true);
      node0.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      boolean boolean0 = true;
      boolean boolean1 = true;
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      node0.addChildrenAfter((Node) null, (Node) null);
      node0.isEquivalentTo(node0, boolean0, boolean1, boolean0);
      Node.newString(string0, node0.FLAG_LOCAL_RESULTS, node0.FLAG_GLOBAL_STATE_UNMODIFIED);
      // Undeclared exception!
      try { 
        node0.getIndexOfChild(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Node node0 = new Node((-2221));
      Node node1 = Node.newString(256, "('");
      node0.addChildrenToBack(node1);
      Node node2 = Node.newNumber(732.3382);
      Node node3 = new Node(152, node0);
      Node node4 = new Node(38, node2, node2);
      Node node5 = node0.useSourceInfoFrom(node4);
      node0.srcrefTree(node5);
      node2.isName();
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("9JsdN^Bc:]<6(<m");
      node0.setQuotedString();
      node0.isFalse();
      node0.setDouble(732.3382);
      int int0 = 1662;
      // Undeclared exception!
      try { 
        Node.newNumber((double) node0.DECR_FLAG, int0, node0.MAX_COLUMN_NUMBER);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING 9JsdN^Bc:]<6(<m [quoted: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newNumber((-3098.151601703262));
      Node node1 = node0.cloneTree();
      node0.hasChildren();
      node0.isDo();
      node0.isNumber();
      node0.isVarArgs();
      Node node2 = new Node(38, node1, node0, 1, 3573);
      node2.setVarArgs(false);
      node1.addChildrenToBack(node2);
      node1.isBreak();
      node0.isInstanceOf();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node3 = Node.newString(10, "Node tree inequality:\nTree1:\nASSIGN_URSH\n    STRING The new child node has siblings.\n\n\nTree2:\nSTRING The new child node has siblings.\n\n\nSubtree1: ASSIGN_URSH\n    STRING The new child node has siblings.\n\n\nSubtree2: STRING The new child node has siblings.\n");
      node3.isUnscopedQualifiedName();
      node0.getAncestor(54);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString(124, "Object#Element", 124, 571);
      nodeArray0[0] = node0;
      node0.getInputId();
      node0.getJSDocInfo();
      node0.addChildToFront(node0);
      node0.setString("Object#Element");
      node0.isUnscopedQualifiedName();
      node0.getAncestor(15);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(37, "", 1, 4095);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node2.useSourceInfoFrom(node0);
      node2.isGetterDef();
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node3.setLineno(2);
      node2.isQuotedString();
      node3.isOr();
      Node node4 = Node.newNumber((-2884.082));
      node4.getSourceFileName();
      node1.isOr();
      Node node5 = new Node(32, node1, node2);
      Node node6 = node1.getLastChild();
      Node node7 = new Node(8202, node4, node1, node0, node5);
      node3.getQualifiedName();
      node6.isThrow();
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("The new child node has siblings.");
      node0.isParamList();
      Node node1 = new Node(103, node0, node0, node0, node0);
      Node node2 = Node.newString("H9'#5");
      node1.checkTreeEquals(node0);
      node0.addChildrenToFront(node1);
      node0.removeChild(node1);
      node0.isDefaultCase();
      node1.isThrow();
      node0.checkTreeEquals(node2);
      node2.setIsSyntheticBlock(false);
      node0.isGetElem();
      node1.isFor();
      Node node3 = node1.useSourceInfoFromForTree(node1);
      node0.getJsDocBuilderForNode();
      node3.getStaticSourceFile();
      node0.getChildCount();
      node1.checkTreeEqualsImpl(node1);
      Node node4 = Node.newNumber(1.0);
      node4.srcref(node2);
      node3.removeProp(37);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("d%7FY[].3JcO&KHB");
      Node node1 = new Node(57, node0, node0, node0);
      node1.setCharno(51);
      node1.getJsDocBuilderForNode();
      int int0 = Node.DIRECTIVES;
      node1.checkTreeEqualsImpl(node1);
      Node node2 = node1.cloneTree();
      Node node3 = node1.srcref(node0);
      node3.addChildBefore(node1, node2);
      // Undeclared exception!
      try { 
        node3.isRegExp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("The new child node has siblings.");
      node0.isParamList();
      Node node1 = new Node(103, node0, node0, node0, node0);
      Node node2 = Node.newString("H9'#5");
      node1.checkTreeEquals(node0);
      node0.addChildrenToFront(node1);
      node0.removeChild(node1);
      node0.isDefaultCase();
      node1.isThrow();
      node0.checkTreeEquals(node2);
      Node node3 = node1.copyInformationFromForTree(node0);
      node2.setIsSyntheticBlock(false);
      node0.isGetElem();
      node1.isFor();
      Node node4 = node3.useSourceInfoFromForTree(node1);
      node3.getJsDocBuilderForNode();
      node4.getStaticSourceFile();
      node3.getChildCount();
      node3.checkTreeEqualsImpl(node1);
      node1.srcref(node0);
      node0.setString("X{oQ!u@y");
      node3.isOr();
      node2.getExistingIntProp(123);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newString("(PDyQn<<i", (-464), 2193);
      Node node1 = new Node(2193, node0, node0, node0, 52, 22);
      Node node2 = Node.newString(25, "(PDyQn<<i");
      Node node3 = new Node(40, node2, node2, 39, 44);
      node3.addChildrenToBack(nodeArray0[0]);
      node0.isEquivalentToShallow(node3);
      node0.isInstanceOf();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Node node0 = Node.newString(98, "prev is not a child of this node.", 434, 749);
      node0.isIf();
      node0.isSwitch();
      node0.isReturn();
      node0.isParamList();
      node0.setSourceFileForTesting("8L3?MJ+E.");
      Node node1 = Node.newString(55, "9JsdN^Bc:]<6(<m");
      node0.useSourceInfoIfMissingFrom(node1);
      node1.isDo();
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(114, "", 959, 606);
      Node node2 = new Node((-1354), node0);
      Node node3 = Node.newNumber((double) 48);
      Node node4 = node3.useSourceInfoIfMissingFromForTree(node1);
      node4.getProp(1940);
      Node node5 = new Node(102, 16, 148);
      node2.isFor();
      Node node6 = node1.useSourceInfoFromForTree((Node) null);
      node2.getJsDocBuilderForNode();
      node6.getStaticSourceFile();
      node0.isParamList();
      node2.getInputId();
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString(26, "ezi9y");
      Node node1 = new Node(2147483645, node0, node0, node0, node0, 40, 29);
      node1.detachChildren();
      Node node2 = node1.cloneNode();
      node0.getJsDocBuilderForNode();
      node2.setLength(49);
      node0.getBooleanProp(50);
      boolean boolean1 = true;
      node0.setWasEmptyNode(false);
      boolean boolean2 = false;
      node1.addChildrenAfter(node0, node0);
      node1.toString(boolean0, boolean1, boolean2);
      node2.setSourceEncodedPosition(node1.SIDE_EFFECT_FLAGS);
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.getStaticSourceFile();
      // Undeclared exception!
      try { 
        node2.getJsDocBuilderForNode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Node node0 = new Node((-1586), (-4411), (-4411));
      node0.setSourceFileForTesting((String) null);
      node0.getStaticSourceFile();
      node0.wasEmptyNode();
      Node node1 = new Node(57, node0, node0, node0, node0);
      node1.isOnlyModifiesThisCall();
      node0.removeFirstChild();
      node1.detachChildren();
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Node node0 = Node.newNumber((-0.508396038406902), 62, 62);
      Node node1 = node0.useSourceInfoFrom((Node) null);
      Node node2 = node1.srcrefTree(node0);
      node2.isName();
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString("");
      Node.newString(114, "", 959, 606);
      Node node2 = new Node((-2531), node1);
      Node.newNumber((double) 48);
      node0.getProp(1940);
      node1.setString((String) null);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("The new child node has siblings.");
      node0.isParamList();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(103, node0, node0, node0);
      Node node2 = new Node(38, (-557), (-2119));
      node0.isStringKey();
      node1.toString(true, false, true);
      node1.getType();
      node2.useSourceInfoIfMissingFrom(node0);
      node1.isQualifiedName();
      Node.newString("(a`af");
      node1.getCharno();
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Node node0 = new Node(148, 16, (-3565));
      Node node1 = new Node(32, node0, node0, 53, (-1126));
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.setSourceEncodedPositionForTree(52);
      Node node3 = node0.srcref(node2);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node3.checkTreeTypeAwareEqualsImpl(node0);
      node2.setSourceFileForTesting((String) null);
      node0.getStaticSourceFile();
      node1.isSwitch();
      node0.isScript();
      node3.checkTreeTypeAwareEqualsImpl(node2);
      node0.isParamList();
      node3.getInputId();
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(37, "", 1, 4095);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder1.append("H");
      node_FileLevelJsDocBuilder0.append("");
      node1.isGetProp();
      node1.getChangeTime();
      node0.getString();
      node1.getJSType();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = new Node(49, node1);
      Node node3 = new Node(1059, node2);
      node2.isOr();
      node3.isUnscopedQualifiedName();
      Node node4 = Node.newString(13, "");
      Node.newNumber(357.49313971);
      Node node5 = new Node(1535, node0, 35, 0);
      node5.hasChild(node4);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString(127, "Object#Element", 127, 571);
      Node node1 = new Node(15, 15, 16);
      node0.addChildrenToBack(node1);
      node0.isStringKey();
      node1.getJSDocInfo();
      node1.addChildToFront(node0);
      node1.hasChild(node0);
      node0.setString("Object#Element");
      node1.isVoid();
      InputId inputId0 = new InputId("Object#Key");
      node1.isContinue();
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Node node0 = Node.newString(98, "prev is not a child of this node.", 434, 749);
      node0.isIf();
      node0.isSwitch();
      node0.isReturn();
      node0.isParamList();
      InputId inputId0 = new InputId("prev is not a child of this node.");
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Node node0 = new Node(33, 33, 2436);
      InputId inputId0 = new InputId("Wub}_wYVu(46_\"");
      Node node1 = Node.newString("Wub}_wYVu(46_\"");
      node1.checkTreeEquals(node0);
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isGetterDef();
      node0.isContinue();
      node0.isSwitch();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      linkedList0.addLast(jSType0);
      node0.isParamList();
      node0.getInputId();
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isGetterDef();
      node0.isContinue();
      node0.isSwitch();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseNumberType();
      node0.isParamList();
      node0.getInputId();
      node0.isDec();
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("The new child node has siblings.");
      node0.isParamList();
      Node node1 = new Node(103, node0, node0, node0, node0);
      node1.setChangeTime(32);
      node0.children();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.getAncestors();
      node0.isEquivalentToTyped(node1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.setLength(962);
      node1.isWith();
      node0.setString("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isNumber();
      node1.isVarArgs();
      node1.isWhile();
      node1.setString("The new child node has siblings.");
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("The new child node has siblings.");
      node0.isParamList();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(103, node0, node0, node0);
      Node.newString("H9'#5");
      node1.checkTreeEquals(node0);
      node0.addChildrenToFront(node1);
      Node.mergeLineCharNo(2602, 50);
      node0.removeChild(node1);
      node0.isDefaultCase();
      node0.getJsDocBuilderForNode();
      Node node2 = Node.newString(40, "Node tree inequality:\nTree1:\nDEC\n    STRING The new child node has siblings.\n\n\nTree2:\nSTRING The new child node has siblings.\n\n\nSubtree1: DEC\n    STRING The new child node has siblings.\n\n\nSubtree2: STRING The new child node has siblings.\n");
      node2.isThrow();
      node0.checkTreeEquals(node2);
      Node node3 = node1.copyInformationFromForTree(node2);
      node3.putProp(53, node1);
      node2.setIsSyntheticBlock(false);
      node0.isGetElem();
      node1.isFor();
      Node node4 = node3.useSourceInfoFromForTree(node1);
      node3.getJsDocBuilderForNode();
      node4.getStaticSourceFile();
      node4.isDefaultCase();
      node2.isParamList();
      node4.getInputId();
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      String string0 = "[:_RvD";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[:_RvD");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isOr();
      Node node1 = new Node(928);
      node1.mayMutateGlobalStateOrThrow();
      node1.setLineno(37);
      node1.addChildToBack(node0);
      node1.removeChild(node0);
      node0.removeChild(node1);
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        node0.removeChild(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-2518), (-2518));
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newNumber((-3098.151601703262));
      node0.cloneTree();
      node0.hasChildren();
      node0.isDo();
      Node node1 = Node.newNumber((-1736.1169582989), 1, 0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node node3 = Node.newString((-7), "$+%q,r6=hkz1'Z#(<", 48, 1503);
      node2.getJSType();
      node3.putIntProp(65535, 0);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("The new child node has siblings.");
      node0.isParamList();
      Node node1 = new Node(31, node0, node0);
      Node node2 = Node.newString("H9'#5");
      node1.checkTreeEquals(node0);
      node0.addChildrenToFront(node1);
      node0.removeChild(node1);
      node0.isDefaultCase();
      node1.isThrow();
      node0.checkTreeEquals(node2);
      Node node3 = node1.copyInformationFromForTree(node0);
      node2.setIsSyntheticBlock(false);
      node0.isGetElem();
      node1.isFor();
      Node node4 = node3.useSourceInfoFromForTree(node1);
      node3.getJsDocBuilderForNode();
      node4.getStaticSourceFile();
      node3.getChildCount();
      node1.checkTreeTypeAwareEqualsImpl(node4);
      node1.srcref(node0);
      node0.setString("X{oQ!u@y");
      node3.isOr();
      node2.getExistingIntProp(123);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Node node0 = Node.newNumber((-1382.4321142924));
      node0.hasChildren();
      Node node1 = new Node(42, node0);
      node1.useSourceInfoFrom(node0);
      node0.srcrefTree(node1);
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      Node node0 = Node.newNumber((double) 28, 28, 28);
      node0.getProp(37);
      node0.putBooleanProp(42, true);
      node0.isUnscopedQualifiedName();
      node0.getQualifiedName();
      node0.isQualifiedName();
      node0.mayMutateArguments();
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Node node0 = new Node(32, 64, (-709));
      node0.putProp(64, (Object) null);
      node0.getProp(102);
      node0.isBlock();
      Node node1 = new Node(108, node0);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      Node node3 = Node.newString(102, "21v>aUlQ3k", 8, 54);
      node3.getIntProp(434);
      node0.getJSType();
      node2.toStringTree();
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(36, nodeArray0, 2436, 2436);
      Node node1 = Node.newString(57, "+M~?BWhM98bOlYq\"");
      node1.isHook();
      node1.getCharno();
      node0.getJSDocInfo();
      Node node2 = new Node((-804), node1, node1, node0, 2, 51);
      node2.isParamList();
      node1.getInputId();
      node2.isDec();
      node2.getLastChild();
      Node.mergeLineCharNo((-1776), 93);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      Node node0 = new Node(33, 33, 2436);
      Node node1 = Node.newString(57, "+M~?BWhM98bOlYq\"");
      node1.isEquivalentTo(node0);
      node1.isNot();
      node0.isDelProp();
      Node node2 = new Node(56, node0, node0, node0);
      node2.isGetElem();
      node0.isExprResult();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(37, "", 1, 4095);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder1.append("{H");
      node_FileLevelJsDocBuilder0.append("");
      node1.isGetProp();
      node1.getChangeTime();
      node0.getString();
      node1.getJSType();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = new Node(49, node1);
      node2.setSourceEncodedPosition(173);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearSideEffectFlags();
      node1.isGetElem();
      node2.replaceChild(node1, node1);
      node1.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("The new child node has siblings.");
      node0.isParamList();
      Node node1 = new Node(103, node0, node0, node0, node0);
      Node node2 = Node.newString("H9'#5");
      node1.checkTreeEquals(node0);
      node0.addChildrenToFront(node1);
      node0.removeChild(node1);
      node0.isDefaultCase();
      node1.isThrow();
      node0.checkTreeEquals(node2);
      Node node3 = node1.copyInformationFromForTree(node0);
      node2.setIsSyntheticBlock(false);
      node0.isGetElem();
      node1.isFor();
      Node node4 = node3.useSourceInfoFromForTree(node1);
      node3.getJsDocBuilderForNode();
      node4.getStaticSourceFile();
      node3.getChildCount();
      node3.checkTreeEqualsImpl(node1);
      Node node5 = node1.srcref(node0);
      node0.setString("X{oQ!u@y");
      node3.isOr();
      node5.isAdd();
      node1.isAnd();
      node2.removeChildAfter((Node) null);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      Node node0 = Node.newNumber((double) 28, 28, 28);
      node0.getProp(37);
      node0.putBooleanProp(42, true);
      node0.putProp(37, "M");
      String string0 = (String)node0.getProp(37);
      node0.isBlock();
      Node node1 = new Node(2055, node0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.isOptionalArg();
      int int0 = 154;
      int int1 = (-2740);
      Node.newString(int0, string0, node1.OPT_ARG_NAME, int1);
      node1.getJSType();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Node node0 = Node.newString((-3745), "Or(", 0, 3000);
      Node node1 = new Node((-799), node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.getChildCount();
      node2.checkTreeTypeAwareEqualsImpl(node1);
      Node node3 = node0.srcref(node2);
      node3.isOnlyModifiesArgumentsCall();
      node1.isRegExp();
      node3.isBlock();
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      int int0 = (-2950);
      Node node0 = Node.newString("missing prop: ", (-2950), (-2950));
      node0.isUnscopedQualifiedName();
      node0.isSwitch();
      node0.getString();
      Node node1 = null;
      node0.checkTreeEqualsImpl((Node) null);
      // Undeclared exception!
      try { 
        node0.addChildToBack(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(124);
      nodeArray0[0] = node0;
      node0.isEquivalentTo(node0, false, true, false);
      node0.isFalse();
      node0.isBreak();
      Node node1 = new Node(2, node0, node0, node0, node0, 54, 36);
      node0.isAssign();
      Node node2 = Node.newString(36, "expectedValuesPerKey must be >= 0 but was %s");
      Node node3 = new Node(53, node1, node2, node2, 52, 3);
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      Node node0 = Node.newNumber((-1086.84448), (-862048943), (-862048943));
      node0.isAssignAdd();
      node0.setLineno(434);
      Node node1 = Node.newString((-2701), "WhJ<c#Nj wQO[/", 2, 46);
      Node node2 = new Node(29, node1);
      Node node3 = Node.newNumber((double) 38);
      Node node4 = node2.useSourceInfoIfMissingFromForTree(node1);
      node1.getProp((-862048943));
      node4.getJsDocBuilderForNode();
      Node node5 = new Node(36, 36, 150);
      node1.isBreak();
      node3.setSourceFileForTesting("8mV#!ys");
      node4.useSourceInfoIfMissingFrom(node0);
      node4.isCatch();
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node1.cloneTree();
      node0.isEquivalentTo(node1);
      node0.isDelProp();
      node0.isNE();
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(124.0);
      Node node1 = new Node(40, node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      Node node3 = new Node(55, node1, 52, 1);
      Node node4 = node3.srcrefTree(node2);
      node4.isName();
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("The new child node has siblings.");
      node0.isParamList();
      Node node1 = new Node(42, 4095, 1547);
      Node node2 = new Node((-1449), node1, node0, 16, 438);
      Node node3 = node2.useSourceInfoIfMissingFrom(node1);
      node2.setSourceEncodedPositionForTree((-1129));
      node2.srcref(node0);
      Node node4 = new Node(42, node2, node1, node2, node3, (-885), 1756);
      node4.checkTreeTypeAwareEqualsImpl(node1);
      node0.checkTreeTypeAwareEqualsImpl(node2);
      String string0 = null;
      node0.setSourceFileForTesting(string0);
      node0.getStaticSourceFile();
      node3.wasEmptyNode();
      // Undeclared exception!
      try { 
        node1.isOnlyModifiesThisCall();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString((-1501), "", 3000, (-1501));
      Node node1 = new Node(40, node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.getChildCount();
      node1.checkTreeTypeAwareEqualsImpl(node2);
      Node node3 = new Node(31, (Node[]) null, 54, (-1105));
      node3.srcref(node0);
      node2.isOnlyModifiesArgumentsCall();
      node0.isRegExp();
      node2.isBlock();
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(124.0);
      node0.isEquivalentToTyped((Node) null);
      node0.getSourceOffset();
      // Undeclared exception!
      try { 
        node0.isNoSideEffectsCall();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString("");
      Node node2 = Node.newString(1582, "");
      node0.mayMutateArguments();
      Node node3 = new Node(30, 47, 423);
      node3.copyInformationFromForTree(node2);
      node0.isNot();
      node1.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.newString("H9'#5");
      Node node0 = new Node(56, (Node) null, (Node) null, 48, 32);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      Node node0 = new Node(32, 64, (-709));
      node0.isUnscopedQualifiedName();
      Node node1 = Node.newString("Ee[?s");
      node0.copyInformationFrom(node1);
      node0.getQualifiedName();
      node0.isQualifiedName();
      node0.mayMutateArguments();
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      Node node0 = Node.newNumber((double) 55);
      Node node1 = new Node(55, node0, node0);
      node1.getChildBefore(node0);
      node1.setLineno(4095);
      node0.isCast();
      node1.getCharno();
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isGetterDef();
      node0.isVar();
      node0.isSwitch();
      Node node1 = Node.newString(490, "Object#Element");
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.mayMutateArguments();
      node2.getExistingIntProp(53);
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if&v6N{2YjMg$[||Dg");
      Node node0 = new Node(31);
      node0.isOnlyModifiesThisCall();
      node0.getDirectives();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = node0.getLastSibling();
      node1.children();
      node0.checkTreeEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.getExistingIntProp(508475);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      jSTypeRegistry0.createFunctionType((JSType) templateType0, node0);
      jSTypeRegistry0.createOptionalType(templateType0);
      // Undeclared exception!
      try { 
        templateType0.hasDisplayName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 508475
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      Node node0 = Node.newString(105, ")4i");
      Node node1 = Node.newNumber((-1.0), 38, 52);
      node0.getJsDocBuilderForNode();
      Node node2 = Node.newString((-1168), "HZ|*C");
      node0.useSourceInfoIfMissingFrom(node1);
      Node node3 = Node.newString(")4i", 38, 31);
      node0.setWasEmptyNode(false);
      node2.setLineno(51);
      node1.getChildAtIndex((-2262));
      node0.getFirstChild();
      node1.removeFirstChild();
      node1.removeChildAfter(node0);
      int int0 = 35;
      node3.setLineno(int0);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      Node node0 = Node.newString("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = Node.newString(4095, "Object#Key", 35, 4);
      Node node2 = new Node((-860), node1, node0, node1);
      Node node3 = node1.copyInformationFromForTree(node2);
      node0.setIsSyntheticBlock(true);
      node1.isGetElem();
      node3.isIn();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node4.useSourceInfoFromForTree(node0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseNumberType();
      node1.isParamList();
      node3.getInputId();
      node1.isDec();
      node2.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(105);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = Node.newString("`+7O'g9z=Mk Vd<LjC");
      node0.setString("`+7O'g9z=Mk Vd<LjC");
      node1.removeChildren();
      // Undeclared exception!
      try { 
        node1.isUnscopedQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FUNCTION <invalid> is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      Node node0 = new Node(33, 33, 2436);
      InputId inputId0 = new InputId("Wub}_wYVu(46_\"");
      node0.setInputId(inputId0);
      Node node1 = Node.newString("Wub}_wYVu(46_\"");
      node1.checkTreeEquals(node0);
      node1.checkTreeEquals(node0);
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      Node node0 = new Node(33, 33, 2436);
      InputId inputId0 = new InputId("Wub}_wYVu(46_\"");
      node0.setInputId(inputId0);
      Node node1 = Node.newString("Wub}_wYVu(46_\"");
      node1.checkTreeEquals(node0);
      node0.addChildrenToFront(node1);
      Node node2 = new Node((-2469), 4, 57);
      Node node3 = Node.newNumber(0.0);
      Node node4 = node3.copyInformationFromForTree(node0);
      node0.isNot();
      node4.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.setString("");
      Node node1 = Node.newString("");
      Node node2 = Node.newString(114, "", 978, 606);
      Node node3 = new Node((-2531), node1);
      node3.copyInformationFrom(node2);
      node3.isReturn();
      node2.isParamList();
      InputId inputId0 = new InputId("");
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(124.0);
      node0.getSourceOffset();
      node0.setIsSyntheticBlock(true);
      node0.isWhile();
      node0.setString("kxWN).d,wg]`7Fu6");
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("h>{c5%:", "h>{c5%:", 116, 776);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node0.isGetterDef();
      node0.isContinue();
      node0.isSwitch();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      Node node1 = new Node(110, node0, node0, node0);
      Node node2 = node0.srcrefTree(node1);
      node0.isName();
      node2.removeChildren();
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("The new child node has siblings.");
      node0.isParamList();
      Node node1 = new Node(103, node0, node0, node0, node0);
      Node node2 = Node.newString("H9'#5");
      node1.checkTreeEquals(node0);
      node0.addChildrenToFront(node1);
      node0.removeChild(node1);
      node0.isDefaultCase();
      node1.isThrow();
      node0.checkTreeEquals(node2);
      Node node3 = node1.copyInformationFromForTree(node0);
      node2.setIsSyntheticBlock(false);
      node0.isGetElem();
      node1.isFor();
      Node node4 = node3.useSourceInfoFromForTree(node1);
      node3.getJsDocBuilderForNode();
      node4.getStaticSourceFile();
      node3.getChildCount();
      node3.checkTreeEqualsImpl(node1);
      Node node5 = node1.srcref(node0);
      node0.setString("X{oQ!u@y");
      node3.isOr();
      node5.isAdd();
      node1.useSourceInfoIfMissingFrom(node2);
      node1.isAnd();
      node2.removeChildAfter(node4);
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$SiblingNodeIterable");
      Node node1 = Node.newString(37, "com.google.javascript.rhino.Node$SiblingNodeIterable", 1, 4095);
      Node node2 = Node.newString(155, "rQR ", 1363, 1377);
      Node node3 = node2.copyInformationFromForTree(node0);
      node1.setIsSyntheticBlock(false);
      node2.isGetElem();
      node3.isIn();
      Node node4 = new Node(53, node2, node1);
      Node node5 = node4.useSourceInfoFromForTree(node0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseNumberType();
      node4.isParamList();
      node2.getInputId();
      node3.isDec();
      node5.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString((-3816), "C,UXq", 27591, 0);
      Node node1 = new Node(48, node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.getChildCount();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node2);
      node1.srcref(node0);
      node2.isOnlyModifiesArgumentsCall();
      node0.isRegExp();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(1902, "jd_=n-g", (-1650), 29);
      Node node1 = new Node(1902, node0);
      Node node2 = Node.newNumber((double) 29);
      node1.getProp(2);
      node1.replaceChild(node0, node2);
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1461), nodeArray0, 2436, 2436);
      Node node1 = Node.newString(57, "Z'^X@Az_?%j``Ax");
      node1.isEquivalentTo(node0);
      node1.isNot();
      node0.isDelProp();
      node0.isWhile();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newNumber(1874.3091971995, 21, 1871);
      Node node1 = new Node(1871, node0, node0, node0, node0);
      Node node2 = new Node(21, node1, 52, 0);
      Node node3 = node1.removeChildren();
      node3.addSuppression((String) null);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node2.isEquivalentTo(node0, true, false, false);
      node2.addChildBefore(node1, node1);
      node0.getString();
      node1.hasMoreThanOneChild();
      node2.isUnscopedQualifiedName();
      node0.isVarArgs();
      node2.clonePropsFrom(node1);
      node3.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Node node0 = new Node(33, 33, 2436);
      InputId inputId0 = new InputId("Wub}_wYVu(46_\"");
      node0.setInputId(inputId0);
      Node node1 = Node.newString((-1552), "The new hildnode hap siblings.", 2, 12);
      node0.getInputId();
      node0.getJSDocInfo();
      Node node2 = new Node(56);
      node2.addChildToFront(node0);
      node0.setString("The new hildnode hap siblings.");
      node0.isUnscopedQualifiedName();
      node2.getAncestor(node1.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("The new child node has siblings.");
      node0.isParamList();
      Node node1 = new Node(103, node0, node0, node0, node0);
      Node node2 = Node.newString("H9'#5");
      node1.checkTreeEquals(node0);
      node0.addChildrenToFront(node1);
      node0.removeChild(node1);
      node0.isDefaultCase();
      node1.isThrow();
      node0.checkTreeEquals(node2);
      Node node3 = new Node(39, node2, node2);
      node2.setIsSyntheticBlock(false);
      node2.isScript();
      node1.isFor();
      Node node4 = node3.useSourceInfoFromForTree(node1);
      node4.isEquivalentTo(node1, true, true, true);
      node3.getJsDocBuilderForNode();
      node4.getStaticSourceFile();
      node3.getChildCount();
      node3.checkTreeEqualsImpl(node1);
      Node node5 = node1.srcref(node0);
      node0.setString("X{oQ!u@y");
      node5.isAdd();
      node1.isAnd();
      node2.removeChildAfter(node4);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      Node node0 = new Node(32, 64, (-709));
      node0.getJsDocBuilderForNode();
      int int0 = Node.DIRECTIVES;
      Node node1 = Node.newString("hw>i.");
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = node0.srcref(node1);
      node1.isRegExp();
      node2.isBlock();
      node2.mayMutateArguments();
      node0.isRegExp();
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Node node0 = Node.newString(44, "AWUFdB&Hh(r*XFk");
      Node[] nodeArray0 = new Node[0];
      Node node1 = Node.newString(9, "K5*?-CH`iK[z", 46, 57);
      Node node2 = Node.newNumber((double) 8);
      node2.isNumber();
      node0.isLabel();
      node1.cloneNode();
      Node node3 = new Node(57, nodeArray0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node4 = jSDocInfo0.getAssociatedNode();
      Node node5 = Node.newNumber((-1103.439099770371), 103, 2);
      node3.replaceChildAfter((Node) null, node5);
      node1.isThis();
      String string0 = "KcM9c}/F;s[(!KSR-";
      node4.setString(string0);
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      int int0 = 33;
      Node node0 = new Node(33);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isGetProp();
      node0.getChangeTime();
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // GETPROP is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      Node node0 = new Node(85);
      node0.isHook();
      node0.isDebugger();
      node0.isVoid();
      Node node1 = Node.newString("TypeError", 571, 8);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Node node0 = Node.newString(606, "(GE'", 124, 606);
      Node node1 = new Node(959, node0);
      Node.newNumber((-2221.74192344794));
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = new Node(47, 31, 55);
      node0.isBreak();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node4 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node4.setSourceFileForTesting("sQU5f+|nVx!k4sz#=C");
      node4.useSourceInfoIfMissingFrom(node2);
      node1.isInc();
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Node node0 = Node.newString((-2509), "#I4>c~PF]}tcuf(45");
      node0.isUnscopedQualifiedName();
      node0.isBreak();
      node0.setSideEffectFlags((Node.SideEffectFlags) null);
      int int0 = (-2683);
      node0.getIntProp(int0);
      int int1 = 11;
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Node node0 = new Node(85);
      Node node1 = new Node(1331);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CharMatcher.ANY");
      Node node0 = Node.newString("uEi+Z");
      int int0 = (-2499);
      node0.setChangeTime((-2499));
      node0.getChangeTime();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      String string0 = null;
      ObjectType objectType0 = FunctionType.getTopDefiningInterface((ObjectType) null, "Object#Element");
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) objectType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node0, functionType0);
      // Undeclared exception!
      try { 
        enumType0.toMaybeEnumType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      Node node0 = Node.newString("PEU8V?wZ*d|7& 7");
      Node node1 = Node.newNumber((-3209.5283926));
      node1.getInputId();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.setInputId((InputId) null);
      Node.newString("j$BDisrUOSb_fb");
      Node node2 = Node.newNumber((-2624.13669085659), 36, 1665);
      node2.srcrefTree(node0);
      node2.toString(false, false, true);
      Node node3 = new Node(38, node0);
      node3.isName();
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      Node node0 = Node.newString(43, ":");
      Node node1 = new Node(749, node0, node0, (-1101), 108);
      node1.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("8");
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newString(42, "var_args_name");
      node1.isThrow();
      node0.checkTreeEquals(node1);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.setIsSyntheticBlock(false);
      node2.isGetElem();
      node0.isFor();
      Node node3 = node1.useSourceInfoFromForTree(node0);
      node0.getJsDocBuilderForNode();
      Node node4 = new Node(0, node2, node1, node0, node2);
      node2.getStaticSourceFile();
      node4.clonePropsFrom(node2);
      node3.setType(63);
      node3.isCatch();
      node4.isParamList();
      node0.isContinue();
      Node node5 = new Node(52, node2, node1, 50, 920);
      node5.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      Node node0 = Node.newString(143, "Node tree inequality:\nTree1:\nASSIGN_URSH\n    STRING The new child node has siblings.\n\n\nTree2:\nSTRING The new child node has siblings.\n\n\nSubtree1: ASSIGN_URSH\n    STRING The new child node has siblings.\n\n\nSubtree2: STRING The new child node has siblings.\n", 434, 749);
      node0.isSyntheticBlock();
      node0.isSwitch();
      node0.isQuotedString();
      node0.isParamList();
      node0.getInputId();
      Node.extractLineno((-1132));
      node0.getExistingIntProp(3103);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      Node node0 = new Node(148, 16, (-3565));
      Node node1 = new Node(32, node0, node0, 53, (-1129));
      Node node2 = new Node(2, node1, 47, 57);
      node2.setSourceEncodedPositionForTree(52);
      Node node3 = node0.srcref(node2);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node3.checkTreeTypeAwareEqualsImpl(node0);
      node0.hasChildren();
      node1.isDebugger();
      node3.isVoid();
      node0.useSourceInfoIfMissingFrom(node2);
      node2.toStringTree();
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      Node node0 = Node.newString("uli+");
      Node node1 = Node.newString(32, "inferred", 46, 2);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node1.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder1.append("inferred");
      node_FileLevelJsDocBuilder0.append("uli+");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isEmpty();
      node0.isNE();
      node1.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(1902, "jd_=n-g", (-1650), 29);
      Node node1 = new Node(1902, node0);
      Node node2 = Node.newNumber((double) 29);
      node1.getProp(2);
      node1.replaceChild(node0, node2);
      node1.isCast();
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      Node node0 = Node.newString((-3745), "Node tree inequality:\nTree1:\nDEC\n    STRING The new child node has siblings.\n\n\nTree2:\nSTRING The new child node has siblings.\n\n\nSubtree1: DEC\n    STRING The new child node has siblings.\n\n\nSubtree2: STRING The new child node has siblings.\n", 0, 3000);
      Node node1 = new Node((-799), node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.getChildCount();
      node0.getInputId();
      node0.setInputId((InputId) null);
      node2.checkTreeTypeAwareEqualsImpl(node1);
      Node node3 = node0.srcref(node2);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node2.setJSDocInfo(jSDocInfo0);
      node3.getIntProp(57);
      node2.isLocalResultCall();
      node1.isRegExp();
      node3.isBlock();
      Node.newNumber(1.0, 39, 1);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString(124, "Object#Element", Integer.MIN_VALUE, (-1768));
      node0.isNumber();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry((ErrorReporter) null, false);
      FunctionType functionType0 = jSTypeRegistry2.createFunctionType((JSType) null, node0);
      FunctionType.getTopDefiningInterface(functionType0, "Object#Element");
      node0.getChildAtIndex(0);
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Node node0 = Node.newString("u_F'oJ", 16384, 171);
      node0.isUnscopedQualifiedName();
      node0.isBreak();
      node0.getIntProp(7);
      Node node1 = new Node(39);
      node1.addChildAfter((Node) null, node0);
      node1.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Node node0 = Node.newString(29, "/;bKE0c.0x:hCP", 29, (-1828));
      Node node1 = new Node(54, node0, node0, node0, node0, 33, 50);
      node0.isEquivalentToShallow(node1);
      Node.newString(35, "{H");
      node0.addChildToBack(node1);
      node0.isNew();
      node0.isBreak();
      node0.isOnlyModifiesThisCall();
      node1.getChildAtIndex(2);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      Node node0 = new Node(98, 98, 749);
      node0.isOr();
      node0.isNumber();
      node0.isLabel();
      Node node1 = node0.cloneNode();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      Node node2 = new Node((-2443), node1, node0, 8, 42);
      nodeArray0[2] = node2;
      Node node3 = new Node((-2001), nodeArray0);
      nodeArray0[1].replaceChildAfter(node1, node0);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      Node node0 = new Node(33, 33, 2436);
      Node node1 = Node.newString((-1776), "uli+", 39, 4095);
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.setIsSyntheticBlock(true);
      node2.isGetElem();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      jSTypeArray0[0] = jSType0;
      JSType.toMaybeFunctionType(jSTypeArray0[0]);
      jSTypeArray0[1] = (JSType) null;
      JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      jSTypeArray0[2] = (JSType) functionType0;
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node3.isIn();
      node0.useSourceInfoFromForTree(node3);
      ModificationVisitor modificationVisitor1 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor1.caseNumberType();
      node0.isParamList();
      node0.getInputId();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node2.setSideEffectFlags(node_SideEffectFlags1);
      node0.isDec();
      node2.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(77, "Recorded bad position information\nstart-line: ", 77, 77);
      Node node1 = new Node(54);
      node0.addChildToFront(node1);
      Node node2 = Node.newString("PEU8V?wZ*d|7& 7");
      node0.isEquivalentTo(node2, true, false, false);
      Node.newNumber(1079.9184971791);
      node2.isNumber();
      node0.toString();
      node2.isVarArgs();
      Node node3 = new Node(35, node0, node2, 50, 56);
      node3.addSuppression("Recorded bad position information\nstart-line: ");
      node0.isCatch();
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      Node node0 = new Node(89, 131, 39);
      Node node1 = new Node(39, node0, node0, node0, 39, 54);
      Node node2 = node1.srcrefTree(node0);
      node1.getChangeTime();
      node0.isArrayLit();
      node1.isGetElem();
      node1.getChangeTime();
      node2.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Node node0 = Node.newString("");
      String string0 = "";
      Node node1 = Node.newString(114, "", 959, 606);
      node0.getSourceFileName();
      node0.isObjectLit();
      Node node2 = new Node(31, node0, node1);
      Node node3 = node1.getAncestor(1);
      node2.getQualifiedName();
      int int0 = (-1627);
      int int1 = 1745;
      Node node4 = new Node(57, node2, node1, node0);
      Node node5 = new Node(int1, node0, node1, node1, node4, node0.MAX_COLUMN_NUMBER, node3.SYNTHETIC_BLOCK_PROP);
      Node node6 = new Node(int0, node3, node5, node1, node2);
      node6.addSuppression(string0);
      // Undeclared exception!
      try { 
        node4.getLineno();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      Node node0 = Node.newNumber((-1086.84448), (-862048943), (-862048943));
      node0.isAssignAdd();
      node0.setLineno(434);
      node0.isOr();
      Node node1 = new Node(32, node0);
      node1.useSourceInfoIfMissingFromForTree(node0);
      Node node2 = new Node((-2766), 51, 100);
      node1.isBreak();
      InputId inputId0 = new InputId((String) null);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      Node node0 = Node.newString("Node tree inequality:\nTree1:\nDEC\n    STRING The new hildnode hap siblings.\n\n\nTree2:\nSTRING The new hildnode hap siblings.\n\n\nSubtree1: DEC\n    STRING The new hildnode hap siblings.\n\n\nSubtree2: STRING The new hildnode hap siblings.\n", 122, 122);
      Node node1 = node0.cloneNode();
      node0.isExprResult();
      Node node2 = Node.newNumber((double) 4095, 4095, 37);
      Node node3 = node1.clonePropsFrom(node2);
      node1.putIntProp(57, 1691);
      node0.getQualifiedName();
      node0.detachChildren();
      node1.wasEmptyNode();
      node0.isNot();
      Node.newString("PEU8V?wZ*d|7& 7");
      Node node4 = Node.newString("?m");
      node4.getString();
      Node.newString((-2389), "?m", 51, 51);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.isFalse();
      node0.isAssign();
      node1.getString();
      node1.setLength(48);
      node1.toString(true, true, false);
      node1.isEquivalentToShallow(node4);
      node1.addChildrenAfter(node0, node0);
      node1.toString();
      node0.addChildrenToFront(node1);
      node3.useSourceInfoFrom(node0);
      node3.isReturn();
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      Node node0 = Node.newNumber((-3209.5283926));
      node0.getInputId();
      Node node1 = Node.newString("j$BDisrUOSb_fb");
      Node node2 = node1.cloneTree();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "N)rt>");
      node2.hasChildren();
      node0.isDebugger();
      node2.isVoid();
      Node node3 = new Node(47, node2, node1, node2, node1);
      Node node4 = node3.useSourceInfoIfMissingFrom(node2);
      node4.toStringTree();
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      Node node0 = new Node(32, 64, (-709));
      node0.isSwitch();
      node0.getQualifiedName();
      node0.isQualifiedName();
      node0.isLocalResultCall();
      node0.addChildToBack((Node) null);
      node0.isNE();
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Node node0 = Node.newString((-2137), "=$po,94N$Ad/25sO{;D", (-445), (-2137));
      Node node1 = new Node(105, node0);
      node1.useSourceInfoIfMissingFromForTree(node0);
      Node node2 = new Node(110, 1902, 36);
      node2.isBreak();
      InputId inputId0 = new InputId("&Dv?T_=");
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      Node node0 = Node.newString(44, "AWUFdB&Hh(r*XFk");
      Node[] nodeArray0 = new Node[0];
      node0.getSourceFileName();
      Node node1 = new Node(2, nodeArray0, 40, 3632);
      node1.isOr();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node2 = new Node(0, node1, node1, node0);
      node2.isFor();
      node1.isEquivalentToTyped(node0);
      node2.useSourceInfoFromForTree(node1);
      node1.mayMutateGlobalStateOrThrow();
      node1.isContinue();
  }
}
