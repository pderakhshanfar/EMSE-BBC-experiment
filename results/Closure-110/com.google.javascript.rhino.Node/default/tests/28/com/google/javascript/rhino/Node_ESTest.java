/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 05 11:13:30 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import com.google.javascript.rhino.jstype.TemplatizedType;
import com.google.javascript.rhino.jstype.UnionType;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URISyntaxException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) null);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeArray0[2] = (JSType) objectType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.toStringTree();
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      node0.setDirectives(set0);
      Node node1 = node0.useSourceInfoFrom(node0);
      node1.isEquivalentToShallow(node0);
      // Undeclared exception!
      try { 
        node0.replaceChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      Node node0 = new Node(43, 43, 43);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = " : ";
      stringArray0[1] = "&rMWR>q`jo<Rz,p";
      stringArray0[2] = "]7x.r#+KQ$DWLGN";
      stringArray0[3] = "z<";
      stringArray0[4] = "vIUe_na97";
      stringArray0[5] = "`r";
      stringArray0[6] = "1.k\"r";
      linkedHashSet0.toArray(stringArray0);
      node0.setDirectives(linkedHashSet0);
      node0.isTrue();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      Node node0 = Node.newString("PP");
      node0.putIntProp(33, (-1695));
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 33
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      Node node0 = new Node(148);
      node0.putProp(46, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
      node0.addChildToFront(node0);
      // Undeclared exception!
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(40);
      node0.putProp(40, simpleErrorReporter0);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      Node node0 = new Node(148);
      Node node1 = node0.cloneTree();
      node1.isEquivalentTo(node0, true, false, true);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
      modificationVisitor0.caseFunctionType(functionType0);
      JSType jSType1 = modificationVisitor0.caseNullType();
      FunctionType functionType1 = jSTypeRegistry0.createConstructorType(jSType0, false, jSTypeArray0);
      JSType[] jSTypeArray1 = new JSType[3];
      jSTypeArray1[0] = jSType1;
      jSTypeArray1[1] = (JSType) functionType1;
      jSTypeArray1[2] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray1);
      node0.detachChildren();
      jSTypeArray0[3].hasAnyTemplateTypes();
      node0.toStringTree();
      try { 
        node0.setDouble(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
      modificationVisitor0.caseFunctionType(functionType0);
      modificationVisitor0.caseNullType();
      jSTypeRegistry0.createConstructorType(jSTypeArray0[3], false, jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.detachChildren();
      jSType0.hasAnyTemplateTypes();
      node0.toStringTree();
      try { 
        node0.setDouble((-2.0184991188166377));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(2, node0, node0, node0, 46, 15);
      node1.addChildrenToBack(node1);
      node0.getNext();
      node0.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      Node node0 = new Node(111);
      Node node1 = new Node(116, node0);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      Node node0 = new Node(102);
      Node node1 = new Node(36, node0, node0, node0, 2, 40);
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.removeChildren();
      node2.isEquivalentToShallow(node1);
      node2.isGetElem();
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      Node node0 = new Node(110, 110, 110);
      node0.setWasEmptyNode(true);
      node0.toStringTree();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      Node node0 = new Node(108, 108, 108);
      Node node1 = node0.cloneTree();
      int int0 = Node.COLUMN_BITS;
      Node node2 = new Node(43, node0, node1, 53, 105);
      node0.checkTreeEqualsImpl(node1);
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      Node node0 = new Node(110, 110, 110);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = new Node(54, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      ImmutableList<Object> immutableList0 = ImmutableList.of((Object) node1, (Object) jSDocInfo0, (Object) jSDocInfo0);
      ImmutableList<Object> immutableList1 = immutableList0.reverse();
      arrayList0.containsAll(immutableList1);
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node0.useSourceInfoFromForTree(node2);
      node0.toStringTree();
      node0.getNext();
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      Node node0 = new Node(44, 44, 44);
      Node node1 = node0.cloneTree();
      int int0 = Node.COLUMN_BITS;
      node1.isEquivalentTo(node0, true, true, true);
      node1.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      Node node0 = Node.newNumber((double) 147);
      Node node1 = new Node(43, node0, node0, node0);
      Node node2 = node1.cloneTree();
      node1.getIntProp(8);
      node2.isQualifiedName();
      InputId inputId0 = new InputId("1v");
      node1.setInputId(inputId0);
      node1.type = 55;
      node2.isEquivalentTo(node1, true, true, true);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      Node node0 = new Node(126);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(1, nodeArray0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.getLastSibling();
      node0.putProp(46, node0);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      Node node0 = new Node(108, 108, 108);
      Node node1 = new Node(16, node0, node0);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      Node node0 = new Node(2870);
      Node node1 = new Node(2870, node0);
      Node node2 = new Node(153, node1, node1, node1, node1, 108, 1153);
      node2.children();
      Node node3 = Node.newString("vIUe_na9S7");
      node3.getDirectives();
      // Undeclared exception!
      try { 
        node1.addChildBefore((Node) null, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      Node node0 = new Node(114, 114, 113);
      Node node1 = node0.cloneTree();
      Node node2 = Node.newString("wHu7VaMzBzit4h:@Bk");
      Node node3 = new Node(142, node1, node2, node0, 31, 37);
      // Undeclared exception!
      try { 
        node0.addChildrenToBack(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node0 = new Node(32);
      node0.isEquivalentTo(node0, true, true, true);
      node0.getSourceOffset();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(45, nodeArray0);
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      Node node0 = Node.newNumber((-47.862202137), 98, (-200));
      Node node1 = new Node(98, node0, node0);
      node1.getSideEffectFlags();
      node1.getJSDocInfo();
      node0.setWasEmptyNode(true);
      node1.isIf();
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      // Undeclared exception!
      try { 
        node2.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      Node node0 = new Node(147, 147, 147);
      node0.setLineno(147);
      Node node1 = new Node(57, node0, node0, node0);
      node1.isArrayLit();
      node1.cloneTree();
      node0.setJSDocInfo((JSDocInfo) null);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      Node node0 = new Node(108, 108, 108);
      Node node1 = node0.cloneTree();
      node1.useSourceInfoFromForTree(node0);
      node1.getIntProp(64);
      node1.isEquivalentTo(node0, true, true, true);
      node1.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      node0.toStringTree();
      Node node1 = Node.newNumber(986.7, 1011, 52);
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      Node node0 = Node.newNumber((double) 147);
      Node node1 = new Node(147, node0, node0, node0, 12, 36);
      Node node2 = node1.cloneTree();
      node1.getIntProp(8);
      node2.isQualifiedName();
      node2.isEquivalentTo(node1, true, true, true);
      node2.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      Node node0 = new Node(126);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.putProp(34, "unexpected prop id ");
      node0.setSourceFileForTesting("unexpected prop id ");
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 34
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        modificationVisitor0.caseFunctionType(functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ModificationVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      Node node0 = new Node(49);
      boolean boolean0 = true;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      jSTypeArray0[0] = jSType0;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, jSTypeArray0[0]);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      enumElementType1.getParentScope();
      jSTypeArray0[1] = (JSType) null;
      enumElementType0.getImplicitPrototype();
      jSTypeArray0[2] = (JSType) null;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, false, jSTypeArray0);
      // Undeclared exception!
      try { 
        modificationVisitor0.caseFunctionType(functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ModificationVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      int int0 = 32;
      Node node0 = new Node(32, 32, 32);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node node1 = new Node(25, node0);
      node1.removeFirstChild();
      // Undeclared exception!
      try { 
        node0.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      node0.putIntProp(42, (-3426));
      node0.getSideEffectFlags();
      node0.isOnlyModifiesThisCall();
      node0.getProp((-2350));
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      Node node0 = new Node(108, 108, 108);
      Node node1 = node0.copyInformationFrom(node0);
      Node node2 = node1.clonePropsFrom(node0);
      node0.isSwitch();
      node2.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      Node node0 = new Node(43);
      Node node1 = Node.newNumber((double) 57, 4095, 128);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      Node node0 = new Node(44);
      Node node1 = Node.newString(1, "p)Qz,A/", 108, 0);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      Node node0 = new Node(51);
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      Node node0 = new Node(108, 108, 108);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSType.toMaybeTemplateType((JSType) null);
      node0.toStringTree();
      node0.isTrue();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      Node node0 = new Node(43, 43, 43);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.setDirectives(linkedHashSet0);
      node0.toStringTree();
      node0.isTrue();
      node0.getChildCount();
      Node node1 = Node.newString("d=/8ICfs@2", 57, 56);
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      Node node0 = new Node(108, 108, 108);
      Node node1 = new Node(108, node0);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = new Node(54, node1, node1, node1);
      node1.isGetElem();
      node2.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      Node node0 = new Node(108, 108, 108);
      Node node1 = node0.cloneTree();
      node1.getIntProp(64);
      node1.isEquivalentTo(node0, true, false, false);
      Node node2 = new Node(45, node1, node1, node1, node0, (-2008), 56);
      node2.isCatch();
      node1.getQualifiedName();
      node2.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      Node node0 = Node.newNumber((-3873.57059), 882, 882);
      Node node1 = Node.newNumber(0.0);
      node0.isCatch();
      node0.setType(882);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags5.setThrows();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags6.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.clearAllFlags();
      node_SideEffectFlags7.setMutatesGlobalState();
      Node node2 = new Node(125);
      node1.copyInformationFromForTree(node2);
      node1.setLineno(31);
      node2.mayMutateArguments();
      node0.isIn();
      node2.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      Node node0 = new Node(108);
      Node node1 = new Node(108, node0);
      node0.copyInformationFrom(node1);
      node1.isSwitch();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
      Node.newString(48, "LT");
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      Node node0 = new Node(43);
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      Node node0 = Node.newString("}c8y");
      node0.setSourceFileForTesting("}c8y");
      node0.getSourceOffset();
      Node node1 = new Node(47, node0);
      node1.getAncestors();
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      Node node0 = new Node(111, (-5731), 4084);
      Node node1 = node0.cloneTree();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node1;
      nodeArray0[1] = node1;
      node1.srcref(node1);
      nodeArray0[2] = node0;
      Node node2 = null;
      try {
        node2 = new Node(38, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = new Node(49);
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      Node node0 = new Node(103, 103, 103);
      Node node1 = node0.cloneTree();
      node0.isAnd();
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node node0 = Node.newNumber(1008.25065531285);
      node0.putIntProp(54, 53);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      assertEquals(635035, node0.getSourcePosition());
      assertEquals(155, node0.getType());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'F';
      charArray0[2] = 'A';
      charArray0[3] = 'V';
      charArray0[4] = 'A';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        node0.appendStringTree(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      Node node0 = new Node(111, (-5731), 4084);
      Node node1 = node0.cloneTree();
      node1.getIntProp(1);
      node1.isEquivalentTo(node0, true, true, true);
      node1.isOptionalArg();
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(1514, 108, 108);
      Node node1 = new Node(119, node0);
      Node node2 = node1.copyInformationFrom(node0);
      node2.wasEmptyNode();
      node1.isSwitch();
      node0.getParent();
      node0.useSourceInfoIfMissingFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(130, (-2850), 130);
      Node node1 = node0.cloneTree();
      node1.getIntProp(57);
      node1.isEquivalentTo(node0, false, true, true);
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      Node node0 = new Node(105);
      node0.cloneNode();
      Node node1 = new Node(256, node0);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = new Node(39);
      Node node1 = Node.newString("Object#Key", 95, 50);
      node0.copyInformationFromForTree(node1);
      node0.putIntProp(40, 40);
      node0.isGetProp();
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(50, nodeArray0);
      node0.srcref(node1);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      node0.toStringTree();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = new Node(112, 112, 112);
      Node node1 = node0.cloneTree();
      node0.getIntProp((-425));
      node1.isEquivalentTo(node0, true, true, true);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      Node node0 = Node.newString("GO(^m{Id");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(0);
      Node node2 = Node.newString(1, "");
      node1.mayMutateArguments();
      Node node3 = node1.cloneNode();
      node3.putProp(46, node1);
      Node node4 = new Node(4095, node0, node1, node0, node0, 2, 4095);
      node4.setSourceEncodedPositionForTree(29);
      node2.cloneTree();
      node4.replaceChildAfter(node1, node2);
      node3.setIsSyntheticBlock(true);
      node3.isGetElem();
      node3.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      Node node0 = new Node(126, 126, 126);
      node0.putProp(46, node0);
      assertEquals(516222, node0.getSourcePosition());
      assertTrue(node0.isLabel());
      
      Node node1 = node0.cloneNode();
      Node.newString(">Ge.;cNXc.r", 49, 114);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node0.getLastSibling();
      node2.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      Node node0 = new Node(138, 138, 138);
      Node node1 = new Node(40, node0, node0);
      node0.srcrefTree(node1);
      node1.clonePropsFrom(node0);
      node1.isAnd();
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      Node node0 = new Node(147);
      node0.getInputId();
      node0.setLineno(147);
      Node node1 = new Node(57, node0, node0, node0, node0, 46, 47);
      node1.isArrayLit();
      node1.getLastChild();
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      Node.extractLineno(105);
      Node node0 = Node.newString("$:k.C(z,XnW>(7snzM2");
      Node node1 = new Node(0, node0, node0, node0, node0);
      Node node2 = new Node(0, node1, node1, 0, 654);
      node2.isSetterDef();
      node1.putBooleanProp((-295), false);
      node0.isLocalResultCall();
      Node node3 = node2.cloneTree();
      node3.useSourceInfoIfMissingFromForTree(node1);
      node1.removeChildren();
      node0.useSourceInfoIfMissingFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      Node node0 = new Node(112);
      node0.getProp(112);
      node0.isCase();
      node0.toString(false, true, false);
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(101);
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      Node node0 = new Node(32);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.putIntProp(32, 16384);
      node0.setDirectives(linkedHashSet0);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      Node node0 = new Node(32);
      node0.putIntProp(32, 30);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      Node node0 = new Node(118);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1761);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(43);
      node_SideEffectFlags0.valueOf();
      Node node1 = Node.newString(2834, "quoted");
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.isOnlyModifiesArgumentsCall();
      node1.isIn();
      node0.isOnlyModifiesArgumentsCall();
      node1.isComma();
      node0.isBlock();
      node0.isSwitch();
      node1.isLabelName();
      Node node2 = node0.srcref(node1);
      node2.hasChild(node0);
      node0.isThrow();
      Node node3 = node0.clonePropsFrom(node2);
      node3.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      Node node0 = new Node(110, 102, (-751));
      Node node1 = Node.newNumber(1.0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.getStaticSourceFile();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      Node node0 = new Node(138, 138, 138);
      Node node1 = new Node(40, node0, node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.addChildrenToBack(node2);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node3 = node1.setJSDocInfo(jSDocInfo0);
      node3.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      Node node0 = Node.newString((-1884), "w", 37, (-1884));
      Node node1 = new Node(42, node0, node0, 55, 8);
      node1.setLineno(4095);
      node1.checkTreeEqualsImpl(node0);
      node0.addChildrenToFront(node1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.isFromExterns();
      node0.isArrayLit();
      node0.isArrayLit();
      Node node2 = node0.getChildAtIndex((-1884));
      node2.isLocalResultCall();
      node2.isHook();
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      node0.isCase();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("2,>J{", 34, 34);
      nodeArray0[0] = node0;
      Node node1 = new Node(101, nodeArray0);
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      Node node0 = new Node(54, 54, 125);
      Node node1 = new Node(44, node0, node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.isUnscopedQualifiedName();
      Node node3 = Node.newString(1, "", 65535, 4095);
      node2.addChildrenToBack(node3);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      Node node0 = new Node(32);
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      Node node0 = Node.newNumber((-1838.1283890124112));
      node0.getSourceOffset();
      Node node1 = new Node(37, node0);
      node1.checkTreeTypeAwareEqualsImpl(node1);
      node1.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      Node node1 = new Node(48, node0, node0, node0);
      node0.copyInformationFrom(node1);
      node0.addSuppression("k=IY<{V]b|>");
      node0.putBooleanProp(155, true);
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      Node node0 = new Node(5216);
      Node node1 = new Node(47, node0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.cloneTree();
      node1.cloneTree();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.removeChild(node0);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      try { 
        node2.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // REGEXP is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      Node node1 = Node.newNumber((-623.760217514));
      node0.useSourceInfoFrom(node1);
      node1.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vIUe_na97");
      Node node0 = Node.newString("%o");
      Node node1 = new Node(49, node0, node0);
      node0.setQuotedString();
      node0.toStringTree();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      Node node0 = new Node(153);
      Node node1 = node0.getAncestor(0);
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      Node node0 = new Node(103, 43, 43);
      Node node1 = new Node(43, node0, 42, 1567);
      node1.copyInformationFrom(node0);
      Node node2 = node1.getFirstChild();
      node2.getSourceOffset();
      node0.checkTreeEquals(node2);
      node0.setCharno(2956);
      Node node3 = node0.cloneNode();
      // Undeclared exception!
      try { 
        node3.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.setVarArgs(true);
      Node node1 = new Node(125, node0, node0, node0, 4095, 56);
      node0.isEquivalentToShallow(node1);
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      Node node0 = new Node(112);
      Node node1 = Node.newString("Should not happen\n", 4, 4095);
      node0.useSourceInfoFromForTree(node1);
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      Node node0 = new Node(126);
      Node node1 = node0.cloneNode();
      node1.setLineno(55);
      node1.useSourceInfoIfMissingFrom(node0);
      node1.isIf();
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      Node node0 = Node.newString("V>GM^T2\"\"H");
      Node node1 = new Node(108, node0);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = node1.useSourceInfoFrom(node2);
      node0.wasEmptyNode();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.checkTreeEquals(node0);
      node1.isSwitch();
      node1.addChildToBack(node3);
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      Node node0 = Node.newString("V>GM^T2\"\"H");
      Node node1 = new Node(108, node0);
      node1.copyInformationFrom(node0);
      node0.wasEmptyNode();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      Node node0 = new Node(96);
      Node node1 = new Node(43, 36, 57);
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.useSourceInfoFrom(node0);
      node1.addChildrenToBack(node2);
      node2.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      Node node0 = new Node(107, 107, 107);
      node0.setSourceFileForTesting("Should not happen\n");
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      Node node0 = new Node(103, 103, 103);
      node0.setSourceFileForTesting("node is not a child");
      node0.getAncestor(103);
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      Node node0 = new Node(112);
      Node node1 = new Node(55, node0, node0, node0, node0);
      node0.addChildToFront(node1);
      node0.isCase();
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      Node node0 = new Node(42);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.putIntProp(42, (-3426));
      node0.setDirectives(linkedHashSet0);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      Node node0 = new Node(42);
      node0.putIntProp(42, (-1875));
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      Node node0 = new Node(25);
      Node node1 = new Node(116, node0, node0, node0, 4, (-1640));
      node0.isEquivalentTo(node1, true, true, false);
      node0.isQualifiedName();
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(91);
      Node node1 = new Node(43);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
      node1.putProp(55, templateType0);
      node0.addChildToFront(node1);
      node1.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      Node node0 = new Node(103);
      node0.setSourceFileForTesting("node is not a child");
      node0.toStringTree();
      Node.newNumber((-2788.745042820226));
      node0.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      Node node0 = Node.newString("vIUe_na97");
      node0.setSourceFileForTesting("vIUe_na97");
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(153, nodeArray0);
      node0.getAncestor(153);
      node0.getSideEffectFlags();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      Node node0 = new Node(153);
      Node node1 = new Node((-641), node0, 1800, (-1));
      node0.useSourceInfoIfMissingFrom(node1);
      node0.getAncestor(0);
      node0.getLength();
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      Node node0 = new Node(105, 38, 38);
      Node node1 = new Node(4, node0, node0, node0);
      node0.copyInformationFrom(node1);
      node0.isIf();
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = new Node(37, node0, node0, node0, node0, 53, 1);
      node0.addSuppression("1@qlJ91/nL");
      node1.putBooleanProp(43, true);
      node1.isUnscopedQualifiedName();
      try { 
        node1.setDouble(57);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CALL 53 [is_constant_name: com.google.javascript.rhino.Node$IntPropListItem@0000000341] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(18, 18, 43);
      node0.putProp(43, simpleErrorReporter0);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      Node node0 = new Node(96);
      Node node1 = new Node(40, node0, node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.putProp(52, node0);
      Node node3 = node2.cloneNode();
      node3.setSourceFileForTesting("appendable");
      node1.addChildrenToBack(node2);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      Node node0 = Node.newNumber((-1838.1283890124112));
      Node node1 = new Node(102, 48, 2);
      Node.newString(52, "=X{", 44, 917);
      node0.setChangeTime(1195);
      Node node2 = new Node(57, node1, node1, node0, 2, 51);
      Node node3 = node2.removeFirstChild();
      node2.isFunction();
      node3.getProp((-1797));
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      Node node0 = new Node(103);
      node0.copyInformationFrom(node0);
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      Node node0 = new Node(102);
      Node node1 = new Node(53, node0, node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.addChildrenToBack(node2);
      node0.useSourceInfoIfMissingFrom(node2);
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      Node node0 = new Node(85, 85, 85);
      Node node1 = new Node(85, node0, node0, node0, node0);
      node1.setJSDocInfo((JSDocInfo) null);
      node1.setSourceEncodedPosition(36);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got COMMA
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      Node node0 = new Node(147);
      Node node1 = new Node(53);
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      Node node0 = new Node(152);
      node0.isGetterDef();
      node0.setJSDocInfo((JSDocInfo) null);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      Node node0 = new Node(126);
      node0.putProp(46, node0);
      node0.addChildToFront(node0);
      node0.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      Node node0 = new Node(147);
      Node node1 = new Node(623, node0, node0);
      Node node2 = node0.useSourceInfoFrom(node1);
      // Undeclared exception!
      try { 
        node0.addChildrenToBack(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      Node node0 = new Node(126, 29, (-357));
      Node node1 = Node.newNumber(4.0, 47, 4095);
      Node node2 = node0.copyInformationFrom(node1);
      node0.checkTreeEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      Node node0 = new Node(147);
      Locale locale0 = new Locale("The new child node has siblings.", "dC_6<<|7-kR", "var_args_name");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node0.setDirectives(set0);
      node0.toStringTree();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      Node node0 = new Node(51, 51, 51);
      Node node1 = new Node(51, node0, node0, node0, node0);
      node1.removeChildren();
      node1.setSourceEncodedPosition(36);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      Node node0 = new Node(103);
      Node node1 = Node.newString(12, "sqkxUqE,fT8S*Ax!", 54, 32);
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.addChildrenToBack(node1);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      Node node0 = Node.newString(113, "");
      node0.getInputId();
      Node node1 = new Node(38, node0, node0, node0, node0, 55, 49);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      CharBuffer charBuffer0 = CharBuffer.allocate(48);
      charBuffer0.put(36, 'v');
      Charset charset0 = Charset.defaultCharset();
      charset0.encode(charBuffer0);
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      node0.checkTreeEqualsImpl(node1);
      node1.checkTreeEquals(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = new Node(15, 48, 1101);
      node0.getChildCount();
      Node node3 = Node.newNumber(0.0);
      node2.getJSType();
      node1.useSourceInfoFromForTree(node3);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      Node.newNumber(2943.97322678728);
      Node node0 = new Node(64, 56, 40);
      Node node1 = node0.cloneNode();
      node1.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      Node node0 = new Node(147, 304, 147);
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      Node node0 = new Node(117);
      node0.setLineno(117);
      Node node1 = new Node(57, node0, node0, node0, node0, 46, 47);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.setJSDocInfo(jSDocInfo0);
      Node.newString("yLNz8z", 154, (-118));
      // Undeclared exception!
      try { 
        node1.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 57
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      Node node0 = new Node(32);
      node0.getQualifiedName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      Node node0 = Node.newString("V>GM^T2\"\"H");
      Node node1 = new Node(46);
      Node node2 = new Node(36, node1, node1, 56, 16);
      Node node3 = new Node(30, node2, node0, node2);
      node3.setJSDocInfo((JSDocInfo) null);
      int int0 = 8388608;
      // Undeclared exception!
      try { 
        node1.getExistingIntProp(8388608);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 8388608
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-906), (-906));
      Node node1 = new Node(52, node0, node0, node0, 39, 31);
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.isEquivalentToShallow(node2);
      node1.setJSDocInfo((JSDocInfo) null);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      Node node0 = new Node(147, 147, 147);
      node0.isLabelName();
      node0.isArrayLit();
      Node node1 = Node.newString(1351, "N3$N9I\"0;");
      node1.isEquivalentTo(node0);
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      Node node0 = new Node(119, 119, 119);
      Node node1 = new Node(155, node0, node0, 57, 2933);
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      Node node0 = Node.newString("");
      InputId inputId0 = new InputId("");
      inputId0.toString();
      node0.setInputId(inputId0);
      node0.toStringTree();
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      Node node0 = new Node(35);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      node0.isLabelName();
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      Node node0 = Node.newString("}8~%*!WVX(hH(S", 11, 130);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.removeProp(29);
      node1.toString();
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      Node node0 = Node.newString("V>GM^T2\"\"H");
      Node node1 = new Node(46);
      Node node2 = new Node(36, node1, node1, 56, 16);
      Node node3 = new Node(30, node2, node0, node2);
      node2.isGetElem();
      node3.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      Node node0 = new Node(103, 103, 3698);
      node0.isLabel();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = new Node(21);
      Node node1 = new Node(49, node0, node0);
      node0.useSourceInfoFrom(node1);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node3 = null;
      try {
        node3 = new Node(30, node1, node0, node2, 12, 43);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      Node node0 = new Node(112);
      node0.cloneTree();
      Node node1 = new Node(57);
      node0.copyInformationFrom(node1);
      node0.getStaticSourceFile();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      Node node0 = new Node(102);
      Node node1 = new Node(53, node0, node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.isHook();
      node2.getFirstChild();
      node2.setLineno(30);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      Node node0 = new Node(112);
      Node node1 = Node.newString(112, "*?how35iC-l");
      node1.setSourceEncodedPosition(4);
      node0.copyInformationFrom(node1);
      node0.setWasEmptyNode(true);
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      Node node1 = new Node(105, node0, node0, node0, node0, 155, 1536);
      node1.removeFirstChild();
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      node0.isObjectLit();
      Node node1 = Node.newString("(N.fC0f1c~J\"@GIUaJr");
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      Node node0 = new Node(155);
      Node node1 = new Node(48, node0, 37, 155);
      node0.copyInformationFromForTree(node1);
      Node node2 = null;
      try {
        node2 = new Node(39, node0, node0, 36, 4095);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      Node.newString("{(");
      Node node0 = Node.newString(38, "{(");
      node0.isDebugger();
      node0.isQualifiedName();
      node0.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      Node node0 = new Node(153, 153, 153);
      node0.isTry();
      node0.isUnscopedQualifiedName();
      node0.putBooleanProp(96, true);
      Node node1 = Node.newString(105, "]]Ck");
      node0.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      Node node0 = new Node(153, 153, 153);
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "quoted");
      Node node0 = Node.newString("%o");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(49, node0, node0);
      node0.setQuotedString();
      node0.toStringTree();
      node0.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      node0.getDirectives();
      node0.isLabel();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      Node node0 = Node.newString("V>GM^T2\"\"H");
      Node node1 = new Node(52, 1197, 8);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = new Node(39, node2, node0);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      Node node0 = Node.newString(33, "p\"W\nv$37B", 17, 33);
      Node node1 = new Node(33, node0, node0);
      node1.useSourceInfoFrom(node0);
      // Undeclared exception!
      try { 
        node1.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      Node node0 = Node.newString("%o");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(42, node0, node0, node0);
      node1.isQualifiedName();
      node1.addChildBefore(node1, node0);
      Node node2 = node1.detachFromParent();
      node2.isNE();
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = node0.cloneTree();
      Node node2 = Node.newNumber((-1.0), (-22), 39);
      node0.setStaticSourceFile((StaticSourceFile) null);
      node2.getJsDocBuilderForNode();
      node0.isEquivalentToShallow(node2);
      node1.isDec();
      Node node3 = new Node(51, 56, (-3427));
      Node node4 = node3.useSourceInfoIfMissingFrom(node1);
      node4.isOnlyModifiesArgumentsCall();
      node0.hasChildren();
      node3.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      Node node0 = new Node(147);
      Node node1 = new Node(57, node0, node0, node0, node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      Node node0 = Node.newString("%o");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(42, node0, node0, node0);
      node1.isQualifiedName();
      node1.addChildBefore(node1, node0);
      // Undeclared exception!
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      Node node0 = new Node(155);
      Node node1 = new Node(751619276, node0);
      node0.addChildrenToBack(node1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)86;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        node0.checkTreeTypeAwareEqualsImpl(node0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(112);
      Node node1 = Node.newNumber(996.91, 0, 4095);
      node0.srcrefTree(node1);
      node0.isCase();
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      Node node0 = new Node(112);
      node0.isCase();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ImmutableList<ObjectType> immutableList0 = ImmutableList.of();
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList1);
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      Node node0 = new Node(103, 103, 103);
      Node node1 = Node.newString("com.google.javascript.rhino.Node");
      node0.useSourceInfoFromForTree(node1);
      node0.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      Node node1 = new Node(36, node0, node0, node0, 2, 40);
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.isEquivalentToShallow(node2);
      node0.copyInformationFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      Node node0 = new Node(35, 93, 35);
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      Node node0 = new Node(85, 85, 85);
      Node node1 = node0.useSourceInfoFrom(node0);
      node0.isEquivalentToShallow(node1);
      Node node2 = node1.cloneTree();
      node1.srcrefTree(node2);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      Node node1 = Node.newString("\")");
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      Node node0 = new Node(116);
      node0.type = 116;
      Node node1 = new Node(Integer.MIN_VALUE, node0, node0, node0, (-2620), 1);
      node0.useSourceInfoIfMissingFrom(node1);
      Node node2 = new Node(56, 54, 43);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      Node node0 = new Node(152, 152, 152);
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      node0.mayMutateArguments();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString((-651), "EpWz%b]m:a|e\"&>");
      Node node1 = new Node(35, node0, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Mp`HpX*)AlG");
      node0.putBooleanProp(51, true);
      node0.isNot();
      node1.isQualifiedName();
      node0.isAssignAdd();
      // Undeclared exception!
      try { 
        node0.copyInformationFrom(node2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$IntPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      Node node0 = new Node(152, 152, 152);
      node0.wasEmptyNode();
      Node node1 = Node.newString(48, "d-lB0f#*$OPld[~rsK");
      node1.srcref(node0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.mayMutateArguments();
      node0.getSourceOffset();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      Node node0 = new Node(25, 25, 25);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      node0.putBooleanProp(25, true);
      node0.setCharno(50);
      node0.getBooleanProp(25);
      node0.isNot();
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      Node node0 = new Node(32);
      Node node1 = new Node(125, node0, node0, node0, 111, 52);
      Node node2 = new Node(2193);
      node2.removeProp(195);
      node1.useSourceInfoFromForTree(node2);
      node0.srcrefTree(node1);
      node0.isEquivalentTo(node0, true, true, true);
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      Node node0 = new Node(47, 4, 4);
      Node node1 = new Node(2693, 30, 49);
      node0.isEquivalentToTyped(node1);
      node0.isDec();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      Node node0 = new Node(49, (-2560), (-2560));
      Node node1 = new Node(1, node0, node0, 111, 3979);
      node0.copyInformationFrom(node1);
      Node node2 = null;
      try {
        node2 = new Node(27, node0, 2, 34);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      Node node0 = new Node(49);
      Node node1 = new Node(41, node0, node0, node0, 42, (-369));
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      Node node0 = new Node(103);
      Node node1 = new Node(0, 93, 57);
      node0.srcref(node1);
      node0.setSourceFileForTesting("&<");
      node0.toStringTree();
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      Node node0 = new Node(112);
      node0.getJSDocInfo();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      Node node0 = new Node(85);
      Node node1 = new Node(85, node0, node0, node0, node0);
      Node node2 = node0.detachFromParent();
      // Undeclared exception!
      try { 
        node2.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      Node node0 = new Node(153, 153, 153);
      Node node1 = node0.copyInformationFrom(node0);
      node0.isEquivalentTo(node1);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      Node node1 = new Node(53, node0, node0, node0, node0, 57, 57);
      node1.replaceChild(node0, node1);
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      Node.extractCharno(1585);
      Node node0 = new Node(147, 108, 161);
      Node node1 = Node.newString("E^-xof`z", 147, 1947);
      node1.putBooleanProp(102, true);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.isQuotedString();
      node2.setLineno(46);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      Node node1 = Node.newString((-262), "prev is not a child of this node.", (-1250), 47);
      node0.srcrefTree(node1);
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      node0.isLabel();
      Node node1 = new Node(1182, node0, 52, 38);
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = new Node(52, node0);
      node1.isEquivalentTo(node0, true, true, true);
      node0.children();
      node1.isRegExp();
      node0.setType(2710);
      node0.detachChildren();
      Node node2 = Node.newNumber(0.0);
      node1.getIntProp((-310));
      node0.isCase();
      String string0 = ".Um=buqvXO";
      Node node3 = Node.newString((-1511), ".Um=buqvXO");
      node0.isName();
      node1.isComma();
      node0.isContinue();
      node1.getChildAtIndex(0);
      // Undeclared exception!
      try { 
        node2.removeChildAfter(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      Node node0 = Node.newNumber((-1837.358));
      node0.getIntProp(57);
      Node node1 = new Node(37, node0);
      node1.checkTreeTypeAwareEqualsImpl(node1);
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      Node node1 = node0.cloneNode();
      node1.mayMutateArguments();
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      Node node1 = new Node(21, 21, 46);
      node1.srcrefTree(node0);
      node1.isBlock();
      node0.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      node0.isSetterDef();
      Node node1 = node0.cloneTree();
      node1.isLabel();
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      Node node0 = new Node(152);
      node0.isGetterDef();
      Node node1 = new Node(30, node0, node0, node0, node0);
      Node node2 = new Node(40, node1, node1, 47, 215);
      node0.srcrefTree(node2);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      Node node0 = new Node(100);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[2];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry1.createTemplateType("Object#Key");
      jSTypeArray0[0] = (JSType) templateType0;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      jSTypeArray0[1] = jSType0;
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.copyInformationFrom(node1);
      node0.setSourceFileForTesting("&<");
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      Node node0 = Node.newNumber((-1837.358));
      Node node1 = new Node(37, node0);
      node1.useSourceInfoFrom(node0);
      Node node2 = Node.newNumber(158.29, 542, 42);
      // Undeclared exception!
      try { 
        node2.isEquivalentToShallow((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      Node node1 = Node.newNumber((-1.0), 85, 570);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = Node.newNumber((-1066.16), 57, 1);
      node0.useSourceInfoIfMissingFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      Node node0 = new Node((-2209), 1034, 3199);
      Node node1 = new Node((-3657), 32, 16);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = new Node(77, node1, node0, node1, node1, 3771, 15);
      node2.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      Node node0 = new Node(117);
      node0.setLineno(117);
      Node node1 = new Node((-2004), node0, node0, node0, 2, 117);
      node0.useSourceInfoFrom(node1);
      node0.isEquivalentToShallow(node1);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      Node node0 = new Node(32);
      Node node1 = new Node(31, 90, (-1177));
      node0.copyInformationFrom(node1);
      node1.isFalse();
      Node.extractCharno(103);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      Node node0 = new Node(32);
      Node node1 = new Node(2897, 39, (-582));
      Node node2 = new Node(43, node1, node0, 4095, 56);
      node2.copyInformationFrom(node0);
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      Node node0 = new Node(155);
      node0.setLineno(155);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = new Node(2, node0, node0, node0, node0, 2, (-3434));
      node1.isArrayLit();
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(38, "Object#Element");
      node0.isCatch();
      node0.isUnscopedQualifiedName();
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      Node node1 = Node.newString("i*a3|2DTMN");
      node0.copyInformationFrom(node1);
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      Node node0 = new Node(102);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isEquivalentTo(node0, true, true, true);
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      Node node0 = new Node(125);
      assertTrue(node0.isBlock());
      assertEquals((-1), node0.getSourcePosition());
      
      Node node1 = new Node(30, node0, node0, 12288, (-1814));
      node0.copyInformationFromForTree(node1);
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(132, (-3066), 117);
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      Node node0 = new Node(117);
      node0.isLabelName();
      node0.isCatch();
      Node node1 = new Node(30, 3354, 3274);
      Node node2 = new Node(43, node0, node1);
      Node node3 = node2.removeChildAfter(node0);
      // Undeclared exception!
      try { 
        node0.getChildBefore(node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      Node node1 = new Node(0, node0, node0);
      node0.checkTreeEqualsImpl(node1);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      Node node0 = new Node(120);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[2];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry1.getNativeFunctionType(jSTypeNative0);
      jSTypeArray0[0] = (JSType) functionType0;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      jSTypeArray0[1] = (JSType) functionType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.isEquivalentToShallow(node1);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      Node node0 = new Node(39);
      node0.isWhile();
      Node node1 = new Node(154, node0, node0, node0);
      node1.copyInformationFrom(node0);
      node0.isEquivalentToShallow(node1);
      Node.newString(43, "MG=?Iq=Mlz");
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      Node node0 = new Node(119);
      Node node1 = new Node((-1354));
      node0.useSourceInfoIfMissingFrom(node1);
      node0.setLineno(119);
      node0.isUnscopedQualifiedName();
      Node node2 = new Node(52, 8233, 49);
      node0.addChildrenToBack(node2);
      node2.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType[] jSTypeArray0 = new JSType[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object#Key");
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isTry();
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node1.toString();
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      node0.isAnd();
      node0.isTry();
      node0.toStringTree();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node1.getProp(306654252);
      node0.clonePropsFrom(node1);
      node1.isStringKey();
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      Node node0 = new Node(113, (-3294), 3483);
      Node node1 = new Node(4, node0, node0, node0, (-1185), 113);
      node1.setChangeTime(50);
      node0.toStringTree();
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      Node node0 = new Node(103, 103, 119);
      Node node1 = new Node(48, node0, node0, node0, 54, 56);
      node0.clonePropsFrom(node1);
      Node node2 = null;
      try {
        node2 = new Node(51, node0, node0, node1, node1, 57, (-671));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      Node node0 = new Node(154, 154, 172);
      node0.isSetterDef();
      Node node1 = node0.cloneNode();
      node1.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 147, 147);
      node0.setChangeTime(1);
      Node node1 = new Node((-1438), node0, node0, node0);
      node0.addChildToBack(node1);
      node0.getSourceFileName();
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      Node node0 = new Node(102);
      Node node1 = new Node(36, node0, node0, node0, 2, 40);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.useSourceInfoFrom(node1);
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got INC
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.setCharno(8);
      node0.isGetterDef();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "reflected_object");
      node0.isDec();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      node0.setLineno(117);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = new Node(57, node0, node0, node0, node0, 46, 88);
      node1.isArrayLit();
      node1.isLabel();
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      node0.isFalse();
      Node node1 = new Node((-1019), node0, node0, 52, (-4312));
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      Node node1 = new Node(47, node0, node0);
      Node node2 = new Node(40, node1);
      node1.replaceChild(node0, node2);
      node1.getAncestor(53);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      Node node0 = new Node(152);
      Node node1 = new Node(2, node0);
      node0.getSideEffectFlags();
      node0.useSourceInfoIfMissingFromForTree(node1);
      Node.newString(53, "call");
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      Node node0 = Node.newString(113, ".Vs}t3[Q#d%s7zZ6Xr", 113, 113);
      Node node1 = new Node(113, node0, node0, node0, node0, 4095, 4);
      node1.getAncestor(65);
      node0.setQuotedString();
      node0.toStringTree();
      node1.getLastSibling();
      node0.getBooleanProp(4);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      Node node0 = new Node(126);
      node0.addChildToFront(node0);
      // Undeclared exception!
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = new Node(42, node0);
      Node node2 = node0.srcrefTree(node1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node3 = Node.newString("StringNode: str is null", 3470, 1);
      node1.replaceChild(node0, node3);
      node2.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      Node node0 = new Node(36, 147, 2133);
      Node node1 = new Node(120, node0, node0, node0, node0, 39, 147);
      node1.srcrefTree(node0);
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      Node node0 = Node.newNumber((double) 8388608);
      node0.isAdd();
      Node node1 = new Node(4, node0, node0, 42, 38);
      node1.isReturn();
      node1.isGetterDef();
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      Node node0 = Node.newNumber((-1836.3));
      Node node1 = new Node(47, node0, node0, node0, node0, 8, 125);
      Node node2 = node1.srcrefTree(node0);
      node2.isBlock();
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      node0.setLineno(117);
      Node node1 = new Node(57, node0, node0, node0, node0, 46, 88);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = jSTypeRegistry1.createTemplateType((String) null);
      jSTypeArray0[0] = (JSType) templateType0;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("yo4}B'0COHs2ST>hH.", node0, jSTypeArray0[0]);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      JSType jSType0 = enumElementType1.findPropertyType("aeZ4XW");
      jSTypeArray0[1] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, node0);
      jSTypeArray0[2] = (JSType) functionType0;
      jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        node2.toStringTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      Node node0 = new Node(152, 152, 152);
      Node node1 = node0.copyInformationFrom(node0);
      node1.checkTreeEqualsImpl(node0);
      // Undeclared exception!
      try { 
        node0.replaceChild(node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      Node node0 = Node.newString("'");
      Node node1 = new Node(0, node0);
      node0.isReturn();
      node0.mayMutateGlobalStateOrThrow();
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.isTrue();
      node0.mayMutateGlobalStateOrThrow();
      Node.newNumber((double) 57, 2614, 42);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      Node node0 = new Node((-514), 149, (-514));
      Node node1 = Node.newString(16, "eF6]dC8Ev&");
      node1.mayMutateArguments();
      node1.putProp(1385, "eF6]dC8Ev&");
      node0.wasEmptyNode();
      Node node2 = new Node(77);
      node2.addChildToFront(node1);
      node2.getQualifiedName();
      Node node3 = new Node((-2502), node2);
      node3.isIf();
      node1.isGetElem();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node2.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      Node node0 = new Node(132);
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      Node node0 = new Node(85);
      node0.getIntProp(85);
      Node node1 = Node.newNumber((double) 1);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.mayMutateArguments();
      InputId inputId0 = new InputId("[X 0P=P4J!C");
      node0.putProp(39, inputId0);
      // Undeclared exception!
      try { 
        node0.wasEmptyNode();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$ObjectPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      Node node0 = new Node(35, (-2825), 35);
      Node node1 = new Node(117, node0, node0, node0, 4410, 147);
      Node node2 = node0.useSourceInfoFrom(node1);
      node1.setSourceFileForTesting("`:]l!OyWD+!_");
      node0.isEquivalentToShallow(node2);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      Node node0 = new Node(152);
      Node node1 = new Node(52, 53, 2);
      node0.isFalse();
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      Node node1 = new Node((-2114), node0, node0, node0, node0, 36, 52);
      node0.copyInformationFrom(node1);
      node0.srcrefTree(node1);
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      Node node0 = new Node(103, 950, 44);
      Node node1 = new Node(103, node0, node0, node0, node0, 49, 47);
      node0.mayMutateArguments();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Fe%Xc");
      node0.cloneNode();
      node1.putProp(392, node0);
      node1.wasEmptyNode();
      Node node2 = new Node(4095);
      // Undeclared exception!
      try { 
        node1.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      Node node0 = Node.newString(100, "");
      Node node1 = new Node(102);
      node1.isQualifiedName();
      node0.isHook();
      node0.isIf();
      Node node2 = node1.copyInformationFrom(node0);
      node2.getJSType();
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      Node node0 = new Node(111, 111, 111);
      Node node1 = new Node((-2114), node0, node0, node0, node0, 36, 52);
      node0.srcrefTree(node1);
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      Node node0 = new Node(42);
      Node node1 = new Node(56, node0, 2, 15);
      node1.isWith();
      Node node2 = new Node(1, node1, node1);
      node1.checkTreeEqualsImpl(node2);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node2);
      // Undeclared exception!
      try { 
        node3.addChildBefore(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      Node node1 = new Node(2040, node0);
      node0.useSourceInfoFrom(node1);
      node1.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.isQualifiedName();
      node0.setCharno(8);
      node0.isGetterDef();
      node0.isDec();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      Node node0 = new Node(85);
      Node node1 = new Node(85, node0, node0, node0, 49, 39);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node1.setSourceEncodedPosition(36);
      node1.isAssign();
      node1.getChildAtIndex((-4394));
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      Node node1 = new Node(16);
      Node node2 = new Node(49, node0, node0, 4194304, 54);
      Node node3 = new Node(2575, node2, node1, node1);
      node0.isGetElem();
      node0.useSourceInfoIfMissingFromForTree(node1);
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node0, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      Node node0 = Node.newNumber((-641.732494738));
      node0.setType(32);
      node0.isNew();
      Node node1 = new Node(37, node0, node0, node0, node0);
      Node node2 = Node.newString(85, "2Q_~");
      Node node3 = new Node(30, node1, node2, 56, (-1429));
      node0.addChildrenToFront(node3);
      node0.getQualifiedName();
      node0.isBreak();
      node0.removeChildren();
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      Node node0 = Node.newString(36, "\n\nTree2:\n");
      Node node1 = new Node(39);
      Node node2 = new Node(51, node1, node0, node0, 42, (-1728));
      node1.isFunction();
      node1.useSourceInfoIfMissingFrom(node2);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      Node node0 = new Node(117, 15, (-1086));
      Node node1 = new Node(53, node0, node0, node0, node0, (-76), 50);
      node0.srcrefTree(node1);
      node0.isBlock();
      node1.isCase();
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      Node node0 = new Node(113, 117, 47);
      node0.isLabelName();
      Node node1 = new Node(51, node0, node0, 117, 16);
      Node node2 = Node.newNumber((double) 51);
      Node node3 = new Node(52, node2, node2, node2);
      node0.isGetElem();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = jSTypeRegistry1.createTemplateType("Object#Key");
      jSTypeArray0[0] = (JSType) templateType0;
      Node node4 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node3.useSourceInfoIfMissingFromForTree(node4);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      Node node0 = new Node(120);
      node0.isWith();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = node0.getLastSibling();
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) null);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeArray0[2] = (JSType) objectType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.toStringTree();
      Node node1 = node0.getLastSibling();
      node1.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      Node node0 = new Node(42);
      Node node1 = new Node(56, node0, 2, 15);
      Node node2 = node1.cloneTree();
      node2.isWith();
      Node node3 = new Node(1, node1, node2);
      node2.checkTreeEqualsImpl(node3);
      node1.isObjectLit();
      node2.removeChildren();
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      Node node0 = Node.newNumber((double) 85);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = new Node(85, node0, node0, node0, 49, 39);
      node0.isDo();
      node0.getIntProp(115);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node_SideEffectFlags0.setMutatesArguments();
      node1.cloneTree();
      node1.setSourceEncodedPosition(36);
      node1.isAssign();
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      node0.setLength(155);
      node0.getLength();
      node0.isLabelName();
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      Node node0 = new Node(13);
      node0.isEquivalentTo(node0, true, true, false);
      ArrayList<Node> arrayList0 = new ArrayList<Node>(57);
      node0.getAncestors();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.valueOf();
      node0.isDelProp();
      Node node1 = Node.newNumber((double) 50, 2443, 0);
      node0.addChildToBack(node1);
      node1.isQuotedString();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      Node node1 = new Node((-2562), node0, node0, node0, 47, 154);
      node0.srcrefTree(node1);
      Node node2 = null;
      try {
        node2 = new Node(348, node0, node0, node0, 37, 2249);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      Node node0 = new Node(42);
      Node node1 = Node.newString("/-xAO~");
      Node node2 = node0.useSourceInfoFrom(node1);
      node0.setSourceFileForTesting("opt_arg");
      node0.isOnlyModifiesArgumentsCall();
      node0.isFunction();
      node2.addChildToBack(node0);
      node1.children();
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      Node node1 = new Node(154, node0, node0, node0, node0, (-1353), 51);
      node0.isNE();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getModifies();
      node1.setDirectives(set0);
      node1.isQualifiedName();
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      Node node0 = new Node(154, 155, 172);
      node0.isSetterDef();
      Node node1 = Node.newString(43, "JF(]IB[{?");
      node0.srcref(node1);
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      Node node0 = new Node(124);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      Node node0 = new Node(113, 117, 47);
      node0.setWasEmptyNode(true);
      node0.isLabelName();
      node0.isCatch();
      try { 
        node0.setDouble(0.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // WHILE 117 [empty_block: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      Node node0 = new Node(47, 47, 47);
      node0.setWasEmptyNode(true);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      Node node0 = new Node(113, 117, 47);
      node0.isLabelName();
      node0.isCatch();
      Node node1 = new Node(36, node0, node0, node0, node0, 4095, 48);
      Node node2 = node0.copyInformationFrom(node1);
      // Undeclared exception!
      try { 
        node0.replaceChild(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      Node node0 = new Node(42);
      Node node1 = new Node(56, node0, 2, 15);
      Node node2 = node1.cloneTree();
      node2.isWith();
      node0.isOnlyModifiesArgumentsCall();
      Node node3 = new Node(1, node1, node2);
      node2.checkTreeEqualsImpl(node3);
      node2.isObjectLit();
      node3.getChildBefore(node2);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      Node node0 = new Node(51);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(52, nodeArray0, 12, 57);
      node1.isQualifiedName();
      node0.isFunction();
      node0.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "10dd_SxX");
      Node node0 = new Node(41, 1948, 308);
      node0.getJSType();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)41;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = new Node(51);
      Node node1 = new Node(1312);
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      Node node0 = new Node(4, 4, 4);
      Node node1 = new Node(2, node0, node0, node0, node0, 111, (-1040));
      Node node2 = node0.srcrefTree(node1);
      node2.isBlock();
      Node.newNumber((double) 51, 54, 33);
      node1.isEmpty();
      node2.getBooleanProp(1);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      Node node1 = new Node(2, node0, node0, node0, node0);
      node0.srcrefTree(node1);
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      Node node0 = new Node(31);
      Node node1 = new Node(12, node0, 49, 2048);
      Node node2 = node0.cloneTree();
      Node node3 = new Node(1);
      node3.isWith();
      Node node4 = null;
      try {
        node4 = new Node(1, node0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      Node node0 = new Node(133);
      Node node1 = Node.newString(29, "AzOyB");
      Node node2 = new Node(86, node0, node1, node0, node0, 29, 119);
      Node node3 = node2.srcrefTree(node0);
      node3.isBlock();
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      Node node0 = new Node(53, 53, 53);
      Node node1 = new Node(26, node0, node0, node0, node0, 92, 1);
      node1.srcrefTree(node0);
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      Node node0 = new Node(155);
      Node node1 = Node.newString((-1921), "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList");
      Node node2 = node0.useSourceInfoFrom(node1);
      node1.setSourceFileForTesting("com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList");
      Node node3 = new Node(94, node1, node2, node0, (-975), 31);
      node3.isEquivalentToShallow(node1);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      Node node0 = new Node(42);
      node0.setChangeTime(42);
      Node node1 = new Node((-31), node0, node0);
      node1.checkTreeTypeAwareEqualsImpl(node1);
      node1.isObjectLit();
      node1.isWith();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      Node node0 = new Node(125);
      node0.cloneNode();
      node0.setChangeTime(31);
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      Node node0 = new Node(102);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.setJSDocInfo(jSDocInfo0);
      node0.isQualifiedName();
      node0.isFunction();
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      Node node0 = Node.newString("V>GM^T2\"\"H");
      node0.isQualifiedName();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(4095, node0, node0, node0, node0, 1, 36);
      Node node2 = Node.newString(4095, "V>GM^T2\"\"H");
      Node node3 = new Node(36, node2, node2, 124, 16);
      Node node4 = new Node(30, node3, node1, node3);
      node4.removeChildren();
      node0.isAssignAdd();
      node3.isBreak();
      node3.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1842), nodeArray0);
      Node node1 = new Node(2572, node0, node0);
      node0.addChildToFront(node1);
      node0.isOptionalArg();
      node0.isSwitch();
      Node node2 = new Node(53);
      node0.clonePropsFrom(node2);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      Node node0 = new Node(129);
      Node node1 = new Node(30, node0, node0, node0, node0, 57, 86);
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.setSourceFileForTesting("`:]l!OyWD+!_");
      node1.isEquivalentToShallow(node2);
      node2.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      Node node0 = Node.newString(40, "");
      Node node1 = new Node(40, node0, node0, 2, (-471));
      node1.toStringTree();
      node1.isQualifiedName();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      Node node1 = new Node((-2114), node0, node0, node0, node0, 36, 52);
      Node node2 = node0.srcrefTree(node1);
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node1);
      node0.isBlock();
      node3.getFirstChild();
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      Node node0 = new Node(155);
      Node node1 = new Node(42, node0, node0, node0, 397, 0);
      Node node2 = node1.copyInformationFrom(node0);
      // Undeclared exception!
      try { 
        node0.replaceChild(node2, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString((-1285), "?r9?DAS", 26, (-1285));
      node0.removeFirstChild();
      Node node1 = new Node(26, node0, 2025, 2);
      node1.copyInformationFrom(node0);
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      Node node0 = Node.newString(113, "");
      Node node1 = new Node(407, node0, node0, node0, node0, 117, 38);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node1.getQualifiedName();
      Node node3 = node1.useSourceInfoFrom(node2);
      node3.setSourceFileForTesting("Object#Element");
      Node node4 = new Node(147, node2);
      node4.addChildToFront(node3);
      node4.getChildBefore(node2);
      node0.isEquivalentToShallow(node4);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(312, nodeArray0, 312, 312);
      node0.children();
      Node node1 = new Node(50, node0, node0, node0, 312, 57);
      node0.isHook();
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      Node node0 = new Node(33, 33, 52);
      Node node1 = new Node(31, node0, node0, node0, node0, 49, (-3133));
      node0.useSourceInfoFromForTree(node1);
      node0.getStaticSourceFile();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      Node node0 = Node.newString((-1527), "Y_L(@");
      Node node1 = new Node(50, node0, node0);
      Node node2 = new Node(55, 0, 4095);
      node0.setIsSyntheticBlock(false);
      Node node3 = new Node(36, node1, node2);
      Node node4 = Node.newString(16, "direct_eval", 48, 3599);
      node2.addChildrenToFront(node4);
      node3.removeChildAfter(node1);
      node0.getProp(47);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = new Node(122);
      node0.isWith();
      node0.mayMutateGlobalStateOrThrow();
      node0.mayMutateArguments();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
      node0.isEmpty();
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString(31, "?r9?DAS", 26, 31);
      Node node1 = new Node(26, node0, 2048, 2);
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      Node node0 = new Node(127);
      node0.setLineno(127);
      Node node1 = new Node(57, node0, node0, node0, node0, 1902, 88);
      node1.isArrayLit();
      Node node2 = node1.getChildBefore((Node) null);
      node0.getStaticSourceFile();
      node2.getProp(49);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      Node node0 = new Node(129);
      Node node1 = new Node(30, node0, node0, node0, node0, 57, 86);
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.copyInformationFrom(node1);
      // Undeclared exception!
      try { 
        node1.replaceChild(node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      Node node0 = new Node(8232, 126, 54);
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(47, node0, node0, node0, node0, 38, 572);
      node0.mayMutateArguments();
      node1.cloneNode();
      Node node2 = Node.newNumber(1.0);
      node2.putProp(1657, node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node2.wasEmptyNode();
      Node.newNumber((-1837.3582422974519));
      node2.setIsSyntheticBlock(false);
      node2.setLength(8);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 8232
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      Node node0 = new Node(133);
      Node node1 = Node.newString(29, "t:AzOyB:");
      Node node2 = new Node((-3813), node0, node0, node1, 57, 49);
      node2.getBooleanProp(30);
      node2.useSourceInfoIfMissingFromForTree(node1);
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      Node node0 = new Node(110);
      Node node1 = new Node(15, node0, node0, node0, node0, 40, 154);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node2 = new Node(4095, nodeArray0);
      Node node3 = node0.useSourceInfoFrom(node2);
      node1.setSourceFileForTesting("xD5;rs,GBaj5.cX");
      node3.isEquivalentToShallow(node2);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      Node node0 = new Node(152);
      Node node1 = new Node(0, node0, node0);
      Object object0 = new Object();
      node0.putProp(2, object0);
      node1.mayMutateArguments();
      Node node2 = new Node(2, node1);
      node1.getSideEffectFlags();
      node0.isGetterDef();
      node0.isLabel();
      node1.copyInformationFrom(node0);
      node2.isNot();
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      Node node0 = new Node(152);
      Node node1 = new Node(0, node0, node0);
      node1.putBooleanProp(147, true);
      Node node2 = new Node(2, node1);
      node1.getSideEffectFlags();
      node2.setType(51);
      node1.checkTreeEqualsImpl(node2);
      node1.srcrefTree(node2);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      Node node0 = Node.newNumber(0.6392570754945102);
      Node node1 = new Node(51, node0);
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      Node node0 = Node.newString("vIUe_na97");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(119, (-92), 51);
      node0.isLabelName();
      node0.mayMutateGlobalStateOrThrow();
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      Node node0 = new Node(155, 302, 155);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      node0.setJSType(templateType0);
      node0.setLineno(302);
      node0.isSetterDef();
      Node node1 = Node.newString("]&:sF8x0x{~aC", 0, 50);
      node0.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(38, node0, node0, node0, node0, 51, 37);
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      Node node2 = new Node(39, node1, 2, 305);
      // Undeclared exception!
      try { 
        node2.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      Node node0 = new Node(152);
      Node node1 = new Node(0, node0, node0);
      Node node2 = new Node(2, node1);
      node0.copyInformationFromForTree(node2);
      node2.removeChildren();
      node1.getSideEffectFlags();
      node0.isGetterDef();
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      node0.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
      Node node1 = new Node(1674, node0, 0, (-536870912));
      node1.isAdd();
      node1.getProp(39);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Node node0 = new Node(120);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte)49;
      byteArray0[8] = (byte) (-101);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = new Node(120, node0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node1.setDirectives(linkedHashSet0);
      node1.getInputId();
      Node node2 = node1.cloneNode();
      node1.getChangeTime();
      node0.isArrayLit();
      node2.getStaticSourceFile();
      node0.setInputId((InputId) null);
      node1.getSourceFileName();
      node2.isAnd();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1175));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got CATCH
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      Node node0 = Node.newString(100, "");
      Node node1 = new Node(102);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node2.getLength();
      node0.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      Node node0 = new Node(116);
      int int0 = Node.SIDE_EFFECTS_ALL;
      node0.isThrow();
      node0.isCatch();
      node0.cloneTree();
      Node.newNumber((double) 47);
      node0.isGetProp();
      node0.hasChildren();
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      Node node0 = new Node(49, 49, 49);
      node0.isThrow();
      Charset.defaultCharset();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // THROW 49 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node((-2723));
      nodeArray0[0] = node0;
      Node node1 = new Node(112, nodeArray0, (-1094), 4095);
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Node node1 = new Node(113, node0, node0, node0, node0, 0, 0);
      node0.isBreak();
      Node node2 = node0.srcref(node1);
      node0.getJSDocInfo();
      node2.isUnscopedQualifiedName();
      node0.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      Node node0 = new Node(13, 13, 116);
      Node node1 = new Node(90, node0, node0, node0);
      Node node2 = new Node(38, node1);
      node0.clonePropsFrom(node2);
      node0.useSourceInfoIfMissingFrom(node1);
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      Node node0 = new Node(122);
      Node node1 = Node.newString(1709, "Number node not created with Node.newNumber", 57, 47);
      Node node2 = node0.useSourceInfoFrom(node1);
      node0.setSourceFileForTesting("`:]l!OyWD+!_");
      node2.isEquivalentToShallow(node1);
      node1.isFunction();
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(38, node0, node0, node0, node0, 51, 37);
      node1.isFunction();
      node0.removeProp(49);
      // Undeclared exception!
      try { 
        node1.getQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 51 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      Node.newString("{{X(");
      Node node0 = Node.newString(38, "{{X(");
      node0.isDebugger();
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      Node node0 = new Node(102);
      node0.isQualifiedName();
      node0.cloneNode();
      node0.isEquivalentToTyped(node0);
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(103, 103, (-1192));
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      node0.toString(true, true, true);
      node0.isLabel();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[4];
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
      jSTypeArray0[0] = (JSType) templateType0;
      Node node0 = Node.newString(32, "Object#Element");
      ObjectType objectType0 = ObjectType.cast(templateType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node0, objectType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      jSTypeArray0[1] = (JSType) enumElementType1;
      JSType.toMaybeTemplateType((JSType) enumType0);
      jSTypeArray0[2] = (JSType) null;
      Iterator<JSType> iterator0 = (Iterator<JSType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) enumElementType0, immutableList0);
      TemplateTypeMap templateTypeMap0 = templatizedType0.getTemplateTypeMap();
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, templateTypeMap0);
      JSType jSType0 = templateTypeMapReplacer0.caseBooleanType();
      jSTypeArray0[3] = jSType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node2 = Node.newString("Named type with empty name component", (-2682), 110);
      Node node3 = new Node(110, node1, node1, node2, node0, 55, 8388608);
      node3.getFirstChild();
      node1.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isGetterDef();
      Node node1 = new Node(38, node0, node0, node0, node0, 51, 37);
      node1.removeChild(node0);
      node1.isFunction();
      node0.removeProp(49);
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeRegistry0.getTypesWithProperty("Multiple entries with same ");
      Node node0 = Node.newString("Object#Element");
      node0.setQuotedString();
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      Node node0 = Node.newString("dC");
      node0.setQuotedString();
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(312, nodeArray0, 312, (-3247));
      Node node1 = new Node(940, nodeArray0);
      node0.useSourceInfoIfMissingFrom(node1);
      Node node2 = new Node(50, node0, node0, node0, (-3247), 57);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node((-2306));
      nodeArray0[0] = node0;
      Node node1 = new Node((-2306), nodeArray0);
      node1.isCatch();
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      Node node0 = Node.newNumber((double) 42);
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(51, node0, node0, 98, (-4177));
      node0.isEquivalentToTyped(node1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.isComma();
      node0.isGetterDef();
      int int0 = Node.INCRDECR_PROP;
      node1.isNE();
      node0.getStaticSourceFile();
      node0.isLabel();
      node1.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      Node node0 = new Node(37);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("up)g", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.setLineno(126);
      node0.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.isQualifiedName();
      node0.isEquivalentToTyped(node0);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      Node node0 = new Node(152);
      Node node1 = new Node(54, node0, 42, 56);
      Node node2 = new Node(2, node1);
      node1.getSideEffectFlags();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.addChildrenToBack(node2);
      node1.isTrue();
      node1.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      Node node0 = Node.newString("Fe%Xc");
      Node node1 = new Node(39);
      node0.addChildrenToBack(node1);
      node0.isTrue();
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      Node node0 = new Node(37);
      Node node1 = new Node((-2814), node0, node0, node0, node0, 53, 30);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.addSuppression("IHrA#Xtg=dI!cY(`'");
      node0.setLineno(126);
      node0.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = new Node((-2306));
      node0.isEquivalentTo(node1);
      Node node2 = new Node(56, node0, node0);
      node0.useSourceInfoIfMissingFrom(node2);
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      Node node0 = new Node(42);
      node0.isOnlyModifiesThisCall();
      node0.setChangeTime(42);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      simpleErrorReporter0.error("Fe%Xc", "Fe%Xc", (-1797), (-1797));
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.useSourceInfoFromForTree(node1);
      node0.setIsSyntheticBlock(false);
      Node node2 = new Node(47);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, jSTypeArray0);
      Set<String> set0 = functionType0.getOwnPropertyNames();
      node2.setDirectives(set0);
      node0.addChildToFront(node2);
      node0.isDelProp();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      Node node1 = new Node(0, node0, node0, node0, node0, 38, 2);
      node0.getSourceFileName();
      node1.mayMutateArguments();
      node1.isLabelName();
      node1.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      Node node0 = Node.newString((-1527), "Y_L(@");
      Node node1 = new Node(36, node0);
      Node node2 = new Node(55, 0, 4095);
      node2.useSourceInfoIfMissingFrom(node1);
      Node node3 = new Node(36, node1, node2);
      node3.removeChildAfter(node1);
      node0.isEquivalentTo(node1);
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      Node node0 = Node.newNumber((-1837.358));
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(37, node0);
      node1.useSourceInfoIfMissingFrom(node0);
      node0.setCharno(8);
      node1.checkTreeTypeAwareEqualsImpl(node1);
      node0.isFor();
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      Node node0 = new Node(132);
      node0.isOnlyModifiesThisCall();
      node0.setChangeTime(1073741824);
      node0.setIsSyntheticBlock(true);
      Node node1 = new Node(64, node0, 26, 32);
      Node node2 = new Node(119, node1, node1, node1);
      node1.setCharno(2);
      node2.toStringTree();
      node2.isThrow();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      Node node0 = Node.newString("d&~T^Cib3");
      Node node1 = new Node(15);
      Node node2 = new Node(33, node0, node1, node1, 4095, 2);
      node2.getChildBefore(node1);
      Node node3 = null;
      try {
        node3 = new Node((-968), node1, node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      Node node1 = new Node((-2114), node0, node0, node0, node0, 36, 52);
      node0.cloneNode();
      node0.getSourceOffset();
      Node node2 = node0.srcrefTree(node1);
      node2.detachFromParent();
      node0.isBlock();
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      Node node0 = new Node(21);
      node0.isWith();
      node0.isCatch();
      node0.cloneNode();
      node0.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      Node node0 = new Node(54);
      Node node1 = Node.newNumber((-1266.1446402));
      Node node2 = node1.useSourceInfoFrom(node0);
      Node node3 = Node.newString(4, "qJ9TYS1^*");
      Node node4 = new Node(39, node2, node3, 4095, 42);
      // Undeclared exception!
      try { 
        node4.getChildBefore(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      Node node0 = Node.newString("<invalid>");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(38, node0, node0, node0, node0);
      node1.addChildrenAfter(node1, node0);
      Node node2 = new Node(29);
      node1.copyInformationFrom(node0);
      node1.setSourceFileForTesting("null");
      node2.isNot();
      node2.getParent();
      node1.getBooleanProp(46);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(102, 102, (-1192));
      node0.setVarArgs(false);
      node0.toString(false, true, true);
      node0.isInc();
      Node node1 = Node.newString("INC", 40, 31);
      node0.srcrefTree(node1);
      Node node2 = new Node((-897), node0, 16, 53);
      // Undeclared exception!
      try { 
        node2.addChildBefore(node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      Node node0 = Node.newString((-1527), "Y_L(@");
      Node node1 = new Node(36, node0);
      Node node2 = new Node(55, 0, 4095);
      Node node3 = new Node(36, node1, node2);
      node3.removeChildAfter(node1);
      node0.isEquivalentTo(node1);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Key", "Object#Element", (-1940), 49);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      linkedList0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = Node.newString("Object#Element", 15, (-3281));
      node1.getAncestor(2382);
      node1.getSourceFileName();
      Node node2 = new Node((-3344), node0, node1);
      node2.useSourceInfoFromForTree(node0);
      // Undeclared exception!
      try { 
        node2.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      Node node0 = new Node(42);
      Node node1 = new Node(39, node0, node0);
      node0.clonePropsFrom(node1);
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      Node node0 = new Node(86);
      Node node1 = Node.newNumber((double) 30);
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      Node node1 = new Node(30, node0, node0, node0, 37, 43);
      node0.isDefaultCase();
      Node node2 = node1.srcrefTree(node0);
      // Undeclared exception!
      try { 
        node2.addChildBefore(node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      Node node0 = Node.newString("<invalid>");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(38, node0, node0, node0, node0);
      Node node2 = Node.newString("Multiple entries with same ");
      node1.addChildrenAfter(node2, node0);
      Node node3 = new Node(29);
      node1.addChildrenToFront(node3);
      node1.setSourceFileForTesting("null");
      node0.getString();
      node3.isNot();
      node3.isInc();
      node1.cloneTree();
      node3.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      Node node1 = new Node(32, node0, node0);
      Node node2 = node1.cloneNode();
      node1.isDefaultCase();
      node1.srcrefTree(node0);
      // Undeclared exception!
      try { 
        node2.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      Node node0 = Node.newNumber((-2241.163101542367), 734, 734);
      InputId inputId0 = new InputId("Jag[aDt*sDP29qY@B:]");
      node0.setInputId(inputId0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -2241.163101542367 734 [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      Node node0 = Node.newString("");
      InputId inputId0 = new InputId("");
      node0.setInputId(inputId0);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      Node node0 = new Node(152);
      Node node1 = Node.newNumber((double) 1, 37, 50);
      node1.setStaticSourceFile((StaticSourceFile) null);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node0.isEquivalentToShallow(node1);
      node1.isDec();
      node0.useSourceInfoIfMissingFrom(node1);
      node0.hasChildren();
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      Node node0 = new Node(26);
      Node node1 = new Node(26, node0, node0, node0);
      Node node2 = Node.newNumber((double) 48);
      Node node3 = node1.useSourceInfoFrom(node2);
      Node.newString(52, "#^fPI'");
      node0.setIsSyntheticBlock(false);
      Node node4 = new Node(54, node2, node2, node2);
      node3.toStringTree();
      node2.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(312, nodeArray0, 312, (-3247));
      Node node1 = new Node((-2243), nodeArray0);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = new Node(50, node0, node0, node0, (-3247), 57);
      node2.isThrow();
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(86);
      nodeArray0[0] = node0;
      Node node1 = new Node((-2326), nodeArray0);
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      Node node0 = Node.newString("-l1K<FGFR7v");
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newNumber((double) 42);
      Node node2 = new Node(30);
      Node node3 = node2.useSourceInfoFrom(node0);
      Node.newString(147, "-l1K<FGFR7v");
      Node node4 = new Node(1346, node3, node3, (-2739), 943);
      Node node5 = new Node(831, node4, 57, 12);
      node5.getChildBefore(node4);
      Node node6 = new Node((-772), node5, node0, node1);
      node6.addSuppression("-l1K<FGFR7v");
      Node node7 = Node.newNumber((double) 39, 32, 8);
      node3.isVar();
      node7.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      Node node0 = Node.newNumber((-623.7602175140374));
      Node node1 = new Node(37);
      Node node2 = node1.copyInformationFromForTree(node0);
      node0.getIntProp(960);
      node1.isFunction();
      node0.isBreak();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("", node2, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      Node node0 = new Node(122);
      node0.getSideEffectFlags();
      node0.isWith();
      node0.isCatch();
      Node node1 = Node.newString(38, "Fe%Xc");
      node0.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(86);
      nodeArray0[0] = node0;
      Node node1 = new Node((-2326), nodeArray0);
      node1.isCatch();
      node1.getLastSibling();
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(38, "Object#Element");
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      Node node0 = Node.newNumber((-1836.3));
      node0.isUnscopedQualifiedName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = new Node(37, node0);
      node0.putProp(0, node1);
      node0.setCharno(8);
      node1.srcrefTree(node0);
      node1.checkTreeTypeAwareEqualsImpl(node1);
      node1.isEquivalentTo(node0);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>(2657, 385);
      LinkedHashSet<JSType> linkedHashSet1 = new LinkedHashSet<JSType>(linkedHashSet0);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) linkedHashSet1);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node1 = new Node(385, node0, node0, node0, 48, 173);
      int int0 = Node.DECR_FLAG;
      node0.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1290));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.setSourceEncodedPosition(53);
      node1.getLastChild();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      node0.isLabelName();
      Node node1 = Node.newString(910, "second new child has existing sibling");
      node0.copyInformationFrom(node1);
      node0.isWith();
      node0.isNot();
      node0.isBreak();
      node0.isTrue();
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      jSTypeRegistry0.setLastGeneration(false);
      jSTypeRegistry0.createObjectType((ObjectType) null);
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node(98, node0, node0, node0, node0, 85, 1863);
      Node node2 = node0.cloneNode();
      node2.isDefaultCase();
      node1.srcrefTree(node2);
      node2.isGetterDef();
      node2.isExprResult();
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      Node node0 = Node.newNumber((double) 100);
      node0.setType(100);
      Node node1 = new Node(4095, 1, 108);
      node0.isOr();
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      Node node0 = new Node(122, 102, 102);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vIUe_na97");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vIUe_na97");
      node0.setOptionalArg(true);
      node0.setVarArgs(true);
      node0.isQuotedString();
      Node node1 = node0.cloneTree();
      node0.isGetElem();
      node1.getJsDocBuilderForNode();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.getSourceOffset();
      Node node2 = node0.getLastSibling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.setLength(4095);
      node1.checkTreeEquals(node0);
      node2.checkTreeEquals(node0);
      node1.isSyntheticBlock();
      node2.cloneNode();
      node2.getQualifiedName();
      // Undeclared exception!
      try { 
        node2.getChildAtIndex(5760);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      Node node0 = Node.newString("V>GM^T2\"\"H", (-1527), 2068);
      Node node1 = Node.newNumber((-1.0));
      Node node2 = new Node(2729, node0, node0, node0, node1, 32, 50);
      node2.useSourceInfoFromForTree(node0);
      node1.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      Node node0 = new Node(47, 47, 47);
      node0.setWasEmptyNode(true);
      node0.isLabelName();
      node0.isCatch();
      node0.toStringTree();
      node0.isOnlyModifiesThisCall();
      node0.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) functionType0);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) functionType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.toStringTree();
      Node node1 = Node.newNumber((double) 1);
      Node node2 = new Node(47, node0, node1, node1, node0, 30, 31);
      node2.isLabelName();
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      Node node0 = new Node(117);
      node0.setChangeTime(117);
      node0.toStringTree();
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      Node node0 = Node.newString("%By4nh;(CP<8jU#O)J");
      Node node1 = Node.newString(120, "U%AD|s3Zkv");
      node0.isCatch();
      node0.isUnscopedQualifiedName();
      node1.isCatch();
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      Node node0 = new Node(44);
      Node node1 = new Node(8, node0, 40, (-899));
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = node1.removeChildren();
      node1.getSideEffectFlags();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        node2.replaceChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      Node.mergeLineCharNo(203, 203);
      Node node0 = new Node(203);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(unionType0).getAlternates();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(751619276, nodeArray0);
      node0.useSourceInfoFrom(node1);
      // Undeclared exception!
      try { 
        modificationVisitor0.caseUnionType(unionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ModificationVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      Node node1 = new Node(36, node0, node0, node0, 2, 40);
      Node node2 = node1.useSourceInfoFrom(node0);
      // Undeclared exception!
      try { 
        node2.getChildBefore(node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      Node node0 = Node.newString("V>GM^T2\"\"H");
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newNumber((double) 12);
      Node node2 = node0.useSourceInfoFrom(node1);
      Node node3 = Node.newString(4095, "V>GM^T2\"\"H");
      Node node4 = new Node(36, node3, node3, 124, 16);
      // Undeclared exception!
      try { 
        node4.getChildBefore(node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      Node node0 = new Node(42);
      node0.isOnlyModifiesThisCall();
      node0.setChangeTime(42);
      node0.setIsSyntheticBlock(false);
      node0.toStringTree();
      node0.getQualifiedName();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      Node node0 = Node.newNumber((-1959.447855));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-3841));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node1 = new Node(1568, node0, node0, node0);
      node1.isObjectLit();
      Node node2 = new Node(47, node1, 1102, 30);
      node2.getParent();
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      node0.getProp(174);
      Node node1 = Node.newString("LnqLaou,jV$gAsSj%+", 47, 2177);
      node1.isContinue();
      node0.isBlock();
      node0.getLastSibling();
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      Node node0 = new Node(12, 55, 31);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node(39, node0, node0, node0, node0, 43, (-871));
      Node node2 = node0.cloneNode();
      node1.srcrefTree(node0);
      node2.isBlock();
      node2.getProp(4);
      node0.isLabelName();
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(312, nodeArray0, 312, (-3247));
      node0.children();
      Node node1 = new Node(50, node0, node0, node0, (-3247), 57);
      node0.isHook();
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      Node node0 = Node.newString((-1527), "3Eut5cS<");
      Node node1 = new Node(47, node0);
      node1.copyInformationFrom(node0);
      Node node2 = Node.newNumber((-0.6374121728617914));
      node2.isSetterDef();
      node0.removeProp(15);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      Node node0 = Node.newString("<invalid>");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(38, node0, node0, node0, node0);
      Node node2 = Node.newString("Multiple entries with same ");
      node1.addChildrenAfter(node2, node0);
      Node node3 = new Node(29);
      node1.addChildrenToFront(node3);
      node2.wasEmptyNode();
      node3.isFalse();
      node0.isVar();
      node1.isReturn();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Node node0 = new Node(155, 155, 155);
      int int0 = Node.IS_NAMESPACE;
      Node node1 = node0.cloneNode();
      node0.isCall();
      int int1 = Node.CHANGE_TIME;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags((-962));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got CAST
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      Node node0 = new Node(115);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = new Node(8, node0);
      node0.isCase();
      node1.mayMutateGlobalStateOrThrow();
      node1.isAdd();
      node1.isDec();
      node0.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      Node node0 = Node.newNumber((double) 85);
      Node node1 = new Node(85, node0, node0, node0, 51, 39);
      node1.getChangeTime();
      node0.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node1.useSourceInfoFromForTree(node0);
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node1.setSourceEncodedPosition((-433));
      node0.getLastChild();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      Node node0 = Node.newString(4195, "7t~]&/Cf@");
      node0.getJSDocInfo();
      node0.getChangeTime();
      // Undeclared exception!
      try { 
        node0.setString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      Node node0 = Node.newNumber((-1.092543406602708), 16777216, 104);
      Node node1 = new Node(16);
      node1.copyInformationFrom(node0);
      node1.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ImmutableList.copyOf((Collection<? extends JSType>) vector0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node0.isOr();
      node0.isCase();
      Node node1 = Node.newString("Object#Element", 56, 50);
      Node node2 = new Node(31, node0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isTry();
      node1.isQualifiedName();
      node2.isNew();
      node1.getIndexOfChild(node2);
      node2.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      Node node0 = Node.newString("<invalid>");
      Node node1 = new Node(36);
      Node node2 = Node.newString(36, "'ly*");
      Node node3 = new Node(47, node2, node1, node0, 124, 118);
      node0.isScript();
      node0.isNE();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      Node node0 = new Node(118, 118, 118);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1761);
      Node node1 = Node.newNumber((-1871.1607), 1632, 2);
      node0.getInputId();
      node0.isFor();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isEmpty();
      Node node2 = new Node(30, node0, node1);
      node1.addChildrenToBack(node2);
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      Node node0 = new Node(133);
      node0.setSourceEncodedPositionForTree(133);
      Node node1 = Node.newString(29, "t:AzOyB:");
      Node node2 = new Node((-3813), node0, node0, node1, 57, 49);
      node0.isScript();
      node2.isNE();
      node2.getParent();
      node2.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        node0.appendStringTree(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      Node node0 = new Node(152);
      Node node1 = new Node(49, node0, node0, node0, node0, 31, (-3188));
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node0);
      Charset.defaultCharset();
      ByteBuffer.allocateDirect(53);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      node0.setDirectives(treeSet0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isOr();
      Node node2 = node1.getLastChild();
      node2.isAssign();
      node1.cloneTree();
      try { 
        node2.setString("lFjg@GI\"},T$Sp");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DEBUGGER [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      Node node0 = new Node(122);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32);
      node0.isLabelName();
      Node node1 = new Node(42, node0, node0);
      node0.useSourceInfoIfMissingFrom(node1);
      node1.isExprResult();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      Node node0 = new Node(112);
      Node node1 = Node.newNumber((double) 52);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      Node node0 = Node.newString("");
      // Undeclared exception!
      try { 
        node0.addChildrenToBack((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      Node node0 = new Node(54);
      node0.isEquivalentTo(node0, true, true, true);
      Node node1 = Node.newString(117, "I$thKjz6");
      node1.setChangeTime(46);
      node1.setIsSyntheticBlock(false);
      Node node2 = new Node(30, node1, node1, node0);
      node1.toStringTree();
      node1.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(122);
      Node node1 = new Node(4095, node0, node0, node0, node0);
      node0.useSourceInfoIfMissingFromForTree(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32);
      node0.isLabelName();
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      Node node0 = new Node(42);
      node0.isOnlyModifiesThisCall();
      Node node1 = node0.cloneNode();
      node1.isOnlyModifiesArgumentsCall();
      node1.isNoSideEffectsCall();
      node0.isQualifiedName();
      node1.isHook();
      node0.children();
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(38, "Object#Element");
      node0.isCatch();
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      Node node0 = Node.newNumber((-644.0));
      node0.setType(38);
      Node node1 = new Node(53, node0, node0, 31, 49);
      node1.isFor();
      node1.isCatch();
      // Undeclared exception!
      try { 
        node0.isUnscopedQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      Node node0 = Node.newNumber((double) 85);
      Node node1 = new Node(85, node0, node0, node0, 37, 39);
      node1.getChangeTime();
      node1.getAncestors();
      int int0 = Node.ORIGINALNAME_PROP;
      Node node2 = node1.cloneNode();
      node0.isUnscopedQualifiedName();
      node1.copyInformationFromForTree(node2);
      node0.isReturn();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      Node node0 = Node.newNumber((-1836.3));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-348));
      Node node1 = Node.newNumber(56.0, 2, 43);
      node1.getInputId();
      node1.isOnlyModifiesThisCall();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.isTry();
      Node node2 = Node.newNumber((double) 15);
      Node node3 = new Node(1789, node1, node2);
      node1.addChildrenToBack(node3);
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      Node node0 = new Node(16, (-1939), (-1939));
      Node node1 = new Node(4);
      node1.useSourceInfoIfMissingFrom(node0);
      node0.isIn();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // GT is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ImmutableList.copyOf((Collection<? extends JSType>) vector0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(1734, 116, (-1814));
      Node node1 = new Node(31, node0, node0, node0, 5760, 49);
      node1.isReturn();
      Node node2 = node1.srcrefTree(node0);
      node1.setCharno((-2451));
      node1.checkTreeEqualsImpl(node0);
      int int0 = 21;
      // Undeclared exception!
      try { 
        node1.addChildBefore(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 0, 0);
      Node node2 = node0.cloneNode();
      node1.isDefaultCase();
      Node node3 = node1.srcrefTree(node2);
      node1.addChildBefore(node2, node0);
      node1.isCall();
      node1.useSourceInfoFrom(node3);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      Node node0 = new Node(110);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = new Node(31, node0, node0, node0, 20, 394);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.setChangeTime(126);
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      Node node0 = Node.newString("V>M^T2\"H");
      Node node1 = new Node(113, node0, node0, node0, node0, 0, 43);
      node0.isString();
      node0.getSourceFileName();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      Node node0 = new Node(91, 91, 91);
      // Undeclared exception!
      try { 
        node0.isEquivalentToTyped((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isGetterDef();
      Node node1 = new Node(38, node0, node0, node0, node0, 51, 37);
      node0.isGetProp();
      node1.isExprResult();
      node0.getSourceFileName();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      Node node0 = new Node(152);
      node0.getJsDocBuilderForNode();
      node0.setSourceEncodedPositionForTree(152);
      int int0 = Node.SIDE_EFFECTS_FLAGS_MASK;
      node0.isDebugger();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getAncestor(318);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      Node node0 = Node.newString(42, "pX|]FETr+>x<X@E3");
      Node node1 = Node.newString("pX|]FETr+>x<X@E3", 31, 1545);
      node1.checkTreeEqualsImpl(node0);
      Node node2 = new Node(32);
      Node node3 = Node.newString(1, "");
      node2.useSourceInfoIfMissingFromForTree(node3);
      node3.addChildToFront(node0);
      node2.isDelProp();
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      Node node0 = new Node((-1721));
      node0.getChangeTime();
      Node node1 = new Node(12, node0, node0, node0);
      Node node2 = Node.newNumber(972.46042582721);
      Node node3 = node1.useSourceInfoFrom(node2);
      node3.cloneNode();
      Node node4 = new Node(37, node2);
      node3.isReturn();
      node4.setSideEffectFlags(39);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      Node node0 = new Node(115);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = node0.cloneTree();
      Node node2 = new Node(8, node1);
      node1.isCase();
      node1.isDo();
      node0.useSourceInfoFromForTree(node2);
      Node node3 = new Node((-2177), node2, node2, 105, 4);
      node3.isGetProp();
      node1.isExprResult();
      node1.getSourceFileName();
      Node node4 = new Node(649);
      node4.getParent();
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      Node node0 = new Node(122);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.isInstanceOf();
      node0.setLineno(2);
      node0.isDo();
      Node node1 = new Node(30, node0);
      Node.extractLineno(32);
      node0.isVar();
      node1.isCatch();
      node0.isUnscopedQualifiedName();
      node1.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      Node node0 = Node.newString("V>GM^T2\"\"H");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(50, node0, node0, node0, node0, 4, 56);
      node0.isGetElem();
      node1.isArrayLit();
      node0.setSourceFileForTesting("V>GM^T2\"\"H");
      node0.getString();
      node0.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      Node node0 = new Node(122);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32);
      Node node1 = Node.newNumber((double) 56, 115, 35);
      node0.cloneNode();
      Node node2 = new Node(51, node0);
      node0.isReturn();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      Node node0 = Node.newString("vIUe_na97");
      Node node1 = Node.newString(">Ge.;Xc.r", (-2682), 31);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node2 = new Node(132, node0, node0);
      node0.isEquivalentToShallow(node2);
      node1.isDec();
      node2.useSourceInfoIfMissingFrom(node0);
      node1.hasChildren();
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      Node node0 = new Node(155, 302, 155);
      Node node1 = Node.newNumber(1082.0);
      node0.useSourceInfoIfMissingFromForTree(node1);
      Node node2 = new Node(95, node0, node0, node0, node0);
      node0.isStringKey();
      node2.getNext();
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(42);
      Node node1 = Node.newNumber(2335.707804400473, 31, 115);
      node1.isEquivalentToTyped(node0);
      node0.copyInformationFromForTree(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isHook();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      Node node0 = Node.newNumber((-1836.3));
      node0.isUnscopedQualifiedName();
      Node node1 = Node.newString("pX|]FETr+>x<X@E3", 31, 1545);
      Node node2 = new Node(32);
      node0.addChildrenToFront(node1);
      Node node3 = Node.newString(31, "pX|]FETr+>x<X@E3", (-117), 2917);
      Node node4 = new Node(4095, node0, node3);
      node4.wasEmptyNode();
      node2.isQualifiedName();
      Node.newNumber((double) 39, 53, 4);
      node0.setDouble(53);
      node2.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      Node node0 = new Node(152);
      Node node1 = Node.newString("com.google.javascript.rhino.Node");
      node1.getJsDocBuilderForNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node3 = new Node(39, node2, node0, node1, node1, (-1587), 42);
      node1.cloneNode();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("V>GM^T2\"\"H");
      PrintWriter printWriter0 = mockPrintWriter0.printf("Object#Key", (Object[]) jSTypeArray0);
      node2.appendStringTree(printWriter0);
      node1.isDefaultCase();
      node2.srcrefTree(node1);
      node3.isDebugger();
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = new Node(31, node0, node0, node0, node0, 12, 4);
      node0.isExprResult();
      node0.getSourceFileName();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      Node node0 = Node.newNumber((-1836.3));
      node0.setVarArgs(true);
      node0.isUnscopedQualifiedName();
      Node node1 = Node.newString(42, "pX|]FETr+>x<X@E3");
      Node node2 = Node.newString("pX|]FETr+>x<X@E3", 31, 1545);
      node2.checkTreeEqualsImpl(node1);
      node2.checkTreeEquals(node0);
      Node node3 = new Node(32);
      node0.addChildrenToFront(node2);
      node0.getDouble();
      node3.isEquivalentToShallow(node2);
      Node node4 = Node.newString(1, "");
      node4.addChildToFront(node1);
      node4.getString();
      try { 
        node1.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // THIS pX|]FETr+>x<X@E3 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      Node node0 = Node.newNumber(0.6392570754945102);
      node0.setVarArgs(true);
      node0.toStringTree();
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      Node node0 = new Node(145);
      node0.setSourceFileForTesting("f*E+i3GP#TQe<i#9K");
      node0.getInputId();
      // Undeclared exception!
      try { 
        node0.replaceChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      Node node0 = new Node(156);
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      Node node0 = Node.newString("vIUe_na97");
      Node node1 = Node.newString(">Ge.;Xc.r", (-2682), 31);
      node0.checkTreeEqualsImpl(node1);
      node1.isEmpty();
      Node node2 = new Node(1, node0, node0, (-2682), 15);
      node1.addChildrenToFront(node2);
      node0.isExprResult();
      node2.getSourceFileName();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 0, 0);
      Node node2 = node0.cloneNode();
      Node node3 = node2.srcref(node1);
      node3.setType((-527));
      node1.isDefaultCase();
      node1.srcrefTree(node2);
      node1.isEquivalentTo(node3, false, false, true);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node((-2114), node0, node0, node0, node0, 36, 52);
      node1.removeFirstChild();
      Node node2 = node0.cloneNode();
      node2.isDefaultCase();
      Node node3 = node2.cloneNode();
      node2.isDefaultCase();
      node3.srcrefTree(node2);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      Node node0 = Node.newString(")qeU61bPi(");
      node0.isAdd();
      Node node1 = Node.newString(4095, ")qeU61bPi(");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node2 = new Node(48, node0, node1, node1, node1, 42, 36);
      node2.setSourceEncodedPositionForTree(38);
      Node node3 = node2.srcref(node0);
      node2.getChangeTime();
      Node node4 = node3.cloneTree();
      // Undeclared exception!
      try { 
        node4.replaceChildAfter(node0, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isDo();
      // Undeclared exception!
      try { 
        node0.addChildAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((double) 48);
      nodeArray0[1] = node1;
      Node node2 = new Node(3210, nodeArray0, 4, 4095);
      node2.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      Node node0 = Node.newNumber((-1836.3));
      Node node1 = new Node(40, node0);
      node0.isReturn();
      // Undeclared exception!
      try { 
        node1.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      Node node0 = Node.newString("");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node node1 = new Node(38, node0, node0, node0, node0, (-1615), 154);
      node1.setSourceEncodedPositionForTree(51);
      Node node2 = new Node(46);
      node1.srcref(node2);
      node1.getChangeTime();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node node3 = new Node(51);
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(node_SideEffectFlags2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got SHNE
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      Node node0 = Node.newString("vIU_na9");
      node0.isGetterDef();
      Node node1 = new Node(38, node0, node0, node0, node0, 51, 37);
      node1.isName();
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(117, node0, node0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.removeChildren();
      node2.checkTreeEquals(node0);
      node0.mayMutateArguments();
      node0.toStringTree();
      node1.setCharno(35);
      node1.setInputId((InputId) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.isFunction();
      node0.isQuotedString();
      Node node3 = Node.newString("NUMBER -1.0\n");
      node2.isQuotedString();
      node2.isIf();
      node3.isDec();
      Node.newString(33, "W^-3");
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node3);
      node_NodeMismatch0.equals((Object) null);
      node2.isLabel();
      Node node4 = node1.useSourceInfoIfMissingFrom(node2);
      // Undeclared exception!
      try { 
        node4.getChildAtIndex(30);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      Node node0 = new Node((-1721));
      node0.getChangeTime();
      node0.getLength();
      Node node1 = new Node(12, node0, node0, node0);
      Node node2 = Node.newNumber(972.46042582721);
      Node node3 = node1.useSourceInfoFrom(node2);
      Node node4 = Node.newString(2, "I$thKjz6H");
      node3.setIsSyntheticBlock(false);
      Node node5 = new Node(102, node1, node4, node4);
      node4.isGetElem();
      node5.srcref(node0);
      node2.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      Object object0 = new Object();
      node0.isInstanceOf();
      node0.isLabelName();
      node0.isWith();
      node0.isNot();
      Node node1 = Node.newNumber((-3359.2170972143));
      Node node2 = new Node((-1466), node0, node1, 26, 1);
      node0.srcref(node2);
      // Undeclared exception!
      try { 
        node0.removeChild(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      Node node0 = new Node(122);
      node0.getJsDocBuilderForNode();
      node0.setSourceEncodedPositionForTree(122);
      int int0 = Node.SIDE_EFFECTS_FLAGS_MASK;
      node0.isDebugger();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getAncestor(122);
      Node node1 = new Node(52, node0, node0);
      node0.getLineno();
      // Undeclared exception!
      try { 
        node0.isEquivalentTo((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(41, nodeArray0, 2, (-1392));
      node0.getInputId();
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(36, node0, node0, node0);
      Node.newNumber((double) 46, 4095, 43);
      Node node2 = node0.copyInformationFrom(node1);
      node2.getDirectives();
      String string0 = "o";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 1;
      // Undeclared exception!
      try { 
        node1.addChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node((-2114), node0, node0, node0, node0, 36, 52);
      Node node2 = node0.cloneNode();
      node2.isDefaultCase();
      Node node3 = node0.srcrefTree(node1);
      node2.hasChild(node3);
      node0.isBlock();
      node3.getParent();
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      Node node0 = new Node((-1721));
      node0.getChangeTime();
      node0.getLength();
      Node node1 = new Node(12, node0, node0, node0);
      Node node2 = Node.newNumber(972.46042582721);
      Node node3 = node1.useSourceInfoFrom(node2);
      node0.copyInformationFrom(node2);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer.allocateDirect(55);
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      node1.checkTreeTypeAwareEqualsImpl(node2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      node1.isOr();
      node3.isFunction();
      Node.newNumber((double) 0, 56, 50);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString((-1013), ",&eDv<PMC80cwgAfK");
      Node node1 = new Node(49, node0, node0, node0, 308, 2432);
      Node node2 = node1.removeFirstChild();
      node1.getJSDocInfo();
      node0.getLength();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "STRING is_dispatcher");
      node1.getLength();
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      Node node4 = new Node(31, node3, node0);
      Node node5 = node4.removeFirstChild();
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node4);
      node_NodeMismatch0.equals(",&eDv<PMC80cwgAfK");
      node5.isGetProp();
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      Node node0 = new Node(94);
      node0.setSourceFileForTesting("ysde is not[a child");
      Node node1 = new Node(53, node0);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      Node node0 = new Node(147);
      // Undeclared exception!
      try { 
        node0.appendStringTree((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      Node node0 = new Node(155, 302, 155);
      Node node1 = new Node(2, node0, node0);
      node0.useSourceInfoIfMissingFrom(node1);
      Node node2 = null;
      node0.isOnlyModifiesArgumentsCall();
      // Undeclared exception!
      try { 
        node0.replaceChild((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(126, 1166, 1166);
      node0.addSuppression("jLWA.G2d(UtvY[Tw>");
      Node node1 = Node.newString(851, "aAE");
      node0.isOnlyModifiesArgumentsCall();
      boolean boolean0 = false;
      node1.setVarArgs(false);
      node0.isStringKey();
      Node node2 = node0.getLastSibling();
      node2.setType(561);
      node0.isObjectLit();
      // Undeclared exception!
      try { 
        node0.setString("jLWA.G2d(UtvY[Tw>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 561
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Node node1 = Node.newString(16, "");
      Node node2 = node0.copyInformationFromForTree(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(node_SideEffectFlags1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got WHILE
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      Node node0 = Node.newString("GO(^mz{Id");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(0);
      Node.newString(1, "");
      node1.mayMutateArguments();
      Node node2 = node1.cloneNode();
      node2.putProp(46, node1);
      Node node3 = new Node(4095, node0, node1, node0, node0, 2, 4095);
      node3.setSourceEncodedPositionForTree(29);
      node0.getSourceFileName();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Node node0 = new Node(122);
      Node node1 = Node.newString((-2555), "[c<V|&U");
      node1.getIntProp(3952);
      node1.hasOneChild();
      node0.isInstanceOf();
      Node node2 = node1.cloneNode();
      node2.isDefaultCase();
      node0.srcrefTree(node2);
      node1.isCast();
      Node.newString(15, "[c<V|&U");
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      Node node0 = Node.newNumber((double) 16777216, 16777216, 16777216);
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node((-1416), node0, node0, 52, 42);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      Node node0 = new Node(122);
      node0.getSourceFileName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.copyInformationFrom(node1);
      node0.isName();
      node0.isContinue();
      node0.isThrow();
      node0.isCatch();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isGetterDef();
      Node node1 = new Node(32, node0, node0, node0, node0);
      node1.removeChild(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.valueOf();
      Node node2 = new Node(56, node0, node1, node1, node1, 155, 4095);
      node1.cloneNode();
      node1.isDefaultCase();
      node2.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      Node node0 = new Node(155, 302, 155);
      Node node1 = Node.newNumber((-3817.5645));
      Node node2 = node0.clonePropsFrom(node1);
      try { 
        node2.setDouble((-644.45923893312));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CAST 302 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isGetterDef();
      Node node1 = new Node(32, node0, node0, node0, node0);
      node1.useSourceInfoFrom(node0);
      Node node2 = Node.newString(2, "}");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        node2.checkTreeEquals(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      Node node0 = new Node(122);
      Node node1 = Node.newString(142, "Q@NeR2j,sPL%Vg&dF");
      node1.mayMutateArguments();
      Node node2 = new Node(4, node0, 3, 48);
      Node node3 = node2.cloneNode();
      node1.getProp((-1660));
      node1.putProp((-132), (Object) null);
      node1.isTry();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      JSDocInfo jSDocInfo1 = new JSDocInfo();
      node1.wasEmptyNode();
      Node.newString("Q@NeR2j,sPL%Vg&dF");
      Node node4 = Node.newNumber((double) 55);
      node3.setIsSyntheticBlock(false);
      node2.setLength(50);
      try { 
        node4.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 55.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 301, 0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("INHERITED", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(0, node0, node0, node0, node0, 53, 8);
      node0.isEquivalentToShallow(node1);
      node0.isDec();
      Node node2 = new Node(713, 48, 0);
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      node3.hasChildren();
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 301, 0);
      Node node1 = new Node(52, node0, node0, node0, node0);
      Node node2 = node1.cloneTree();
      node1.isReturn();
      node0.getDouble();
      node2.getBooleanProp(42);
      node2.getSourceOffset();
      node2.getParent();
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      Node node0 = new Node(53, 53, 53);
      Node node1 = Node.newNumber((double) 32, 57, 1);
      node1.isCase();
      node1.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3561);
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearSideEffectFlags();
      node1.isNew();
      Node node2 = new Node(38, node0, node0);
      node2.srcrefTree(node0);
      int int0 = Node.IS_NAMESPACE;
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      Node node0 = new Node(155);
      node0.isCase();
      // Undeclared exception!
      try { 
        node0.checkTreeEquals((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node0 = Node.newNumber((-415.51883593594323));
      Node node1 = new Node(43);
      node1.getChangeTime();
      node1.getAncestors();
      int int0 = Node.FLAG_LOCAL_RESULTS;
      node1.cloneNode();
      node1.isCall();
      node1.wasEmptyNode();
      node1.isLocalResultCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.getDouble();
      node0.isEquivalentToTyped(node1);
      node1.addChildToFront(node0);
      node1.isAssign();
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = new Node(124, 124, 124);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(124);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 124
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      ImmutableList.copyOf((Collection<? extends JSType>) vector0);
      Node node0 = new Node(114, 114, 50);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = node0.cloneNode();
      node0.isDefaultCase();
      node1.srcrefTree(node0);
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      Node node0 = Node.newNumber((double) 115);
      node0.setIsSyntheticBlock(true);
      node0.isGetProp();
      Node node1 = new Node(16, node0, node0, node0, node0);
      node1.addChildToFront(node1);
      Node.newNumber((-644.45923893312), (-110), 36);
      node0.getAncestor(16);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      Node node0 = Node.newString("V>GM^T2\"\"H");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(49, node0, node0, node0, node0, 53, 29);
      Node node2 = node1.cloneNode();
      node1.isDefaultCase();
      node2.srcrefTree(node1);
      node2.isCast();
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1186);
      Node node1 = new Node(1);
      node1.getChangeTime();
      node0.getAncestors();
      int int0 = Node.FLAG_LOCAL_RESULTS;
      Node node2 = node1.cloneNode();
      node0.isCall();
      node2.isLocalResultCall();
      node1.useSourceInfoIfMissingFrom(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.getDouble();
      node1.isEquivalentToTyped(node0);
      node2.addChildToFront(node0);
      node2.isGetProp();
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      Node node0 = new Node(122);
      node0.isAssign();
      node0.isInstanceOf();
      node0.cloneTree();
      try { 
        node0.setDouble(4095.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // VOID is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      String string0 = "[-TI&EGRM'I>U'jeq5";
      Node node0 = Node.newString("[-TI&EGRM'I>U'jeq5", (-1164), 1649);
      node0.toString();
      node0.getSourceOffset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "STRING [-TI&EGRM'I>U'jeq5");
      Node node1 = new Node(49, node0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "STRING [-TI&EGRM'I>U'jeq5");
      // Undeclared exception!
      try { 
        node1.appendStringTree(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      String string0 = "[-TI&EGRM'I>U'jeq5";
      Node node0 = Node.newString("[-TI&EGRM'I>U'jeq5", (-1164), 1649);
      node0.toString();
      node0.getSourceOffset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "STRING [-TI&EGRM'I>U'jeq5");
      Node node1 = new Node(49, node0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "STRING [-TI&EGRM'I>U'jeq5");
      node1.useSourceInfoIfMissingFrom(node0);
      // Undeclared exception!
      try { 
        node1.appendStringTree(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      Node.newString(" <K0i}a(mGHa`IexL", 29, 0);
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(39, node0, 35, 153);
      Node node2 = node1.cloneTree();
      node2.isReturn();
      node2.setCharno(849);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.checkTreeEqualsImpl(node2);
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags((-1297));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      Node node0 = new Node(155);
      Node node1 = new Node(39, node0, node0, 36, 4095);
      // Undeclared exception!
      try { 
        node1.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(39, node0, 51, 153);
      Node node2 = node0.cloneTree();
      node2.isReturn();
      node2.setCharno(849);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.checkTreeEqualsImpl(node2);
      node0.addChildrenToBack(node2);
      // Undeclared exception!
      try { 
        node1.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      Node node0 = Node.newNumber((double) 85);
      Node node1 = new Node(85, node0, node0, node0, 51, 39);
      node1.getChangeTime();
      node1.getAncestors();
      int int0 = Node.ORIGINALNAME_PROP;
      Node node2 = node1.cloneNode();
      node2.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isQualifiedName();
      Node node3 = node2.clonePropsFrom(node0);
      node1.isAnd();
      node3.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = node0.cloneTree();
      node1.addChildrenToBack(node0);
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, 1082, 1082);
      Node node1 = new Node(12, node0, node0, 39, 50);
      Node node2 = new Node(31);
      Node node3 = node2.useSourceInfoFrom(node0);
      node0.isComma();
      node0.isFor();
      Node node4 = Node.newString("com.google.commo>..ollect.Lists$AbstractListWrapper", 38, 54);
      Node node5 = node0.clonePropsFrom(node2);
      node5.removeChildren();
      node5.isBlock();
      node3.getIndexOfChild(node5);
      node3.isSyntheticBlock();
      node4.setLineno(12);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node((-2082), node0, node0, node0, node0, 36, 52);
      Node node2 = node0.cloneNode();
      node2.isDefaultCase();
      node0.srcrefTree(node1);
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = node0.cloneTree();
      Node.newNumber((double) 57, 2, 49);
      node1.isCase();
      node1.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.clearSideEffectFlags();
      node0.isDefaultCase();
      Node node2 = new Node(12, node0, node0);
      node0.srcrefTree(node2);
      node1.isFor();
      int int0 = Node.IS_NAMESPACE;
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      Node node0 = Node.newNumber((-1836.3));
      node0.setVarArgs(true);
      Node node1 = Node.newString(42, "pX|]FETr+>x<X@E3");
      Node node2 = Node.newString("pX|]FETr+>x<X@E3", 31, 1545);
      node2.checkTreeEqualsImpl(node1);
      Node node3 = new Node(32);
      node0.addChildrenToFront(node2);
      node0.getDouble();
      node3.isEquivalentToShallow(node2);
      Node node4 = node3.useSourceInfoIfMissingFrom(node1);
      Node node5 = new Node(511, node4, node0);
      node4.srcref(node5);
      Node node6 = node2.srcref(node1);
      node6.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = new Node(47, node0, 113, 36);
      Node node2 = node1.cloneTree();
      node1.isReturn();
      node1.setCharno(2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.checkTreeEqualsImpl(node0);
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(4095);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got REGEXP
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 16, 16);
      Node node2 = Node.newString("com.google.javascript.rhino.Node$ObjectPropListItem");
      node0.addChildrenAfter(node2, (Node) null);
      Node node3 = new Node(2);
      node2.addChildrenToFront(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplateType((JSType) null);
      ObjectType.cast((JSType) null);
      JSType.toMaybeFunctionType((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("]I5SuP", node0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      Node node0 = Node.newNumber((double) 117);
      Node node1 = new Node(117, node0, node0, node0, 51, 39);
      node1.getChangeTime();
      node1.getAncestors();
      int int0 = Node.ORIGINALNAME_PROP;
      Node node2 = node1.cloneNode();
      node2.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node2.setSourceEncodedPosition((-386));
      node0.getLastChild();
      Node node3 = null;
      try {
        node3 = new Node((-774), (Node) null, (Node) null, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      Node node0 = Node.newNumber((-45.936823599750596), 31, 31);
      Node node1 = node0.cloneNode();
      Node node2 = new Node(40, node1, node0, node0, node1, 56, 47);
      Node node3 = node2.useSourceInfoFrom(node0);
      node3.siblings();
      node0.setSourceFileForTesting("`:]l!OyWD+!_");
      node3.isTrue();
      node0.getIndexOfChild(node1);
      node3.replaceChild(node1, node2);
      node2.isEquivalentTo(node1);
      // Undeclared exception!
      try { 
        node2.setString("`:]l!OyWD+!_");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      Node node0 = Node.newNumber((-644.0));
      node0.setType(38);
      node0.isSwitch();
      Node.newNumber((double) 36, (-1829), (-840));
      // Undeclared exception!
      try { 
        node0.setString("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      Node node0 = Node.newString("<invalid>");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(38, node0, node0, node0, node0);
      node1.isDelProp();
      Node node2 = Node.newString("Multiple entries with same ");
      node1.addChildrenAfter(node2, node0);
      Node node3 = new Node(29);
      node2.addChildrenToFront(node1);
      node2.wasEmptyNode();
      node2.isQualifiedName();
      Node node4 = Node.newString("Multiple entries with same ");
      node4.setChangeTime(52);
      node3.isEquivalentToShallow(node1);
      // Undeclared exception!
      try { 
        node1.setString("is_dispatcher");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      Node node0 = Node.newNumber((-105.614636511794));
      node0.setLength(734);
      Node node1 = Node.newNumber((double) 52);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.setIsSyntheticBlock(true);
      node0.setLength(50);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -105.614636511794 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000005] [length: com.google.javascript.rhino.Node$IntPropListItem@0000000006] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      Node node0 = Node.newNumber((double) 85);
      Node node1 = new Node(85, node0, node0, node0, 51, 39);
      node1.getChangeTime();
      node1.getAncestors();
      int int0 = Node.ORIGINALNAME_PROP;
      Node node2 = node1.cloneNode();
      node2.isDo();
      node1.useSourceInfoIfMissingFrom(node2);
      node1.hasChildren();
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      Node node0 = Node.newString("V>GM^T2\"\"H");
      Node node1 = new Node(46);
      Node node2 = new Node(36, node1, node1, 56, 16);
      Node node3 = new Node(30, node2, node0, node2);
      // Undeclared exception!
      try { 
        node3.removeChild(node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      Node node0 = new Node((-1721));
      node0.getChangeTime();
      node0.getLength();
      Node node1 = new Node(38);
      Node node2 = Node.newNumber(972.46042582721);
      node1.addSuppression("STRING is_dispatcher");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1076);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.clearSideEffectFlags();
      node1.isDefaultCase();
      node0.srcrefTree(node2);
      node0.isFor();
      int int0 = Node.IS_NAMESPACE;
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      Node node0 = new Node(155);
      Node node1 = new Node(47, node0, node0);
      node1.replaceChild(node0, node1);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      Node node0 = Node.newNumber((-45.936823599750596), 31, 31);
      Node node1 = node0.cloneNode();
      node1.putIntProp(1, 53);
      Node node2 = new Node(40, node1, node0, node0, node1, 56, 47);
      Node node3 = node2.useSourceInfoFrom(node0);
      node3.siblings();
      node0.setSourceFileForTesting("`:]l!OyWD+!_");
      node3.isEquivalentToShallow(node2);
      node3.isTrue();
      node0.getIndexOfChild(node1);
      node3.replaceChild(node1, node2);
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      Node node0 = Node.newNumber((-1836.3));
      node0.isUnscopedQualifiedName();
      Node node1 = Node.newString(42, "pX|]FETr+>x<X@E3");
      Node node2 = Node.newString("pX|]FETr+>x<X@E3", 31, 1545);
      node2.checkTreeEqualsImpl(node1);
      Node node3 = new Node(32);
      node0.addChildrenToFront(node2);
      Node node4 = Node.newString(31, "pX|]FETr+>x<X@E3", (-117), 2917);
      Node node5 = new Node(4095, node0, node4);
      node5.wasEmptyNode();
      node3.isQualifiedName();
      node3.clonePropsFrom(node1);
      node0.setDouble(53);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, 1082, 1082);
      Node node1 = Node.newNumber((double) 32, 57, 36);
      node1.setCharno(1);
      node1.isEquivalentToShallow(node0);
      Node node2 = new Node(47);
      node2.useSourceInfoFrom(node0);
      node0.isComma();
      node1.isIf();
      node2.getCharno();
      node1.getCharno();
      node2.isInc();
      Node node3 = Node.newString("6", 50, (-4002));
      node3.getType();
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      Node node0 = new Node(122);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32);
      node0.isInstanceOf();
      node0.setLineno(2);
      node0.isVoid();
      Node node1 = Node.newNumber((double) 15, 2201, (-1182));
      Node.extractLineno(32);
      node0.isVar();
      node1.isAssign();
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ImmutableList.copyOf((Collection<? extends JSType>) vector0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node0.isOr();
      node0.isCase();
      Node node1 = Node.newString("Object#Element", 56, 50);
      Node node2 = new Node(31, node0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node node3 = node2.copyInformationFrom(node0);
      node1.isContinue();
      node3.getDirectives();
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      node0.setLength(125);
      node0.isHook();
      // Undeclared exception!
      try { 
        node0.addChildToBack((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      Node node0 = new Node(133);
      Node node1 = Node.newString(29, "t:AzOyB:");
      Node node2 = new Node((-3813), node0, node0, node1, 57, 49);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      node0.isScript();
      node2.cloneTree();
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      Node node0 = Node.newNumber((-641.7324947384474));
      node0.isTry();
      // Undeclared exception!
      try { 
        node0.isEquivalentToShallow((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(51, node0, node0, node0, node0, 3806, 1);
      String string0 = "";
      Node.newString(4095, "FUNCTION_PROTOTYPE");
      node1.mayMutateArguments();
      node1.cloneNode();
      Node node2 = null;
      try {
        node2 = new Node(39, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      Node node0 = Node.newNumber((-644.0));
      node0.setType(38);
      node0.isSwitch();
      node0.detachChildren();
      Node node1 = Node.newNumber((double) 48);
      node1.cloneNode();
      node0.isOnlyModifiesArgumentsCall();
      // Undeclared exception!
      try { 
        node0.isQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(38, node0, node0, node0, node0, 51, 37);
      node1.isNE();
      // Undeclared exception!
      try { 
        node1.isQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 51 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      Node node0 = Node.newString((-1527), "3Eut5cS<");
      Node node1 = new Node(47, node0);
      Node node2 = Node.newNumber(0.0);
      node2.getAncestors();
      Node node3 = new Node(36, node1, node2);
      Node.newString(29, "3Eut5cS<", 683, (-2790));
      node1.srcref(node2);
      Node.extractLineno(1);
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      Node node0 = Node.newString("/");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 0, 0);
      Node node2 = node0.cloneNode();
      node2.isDo();
      node0.setSourceFileForTesting("6hT4c}");
      node1.addChildToFront(node2);
      Node node3 = Node.newString("/");
      node3.setString("/");
      // Undeclared exception!
      try { 
        node1.getExistingIntProp((-310));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: -310
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.wasEmptyNode();
      Node node1 = new Node(57);
      Node node2 = new Node(57, node0, node0, node0, 53, (-1824));
      node2.addChildToFront(node1);
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      String string0 = "<invalid>";
      Node node0 = Node.newString("<invalid>");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(38, node0, node0, node0, node0);
      node1.isDelProp();
      Node node2 = Node.newString("Multiple entries with same ");
      node1.addChildrenAfter(node2, node0);
      node0.isComma();
      node2.isEquivalentToTyped(node2);
      Node.newString("com.google.common.collect.Lists$AbstractListWrapper", 36, 303);
      Node node3 = node1.clonePropsFrom(node2);
      Node node4 = null;
      try {
        node4 = new Node(4, node0, node3, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      Node node0 = new Node(118);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1761);
      node_SideEffectFlags0.valueOf();
      Node node1 = Node.newString(2834, "quoted");
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isLabel();
      Node node2 = Node.newString(31, "quoted");
      Node node3 = node0.copyInformationFromForTree(node2);
      node3.isDec();
      Node node4 = new Node(300, 46, (-1239));
      node3.useSourceInfoIfMissingFrom(node0);
      node0.hasChildren();
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      Node node0 = Node.newString("V>GM^T2\"\"H");
      node0.getJsDocBuilderForNode();
      node0.isQualifiedName();
      Node node1 = new Node(113, node0, node0, node0, node0, 126, 43);
      node1.getCharno();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.removeFirstChild();
      node1.getCharno();
      node1.hasOneChild();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      Node node0 = Node.newString((-1527), "3Eut5cS<");
      Node node1 = new Node(47, node0);
      Node node2 = Node.newNumber(0.0);
      node2.getAncestors();
      Node node3 = new Node(36, node1, node2);
      node3.copyInformationFrom(node2);
      node3.removeChildAfter(node1);
      node0.getIntProp(108);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      Node node0 = new Node(117);
      Node node1 = node0.cloneTree();
      Node.newNumber((double) 57, 2, 49);
      node1.isCase();
      node0.setLength(33);
      Node node2 = null;
      try {
        node2 = new Node(6, (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      Node node0 = Node.newString("s)yw)/");
      // Undeclared exception!
      try { 
        node0.addChildToFront((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      Node node0 = new Node(118);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1761);
      node_SideEffectFlags0.valueOf();
      Node node1 = node0.cloneNode();
      node0.isDo();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(13);
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      node0.isDefaultCase();
      node1.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = new Node(39, node0, node0, node0, node0);
      Node node2 = new Node(49);
      node2.setSourceEncodedPositionForTree((-984));
      node0.srcref(node1);
      Node node3 = new Node(16777216, node2, node1, 55, 38);
      node3.getChangeTime();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(356);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.setMutatesGlobalState();
      Node node4 = new Node(1530);
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.setMutatesThis();
      // Undeclared exception!
      try { 
        node4.setSideEffectFlags(node_SideEffectFlags5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1530
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      Node node0 = Node.newNumber((double) 85);
      Node node1 = new Node(85, node0, node0, node0, 51, 39);
      node1.getChangeTime();
      node1.getAncestors();
      int int0 = Node.ORIGINALNAME_PROP;
      Node node2 = node1.cloneNode();
      node2.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node node3 = new Node(4, node2, node2);
      node2.copyInformationFromForTree(node3);
      node2.isDec();
      Node node4 = new Node((-2755), 5329, 44);
      node4.useSourceInfoIfMissingFrom(node3);
      node0.hasChildren();
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      Node node0 = new Node(118);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1761);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("[WG");
      templateType0.getSlot("Object#Key");
      templateType0.toMaybeTemplateType();
      Node node1 = Node.newString("`:cJ");
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      node0.isObjectLit();
      node1.getDirectives();
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) null);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeArray0[2] = (JSType) objectType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.toStringTree();
      Node node1 = node0.getChildAtIndex(0);
      node0.removeChildAfter(node1);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      Node node0 = Node.newString((-1527), "3Eut5cS<");
      Node node1 = new Node(47, node0);
      Node node2 = Node.newNumber(0.0);
      node2.getAncestors();
      Node node3 = new Node(36, node1, node2);
      node3.removeChildAfter(node1);
      node0.getIntProp(108);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      Node node0 = Node.newString(1263, "Y_L(@");
      Node node1 = Node.newString("Y_L(@", 40, 54);
      Node node2 = new Node(55, 0, 4095);
      Node node3 = new Node(1263, node1, node2);
      node3.removeChildAfter(node1);
      node1.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isGetterDef();
      Node node1 = new Node(40);
      Node node2 = new Node(32, node0, node1, node0, node0);
      node2.removeChild(node0);
      Node node3 = node1.copyInformationFrom(node0);
      node3.addChildrenToBack(node2);
      node0.isNull();
      node0.isFromExterns();
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Node node0 = Node.newString("GO(^mz{Id");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(0);
      Node.newString(48, "GO(^mz{Id", 29, 42);
      node1.mayMutateArguments();
      Node node2 = node1.cloneNode();
      node2.putProp(46, node1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getSourceOffset();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.isBlock();
      node1.getType();
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      Node node0 = Node.newNumber((double) 85);
      Node node1 = new Node(31, node0, node0, 40, 55);
      node1.getChangeTime();
      node1.getAncestors();
      int int0 = Node.ORIGINALNAME_PROP;
      Node node2 = node1.cloneNode();
      node2.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(49);
      Node node3 = Node.newNumber((double) 2);
      node3.setIsSyntheticBlock(false);
      node1.setLength(2);
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DELPROP 40 [length: com.google.javascript.rhino.Node$IntPropListItem@0000000007] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = Node.newNumber((-1838.1283890124112));
      Node node1 = new Node(37, node0);
      node1.setSideEffectFlags(1);
      node1.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(113, node0, node0, node0, node0, 16, 16);
      Node.newString(790, "");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.valueOf();
      Node.newNumber((double) 31, 1930, 42);
      node0.setSourceEncodedPositionForTree((-3845));
      node0.srcref(node1);
      node0.getChangeTime();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node node2 = new Node(37);
      node2.setSideEffectFlags(node_SideEffectFlags1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      try { 
        node1.setString("DATE_TYPE");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // WHILE 16 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      int int0 = Node.extractLineno(18);
      assertEquals(0, int0);
      
      Node.extractCharno(0);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      Node node0 = new Node(122);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-379));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.valueOf();
      Node node1 = Node.newString((-1245), "quoted");
      Node node2 = Node.newNumber(1281.3982199999664);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node2.isOnlyModifiesArgumentsCall();
      node2.isName();
      node0.isContinue();
      node0.wasEmptyNode();
      node1.isQualifiedName();
      Node node3 = node0.clonePropsFrom(node1);
      node3.isBlock();
      node3.isSwitch();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(45);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got VOID
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isGetterDef();
      Node node1 = new Node(40);
      Node node2 = new Node(32, node0, node1, node0, node0);
      node2.removeChild(node0);
      Node node3 = Node.newString(51, "}8~%*!WVX(hH(S");
      node2.copyInformationFromForTree(node3);
      node3.setSourceEncodedPosition(153);
      node0.isEquivalentToShallow(node2);
      node2.isHook();
      node3.isWith();
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ImmutableList.copyOf((Collection<? extends JSType>) vector0);
      Node node0 = Node.newString(131072, "o0YvkD}", 131072, 131072);
      Node node1 = new Node((-1482), node0, node0, node0, node0);
      Node node2 = Node.newNumber((-1.0), 1834, 1834);
      Node node3 = new Node((-1482), node1, node1, node1, node2, 57, (-2168));
      node3.putIntProp(108, 0);
      Node node4 = null;
      try {
        node4 = new Node(37, node3, node0, node3, node3, (-2930), 57);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isGetterDef();
      Node node1 = new Node(40);
      Node node2 = new Node(32, node0, node1, node0, node0);
      node2.removeChild(node0);
      Node node3 = node1.copyInformationFrom(node0);
      node3.addChildrenToBack(node2);
      node0.isNull();
      node0.isFromExterns();
      node1.getLength();
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      Node node0 = Node.newString("vIUe_na97");
      Node node1 = Node.newString(">Ge.;Xc.r", (-2682), 31);
      node0.checkTreeEqualsImpl(node1);
      node1.isEmpty();
      Node node2 = new Node(39);
      node1.addChildrenToFront(node2);
      node0.wasEmptyNode();
      node2.isQualifiedName();
      node2.clonePropsFrom(node1);
      Node node3 = Node.newNumber(56.0);
      node3.setDouble(51);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = new Node(39, node0, node0, node0, node0);
      Node node2 = new Node(49);
      Node node3 = node1.cloneNode();
      node2.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-6451));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node2.setSourceEncodedPosition(77);
      Node node4 = node1.getLastChild();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node4;
      nodeArray0[1] = node3;
      Node node5 = null;
      try {
        node5 = new Node(393, nodeArray0, 36, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      Node node0 = Node.newNumber((-644.45923893312));
      Node node1 = new Node(37, node0);
      node0.getInputId();
      node0.setCharno(8);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
      Node node2 = node1.cloneNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, node1);
      node1.putProp(40, functionType0);
      node1.isTry();
      node2.getProp(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node2.getSourceOffset();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      node1.isInc();
      node1.getType();
      node1.isAssign();
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(118);
      Node node1 = Node.newNumber(0.0, 53, (-1775));
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.toString(true, true, true);
      Node node3 = Node.newNumber(42.0, 86, 56);
      node3.addSuppression("K%6P F,.)");
      node3.isQualifiedName();
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      Node node0 = Node.newNumber((double) 85);
      Node node1 = new Node(85, node0, node0, node0, 51, 39);
      node1.getChangeTime();
      node1.getAncestors();
      int int0 = Node.ORIGINALNAME_PROP;
      Node node2 = node1.cloneNode();
      node1.copyInformationFrom(node2);
      // Undeclared exception!
      try { 
        node2.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, 1082, 1082);
      Node node1 = node0.cloneNode();
      node1.setCharno(3315);
      node1.putIntProp(1, 53);
      node1.isEquivalentToShallow(node0);
      Node node2 = new Node(0, node0);
      Node node3 = node2.cloneTree();
      node0.isReturn();
      node0.getDouble();
      Node node4 = new Node(4);
      node4.isEquivalentToShallow(node0);
      Node node5 = new Node(47);
      node5.addChildToFront(node3);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 301, 0);
      Node node1 = new Node(52, node0, node0, node0, node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.siblings();
      node0.isNE();
      node0.isComma();
      node2.isDo();
      node0.hasOneChild();
      node1.isInstanceOf();
      Node node3 = null;
      try {
        node3 = new Node(32, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      InputId inputId0 = new InputId(",*&w@&");
      Node node0 = new Node(30);
      Node node1 = Node.newString(34, "vIUe_na97");
      node0.copyInformationFromForTree(node1);
      node0.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 34
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      Node node0 = new Node(122);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-379));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.valueOf();
      Node node1 = Node.newString((-1245), "quoted");
      Node node2 = Node.newNumber(1281.3982199999664);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node2.isOnlyModifiesArgumentsCall();
      node2.isName();
      node0.isContinue();
      node0.isComma();
      node0.isBlock();
      node0.isSwitch();
      node0.getCharno();
      node0.isGetElem();
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 0, 0);
      Node.newString(799, "");
      node1.mayMutateArguments();
      Node node2 = node1.cloneNode();
      node2.putProp(46, node1);
      node2.isTry();
      node2.getProp(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node3 = node1.setJSDocInfo(jSDocInfo0);
      node3.setLineno(656);
      node2.isDo();
      node0.isInstanceOf();
      Node.newNumber(2516.4, 978, 47);
      Node.newString((-871), "", 47, 1233);
      node2.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      Node node0 = new Node(105);
      Node node1 = Node.newString(105, "com.google.common.collect.Iterators$6");
      node0.checkTreeEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      Node node0 = Node.newString(113, "ASSIGN_BITAND");
      node0.getInputId();
      Node node1 = new Node(22, node0, node0, node0, node0, 55, 49);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
      CharBuffer charBuffer0 = CharBuffer.allocate(48);
      Charset charset0 = Charset.defaultCharset();
      charset0.encode(charBuffer0);
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      node0.checkTreeEqualsImpl(node1);
      node1.checkTreeEquals(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.newString("Node tree inequality:\nTree1:\nSUB 55\n    WHILE ASSIGN_BITAND [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004]\n\n\nTree2:\nWHILE ASSIGN_BITAND [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004]\n\n\nSubtree1: SUB 55\n    WHILE ASSIGN_BITAND [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004]\n\n\nSubtree2: WHILE ASSIGN_BITAND [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004]\n", 4095, 57);
      node0.isOr();
      node0.isFunction();
      node1.getNext();
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      String string0 = ")qeU619bPi(";
      Node.newString(")qeU619bPi(");
      Node node0 = new Node(21);
      Node node1 = new Node(52, node0, (-2037), 4095);
      Node node2 = node0.cloneTree();
      node0.isReturn();
      node0.setCharno(120);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.checkTreeEqualsImpl(node0);
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(49);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got ADD
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 13, 0);
      Node node2 = Node.newString(790, "");
      boolean boolean0 = false;
      node2.setIsSyntheticBlock(false);
      node2.wasEmptyNode();
      node1.cloneTree();
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      Node node0 = new Node(32);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.valueOf();
      node0.getInputId();
      Node node1 = node0.cloneTree();
      node0.isExprResult();
      node0.mayMutateGlobalStateOrThrow();
      try { 
        node1.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // TYPEOF is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      Node node0 = new Node(1082);
      Node node1 = node0.cloneNode();
      node1.putIntProp(1, 53);
      Node node2 = new Node(40, node1, node0, node0, node1, 56, 47);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node3 = node0.setJSDocInfo(jSDocInfo0);
      Node node4 = Node.newString(38, "Z,vD8Y&8*,H;N ");
      Node node5 = new Node(53, node4);
      node5.setLineno(2);
      Node node6 = Node.newNumber((double) 30, (-1098), 56);
      node6.isDo();
      node3.isInstanceOf();
      Node.newNumber((-1.0), 38, (-2146314822));
      Node.newString(57, "Z,vD8Y&8*,H;N ", 2823, 3281);
      node2.srcref(node5);
      Node.extractLineno(1);
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 0, 0);
      Node node2 = Node.newString(799, "");
      node0.addSuppression("Z}yR;m/.Xzxa#");
      node1.mayMutateArguments();
      Node node3 = node1.cloneNode();
      node3.putProp(46, node1);
      node3.isTry();
      node3.getProp(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node3.useSourceInfoFrom(node2);
      node1.siblings();
      node0.setSourceFileForTesting("STRING is_dispatcher");
      node1.isEquivalentToShallow(node3);
      node1.isTrue();
      // Undeclared exception!
      try { 
        node2.replaceChild(node3, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 0, 0);
      Node.newString(799, "");
      node1.mayMutateArguments();
      Node node2 = node1.cloneNode();
      node2.putProp(46, node1);
      node2.isTry();
      node2.getProp(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node3 = node1.setJSDocInfo(jSDocInfo0);
      node3.setLineno(656);
      node2.isDo();
      node0.isInstanceOf();
      Node node4 = Node.newNumber(2516.4, 978, 47);
      Node node5 = Node.newString((-871), "", 47, 1233);
      node4.srcref(node5);
      Node.extractLineno(43);
      node2.isVar();
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      Node node0 = Node.newNumber((-644.0));
      node0.setType(1029);
      node0.isSwitch();
      node0.setCharno(1029);
      Node node1 = Node.newString(">Ge.;Xc.r", (-481), 31);
      node1.checkTreeEqualsImpl(node0);
      node1.isEmpty();
      Node node2 = new Node(30);
      node2.clonePropsFrom(node1);
      node2.siblings();
      node2.addChildrenToFront(node0);
      node2.wasEmptyNode();
      node2.isQualifiedName();
      node0.clonePropsFrom(node1);
      node0.setDouble(2);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      InputId inputId0 = new InputId(",*&w@&");
      CharBuffer.allocate(30);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node((-6286), node0, node0, 31, 102);
      node1.setCharno(115);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.isOnlyModifiesArgumentsCall();
      node1.isContinue();
      node0.useSourceInfoIfMissingFromForTree(node1);
      Node node2 = Node.newNumber((double) 1, 38, 3000);
      // Undeclared exception!
      try { 
        node0.addChildBefore(node1, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ImmutableList.copyOf((Collection<? extends JSType>) vector0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node0.isOr();
      node0.isCase();
      node0.toString(false, false, true);
      Node node1 = Node.newString("Object#Element", 56, 50);
      Node node2 = new Node(31, node0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      simpleErrorReporter0.error("OBJECT_NUMBR_STRING_BOOLEAN", "Object#Key", 1677, 1);
      node1.setString("OBJECT_NUMBR_STRING_BOOLEAN");
      node0.isHook();
      node0.isTry();
      node2.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      Node node0 = Node.newNumber((double) 115);
      Node node1 = Node.newNumber((double) 42, 2604, 57);
      Node node2 = new Node(101, node0, node1, node0, node1);
      Node node3 = node1.cloneTree();
      node3.isReturn();
      node1.getDouble();
      node3.isEquivalentToShallow(node1);
      // Undeclared exception!
      try { 
        node2.addChildToFront(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      Node node1 = new Node(36, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, (-3086), (-3086));
      String string0 = "V3+yUK]\\uw";
      Node node1 = Node.newString(51, string0);
      node1.setIsSyntheticBlock(true);
      node0.toStringTree();
      node0.isContinue();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      JSDocInfo jSDocInfo1 = new JSDocInfo();
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      node0.setLineno(3670);
      node2.isDo();
      node0.isInstanceOf();
      jSDocInfo0.setConsistentIdGenerator(true);
      Node node3 = new Node((-1797), node1, node1, node1, node2, 172088, (-267));
      node3.srcref(node1);
      Node.extractLineno((-2080));
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, 1082, 1082);
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(42, node0, node0, node0, node0, 56, 32);
      Node node2 = Node.newString(1737, "k_WMg[");
      node2.copyInformationFromForTree(node0);
      node2.isDec();
      node2.isEquivalentTo(node1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Node node3 = node1.useSourceInfoIfMissingFrom(node1);
      node2.hasChildren();
      node3.getQualifiedName();
      Node.newNumber((double) 57, 1, 45);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 16, 16);
      Node node2 = Node.newString(790, "");
      node2.setIsSyntheticBlock(true);
      node1.toStringTree();
      node2.isContinue();
      node1.cloneTree();
      node0.isReturn();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      Node node0 = new Node(133);
      Node node1 = Node.newString(29, "t:AzOyB:");
      Node node2 = new Node((-3813), node0, node0, node1, 57, 49);
      node2.isGetProp();
      node0.isGetProp();
      Node node3 = Node.newNumber((double) 29, 43, 56);
      // Undeclared exception!
      try { 
        node2.removeChild(node3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      Node node0 = Node.newNumber((-641.7324947384474));
      node0.setType(32);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      int int0 = Node.SIDE_EFFECTS_ALL;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.getQualifiedName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getAssociatedNode();
      Node node1 = null;
      try {
        node1 = new Node(36, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      Node node0 = new Node((-914));
      node0.getNext();
      // Undeclared exception!
      try { 
        node0.useSourceInfoFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      Node node0 = new Node(124, 124, 27591);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(27591);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      node0.isGetterDef();
      Node node1 = Node.newString("9 1");
      node0.addChildrenToFront(node1);
      node0.isEquivalentTo(node0);
      node0.isBreak();
      node0.getInputId();
      Node node2 = Node.newNumber(39.0);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node2);
      node_NodeMismatch0.equals((Object) null);
      node2.isWith();
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(35);
      node0.toString(true, true, true);
      Node node1 = Node.newString("Object#Element");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      node2.wasEmptyNode();
      Node node3 = new Node(0);
      node0.setIsSyntheticBlock(false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.getObjectElementKey();
      node3.useSourceInfoIfMissingFrom(node2);
      Node.newString(56, "((l1>UN/");
      node3.isName();
      node2.isComma();
      node3.isContinue();
      // Undeclared exception!
      try { 
        node3.getChildAtIndex(52);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      Node node0 = Node.newNumber((double) 85);
      Node node1 = new Node(85, node0, node0, node0, 51, 39);
      node1.getChangeTime();
      node1.getAncestors();
      int int0 = Node.ORIGINALNAME_PROP;
      Node node2 = node1.cloneNode();
      node2.isDo();
      node1.isTypeOf();
      node0.isBreak();
      node1.addChildrenToBack(node2);
      Node.newString("&-7RIZ[`DF;Wu2*M^");
      // Undeclared exception!
      try { 
        node1.addChildBefore(node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      Node node0 = new Node((-1721));
      node0.getChangeTime();
      node0.getLength();
      Node node1 = new Node(38);
      Node node2 = Node.newNumber(972.46042582721);
      Node node3 = node1.useSourceInfoFrom(node2);
      Node node4 = Node.newString(32, "I$thKjz6H");
      node3.setIsSyntheticBlock(true);
      Node node5 = new Node(102, node1, node4, node4);
      node5.toStringTree();
      Node node6 = node5.clonePropsFrom(node2);
      node0.removeChildren();
      node1.isBlock();
      node6.getIndexOfChild(node5);
      node5.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      Node node0 = Node.newNumber((double) 85);
      Node node1 = new Node(85, node0, node0, node0, 51, 39);
      node1.getChangeTime();
      node1.getAncestors();
      node1.getIntProp(55);
      Node node2 = node1.cloneNode();
      node2.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearSideEffectFlags();
      node1.isDefaultCase();
      node2.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(1058, node0, node0, node0, node0);
      Node node2 = new Node((-2073), 2, 4101);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      Node node3 = jSTypeRegistry1.createParameters((List<JSType>) vector0);
      Node node4 = node2.useSourceInfoIfMissingFrom(node3);
      node0.getAncestors();
      node4.hasChildren();
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isGetterDef();
      Node node1 = new Node(40);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = new Node(1, (-54), 38);
      Node node4 = node1.useSourceInfoIfMissingFrom(node2);
      Node node5 = Node.newString(491, "Y)^h^pHzt", (-800), 33);
      node5.getAncestors();
      node4.hasChildren();
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      Node node0 = Node.newString("+&5i:_(9h_)V~1~]Sv");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(86, node0, node0, node0, node0, 13, 0);
      Node.newString(790, "");
      node1.mayMutateArguments();
      Node node2 = node1.cloneNode();
      node2.putProp(46, node1);
      node2.isTry();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      JSDocInfo jSDocInfo1 = new JSDocInfo();
      Node node3 = node2.setJSDocInfo(jSDocInfo0);
      node2.setLineno(49);
      node2.isDo();
      node3.isInstanceOf();
      node3.srcref(node1);
      Node.extractLineno(57);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      Node node0 = Node.newNumber((double) 85);
      Node node1 = new Node(85, node0, node0, node0, 51, 39);
      node1.getChangeTime();
      node1.getAncestors();
      int int0 = Node.ORIGINALNAME_PROP;
      Node node2 = node1.cloneNode();
      node2.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node_SideEffectFlags0.setAllFlags();
      node0.hasOneChild();
      node1.isInstanceOf();
      node2.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      Node node0 = Node.newNumber((double) 16777216, 16777216, 16777216);
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(126, node0, node0, node0, node0, 101, 38);
      Node node2 = Node.newString(36, "is_dispatcher");
      node0.mayMutateArguments();
      node1.cloneNode();
      Node node3 = null;
      try {
        node3 = new Node(63, node2, node0, 55, (-1864));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      Node node0 = new Node(13);
      node0.isEquivalentTo(node0, true, true, false);
      ArrayList<Node> arrayList0 = new ArrayList<Node>(57);
      node0.getAncestors();
      int int0 = Node.ORIGINALNAME_PROP;
      node0.cloneNode();
      node0.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3698);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags1.clearSideEffectFlags();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isAssignAdd();
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(35, node0, node0, node0, node0);
      node0.cloneTree();
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      try { 
        node2.setDouble(55);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      Node node0 = Node.newNumber((double) 115);
      node0.mayMutateArguments();
      Node node1 = node0.cloneNode();
      node0.putProp(4756, node1);
      node0.isTry();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      JSDocInfo jSDocInfo1 = new JSDocInfo();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      node1.setLineno(30);
      Node node3 = Node.newString(147, "[c<V|&U");
      node3.hasOneChild();
      node2.isQualifiedName();
      node3.isHook();
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      Node node0 = new Node(32);
      node0.isQualifiedName();
      // Undeclared exception!
      try { 
        node0.useSourceInfoFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      Node node0 = new Node((-1721));
      node0.getChangeTime();
      node0.getLength();
      Node node1 = new Node(38);
      Node node2 = Node.newNumber(972.46042582721);
      Node node3 = node1.useSourceInfoFrom(node2);
      Node node4 = Node.newString(32, "I$thKjz6H");
      node3.setIsSyntheticBlock(true);
      Node node5 = new Node(102, node1, node4, node4);
      node5.toStringTree();
      node4.isContinue();
      Node node6 = Node.newNumber((-2796.3808), 57, 16);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node1;
      nodeArray0[1] = node5;
      node4.getJSDocInfo();
      nodeArray0[2] = node2;
      nodeArray0[3] = node0;
      node1.useSourceInfoIfMissingFromForTree(node6);
      nodeArray0[4] = node6;
      nodeArray0[5] = node4;
      nodeArray0[6] = node3;
      Node node7 = null;
      try {
        node7 = new Node(57, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      Node node0 = Node.newNumber((-644.0));
      node0.setType(1029);
      node0.isSwitch();
      node0.detachChildren();
      Node node1 = Node.newNumber(0.0);
      node1.getIntProp(50);
      node1.isCase();
      Node.newString(152, "{proxy:");
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      Node node0 = Node.newNumber((double) 85);
      Node node1 = new Node(85, node0, node0, node0, 51, 39);
      node1.getAncestors();
      int int0 = Node.ORIGINALNAME_PROP;
      Node node2 = node1.cloneNode();
      node2.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node_SideEffectFlags0.setAllFlags();
      Node node3 = Node.newString((-999), "fQnX8fV");
      node1.checkTreeEquals(node0);
      node1.addChildAfter(node3, node0);
      node2.isInc();
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<A<tA5");
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(312, nodeArray0, 312, (-3247));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.setMutatesArguments();
      node0.setSourceEncodedPosition(103);
      node0.getLastChild();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = new Node(54, node0, 42, 56);
      Node node2 = node1.cloneTree();
      Node node3 = Node.newNumber((double) 57, 2533, 49);
      node0.isWith();
      Node node4 = new Node(55, node2, node2, node1, node3);
      Node node5 = new Node(57, 1, (-239));
      Node node6 = node0.useSourceInfoIfMissingFrom(node4);
      node0.getAncestors();
      node6.hasChildren();
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, (-3086), (-3086));
      node0.setSourceEncodedPositionForTree((-1358));
      node0.getChangeTime();
      node0.isDebugger();
      Node node1 = node0.getAncestor(0);
      Node node2 = Node.newString("STRING is_dispatcher");
      Node node3 = new Node(807, node1, node0, node2, node1);
      // Undeclared exception!
      try { 
        node3.getAncestor((-3761));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      Node node0 = Node.newString("", 115, (-2456));
      node0.cloneTree();
      node0.putIntProp(849, 37);
      // Undeclared exception!
      try { 
        node0.setDouble(909.930916);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 849
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "STRING is_dispatcher");
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 13, 0);
      Node node2 = Node.newString(790, "");
      node1.mayMutateArguments();
      Node node3 = node1.cloneNode();
      node3.putProp(46, node1);
      node3.isTry();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      JSDocInfo jSDocInfo1 = new JSDocInfo();
      Node node4 = node3.setJSDocInfo(jSDocInfo0);
      node3.setLineno(147);
      node4.isDo();
      node0.hasOneChild();
      Node node5 = Node.newNumber((-4449.8789078148), 155, 56);
      node5.isInstanceOf();
      node2.isLabelName();
      node5.srcref(node2);
      node4.useSourceInfoIfMissingFromForTree(node3);
      // Undeclared exception!
      try { 
        node2.addChildrenAfter(node0, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      node0.siblings();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node1.setSourceFileForTesting("zF;u_%A!^{>v8`2M");
      node0.isEquivalentToShallow(node1);
      node1.useSourceInfoFromForTree(node0);
      node1.isEquivalentTo(node0, false, false, true);
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(4, node0, node0, node0, node0, 0, 56);
      node0.isVoid();
      Node node2 = Node.newNumber((-3.521556296839266));
      node1.isDo();
      node0.hasOneChild();
      node1.isInstanceOf();
      node1.srcref(node2);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      Node node0 = Node.newString("EqZD;Q1Y`D234J@", 614, 614);
      node0.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      Node node0 = Node.newString("vIUe_na97");
      node0.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      Node node0 = Node.newNumber((double) 115);
      Node node1 = new Node(52, node0);
      node1.getInputId();
      node1.setCharno(39);
      node0.checkTreeEqualsImpl(node1);
      node0.isEmpty();
      Node node2 = new Node(56);
      node2.addChildrenToFront(node1);
      node1.wasEmptyNode();
      node1.isQualifiedName();
      node1.clonePropsFrom(node0);
      // Undeclared exception!
      try { 
        node2.setDouble(51);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 56
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      Node node0 = new Node(126);
      node0.cloneTree();
      Node node1 = Node.newNumber((-1676.588), 15, (-2518));
      node1.isCase();
      Node node2 = null;
      try {
        node2 = new Node(8, (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      Node node0 = new Node(124);
      node0.getIntProp(1);
      node0.isFunction();
      // Undeclared exception!
      try { 
        node0.removeChildAfter((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node.newString(42, "vm<z bhKo", 4095, 47);
      Node node1 = Node.newString(51, "");
      node1.isTypeOf();
      node1.isBreak();
      node0.addChildrenToBack(node1);
      node1.getString();
      Node node2 = Node.newString("SCv1r,PHk/V6tA");
      // Undeclared exception!
      try { 
        node2.addChildBefore(node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      Node node0 = Node.newString("is_dispatcher");
      boolean boolean0 = false;
      node0.toString(false, true, true);
      Node node1 = Node.newString("STRING is_dispatcher");
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node1.isAnd();
      node0.mayMutateGlobalStateOrThrow();
      Node node2 = new Node(1649, node0, node1, node0, node0, 43, 43);
      Node node3 = node0.cloneTree();
      node3.getSourceFileName();
      // Undeclared exception!
      try { 
        node2.replaceChildAfter(node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = new Node(54, node0, 42, 56);
      Node node2 = node1.cloneTree();
      Node node3 = new Node(2);
      Node node4 = new Node(4, node3, 51, 42);
      node4.cloneTree();
      node2.isReturn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.checkTreeEqualsImpl(node2);
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got FOR
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      Node node0 = new Node(122);
      node0.isWith();
      // Undeclared exception!
      try { 
        node0.isEquivalentTo((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      Node node0 = new Node(118);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1761);
      Node node1 = Node.newString(38, "");
      node1.mayMutateArguments();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node3 = node2.cloneNode();
      node3.putProp(31, node_SideEffectFlags0);
      node1.isTry();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      JSDocInfo jSDocInfo1 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
      node2.setLineno(37);
      node1.isDo();
      node0.hasOneChild();
      Node node4 = Node.newNumber((double) 32, 49, 42);
      node2.isInstanceOf();
      node1.isLabelName();
      node3.srcref(node2);
      node4.hasChild((Node) null);
      node1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = Node.newString("[WG");
      Node node1 = new Node((-303), node0, node0, 54, 2);
      node0.isEquivalentToTyped(node1);
      node1.isLabel();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) null);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeArray0[2] = (JSType) objectType0;
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node2.toStringTree();
      Node node3 = node0.copyInformationFrom(node2);
      node1.isContinue();
      node3.addChildrenToBack(node2);
      node1.isNew();
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      Node node0 = new Node(118);
      node0.isString();
      Node node1 = new Node(2, node0, node0, node0, node0);
      node0.isThrow();
      node1.removeChildren();
      node0.isInc();
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      Node node0 = new Node(113);
      Node node1 = new Node(30, node0, 38, 1182);
      node1.cloneTree();
      Node.newNumber((double) 39, 1382, 1389);
      node1.isWith();
      Node node2 = null;
      try {
        node2 = new Node(108, (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      Node node0 = Node.newString("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = Node.newString("[WG");
      Node node2 = new Node(42, node0, node0, node1, 52, 8);
      node0.getChangeTime();
      node1.getAncestors();
      int int0 = Node.ORIGINALNAME_PROP;
      Node node3 = node2.cloneNode();
      node0.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-35));
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(37);
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.clearSideEffectFlags();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.isAssignAdd();
      node0.isAnd();
      // Undeclared exception!
      try { 
        node1.addChildAfter(node2, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      Node node0 = Node.newString("URI_ERROR_FUNCTION_TYPE");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node1.isGetterDef();
      Node node2 = new Node(114);
      node2.copyInformationFromForTree(node0);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.valueOf();
      Node node1 = Node.newNumber(1729.40505281875, 40, 1495);
      node0.getInputId();
      Node node2 = new Node(92, node0, node0, node0, node0, 55, 15);
      node2.isNull();
      node2.setIsSyntheticBlock(false);
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(41);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      Node node0 = Node.newString("m", (-289), (-289));
      Node node1 = new Node(56, node0);
      Node node2 = node0.srcref(node1);
      node2.getLength();
      Node node3 = Node.newString((-1089), "67Mh'MfBB");
      node1.putProp((-1940), node2);
      node0.isGetterDef();
      Node node4 = node0.cloneNode();
      node4.getBooleanProp(2);
      node4.setWasEmptyNode(false);
      node1.isTrue();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.extractCharno((-862048943));
      node3.isArrayLit();
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.PropertyMap$1");
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(40, node0.getType());
      
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      Node node0 = new Node(52);
      Node node1 = new Node(152);
      Node node2 = new Node((-862048943), node1, node0, node1, 102, 1);
      Node node3 = new Node(2, node2, (-3748), 105);
      node1.cloneTree();
      node1.isReturn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.newString(153, "FUNCTION_PROTOTYPE");
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(115);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got INSTANCEOF
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      Node node0 = new Node(118);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1761);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.valueOf();
      Node node1 = Node.newNumber((double) 16, 2565, 109);
      node0.getInputId();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isEmpty();
      Node node2 = Node.newNumber(1279.215026663782);
      node0.getIntProp(36);
      node2.isCase();
      Node node3 = Node.newString(29, "vA?^mMs06WuEjS");
      node3.isBlock();
      node2.getIndexOfChild(node3);
      Node node4 = Node.newNumber((-2503.0879895192256));
      node4.isScript();
      node4.isLabel();
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      Node node0 = Node.newNumber((-644.0));
      node0.setType(1029);
      node0.isSwitch();
      node0.detachChildren();
      Node node1 = Node.newNumber(0.0);
      node1.getIntProp(50);
      node1.isCase();
      Node node2 = Node.newString(152, "{proxy:");
      node1.isName();
      node2.isFor();
      node0.setDouble(32);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      Node node0 = Node.newNumber((-641.7324947384474));
      // Undeclared exception!
      try { 
        node0.replaceChildAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      Node node0 = new Node(31, 106, (-324));
      node0.isDelProp();
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      Node node0 = new Node(152, 152, 152);
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "first new child has existing parent");
      Node node0 = new Node(1048576);
      node0.isWith();
      node0.isDelProp();
      Node node1 = Node.newNumber((-1.0), 2, 693);
      node0.addChildToBack(node1);
      node1.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      Node node0 = new Node(132);
      node0.isParamList();
      node0.isScript();
      node0.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = new Node(31, node0, node0, node0, 54, 4095);
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, 1082, 1082);
      Node node1 = node0.cloneNode();
      node1.setCharno(3315);
      node1.putIntProp(1, 53);
      Node node2 = new Node(4095, 36, 30);
      Node node3 = node2.useSourceInfoFrom(node0);
      node3.siblings();
      node2.isNE();
      node0.isComma();
      node2.isReturn();
      Node.newString("com.google.common.collect.Lists$AbstractListWrapper", 38, 54);
      Node node4 = node0.clonePropsFrom(node2);
      node4.isBlock();
      node3.getIndexOfChild(node4);
      node3.isScript();
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      Node node0 = Node.newNumber(0.7);
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(1155, node0);
      node1.setCharno(4095);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.isOnlyModifiesArgumentsCall();
      node0.isIn();
      node0.isDo();
      node0.hasOneChild();
      Node node2 = Node.newNumber((-1836.3), 29, 38);
      Node node3 = Node.newString(2147483645, "");
      node3.isInstanceOf();
      node0.isLabelName();
      node1.srcref(node3);
      node1.hasChild(node0);
      node2.isEmpty();
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      Node node0 = Node.newString(1155, ",*&w@&");
      node0.getInputId();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.isUnscopedQualifiedName();
      int int0 = Node.ORIGINALNAME_PROP;
      Node node1 = node0.cloneNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.clearSideEffectFlags();
      node0.isAssignAdd();
      node1.isAnd();
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      Node node0 = new Node(13);
      Node node1 = new Node(33, node0, 31, 301);
      Node node2 = node1.cloneTree();
      Node.newNumber(1.0, (-184), 124);
      node2.isWith();
      Node node3 = null;
      try {
        node3 = new Node(49, (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      Node node0 = Node.newString("");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      simpleSourceFile0.getLineOffset(4190);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.getJsDocBuilderForNode();
      node0.setCharno(123);
      Node node1 = new Node(31, node0, node0, node0, node0);
      node0.checkTreeEqualsImpl(node1);
      node0.isEmpty();
      Node node2 = new Node(1635);
      node0.addChildrenToFront(node1);
      node0.wasEmptyNode();
      node2.isQualifiedName();
      node1.clonePropsFrom(node2);
      // Undeclared exception!
      try { 
        node2.setDouble(1792.16781221);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1635
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 40, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node node2 = Node.newString("OBJECT_NUMBER_STRING");
      node1.addChildrenAfter(node2, node0);
      node1.isUnscopedQualifiedName();
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      Node node0 = Node.newNumber((double) 76, 76, 734);
      Node node1 = new Node(115, node0, node0, node0, node0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.isEmpty();
      Node.newNumber((double) 51);
      Node node2 = new Node(29, 32, 76);
      node0.toString(false, false, false);
      Node.newString("NUMBER 76.0", 2282, 27);
      node1.clonePropsFrom(node0);
      try { 
        node2.setString("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NEG 32 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      Node node0 = new Node(124, 124, 27591);
      Node node1 = Node.newString(11, "= MAT9vX[lEiz,", 307, (-509));
      node0.useSourceInfoFromForTree(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(27591);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(32);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.valueOf();
      Node.newNumber(Double.POSITIVE_INFINITY, 57, 77);
      node0.getInputId();
      Node node2 = node0.cloneTree();
      node0.isQuotedString();
      try { 
        node2.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // EMPTY is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      Node node0 = new Node(16777174, 16777174, 16777174);
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      Node node0 = Node.newNumber((double) 115);
      node0.toStringTree();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isAdd();
      node0.isDec();
      node0.isLabel();
      node0.isObjectLit();
      node0.getDirectives();
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      Node node0 = Node.newString(1155, ",*&w@&");
      node0.getInputId();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(37, node0, node0, node0, node0, 29, 4);
      Node node2 = Node.newString(1195, "");
      node1.mayMutateArguments();
      Node node3 = node0.cloneNode();
      node1.putProp((-2471), node0);
      node2.isTry();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      JSDocInfo jSDocInfo1 = new JSDocInfo();
      Node node4 = node1.setJSDocInfo(jSDocInfo1);
      node3.getJSDocInfo();
      node4.setLineno(19);
      node3.isDo();
      node3.hasOneChild();
      Node node5 = Node.newNumber((double) 37, (-926), 27591);
      node2.isInstanceOf();
      Node.newString(1006, "CharMatcher.isNot('");
      node3.isLabelName();
      node5.srcref(node2);
      node4.hasChild(node5);
      node1.isEmpty();
      Node.newString(3183, "");
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      Node node0 = Node.newString("'`R%xM kXsTUS{@");
      // Undeclared exception!
      try { 
        node0.clonePropsFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = new Node(54, node0, 42, 56);
      Node node2 = node1.cloneTree();
      node0.cloneNode();
      Integer integer0 = new Integer((-2604));
      node2.putProp((-3406), integer0);
      Node node3 = null;
      try {
        node3 = new Node(734, node1, node1, node0, node1, 57, 130);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 0, 0);
      node1.clonePropsFrom(node0);
      node1.isIf();
      node0.getCharno();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node.mergeLineCharNo(15, 51);
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(113, node0, node0, node0, node0, 49, 0);
      node1.isEquivalentToTyped(node1);
      node1.setSourceEncodedPosition(120);
      node0.isEquivalentToShallow(node1);
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      Node node0 = Node.newNumber((-1836.3));
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(37, node0);
      node0.setCharno(8);
      node1.checkTreeTypeAwareEqualsImpl(node1);
      node1.isOnlyModifiesArgumentsCall();
      node1.isIn();
      node1.isDo();
      node1.hasOneChild();
      Node node2 = Node.newNumber((double) 1, 329, (-1));
      node2.isInstanceOf();
      node2.isLabelName();
      Node node3 = node1.srcref(node0);
      node3.hasChild(node2);
      node2.isEmpty();
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      Node node0 = new Node(96);
      Node node1 = new Node(29, node0);
      node1.hasChild(node0);
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 0, 0);
      Node node2 = node1.srcrefTree(node0);
      node2.hasChild(node1);
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      Node node0 = Node.newNumber((-1836.3));
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(37, node0);
      node0.setCharno(8);
      Node.newNumber((double) 42, 1073741823, 52);
      node1.getInputId();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.isEmpty();
      node1.getIntProp(49);
      node1.isCase();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Node.newString(37, "com.google.common.collect.Maps$ImprovedAbstractMap");
      node0.isName();
      node1.isComma();
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 13, 0);
      Node node2 = Node.newString(800, "");
      node1.mayMutateArguments();
      Node node3 = node1.cloneNode();
      node3.isTry();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node4 = new Node(16, node2, 1756, 86);
      Node node5 = new Node(903, node3, node4, node1, node4, 52, 1);
      node2.isCatch();
      node4.detachFromParent();
      try { 
        node1.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // WHILE 13 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      Node node0 = Node.newNumber((-644.0));
      node0.setType(1029);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("pX|]FETr+>x<X@E3", true);
      Node node1 = new Node(51, node0, 29, 92);
      node1.cloneTree();
      node0.setStaticSourceFile(simpleSourceFile0);
      try { 
        node1.setDouble(57);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // IN 29 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      Node node0 = Node.newString("GO(^mz{Id");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(0);
      Node node2 = Node.newString(1, "");
      node1.mayMutateArguments();
      Node node3 = node1.cloneNode();
      node3.putProp(46, node1);
      Node node4 = new Node(4095, node0, node1, node0, node0, 2, 4095);
      node4.setSourceEncodedPositionForTree(29);
      node2.cloneTree();
      node4.replaceChildAfter(node1, node2);
      node3.setIsSyntheticBlock(true);
      node3.isGetElem();
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      Node node0 = Node.newString("GO(^mz{Id");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(0);
      Node node2 = Node.newString(1, "");
      Node node3 = node1.cloneNode();
      node3.putProp(46, node1);
      Node node4 = new Node(4095, node0, node1, node0, node0, 2, 4095);
      node4.setSourceEncodedPositionForTree(29);
      node4.removeChild(node0);
      Node node5 = node2.cloneTree();
      node4.replaceChildAfter(node1, node2);
      node3.isGetElem();
      node2.isFalse();
      node5.isAssign();
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      Node node0 = Node.newString("pO(^mz{II");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(0);
      Node node2 = Node.newString(800, "");
      node1.mayMutateArguments();
      Node node3 = node1.cloneNode();
      node3.putProp(46, node1);
      Node node4 = new Node(4095, node0, node1, node0, node0, 2, 4095);
      node4.setSourceEncodedPositionForTree(29);
      node2.cloneTree();
      node4.replaceChildAfter(node1, node2);
      node3.setIsSyntheticBlock(true);
      Node node5 = new Node(47, 49, 114);
      node3.isAssign();
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 13, 0);
      Node.newString(800, "");
      node1.mayMutateArguments();
      Node node2 = node1.cloneNode();
      node2.putProp(46, node1);
      node2.isTry();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      JSDocInfo jSDocInfo1 = new JSDocInfo();
      Node node3 = node2.setJSDocInfo(jSDocInfo0);
      node0.wasEmptyNode();
      Node node4 = new Node(4);
      node3.getCharno();
      node4.isQualifiedName();
      Node.newString("8C;N\"A']XQ", 1, 57);
      node2.isThrow();
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(108);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.areAllFlagsSet();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.setAllFlags();
      Node node0 = Node.newString("+ROpz!{O[iRiOvzd0");
      Node node1 = new Node(49);
      node1.getChangeTime();
      node0.getAncestors();
      node1.isParamList();
      node0.getIntProp(39);
      node1.isDefaultCase();
      Node node2 = node0.cloneNode();
      node_SideEffectFlags3.setMutatesArguments();
      node1.getAncestors();
      node0.isNot();
      Node.mergeLineCharNo(15, 1242);
      node2.isEquivalentToTyped(node0);
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      Node node0 = new Node(27591);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(27591);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node0.setInputId((InputId) null);
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      Node node1 = new Node(40, node0, node0, node0, node0, 8, 1148);
      node0.isGetterDef();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      Node.newNumber((double) 53, 37, (-286));
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node1, templateType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      enumElementType1.getPropertyNode("not a StringNode");
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      // Undeclared exception!
      try { 
        node0.addChildBefore((Node) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 0, 0);
      Node node2 = Node.newString(800, "");
      node1.mayMutateArguments();
      Node node3 = node1.cloneNode();
      node3.isCast();
      node1.mayMutateArguments();
      node1.isComma();
      node2.isBlock();
      node3.isSwitch();
      node3.getCharno();
      Node.newString("");
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      Node node0 = new Node(535, 535, 535);
      StringWriter stringWriter0 = new StringWriter(39);
      // Undeclared exception!
      try { 
        node0.appendStringTree(stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 535
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 13, 0);
      Node node2 = Node.newString(790, "");
      node2.setIsSyntheticBlock(true);
      node2.wasEmptyNode();
      node2.isQualifiedName();
      // Undeclared exception!
      try { 
        node2.clonePropsFrom(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      Node node0 = new Node(94, 94, 94);
      node0.setOptionalArg(true);
      node0.isAssignAdd();
      Node node1 = new Node(36);
      // Undeclared exception!
      try { 
        node0.clonePropsFrom(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      Node node0 = Node.newString(")qeU619bPi(");
      node0.isGetElem();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node0.cloneTree();
      // Undeclared exception!
      try { 
        Charset.forName("7K-p'CEw.");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 7K-p'CEw.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      Node node0 = Node.newString("STRING is_dispatcher");
      Node node1 = new Node(32, node0);
      Node node2 = Node.newString("", 57, 110);
      node0.isEquivalentTo(node2, false, true, false);
      Node node3 = Node.newNumber(95.00016850218059);
      Node node4 = new Node(32, node1, node1, node1);
      Node node5 = Node.newNumber(406.9);
      node4.setLength(31);
      node1.setSourceFileForTesting((String) null);
      node2.isEquivalentToShallow(node3);
      node1.isTrue();
      node4.getIndexOfChild(node2);
      node5.isHook();
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      Node node0 = Node.newString("<invalid>");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(57);
      node1.children();
      Node node2 = new Node(46, node0, node0, node0, node1, 57, 4860);
      node1.isContinue();
      node1.isSwitch();
      node2.getIndexOfChild(node1);
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, 1082, 1082);
      Node node1 = node0.cloneNode();
      node1.setCharno(3315);
      node1.putIntProp(1, 53);
      Node node2 = new Node(0, node0);
      Node node3 = node2.useSourceInfoFrom(node0);
      node3.siblings();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "BOOLEAN_OBJECT_FUNCTION_TYPE");
      node2.isNE();
      node3.mayMutateGlobalStateOrThrow();
      node0.isComma();
      node2.isReturn();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node2;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node4 = null;
      try {
        node4 = new Node(2215, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 13, 0);
      Node node2 = Node.newString(790, "");
      node0.addChildrenToFront(node2);
      node2.wasEmptyNode();
      Node node3 = Node.newString("-G", 0, (-826));
      node0.isQualifiedName();
      node1.clonePropsFrom(node2);
      node0.isBlock();
      node3.isBlock();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      Node node0 = new Node(52);
      boolean boolean0 = true;
      int int0 = 890;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1647);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.valueOf();
      Node node1 = Node.newNumber((double) 52, 39, 256);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, jSType0, jSType0, jSType0);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node2.setSourceEncodedPositionForTree((-1788));
      Node node3 = node2.srcref(node1);
      node3.getChangeTime();
      Node node4 = new Node(1673);
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.clearAllFlags();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      ImmutableList.copyOf((Collection<? extends JSType>) vector0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(52);
      Node node1 = Node.newString(100, "");
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.setLineno(43);
      node1.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got INSTANCEOF
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      Node node1 = new Node(47, node0, node0);
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(108);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.areAllFlagsSet();
      Node.newString("+ROpz!{O[iRiOvzd0");
      Node node0 = new Node(46);
      node0.getChangeTime();
      node0.getAncestors();
      node0.isParamList();
      Node node1 = Node.newString("+ROpz!{O[iRiOvzd0", 32, 3283);
      node1.getIntProp(1638);
      String string0 = "is_dispatcher";
      Node node2 = Node.newString("is_dispatcher");
      node2.isDefaultCase();
      Node node3 = node2.cloneNode();
      Node node4 = Node.newString(57, "+ROpz!{O[iRiOvzd0");
      Node node5 = new Node(155, node4, node2, node3, 2454, (-239));
      // Undeclared exception!
      try { 
        node2.replaceChild(node3, node4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      Node node0 = new Node(42);
      Node node1 = new Node(56, node0, 2, 15);
      Node node2 = node1.cloneTree();
      Node node3 = new Node(1, node1, node2);
      // Undeclared exception!
      try { 
        node2.replaceChild(node3, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      Node node0 = new Node(13);
      node0.isEquivalentTo(node0, true, true, false);
      ArrayList<Node> arrayList0 = new ArrayList<Node>(57);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.areAllFlagsSet();
      Node node1 = Node.newString("+ROpz!{O[iRiOvzd0");
      Node node2 = new Node(1638);
      node0.getChangeTime();
      Node node3 = new Node(48, node1, node2, node0);
      node3.getAncestors();
      node3.isParamList();
      node1.getIntProp(8);
      node2.isDefaultCase();
      Node node4 = node1.cloneNode();
      int int0 = 147;
      Node node5 = null;
      try {
        node5 = new Node(8, node4, node2, node3, node3, 39, 4095);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      Node node0 = new Node(118);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1761);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node1 = Node.newString(118, "");
      node0.mayMutateArguments();
      Node node2 = node0.cloneNode();
      node2.putProp(47, node1);
      node0.isTry();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      JSDocInfo jSDocInfo1 = new JSDocInfo(true);
      Node node3 = node2.setJSDocInfo(jSDocInfo1);
      node2.wasEmptyNode();
      Node node4 = new Node(41);
      Node.newNumber((double) 37);
      node3.setIsSyntheticBlock(true);
      node1.setLength(843);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // VAR is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      Node node0 = Node.newNumber((-644.0));
      node0.setType(1029);
      node0.isSwitch();
      node0.detachChildren();
      Node node1 = Node.newNumber(0.0);
      Node node2 = new Node(124, node0, node1, node0, node0, 4, 102);
      node2.getDirectives();
      node2.isCatch();
      node2.useSourceInfoFrom(node1);
      // Undeclared exception!
      try { 
        node1.detachFromParent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      Node node0 = new Node(118);
      int int0 = 1761;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1761);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.valueOf();
      Node.newNumber((double) 16, 56, 109);
      node0.getInputId();
      Node node1 = node0.cloneTree();
      node1.isExprResult();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // VAR is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(113, node0, node0, node0, node0, 13, 0);
      Node node2 = Node.newString(800, "");
      node1.mayMutateArguments();
      node1.putProp(46, node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      JSDocInfo jSDocInfo1 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
      node0.wasEmptyNode();
      Node node3 = new Node(4);
      node1.setIsSyntheticBlock(false);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node1.mayMutateGlobalStateOrThrow();
      node2.useSourceInfoIfMissingFrom(node3);
      node3.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 16777216, 16777216);
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = Node.newNumber((double) 1);
      node0.mayMutateGlobalStateOrThrow();
      node1.isTry();
      node1.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "STRING is_dispatcher");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-102);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node0 = Node.newString("pX|]FETr+>x<X@E3", 113, 129);
      node0.isNot();
      node0.isVar();
      node0.isOr();
      node0.isBlock();
      node0.hasMoreThanOneChild();
      Node node1 = Node.newString("pX|]FETr+>x<X@E3");
      node0.checkTreeTypeAwareEqualsImpl(node1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.write(718);
      charArrayWriter0.close();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      node0.appendStringTree(bufferedWriter0);
      node1.getLastSibling();
      node0.isStringKey();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Node node0 = new Node(63);
      Node node1 = Node.newString(37, "Object#Key");
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.setLineno(43);
      node2.isDo();
      node2.hasOneChild();
      node0.isInstanceOf();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParametersWithVarArgs((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 13, 0);
      Node node2 = Node.newString(790, "");
      node2.setIsSyntheticBlock(true);
      node1.toStringTree();
      node2.isContinue();
      Node node3 = Node.newNumber((double) 2, 190, 57);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node3;
      Node node4 = new Node(124, nodeArray0);
      node4.addChildBefore(node2, node3);
      node0.getAncestor(2);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      Node node0 = new Node(54);
      node0.isEquivalentTo(node0, false, false, false);
      ArrayList<Node> arrayList0 = new ArrayList<Node>(57);
      node0.isRegExp();
      int int0 = 2710;
      node0.setType(2710);
      node0.isFunction();
      // Undeclared exception!
      try { 
        node0.setDouble(37);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2710
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = node0.cloneNode();
      node1.putIntProp((-1084), (-187));
      Node node2 = new Node((-2334), node1);
      Node node3 = node2.useSourceInfoFrom(node1);
      node3.siblings();
      node2.setSourceFileForTesting("is_dispatcher");
      Node node4 = Node.newNumber(1623.9708, 4, 2);
      node0.isEquivalentToShallow(node4);
      node0.isTrue();
      node3.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(41);
      Node node1 = new Node(41, node0, node0, node0, 56, 131072);
      node1.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      Node node0 = Node.newNumber(1.2);
      Node node1 = Node.newNumber((double) 37);
      node0.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Node node1 = new Node(30);
      Node node2 = Node.newString(12, "");
      node0.isStringKey();
      node1.cloneNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("x7", node2, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      Node node0 = new Node(128, 128, 128);
      node0.cloneNode();
      Node node1 = new Node(1, node0, node0, node0, node0, 1, 37);
      node1.setCharno(52);
      node1.children();
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 0, 0);
      Node.newString(800, "");
      node1.mayMutateArguments();
      Node node2 = node1.cloneNode();
      node2.isCast();
      node1.mayMutateArguments();
      node1.getSourcePosition();
      node0.isNot();
      Node node3 = new Node(40);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node((-148), (-148), (-1805));
      Node node1 = new Node((-931));
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.setLineno(790);
      Node node3 = new Node(303, 50, 32);
      node3.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -931
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 13, 0);
      Node node2 = Node.newString(790, "");
      node1.mayMutateArguments();
      Node node3 = node1.cloneNode();
      node3.putProp(46, node1);
      node3.isTry();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      JSDocInfo jSDocInfo1 = new JSDocInfo();
      Node node4 = node3.setJSDocInfo(jSDocInfo0);
      node3.setLineno(147);
      node4.isDo();
      node0.hasOneChild();
      Node node5 = Node.newNumber((-4449.8789078148), 155, 56);
      node5.isInstanceOf();
      node2.isLabelName();
      Node node6 = node5.srcref(node2);
      node6.hasChild(node0);
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      Node node0 = Node.newString(114, "");
      Node node1 = new Node(8, 115, 148);
      Node node2 = new Node(23, node1, node1, node1, node0);
      Node node3 = new Node(148, node2, (-226), 45);
      node0.addChildToBack(node3);
      Node node4 = node3.srcref(node0);
      node1.checkTreeEqualsImpl(node4);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags6.clearAllFlags();
      node_SideEffectFlags6.setThrows();
      Node.SideEffectFlags node_SideEffectFlags7 = new Node.SideEffectFlags(1834);
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags4.clearSideEffectFlags();
      node4.isExprResult();
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 13, 0);
      node1.srcrefTree(node0);
      Node node2 = Node.newString(800, "");
      // Undeclared exception!
      try { 
        node2.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      Node node0 = Node.newNumber((double) 800);
      node0.wasEmptyNode();
      Node node1 = new Node(800, node0);
      Node node2 = node1.removeFirstChild();
      node0.toString(true, true, false);
      node2.isOnlyModifiesThisCall();
      Node.newNumber((double) 36, 57, 37);
      Node node3 = new Node(4, 105, 1521);
      node3.mayMutateGlobalStateOrThrow();
      node3.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Comparator<ObjectType> comparator0 = (Comparator<ObjectType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<TemplateType> priorityQueue0 = new PriorityQueue<TemplateType>(comparator0);
      PriorityQueue<ObjectType> priorityQueue1 = new PriorityQueue<ObjectType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) priorityQueue1);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.getSourceFileName();
      node0.getChangeTime();
      int int0 = Node.FREE_CALL;
      node0.isParamList();
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      templateType0.getSlot("Object#Key");
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      priorityQueue0.add(templateType1);
      Node node1 = Node.newString("Object#Element");
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.checkTreeEquals(node0);
      node2.isOr();
      node2.isStringKey();
      node2.removeChildren();
      node2.isQualifiedName();
      node0.isFor();
      node0.isSetterDef();
      node2.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      Node node0 = Node.newString(1155, ",*&w@&");
      node0.getInputId();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      CharBuffer charBuffer0 = CharBuffer.allocate(110);
      Charset charset0 = Charset.defaultCharset();
      charset0.encode(charBuffer0);
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(110, node0, node0, 8, 29);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.isFalse();
      Node node2 = Node.newString("");
      node2.addChildrenToFront(node1);
      node0.removeFirstChild();
      node2.setChangeTime(52);
      node1.isEquivalentTo(node0);
      node1.isBreak();
      node2.removeFirstChild();
      node2.getAncestor(408);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = new Node(117);
      Node node1 = node0.copyInformationFromForTree(node0);
      Node node2 = Node.newString(38, "S8[\"");
      node0.copyInformationFromForTree(node1);
      // Undeclared exception!
      try { 
        node2.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      // Undeclared exception!
      try { 
        node0.checkTreeTypeAwareEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 16777216, 16777216);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags3.clearSideEffectFlags();
      node0.isNumber();
      node0.isAdd();
      node0.isDec();
      Node node1 = Node.newString(153, "X[E%ylh71a&q'%yDY5", 12, 43);
      node1.getLineno();
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      Node node0 = new Node(108);
      // Undeclared exception!
      try { 
        node0.isEquivalentTo((Node) null, false, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      Node node0 = Node.newNumber((-105.614636511794));
      node0.setChangeTime(734);
      node0.hasOneChild();
      node0.isGetProp();
      node0.isLabelName();
      Node node1 = new Node(103, node0, node0, node0, node0);
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      Node node0 = new Node(1869, 1869, 1869);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node.newNumber(335.8256495711);
      Node node1 = new Node((-448), node0, 16, 16);
      node1.setWasEmptyNode(false);
      node1.detachChildren();
      String string0 = "^Q\"8Oh\"(B^=L>F#2mp";
      try { 
        MockURI.URI("second new child has existing sibling");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 6: second new child has existing sibling
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      Node node0 = new Node(85, 85, 85);
      Node node1 = new Node(85, node0, node0, node0, node0);
      node1.detachChildren();
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      Node node0 = new Node(441);
      // Undeclared exception!
      try { 
        node0.checkTreeEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      Node node0 = new Node(94);
      node0.isAssignAdd();
      // Undeclared exception!
      try { 
        node0.addChildrenAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      Node node0 = new Node(124, 124, 27591);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node0.addChildrenAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      Node node0 = new Node(16777216, (-491), 16777216);
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(4095, node0);
      node0.getInputId();
      node0.setCharno(16777216);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isEmpty();
      Node node2 = new Node(1162);
      node2.addChildrenToFront(node1);
      node1.wasEmptyNode();
      Node.newString("side_effect_flags", 43, (-4129));
      node2.isQualifiedName();
      Node node3 = node0.clonePropsFrom(node1);
      node1.isBlock();
      node3.isBlock();
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      Node node0 = Node.newString(113, "");
      node0.getInputId();
      Node node1 = new Node(22, node0, node0, node0, node0, 55, 49);
      node1.checkTreeEqualsImpl(node0);
      CharBuffer charBuffer0 = CharBuffer.allocate(48);
      Charset charset0 = Charset.defaultCharset();
      charset0.encode(charBuffer0);
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      node0.checkTreeEqualsImpl(node1);
      node1.checkTreeEquals(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = Node.newString("Node tree inequality:\nTree1:\nSUB 55\n    WHILE  [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004]\n\n\nTree2:\nWHILE  [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004]\n\n\nSubtree1: SUB 55\n    WHILE  [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004]\n\n\nSubtree2: WHILE  [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004]\n", 4095, 57);
      node2.isQualifiedName();
      node1.clonePropsFrom(node2);
      node2.isBlock();
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Comparator<ObjectType> comparator0 = (Comparator<ObjectType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<TemplateType> priorityQueue0 = new PriorityQueue<TemplateType>(comparator0);
      PriorityQueue<ObjectType> priorityQueue1 = new PriorityQueue<ObjectType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) priorityQueue1);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.getSourceFileName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.valueOf();
      node0.setIsSyntheticBlock(false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      node_SideEffectFlags0.setMutatesArguments();
      jSTypeRegistry1.getObjectElementKey();
      Node node1 = new Node(462961, node0, 0, 124);
      node0.isOnlyModifiesThisCall();
      node1.putIntProp(44, 40);
      node1.isEquivalentTo(node0);
      node1.isBreak();
      node1.getAncestor(4095);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      Node node0 = Node.newString(54, ",*&w@&");
      InputId inputId0 = new InputId(",*&w@&");
      Node node1 = new Node(54, node0, node0, 40, 43);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      CharBuffer charBuffer0 = CharBuffer.allocate(30);
      Charset charset0 = Charset.defaultCharset();
      charset0.encode(charBuffer0);
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = new Node((-1393), node1, node1, (-3089), 717);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
      Node node3 = Node.newNumber((-957.8596089), 38, 252);
      node2.isFalse();
      Node node4 = Node.newString(",*&w@&");
      node0.addChildrenToFront(node3);
      node1.setChangeTime(4);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.clearAllFlags();
      node4.getAncestors();
      node2.isAnd();
      node3.isTypeOf();
      node2.isQualifiedName();
      node3.isTrue();
      node_NodeMismatch0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals(node0);
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-872), (-872));
      StaticSourceFile staticSourceFile0 = null;
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.getJsDocBuilderForNode();
      node0.isEquivalentToShallow(node0);
      Node node1 = Node.newString(")qeU619bPi(");
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 47, 47);
      node0.checkTreeEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      Node node0 = Node.newNumber((double) 85);
      Node node1 = new Node(85, node0, node0, node0, 51, 39);
      node1.getChangeTime();
      node1.getAncestors();
      node1.getIntProp(41);
      Node node2 = node1.cloneNode();
      node2.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 40, 0);
      Node node2 = Node.newString(800, "");
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.setShouldPreserveTry(true);
      jSDocInfo0.getAssociatedNode();
      node2.isTypeOf();
      node1.isContinue();
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = new Node(124);
      Node node1 = node0.copyInformationFromForTree(node0);
      node1.setLineno(1196);
      node0.isDo();
      node0.hasOneChild();
      node1.isInstanceOf();
      node0.isLabelName();
      node1.srcref(node0);
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // EMPTY 1196 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      Node.newString(".equivalentTo(");
      Node node0 = Node.newString(48, ".equivalentTo(", 31, (-2217));
      node0.isAssignAdd();
      Node node1 = new Node(41, node0, 38, 4095);
      node1.isNull();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      Node node0 = Node.newString(1155, ",*&w@&");
      node0.getInputId();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.isUnscopedQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(264);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.valueOf();
      Node node1 = Node.newNumber((double) 15, 1810, 4184);
      node1.getInputId();
      Node node2 = new Node(31, node1, node0, node0, node1, 63, 2);
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node1.isNull();
      node0.setIsSyntheticBlock(false);
      node1.getProp(15);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      // Undeclared exception!
      try { 
        node2.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.PropertyMap$1");
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 40, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.newString(55, "", 16, 52);
      node_SideEffectFlags3.clearAllFlags();
      Node node2 = Node.newString(42, "", 1996, 30);
      node2.isLabel();
      node1.setCharno(0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      node2.isThis();
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 40, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.clearAllFlags();
      Node node2 = Node.newString(42, "", 1996, 30);
      node2.isLabel();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      node2.isThis();
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      Node node0 = new Node(45);
      Node node1 = node0.getLastSibling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vIUe_na97");
      node0.setSourceFileForTesting("`B :&");
      node0.isNoSideEffectsCall();
      node1.getInputId();
      node1.getQualifiedName();
      node0.removeChildren();
      node1.toString(true, true, true);
      node0.getSourcePosition();
      node1.isExprResult();
      node0.isAdd();
      node1.getJSDocInfo();
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      Node node0 = new Node((-882));
      Node node1 = new Node(55, node0, node0, node0, node0, 50, 54);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node1.isInc();
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.isEquivalentTo(node0);
      node0.getJSDocInfo();
      node1.isThis();
      node0.isIf();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      Node node0 = new Node(115);
      node0.removeChildren();
      node0.isCase();
      // Undeclared exception!
      try { 
        node0.copyInformationFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(169, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, 76, 734);
      Node node1 = new Node(115, node0, node0, node0, node0);
      Node node2 = node1.cloneTree();
      node1.isReturn();
      node0.getDouble();
      node1.isEquivalentToShallow(node0);
      node0.addChildToFront(node2);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      Node node0 = new Node(53, 53, (-673));
      Node node1 = new Node(36);
      Node.newString(46, "");
      Node node2 = node1.copyInformationFromForTree(node0);
      Node node3 = Node.newNumber((double) 53, 2, 36);
      node3.isCast();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags4.clearSideEffectFlags();
      node2.isNumber();
      node3.isAdd();
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      ImmutableList.copyOf((Collection<? extends JSType>) vector0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node0.isSetterDef();
      node0.isCase();
      Node node1 = Node.newString("Object#Element", 56, 50);
      Node node2 = node0.clonePropsFrom(node1);
      node2.isBlock();
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      Node node0 = Node.newString(1155, ",*&w@&");
      node0.checkTreeTypeAwareEqualsImpl(node0);
      CharBuffer charBuffer0 = CharBuffer.allocate(110);
      Charset charset0 = Charset.defaultCharset();
      charset0.encode(charBuffer0);
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      templateType0.toMaybeTemplateType();
      PriorityQueue<TemplateType> priorityQueue0 = new PriorityQueue<TemplateType>();
      priorityQueue0.add(templateType0);
      Node node1 = Node.newString(4, "7gl", 0, 110);
      Node node2 = node0.useSourceInfoFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.areAllFlagsSet();
      node0.isOr();
      node2.isDo();
      node1.hasOneChild();
      Node node3 = new Node(53, node2, node2, node0, (-484), 3496);
      node3.isInstanceOf();
      node3.isLabelName();
      node3.srcref(node2);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      Node node0 = new Node(49, 49, 49);
      node0.isThrow();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // THROW 49 [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      Node node0 = new Node(121, 121, 121);
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      Node node0 = Node.newString("", 110, 110);
      node0.toStringTree();
      node0.isThrow();
      node0.isVar();
      node0.isFunction();
      Node node1 = Node.newString((-2101), ".equivalentTo(", 56, 48);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      Node node0 = new Node(155);
      // Undeclared exception!
      try { 
        node0.srcrefTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      Node node0 = Node.newString("!");
      InputId inputId0 = new InputId("!");
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      Node node0 = Node.newNumber((double) 115);
      node0.toStringTree();
      node0.isNumber();
      node0.isAdd();
      node0.isDec();
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 16777216, 16777216);
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = Node.newString("Object#Element", 51, 55);
      Node node2 = new Node(52, node1, node0, node1, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      Node.newNumber((double) 51, 54, 1);
      node2.isWith();
      JSType.toMaybeTemplateType((JSType) null);
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(4096);
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.clearSideEffectFlags();
      node0.isNumber();
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      Node node0 = new Node(53, 53, (-673));
      Node node1 = new Node(36);
      Node.newString(46, "");
      node1.copyInformationFromForTree(node0);
      node0.setLineno((-2119));
      node0.isDo();
      node1.hasOneChild();
      node0.isInstanceOf();
      node0.isLabelName();
      node1.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      Node node0 = new Node((-990));
      Node node1 = new Node(4095, node0, node0, node0, 15, (-421));
      Node node2 = node1.copyInformationFrom(node0);
      // Undeclared exception!
      try { 
        node2.replaceChild(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      Node node0 = Node.newNumber((-644.0));
      node0.setType(1029);
      node0.isSwitch();
      node0.detachChildren();
      Node node1 = Node.newNumber(0.0);
      int int0 = 124;
      Node node2 = new Node(124, node0, node1, node0, node0, 4, 102);
      node2.isCatch();
      // Undeclared exception!
      try { 
        node1.detachFromParent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(155, 324, (-3688));
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(107, node0, node0, node0, node0, 42, 133);
      node1.isIf();
      node1.hasChildren();
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      jSTypeRegistry0.getObjectElementKey();
      Node node1 = new Node(51, node0, 4095, 50);
      node1.hasOneChild();
      node1.putIntProp(8232, 12);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = new Node(29, 31, 42);
      node2.isTypeOf();
      node0.isBreak();
      node2.addChildrenToBack(node1);
      node2.hasChildren();
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      Node node0 = Node.newString("N3$NgI=I\"0;");
      node0.setString("N3$NgI=I\"0;");
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      Node node0 = Node.newNumber((double) 800);
      node0.wasEmptyNode();
      Node node1 = new Node(800, node0);
      Node node2 = node1.removeFirstChild();
      node0.toString(true, true, false);
      Node node3 = Node.newString("");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node1.wasEmptyNode();
      node1.isEquivalentTo(node2, false, false, true);
      node0.setLength(52);
      Node node4 = new Node((-2380));
      Node node5 = new Node(43, node4, node3, node2);
      Node.newString("NUMBER 800.0");
      Node[] nodeArray0 = new Node[0];
      Node node6 = new Node(2, nodeArray0, 1468, 110);
      node0.isVar();
      node3.setString("var_args_name");
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 40, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      Node node2 = Node.newString(42, "", 1996, 30);
      node2.isLabel();
      node2.getSourcePosition();
      node0.isVarArgs();
      node1.isAnd();
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      Node node0 = new Node((-1953), (-1953), (-1953));
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 0, 0);
      Node.newString(800, "");
      node1.mayMutateArguments();
      Node node2 = node1.cloneNode();
      node2.isCast();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.clearSideEffectFlags();
      node1.isNumber();
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      Node node0 = Node.newNumber((-644.0));
      node0.setType(1029);
      node0.isSwitch();
      node0.detachChildren();
      Node node1 = Node.newNumber(0.0);
      Node node2 = new Node(57, node0, 2196, 33);
      node2.getIntProp(30);
      node0.isCase();
      Node.newString(57, "slash_v");
      node1.isName();
      node2.isComma();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node3 = Node.newString(52, "Object#Element");
      JSType jSType0 = null;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("|PM+p0q.SZ", node3, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      Node node0 = Node.newString(1155, ",*&w@&");
      node0.getInputId();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.isUnscopedQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(264);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.valueOf();
      Node node1 = Node.newNumber((double) 15, 1810, 4184);
      node1.getInputId();
      Node node2 = Node.newString(",*&w@&");
      node1.checkTreeTypeAwareEqualsImpl(node2);
      Node node3 = Node.newNumber(91.0453, 4184, 12);
      node0.isWith();
      Node node4 = new Node(37, node1, (-1461), 42);
      node3.clonePropsFrom(node2);
      node1.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      Node node0 = new Node(113);
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      node0.isGetElem();
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      Node node0 = new Node(153, (-2699), (-925));
      node0.isLabelName();
      node0.isGetProp();
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      Node node0 = Node.newNumber((double) 85);
      Node node1 = new Node(85, node0, node0, node0, 51, 39);
      Node.newString("duplicate child");
      Node.newString("duplicate child", (-4616), 124);
      node1.removeProp(55);
      node1.setChangeTime(16);
      node1.isOnlyModifiesThisCall();
      node1.isDo();
      node1.hasOneChild();
      node0.isInstanceOf();
      node1.isLabelName();
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-872), (-872), (-872));
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = Node.newString("Object#Element", 32, 40);
      Node node2 = new Node(158, node0, node1, node1, node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node[] nodeArray0 = new Node[0];
      Node node3 = new Node((-862048943), nodeArray0, 2, 16);
      node3.setJSDocInfo(jSDocInfo0);
      // Undeclared exception!
      try { 
        node2.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 158
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      Node node0 = Node.newString(0, "", 152, 2215);
      Node node1 = new Node(0, node0, 152, 661);
      node0.isSyntheticBlock();
      node0.getSourceFileName();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isQualifiedName();
      node2.setLineno(76);
      node2.setWasEmptyNode(true);
      node0.isWhile();
      node2.checkTreeEqualsImpl(node1);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node3 = Node.newNumber((-1739.61848882456), 1464, 30);
      int int0 = 63;
      Node node4 = null;
      try {
        node4 = new Node(1, node1, node3, node0, node3, 723, 47);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      Node node0 = new Node(162, 162, 162);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isNumber();
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 16777216, 16777216);
      Node node1 = node0.cloneTree();
      node0.setIsSyntheticBlock(false);
      Node node2 = new Node(53, 38, 1073741824);
      node1.isTrue();
      node0.isTrue();
      node0.setDirectives((Set<String>) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(8);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.clearSideEffectFlags();
      node2.isNumber();
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Comparator<ObjectType> comparator0 = (Comparator<ObjectType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<TemplateType> priorityQueue0 = new PriorityQueue<TemplateType>(comparator0);
      PriorityQueue<ObjectType> priorityQueue1 = new PriorityQueue<ObjectType>();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node0 = Node.newNumber(0.0);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.getDouble();
      node0.getQualifiedName();
      // Undeclared exception!
      try { 
        node1.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      Node.extractCharno(656);
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(656, (Node) null, 50, 1248);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      Node node0 = new Node(133);
      Node node1 = Node.newString(29, "t:AzOyB:");
      Node node2 = new Node((-3813), node0, node0, node1, 57, 49);
      node1.isBreak();
      node2.isAssign();
      // Undeclared exception!
      try { 
        node2.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      Node node0 = Node.newString(1155, ",*&w@&");
      node0.getInputId();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.isUnscopedQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(264);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.valueOf();
      Node node1 = Node.newNumber((double) 15, 1810, 4184);
      node1.getInputId();
      Node node2 = new Node(31, node1, node0, node0, node1, 63, 2);
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node1.isEmpty();
      node0.setIsSyntheticBlock(false);
      node1.getProp(15);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType[] jSTypeArray0 = new JSType[1];
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) null);
      jSTypeArray0[0] = (JSType) objectType0;
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node3.toStringTree();
      node0.isContinue();
      // Undeclared exception!
      try { 
        node2.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      Node node0 = new Node(160, 160, 160);
      Node node1 = new Node(0, node0, node0, node0, node0, 38, 2);
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      Node node0 = Node.newNumber((-1837.358));
      node0.setOptionalArg(true);
      node0.setSourceFileForTesting("vIUe_na97");
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -1837.358 [opt_arg: com.google.javascript.rhino.Node$IntPropListItem@0000000002] [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      Node node0 = new Node((-397), (-397), (-397));
      // Undeclared exception!
      try { 
        node0.getAncestor((-397));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 13, 0);
      Node.newString(800, "");
      node1.mayMutateArguments();
      Node node2 = node1.cloneNode();
      node2.putProp(46, node1);
      node2.isTry();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      JSDocInfo jSDocInfo1 = new JSDocInfo(false);
      node2.setJSDocInfo(jSDocInfo0);
      node0.wasEmptyNode();
      Node node3 = new Node(4);
      Node node4 = Node.newNumber(0.0);
      node4.setIsSyntheticBlock(false);
      node0.setLength(3059);
      try { 
        node2.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // WHILE 13 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000008] [is_namespace: com.google.javascript.rhino.Node$ObjectPropListItem@0000000005] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      Node node0 = new Node(113);
      node0.putProp(46, node0);
      node0.addChildToFront(node0);
      // Undeclared exception!
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      Node node0 = new Node(3430, 3430, 3430);
      Node node1 = new Node((-925), node0, node0, node0, node0, 0, 2069);
      Node node2 = node1.cloneTree();
      node2.setIsSyntheticBlock(false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node3 = null;
      try {
        node3 = new Node(46, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      Node node0 = null;
      try {
        node0 = new Node(49, (Node) null, (Node) null, (Node) null, 49, 49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      Node node0 = Node.newString("d-lB0f#*$OPld[~rsK");
      Node node1 = Node.newString(">Ge.;Xc.r", 49, 56);
      node0.checkTreeEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.toString(false, false, false);
      Node node1 = Node.newString("vIUe_na97");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node1.wasEmptyNode();
      node0.isEquivalentTo(node1, false, false, false);
      Node node2 = Node.newNumber(1.2, (-1843), 101);
      node2.setLength(55);
      Node node3 = new Node(4);
      Node node4 = new Node(103, node2, node2, node0);
      Node.newString("");
      Node node5 = null;
      try {
        node5 = new Node(113, (Node[]) null, 0, 43);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      Node node0 = new Node((-309));
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(48, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      Node node0 = Node.newNumber((-1838.1283890124112));
      Node node1 = new Node(36, node0, node0, node0, node0);
      node1.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      Node node0 = Node.newString("", 115, (-2456));
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("(]hf%-2L?", true);
      node0.cloneTree();
      node0.setStaticSourceFile(simpleSourceFile0);
      try { 
        node0.setDouble(909.930916);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      Node node0 = Node.newString("{(");
      node0.setSourceFileForTesting("{(");
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = new Node(25, node0, node0, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node0);
      node0.getAncestors();
      node2.setCharno(52);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node0.detachFromParent();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node.newString(0, "Object#Key");
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.hasChild(node0);
      node0.isEquivalentTo(node0);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      Node node0 = Node.newString(1155, ",*&w@&");
      Node node1 = new Node(57, node0);
      node1.getInputId();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.useSourceInfoFromForTree(node0);
      node1.setIsSyntheticBlock(true);
      node1.getProp(1);
      node1.isContinue();
      node0.isVarArgs();
      node0.hasChild(node1);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, 76, 734);
      Node node1 = new Node(115, node0, node0, node0, node0);
      node1.cloneTree();
      node1.isReturn();
      node1.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) priorityQueue0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.setDirectives(linkedHashSet0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node1 = Node.newNumber((-3439.08838), 33, 31);
      Node node2 = new Node((-2400), node0, node0, node1, (-2392), 37);
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node0.getSourceFileName();
      node0.getChangeTime();
      node2.getType();
      node1.isDo();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter2);
      TemplateType templateType0 = jSTypeRegistry1.createTemplateType("new child has existing sibling");
      templateType0.getSlot("Object#Element");
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 13, 0);
      Node.newString(800, "");
      node1.mayMutateArguments();
      Node node2 = node1.cloneNode();
      node2.putProp(46, node1);
      node2.isTry();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      JSDocInfo jSDocInfo1 = new JSDocInfo(false);
      node2.setJSDocInfo(jSDocInfo0);
      node0.wasEmptyNode();
      Node node3 = new Node(4);
      Node node4 = Node.newNumber(0.0);
      node4.setIsSyntheticBlock(false);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      jSTypeRegistry0.getObjectElementKey();
      Node node5 = new Node(54, node3, 40, 44);
      node3.isOnlyModifiesThisCall();
      node4.putIntProp(2, 44);
      node0.isTypeOf();
      node5.isBreak();
      node0.addChildrenToBack(node1);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newNumber(524.0757941539079);
      node1.isNoSideEffectsCall();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      node1.isRegExp();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString("");
      Node node2 = new Node(38, node1, node0, node0, node0, 51, 37);
      node2.removeChild(node0);
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      Node node0 = Node.newString("pO(^mz{II");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(0);
      Node node2 = Node.newString(800, "");
      node1.mayMutateArguments();
      Node node3 = node1.cloneNode();
      node3.putProp(46, node1);
      Node node4 = new Node(4095, node0, node1, node0, node0, 2, 77);
      node2.cloneTree();
      node3.setIsSyntheticBlock(true);
      Node node5 = new Node(47, 49, 114);
      node3.isAssign();
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(41);
      node0.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      Node node0 = new Node(3430, 3430, 3430);
      Node node1 = new Node((-925), node0, node0, node0, node0, 0, 2069);
      Node node2 = node1.cloneTree();
      node2.setIsSyntheticBlock(false);
      Node node3 = new Node(45, 56, 38);
      node1.isTrue();
      node1.isTrue();
      node3.getIndexOfChild(node2);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      Node node0 = new Node((-858));
      node0.isEquivalentToTyped(node0);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      Node node0 = new Node((-194), 116, (-194));
      Node node1 = new Node(2365, node0, node0);
      node1.isEquivalentToTyped(node0);
      node1.isEquivalentToTyped(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-6275));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setMutatesGlobalState();
      node0.setSourceFileForTesting((String) null);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags3.clearAllFlags();
      node0.getAncestor(36);
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -194
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      int int0 = 55;
      Node[] nodeArray0 = new Node[8];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(unionType0).getAlternates();
      // Undeclared exception!
      try { 
        modificationVisitor0.caseUnionType(unionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ModificationVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(35);
      node0.toString(true, true, true);
      Node node1 = Node.newString("Object#Element");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      JSDocInfo jSDocInfo1 = new JSDocInfo(false);
      Node node2 = node1.setJSDocInfo(jSDocInfo1);
      node2.wasEmptyNode();
      Node node3 = new Node(0);
      node0.setIsSyntheticBlock(false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      jSTypeRegistry0.getObjectElementKey();
      Node node4 = new Node(2166, node0, 51, 4476);
      node4.isOnlyModifiesThisCall();
      node4.putIntProp(12, 15);
      node2.isTypeOf();
      node2.isBreak();
      // Undeclared exception!
      try { 
        node3.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(2, node0, node0, node0, 46, 15);
      node1.addChildrenToBack(node1);
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 16777216, 16777216);
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = Node.newString("Object#Element", 51, 55);
      Node node2 = new Node(52, node1, node0, node1, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node3 = node0.setJSDocInfo(jSDocInfo0);
      node3.getDouble();
      node0.getQualifiedName();
      node1.detachFromParent();
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(51);
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.clearSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[6];
      JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0);
      ImmutableList<JSType> immutableList1 = immutableList0.reverse();
      JSType jSType0 = jSTypeRegistry0.createFunctionType(objectType0, (JSType) objectType0, (List<JSType>) immutableList1);
      jSTypeArray0[0] = jSType0;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType1 = modificationVisitor0.caseAllType();
      jSTypeArray0[1] = jSType1;
      Node node0 = new Node(0, 4096, 0);
      Node node1 = new Node(1, node0, 57, 16);
      node1.isStringKey();
      node1.getStaticSourceFile();
      Node node2 = new Node((-1372), node1, 25, (-4015));
      Node node3 = node1.removeChildren();
      node2.isOr();
      node3.isFunction();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node2;
      nodeArray0[1] = node0;
      Node node4 = new Node((-1466));
      nodeArray0[2] = node4;
      nodeArray0[4] = node2;
      Node node5 = null;
      try {
        node5 = new Node(12, nodeArray0, 2008, 43);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      Node node0 = Node.newString(")qeU619bPi(");
      node0.isUnscopedQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.valueOf();
      Node node1 = Node.newNumber((double) 0, 30, 4095);
      node1.getInputId();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isEmpty();
      node0.setIsSyntheticBlock(true);
      node0.getProp(50);
      node0.toStringTree();
      node0.isContinue();
      // Undeclared exception!
      try { 
        node0.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      Node node0 = Node.newNumber((-473.0));
      node0.setIsSyntheticBlock(true);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      Node node0 = new Node(155);
      // Undeclared exception!
      try { 
        node0.copyInformationFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      Node node0 = Node.newNumber((double) 100);
      Node node1 = new Node(30, node0, node0);
      node0.setSourceEncodedPosition(15);
      node1.isNew();
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      Node node0 = Node.newString("");
      PriorityQueue<ObjectType> priorityQueue0 = new PriorityQueue<ObjectType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.valueOf();
      node0.getLength();
      node0.isNew();
      node0.hasChildren();
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      Node node0 = new Node(113, (-1548), 47);
      node0.putProp(634, (Object) null);
      Node node1 = new Node(31, node0, node0, node0, 56, 155);
      Node node2 = null;
      try {
        node2 = new Node(541, node0, node0, node0, node1, (-310), 42);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      int int0 = 882;
      Node.newNumber((-3873.57059), 882, 882);
      Node node0 = Node.newNumber(0.0);
      node0.setLength(730);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 0.0 [length: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      Node node0 = Node.newNumber((double) 800);
      node0.wasEmptyNode();
      Node node1 = new Node(800, node0);
      Node node2 = node1.removeFirstChild();
      node0.toString(true, true, false);
      node0.removeFirstChild();
      node0.setIsSyntheticBlock(false);
      node2.setIsSyntheticBlock(false);
      Node.extractLineno(42);
      node1.isCall();
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = node0.cloneTree();
      Node.newNumber((double) 57, 2, 49);
      node1.isCase();
      node1.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.clearSideEffectFlags();
      node0.isDefaultCase();
      Node node2 = new Node(44, node0, node0);
      node0.srcrefTree(node2);
      node1.isFor();
      int int0 = Node.IS_NAMESPACE;
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      Node node0 = Node.newString(")qeU619bPi(");
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(40, node0);
      node0.getInputId();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.isEmpty();
      node1.getChangeTime();
      node1.getType();
      node1.isEmpty();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("~P)/z@", "~P)/z@", (-1261), 53);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.isVarArgs();
      node0.isHook();
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      Node node0 = Node.newString(";is_constant_name");
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Comparator<ObjectType> comparator0 = (Comparator<ObjectType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<TemplateType> priorityQueue0 = new PriorityQueue<TemplateType>(comparator0);
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(113);
      charset0.encode(charBuffer0);
      charset0.aliases();
      Node node0 = Node.newString("Object#Key");
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node1 = new Node(64, node0, node0, 87855567, (-24));
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = Node.newNumber((double) 46, 64, 2);
      node1.isFalse();
      Node node3 = Node.newString("*<a`/?,~Exx9]r]7");
      node3.addChildrenToFront(node2);
      node1.setChangeTime(33);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.clearAllFlags();
      node3.isUnscopedQualifiedName();
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      Node node0 = new Node(101, 101, 96);
      node0.isLabel();
      node0.mayMutateArguments();
      node0.removeChildren();
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      Node node0 = new Node(107, 107, 107);
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 16777216, 16777216);
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = Node.newString("Object#Element", 51, 55);
      Node node2 = new Node(52, node1, node0, node1, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.clearAllFlags();
      node0.getAncestors();
      node0.isAnd();
      node0.isTypeOf();
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      Node node0 = Node.newString(1155, ",*&w@&");
      Node node1 = Node.newString(1, "this");
      node1.getInputId();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isFalse();
      node0.getChangeTime();
      node1.getType();
      node0.isDo();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      templateType0.getSlot(",*&w@&");
      node1.setIsSyntheticBlock(false);
      node0.getCharno();
      node1.hasOneChild();
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = new Node(54, node0, 42, 56);
      Node node2 = Node.newNumber((double) 40);
      node2.addSuppression(";is_constant_name");
      node1.addChildrenToFront(node2);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      Node node0 = new Node(118);
      Node node1 = new Node(3430, node0, node0, node0, node0);
      node1.setIsSyntheticBlock(true);
      node0.isOr();
      node1.isStringKey();
      node1.getStaticSourceFile();
      Node node2 = new Node(8, node1, 1, 32);
      Node node3 = node2.removeChildren();
      node0.isOr();
      node0.isFunction();
      node3.getNext();
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[6];
      JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0);
      ImmutableList<JSType> immutableList1 = immutableList0.reverse();
      JSType jSType0 = jSTypeRegistry0.createFunctionType(objectType0, (JSType) objectType0, (List<JSType>) immutableList1);
      jSTypeArray0[0] = jSType0;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType1 = modificationVisitor0.caseAllType();
      jSTypeArray0[1] = jSType1;
      Node node0 = Node.newString(4096, "qe01YH7iUva'");
      EnumType enumType0 = jSTypeRegistry0.createEnumType("XCRc=Z'$sjC", node0, jSTypeArray0[0]);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      objectType0.hasDisplayName();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      JSType jSType2 = enumElementType1.getPropertyType("Named type with empty name component");
      jSTypeArray0[2] = jSType2;
      EnumType enumType1 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, enumElementType0);
      jSTypeArray0[3] = (JSType) enumType1;
      jSTypeRegistry0.getType("Not declared as a constructor");
      jSTypeArray0[4] = null;
      jSTypeRegistry0.createEnumType("Unknown class name", node0, enumElementType1);
      jSTypeArray0[5] = (JSType) enumType1;
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isLabel();
      node1.mayMutateArguments();
      node1.isNE();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      Node node0 = new Node(13);
      node0.isEquivalentTo(node0, true, true, true);
      Iterable<Node> iterable0 = new ArrayList<Node>(57);
      node0.isRegExp();
      int int0 = 2710;
      node0.setType(2710);
      node0.isFunction();
      // Undeclared exception!
      try { 
        node0.setDouble(37);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2710
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node(116, node0);
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      Node node0 = new Node(32);
      node0.isQualifiedName();
      node0.isTypeOf();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // TYPEOF is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      Node node0 = Node.newNumber((-644.45923893312));
      node0.setType(32);
      node0.setIsSyntheticBlock(true);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node0.getSourcePosition();
      Node node1 = Node.newString(2105, "is_dispatcher", 52, 1523);
      node1.getJsDocBuilderForNode();
      node0.isLabel();
      node0.isCast();
      node0.isTypeOf();
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newNumber(524.0757941539079);
      node1.isEquivalentTo(node0, true, true, true);
      node0.children();
      node1.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("w%|@");
      JSType.toMaybeTemplateType((JSType) templateType0);
      Node.newString("Y");
      Node node2 = new Node((-1563));
      Node node3 = node2.useSourceInfoFrom(node1);
      node2.isWhile();
      Node node4 = new Node(29, 57, 1997);
      node2.addChildrenToFront(node3);
      node0.isTrue();
      node3.cloneNode();
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      Node node0 = new Node(118);
      Node node1 = new Node(3430, node0, node0, node0, node0);
      node1.setIsSyntheticBlock(true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.areAllFlagsSet();
      node0.isOr();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      InputId inputId0 = new InputId("Kw1}320D}");
      node0.setInputId(inputId0);
      node_SideEffectFlags0.setThrows();
      node1.isStringKey();
      node1.getStaticSourceFile();
      Node node2 = new Node(8, node1, 1, 32);
      node2.removeChildren();
      node0.isOr();
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      Node node0 = Node.newString("");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags5.setMutatesThis();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags6.areAllFlagsSet();
      Node.newNumber((-1798.58465506397));
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      Node node0 = new Node(86);
      node0.isString();
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1500);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags3.clearSideEffectFlags();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.areAllFlagsSet();
      Node node0 = Node.newString("oljJnBP32m]");
      node0.getChangeTime();
      node0.getAncestors();
      node0.isParamList();
      node0.getIntProp(1500);
      node0.isDefaultCase();
      Node node1 = node0.cloneNode();
      node1.setType(42);
      node1.isDo();
      node1.getBooleanProp(2);
      Node node2 = Node.newNumber(950.9365309541255);
      node0.getLastChild();
      node2.isString();
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      Node node0 = new Node(42);
      node0.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(33);
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.areAllFlagsSet();
      String string0 = "";
      Node node0 = Node.newString("");
      try { 
        node0.setDouble((-1715.9562));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      Node node0 = Node.newString(1155, ",*&w@&");
      node0.getInputId();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      CharBuffer charBuffer0 = CharBuffer.allocate(36);
      Charset charset0 = Charset.defaultCharset();
      charset0.encode(charBuffer0);
      charset0.aliases();
      node0.setDirectives((Set<String>) null);
      node0.checkTreeEqualsImpl(node0);
      node0.checkTreeEquals(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2069);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = new Node(50, 4, 37);
      node1.isDec();
      node0.isCast();
      node1.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      Node node0 = Node.newNumber((-1836.3));
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(37, node0);
      node0.setCharno(8);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.isEmpty();
      Node.newNumber((-1442.079422));
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      Node node0 = new Node(152, 152, 152);
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      Node node0 = new Node((-882));
      Node node1 = new Node((-882), node0, node0, node0, node0);
      Node node2 = node1.removeFirstChild();
      node2.setIsSyntheticBlock(false);
      node1.setIsSyntheticBlock(false);
      Node.extractLineno(256);
      node1.isCall();
      // Undeclared exception!
      try { 
        node0.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newNumber(524.0757941539079);
      node1.isEquivalentTo(node0, true, true, true);
      node0.children();
      node1.isRegExp();
      node0.setType(2710);
      node0.detachChildren();
      Node node2 = Node.newNumber(0.0);
      node1.getIntProp((-310));
      node0.isCase();
      String string0 = ".Um=buqvXO";
      Node node3 = Node.newString((-1511), ".Um=buqvXO");
      node0.isName();
      node1.isComma();
      node0.isContinue();
      node1.getChildAtIndex(0);
      // Undeclared exception!
      try { 
        node2.removeChildAfter(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      Node node0 = Node.newString(")qeU619bPi(");
      node0.isUnscopedQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.valueOf();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.getQualifiedName();
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(35);
      node0.toString(true, true, true);
      Node node1 = Node.newString("Object#Element");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      JSDocInfo jSDocInfo1 = new JSDocInfo(false);
      Node node2 = node1.setJSDocInfo(jSDocInfo1);
      node2.wasEmptyNode();
      Node node3 = new Node(0);
      node0.setIsSyntheticBlock(false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      jSTypeRegistry0.getObjectElementKey();
      Node.newString(56, "((l>UN/");
      node3.isName();
      node2.isComma();
      node3.isContinue();
      // Undeclared exception!
      try { 
        node3.getChildAtIndex(52);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, 1082, 1082);
      Node node1 = node0.cloneNode();
      node1.setCharno(3315);
      node1.putIntProp(1, 53);
      Node node2 = new Node(0, node0);
      Node node3 = node2.useSourceInfoFrom(node0);
      node3.siblings();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "BOOLEAN_OBJECT_FUNCTION_TYPE");
      node2.isNE();
      node3.mayMutateGlobalStateOrThrow();
      node0.isComma();
      node2.isReturn();
      node1.isCase();
      Node node4 = Node.newString(47, "BOOLEAN_OBJECT_FUNCTION_TYPE");
      node3.isEquivalentToTyped(node2);
      node3.isName();
      node4.isComma();
      node1.setDouble((-599.9584747));
      node1.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      Node node0 = new Node(85);
      Node node1 = new Node(85, node0, node0, node0, node0);
      node1.setSourceEncodedPosition(36);
      node1.isAssign();
      // Undeclared exception!
      try { 
        node1.addChildToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, 1082, 1082);
      node0.cloneNode();
      Node node1 = new Node(0, node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.siblings();
      String string0 = "`:]lyWD$o!_";
      node0.setSourceFileForTesting("`:]lyWD$o!_");
      node2.isEquivalentToShallow(node1);
      // Undeclared exception!
      try { 
        node2.addChildToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isGetterDef();
      Node node1 = new Node(40);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = new Node(2, node1, 30, 301);
      node3.setIsSyntheticBlock(true);
      Node node4 = new Node(57, 51, 153);
      node4.isTrue();
      node4.isTrue();
      node2.getIndexOfChild(node3);
      node3.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      Node node0 = new Node((-882));
      Node node1 = new Node((-882), node0, node0, node0, node0);
      node1.setIsSyntheticBlock(true);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node1.setWasEmptyNode(false);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      node0.setJSType(templateType0);
      node1.isInc();
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.isEquivalentTo(node0);
      node0.getJSDocInfo();
      node1.isThis();
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      Node node1 = new Node(53, node0, node0);
      node0.isEquivalentTo(node1);
      Node node2 = null;
      try {
        node2 = new Node(39, node0, 46, 48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      Node node0 = Node.newNumber((-1838.1283890124112));
      Node node1 = new Node(8, node0, node0);
      node0.addChildToBack(node1);
      Node node2 = null;
      try {
        node2 = new Node(37, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 0, 0);
      node0.getCharno();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node.mergeLineCharNo(15, 51);
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      Node node0 = Node.newString(")qeU619bPi(");
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(40, node0);
      node1.getInputId();
      Node node2 = Node.newString(")qeU619bPi(", 4, 8);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node0.isEmpty();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node3 = new Node(507);
      Node.newString(57, "");
      node1.copyInformationFromForTree(node2);
      // Undeclared exception!
      try { 
        Node.newString((String) null, 46, 4095);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      Node node0 = new Node(32);
      Node node1 = new Node(32, node0, node0, node0);
      node1.copyInformationFromForTree(node0);
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      Node node0 = Node.newNumber((double) 800);
      node0.wasEmptyNode();
      Node node1 = new Node(800, node0);
      Node node2 = node1.removeFirstChild();
      node0.toString(true, true, false);
      Node node3 = Node.newString("");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node4 = node3.setJSDocInfo(jSDocInfo0);
      node4.toString();
      node1.wasEmptyNode();
      node1.isEquivalentTo(node2, false, false, true);
      node0.setLength(52);
      Node node5 = new Node((-2380));
      Node node6 = new Node(43, node5, node3, node2);
      Node.newString("NUMBER 800.0");
      Node[] nodeArray0 = new Node[0];
      Node node7 = new Node(2, nodeArray0, 1468, 110);
      // Undeclared exception!
      try { 
        node7.addChildAfter(node4, node5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      Node node0 = new Node(133);
      Node node1 = Node.newString(29, "AzOyB");
      Node node2 = new Node((-3813), node0, node0, node1, 57, 49);
      // Undeclared exception!
      try { 
        node2.addChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      Node node0 = new Node(2021, 2021, 2021);
      node0.getStaticSourceFile();
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2021
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(996, (Node) null, (Node) null, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      Node node0 = new Node(512);
      // Undeclared exception!
      try { 
        node0.setString("$,sj4");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 512
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      Node node0 = new Node(112);
      node0.isDefaultCase();
      node0.setLineno(53);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1500);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags3.clearSideEffectFlags();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.areAllFlagsSet();
      Node node0 = Node.newString("oljJnBP32m]");
      node0.getChangeTime();
      node0.getAncestors();
      node0.isParamList();
      node0.getIntProp(1500);
      node0.isDefaultCase();
      Node node1 = node0.cloneNode();
      node1.setType(42);
      node1.isDo();
      node1.getBooleanProp(2);
      Node.newNumber(950.9365309541255);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      Node node0 = new Node(23);
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      Node node0 = new Node(156, 156, 156);
      Node node1 = new Node(156, node0, node0);
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isGetterDef();
      Node node1 = new Node(40);
      node0.copyInformationFromForTree(node1);
      Node node2 = new Node(2, node1, 30, 301);
      // Undeclared exception!
      try { 
        node2.removeChildAfter(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      Node node0 = new Node(0);
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(912, node0, node0, node0, node0, 44, 4095);
      node1.setIsSyntheticBlock(false);
      node0.isIf();
      node1.getCharno();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType.cast((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("-iPo]l~6/Q5TYT\"oD", node1, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      Node node0 = Node.newNumber((-644.45923893312));
      node0.setType(1034);
      node0.isVoid();
      // Undeclared exception!
      try { 
        node0.toString(false, false, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1034
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      Node node0 = Node.newNumber(0.5, (-882), 65535);
      node0.isWith();
      Node node1 = new Node(56, node0, (-1200), (-2557));
      node1.clonePropsFrom(node0);
      node1.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      Node node0 = Node.newNumber(1.2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      node0.setVarArgs(false);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      int int0 = (-3247);
      Node node0 = null;
      try {
        node0 = new Node(312, nodeArray0, 312, (-3247));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 0, 0);
      Node node2 = Node.newString((-1435), "");
      Node node3 = new Node(56, node2, node1, 2181, 55);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node3);
      Node node4 = new Node((-2020), node3, 32, 30);
      node4.isFalse();
      Node node5 = Node.newString("");
      node0.addChildrenToFront(node4);
      node5.setChangeTime((-3521));
      node1.isEquivalentTo(node3);
      node5.isBreak();
      node2.getAncestor(54);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      Node node0 = new Node(16777216, 16777216, 16777216);
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = new Node(52, node0, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node1.setSourceEncodedPositionForTree(52);
      node0.getChangeTime();
      node0.isDebugger();
      // Undeclared exception!
      try { 
        node0.getAncestor((-1123));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.getAncestor(49);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Comparator<ObjectType> comparator0 = (Comparator<ObjectType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<TemplateType> priorityQueue0 = new PriorityQueue<TemplateType>(comparator0);
      PriorityQueue<ObjectType> priorityQueue1 = new PriorityQueue<ObjectType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) priorityQueue1);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.getSourceFileName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.valueOf();
      Node node1 = Node.newNumber(0.0, 47, 36);
      node0.setSourceEncodedPositionForTree(2390);
      node0.getChangeTime();
      node1.isDebugger();
      node1.getAncestor(8);
      node1.getAncestor(93);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Comparator<ObjectType> comparator0 = (Comparator<ObjectType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<TemplateType> priorityQueue0 = new PriorityQueue<TemplateType>(comparator0);
      PriorityQueue<ObjectType> priorityQueue1 = new PriorityQueue<ObjectType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) priorityQueue1);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.getSourceFileName();
      node0.getChangeTime();
      node0.getType();
      node0.isParamList();
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      templateType0.getSlot("Object#Key");
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      priorityQueue0.add(templateType1);
      Node node1 = Node.newString("Object#Element");
      Node node2 = node0.useSourceInfoFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      node2.isOr();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      node2.isStringKey();
      node2.getStaticSourceFile();
      node2.removeChildren();
      node0.getType();
      node1.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      String string0 = ")qeU619bPi(";
      Node node0 = Node.newString(")qeU619bPi(");
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(40, node0);
      node0.getInputId();
      Node node2 = Node.newString(")qeU619bPi(", 4, 8);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node0.isEmpty();
      // Undeclared exception!
      try { 
        node2.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      Node node0 = new Node(114, 42, 2068);
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Comparator<ObjectType> comparator0 = (Comparator<ObjectType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<TemplateType> priorityQueue0 = new PriorityQueue<TemplateType>(comparator0);
      PriorityQueue<ObjectType> priorityQueue1 = new PriorityQueue<ObjectType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) priorityQueue1);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.getSourceFileName();
      node0.getChangeTime();
      node0.getType();
      node0.isDo();
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      templateType0.getSlot("Object#Key");
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      priorityQueue0.add(templateType1);
      Node node1 = Node.newString("Object#Element");
      node0.useSourceInfoFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node2 = new Node(46);
      node0.isDec();
      node1.isCast();
      node1.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      Node node0 = new Node(2242, 2242, 2242);
      node0.isParamList();
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      Node node0 = new Node((-882));
      Node node1 = new Node((-882), node0, node0, node0, node0);
      node1.setIsSyntheticBlock(false);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node1.setWasEmptyNode(false);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      node0.setJSType(templateType0);
      node1.isInc();
      node0.getJSDocInfo();
      node1.isThis();
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Comparator<ObjectType> comparator0 = (Comparator<ObjectType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<TemplateType> priorityQueue0 = new PriorityQueue<TemplateType>(comparator0);
      PriorityQueue<ObjectType> priorityQueue1 = new PriorityQueue<ObjectType>(priorityQueue0);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) priorityQueue1);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.getSourceFileName();
      node0.getChangeTime();
      node0.getType();
      node0.isParamList();
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      priorityQueue0.add(templateType1);
      Node node1 = Node.newString("Object#Element");
      Node node2 = Node.newString("OKs{<'I#wv/$SKMGl+");
      Node node3 = node2.useSourceInfoFrom(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      node1.isOr();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      node2.isStringKey();
      node3.getStaticSourceFile();
      node3.removeChildren();
      node2.isOr();
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      Node node0 = new Node(129);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      Node node1 = new Node(116, 56, 54);
      node1.isOr();
      Node node2 = new Node(37, node0, node0, node1, 50, 127);
      node2.isAssignAdd();
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      Node node0 = Node.newString("Object#Key");
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      Node node0 = new Node((-1721), (-1721), (-1721));
      Node node1 = Node.newNumber(0.0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags4.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.setThrows();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags7.clearAllFlags();
      node1.getAncestors();
      node0.isNot();
      node1.isDec();
      node0.isTypeOf();
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      Node node0 = Node.newString(113, "");
      node0.getInputId();
      Node node1 = new Node(38, node0, node0, node0, node0, 55, 49);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      CharBuffer charBuffer0 = CharBuffer.allocate(48);
      Charset charset0 = Charset.defaultCharset();
      charset0.encode(charBuffer0);
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      node0.checkTreeEqualsImpl(node1);
      node1.checkTreeEquals(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = new Node(15, 48, 1101);
      node0.getChildCount();
      Node.newNumber(0.0);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.setDirectives(linkedHashSet0);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      Node node0 = Node.newNumber((-1837.358));
      Node node1 = new Node(37, node0);
      node1.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      Node node0 = Node.newString(1155, ",*&w@&");
      node0.getInputId();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      CharBuffer charBuffer0 = CharBuffer.allocate(110);
      Charset charset0 = Charset.defaultCharset();
      charset0.encode(charBuffer0);
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      templateType0.toMaybeTemplateType();
      PriorityQueue<TemplateType> priorityQueue0 = new PriorityQueue<TemplateType>();
      priorityQueue0.add(templateType0);
      Node node1 = Node.newString("7gl");
      Node node2 = node0.useSourceInfoFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.areAllFlagsSet();
      node0.isOr();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setThrows();
      Node node3 = new Node(100, node2, node2, node2, node2, 31, (-1813));
      node3.isGetterDef();
      templateType0.getRestrictedTypeGivenToBooleanOutcome(true);
      node3.getCharno();
      node1.isQualifiedName();
      Node.newString("Named type with empty name component", 0, 737);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      Node node0 = new Node((-882));
      Node node1 = new Node((-882), node0, node0, node0, node0);
      node1.putBooleanProp(4095, true);
      node0.mayMutateGlobalStateOrThrow();
      node1.setIsSyntheticBlock(false);
      node1.isFromExterns();
      // Undeclared exception!
      try { 
        node1.setString("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -882
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      boolean boolean0 = true;
      Node node0 = new Node(1468);
      Node node1 = new Node(29, node0, node0, 32, (-662));
      node0.srcref(node1);
      // Undeclared exception!
      try { 
        node0.toString(true, true, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1468
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Comparator<ObjectType> comparator0 = (Comparator<ObjectType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<TemplateType> priorityQueue0 = new PriorityQueue<TemplateType>(comparator0);
      PriorityQueue<ObjectType> priorityQueue1 = new PriorityQueue<ObjectType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) priorityQueue1);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.getSourceFileName();
      node0.getChangeTime();
      node0.getType();
      node0.isParamList();
      node0.toString();
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      templateType0.getSlot("Object#Key");
      priorityQueue0.add(templateType0);
      node0.setIsSyntheticBlock(false);
      node0.getProp(220);
      node0.toStringTree();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      Node node0 = Node.newString(")qeU619bPi(");
      node0.isUnscopedQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.valueOf();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      try { 
        node1.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING )qeU619bPi( [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      Node node0 = new Node(53, 53, (-662));
      Node node1 = new Node(3144);
      Node node2 = node0.copyInformationFrom(node1);
      node2.isEquivalentToShallow(node1);
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      Node node0 = Node.newNumber((double) 85);
      Node node1 = new Node(85, node0, node0, node0, 49, 39);
      node1.hasOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node_SideEffectFlags0.setMutatesArguments();
      node1.setSourceEncodedPosition(36);
      node1.isAssign();
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      Node node0 = new Node(34);
      Node node1 = new Node(2, node0, node0, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(1, node0, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      Node node0 = new Node(118, 118, 118);
      Node node1 = new Node(108);
      node1.isFalse();
      node0.isVar();
      node1.isDefaultCase();
      node1.isAssign();
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      Node node0 = new Node(94, 94, 94);
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-2209), nodeArray0);
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      Node node0 = Node.newNumber((double) 800);
      node0.wasEmptyNode();
      Node node1 = new Node(800, node0);
      Node node2 = node1.removeFirstChild();
      node0.toString(true, true, false);
      Node node3 = Node.newString("");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node3.setJSDocInfo(jSDocInfo0);
      node1.wasEmptyNode();
      node1.isEquivalentTo(node2, false, false, true);
      node0.setLength(52);
      Node node4 = new Node((-2380));
      Node node5 = new Node(43, node4, node3, node2);
      Node node6 = Node.newString("NUMBER 800.0");
      Node[] nodeArray0 = new Node[0];
      Node node7 = new Node(2, nodeArray0, 1468, 110);
      node0.isVar();
      node6.addChildToBack(node1);
      Node node8 = null;
      try {
        node8 = new Node(828, node6, node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      // Undeclared exception!
      try { 
        node0.srcref((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      Node node0 = Node.newString(")qeU619bPi(");
      node0.isUnscopedQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      node_SideEffectFlags0.valueOf();
      Node node1 = Node.newNumber((double) 57, 1365, 57);
      Node node2 = Node.newNumber((double) 31);
      node0.getString();
      node1.isCatch();
      node1.setType(29);
      // Undeclared exception!
      try { 
        node2.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      Node node0 = new Node((-1721), (-1721), (-1721));
      Node.newNumber(0.0);
      node0.isOnlyModifiesArgumentsCall();
      node0.isAssignAdd();
      Charset.defaultCharset();
      node0.setJSType((JSType) null);
      Node node1 = new Node(46);
      node1.isTry();
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      Node node0 = Node.newNumber(972.46042582721);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node0.getAncestors();
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      Node node0 = new Node(53, 53, (-662));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.areAllFlagsSet();
      node0.isOr();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      node0.isStringKey();
      Node node1 = Node.newString("com.google.common.base.CharMatcher$And");
      node1.getStaticSourceFile();
      Node node2 = new Node(37, node0, node1, node0, node1);
      node2.removeChildren();
      Node.newString("Z x\"C^t,!L", (-403), 15);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      Node node0 = new Node((-882));
      Node node1 = new Node((-882), node0, node0, node0, node0);
      node1.isEquivalentTo(node0, true, true, true);
      node1.setLength(32);
      node0.getIntProp(55);
      Node node2 = new Node(54, node1, node1, 86, 95);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node2.setJSDocInfo(jSDocInfo0);
      node1.setSourceEncodedPosition((-4841));
      node1.getLastChild();
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      Node node0 = Node.newString("[WG");
      Node node1 = new Node((-303), node0, node0, 54, 2);
      node0.mayMutateGlobalStateOrThrow();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
      node1.setSourceEncodedPosition((-872));
      node0.getLastChild();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      Node node0 = Node.newNumber(2121.89);
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isGetterDef();
      Node node1 = new Node(38, node0, node0, node0, node0, 51, 37);
      node1.removeChild(node0);
      node1.isFunction();
      node0.removeProp(49);
      // Undeclared exception!
      try { 
        node1.getQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 51 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      Node node0 = new Node(119);
      node0.isWith();
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.PropertyMap$1");
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      Node node0 = new Node(1451, 1451, 1451);
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      Node node0 = Node.newNumber(1356.21939, 577, 65535);
      node0.isWith();
      Node node1 = new Node(42, node0, 122, 2);
      node0.clonePropsFrom(node1);
      node1.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      Node node0 = new Node((-882));
      Node node1 = new Node((-882), node0, node0, node0, node0);
      node1.getInputId();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      CharBuffer charBuffer0 = CharBuffer.allocate(3567);
      Charset charset0 = Charset.defaultCharset();
      charset0.encode(charBuffer0);
      charset0.aliases();
      node1.checkTreeEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(584);
      node0.isNot();
      node1.getCharno();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node.mergeLineCharNo(12, (-1602));
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      Node node0 = new Node(34);
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      Node node0 = new Node(3430, 3430, 3430);
      Node node1 = new Node((-925), node0, node0, node0, node0, 0, 2069);
      Node node2 = node1.cloneTree();
      node2.setIsSyntheticBlock(false);
      Node node3 = new Node(45, 56, 38);
      node1.isTrue();
      node2.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      Node node0 = Node.newString(")qeU619bPi(");
      node0.isUnscopedQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2613);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.valueOf();
      Node node1 = Node.newNumber((double) 39, 40, 2550);
      node1.setSourceEncodedPositionForTree((-794));
      node1.getChangeTime();
      Node node2 = new Node(124);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node2.isDec();
      node1.isCast();
      node1.isTypeOf();
      node2.cloneTree();
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isQuotedString();
      node0.addChildrenToBack(node0);
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      String string0 = ")qeU619bPi(";
      Node node0 = Node.newString(")qeU619bPi(");
      node0.isUnscopedQualifiedName();
      Node node1 = Node.newNumber((double) 0, 30, 4095);
      node1.setSourceEncodedPositionForTree(38);
      node1.getChangeTime();
      Node node2 = new Node(29);
      node2.isDec();
      node0.isQuotedString();
      node0.isFromExterns();
      node0.isEmpty();
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NEG
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      Node node0 = new Node((-1721), (-1721), (-1721));
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, 76, 734);
      Node node1 = new Node(115, node0, node0, node0, node0);
      node1.isReturn();
      node1.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      Node node0 = new Node(133);
      Node node1 = new Node(33, node0, node0, node0, node0, (-4096), 12);
      node0.getJSDocInfo();
      node1.isQualifiedName();
      node0.isEquivalentToTyped(node1);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Comparator<ObjectType> comparator0 = (Comparator<ObjectType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<TemplateType> priorityQueue0 = new PriorityQueue<TemplateType>(comparator0);
      PriorityQueue<ObjectType> priorityQueue1 = new PriorityQueue<ObjectType>(priorityQueue0);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) priorityQueue1);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.getSourceFileName();
      node0.getChangeTime();
      node0.getType();
      node0.isParamList();
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      templateType0.getSlot("Object#Key");
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      priorityQueue0.add(templateType1);
      Node node1 = Node.newString("Object#Element");
      Node node2 = node0.useSourceInfoFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      node2.isOr();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      node1.isGetterDef();
      node1.getCharno();
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      Node node0 = Node.newString(1155, ",*&w@&");
      node0.getInputId();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      CharBuffer charBuffer0 = CharBuffer.allocate(110);
      Charset charset0 = Charset.defaultCharset();
      charset0.encode(charBuffer0);
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      node0.checkTreeEqualsImpl(node0);
      node0.checkTreeEquals(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2069);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = new Node(50, 4, 37);
      node1.getChildCount();
      Node.newNumber((-1.0));
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = null;
      try {
        node1 = new Node(16, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      Node node0 = Node.newString("vIUe_na97");
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      Node node0 = new Node((-882));
      Node node1 = new Node((-882), node0, node0, node0, node0);
      node0.mayMutateGlobalStateOrThrow();
      node1.setIsSyntheticBlock(false);
      node1.isFromExterns();
      // Undeclared exception!
      try { 
        node1.setString("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -882
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      Node node0 = new Node(355, 355, 355);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1392));
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 355
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 0, 0);
      node1.setOptionalArg(false);
      node1.setIsSyntheticBlock(true);
      node0.getProp((-741));
      node0.toStringTree();
      node0.isContinue();
      Node.newString((-289), "STRING \n");
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      Node node0 = null;
      try {
        node0 = new Node(48, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.isThrow();
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      Node node0 = new Node(126);
      node0.putProp(46, node0);
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      Node node0 = new Node(124);
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      Node node0 = new Node(3430, 3430, 3430);
      Node node1 = node0.cloneTree();
      node1.setIsSyntheticBlock(false);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node0.getSourcePosition();
      Node node2 = Node.newString((-3055), "Object#Key", 51, 12);
      node2.isLabel();
      node2.getSourcePosition();
      node1.isEmpty();
      node1.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      Node node0 = new Node(3430, 3430, 3430);
      Node node1 = new Node(51, node0, node0, node0, 52, 4095);
      node1.setIsSyntheticBlock(false);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node0.getSourcePosition();
      Node node2 = Node.newString((-3055), "Object#Key", 51, 12);
      node2.isLabel();
      node2.getSourcePosition();
      node1.isEmpty();
      node1.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      Node node0 = new Node(160, 160, 160);
      Node node1 = new Node(0, node0, node0, node0, node0, 38, 2);
      node1.srcref(node0);
      node1.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      Node node0 = Node.newString(")qeU619bPi(");
      node0.isUnscopedQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.valueOf();
      Node node1 = Node.newNumber((double) 0, 30, 4095);
      node1.setSourceEncodedPositionForTree(38);
      node1.srcref(node0);
      node1.getChangeTime();
      Node node2 = new Node(29);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.putBooleanProp(1, false);
      JSType jSType0 = null;
      JSType.toMaybeTemplateType((JSType) null);
      JSType.toMaybeTemplatizedType((JSType) null);
      // Undeclared exception!
      try { 
        FunctionType.getTopDefiningInterface((ObjectType) null, "Not declared as a constructor");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(35);
      node0.toString(true, true, true);
      Node node1 = Node.newString("Object#Element");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      JSDocInfo jSDocInfo1 = new JSDocInfo(false);
      Node node2 = node1.setJSDocInfo(jSDocInfo1);
      node2.wasEmptyNode();
      Node node3 = new Node(0);
      node0.setIsSyntheticBlock(false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      Node node4 = new Node(2166, node0, 51, 4476);
      node4.isOnlyModifiesThisCall();
      node4.putIntProp(12, 15);
      node4.isLocalResultCall();
      node4.setJSType(templateType0);
      node0.isInc();
      node2.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      Node.mergeLineCharNo(29, (-54));
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = new Node(25, node0, node0, node0, node0);
      Node node2 = Node.newString(54, "Object#Key");
      Node node3 = node2.useSourceInfoIfMissingFrom(node0);
      Object object0 = new Object();
      node1.srcrefTree(node2);
      node0.getAncestors();
      node3.setCharno(52);
      node3.isNot();
      node3.getCharno();
      node2.getDirectives();
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = new Node(25, node0, node0, node0, node0);
      Node node2 = Node.newString(54, "Object#Key");
      Node node3 = node2.useSourceInfoIfMissingFrom(node0);
      Object object0 = new Object();
      node0.getAncestors();
      node3.setCharno(52);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
      node_SideEffectFlags0.setThrows();
      node0.detachFromParent();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(50);
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node.newString(0, "Object#Key");
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      Node node0 = Node.newNumber((-644.45923893312));
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(37, node0);
      node0.getInputId();
      node0.setCharno(8);
      node1.checkTreeTypeAwareEqualsImpl(node1);
      node0.isEmpty();
      Node node2 = new Node(4095);
      node1.addChildrenToFront(node2);
      node1.wasEmptyNode();
      Node node3 = Node.newString("com.google.javascript.rhino.Node$AncestorIterable", (-1961), 42);
      node1.isQualifiedName();
      node2.clonePropsFrom(node1);
      node1.isBlock();
      node3.isBlock();
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      Node node1 = node0.copyInformationFrom(node0);
      node0.isEquivalentTo(node1);
      node1.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      Node node0 = new Node((-882));
      Node node1 = new Node((-882), node0, node0, node0, node0);
      node1.setIsSyntheticBlock(false);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(155);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.clearAllFlags();
      node1.isUnscopedQualifiedName();
      node1.getInputId();
      node0.hasOneChild();
      node1.isNoSideEffectsCall();
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      Node node0 = new Node((-1721));
      node0.getChangeTime();
      node0.getLength();
      Node node1 = new Node(40, node0, 29, 50);
      Node node2 = Node.newNumber(972.46042582721);
      Node node3 = node1.useSourceInfoFrom(node2);
      node1.isDec();
      node1.isVoid();
      node0.getBooleanProp((-1000));
      // Undeclared exception!
      try { 
        node2.replaceChild(node3, node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 0, 0);
      Node node2 = Node.newString(800, "");
      node1.mayMutateArguments();
      Node node3 = node1.cloneNode();
      node3.putProp(46, node1);
      node3.isTry();
      node3.getProp(1);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node2;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      node3.isInc();
      node0.getJSDocInfo();
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[0] = (JSType) templateType0;
      jSTypeArray0[1] = (JSType) templateType0;
      jSTypeArray0[2] = (JSType) templateType0;
      jSTypeArray0[3] = (JSType) templateType0;
      Node node4 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node4.getSourceFileName();
      node2.isEquivalentTo(node2, false, false, false);
      Node.newString(4095, "#=:vqQT*Br", 38, 92);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      Node node0 = new Node(53, 53, (-662));
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      Node node0 = Node.newString("%By4nh;(CP<8jU#O)J");
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isBlock();
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      Node node0 = new Node(4);
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      Node node0 = new Node(15);
      Node node1 = new Node(15, node0, node0, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(15, node1, node1, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      Node node0 = new Node(50, (-162), 50);
      Node node1 = new Node(50, node0, node0, node0, node0);
      Node node2 = Node.newString("xuXC{3P/");
      Node node3 = null;
      try {
        node3 = new Node(1, node2, node2, node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      Node node0 = Node.newString("23;<r");
      Node node1 = new Node(2, node0, node0, node0, 46, 15);
      Node node2 = null;
      try {
        node2 = new Node(57, node1, node1, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      Node node0 = new Node(42);
      node0.setChangeTime(42);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.AbstractMapBasedMultimap");
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      node0.addSuppression("new child has existing parent");
      node0.toStringTree();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 16777216, 16777216);
      node0.toString(true, true, true);
      Node.newString("");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.wasEmptyNode();
      Node node2 = new Node((-2061));
      node2.setIsSyntheticBlock(true);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      node0.isLocalResultCall();
      node1.setJSType(templateType0);
      node0.isInc();
      node1.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      Node node0 = new Node(53, 53, (-696));
      Node node1 = new Node(29, node0);
      Node node2 = null;
      try {
        node2 = new Node(2, node0, node0, 47, (-696));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(35, node0, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags6.setMutatesGlobalState();
      Node node2 = new Node(1427);
      node2.copyInformationFromForTree(node0);
      node0.setLineno(102);
      node2.mayMutateArguments();
      node1.isIn();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got PARAM_LIST
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      Node node0 = Node.newNumber((-1838.1283890124112));
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node1 = null;
      try {
        node1 = new Node(52, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isGetterDef();
      Node node1 = new Node(43);
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      Node node2 = Node.newNumber(0.0, 37, 40);
      nodeArray0[2] = node2;
      nodeArray0[3] = node0;
      nodeArray0[4] = node1;
      nodeArray0[5] = node0;
      nodeArray0[6] = node1;
      nodeArray0[7] = node0;
      nodeArray0[8] = node1;
      Node node3 = null;
      try {
        node3 = new Node(57, nodeArray0, 4, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      Node node0 = new Node(26);
      node0.isNot();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      Node node0 = new Node(133);
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(25, node0, node0, node0, node0);
      Node node2 = Node.newString(54, "Object#Key");
      Node node3 = node2.useSourceInfoIfMissingFrom(node0);
      Object object0 = new Object();
      node0.getAncestors();
      node3.setCharno(52);
      node3.isNot();
      node3.getCharno();
      node2.getDirectives();
      Node.mergeLineCharNo(54, 516);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Comparator<ObjectType> comparator0 = (Comparator<ObjectType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<TemplateType> priorityQueue0 = new PriorityQueue<TemplateType>(comparator0);
      PriorityQueue<ObjectType> priorityQueue1 = new PriorityQueue<ObjectType>(priorityQueue0);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) priorityQueue1);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.getSourceFileName();
      node0.getChangeTime();
      node0.getType();
      node0.isParamList();
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      priorityQueue0.add(templateType1);
      Node node1 = Node.newString("Object#Element");
      node0.useSourceInfoFrom(node1);
      node0.isWhile();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) templateType1;
      priorityQueue1.add(templateType1);
      objectArray0[1] = (Object) null;
      node1.getProp(40);
      objectArray0[2] = null;
      try { 
        node0.setDouble(46);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      Node node0 = new Node(128);
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 128
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      Node node0 = Node.newString("V>GM^T2\"\"H");
      Node node1 = new Node(46);
      Node node2 = new Node(36, node1, node1, 56, 16);
      node2.setSourceEncodedPositionForTree((-335));
      Node node3 = new Node(30, node2, node0, node2);
      node2.isGetElem();
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      Node node0 = Node.newString("dC");
      // Undeclared exception!
      try { 
        node0.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      Node node0 = new Node((-882));
      Node node1 = new Node((-882), node0, node0, node0, node0);
      node1.setIsSyntheticBlock(false);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_PROTOTYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0);
      jSTypeRegistry0.createFunctionType(objectType0, (JSType) objectType0, (List<JSType>) immutableList0);
      // Undeclared exception!
      try { 
        node0.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      Node node0 = new Node(3430, 3430, 3430);
      Node node1 = new Node((-925), node0, node0, node0, node0, 0, 2069);
      Node node2 = node1.cloneTree();
      node2.setIsSyntheticBlock(false);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      node2.setJSType(templateType0);
      node0.isInc();
      node1.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      Node node0 = new Node(895, 501, 38);
      node0.setType(130);
      Node node1 = Node.newNumber(499.3923904549638);
      node0.isEquivalentTo(node1);
      node0.wasEmptyNode();
      node0.getChangeTime();
      node1.isSyntheticBlock();
      node0.getSideEffectFlags();
      node0.isVarArgs();
      node0.hasChildren();
      node0.isOptionalArg();
      node0.getProp(38);
      node0.isFromExterns();
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      int int0 = Node.FLAG_LOCAL_RESULTS;
      Node node0 = Node.newString(100, "_dU.{*E=o^3R6'l!");
      node0.isOr();
      Node node1 = Node.newString("<invalid>", 40, 2123);
      Node node2 = new Node(2282, 54, 32);
      Node node3 = new Node(302, node2);
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node2.isTry();
      node1.isNew();
      node0.getIndexOfChild((Node) null);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      Node node0 = new Node(98);
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      Node node0 = Node.newString((-2134), "com.google.javascript.rhino.Node$IntPropListItem", 0, 0);
      node0.setSourceFileForTesting("com.google.javascript.rhino.Node$IntPropListItem");
      node0.getJSDocInfo();
      node0.putProp(0, "com.google.javascript.rhino.Node$IntPropListItem");
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      Node node0 = Node.newString(1155, ",*&w@&");
      Node node1 = Node.newString(1, "this");
      node1.getInputId();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isFalse();
      node1.addChildrenToFront(node0);
      node0.setChangeTime(12);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node0.detachFromParent();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(51);
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.newString((-4096), "this");
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      Node node0 = Node.newString("V>GM^T2\"\"H");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(50, node0, node0, node0, node0, 4, 56);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.isThrow();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      Node node0 = new Node(117);
      node0.setSourceFileForTesting("BITAND");
      node0.setSourceFileForTesting(") must be lessthan the `umber of elemets hat remained (");
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CONTINUE [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000005] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      Node node0 = Node.newString("vIie_na 7");
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[6];
      JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0);
      ImmutableList<JSType> immutableList1 = immutableList0.reverse();
      JSType jSType0 = jSTypeRegistry0.createFunctionType(objectType0, (JSType) objectType0, (List<JSType>) immutableList1);
      jSTypeArray0[0] = jSType0;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType1 = modificationVisitor0.caseAllType();
      jSTypeArray0[1] = jSType1;
      Node node0 = Node.newString(4096, "qe01YH7iUva'");
      EnumType enumType0 = jSTypeRegistry0.createEnumType("XCRc=Z'$sjC", node0, jSTypeArray0[0]);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      objectType0.hasDisplayName();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      JSType jSType2 = enumElementType1.getPropertyType("Named type with empty name component");
      jSTypeArray0[2] = jSType2;
      EnumType enumType1 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, enumElementType0);
      jSTypeArray0[3] = (JSType) enumType1;
      jSTypeRegistry0.getType("Not declared as a constructor");
      jSTypeArray0[4] = null;
      jSTypeRegistry0.createEnumType("Unknown class name", node0, enumElementType1);
      jSTypeArray0[5] = (JSType) enumType1;
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.hasMoreThanOneChild();
      node1.mayMutateArguments();
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      Node node0 = Node.newNumber(1.2);
      node0.addSuppression("29j?");
      Node node1 = new Node(47, node0, 2, 49);
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(2, node0, node0, node0, 46, 15);
      Node node2 = null;
      try {
        node2 = new Node(32, node1, node0, node0, node1, 2, 49);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      Node node0 = new Node((-1));
      Node node1 = new Node(53, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(57, node0, node1, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(49);
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags6.clearAllFlags();
      node_SideEffectFlags5.setMutatesGlobalState();
      Node node0 = new Node(93);
      Node node1 = new Node(4095, node0, node0);
      node0.copyInformationFromForTree(node1);
      Node node2 = null;
      try {
        node2 = new Node(83, node0, (Node) null, node1, (Node) null, 148, 49);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      Node node0 = Node.newNumber(151.0);
      node0.addSuppression("vIie_na 7");
      node0.addSuppression("j],TeAv*sG|w=J;q=]");
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      Node node0 = new Node(118);
      Node node1 = new Node(3430, node0, node0, node0, node0);
      node1.setIsSyntheticBlock(true);
      node0.getProp(0);
      node0.toStringTree();
      node1.isContinue();
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 0, 0);
      node1.setIsSyntheticBlock(true);
      node1.isIf();
      node0.getCharno();
      node1.getInputId();
      node1.hasOneChild();
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      Node node0 = new Node((-1721));
      Node node1 = node0.cloneNode();
      node0.setLength(49);
      node1.isStringKey();
      node1.getStaticSourceFile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.clearAllFlags();
      node0.isUnscopedQualifiedName();
      node1.getInputId();
      node0.hasOneChild();
      node1.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      Node node0 = new Node(124);
      Node node1 = Node.newNumber((double) 54, 38, 36);
      Node node2 = new Node(120, node0, node1, node1, node1, 1, 4095);
      Node node3 = node0.useSourceInfoFrom(node2);
      node2.siblings();
      node1.setSourceFileForTesting("`:]l!OyWD+!_");
      node3.isEquivalentToShallow(node1);
      node3.getCharno();
      node3.getCharno();
      node2.hasOneChild();
      node2.getLength();
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      Node node0 = Node.newString(1155, ",*&w@&", 1155, 1155);
      Node node1 = Node.newString(1, "this");
      node1.getInputId();
      node1.addChildrenToFront(node0);
      node0.setChangeTime(12);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      Node node0 = Node.newNumber((double) 19);
      Node node1 = new Node(19, node0, node0, 39, 2062);
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      Node.extractCharno(98);
      Node node0 = Node.newString((-150), "");
      Node node1 = new Node(130, node0, node0, 42, 3665);
      node0.addChildToFront(node1);
      InputId inputId0 = new InputId("");
      node1.setInputId(inputId0);
      node1.setLength(40);
      node0.getInputId();
      node1.isExprResult();
      node0.srcref(node1);
      node1.getChildBefore(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      String string0 = "X";
      // Undeclared exception!
      try { 
        SimpleErrorReporter.getMessage0("wGR#E(L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property wGR#E(L
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      Node node0 = new Node(103);
      node0.setSourceFileForTesting("node is not a child");
      node0.getAncestor(103);
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      int int0 = 116;
      Node[] nodeArray0 = null;
      Node node0 = Node.newString(116, "G");
      node0.getSourceOffset();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry1.createParameters((List<JSType>) stack0);
      node1.isExprResult();
      // Undeclared exception!
      try { 
        SimpleErrorReporter.getMessage("", (Object[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property 
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      Node node0 = new Node(116);
      node0.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.valueOf();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node0 = Node.newNumber((double) 8, 8, (-2682));
      node0.setSourceEncodedPositionForTree((-1585));
      node0.getChangeTime();
      node0.isOnlyModifiesArgumentsCall();
      node0.isAssignAdd();
      Charset.defaultCharset();
      node0.setJSType((JSType) null);
      node0.isGetterDef();
      node0.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Node node0 = Node.newString(105, "Object#Element", 31, 42);
      Node node1 = new Node(105, node0, node0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("z8HkMkOdW>~23_/+t", node1, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Comparator<ObjectType> comparator0 = (Comparator<ObjectType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<TemplateType> priorityQueue0 = new PriorityQueue<TemplateType>(comparator0);
      PriorityQueue<ObjectType> priorityQueue1 = new PriorityQueue<ObjectType>(priorityQueue0);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) priorityQueue1);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.getSourceFileName();
      node0.getChangeTime();
      node0.getType();
      node0.isParamList();
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      templateType0.getSlot("Object#Key");
      Node node1 = new Node(49, node0, node0, node0, 65536, 465);
      node0.checkTreeEqualsImpl(node1);
      node1.checkTreeEquals(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      Node node2 = new Node(53, 3144, 1588);
      node1.getChildCount();
      Node node3 = Node.newNumber(0.0);
      // Undeclared exception!
      try { 
        node0.addChildBefore(node3, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Comparator<ObjectType> comparator0 = (Comparator<ObjectType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<TemplateType> priorityQueue0 = new PriorityQueue<TemplateType>(comparator0);
      PriorityQueue<ObjectType> priorityQueue1 = new PriorityQueue<ObjectType>(priorityQueue0);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) priorityQueue1);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.getSourceFileName();
      node0.getChangeTime();
      node0.getType();
      node0.isParamList();
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      priorityQueue0.add(templateType1);
      Node node1 = Node.newString("Object#Element");
      Node node2 = node0.useSourceInfoFrom(node1);
      node0.isWhile();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) templateType1;
      objectArray0[1] = (Object) null;
      node1.getProp(40);
      objectArray0[2] = null;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) jSTypeRegistry0;
      objectArray0[5] = (Object) immutableList0;
      objectArray0[6] = (Object) priorityQueue1;
      objectArray0[7] = (Object) node2;
      node2.toStringTree();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      Node node0 = new Node(94);
      // Undeclared exception!
      try { 
        node0.addChildrenToFront((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      Node node0 = new Node(24);
      node0.isGetElem();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node0.cloneTree();
      // Undeclared exception!
      try { 
        Charset.forName("com.google.javascript.rhino.Nde$AncestorIterable$1");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // com.google.javascript.rhino.Nde$AncestorIterable$1
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      node0.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      Node node0 = new Node((-1721));
      node0.isFromExterns();
      // Undeclared exception!
      try { 
        node0.setString("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1721
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("&Is*[", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(40, 31, 48);
      node0.isEquivalentToShallow(node1);
      node1.isDec();
      node0.useSourceInfoIfMissingFrom(node1);
      node1.hasChildren();
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      Node node0 = new Node(102);
      node0.setCharno(8);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(35, node0, node0, node0, node0);
      Node node2 = new Node(32, 46, 32);
      Node node3 = node2.useSourceInfoIfMissingFrom(node0);
      node2.getProp(40);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node2);
      node3.setCharno(52);
      node_AncestorIterable0.iterator();
      node3.getDirectives();
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[6];
      JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0);
      ImmutableList<JSType> immutableList1 = immutableList0.reverse();
      JSType jSType0 = jSTypeRegistry0.createFunctionType(objectType0, (JSType) objectType0, (List<JSType>) immutableList1);
      jSTypeArray0[0] = jSType0;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseAllType();
      Node node0 = Node.newString("Unknown class name", 0, 100);
      Node node1 = new Node(101, node0, node0, node0, 0, 37);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.getProp(1);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node2.setCharno(154);
      node_AncestorIterable0.iterator();
      Set<String> set0 = new HashSet<String>();
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      Node node0 = new Node(52);
      node0.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      Node node0 = new Node(42);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = null;
      try {
        node1 = new Node(30, nodeArray0, 43, 51);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      Node node0 = Node.newString("Y_L(@");
      Node node1 = new Node(1, node0, node0, node0, node0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      nodeArray0[2] = node1;
      Node node2 = null;
      try {
        node2 = new Node(126, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      Node node0 = new Node(82);
      Node[] nodeArray0 = new Node[18];
      nodeArray0[0] = node0;
      Node node1 = null;
      try {
        node1 = new Node(2, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Node node1 = new Node(30);
      Node node2 = Node.newString(57, "");
      Node node3 = node2.copyInformationFromForTree(node0);
      node3.setLineno(49);
      node1.isDec();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node2;
      nodeArray0[1] = node0;
      Node node4 = new Node(2, nodeArray0);
      node4.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node3.setSideEffectFlags((Node.SideEffectFlags) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      Node[] nodeArray0 = new Node[5];
      Node node0 = null;
      try {
        node0 = new Node((-2209), nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(312, nodeArray0, 312, (-3247));
      Node node1 = new Node(50, node0, node0, node0, (-3247), 57);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 0, 0);
      Node node2 = Node.newString(800, "");
      node1.mayMutateArguments();
      Node node3 = node1.cloneNode();
      node3.putProp(46, node1);
      node3.isTry();
      node3.getProp(1);
      int int0 = 14;
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node2;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node4 = null;
      try {
        node4 = new Node(14, nodeArray0, 2, 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = null;
      try {
        node0 = new Node(106, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      Node node0 = new Node(1155);
      node0.isGetterDef();
      Node node1 = new Node(51);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.getCharno();
      node1.getDirectives();
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isGetterDef();
      Node node1 = new Node(43);
      Node node2 = node0.copyInformationFromForTree(node1);
      // Undeclared exception!
      try { 
        node2.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      Node.newNumber((-1336.0431));
      Node node0 = new Node(51, 2435, 5148);
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      Node node0 = Node.newNumber((-3873.57059), 882, 882);
      Node node1 = Node.newNumber(0.0);
      node0.isCatch();
      node0.setType(882);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags5.setThrows();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.clearAllFlags();
      node_SideEffectFlags7.setMutatesGlobalState();
      Node node2 = new Node(125);
      node1.copyInformationFromForTree(node2);
      node1.setLineno(31);
      node2.mayMutateArguments();
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      Node node0 = Node.newNumber(2302.188812005);
      node0.isAdd();
      Node node1 = new Node(4, node0, node0, 54, 36);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.isReturn();
      node1.isGetterDef();
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      Node node0 = Node.newString("'");
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      Node node0 = Node.newString("8h");
      node0.setSourceFileForTesting("8h");
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      Node node0 = null;
      try {
        node0 = new Node(301, (Node) null, (Node) null, 38, 38);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      Node node0 = new Node(85, 85, 85);
      node0.setSourceEncodedPosition(36);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      Node node0 = Node.newString("[WG");
      Node node1 = new Node((-303), node0, node0, 54, 2);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
      node1.setSourceEncodedPosition((-872));
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString(221, "", 221, 3801);
      Node node1 = new Node(4095, (-662), 2);
      node1.setWasEmptyNode(false);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      node1.setJSType(templateType0);
      node0.isInc();
      node0.getJSDocInfo();
      node1.isThis();
      node1.isParamList();
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Comparator<ObjectType> comparator0 = (Comparator<ObjectType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<TemplateType> priorityQueue0 = new PriorityQueue<TemplateType>(comparator0);
      PriorityQueue<ObjectType> priorityQueue1 = new PriorityQueue<ObjectType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) priorityQueue1);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.getSourceFileName();
      node0.getChangeTime();
      node0.getType();
      node0.isParamList();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node1 = new Node(43, node0, 40, 50);
      Node node2 = Node.newString((-2080), "(9%|g1,Q!");
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Comparator<ObjectType> comparator0 = (Comparator<ObjectType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<TemplateType> priorityQueue0 = new PriorityQueue<TemplateType>(comparator0);
      PriorityQueue<ObjectType> priorityQueue1 = new PriorityQueue<ObjectType>(priorityQueue0);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) priorityQueue1);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.getSourceFileName();
      node0.getChangeTime();
      node0.getType();
      node0.isParamList();
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      priorityQueue0.add(templateType1);
      Node node1 = Node.newString("Object#Element");
      Node node2 = node0.useSourceInfoFrom(node1);
      node0.isWhile();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) templateType1;
      objectArray0[1] = (Object) null;
      node1.getProp(40);
      objectArray0[2] = null;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) jSTypeRegistry0;
      objectArray0[5] = (Object) immutableList0;
      objectArray0[6] = (Object) priorityQueue1;
      objectArray0[7] = (Object) node2;
      // Undeclared exception!
      try { 
        SimpleErrorReporter.getMessage((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PropertyResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      Node node0 = Node.newString(")qeU619bPi(");
      Node node1 = new Node(1, (-18), 48);
      node1.removeChildren();
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[6];
      JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0);
      ImmutableList<JSType> immutableList1 = immutableList0.reverse();
      JSType jSType0 = jSTypeRegistry0.createFunctionType(objectType0, (JSType) objectType0, (List<JSType>) immutableList1);
      jSTypeArray0[0] = jSType0;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType1 = modificationVisitor0.caseAllType();
      jSTypeArray0[1] = jSType1;
      Node node0 = Node.newString(4096, "qe01YH7iUva'");
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, jSTypeArray0[0]);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      JSType jSType2 = enumElementType1.getPropertyType("Named type with empty name component");
      jSTypeArray0[2] = jSType2;
      EnumType enumType1 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, enumElementType0);
      jSTypeArray0[3] = (JSType) enumType1;
      jSTypeRegistry0.getType("Not declared as a constructor");
      jSTypeArray0[4] = null;
      EnumType enumType2 = jSTypeRegistry0.createEnumType("Unknown class name", node0, enumElementType1);
      EnumType enumType3 = enumType2.toMaybeEnumType();
      jSTypeArray0[5] = (JSType) enumType3;
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      Node node0 = Node.newString("V>GM^T2\"\"H");
      Node node1 = new Node(46);
      node1.checkTreeEquals(node0);
      Node node2 = new Node(36, node1, node1, 56, 16);
      node2.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[6];
      JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0);
      ImmutableList<JSType> immutableList1 = immutableList0.reverse();
      JSType jSType0 = jSTypeRegistry0.createFunctionType(objectType0, (JSType) objectType0, (List<JSType>) immutableList1);
      jSTypeArray0[0] = jSType0;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType1 = modificationVisitor0.caseAllType();
      jSTypeArray0[1] = jSType1;
      Node node0 = Node.newString(4096, "qe01YH7iUva'");
      EnumType enumType0 = jSTypeRegistry0.createEnumType("XCRc=Z'$sjC", node0, jSTypeArray0[0]);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      JSType jSType2 = enumElementType1.getPropertyType("Named type with empty name component");
      jSTypeArray0[2] = jSType2;
      EnumType enumType1 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, enumElementType0);
      jSTypeArray0[3] = (JSType) enumType1;
      jSTypeRegistry0.getType("Not declared as a constructor");
      jSTypeArray0[4] = null;
      EnumType enumType2 = jSTypeRegistry0.createEnumType("Unknown class name", node0, enumElementType1);
      EnumType enumType3 = enumType2.toMaybeEnumType();
      jSTypeArray0[5] = (JSType) enumType3;
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2215);
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      Node node0 = Node.newString(0, "", 152, 2215);
      Node node1 = new Node(0, node0, 152, 661);
      node0.isSyntheticBlock();
      node0.getSourceFileName();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isOnlyModifiesThisCall();
      node2.setLineno(76);
      node2.setWasEmptyNode(true);
      node0.isWhile();
      node2.checkTreeEqualsImpl(node1);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      int int0 = (-4504);
      Node node3 = null;
      try {
        node3 = new Node(43, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      Node node0 = Node.newNumber((-636.1154904315075));
      Node node1 = new Node(1, node0, node0, node0, node0);
      node1.isReturn();
      Node node2 = null;
      try {
        node2 = new Node(53, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      Node node0 = new Node((-882));
      Node node1 = new Node((-882), node0, node0, node0, node0);
      node1.isEquivalentTo(node0, true, true, true);
      node1.setLength(32);
      node0.getIntProp(55);
      Node node2 = null;
      try {
        node2 = new Node(57, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CAST 155 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 0, 0);
      Node.newString(800, "");
      node1.mayMutateArguments();
      Node node2 = node1.cloneNode();
      node2.isTry();
      node1.mayMutateArguments();
      node1.getBooleanProp(42);
      node0.checkTreeEqualsImpl(node1);
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(55);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      Node node0 = new Node(125);
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2215);
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      Node node0 = Node.newString(0, "", 152, 2215);
      Node node1 = new Node(0, node0, 152, 661);
      node0.isSyntheticBlock();
      node0.getSourceFileName();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isOnlyModifiesThisCall();
      node1.removeChild(node0);
      node2.setLineno(76);
      node2.setWasEmptyNode(true);
      node0.isWhile();
      node2.checkTreeEqualsImpl(node1);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      // Undeclared exception!
      try { 
        node0.replaceChild(node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      Node node0 = new Node(28, 28, 28);
      node0.getDirectives();
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isGetterDef();
      Node node1 = new Node(43);
      node0.copyInformationFromForTree(node1);
      node0.getCharno();
      node0.getDirectives();
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      Node node0 = new Node(90);
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.valueOf();
      Node node0 = Node.newNumber((double) 8, 8, (-2682));
      node0.setSourceEncodedPositionForTree((-1585));
      node0.getChangeTime();
      node0.isOnlyModifiesArgumentsCall();
      node0.isAssignAdd();
      Charset.defaultCharset();
      node0.setJSType((JSType) null);
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) vector0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y9a<EwBs^h");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node1 = new Node(47, node0, 37, 29);
      node1.isRegExp();
      node1.isIf();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      Node node0 = new Node(105);
      node0.siblings();
      node0.isFunction();
      node0.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      Node node0 = new Node(128);
      node0.children();
      node0.setCharno(52);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      Node node0 = Node.newNumber((-1838.1283890124112));
      node0.setDouble((-4268.32824));
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      Node node0 = Node.newString("vIUe_na97");
      node0.isRegExp();
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 0, 0);
      node1.setIsSyntheticBlock(true);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-94));
      node_SideEffectFlags0.setMutatesArguments();
      node1.hasChildren();
      node0.isOptionalArg();
      node1.children();
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      Node node0 = Node.newString("%By4nh;(CP<8jU#O)J");
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newNumber(524.0757941539079);
      node1.isEquivalentTo(node0, true, true, true);
      node1.removeChildren();
      node0.children();
      node1.isRegExp();
      node0.setType(2710);
      node0.isFunction();
      node1.setDouble(37);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2710
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      Node node0 = new Node(103);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.toStringTree();
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      Node node0 = new Node(122, 122, 122);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.valueOf();
      node_SideEffectFlags0.valueOf();
      node0.isVoid();
      Node node1 = null;
      try {
        node1 = new Node(122, node0, (Node) null, node0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      Node node0 = new Node(155);
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      Node node0 = Node.newString("V>GM^T2\"\"H");
      node0.getLength();
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      Node node0 = Node.newNumber((double) 16777183);
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      Node node0 = new Node((-1721));
      node0.getChangeTime();
      node0.getLength();
      Node node1 = new Node(38);
      Node node2 = Node.newNumber(972.46042582721);
      Node node3 = node1.useSourceInfoFrom(node2);
      node1.isDec();
      node0.isVoid();
      node0.getBooleanProp((-1000));
      // Undeclared exception!
      try { 
        node2.replaceChild(node3, node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.isSetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList1);
      node0.isSetterDef();
      node0.isCase();
      Node node1 = Node.newString("com.google.javascript.rhino.jstype.AllType", (-1716), 0);
      node1.clonePropsFrom(node0);
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.valueOf();
      Node node0 = Node.newNumber((double) 8, 8, (-2682));
      node0.setSourceEncodedPositionForTree((-1585));
      node0.getChangeTime();
      node0.isOnlyModifiesArgumentsCall();
      node0.isCast();
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      Node node0 = new Node(118);
      Node node1 = new Node(3430, node0, node0, node0, node0);
      node1.setIsSyntheticBlock(true);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      // Undeclared exception!
      try { 
        node1.getChildAtIndex(22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      Node node0 = new Node(145);
      Node node1 = new Node(2, node0, node0, node0, node0, 48, 145);
      node1.replaceChild(node0, node1);
      // Undeclared exception!
      try { 
        node1.checkTreeEquals(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2215);
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newString(0, "", 152, 2215);
      Node node1 = new Node(0, node0, 152, 661);
      node0.isSyntheticBlock();
      node0.getSourceFileName();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isOnlyModifiesThisCall();
      node2.setLineno(76);
      node2.setWasEmptyNode(true);
      node0.isWhile();
      node2.checkTreeEqualsImpl(node1);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      // Undeclared exception!
      try { 
        node1.checkTreeEquals(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      Node node0 = new Node((-882));
      Node node1 = new Node((-882), node0, node0, node0, node0);
      node1.setIsSyntheticBlock(false);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node0.getChildAtIndex((-2373));
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      Node node0 = Node.newNumber((-4943.87155));
      node0.isOptionalArg();
      node0.toString(false, false, false);
      node0.getSourceFileName();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      Node node0 = null;
      try {
        node0 = new Node(48, (Node) null, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      Node node0 = new Node(154);
      Node node1 = new Node(52, 86, (-2124));
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      Node node0 = Node.newString("Z~");
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      Node node0 = new Node(155);
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      Node node0 = new Node((-1721));
      Node node1 = node0.cloneNode();
      node0.setLength((-922));
      node1.isStringKey();
      node1.getStaticSourceFile();
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      Node node0 = new Node((-882));
      Node node1 = new Node((-882), node0, node0, node0, node0);
      node1.setIsSyntheticBlock(false);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      jSTypeRegistry0.getObjectElementKey();
      node1.getChildBefore(node0);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(113, node0, node0, node0, node0, 16, 16);
      Node node2 = Node.newString(117, "");
      node2.setIsSyntheticBlock(true);
      node1.toStringTree();
      node2.isContinue();
      Node node3 = Node.newNumber((double) 2, 31, 57);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node3;
      Node node4 = new Node(124, nodeArray0);
      node4.addChildBefore(node2, node3);
      // Undeclared exception!
      try { 
        node3.getChildAtIndex(51);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      Node node0 = Node.newNumber((-599.44816731));
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(275);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      Node node0 = new Node(113);
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      Node node0 = Node.newNumber((double) 800);
      node0.wasEmptyNode();
      Node node1 = new Node(800, node0);
      Node node2 = node1.removeFirstChild();
      node0.toString(true, true, false);
      Node node3 = Node.newString("");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node4 = node3.setJSDocInfo(jSDocInfo0);
      node1.wasEmptyNode();
      node1.isEquivalentTo(node2, false, false, true);
      node0.setLength(52);
      node1.getIntProp(86);
      node2.isCase();
      node0.isArrayLit();
      node2.isSwitch();
      node1.detachChildren();
      Node node5 = Node.newNumber((double) 2);
      node5.getIntProp((-2394));
      node1.isCase();
      node0.isName();
      node1.isComma();
      node2.isContinue();
      // Undeclared exception!
      try { 
        node4.getChildAtIndex(53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      Node node0 = Node.newNumber(1.2);
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      Node node0 = new Node((-882));
      Node node1 = new Node((-882), node0, node0, node0, node0);
      node1.setIsSyntheticBlock(false);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      node0.setJSType(templateType0);
      node1.isInc();
      node0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      Node node0 = new Node((-858), (-858), (-858));
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString((String) null, (-934), (-934));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      Node node0 = new Node(38);
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      Node node0 = Node.newString(1155, ",*&w@&");
      Node node1 = Node.newString(1, "this");
      node1.getInputId();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isEmpty();
      node1.addChildrenToFront(node0);
      // Undeclared exception!
      try { 
        Node.newString((String) null, (-1705), 47);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      Node node0 = new Node(113);
      try { 
        node0.setString("source_file");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // WHILE is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      Node node0 = new Node((-1721));
      // Undeclared exception!
      try { 
        node0.setString("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1721
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      Node node0 = Node.newString(107, "sash_v");
      Node node1 = new Node(107, node0, node0, node0, node0, 42, 49);
      node0.checkTreeEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node((-673), node0, node0, node0, node0, 53, 4095);
      node0.mayMutateArguments();
      Node node2 = node1.cloneNode();
      node1.getBooleanProp(12);
      node2.checkTreeEqualsImpl(node0);
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(2957);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -673
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      Node node0 = new Node(131, 131, 131);
      node0.isUnscopedQualifiedName();
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 131
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newNumber((double) 2, 51, (-1442));
      node1.getJsDocBuilderForNode();
      Node node2 = Node.newString("^LlP>g[MF*");
      Node node3 = new Node(40, node2, node1, node2, node2, 30, 154);
      node0.isTypeOf();
      node0.isBreak();
      node1.addChildrenToBack(node0);
      // Undeclared exception!
      try { 
        node3.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      Node node0 = new Node(0);
      Node.newString("Node has exiting properties", 0, 54);
      Node.newString(13, "Q,", 76, 37);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 16777216, 16777216);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = node0.getLastSibling();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      Node node0 = new Node(393312, 393312, 393312);
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      Node node0 = Node.newNumber((-1837.358));
      Node node1 = new Node(37, node0);
      node0.isEquivalentToShallow(node1);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      Node node0 = new Node(155);
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      Node node0 = Node.newString(")qeU619bPi(");
      node0.isUnscopedQualifiedName();
      String string0 = "";
      Node node1 = Node.newString(47, "And(", 15, 39);
      // Undeclared exception!
      try { 
        node0.addChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      Node node0 = Node.newString("vIUe_na97");
      node0.mayMutateArguments();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags((Node.SideEffectFlags) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      Node node0 = Node.newString(")qeU619bPi(");
      node0.isUnscopedQualifiedName();
      Node node1 = Node.newString("");
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags((Node.SideEffectFlags) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      Node node0 = new Node(3430, 3430, 3430);
      Node node1 = node0.cloneTree();
      // Undeclared exception!
      try { 
        node1.toString(false, false, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 3430
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      Node node0 = Node.newNumber((double) 113);
      node0.hasChildren();
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      Node node0 = new Node(0);
      node0.getAncestors();
      node0.hasChildren();
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      Node node0 = Node.newString("d&~T^Cib3");
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      Node node0 = new Node(85);
      Node node1 = node0.cloneNode();
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newString("Node has existing properties.", 0, 54);
      node0.clonePropsFrom(node1);
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      Node node0 = Node.newString(1155, ",*&w@&");
      Node node1 = Node.newString(1, "this");
      node1.getInputId();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isEmpty();
      node1.addChildrenToFront(node0);
      node0.getDirectives();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append((String) null);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      Node node0 = new Node((-1936), (-1936), (-1936));
      Node node1 = Node.newNumber((double) 0);
      node0.copyInformationFromForTree(node1);
      node0.getProp((-1936));
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isGetterDef();
      Node node1 = new Node(38, node0, node0, node0, node0, 51, 37);
      node1.removeChild(node0);
      node1.isName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      Node node0 = new Node(94, 94, 94);
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      Node node0 = new Node(42);
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      Node node0 = Node.newNumber((-2601.0423344));
      node0.detachChildren();
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      Node node0 = Node.newString("", 49, 49);
      node0.isUnscopedQualifiedName();
      node0.setWasEmptyNode(true);
      Node node1 = Node.newString(1024, "", 482, 47);
      node0.detachChildren();
      node0.isName();
      node0.isLocalResultCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeTemplatizedType((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("", node1, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      Node node0 = Node.newString("}8~%*!WVX(hH(S");
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      Node node0 = Node.newString(")qeU61bPi(");
      node0.isAdd();
      Node node1 = Node.newString(4095, ")qeU61bPi(");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node2 = new Node(30, node1, node0, 42, 52);
      node2.removeChild(node1);
      node1.isEquivalentToTyped(node2);
      node2.setSideEffectFlags(43);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      Node node0 = new Node((-1936), (-1936), (-1936));
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags((-1936));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1936
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      Node node1 = new Node(53, node0, node0, node0, node0, 57, 57);
      node1.checkTreeEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      Node node0 = new Node(106, 106, 106);
      node0.isEquivalentTo(node0);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      int int0 = (-1199);
      int int1 = (-512);
      int int2 = 116;
      Node node0 = new Node((-4590), (-3138), (-1199));
      Node node1 = new Node(2957, node0, (-512), 36);
      node0.isEquivalentTo(node1);
      Node node2 = null;
      try {
        node2 = new Node(3092, node0, node0, node1, (-552), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      Node node0 = new Node((-546), 1149, (-1974));
      Node node1 = new Node(1637, node0, node0, node0, node0, 47, 51);
      node1.isWhile();
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      Node node0 = new Node((-905), (-905), (-905));
      // Undeclared exception!
      try { 
        node0.setDouble((-905));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -905
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("");
      Node node1 = new Node(39, node0, 35, 153);
      Node.newString("", 16, 37);
      node0.cloneTree();
      // Undeclared exception!
      try { 
        node1.setDouble(36);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      Node node0 = Node.newString("");
      try { 
        node0.setDouble(38);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      String string0 = "com.google.javascript.rhino.Node$IntPropListItem";
      int int0 = 0;
      Node node0 = Node.newString((-2134), "com.google.javascript.rhino.Node$IntPropListItem", 0, 0);
      // Undeclared exception!
      try { 
        node0.setDouble((-2134));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2134
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      Node node0 = Node.newNumber((-1610.388), 0, 0);
      Node node1 = Node.newString("", 49, 117);
      node1.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      Node.newNumber(0.0);
      node0.wasEmptyNode();
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      Node node0 = Node.newNumber((-2896.8590750622166));
      Node node1 = Node.newNumber((double) 30);
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      int int0 = 2359;
      Node node0 = Node.newNumber(0.0, (-1961), (-4096));
      Node node1 = new Node(2359, node0, 4, (-2025));
      Node node2 = Node.newString("com.google.common.base.CharMatcher$2", 0, 43);
      node1.siblings();
      // Undeclared exception!
      try { 
        node2.removeChild(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      Node node0 = new Node(96, 96, 96);
      node0.putBooleanProp(682, true);
      node0.getExistingIntProp(682);
      node0.isQualifiedName();
      node0.setChangeTime(96);
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 682
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      Node node0 = new Node(155);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(155);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 155
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      Node node0 = Node.newNumber((-644.45923893312));
      node0.setType(1034);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(2105);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 2105
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      int int0 = 31;
      // Undeclared exception!
      try { 
        Node.newString(0, (String) null, 31, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString(553, (String) null, 553, 553);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      Node node0 = Node.newNumber(0.6392570754945102);
      node0.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      Node node0 = new Node(0, 0, 613);
      node0.isOptionalArg();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType jSType0 = null;
      // Undeclared exception!
      try { 
        ImmutableList.of((JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      Node node0 = new Node(161);
      Node node1 = new Node(111, node0, node0, 49, 111);
      Node node2 = null;
      try {
        node2 = new Node(54, node1, node1, node0, 29, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      Node node0 = new Node(94, 94, 94);
      Node node1 = new Node(2, node0, node0, 39, 29);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      Node node0 = new Node(152);
      Node node1 = new Node(57, node0, node0);
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      String string0 = "The existing child node of the parent should not be null.";
      Node node0 = Node.newString((-1624), "The existing child node of the parent should not be null.");
      node0.isSyntheticBlock();
      Node node1 = new Node(501, node0, node0, (-1628), 47);
      Node node2 = Node.newString("ARRAY_FUNCTION_TYPE");
      node0.isOnlyModifiesArgumentsCall();
      Node node3 = null;
      try {
        node3 = new Node((-1624), node1, node2, node0, 867, 50);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      Node node0 = new Node(155);
      Node node1 = new Node(47, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(2, node0, node1, node0, 48, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      int int0 = 2871;
      int int1 = 11;
      String string0 = "*?.HsI^p> 4D";
      Node node0 = Node.newString("*?.HsI^p> 4D");
      Node node1 = new Node(49, node0, node0, node0, node0, 0, 8);
      Node node2 = null;
      try {
        node2 = new Node(11, node1, node0, node1, 16, (-1737));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-2883), 48, (-2883));
      Node node1 = new Node((-2883), node0);
      Node node2 = null;
      try {
        node2 = new Node((-2883), node1, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString(116, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      int int0 = (-2763);
      Node.extractLineno((-2763));
      // Undeclared exception!
      try { 
        Node.newString(0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      Node node0 = new Node(24);
      Node node1 = Node.newString(49, "com.google.javascript.rhino.Node$AncestorIterable$1", 12288, 4095);
      node0.srcrefTree(node1);
      node0.isGetElem();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node1.cloneTree();
      // Undeclared exception!
      try { 
        Charset.forName("com.google.javascript.rhino.Node$AncestorIterable$1");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // com.google.javascript.rhino.Node$AncestorIterable$1
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      Node.newString("OV7|/ycxg(=qUn/1", 137, 137);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(11);
      Node node0 = Node.newString("", 1828, 11);
      node0.getSourceFileName();
      node0.type = (-668);
      node0.getAncestors();
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      Node node0 = new Node(49);
      node0.getAncestors();
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.PropertyMap$1");
      node0.siblings();
      Node node1 = node0.getAncestor(0);
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      Node node0 = Node.newNumber((double) 85);
      Node node1 = new Node(85, node0, node0, node0, 51, 39);
      node1.getChangeTime();
      node1.getAncestors();
      int int0 = Node.ORIGINALNAME_PROP;
      Node node2 = node1.cloneNode();
      node2.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node_SideEffectFlags0.setAllFlags();
      node1.isComma();
      node0.isGetterDef();
      node0.getCharno();
      node0.isNE();
      node1.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      Node node0 = Node.newString("");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.getJsDocBuilderForNode();
      Node node1 = new Node((-2176), node0, node0, node0, node0);
      node0.isEquivalentToShallow(node1);
      Node node2 = Node.newString("Multiple entries with same ");
      node1.addChildrenAfter(node2, node0);
      node0.isUnscopedQualifiedName();
      // Undeclared exception!
      try { 
        node2.addChildrenAfter(node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      Node node0 = new Node(155);
      node0.getSourceFileName();
      Node node1 = Node.newNumber((double) 36);
      // Undeclared exception!
      try { 
        node0.addChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      Node node0 = new Node(102);
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(2, node0, node0, node0, 46, 15);
      // Undeclared exception!
      try { 
        node1.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      Node node0 = new Node(102);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      Node node0 = new Node(132);
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-872), (-872));
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.getJsDocBuilderForNode();
      node0.isComma();
      int int0 = 0;
      Node node1 = Node.newString(")qeU619bPi(");
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      Node node0 = Node.newNumber(127.37458577097243);
      node0.getSourceOffset();
      node0.getChildAtIndex((-1));
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      Node node0 = new Node(97);
      node0.setWasEmptyNode(false);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      Node node0 = Node.newNumber((-2360.17471472));
      node0.setIsSyntheticBlock(true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      Node node0 = new Node((-882));
      Node node1 = new Node((-882), node0, node0, node0, node0);
      node1.setIsSyntheticBlock(false);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      node0.setJSType(templateType0);
      node0.getChildAtIndex((-2373));
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      Node node0 = null;
      try {
        node0 = new Node((-3323), (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      int int0 = 116;
      Node node0 = null;
      try {
        node0 = new Node(116, (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      Node node0 = new Node(133, 133, 133);
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(120, node0, node0, node0, node0, 133, 1208);
      Node node2 = node1.copyInformationFromForTree(node0);
      node1.isGetElem();
      node1.isArrayLit();
      node2.isCatch();
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      Node node0 = Node.newString("vfsqfx3WM]Xc>");
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      Node node0 = new Node(122);
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      Node node0 = Node.newNumber((-3873.57059), 882, 882);
      Node.newNumber(0.0);
      node0.isCatch();
      node0.setType(882);
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      Node node0 = Node.newString(1155, ",*&w@&");
      Node node1 = new Node(57, node0);
      node1.getInputId();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isEmpty();
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      Node node0 = new Node(43, 43, 43);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      Node node0 = new Node(90, 90, 90);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      Node node0 = new Node(160, 160, 160);
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      Node node0 = Node.newString("vIUe_na97");
      Node node1 = new Node(37);
      node0.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      Node node1 = new Node(37, node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.addSuppression("is_constant_name");
      node0.addChildrenToFront(node0);
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      Node node0 = Node.newNumber(972.46042582721);
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      Node node0 = Node.newString(1155, ",*&w@&");
      Node node1 = Node.newString(1, "this");
      node1.getInputId();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isFalse();
      node1.addChildrenToFront(node0);
      node0.setChangeTime(12);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node0.isUnscopedQualifiedName();
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      Node node0 = Node.newNumber((-1837.358));
      Node node1 = new Node(37, node0);
      node1.isUnscopedQualifiedName();
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      Node node0 = new Node(155, 302, 155);
      Node node1 = new Node((-145), node0, node0, node0, node0);
      node0.isStringKey();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node2 = new Node(100, 131072, 1);
      Node node3 = Node.newNumber(39.0);
      node2.srcrefTree(node3);
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 0, 0);
      Node.newString(800, "");
      node1.mayMutateArguments();
      Node node2 = node1.cloneNode();
      node2.isCast();
      node1.mayMutateArguments();
      node1.setSourceEncodedPositionForTree(2);
      node0.checkTreeEqualsImpl(node1);
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(55);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      Node node0 = new Node(29, 29, 29);
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      Node.mergeLineCharNo(38, (-54));
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      Node node0 = new Node(1142);
      node0.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      Node node0 = Node.newNumber((-105.614636511794));
      node0.isHook();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      Node node0 = new Node(42);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.setDirectives(linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      Node node0 = new Node(112);
      node0.setSourceEncodedPositionForTree(112);
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.valueOf();
      Node node0 = Node.newNumber((double) 8, 8, (-2682));
      node0.setSourceEncodedPositionForTree((-1585));
      node0.getChangeTime();
      node0.isOnlyModifiesArgumentsCall();
      node0.isCast();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      Node node1 = new Node((-72), node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(3125, (Node) null, 3125, 3125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node node0 = null;
      int int0 = 375;
      Node node1 = null;
      try {
        node1 = new Node(0, (Node) null, 375, 124);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      Node node0 = new Node(124);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      node_SideEffectFlags0.setMutatesArguments();
      node0.setSourceEncodedPosition(124);
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList1);
      node0.isIf();
      node0.isSyntheticBlock();
      // Undeclared exception!
      try { 
        immutableList0.listIterator(1719);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index (1719) must not be greater than size (0)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      Node.newString(106, "");
      Node node0 = new Node(102);
      node0.isQualifiedName();
      node0.isEquivalentToTyped(node0);
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      Node node0 = Node.newString(1155, ",*&w@&");
      node0.getInputId();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      CharBuffer charBuffer0 = CharBuffer.allocate(110);
      Charset charset0 = Charset.defaultCharset();
      charset0.encode(charBuffer0);
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      node0.checkTreeEqualsImpl(node0);
      node0.checkTreeEquals(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2069);
      node0.isNot();
      node0.getCharno();
      Set<String> set1 = new LinkedHashSet<String>();
      Node.mergeLineCharNo(42, 1977);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 1109);
      Node node1 = node0.getLastSibling();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("inferred");
      node0.copyInformationFromForTree(node1);
      String string0 = "C=lFe#'";
      node_FileLevelJsDocBuilder0.append("C=lFe#'");
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      node0.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      Node node0 = new Node(128);
      Node node1 = new Node(2, node0, node0, node0);
      node1.checkTreeEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      Node node0 = new Node(0);
      node0.getAncestors();
      node0.setJSType((JSType) null);
      Node node1 = new Node(40, node0, 40, 55);
      node1.setSourceFileForTesting("");
      node0.setLineno(30);
      node0.isDec();
      node1.isBlock();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      Node node0 = new Node((-696));
      Node node1 = new Node(54);
      node0.setLineno((-696));
      Node node2 = Node.newNumber((double) 30);
      node2.isVoid();
      Node node3 = new Node(52, node1, node2, node0, node2);
      node1.isStringKey();
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      node0.setSourceFileForTesting("vIUe_na97");
      node0.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      Node node0 = new Node(145);
      Node node1 = new Node(145);
      Node node2 = new Node(2, node0, node0, node0, node1, 48, 43);
      node2.replaceChild(node0, node2);
      node0.isAssign();
      node0.getDirectives();
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 13, 0);
      Node.newString(800, "");
      node1.mayMutateArguments();
      Node node2 = node1.cloneNode();
      node2.putProp(46, node1);
      node1.isWhile();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      JSDocInfo jSDocInfo1 = new JSDocInfo(false);
      node2.setJSDocInfo(jSDocInfo0);
      node0.wasEmptyNode();
      Node node3 = new Node(4);
      Node node4 = Node.newNumber(0.0);
      node4.setIsSyntheticBlock(false);
      node0.setLength(3059);
      try { 
        node2.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // WHILE 13 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000008] [is_namespace: com.google.javascript.rhino.Node$ObjectPropListItem@0000000005] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(113, node0, node0, node0, node0, 0, 0);
      node1.mayMutateArguments();
      node1.cloneNode();
      node1.getBooleanProp(42);
      node0.checkTreeEqualsImpl(node1);
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(55);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      Node node0 = new Node(160, 160, 160);
      Node node1 = new Node(52, node0, node0, node0, node0, 4095, 49);
      node1.srcrefTree(node0);
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      Node node1 = node0.srcrefTree(node0);
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      Node node0 = Node.newNumber((-1959.447855));
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      Node node0 = Node.newNumber((-641.732494738));
      node0.setWasEmptyNode(true);
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      Node node0 = Node.newString(".");
      node0.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags1.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      Node node0 = Node.newNumber((-1837.358));
      Node node1 = new Node(37, node0);
      node1.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      Node node0 = Node.newNumber((-1824.3595114896673));
      node0.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      Node node0 = new Node(107, 107, 107);
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      Node node0 = new Node(96, 96, 96);
      node0.putIntProp(96, 96);
      node0.setChangeTime(96);
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 96
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      Node node0 = new Node(33);
      node0.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      Node node0 = new Node(147);
      node0.setLineno(147);
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      Node node0 = new Node(94);
      node0.setChangeTime(94);
      node0.getProp(94);
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      Node.extractCharno(1839);
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      Node node0 = Node.newNumber((double) 155);
      node0.setLength(155);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 155.0 [length: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      Node node0 = new Node(155);
      // Undeclared exception!
      try { 
        node0.replaceChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      Node node0 = Node.newNumber((-1838.1283890124112));
      node0.checkTreeEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2215);
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      Node node0 = Node.newString(0, "", 152, 2215);
      Node node1 = new Node(0, node0, 152, 661);
      node0.isSyntheticBlock();
      node0.getSourceFileName();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isOnlyModifiesThisCall();
      node2.setLineno(76);
      node2.setWasEmptyNode(true);
      node0.isWhile();
      node2.checkTreeEqualsImpl(node1);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      int int0 = (-4504);
      // Undeclared exception!
      try { 
        node0.replaceChild(node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      Node node0 = new Node((-31), (-31), (-31));
      Node node1 = new Node(38, node0, node0);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 1109);
      Node node1 = node0.getLastSibling();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node0.copyInformationFromForTree(node1);
      node_FileLevelJsDocBuilder0.append("C=lFe#'");
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(91, node0, node0, 15, (-860));
      node1.setType(46);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = Node.newString(38, "Cy3VPW)q8E~.$uBfG");
      node2.isCatch();
      node2.isUnscopedQualifiedName();
      node0.getProp(3760);
      node1.isTry();
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      Node node0 = Node.newNumber((-644.0));
      node0.setType(38);
      node0.isSwitch();
      Node node1 = Node.newNumber((double) 48);
      node1.cloneNode();
      // Undeclared exception!
      try { 
        node0.isUnscopedQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      Node node1 = new Node(49, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      Node node1 = new Node(36, node0, node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      // Undeclared exception!
      try { 
        node2.replaceChildAfter(node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3799);
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(3799, node0, node0, node0);
      node0.toString(false, false, false);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      Node node0 = new Node(135);
      Node node1 = new Node(2, node0, node0, node0, 56, 29);
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(125, (Node) null, (Node) null, (Node) null, (Node) null, 125, 125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      // Undeclared exception!
      try { 
        node0.toString(false, false, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 34
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      Node node0 = new Node((-882));
      Node node1 = new Node((-882), node0, node0, node0, node0);
      node1.setIsSyntheticBlock(false);
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node2 = Node.newNumber((-642.1652103339881));
      Node node3 = null;
      try {
        node3 = new Node(411, node1, node0, node2, node0, 102, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      Node node0 = new Node(125);
      node0.isLabel();
      node0.getNext();
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Node node1 = node0.cloneTree();
      assertNotSame(node1, node0);
      assertTrue(node1.isWhile());
      assertEquals(462961, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      int int0 = 3430;
      Node node0 = new Node(3430, 3430, 3430);
      Node node1 = new Node((-925), node0, node0, node0, node0, 0, 2069);
      Node node2 = node1.cloneTree();
      // Undeclared exception!
      try { 
        node2.toString(false, false, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -925
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = new Node(30, node0, node0, node0, node0, 57, 1);
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(30, node1.getType());
      assertEquals(233473, node1.getSourcePosition());
      assertEquals(115, node0.getType());
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node((-1256), 1545, 116);
      nodeArray0[0] = node0;
      Node node1 = Node.newString((-2007), "pX|]FETr+>x<X@E3");
      nodeArray0[1] = node1;
      Node node2 = Node.newNumber((-45.936823599750596), 54, 2343);
      nodeArray0[2] = node2;
      Node node3 = new Node((-1256), nodeArray0);
      Node node4 = new Node(1545, node3, 8, 16);
      Node node5 = node4.cloneTree();
      Node node6 = Node.newNumber((double) 54, 56, 111);
      node5.isCase();
      Node[] nodeArray1 = new Node[4];
      nodeArray1[0] = node6;
      nodeArray1[1] = node1;
      nodeArray1[2] = node1;
      nodeArray1[3] = node4;
      Node node7 = null;
      try {
        node7 = new Node(29, nodeArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      Node node0 = new Node(108, 108, 108);
      node0.cloneTree();
      int int0 = Node.COLUMN_BITS;
      boolean boolean0 = node0.isIf();
      assertEquals(442476, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      Node node0 = Node.newString("%o");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(54, node0, node0);
      Node node2 = Node.newString("%o", 29, 57);
      node2.isQualifiedName();
      node1.addChildBefore(node2, node0);
      assertEquals(54, node1.getType());
      
      Node node3 = node2.getLastSibling();
      assertEquals(118841, node2.getSourcePosition());
      assertEquals(40, node2.getType());
      assertEquals((-1), node3.getLineno());
      assertTrue(node3.isString());
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      Node node0 = new Node(102);
      boolean boolean0 = node0.isIf();
      assertEquals((-1), node0.getLineno());
      assertEquals(102, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      int int0 = Node.mergeLineCharNo(745, 745);
      assertEquals(3052265, int0);
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      Node node0 = Node.newString(113, "a", 113, 113);
      assertEquals(462961, node0.getSourcePosition());
      assertEquals(113, node0.getType());
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      Node node0 = Node.newNumber((-0.13059576204734702));
      boolean boolean0 = node0.isNoSideEffectsCall();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      Node node0 = Node.newNumber((double) 113, 113, 113);
      assertEquals(462961, node0.getSourcePosition());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      Node node0 = Node.newString("%By4nh;(CP<8jU#O)J");
      node0.addChildrenToBack(node0);
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      Node.extractLineno(1195);
      Node node0 = Node.newString(1195, "M", 0, 464);
      node0.isNoSideEffectsCall();
      node0.isIf();
      node0.getLastSibling();
      boolean boolean0 = false;
      Node.newNumber(0.0, 36, 0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      // Undeclared exception!
      try { 
        simpleSourceFile0.getLineOffset((-2877));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Should not call getLineOffset with line number -2877
         //
         verifyException("com.google.javascript.rhino.jstype.SimpleSourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      boolean boolean0 = node_SideEffectFlags1.areAllFlagsSet();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.clearAllFlags();
      assertEquals(31, node_SideEffectFlags5.valueOf());
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      assertEquals(31, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2309);
      assertEquals(2309, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      Node node0 = Node.newString("V>GM^T2\"\"H");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      assertEquals(0, node_SideEffectFlags1.valueOf());
      
      node0.setString("V>GM^T2\"\"H");
      assertTrue(node0.isString());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(93);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.setMutatesGlobalState();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, 1306, 559);
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = Node.newString("StringNode: str is null", 30, 56);
      Node node2 = new Node(3697, node0, node1, node0, node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(42);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node2.setJSDocInfo(jSDocInfo0);
      node0.getDouble();
      node1.getQualifiedName();
      node1.detachFromParent();
      node2.isOnlyModifiesThisCall();
      assertFalse(node2.hasMoreThanOneChild());
      
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags(36);
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.clearSideEffectFlags();
      node0.cloneTree();
      assertEquals(559, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("");
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(52, node0, node0, node0, node0, 47, 56);
      node1.mayMutateArguments();
      Node node2 = node1.cloneNode();
      node2.getBooleanProp(29);
      node2.checkTreeEqualsImpl(node1);
      Node node3 = new Node(57);
      // Undeclared exception!
      try { 
        node3.setSideEffectFlags(147);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 57
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(35);
      node0.toString(true, false, true);
      Node node1 = new Node(55, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      JSDocInfo jSDocInfo1 = new JSDocInfo(false);
      Node node2 = node1.setJSDocInfo(jSDocInfo1);
      node2.wasEmptyNode();
      Node node3 = new Node(0);
      node0.setIsSyntheticBlock(true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      jSTypeRegistry0.getObjectElementKey();
      Node node4 = null;
      try {
        node4 = new Node(2166, node0, 51, 4476);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      Node node0 = Node.newNumber(1.2);
      node0.addSuppression("");
      Node node1 = Node.newNumber((-2135.0), 51, 22);
      node0.addChildrenToFront(node1);
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      Node node0 = Node.newString((-1547), "com.google.common.collect.ImmutableEnumSet");
      node0.getInputId();
      node0.setInputId((InputId) null);
      Node node1 = Node.newString(37, "com.google.javascript.rhino.Node$StringNode");
      node1.isArrayLit();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      try { 
        node2.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CALL com.google.javascript.rhino.Node$StringNode [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      Node node0 = new Node(105, 38, 38);
      node0.toStringTree();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      Node node1 = Node.newString("FUNCTION <invalid> 38\n", 4, 16);
      nodeArray0[1] = node1;
      Node node2 = null;
      try {
        node2 = new Node(1529, nodeArray0, 31, 30);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      Node node0 = Node.newString(")qeU619bPi(");
      node0.isUnscopedQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.valueOf();
      Node node1 = Node.newNumber((double) 0, 30, 4095);
      node1.setSourceEncodedPositionForTree(38);
      node1.getChangeTime();
      assertEquals(38, node1.getSourcePosition());
      
      Node node2 = new Node(29);
      node2.isDec();
      node2.removeFirstChild();
      node2.isCast();
      boolean boolean0 = node2.isTypeOf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.addSuppression(";is_constant_name");
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      Node node0 = new Node(33);
      Node node1 = new Node(4, node0, 15, 52);
      node1.isEquivalentTo(node0);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(61492, node1.getSourcePosition());
      assertEquals(4, node1.getType());
      assertTrue(node0.isGetProp());
      assertTrue(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      Node node0 = new Node((-1721));
      boolean boolean0 = node0.isTypeOf();
      assertEquals((-1721), node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      Node node0 = new Node(16);
      Node node1 = new Node(16, node0, 4095, 2);
      assertEquals(16, node0.getType());
      assertEquals(16, node1.getType());
      assertEquals(16773122, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      boolean boolean0 = node0.isStringKey();
      String string0 = node0.toString(false, false, false);
      assertEquals("CAST", string0);
      
      boolean boolean1 = node0.isNew();
      assertEquals(635035, node0.getSourcePosition());
      assertTrue(boolean1 == boolean0);
      assertEquals(155, node0.getType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      Node node0 = new Node(109);
      node0.getChildBefore((Node) null);
      assertEquals(109, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      Node node0 = new Node(160, 160, 160);
      Node node1 = new Node(0, node0, node0, node0, node0, 38, 2);
      node1.removeChild(node0);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(43);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 43
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      Node node0 = Node.newNumber((double) 172);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 172.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      Node node0 = Node.newNumber((double) 46);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      Node node0 = new Node(50);
      boolean boolean0 = node0.wasEmptyNode();
      assertFalse(boolean0);
      assertEquals(50, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      Node node0 = Node.newNumber(0.5);
      boolean boolean0 = node0.mayMutateArguments();
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      Node node0 = new Node(124);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // EMPTY is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      Node node0 = new Node(3533);
      Node node1 = new Node(8, node0);
      node1.isLabel();
      node1.removeFirstChild();
      assertFalse(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      Node node0 = Node.newNumber((double) 800);
      node0.wasEmptyNode();
      Node node1 = new Node(800, node0);
      Node node2 = node1.removeFirstChild();
      node0.toString(true, true, false);
      Node node3 = Node.newString("");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node3.setJSDocInfo(jSDocInfo0);
      node1.wasEmptyNode();
      node1.isEquivalentTo(node2, false, false, true);
      // Undeclared exception!
      try { 
        node1.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }
}
