/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 03 23:23:44 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import com.google.javascript.rhino.jstype.TemplatizedType;
import com.google.javascript.rhino.jstype.UnionType;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.PrintStream;
import java.io.StringWriter;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList1);
      Node node1 = new Node(446, node0);
      Node node2 = node1.clonePropsFrom(node0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isEquivalentToShallow(node1);
      Node node3 = Node.newString(4095, "Object#Key");
      node3.setWasEmptyNode(false);
      node3.copyInformationFromForTree(node1);
      node1.setVarArgs(true);
      Node.newString(39, "", (-2001), 56);
      Node node4 = node2.clonePropsFrom(node3);
      node4.isLocalResultCall();
      node4.isAnd();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = new Node(12, node0, node0, node0, node0);
      node0.copyInformationFrom(node1);
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newNumber(0.7);
      Node node1 = Node.newNumber((double) 4, 12, 39);
      node1.isName();
      node0.isVoid();
      node1.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = new Node(40);
      node0.setLength(83);
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.copyInformationFromForTree(node0);
      node0.isTry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = new Node(2170);
      Node node1 = new Node(50);
      node0.useSourceInfoFromForTree(node1);
      node0.getChildAtIndex(55);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newNumber((-4255.5105407));
      Node node1 = new Node(35, node0, node0);
      node0.isEquivalentToShallow(node1);
      node0.getExistingIntProp(2441);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) null);
      // Undeclared exception!
      try { 
        node0.isAssign();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node.newNumber((-2650.2621446645844));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList1);
      node0.setWasEmptyNode(false);
      node0.isCase();
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node.newString(1068, "String node not reated with NodJ.newStrwg", 1068, 1068);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node.mergeLineCharNo((-2559), (-2559));
      Node node0 = Node.newNumber((double) (-2559));
      node0.siblings();
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node(106, 106, 106);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node(106);
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = new Node(37, 37, 37);
      Node node1 = new Node(37, node0);
      Node node2 = new Node(37, node1, node1, node0);
      // Undeclared exception!
      try { 
        node2.isHook();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = new Node(40);
      Node node1 = new Node(39, node0, node0, 32, 2);
      node1.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("{D8>b+xj*_eta", 126, 126);
      Node node1 = new Node(17, node0, node0, node0);
      Node node2 = new Node(17, node1);
      int int0 = Node.INPUT_ID;
      node0.getIndexOfChild(node1);
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node2.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newString("mH");
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = new Node(40);
      Node node1 = new Node(39, node0, node0, 32, 2);
      node0.getDirectives();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newNumber((-2810.8));
      node0.setDouble((-2810.8));
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newString((-2695), "i6T[7VzKTaf,aESSE");
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.javascript.rhino.Node$AbstractPropListItem", 122, (-1218));
      node0.isSyntheticBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.Node$AbstractPropListItem");
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.Node$AbstractPropListItem");
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newString((-1532), "com.google.common.collect.ImmutableAsList", (-1532), (-1532));
      Node node1 = new Node((-1532), node0, node0, node0, node0);
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.detachFromParent();
      node2.getDirectives();
      node0.isEquivalentTo(node1, true, true, true);
      node1.addChildrenAfter(node0, node0);
      node0.isInstanceOf();
      node0.isGetterDef();
      // Undeclared exception!
      try { 
        node0.isScript();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = (-1532);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = new Node(16777216);
      JSType jSType0 = null;
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, (JSType) null);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      // Undeclared exception!
      try { 
        enumElementType1.getPropertyNode(functionType0.UNKNOWN_NAME);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      String string0 = null;
      // Undeclared exception!
      try { 
        Node.newString((String) null, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newString("}b2H0v4K.Cmq", 2170, 1188);
      node0.getProp(1188);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newString(117, (String) null, 8192, 8192);
      node0.isRegExp();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newString((String) null, 40, 40);
      Node node1 = new Node(node0.SYNTHETIC_BLOCK_PROP, node0, node0.FLAG_ARGUMENTS_UNMODIFIED, node0.IS_NAMESPACE);
      JSDocInfo jSDocInfo0 = null;
      try {
        jSDocInfo0 = new JSDocInfo();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newString("", 1375, 212);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.setDirectives(linkedHashSet0);
      node0.putProp(212, "");
      node0.isArrayLit();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node0.setSideEffectFlags(node_SideEffectFlags3);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.toStringTree();
      node0.getDirectives();
      node0.getJSDocInfo();
      node0.isQualifiedName();
      node0.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newNumber(2884.155003821925);
      node0.isHook();
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newString(435, "}b2H0v4K.Cmq", 435, 435);
      node0.isSyntheticBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("no next sibling.");
      node_FileLevelJsDocBuilder0.append("String");
      node0.isVoid();
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newString("in9r=ec", 43, 43);
      Node node1 = new Node(43, node0, node0, node0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("in9r=ec");
      node1.checkTreeEquals(node0);
      node1.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString("", 15, 4095);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.setDirectives(linkedHashSet0);
      node1.putProp(32, "");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 4702, (-205));
      node0.getStaticSourceFile();
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newNumber(1706.3701316290733);
      node0.putIntProp(12, 1);
      node0.isCast();
      node0.isNumber();
      node0.getSourceOffset();
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newString(36, "com.google.javascript.rhino.Node$AncestorIterable$1", 36, 36);
      node0.isEquivalentTo(node0, true, true, true);
      node0.isSyntheticBlock();
      node0.getDouble();
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newString("8TH}tHrqxVW^");
      node0.cloneNode();
      node0.isQualifiedName();
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.cloneNode();
      node0.toStringTree();
      node0.isQualifiedName();
      Node node1 = new Node(40);
      node0.useSourceInfoFromForTree(node1);
      node1.getChildAtIndex((-3049));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("t_+=;F'8}0G7t", 119, 119);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = new Node(2372, 1938, 13);
      Node node1 = new Node(2372, node0, node0, node0, (-2815), 29);
      Node node2 = new Node(2372, node1, node0, node1, 51, 57);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[2];
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      String string0 = "com.google.javascript.rhino.Node$StringNode";
      Node node0 = null;
      Node node1 = new Node(46, (Node) null, (Node) null, (Node) null, 2, 122);
      JSType jSType0 = null;
      TemplateType templateType0 = JSType.toMaybeTemplateType(jSType0);
      // Undeclared exception!
      try { 
        templateType0.defineDeclaredProperty(jSTypeRegistry0.OBJECT_INDEX_TEMPLATE, jSType0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      linkedList0.offerLast(templateType1);
      Node node0 = null;
      Node node1 = new Node(0, (Node) null, (Node) null, (Node) null, 105, (-2655));
      node1.isContinue();
      node1.addChildBefore(node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(node1.INFERRED_FUNCTION, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags4.setAllFlags();
      Node node0 = null;
      Node node1 = new Node((-722), (Node) null, (Node) null, (Node) null);
      // Undeclared exception!
      try { 
        node1.isVarArgs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(39);
      node_SideEffectFlags0.setMutatesArguments();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesThis();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$", 43, 43);
      Node node1 = new Node(43, node0, node0, node0);
      node1.useSourceInfoFrom(node0);
      node1.isArrayLit();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.clearAllFlags();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(125);
      node0.isAssign();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("MFR,ldu", 106, 106);
      Node node1 = new Node(54, node0, node0, node0);
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.isQuotedString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.isArrayLit();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      node0.checkTreeEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = null;
      Node node1 = new Node((-404), (Node) null, (Node) null, (Node) null);
      // Undeclared exception!
      try { 
        node1.isFromExterns();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node(5, 5, 352);
      Node node1 = new Node(0, node0, node0, node0);
      node0.isEquivalentTo(node1, true, true, true);
      node1.isDec();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newString((-172), "YWDx^D$kQfs^p-&Nr%3");
      Node node1 = new Node((-172), node0, node0, node0);
      Node node2 = new Node((-172), node1, node1, node1, node0);
      node2.isBreak();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node.newString(4702, "}b2H0v4K.Cmq", 4702, 2170);
      Node node0 = Node.newString((String) null);
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 0;
      Node[] nodeArray0 = new Node[4];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      String string0 = "M4A#";
      Node.newString((String) null);
      JSType jSType0 = null;
      // Undeclared exception!
      try { 
        JSType.toMaybeTemplatizedType(jSType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = new Node(106);
      node0.isOr();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1582), 113);
      node0.getSideEffectFlags();
      node0.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2107);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesThis();
      Node.mergeLineCharNo(113, 2);
      node0.setSideEffectFlags(node_SideEffectFlags3);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newNumber(2009.2141041, 3000, 3000);
      node0.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(12, 4095, 57);
      node1.isTypeOf();
      node1.getChangeTime();
      Node node2 = new Node(39, node0);
      node0.addChildAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString(" is not a string node");
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newString((-2033), "", (-1071), 3526);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node0.setSideEffectFlags(node_SideEffectFlags3);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.setSideEffectFlags(91);
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newString(15, "gtG_?", 3, 3);
      node0.isSyntheticBlock();
      Node node1 = Node.newNumber((double) 37);
      node0.isVoid();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      node0.setSideEffectFlags(node_SideEffectFlags0);
      Node.newNumber((double) node1.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newString("8TH}tHrqxVW^", 0, 0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("GZ/R}[0,`w>#2<rd~MK");
      node0.isNoSideEffectsCall();
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("8TH}tHrqxVW^");
      node_FileLevelJsDocBuilder0.append("N=F%VK/D'6[*S");
      node0.removeProp(0);
      node0.isNumber();
      node0.isRegExp();
      node0.isWith();
      node0.isCall();
      node0.isVarArgs();
      node0.isBlock();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('!');
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(33);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) charBuffer0, 56, 0);
      node0.appendStringTree(charArrayWriter2);
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = new Node((-475));
      node0.isBlock();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = new Node(1144);
      node0.isRegExp();
      int int0 = Node.INPUT_ID;
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = new Node(40);
      Node node1 = new Node(39, node0, node0, 32, 2);
      node0.isNumber();
      node1.isNot();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newString("incrdecr", 530, 530);
      Node node1 = new Node(42);
      node1.useSourceInfoFrom(node0);
      node0.isNoSideEffectsCall();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = new Node(56);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = new Node(1, 1, 1);
      int int0 = Node.IS_NAMESPACE;
      node0.isWith();
      node0.isUnscopedQualifiedName();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString((-116), "Object#Element", (-116), (-116));
      Node node1 = new Node(125);
      node1.removeProp(4095);
      node1.isNumber();
      node0.isRegExp();
      node1.isWith();
      node0.isCall();
      node1.isNot();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node1.setLength(2509);
      node0.isThis();
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newString(47, "t_+=;F'8}0G7t", 124, 47);
      Node node1 = new Node(153, node0, node0, node0, node0);
      node1.getDirectives();
      node0.isNumber();
      Node node2 = new Node(15);
      node0.isSyntheticBlock();
      node0.isCast();
      int int0 = Node.IS_DISPATCHER;
      node0.isThis();
      node0.isRegExp();
      Node node3 = Node.newNumber(1.0, 37, 8);
      node3.addChildBefore(node2, node0);
      node0.isDelProp();
      node1.isIn();
      node1.siblings();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3);
      Node node1 = new Node(1135, node0, node0, node0);
      Node node2 = new Node(1132, node1);
      node2.removeProp(4095);
      node0.isNumber();
      node1.isRegExp();
      node2.isWith();
      node0.isCall();
      node1.isVarArgs();
      Node node3 = node1.removeChildren();
      node1.setLineno(29);
      node1.getBooleanProp((-1664));
      node1.isStringKey();
      node3.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(119);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) arrayList0);
      node1.removeProp((-5274));
      node0.isTrue();
      node0.isWith();
      node1.isCall();
      node0.isTry();
      ArrayList<JSType> arrayList1 = new ArrayList<JSType>(arrayList0);
      arrayList1.listIterator();
      Node node2 = new Node((-946), node0, 57, 55);
      node2.isScript();
      node2.isCase();
      node2.isVoid();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = (-1124);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      Node node0 = Node.newNumber((double) (-1124));
      JSType jSType0 = null;
      JSType.toMaybeFunctionType((JSType) null);
      ObjectType.cast((JSType) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("82Vn~%Q@/go&Zf@d", node0, (JSType) null);
      // Undeclared exception!
      try { 
        enumType0.getElementsType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newString("qSP{<yv]wF'/_=pPT");
      node0.getStaticSourceFile();
      node0.setSideEffectFlags((-3933));
      double double0 = 1013.998290170621;
      // Undeclared exception!
      try { 
        node0.setDouble(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, 36, 36);
      node0.getStaticSourceFile();
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newString("new child has existing parent");
      node0.getLength();
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(3152, nodeArray0);
      node0.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newString("new child has existing parent");
      node0.wasEmptyNode();
      node0.getLength();
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newString(3, "jD=F");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      nodeArray0[7] = node0;
      Node node1 = new Node(57, nodeArray0, 726, 1304);
      node0.removeChild(node1);
      node0.cloneTree();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        node0.setOptionalArg(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[3] = node0;
      Node node1 = Node.newNumber((double) 1);
      nodeArray0[3] = node1;
      Node node2 = new Node(51, nodeArray0, 2289, (-48));
      nodeArray0[1].isScript();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseVoidType();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(105, nodeArray0, (-2601), 128);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newString((-1532), "com.google.common.collect.ImmutableAsList", (-1532), (-1532));
      Node node1 = new Node((-1532), node0, node0, node0, node0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) linkedList0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      Node node3 = new Node(52, node1, node1);
      nodeArray0[2] = node3;
      nodeArray0[3] = node2;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      Node node4 = new Node(8, nodeArray0, (-273), 54);
      boolean boolean0 = true;
      node4.setWasEmptyNode(boolean0);
      nodeArray0[6].isCase();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = (-1252);
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node((-1252), (Node) null, (Node) null, (-1252), (-1252));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = new Node(26, (Node) null, (Node) null, 26, 31);
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node0.isFromExterns();
      Node node1 = new Node(32768, node0, node0);
      SimpleErrorReporter.getMessage0("Object#Key");
      node1.setString(jSTypeRegistry0.OBJECT_INDEX_TEMPLATE);
      // Undeclared exception!
      try { 
        node1.hasOneChild();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property Object#Key
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = new Node(2280);
      node0.isAdd();
      node0.isOnlyModifiesArgumentsCall();
      node0.isFromExterns();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(56);
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = new Node(107, 107, 107);
      Node node1 = new Node(47, node0, node0, node0, 16, 43);
      Node node2 = new Node(46, node1, node0);
      // Undeclared exception!
      try { 
        node0.addChildrenToFront(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = null;
      int int0 = 0;
      Node[] nodeArray0 = new Node[8];
      Node node0 = new Node((-690));
      Node node1 = new Node(0, node0, node0, 0, 48);
      nodeArray0[0] = node1;
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      nodeArray0[1] = node2;
      Node node3 = new Node(11, 1896, 48);
      nodeArray0[2] = node3;
      JSType[] jSTypeArray0 = new JSType[1];
      ObjectType objectType0 = FunctionType.getTopDefiningInterface((ObjectType) null, "Object#Key");
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType(objectType0, (Map<TemplateType, JSType>) hashMap0);
      String string1 = "";
      int int1 = (-3210);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.getType((StaticScope<JSType>) templatizedType0, templatizedType0.NOT_A_CLASS, string1, node3.INCRDECR_PROP, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = Node.newString(0, "QKOQwDj5W");
      node0.siblings();
      Appendable appendable0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[2];
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) null, (Map<TemplateType, JSType>) null);
      TemplateTypeMap templateTypeMap0 = templatizedType0.getTemplateTypeMap();
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, templateTypeMap0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType(functionType0.EMPTY_TYPE_COMPONENT);
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      // Undeclared exception!
      try { 
        templateTypeMapReplacer0.caseTemplateType(templateType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "4ng+~R#8U[u";
      Node node0 = Node.newString((-2106), "4ng+~R#8U[u");
      Node node1 = Node.newString(0, "4ng+~R#8U[u");
      node1.getQualifiedName();
      Node node2 = Node.newString((-1585), "Error");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType.toMaybeFunctionType((JSType) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node2, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      JSDocInfo jSDocInfo0 = enumElementType0.getOwnPropertyJSDocInfo(string0);
      node2.setJSDocInfo(jSDocInfo0);
      node1.isFromExterns();
      node1.setChangeTime(node0.IS_DISPATCHER);
      // Undeclared exception!
      try { 
        node0.addChildBefore(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newNumber(471.66423827);
      node0.getQualifiedName();
      Node node1 = new Node(15);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newString("in9r=ec", 36, 36);
      Node node1 = new Node(38, node0, node0, node0, node0, 0, 48);
      node0.clonePropsFrom(node1);
      node0.getJsDocBuilderForNode();
      node1.getQualifiedName();
      int int0 = 57;
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newString("incrdecr", 530, 530);
      Node node1 = new Node(42);
      Node node2 = node1.useSourceInfoFrom(node0);
      node0.isNoSideEffectsCall();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node2.isAdd();
      node0.isNull();
      node2.getQualifiedName();
      node2.isCase();
      node2.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InputId inputId0 = new InputId("`o");
      Node node0 = new Node(3657, (Node[]) null, 3657, 19);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(0, node0, 12, 43);
      node0.isString();
      node0.isEquivalentTo(node0, false, false, false);
      node1.siblings();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 133;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      String string0 = "r7x4%A-tV";
      Node node0 = null;
      Node node1 = new Node(133, (Node) null, 133, 4);
      JSType jSType0 = null;
      // Undeclared exception!
      try { 
        JSType.toMaybeFunctionType(jSType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 4095;
      Node node0 = new Node(4095, (Node) null, 4095, (-1090));
      Node node1 = new Node(int0, node0, node0);
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node(2280);
      node0.toStringTree();
      int int0 = null;
      try {  
      int0 = Node.FLAG_THIS_UNMODIFIED;
      } catch(MockIllegalStateException e) {}
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 154;
      Node node0 = Node.newString("l)_/\"3/wKUI/j-RS=t]", 0, 154);
      Node node1 = null;
      node0.setCharno(154);
      Node node2 = node0.srcref((Node) null);
      int int1 = (-3190);
      // Undeclared exception!
      try { 
        node2.getBooleanProp(int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node.extractLineno(51);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2170, 2170, 2170);
      node0.isNot();
      node0.getSourceFileName();
      node0.isAssignAdd();
      node0.isUnscopedQualifiedName();
      Node node1 = Node.newNumber((double) 2);
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = new Node(125);
      node0.setCharno(125);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = Node.IS_NAMESPACE;
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      simpleErrorReporter0.error("Object#Key", "Object#Key", (-377), 0);
      int int0 = 10;
      int int1 = 37;
      LinkedHashSet<TemplateType> linkedHashSet0 = new LinkedHashSet<TemplateType>();
      Iterator<TemplateType> iterator0 = linkedHashSet0.iterator();
      ImmutableList<TemplateType> immutableList0 = ImmutableList.copyOf((Iterator<? extends TemplateType>) iterator0);
      ImmutableList<TemplateType> immutableList1 = immutableList0.reverse();
      jSTypeRegistry0.createInterfaceType("valueOf", node0, immutableList1);
      int int2 = 536870912;
      simpleErrorReporter0.warning(jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE, jSTypeRegistry0.OBJECT_INDEX_TEMPLATE, int1, int2);
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = new Node(117, 117, 1058);
      Node node1 = new Node(1058, node0, node0, node0, node0);
      node1.isEquivalentTo(node0, true, true, false);
      node0.addChildrenToFront(node1);
      node1.getJsDocBuilderForNode();
      Node node2 = new Node((-2338), node1, 30, 55);
      node2.getString();
      node2.isQualifiedName();
      node1.getJSType();
      node0.isVarArgs();
      double double0 = 488.453463538046;
      // Undeclared exception!
      try { 
        Node.newNumber(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = new Node((-1495), (-1495), (-1495));
      Node node1 = Node.newNumber((double) 43);
      node0.addChildrenToFront(node1);
      node0.getJsDocBuilderForNode();
      node1.isEquivalentToTyped(node0);
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newNumber((double) 4702, 4702, 2052);
      node0.isVarArgs();
      Node node1 = Node.newNumber((double) 4702);
      node0.isLabel();
      Node node2 = new Node(8, node0);
      Node node3 = new Node(2, node0, 0, 47);
      node1.getJsDocBuilderForNode();
      int int0 = null;
      try {  
      int0 = Node.INPUT_ID;
      } catch(MockIllegalArgumentException e) {}
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 877;
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(877);
      Node node1 = new Node(877, node0, node0);
      nodeArray0[0] = node1;
      Node node2 = null;
      try {
        node2 = new Node(54, node0, node1, node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString((-151), "8TH}tHrqxVW^", 16, 16);
      Node node1 = new Node(21, node0, node0, node0, node0, 40, 53);
      Node node2 = new Node((-2115), node1, node0, node1, node1);
      node0.getBooleanProp(node2.SIDE_EFFECTS_FLAGS_MASK);
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = false;
      node1.isEquivalentTo(node2, boolean0, boolean1, boolean2);
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = new Node((-3992), 2048, (-1948));
      Node node1 = new Node((-1948), node0, node0, node0, node0);
      Node node2 = Node.newNumber((double) 4095);
      node1.addChildrenToFront(node2);
      node0.getJsDocBuilderForNode();
      Node node3 = new Node(608, node0, 30, 536870912);
      node3.getString();
      node1.isContinue();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node2.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node[] nodeArray0 = new Node[5];
      Node node0 = new Node((-637), (-637), 0);
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType(objectType0, (Map<TemplateType, JSType>) hashMap0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) templatizedType0, (JSType) templatizedType0, (JSType) objectType0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      nodeArray0[1] = node1;
      Node node2 = Node.newString(56, "com.google.javascript.rhino.Node$SiblingNodeIterable", 46, 0);
      nodeArray0[2] = node2;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node1, objectType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      enumElementType1.getPropertyNode("Named type with empty name component");
      nodeArray0[3] = null;
      enumElementType0.getRootNode();
      nodeArray0[4] = null;
      Node node3 = new Node((-637), nodeArray0);
      node3.isCast();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = Node.newNumber((double) 2);
      node1.isFalse();
      node0.isNull();
      node1.isCatch();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node(30, (Node[]) null);
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newString((-1532), "com.google.common.collect.ImmutableAsList", 16, 2514);
      Node node1 = new Node((-1532), node0, node0, node0, node0);
      node0.getBooleanProp((-2415));
      node0.isEquivalentTo(node1, true, true, true);
      node1.addChildrenAfter(node0, node0);
      node0.isInstanceOf();
      node0.isGetterDef();
      node1.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(12, 4095, 57);
      node0.isString();
      Node node2 = Node.newNumber((double) 2);
      node0.addChildAfter(node2, node1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(2126.91272);
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$", 43, 43);
      Node node1 = new Node(43, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("in%r=ec$");
      Node node2 = node1.useSourceInfoFrom(node0);
      Node.newString("aKGI6tRrY_q_sWFfv", 0, 4);
      node2.isEquivalentTo(node1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = new Node((-325), (-325), (-325));
      node0.isOr();
      Node node1 = Node.newString(")0pp1}LlkV:CHF*", 53, 43);
      node1.isEquivalentTo(node0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(12, 4095, 57);
      node0.isString();
      node0.isEquivalentTo(node0, false, false, false);
      int int0 = Node.LAST_PROP;
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newString((-1532), "com.google.common.collect.ImmutableAsList", (-1532), (-1532));
      Node node1 = new Node((-1532), node0, node0, node0, node0);
      node0.isEquivalentTo(node1, true, true, true);
      node0.isInstanceOf();
      node0.isGetterDef();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = new Node(106);
      node0.isOr();
      Node node1 = Node.newString("t_+=;VF'8}0Grt", 31, 50);
      Node node2 = new Node(43, node1, node0, node1, 1145, 2689);
      node2.addChildrenAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.siblings();
      Node node1 = new Node(0, node0, node0, node0, 46, 37);
      node0.addChildrenToBack(node1);
      node0.isDec();
      node0.getDouble();
      int int0 = 11;
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = new Node(106);
      node0.isOr();
      Node node1 = Node.newString("t_+=;VF'8}0Grt", 31, 50);
      Node node2 = new Node(1073741823, node1, node1, node1, 56, 37);
      node1.addChildrenAfter(node0, node2);
      node1.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString(1121, "Object#Key", 43, (-770));
      Node node1 = Node.newNumber(1832.61);
      node1.isCall();
      node0.getInputId();
      Node node2 = new Node(43, node0, node1, node0, node1, 44, 32);
      Node node3 = node2.cloneTree();
      node0.putBooleanProp(31, false);
      node3.getJsDocBuilderForNode();
      node3.getQualifiedName();
      Node node4 = new Node((-141));
      node4.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.setMutatesGlobalState();
      Node node0 = new Node(0, 110, 0);
      InputId inputId0 = new InputId("first new child has existing parent");
      node0.cloneTree();
      node0.putBooleanProp(0, true);
      inputId0.toString();
      node0.setInputId(inputId0);
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(37, node0, node0, node0);
      node0.addChildrenToBack(node1);
      Node node2 = Node.newString("first new child has existing parent", (-106), 32);
      node2.isNew();
      node0.removeProp(30);
      node0.setSourceEncodedPositionForTree(12);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node((-2561));
      Node node1 = node0.cloneTree();
      node0.isEquivalentToTyped(node1);
      node1.isQualifiedName();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      InputId inputId0 = new InputId("gtG_6\"?");
      Node node1 = new Node(29, node0, node0, node0, node0, 3, 3);
      Node node2 = node1.cloneTree();
      node0.putBooleanProp(1, true);
      node1.setInputId(inputId0);
      node0.getJsDocBuilderForNode();
      Node node3 = new Node(1, node0, node2, 51, 8);
      String string0 = "";
      int int0 = 54;
      int int1 = (-2194);
      // Undeclared exception!
      try { 
        Node.newString(string0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = new Node(106);
      node0.isOr();
      node0.isScript();
      node0.addChildrenAfter((Node) null, (Node) null);
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = Node.newString("}b2H0v4K.Cmq", 2170, 4702);
      InputId inputId0 = new InputId("%CLCA?");
      node0.setInputId(inputId0);
      node0.setType(4702);
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newNumber(1706.3701316290733);
      node0.putIntProp(12, 1);
      node0.isNew();
      node0.removeProp(1);
      node0.getStaticSourceFile();
      node0.isOr();
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = Node.newString(Integer.MIN_VALUE, "}#XOumgrJ4", 0, 0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      TreeSet<String> treeSet1 = new TreeSet<String>((SortedSet<String>) treeSet0);
      node0.setDirectives(treeSet1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1596), 113);
      node0.getSideEffectFlags();
      node0.isTypeOf();
      Node node1 = new Node(53, node0, node0, node0);
      node0.getStaticSourceFile();
      node0.isOr();
      node0.isAssign();
      Node node2 = new Node(54, node0, node0, node0, node1, 54, 57);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.setMutatesGlobalState();
      Node node0 = new Node(0, 110, 0);
      node0.getString();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      String string0 = "";
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newNumber(36.0);
      Node node1 = new Node(56);
      node1.getString();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(106);
      node0.isQuotedString();
      node0.mayMutateArguments();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.setLineno(53);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags5.setMutatesGlobalState();
      Node node0 = new Node(0, 110, 0);
      InputId inputId0 = new InputId("first new child has existing parent");
      Node node1 = node0.cloneTree();
      node0.putBooleanProp(0, true);
      inputId0.toString();
      node0.setInputId(inputId0);
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(37, node0, node0, node0);
      node0.addChildrenToBack(node2);
      Node node3 = Node.newString("first new child has existing parent", (-106), 32);
      node3.isNew();
      node0.removeProp(30);
      node1.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = new Node(91, 91, 91);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isFalse();
      int int1 = Node.IS_NAMESPACE;
      node0.isQualifiedName();
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("side_effect_flags");
      node_FileLevelJsDocBuilder0.append("q,+1*p:m[$g");
      node0.isVoid();
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.javascript.rhino.Node$AbstractPropListItem", 122, (-1218));
      node0.isSyntheticBlock();
      Node node1 = new Node(65);
      node1.isWith();
      node0.isCall();
      node0.isVarArgs();
      node0.isBlock();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1896);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('!');
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(37);
      charset0.decode(byteBuffer0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "com.google.javascript.rhino.Node$AbstractPropListItem", 12, 51);
      node1.appendStringTree(charArrayWriter2);
      node1.getChildCount();
      node1.setSourceEncodedPosition(node0.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(125);
      node0.isAdd();
      int int0 = 669;
      Node node1 = new Node(669, 54, 3);
      node0.isExprResult();
      node1.getChangeTime();
      Node node2 = new Node(55, node0);
      node2.appendStringTree((Appendable) null);
      int int1 = 4095;
      Node node3 = new Node(int0, node1, node1, int1, node0.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      InputId inputId0 = new InputId("gtG_6\"?");
      Node node1 = Node.newNumber((double) 1);
      Node node2 = node1.cloneTree();
      node0.putBooleanProp(1, true);
      node0.getJsDocBuilderForNode();
      node1.isSyntheticBlock();
      node0.isCast();
      node0.hasChildren();
      node0.setQuotedString();
      node1.isNot();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node2.isEquivalentTo(node1);
      node0.isUnscopedQualifiedName();
      node1.isVoid();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = Node.newString(3, "jD=F");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      nodeArray0[7] = node0;
      node0.setQuotedString();
      Node node1 = new Node(57, nodeArray0, 726, 1304);
      nodeArray0[6].isIn();
      node0.removeChild(node1);
      node0.cloneTree();
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.siblings();
      node0.isDec();
      node0.getDouble();
      int int0 = 11;
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList1);
      Node node1 = new Node(446, node0);
      Node node2 = node1.clonePropsFrom(node0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isEquivalentToShallow(node1);
      Node node3 = Node.newString(4095, "Object#Key");
      node3.setWasEmptyNode(false);
      node3.copyInformationFromForTree(node1);
      node1.setVarArgs(true);
      Node node4 = new Node(39);
      node4.useSourceInfoFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.cloneNode();
      node0.toStringTree();
      node0.isQualifiedName();
      Node node1 = Node.newString(2083, "5XT'<", 42, (-95));
      Node node2 = node1.clonePropsFrom(node0);
      node2.isLocalResultCall();
      node1.isAnd();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = Node.newString("G\u0005+ X", 29, 29);
      node0.isLocalResultCall();
      Node.newString(55, "lkx3BH1;");
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = Node.newString((-1532), "com.google.common.collect.ImmutableAsList", 16, 2514);
      Node node1 = new Node((-1532), node0, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setMutatesThis();
      Node.mergeLineCharNo((-1885), 15);
      node1.setSideEffectFlags(node_SideEffectFlags1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = Node.newNumber((-2743.4489283687253));
      Node node1 = new Node(85, node0, node0, 39, 8);
      node0.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1582), 113);
      node0.getSideEffectFlags();
      node0.isTypeOf();
      Node node1 = Node.newString("SMZRfA&G>vn8N[d", 53, 112);
      node1.getBooleanProp(117);
      node0.isEquivalentTo(node1, false, false, false);
      Node node2 = new Node(43, node0, node0);
      node2.addChildrenAfter(node1, node1);
      node1.isInstanceOf();
      node2.isGetterDef();
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1582), 113);
      node0.getSideEffectFlags();
      node0.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2107);
      Node.extractCharno(15);
      node0.isSetterDef();
      Node node1 = Node.newNumber((double) 53);
      Node node2 = Node.newNumber((double) 50);
      node2.toStringTree();
      node1.checkTreeEquals(node0);
      node2.useSourceInfoIfMissingFromForTree(node1);
      node1.addChildAfter(node2, node2);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = new Node(91);
      node0.toStringTree();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isVar();
      Node node1 = Node.newString(29, "ASSIGN_RSH\n");
      node1.isContinue();
      node0.checkTreeEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3);
      node0.setString(",w>eg!/70/%<I+9)Jah");
      node0.isInstanceOf();
      // Undeclared exception!
      try { 
        node0.isGetterDef();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 3.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newString("", 1375, 212);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.isVarArgs();
      Node.extractCharno(51);
      node0.isSetterDef();
      Node node1 = Node.newNumber((double) 52);
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(12, 4095, 57);
      node0.isString();
      node0.isEquivalentTo(node0, false, false, false);
      node1.setLineno(2);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(17);
      node0.isWhile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1582), 113);
      node0.getSideEffectFlags();
      node0.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2107);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesThis();
      Node.mergeLineCharNo(113, 2);
      Node node1 = Node.newNumber((double) 2107);
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = Node.newString("COMMA");
      node0.detachChildren();
      node0.isVarArgs();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newString("new child has existing parent");
      node0.wasEmptyNode();
      Node node1 = new Node(2048, node0, node0, node0, node0);
      int int0 = Node.ORIGINALNAME_PROP;
      node1.hasOneChild();
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      node1.isCast();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "t_+=;F'8}0G7t");
      Node node0 = Node.newNumber((-2650.2621446645844));
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = new Node(40);
      node0.isCast();
      node0.isNumber();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node((-3944));
      node0.getAncestors();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = new Node(877);
      Node node1 = new Node(877, node0, node0);
      Node.newString(29, "second new child has existing sibling", 37, (-1560));
      Node node2 = Node.newString("second new child has existing sibling");
      node2.removeChildren();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = new Node(40);
      node0.removeChildren();
      node0.isCast();
      node0.isNumber();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node((-282), (Node) null, (Node) null, (Node) null, (Node) null);
      Node.newNumber((double) node0.REFLECTED_OBJECT, node0.COLUMN_MASK, node0.LENGTH);
      // Undeclared exception!
      try { 
        node0.isGetElem();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", (Node) null, functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getPropertyNode("yD@ BEND)b.QQ");
      nodeArray0[0] = null;
      functionType0.getInstanceType();
      Node node0 = Node.newString("v1", 4095, 1);
      nodeArray0[1] = node0;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1718));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.clearSideEffectFlags();
      Node node1 = new Node((-498), nodeArray0, (-1780), 2);
      node1.checkTreeTypeAwareEqualsImpl(nodeArray0[1]);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(56, "");
      Node.newString(2898, "");
      node0.addChildToFront(node1);
      node0.setJSType((JSType) null);
      node0.setStaticSourceFile((StaticSourceFile) null);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newString("}b2H0v4K.Cmq", 2170, 83);
      node0.setType(83);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("NaQe.CAvgOr", true);
      node0.setStaticSourceFile(simpleSourceFile0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = new Node((-1020));
      node0.removeChild((Node) null);
      int int0 = Node.ORIGINALNAME_PROP;
      // Undeclared exception!
      try { 
        node0.hasOneChild();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = new Node((-1312));
      Node node1 = new Node((-1312), node0, node0, 40, (-2356));
      node1.getDirectives();
      node1.setDirectives((Set<String>) null);
      node1.getChildBefore(node0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = new Node((-1020));
      String string0 = "COMMA";
      node0.removeChild((Node) null);
      Node.newString(string0);
      // Undeclared exception!
      try { 
        node0.getLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = new Node(106);
      node0.isOr();
      Node node1 = Node.newString("t_+=;VF'8}0Grt", 31, 50);
      node0.removeChild(node1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = Node.newString("}b2H0v4K.Cmq", 2170, 4702);
      node0.setType(4702);
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = new Node(2170, 2170, 2170);
      node0.setSourceEncodedPosition(2170);
      node0.setType(2170);
      node0.hasChild(node0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString(29, "");
      Node node1 = new Node(29, node0, node0, node0, 31, 231);
      nodeArray0[0] = node1;
      Node node2 = new Node(29, nodeArray0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[5];
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) objectType0, jSTypeArray0);
      jSTypeArray0[0] = (JSType) functionType0;
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(jSTypeArray0[0]);
      jSTypeArray0[1] = jSType0;
      LinkedHashSet<TemplateType> linkedHashSet0 = new LinkedHashSet<TemplateType>();
      ImmutableList<TemplateType> immutableList0 = ImmutableList.copyOf((Collection<? extends TemplateType>) linkedHashSet0);
      ImmutableList<JSType> immutableList1 = ImmutableList.of(jSType0, (JSType) objectType0, jSTypeArray0[1], jSType0, (JSType) objectType0, (JSType) objectType0);
      TemplateTypeMap templateTypeMap0 = jSTypeRegistry0.createTemplateTypeMap(immutableList0, immutableList1);
      templateTypeMap0.getTemplateTypeKeyByName("{NgBo :nQU1;z;%<q%'");
      jSTypeArray0[2] = (JSType) null;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType1 = modificationVisitor0.caseAllType();
      jSTypeArray0[3] = jSType1;
      FunctionType functionType1 = jSTypeRegistry0.createInterfaceType("", node1, (ImmutableList<TemplateType>) null);
      jSTypeArray0[4] = (JSType) functionType1;
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node2.useSourceInfoFrom(node3);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 4692;
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(4692, nodeArray0);
      node0.getSourceFileName();
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4692
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      JSType[] jSTypeArray0 = new JSType[1];
      Node node0 = new Node((-475), nodeArray0);
      int int0 = 301;
      Node node1 = new Node(int0);
      // Undeclared exception!
      try { 
        node1.isCall();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node0.removeProp((-1315));
      node0.isSetterDef();
      node0.isRegExp();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(38, nodeArray0, (-1315), 52);
      node0.checkTreeEquals(node0);
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = new Node(122, 608, 122);
      node0.getJSType();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = Node.newString(3, "String node not created with Node.newString", 3, 3);
      Node node1 = new Node(32, node0, node0, node0, node0, 38, 29);
      Node node2 = node0.clonePropsFrom(node0);
      node2.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = Node.newString("", 1375, 212);
      node0.getDirectives();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.isVarArgs();
      Node.extractCharno(51);
      node0.isSetterDef();
      Node node1 = Node.newNumber((double) 52);
      Node.newNumber((double) 46);
      node0.checkTreeEquals(node1);
      node1.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newString("<{=Cm~w29u5?dc2 v~r");
      Node node1 = new Node(57, node0, node0, 47, 36);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node1.replaceChildAfter(node0, node0);
      // Undeclared exception!
      try { 
        node0.getJsDocBuilderForNode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node((-1371), node0, node0);
      Node node2 = new Node((-1371), node1, node1, node1, node1, 125, 53);
      Node node3 = Node.newNumber((double) 51, 881, 54);
      node2.useSourceInfoIfMissingFromForTree(node3);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(56, "");
      Node node2 = Node.newString(2898, "");
      node0.addChildToFront(node1);
      Node node3 = new Node(29);
      node0.isSyntheticBlock();
      node1.isCast();
      node3.hasChildren();
      int int0 = Node.LENGTH;
      node2.isThis();
      node2.getLineno();
      node1.isEquivalentTo(node3);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newNumber(445.92582, (-177), (-177));
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = new Node(106);
      node0.isOr();
      Node.newString("t_+=;VF'8}0Grt", 31, 50);
      node0.isEquivalentTo(node0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = Node.newNumber((-2743.4489283687253));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.hasChildren();
      int int0 = Node.SYNTHETIC_BLOCK_PROP;
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(106);
      node0.setType(106);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isFunction();
      node0.isIf();
      Node node1 = Node.newString("cr+.(hbLzYU,*g,=ry3");
      node1.removeChildren();
      node1.setLineno(43);
      node0.addChildToFront((Node) null);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = node0.cloneNode();
      node0.getProp((-1675));
      node1.putProp(21, (Object) null);
      node0.toStringTree();
      node0.isQualifiedName();
      Node node2 = Node.newString(2083, "5XT'<", 42, (-95));
      Node node3 = node2.clonePropsFrom(node0);
      node3.isLocalResultCall();
      node2.isAnd();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = new Node(2280);
      node0.isFunction();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.getQualifiedName();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.javascript.rhino.Node$AbstractPropListItem", 122, (-1218));
      node0.isSyntheticBlock();
      Node node1 = new Node(65);
      node1.isWith();
      node0.isCall();
      node0.isVarArgs();
      node0.isBlock();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1896);
      charArrayWriter0.append('!');
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("");
      Node node1 = node0.cloneNode();
      node0.toStringTree();
      boolean boolean0 = node0.isQualifiedName();
      Node node2 = new Node(40);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node2.getChildAtIndex((-3049));
      Node node4 = new Node(54, node1, node2, (-4096), 29);
      node3.useSourceInfoIfMissingFrom(node4);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((-3161));
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, boolean0, string0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.getBuffer();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -3161
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeArray0[2] = (JSType) objectType0;
      jSTypeArray0[3] = (JSType) objectType0;
      jSTypeArray0[4] = (JSType) objectType0;
      jSTypeArray0[5] = (JSType) objectType0;
      jSTypeRegistry0.createFunctionType((JSType) objectType0, jSTypeArray0);
      jSTypeRegistry0.createOptionalNullableType(jSTypeArray0[3]);
      LinkedHashSet<TemplateType> linkedHashSet0 = new LinkedHashSet<TemplateType>();
      ImmutableList<TemplateType> immutableList0 = ImmutableList.copyOf((Collection<? extends TemplateType>) linkedHashSet0);
      ImmutableList<JSType> immutableList1 = ImmutableList.of(jSTypeArray0[2], jSTypeArray0[1], (JSType) objectType0, jSTypeArray0[2], jSTypeArray0[4], jSTypeArray0[3]);
      TemplateTypeMap templateTypeMap0 = jSTypeRegistry0.createTemplateTypeMap(immutableList0, immutableList1);
      templateTypeMap0.getTemplateTypeKeyByName("D^1=DY5}dJS5b");
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseAllType();
      jSTypeRegistry0.createInterfaceType("Unknown class name", (Node) null, (ImmutableList<TemplateType>) null);
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = Node.newNumber((-125.327360681301), 1, (-3050));
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node0.isAssign();
      Node node1 = new Node(32768, node0, node0);
      SimpleErrorReporter.getMessage0("Object#Key");
      node1.setString(jSTypeRegistry0.OBJECT_INDEX_TEMPLATE);
      // Undeclared exception!
      try { 
        node1.hasOneChild();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property Object#Key
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      Node node1 = new Node(2, node0, node0, node0, node0);
      node0.isEquivalentTo(node1, false, true, false);
      Node node2 = Node.newNumber((double) 55);
      node0.addChildrenToFront(node2);
      node0.getJsDocBuilderForNode();
      Node node3 = new Node(1, node1, 47, 32);
      node1.getString();
      node3.isQualifiedName();
      node1.getJSType();
      node1.isVarArgs();
      // Undeclared exception!
      try { 
        Node.newNumber((double) node2.SLASH_V);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = new Node(877);
      Node node1 = new Node(877, node0, node0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      String string0 = "uP3I=Wq:^2cIZ";
      node_FileLevelJsDocBuilder0.append("uP3I=Wq:^2cIZ");
      node_FileLevelJsDocBuilder0.append("uP3I=Wq:^2cIZ");
      node_FileLevelJsDocBuilder0.append("uP3I=Wq:^2cIZ");
      node_FileLevelJsDocBuilder0.append("N=F%VK/D'6[*S");
      Node node2 = Node.newString(30, "N=F%VK/D'6[*S");
      node2.removeProp(42);
      node0.isNumber();
      Node node3 = new Node(0);
      node3.isRegExp();
      node0.isWith();
      node2.isCall();
      Node node4 = new Node((-4096), node1, node1);
      node4.isVarArgs();
      node0.isBlock();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(30);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('N');
      Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(785);
      Charset charset0 = Charset.forName("N=F%VK/D'6[*S");
      charset0.decode(byteBuffer0);
      charArrayWriter1.append((CharSequence) string0, node0.DECR_FLAG, node2.IS_NAMESPACE);
      node2.appendStringTree(charArrayWriter1);
      node3.getChildCount();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = new Node(877);
      Node node1 = new Node(877, node0, node0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.setDirectives(linkedHashSet0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      node1.putProp(3, locale_FilteringMode0);
      node1.isArrayLit();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node1.setSideEffectFlags(node_SideEffectFlags0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags5.setReturnsTainted();
      node_SideEffectFlags5.setMutatesGlobalState();
      Node node0 = new Node(0, 110, 0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder1.append("The new child node has siblings.");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder2 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder2.append("q,+1*p:m[$g");
      node0.isVoid();
      node0.isGetProp();
      node0.getJSType();
      node0.detachChildren();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newString("COMMA");
      node0.detachChildren();
      node0.isVarArgs();
      node0.detachChildren();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 2052, 2052);
      node0.isVarArgs();
      Node node1 = Node.newNumber((-1719.124));
      node1.isLabel();
      Node node2 = new Node((-677), node1);
      Node node3 = new Node(49, node0, 57, 4);
      node3.getJsDocBuilderForNode();
      int int0 = Node.INPUT_ID;
      node2.detachChildren();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = Node.newString(11, "gtG_6\"?", 0, 0);
      Node node1 = Node.newString(36, "gtG_6\"?");
      Node node2 = node1.copyInformationFromForTree(node0);
      node0.hasChildren();
      int int0 = Node.IS_DISPATCHER;
      node1.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.isVar();
      Node node3 = new Node(105, node0, node0, node0, (-954), 1042);
      node3.addChildrenAfter(node2, node0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      InputId inputId0 = new InputId("gtG_6\"?");
      Node node1 = Node.newNumber((double) 1);
      Node node2 = node1.cloneTree();
      node0.putBooleanProp(1, true);
      inputId0.toString();
      node1.setInputId(inputId0);
      node0.getJsDocBuilderForNode();
      Node node3 = new Node(48, node2, node1, node1);
      node3.addChildrenToBack(node0);
      Node node4 = Node.newString("", 54, (-2194));
      node2.isNew();
      node4.removeProp(56);
      node2.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = Node.newString("8TH}tHrqxVW^", 0, 0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("GZ/R}[0,`w>#2<rd~MK");
      node0.isNoSideEffectsCall();
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("8TH}tHrqxVW^");
      node_FileLevelJsDocBuilder0.append("N=F%VK/D'6[*S");
      node0.removeProp(0);
      node0.isNumber();
      node0.isRegExp();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder1.append("!Hy{8onMX~bB");
      node_FileLevelJsDocBuilder1.append("8TH}tHrqxVW^");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.resetForTypeCheck();
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder2 = node1.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder2.append("Object#Key");
      node1.isVoid();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      node0.removeProp((-1132));
      node1.mayMutateArguments();
      node1.mayMutateGlobalStateOrThrow();
      node0.getDirectives();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = Node.newString("8TH}tHrqxVW^", 0, 0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("GZ/R}[0,`w>#2<rd~MK");
      node0.isNoSideEffectsCall();
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("8TH}tHrqxVW^");
      node_FileLevelJsDocBuilder0.append("N=F%VK/D'6[*S");
      node0.removeProp(0);
      node0.isNumber();
      node0.isRegExp();
      node0.isWith();
      node0.isCall();
      node0.isVarArgs();
      node0.isBlock();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(53);
      charset0.decode(byteBuffer0);
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1582), 113);
      node0.getSideEffectFlags();
      node0.isTypeOf();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
      node0.isSetterDef();
      node0.isOr();
      node0.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-4014));
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      node0.setSideEffectFlags((Node.SideEffectFlags) null);
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newString(51, "WITH", 51, 51);
      Node node1 = new Node(51, node0, node0, node0, node0, 768, 219);
      Node node2 = new Node(51, node1, node1);
      Node node3 = node2.srcrefTree(node1);
      Node node4 = new Node(32, node2, node1, node2, node0);
      int int0 = 49;
      node4.setChangeTime(int0);
      node1.addChildrenAfter(node3, node4);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = new Node(122);
      node0.type = 122;
      node0.getStaticSourceFile();
      node0.getJSType();
      node0.isOnlyModifiesArgumentsCall();
      int int0 = 30;
      String string0 = "String node not created with Node.newString";
      Node node1 = null;
      Node node2 = new Node(122, node0, (Node) null, (Node) null, (Node) null);
      // Undeclared exception!
      try { 
        node2.addChildToFront(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = Node.newString("8TH}tHrqxVW^");
      Node node1 = node0.cloneNode();
      node1.isContinue();
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(56, "");
      Node node2 = Node.newString(2898, "");
      node2.useSourceInfoFromForTree(node0);
      node0.addChildToFront(node1);
      Node node3 = new Node(29);
      node0.isSyntheticBlock();
      node1.isCast();
      node3.hasChildren();
      int int0 = Node.LENGTH;
      node2.isThis();
      node2.getLineno();
      node1.isEquivalentTo(node3);
      node2.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = new Node(2170, 2170, 2170);
      node0.setSourceEncodedPosition(2170);
      node0.setType(2170);
      node0.isUnscopedQualifiedName();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      Node node1 = new Node(2, node0, node0, node0, node0);
      node0.putBooleanProp(31, false);
      node0.isEquivalentTo(node1, false, true, false);
      Node node2 = Node.newNumber((double) 55);
      node0.addChildrenToFront(node2);
      node0.getJsDocBuilderForNode();
      Node node3 = new Node(1, node1, 47, 32);
      node1.getString();
      node3.isQualifiedName();
      node1.getJSType();
      node1.isVarArgs();
      // Undeclared exception!
      try { 
        Node.newNumber((double) node2.SLASH_V);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.setMutatesArguments();
      Node node0 = Node.newString("GZ/R}[0,`w>#2<rd~MK");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("GZ/R}[0,`w>#2<rd~MK");
      node0.isNoSideEffectsCall();
      node_FileLevelJsDocBuilder0.append("0@z3L");
      node_FileLevelJsDocBuilder0.append("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isEquivalentToTyped(node1);
      node_FileLevelJsDocBuilder0.append("=hagw!;OINuU|c$");
      node_FileLevelJsDocBuilder0.append("");
      node0.removeProp(30);
      node0.isNumber();
      node0.isRegExp();
      node0.isWith();
      node0.isCall();
      node0.isVarArgs();
      Node node2 = Node.newNumber(0.0);
      node2.isBlock();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(30);
      Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(47);
      Charset charset0 = Charset.defaultCharset();
      charset0.decode(byteBuffer0);
      node2.getChildCount();
      node0.getJSType();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = node0.cloneNode();
      node1.toStringTree();
      node0.isQualifiedName();
      Node node2 = new Node(52);
      Node node3 = node2.useSourceInfoFromForTree(node1);
      node3.getChildAtIndex(38);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = new Node(91);
      node0.toStringTree();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isVar();
      node0.isAssignAdd();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node.newString(36, "gtG_6\"?", 3, 3);
      Node node0 = Node.newString(36, "gtG_6\"?");
      node0.getQualifiedName();
      Node.newString(40, (String) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int int0 = 91;
      Node node0 = Node.newNumber(1.0);
      Node.newString((-1729), (String) null);
      node0.setSideEffectFlags(int0);
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(2040, "~2/5");
      Node node1 = Node.newString(147, "~2/5", 30, 54);
      Node node2 = Node.newString("~2/5", 55, 53);
      node2.addChildToFront(node0);
      node0.isNoSideEffectsCall();
      node0.getAncestors();
      node2.setSourceEncodedPositionForTree(2791);
      Node.extractCharno(40);
      node1.isSetterDef();
      Node node3 = node2.useSourceInfoIfMissingFrom(node1);
      node3.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = node0.cloneNode();
      node1.setSourceEncodedPositionForTree(8);
      node0.getProp((-1675));
      node1.putProp(2, (Object) null);
      node0.toStringTree();
      node0.isQualifiedName();
      Node node2 = Node.newString(2083, "5XT'<", 42, (-95));
      Node node3 = node2.clonePropsFrom(node0);
      node3.isLocalResultCall();
      node2.isAnd();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = new Node(2170);
      node0.setSourceEncodedPosition(2170);
      node0.setType(2170);
      node0.hasChild(node0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString("8TH}tHrqxVW^");
      Node node1 = node0.cloneNode();
      node1.getChangeTime();
      node0.isQualifiedName();
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = Node.newString("NoResolvedType");
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3);
      Node node1 = Node.newNumber((double) 38);
      node0.isQualifiedName();
      node1.isCase();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.isEquivalentTo(node0);
      node1.replaceChild(node0, node0);
      node0.isFromExterns();
      // Undeclared exception!
      try { 
        node1.getLastSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = Node.newString((-1532), "com.google.common.collect.ImmutableAsList", (-1532), (-1532));
      node0.isEquivalentTo(node0, true, true, true);
      node0.addChildrenAfter(node0, node0);
      node0.isInstanceOf();
      node0.isGetterDef();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.javascript.rhino.Node$AbstractPropListItem", 122, (-1218));
      node0.isSyntheticBlock();
      Node node1 = new Node(65);
      node1.isWith();
      node0.isCall();
      node1.isVarArgs();
      Node.extractCharno((-1882));
      node0.isSetterDef();
      Node node2 = Node.newNumber(1.2);
      Node node3 = Node.newNumber((double) 37);
      node3.checkTreeEquals(node2);
      node0.useSourceInfoIfMissingFromForTree(node3);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = Node.newString("8TH}tHrqxVW^", 0, 0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("GZ/R}[0,`w>#2<rd~MK");
      node0.isNoSideEffectsCall();
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("8TH}tHrqxVW^");
      node_FileLevelJsDocBuilder0.append("N=F%VK/D'6[*S");
      node0.removeProp(0);
      node0.isNumber();
      node0.isRegExp();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.new FileLevelJsDocBuilder();
      node0.getBooleanProp(0);
      Node node1 = new Node(29);
      node0.isEquivalentTo(node1, true, true, false);
      node1.addChildrenAfter(node0, node0);
      node1.isInstanceOf();
      node1.isGetterDef();
      node1.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.javascript.rhino.Node$NumberNode");
      Node node0 = new Node((-97));
      Node node1 = new Node(2048, node0);
      Node node2 = new Node(2557, node1, node1, node1, node0, 52, (-3627));
      node2.hasChildren();
      node1.isLabelName();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = new Node(106);
      node0.isOr();
      node0.isOnlyModifiesArgumentsCall();
      node0.isVarArgs();
      node0.mayMutateGlobalStateOrThrow();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = new Node(4095, nodeArray0, 15, 40);
      // Undeclared exception!
      try { 
        nodeArray0[1].checkTreeEquals(nodeArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Go`g!A#a;esU9'");
      Node node0 = new Node(29, (-225), 8);
      node0.getSideEffectFlags();
      node0.mayMutateGlobalStateOrThrow();
      boolean boolean0 = true;
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = new Node(1, nodeArray0, (-1860), 4095);
      node0.addChildToBack(node1);
      node0.setIsSyntheticBlock(boolean0);
      node0.isNull();
      node0.mayMutateArguments();
      node0.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node.newNumber((double) 37);
      node_FileLevelJsDocBuilder0.append("side_effect_flags");
      node_FileLevelJsDocBuilder0.append("side_effect_flags");
      node_FileLevelJsDocBuilder0.append("q,+1*p:m[$g");
      node0.isVoid();
      node0.isGetProp();
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = new Node(40);
      byte[] byteArray0 = new byte[1];
      Node node1 = new Node(39, node0, node0, 32, 2);
      node0.getDirectives();
      node1.isDelProp();
      node1.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = new Node(26);
      Node node1 = new Node(4);
      Node node2 = new Node(31, node1, node1, 2, (-2368));
      node0.getDirectives();
      node2.isDelProp();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node2.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = Node.newString("", 1375, 212);
      node0.getDirectives();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.isVarArgs();
      node0.isBlock();
      node0.setString("");
      node0.hasOneChild();
      node0.isAssignAdd();
      node0.setType(46);
      Node node1 = Node.newNumber(3009.12155568842);
      node1.removeChildAfter(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.getIndexOfChild(node1);
      String string0 = null;
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = Node.newString(3, "String node not created with Node.newString", (-475), (-475));
      node0.isCall();
      InputId inputId0 = new InputId("String node not created with Node.newString");
      node0.setString("String node not created with Node.newString");
      node0.getStaticSourceFile();
      node0.isOr();
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = new Node(54, (-1712), (-1997));
      Node node1 = new Node(36, node0, node0, node0, node0);
      node0.removeChildAfter(node1);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = new Node(149, 149, 114);
      node0.isAssignAdd();
      node0.putIntProp(114, 114);
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = Node.newString("}b2H0v4K.Cmq", 2170, 2170);
      Node node1 = new Node(2404, 152, 4);
      Node node2 = Node.newString(51, "y8:;2RTrYD$T5SD3", 2170, 38);
      Node node3 = new Node(31, node2, node1, node0, node2);
      node3.removeChildAfter(node0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = Node.newString("8TH}tHrqxVW^");
      Node node1 = node0.cloneNode();
      node0.getJSType();
      Node node2 = Node.newNumber((double) 15, 55, 2052);
      node2.isVarArgs();
      Node node3 = Node.newNumber((double) 49);
      node3.isLabel();
      Node node4 = new Node(16, node1, node0, node2, node2);
      Node node5 = new Node(2986, node4, 3, 154);
      node5.getJsDocBuilderForNode();
      Node.extractCharno(30);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = new Node(106);
      node0.isOr();
      Node node1 = Node.newString("t_+=;VF'8}0Grt", 31, 50);
      node1.isLabel();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = Node.newString((-1532), "com.google.common.collect.ImmutableAsList", 16, (-1532));
      Node node1 = Node.newString(4, "first new child has existing sibling");
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node1.addChildToFront(node2);
      Node node3 = new Node(56);
      node1.isSyntheticBlock();
      node2.isCast();
      node0.hasChildren();
      node0.isNot();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isEquivalentTo(node2);
      node3.isUnscopedQualifiedName();
      node2.isScript();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3);
      node0.isInstanceOf();
      node0.isGetterDef();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.setMutatesGlobalState();
      Node node0 = new Node(0, 110, 0);
      InputId inputId0 = new InputId("first new child has existing parent");
      Node.newString("first new child has existing parent", 39, 42);
      node0.putBooleanProp(0, true);
      inputId0.toString();
      node0.setInputId(inputId0);
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(37, node0, node0, node0);
      node0.addChildrenToBack(node1);
      Node node2 = Node.newString("first new child has existing parent", (-106), 32);
      node2.isNew();
      node0.removeProp(30);
      node0.setSourceEncodedPositionForTree(12);
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = Node.newString("new child has existing parent");
      node0.wasEmptyNode();
      node0.setString("new child has existing parent");
      node0.hasOneChild();
      Node node1 = new Node(36, node0, (-4729), 262);
      node1.isAssignAdd();
      node1.setType(30);
      node1.removeChildAfter(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Iterator<JSType> iterator0 = null;
      // Undeclared exception!
      try { 
        ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = new Node((-1997), (-1712), (-1811));
      Node node1 = new Node(101, node0, node0, node0, node0);
      node1.removeChildAfter(node0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4578);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags6.setMutatesGlobalState();
      Node node0 = new Node(4568, 110, 4568);
      InputId inputId0 = new InputId("first new child has existing parent");
      Node node1 = node0.cloneTree();
      node1.isContinue();
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("new child has existing parent");
      node0.wasEmptyNode();
      Node node1 = new Node(2048, node0, node0, node0, node0);
      Node node2 = Node.newString("new child has existing parent");
      node0.getLength();
      node0.getIndexOfChild(node2);
      node1.isVarArgs();
      node2.isScript();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) null);
      node3.detachChildren();
      node3.getAncestors();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = node0.cloneNode();
      node1.toStringTree();
      node1.getJsDocBuilderForNode();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object#Key");
      Node.newNumber((-2953.56989288));
      node0.getIndexOfChild(node1);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = new Node(105);
      node0.isOr();
      Node node1 = Node.newString("t_+=;VF'8}0Grt", 1, (-94));
      node1.getIndexOfChild(node0);
      node0.isEmpty();
      node1.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = node0.cloneNode();
      node0.getProp((-1675));
      node1.putProp(2, (Object) null);
      node0.toStringTree();
      Node node2 = node0.cloneNode();
      node1.toStringTree();
      Node node3 = new Node(4095, node0, 56, 52);
      Node node4 = new Node(8, node2, node3, node1);
      node4.isQualifiedName();
      Node node5 = new Node(36);
      node5.removeProp(46);
      node5.useSourceInfoFromForTree(node1);
      node4.getChildAtIndex(55);
      int int0 = (-1341);
      // Undeclared exception!
      try { 
        node3.removeProp(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = Node.newString("new child has existing parent");
      node0.wasEmptyNode();
      Node node1 = new Node(2048, node0, node0, node0, node0);
      int int0 = Node.ORIGINALNAME_PROP;
      node1.hasOneChild();
      Node node2 = new Node(32, 2080, 38);
      Node node3 = new Node(40, node1, node0, node1);
      node1.addChildrenAfter(node2, node3);
      node1.isInstanceOf();
      node0.isGetterDef();
      // Undeclared exception!
      try { 
        node3.srcref(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = Node.newString("}b2H0v4K.Cmq", 2170, 4702);
      Node node1 = Node.newString("ARRAYLIT");
      node1.children();
      node0.srcref(node1);
      node0.setType(4702);
      node0.isDefaultCase();
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = Node.newString(1559, "NoResolvedType");
      node0.children();
      node0.toString(true, true, true);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = new Node(125, 125, 13);
      node0.isEmpty();
      node0.isOr();
      node0.setSourceEncodedPositionForTree(125);
      Node node1 = Node.newString("M.4ldn*AlZ%X}6_", 1, 13);
      node0.isEquivalentTo(node1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = (-1987);
      Node node0 = Node.newString((-1987), "WH", (-2671), (-3449));
      Node node1 = new Node((-3449), node0, 39, 48);
      Node node2 = new Node((-1987), node1, node1, node0, node1);
      int int1 = 102;
      int int2 = 105;
      Node node3 = new Node(int0, node2, node0, int1, int2);
      node3.isComma();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = Node.newString((-1532), "com.google.common.collect.ImmutableAsList", 16, (-1532));
      Node node1 = new Node((-1532), node0, node0, node0, node0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("!Hy{8onMX~bB");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node1.isUnscopedQualifiedName();
      jSTypeRegistry0.resetForTypeCheck();
      node1.isLabel();
      Node node2 = new Node(12, node1, node1, node0, node1);
      int int0 = 38;
      int int1 = 4702;
      Node node3 = new Node(int0, node0, node0.INPUT_ID, int1);
      node0.getJsDocBuilderForNode();
      int int2 = 33;
      // Undeclared exception!
      try { 
        Node.extractCharno(int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = new Node(2170);
      Node node1 = new Node(57, node0, 54, 55);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      node0.getString();
      node1.isContinue();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = new Node(15, 56, (-1482));
      Node node1 = new Node((-1482), node0);
      node0.isEquivalentTo(node1);
      node1.replaceChild(node0, node0);
      node1.isNumber();
      int int0 = 1891;
      // Undeclared exception!
      try { 
        node1.getIntProp(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3);
      Node node1 = new Node(43, node0, node0);
      node0.isQualifiedName();
      node0.isTry();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.replaceChild(node0, node0);
      node1.getLastSibling();
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = Node.newNumber(0.7);
      Node node1 = Node.newNumber((double) 4, 12, 39);
      node1.replaceChild(node0, node0);
      // Undeclared exception!
      try { 
        node0.siblings();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(113);
      node0.isBreak();
      Node node1 = new Node(36);
      node1.setType(113);
      node0.isAnd();
      node1.isAdd();
      Node node2 = new Node(4095, 49, 117);
      node2.isExprResult();
      node0.getChangeTime();
      Node node3 = new Node(56, node0);
      Node node4 = new Node((-19), node3, node3, 113, 43);
      node3.addChildAfter(node4, node0);
      node3.replaceChild(node0, node0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$", 38, 38);
      node0.getSourceFileName();
      node0.isAssignAdd();
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = new Node(50, node0, node0, node0, 4, 47);
      node1.isCast();
      node0.isBreak();
      Node node2 = Node.newString(55, "Y[");
      node2.isNot();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isReturn();
      node1.isUnscopedQualifiedName();
      node1.isScript();
      node2.toString();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      int int0 = 881;
      Node node0 = new Node(881);
      node0.getExistingIntProp(2);
      Node node1 = null;
      try {
        node1 = new Node(int0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 2
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = new Node(149, 149, 114);
      node0.getExistingIntProp(149);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = Node.newString((-1532), "com.google.common.collect.ImmutableAsList", 16, (-1532));
      Node node1 = Node.newString(4, "first new child has existing sibling");
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node1.addChildToFront(node2);
      Node node3 = new Node(56);
      node1.isSyntheticBlock();
      node2.isCast();
      node0.hasChildren();
      node0.isCast();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node2.hasMoreThanOneChild();
      node3.isUnscopedQualifiedName();
      node2.isScript();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(106);
      node0.setType(106);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.hasMoreThanOneChild();
      node0.isExprResult();
      node0.isVoid();
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = Node.newString("String has leading or trailing whitespace");
      node0.isVar();
      node0.isAssignAdd();
      Node node1 = Node.newString("String has leading or trailing whitespace");
      node1.isNull();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Go`g!A#a;esU9'");
      Node node0 = new Node(19, (-235), 8);
      node0.getSideEffectFlags();
      node0.mayMutateGlobalStateOrThrow();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(1, nodeArray0, (-1860), 4095);
      node0.addChildToBack(node1);
      node0.setIsSyntheticBlock(true);
      node0.isNull();
      node0.mayMutateArguments();
      node0.getStaticSourceFile();
      node0.isGetElem();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.setIsSyntheticBlock(true);
      Node node1 = Node.newNumber((-1813.4879296204579));
      node1.setSideEffectFlags(12);
      node1.siblings();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node0 = Node.newString("@,4).lRi@?=g^\"xxG7", 107, 8388608);
      node0.detachFromParent();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getSourceOffset();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("V)Z+", "V)Z+", 4418, 4418);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString(34, ">h`-$j?8+MH:obB");
      node0.isNew();
      node0.removeProp(31);
      Node node1 = new Node(46, node0, node0, node0, 0, 57);
      node1.getStaticSourceFile();
      node1.isOr();
      node1.getSourceOffset();
      node0.detachFromParent();
      node0.children();
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = Node.newString("", 1375, 212);
      node0.putProp(212, "");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node1 = new Node(8, nodeArray0);
      nodeArray0[1].isOptionalArg();
      node1.isBlock();
      // Undeclared exception!
      try { 
        nodeArray0[2].isOnlyModifiesThisCall();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = Node.newString(3, "String node not created with Node.newString", 3, 3);
      Node node1 = new Node(32, node0, node0, node0, node0, 38, 29);
      node0.setSourceFileForTesting("IsEqualTo(");
      node0.isVar();
      Node node2 = Node.newNumber(3.0);
      node2.isUnscopedQualifiedName();
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1582), 113);
      node0.getSideEffectFlags();
      node0.isTypeOf();
      node0.getBooleanProp((-1644));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.setSourceFileForTesting("com.google.common.collect.ImmutableMap");
      Node.newString("com.google.javascript.rhino.Node$AbstractPropListItem");
      node0.isSyntheticBlock();
      node0.removeProp(15);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      Node node1 = Node.newString(57, "com.google.javascript.rhino.Node$AbstractPropListItem");
      node1.setStaticSourceFile(simpleSourceFile0);
      node0.getProp((-1656));
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = new Node(106);
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = Node.newString("}@dg,=||cOv");
      node0.isScript();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = Node.newNumber((-1668.204), (-3050), 265);
      node1.getAncestors();
      node1.isGetElem();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber((double) 12, 46, 30);
      node0.isNumber();
      node1.isGetElem();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = Node.newNumber((-2743.4489283687253));
      node0.hasChildren();
      int int0 = Node.ORIGINALNAME_PROP;
      Node node1 = Node.newString(55, "gtG_6\"?");
      node1.isIn();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%$RwV_n#QbEnyB2wT");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isIn();
      SimpleErrorReporter.getMessage("", jSTypeArray0);
      node0.isTry();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(113);
      node0.isQuotedString();
      Node node1 = new Node(51, node0, node0, node0, node0, 0, 310);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.isVoid();
      node0.isGetProp();
      node1.isIn();
      node1.setString("h}b2H0v4K.Cmq");
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = new Node(65535);
      node0.getStaticSourceFile();
      node0.type = 65535;
      node0.isGetterDef();
      double double0 = 37.0;
      node0.checkTreeEquals((Node) null);
      node0.setDouble(double0);
      Set<String> set0 = null;
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = Node.newNumber((-443.2437877775));
      node0.checkTreeEquals((Node) null);
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = new Node((-1020));
      int int0 = Node.ORIGINALNAME_PROP;
      node0.hasOneChild();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.iterator();
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      Node node1 = new Node(309, 1120, 39);
      Node node2 = Node.newString("Xm]UT9Q}!*nY=b8'/-", 36, 65535);
      node2.getSideEffectFlags();
      node0.mayMutateGlobalStateOrThrow();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node2;
      Node node3 = new Node(30, nodeArray0, 112, 4274);
      node1.addChildToBack(node0);
      node2.setIsSyntheticBlock(false);
      node3.isNull();
      node2.mayMutateArguments();
      node1.getStaticSourceFile();
      node2.isOr();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = new Node(106);
      node0.isOr();
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = Node.newString("}b2H0v4K.Cmq", 2170, 4702);
      Node node1 = Node.newString("ARRAYLIT");
      node1.children();
      Node node2 = node0.srcref(node1);
      node0.setType(4702);
      node1.isGetterDef();
      node2.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = Node.newNumber((double) 37);
      node1.isCast();
      node1.hasChildren();
      Node node2 = Node.newString(55, "Y[");
      node2.isNot();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isEquivalentTo(node1);
      node1.isUnscopedQualifiedName();
      node1.isScript();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(49, node0, node0, 54, 55);
      node0.isNot();
      node1.useSourceInfoFrom(node0);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.addSuppression("\n\nSubtree1: ");
      node1.isAssignAdd();
      node1.isUnscopedQualifiedName();
      node1.isScript();
      node1.isCase();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = Node.newNumber((double) 37);
      node1.addSuppression("gtG_6\"?");
      node_FileLevelJsDocBuilder0.append("side_effect_flags");
      node_FileLevelJsDocBuilder0.append("side_effect_flags");
      node_FileLevelJsDocBuilder0.append("q,+1*p:m[$g");
      node0.isVoid();
      node0.isGetProp();
      node0.isDelProp();
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = Node.newNumber(1685.1222466895626);
      node0.getQualifiedName();
      node0.isFalse();
      node0.isRegExp();
      node0.getLineno();
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Node node0 = Node.newNumber(53.0);
      Node node1 = new Node(2080, node0, node0, node0, node0, 4268, 56);
      node1.isFalse();
      node1.isNull();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = new Node((-1020), (-1020), (-1020));
      Node node1 = Node.newNumber((double) 43);
      node0.addChildrenToFront(node1);
      node0.removeProp(38);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      Node node2 = new Node(37, nodeArray0);
      // Undeclared exception!
      try { 
        node2.getStaticSourceFile();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = new Node(65535);
      node0.getStaticSourceFile();
      Node node1 = new Node((-1582));
      node0.isEquivalentTo(node1, true, true, true);
      node0.isGetterDef();
      node0.setDouble(37.0);
      Set<String> set0 = null;
      node0.setDirectives(set0);
      int int0 = (-589);
      node0.setChangeTime(int0);
      node0.isLabelName();
      // Undeclared exception!
      try { 
        node0.getAncestors();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 65535
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = new Node(106);
      node0.isAnd();
      node0.isAdd();
      node0.isExprResult();
      node0.getChangeTime();
      node0.isFromExterns();
      node0.setDouble(0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = Node.newString("8TH}tHrqxVW^");
      Node node1 = node0.cloneNode();
      node1.isContinue();
      node0.addChildBefore(node1, node1);
      // Undeclared exception!
      try { 
        node1.getJSType();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      Node node0 = new Node(2161, (Node) null, (Node) null, (Node) null, (Node) null, 37, 30);
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = Node.newString("8TH}tHrqxVW^", 0, 0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("GZ/R}[0,`w>#2<rd~MK");
      node0.isNoSideEffectsCall();
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("8TH}tHrqxVW^");
      node_FileLevelJsDocBuilder0.append("N=F%VK/D'6[*S");
      node0.removeProp(0);
      node0.isNumber();
      node0.isRegExp();
      node0.isWith();
      node0.isCall();
      node0.isVarArgs();
      Node node1 = Node.newString("");
      node1.removeChildren();
      node1.setLineno(15);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node((-1393));
      node0.isQuotedString();
      node0.isTry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.setLineno(661);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = Node.newString("in9r=ec", 36, 36);
      Node node1 = new Node(38, node0, node0, node0, node0, 0, 48);
      Node node2 = new Node(46, node0, node0, node0, 53, 43);
      node0.getJsDocBuilderForNode();
      // Undeclared exception!
      try { 
        node1.getQualifiedName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = Node.newNumber((double) 4702);
      Node node1 = Node.newString("second new child has existing sibling");
      node1.addChildToBack(node0);
      Node node2 = new Node(57, node0, node1, node1, 57, 40);
      node2.removeChildren();
      node0.getNext();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = new Node(881);
      Node node1 = new Node(881, node0, node0);
      node1.getDirectives();
      node0.isEquivalentTo(node1, false, true, false);
      Node node2 = new Node(54, node0, node0, node0);
      node1.addChildrenAfter(node2, node2);
      node1.isInstanceOf();
      // Undeclared exception!
      try { 
        node2.isGetterDef();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("The new child node already has a parent.", "The new child node already has a parent.", 26, 26);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(3053);
      Integer integer2 = new Integer(1895);
      Integer integer3 = new Integer(3053);
      Integer integer4 = new Integer(2444);
      Integer integer5 = new Integer(2444);
      Integer integer6 = new Integer(2136);
      Integer integer7 = new Integer(110);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer3;
      integerArray0[1] = integer1;
      Integer integer8 = new Integer(3053);
      integerArray0[2] = integer8;
      integerArray0[3] = integer0;
      integerArray0[4] = integer4;
      integerArray0[5] = integer0;
      integerArray0[6] = integer4;
      integerArray0[7] = integer7;
      integerArray0[8] = (Integer) 0;
      ImmutableList.of((Integer) 1, (Integer) 1, (Integer) 0, integer0, integer1, integer2, integer0, integer3, integer4, integer5, integer6, integer7, integerArray0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = Node.newString((-1532), "com.google.common.collect.ImmutableAsList", 16, (-1532));
      Node node1 = Node.newString(4, "first new child has existing sibling");
      Node node2 = node0.useSourceInfoFromForTree(node1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node3 = Node.newString(1137, "first new child has existing sibling", 15, (-377));
      Node node4 = new Node(43, 1342, 1480);
      Node node5 = Node.newString((-2457), "com.google.common.collect.ImmutableAsList", 57, 55);
      Node node6 = new Node((-24), node3, node0, node5);
      Node node7 = node3.useSourceInfoFrom(node5);
      node0.getSourceFileName();
      node6.addChildToBack(node4);
      node1.removeFirstChild();
      node2.isScript();
      node0.isName();
      node4.getExistingIntProp(49);
      node7.mayMutateArguments();
      node5.isCase();
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = Node.newString("}@dg,=||cOv");
      node0.isScript();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = Node.newNumber((-1669.213098912413), (-3050), 265);
      node1.isGetElem();
      node0.cloneTree();
      node1.isThis();
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = Node.newString("is_namespace");
      node0.isComma();
      node0.isGetElem();
      node0.isLabelName();
      node0.detachChildren();
      node0.getAncestors();
      node0.isFalse();
      node0.getAncestors();
      node0.isEquivalentTo((Node) null, true, false, false);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("new child has existing parent");
      node0.wasEmptyNode();
      Node node1 = new Node(2048, node0, node0, node0, node0);
      int int0 = Node.ORIGINALNAME_PROP;
      node1.hasOneChild();
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      node1.isCast();
      node1.isDec();
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = new Node(65535);
      node0.getStaticSourceFile();
      Node node1 = new Node((-1582));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isEquivalentTo(node1, true, true, true);
      node0.isGetterDef();
      node1.isFunction();
      node0.setDouble(37.0);
      Set<String> set0 = null;
      node0.setDirectives(set0);
      int int0 = (-589);
      node0.setChangeTime(int0);
      node0.isLabelName();
      // Undeclared exception!
      try { 
        node0.getAncestors();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 65535
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = new Node(3);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isObjectLit();
      node0.isGetterDef();
      node0.isFunction();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = Node.newString("xzKj");
      node0.wasEmptyNode();
      node0.setString((String) null);
      node0.hasOneChild();
      int int0 = (-1603);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = new Node(93);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node node1 = Node.newString("com.google.common.collect.RegularImmutableTable$Values");
      Node node2 = new Node(16, node1, node0, node1, 458, 36);
      node2.addChildToBack(node1);
      node0.addChildrenAfter(node1, node2);
      node0.isVar();
      int int1 = null;
      try {  
      int1 = Node.IS_NAMESPACE;
      } catch(MockIllegalArgumentException e) {}
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = Node.newString(3, "CharMatcher.NONE", 3, 1715);
      Node node1 = new Node((-2047), node0);
      node1.isSyntheticBlock();
      Node node2 = new Node(1715, 16, 1592);
      Node.newString("Ss\"If(DMkVsQKZ", (-377), 4095);
      node0.getSideEffectFlags();
      Node node3 = Node.newString(39, "daOR$?}uY.VBctni^Y", 636, 39);
      node3.mayMutateGlobalStateOrThrow();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node2;
      nodeArray0[1] = node1;
      Node node4 = new Node(42, nodeArray0, 2048, 40);
      node0.addChildToBack(node1);
      node1.isSyntheticBlock();
      boolean boolean0 = true;
      nodeArray0[1].removeChildren();
      node1.setIsSyntheticBlock(boolean0);
      nodeArray0[0].isNull();
      nodeArray0[0].mayMutateArguments();
      node2.getStaticSourceFile();
      node0.isOr();
      nodeArray0[1].getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = Node.newNumber((double) 37);
      node_FileLevelJsDocBuilder0.append("side_effect_flags");
      node_FileLevelJsDocBuilder0.append("side_effect_flags");
      Node[] nodeArray0 = new Node[0];
      int int0 = (-2851);
      node1.setQuotedString();
      Node node2 = new Node(node1.STATIC_SOURCE_FILE, nodeArray0, int0, node1.DIRECT_EVAL);
      int int1 = 112;
      Node node3 = new Node(int1, nodeArray0);
      int int2 = 122;
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = new Node((-1992));
      node0.isVoid();
      node0.setQuotedString();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node0.JSDOC_INFO_PROP);
      // Undeclared exception!
      try { 
        node0.isDebugger();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = Node.newString("new child has existing parent");
      node0.isCast();
      Node node1 = new Node(2048, node0, node0, node0, node0);
      node0.isSyntheticBlock();
      node1.isCast();
      node0.isVoid();
      node0.isNot();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node1.isEquivalentTo(node0);
      node0.isUnscopedQualifiedName();
      node1.isScript();
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.incrementGeneration();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      linkedList0.offerLast(templateType1);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isDebugger();
      node0.getExistingIntProp(1);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      int int0 = 1715;
      String string0 = "";
      Node node0 = Node.newString(1715, "");
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1715
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newString(" # uN26zMw@");
      node1.isEquivalentToShallow(node0);
      node1.getDouble();
      node1.isLabel();
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = Node.newString((-1081), "gtG_6\"?", (-1081), (-1081));
      node0.isSyntheticBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = Node.newNumber((-2743.301));
      node0.isCast();
      node1.hasChildren();
      node1.checkTreeEqualsImpl(node0);
      Node node2 = Node.newString(1783, "7");
      node1.isNot();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isEquivalentTo(node2);
      node0.isUnscopedQualifiedName();
      node0.isScript();
      node0.isRegExp();
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = Node.newNumber((double) 37);
      node1.isCast();
      node0.isBreak();
      Node node2 = Node.newString(55, "Y[");
      node2.isNot();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isReturn();
      node1.isUnscopedQualifiedName();
      node1.isScript();
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node node0 = Node.newNumber(0.7);
      Node node1 = Node.newNumber((double) 30, 493, 53);
      node1.isName();
      node1.isVoid();
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = Node.newNumber(3.0, (-2404), (-1297));
      Node node1 = node0.getLastSibling();
      node1.isLocalResultCall();
      node1.isBreak();
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node node0 = Node.newString(4, "String node not created with Node.newString", (-475), (-475));
      node0.isCall();
      Node node1 = new Node(32, node0, node0, node0, node0, 3657, 29);
      node1.putBooleanProp(1078, true);
      node1.setCharno(30);
      node0.isReturn();
      node1.isEquivalentTo(node0);
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = Node.newString("new child has existing parent");
      node0.wasEmptyNode();
      Node node1 = new Node(1299);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isObjectLit();
      node0.isGetterDef();
      node0.isFunction();
      node1.setDouble(4);
      Set<String> set0 = null;
      node0.setDirectives(set0);
      node1.setChangeTime(node0.INFERRED_FUNCTION);
      // Undeclared exception!
      try { 
        node1.isLabelName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1299
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = new Node(93);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isVar();
      int int1 = Node.IS_NAMESPACE;
      node0.hasOneChild();
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      int int0 = 65535;
      Node node0 = new Node(65535);
      node0.getStaticSourceFile();
      node0.setString("");
      // Undeclared exception!
      try { 
        node0.hasOneChild();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 65535
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = new Node((-2));
      node0.setString("h}b2H0v4K.Cmq");
      node0.isInstanceOf();
      // Undeclared exception!
      try { 
        node0.isGetterDef();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = Node.newString("8TH}tHrqxVW^", 0, 0);
      node0.getJsDocBuilderForNode();
      node0.isVarArgs();
      node0.isBlock();
      node0.setString("Should not happen\n");
      node0.hasOneChild();
      node0.isAssignAdd();
      node0.setType(16);
      Node node1 = Node.newNumber((double) 0);
      Node node2 = node0.removeChildAfter(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) stack0);
      // Undeclared exception!
      try { 
        node0.getIndexOfChild(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = Node.newString("", 1375, 212);
      node0.getDirectives();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("");
      node0.isNoSideEffectsCall();
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("first new child has existing parent");
      node_FileLevelJsDocBuilder0.append("");
      node0.removeProp(86);
      node0.isQuotedString();
      node0.isNumber();
      node0.isRegExp();
      node0.isWith();
      node0.isCall();
      node0.isVarArgs();
      Node node1 = Node.newString("");
      node0.removeChildren();
      node1.setLineno(2289);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = Node.newString("jYNc\"c7Igl");
      Node node1 = node0.cloneNode();
      node0.toStringTree();
      node1.getJsDocBuilderForNode();
      node0.isGetterDef();
      node1.isQuotedString();
      node0.isTry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node1.isCase();
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList1);
      Node node1 = new Node(446, node0);
      node0.removeProp(41);
      node0.isNumber();
      node0.isRegExp();
      node0.isWith();
      node1.isCall();
      node0.isVarArgs();
      Node.newString("Eg{%xb*&XGbIcRh$@C");
      node1.removeChildren();
      node0.setLineno(608);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = new Node(3);
      node0.getInputId();
      node0.mayMutateArguments();
      Node node1 = new Node(32, node0, node0, node0, node0, 3657, 29);
      node1.removeChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16777216);
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("inferred", "inferred", (-1033), (-1033));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(690, 690, 690);
      Node node1 = new Node(43, node0);
      node0.replaceChild(node1, node1);
      node1.isNumber();
      int int0 = 1790;
      // Undeclared exception!
      try { 
        node0.getIntProp(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = node0.cloneNode();
      node1.toStringTree();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("Not declared as a type name");
      node_FileLevelJsDocBuilder0.append("q,+1*p:m[$g");
      node0.isVoid();
      node1.isGetProp();
      node0.getChildBefore(node1);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7JWL3Zf\"::/y6JQ");
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(586, nodeArray0, 303, 586);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.setSourceFileForTesting("7JWL3Zf\"::/y6JQ");
      Node node1 = node0.useSourceInfoIfMissingFrom((Node) null);
      node0.getSourceOffset();
      node0.getJsDocBuilderForNode();
      node0.isFromExterns();
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3);
      Node node1 = new Node(54, node0, node0, node0, node0);
      node1.isCatch();
      node1.isCase();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("Number node not created with Node.newNumber");
      node1.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList1);
      Node node1 = new Node(446, node0);
      node1.getJsDocBuilderForNode();
      Node node2 = new Node(4095, node1, node1, node0);
      node1.addChildrenToBack(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = Node.newString("}@dg,=||cOv");
      node0.isScript();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = new Node(15, node0);
      node1.isGetElem();
      node0.cloneTree();
      node1.isThis();
      node1.getLastChild();
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = Node.newString((-1081), "gtG_6\"?", (-1081), (-1081));
      node0.isSyntheticBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = Node.newNumber((-2743.301));
      node0.isCast();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gtG_6\"?");
      node1.hasChildren();
      node1.checkTreeEqualsImpl(node0);
      Node node2 = Node.newString(1783, "7");
      node1.isNot();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isEquivalentTo(node2);
      node0.isUnscopedQualifiedName();
      node0.isScript();
      node0.isRegExp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags5.valueOf();
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      int int0 = 36;
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = new Node(29, node0);
      node_FileLevelJsDocBuilder0.append("side_effect_flags");
      node1.isFunction();
      node0.setDouble(46);
      Set<String> set0 = null;
      node0.setDirectives(set0);
      // Undeclared exception!
      try { 
        node1.setChangeTime(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 36
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$!f=%jLR`P<xsa85C+");
      Node node0 = Node.newString("lh+A W6T", 114, 365);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = new Node((-2986), node0);
      node0.isEquivalentTo(node1);
      node0.setSourceEncodedPosition(114);
      node0.setOptionalArg(true);
      node0.isDefaultCase();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jiI1$");
      Node node2 = Node.newString("lh+A W6T");
      node2.mayMutateGlobalStateOrThrow();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lh+A W6T");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isGetProp();
      node0.mayMutateGlobalStateOrThrow();
      Node.mergeLineCharNo(10, 31);
      node0.getBooleanProp(43);
      Node.extractCharno(37);
      node0.isEquivalentToShallow(node1);
      node0.isEquivalentToShallow(node1);
      node1.isLocalResultCall();
      node0.setLineno(79);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3);
      Node node1 = new Node(3657, node0, node0, node0, node0, 29, (-866));
      node1.cloneTree();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node1.isUnscopedQualifiedName();
      node1.isScript();
      node1.isCase();
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Node node0 = Node.newString("\"-<");
      node0.isEmpty();
      Node node1 = new Node(52, node0, node0, node0, node0);
      Node node2 = new Node(38, node0, node0, 1, 1);
      // Undeclared exception!
      try { 
        node1.isGetElem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Node node0 = Node.newNumber(37.0);
      Node node1 = Node.newString("free_call", 3, 12);
      node0.copyInformationFromForTree(node1);
      Node node2 = Node.newString("free_call", 116, 51);
      Node node3 = Node.newString(".");
      Node node4 = new Node(1354, node0, node2, node3, node2, 36, 56);
      node2.mayMutateArguments();
      Node node5 = Node.newNumber((double) 46);
      node5.isFalse();
      node3.isNull();
      node4.wasEmptyNode();
      node4.mayMutateGlobalStateOrThrow();
      node3.isNE();
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node node0 = Node.newString("new child has existing parent");
      node0.wasEmptyNode();
      Node node1 = new Node(2048, node0, node0, node0, node0);
      Node node2 = Node.newNumber((double) 29, 2386, 30);
      node2.isGetElem();
      Node node3 = Node.newString(15, "");
      Node node4 = node3.cloneTree();
      node2.isThis();
      node4.isTrue();
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node node0 = Node.newString((-1549), "com.google.common.collect.ImmutableAsList", 16, (-1549));
      Node node1 = Node.newString(4, "first new child has existing sibling");
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node1.addChildToFront(node2);
      Node node3 = new Node(56);
      node3.getInputId();
      node1.isSyntheticBlock();
      node2.isCast();
      node3.getAncestors();
      node0.hasChildren();
      node0.isCast();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node2.hasMoreThanOneChild();
      node3.isUnscopedQualifiedName();
      node2.isScript();
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node node0 = Node.newString("fPwbIB5&]x2t/", (-3385), (-3385));
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      node0.isSyntheticBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = new Node(52, node0);
      node_FileLevelJsDocBuilder0.append("");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder1.append("/NM;VdC");
      node_FileLevelJsDocBuilder0.append("q,+1*p:m[$g");
      node0.isQualifiedName();
      Node node2 = new Node(85);
      Node node3 = node1.useSourceInfoFromForTree(node0);
      node3.getChildAtIndex(31);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = Node.newString("", 1375, 212);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.setDirectives(linkedHashSet0);
      node0.putProp(212, "");
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node0.setSideEffectFlags(node_SideEffectFlags2);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), (-3477), 1195);
      Node node1 = new Node((-186), node0, 42, 32);
      node1.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node node0 = Node.newString((-1081), "gtG_6\"?", (-1081), (-1081));
      node0.isSyntheticBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = Node.newNumber((-2743.301));
      node0.isCast();
      node1.hasChildren();
      node1.checkTreeEqualsImpl(node0);
      Node node2 = Node.newString(1783, "7");
      node1.isNot();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node.newNumber((-2743.301), 39, 49);
      node0.mayMutateArguments();
      Node node3 = new Node(4194304);
      node3.isString();
      node2.isGetElem();
      Node.extractLineno(29);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(12, 4095, 57);
      node0.isString();
      node1.isOr();
      int int0 = Node.LAST_PROP;
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Node node0 = new Node(40);
      node0.isCast();
      node0.isString();
      Node node1 = Node.newNumber((double) 57, 31, 56);
      node0.isEquivalentTo(node1, false, false, false);
      int int0 = Node.LAST_PROP;
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Node node0 = new Node(2280);
      node0.isAdd();
      node0.isExprResult();
      node0.isFromExterns();
      Node node1 = Node.newString("in%r=ec$");
      node1.setDouble(15);
      node1.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Node node0 = Node.newString("new child has existing parent");
      node0.wasEmptyNode();
      node0.isSyntheticBlock();
      Node node1 = new Node(4095);
      node0.isWith();
      node1.isCall();
      node1.isVarArgs();
      Node.extractCharno(39);
      node1.isSetterDef();
      Node node2 = Node.newNumber(4090.705);
      Node node3 = Node.newNumber((-443.2437877775));
      node1.checkTreeEquals(node0);
      int int0 = 3;
      Node node4 = new Node(node0.MAX_COLUMN_NUMBER, node2, node3, node0, node0, int0, node1.IS_DISPATCHER);
      Node node5 = null;
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.getSideEffectFlags();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = node0.cloneNode();
      node1.toStringTree();
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Node node0 = new Node((-1312));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = new Node((-1312), node0, node0, 40, (-2356));
      node1.getDirectives();
      node1.setDirectives((Set<String>) null);
      node1.isDelProp();
      node0.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      Node node1 = new Node(309, 1120, 39);
      Node.newString("Xm]UT9Q}!*nY=b8'/-", 36, 65535);
      Node node2 = Node.newNumber((double) 16, 54, 37);
      node2.isGetElem();
      Node.newString(36, "Xm]UT9Q}!*nY=b8'/-");
      Node node3 = node1.cloneTree();
      node3.isThis();
      node3.isTrue();
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node node0 = Node.newString("", 1375, 212);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.setDirectives(linkedHashSet0);
      node0.putProp(212, "");
      node0.isArrayLit();
      node0.setType(54);
      Node node1 = new Node(4095, node0, (-499), (-747));
      node1.hasChild(node0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Node node0 = new Node(113);
      node0.isBreak();
      Node node1 = new Node(36);
      node1.setType(113);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.isString();
      node1.isObjectLit();
      node1.checkTreeEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$", 38, 38);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("in%r=ec$");
      Node node1 = node0.useSourceInfoFrom(node0);
      Node.newNumber((double) 46);
      node0.isQualifiedName();
      node0.checkTreeEquals(node1);
      Node node2 = new Node(39, node0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(4692, nodeArray0);
      node0.getSourceFileName();
      Node node1 = new Node(2);
      node1.isWith();
      node1.isCall();
      node0.isVarArgs();
      Node.extractCharno(690);
      node0.isSetterDef();
      Node node2 = Node.newNumber((double) 54);
      node1.checkTreeEquals(node1);
      node2.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$", 43, 43);
      Node node1 = new Node(43, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("in%r=ec$");
      Node node2 = node1.useSourceInfoFrom(node0);
      node0.isSetterDef();
      Node.newNumber(36.0);
      node1.isQualifiedName();
      node1.checkTreeEquals(node2);
      node0.setSideEffectFlags((-2475));
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$");
      node0.getJsDocBuilderForNode();
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isFor();
      node0.isWith();
      double double0 = 0.0;
      int int0 = 89;
      Object[] objectArray0 = new Object[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[0] = (Object) node0;
      objectArray0[1] = (Object) simpleErrorReporter0;
      objectArray0[2] = (Object) node0;
      objectArray0[3] = (Object) jSTypeRegistry0;
      objectArray0[4] = (Object) linkedList0;
      objectArray0[5] = (Object) linkedList0;
      objectArray0[6] = (Object) simpleErrorReporter0;
      SimpleErrorReporter.getMessage("Object#Key", objectArray0);
      Node.newNumber(double0, node0.COLUMN_MASK, int0);
      JSDocInfo jSDocInfo0 = null;
      try {
        jSDocInfo0 = new JSDocInfo();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property Object#Key
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)118;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString("8TH}tHrqxVW^", 0, 0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("GZ/R}[0,`w>#2<rd~MK");
      node0.isNoSideEffectsCall();
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("8TH}tHrqxVW^");
      node_FileLevelJsDocBuilder0.append("N=F%VK/D'6[*S");
      node0.removeProp(0);
      node0.isNumber();
      node0.isRegExp();
      node0.isWith();
      Node node1 = Node.newString(43, "", (-1), 30);
      Node node2 = node1.clonePropsFrom(node0);
      node2.toString();
      node0.isLocalResultCall();
      node1.getParent();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Node node0 = Node.newString(3, "String node not created with Node.newString", (-475), (-475));
      node0.isCall();
      InputId inputId0 = new InputId("String node not created with Node.newString");
      Node node1 = new Node(32, node0, node0, node0, node0, 29, 29);
      Node node2 = node1.cloneTree();
      node2.putBooleanProp(46, true);
      node1.setInputId(inputId0);
      Node node3 = Node.newString("K<}#cE~=?p<av", 29, 148);
      node2.isOnlyModifiesArgumentsCall();
      Node node4 = Node.newString(49, "K<}#cE~=?p<av", 1, 48);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      node4.isEquivalentTo((Node) null);
      node3.addChildAfter(node1, node2);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Node node0 = Node.newString("", 1375, 212);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.setDirectives(linkedHashSet0);
      node0.putProp(212, "");
      node0.isArrayLit();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node0.getProp(212);
      node_SideEffectFlags1.setMutatesArguments();
      node0.isDec();
      node0.isThis();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.valueOf();
      node0.isVarArgs();
      node0.setOptionalArg(false);
      Node node1 = Node.newString(47, "", 100, 115);
      node0.addChildrenToFront(node1);
      node0.isEquivalentTo(node1);
      node1.isUnscopedQualifiedName();
      node1.isScript();
      node0.isRegExp();
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = node0.cloneNode();
      node1.toStringTree();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("Not declared as a type name");
      node_FileLevelJsDocBuilder0.append("q,+1*p:m[$g");
      node0.isVoid();
      node1.isGetProp();
      node0.hasChild(node1);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ImmutableAsList");
      Node node1 = Node.newString(4, "first new child has existing sibling");
      Node node2 = node0.useSourceInfoFromForTree(node1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node3 = Node.newString(1137, "first new child has existing sibling", 15, (-377));
      Node node4 = new Node(43, 1342, 1480);
      Node node5 = Node.newString((-2457), "com.google.common.collect.ImmutableAsList", 57, 55);
      Node node6 = new Node((-24), node3, node0, node5);
      Node node7 = node3.useSourceInfoFrom(node5);
      node0.getSourceFileName();
      node6.addChildToBack(node4);
      node1.removeFirstChild();
      node2.isScript();
      node0.isName();
      node4.getExistingIntProp(49);
      node7.mayMutateArguments();
      node5.isScript();
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Node node0 = Node.newString("", 1375, 212);
      node0.getDirectives();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.isVarArgs();
      node0.isBlock();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(40);
      charArrayWriter0.append('\'');
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node0.detachChildren();
      node0.getCharno();
      node0.getJSType();
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3);
      node0.setString(",w>eg!/70/%<I+9)Jah");
      node0.isFromExterns();
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.setDouble((-1211.25));
      node0.setDirectives((Set<String>) null);
      node0.setChangeTime((-156));
      Node node1 = new Node(53, node0, node0, node0, 56, (-2926));
      node0.getAncestors();
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Node node0 = Node.newNumber((-2743.4489283687253));
      node0.isScript();
      node0.setChangeTime(1655);
      int int0 = Node.ORIGINALNAME_PROP;
      Node node1 = Node.newString(55, "gtG_6\"?");
      node1.type = 52;
      node1.isIn();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Node node0 = Node.newString((-1081), "gtG_6\"?", (-1081), (-1081));
      node0.isSyntheticBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = Node.newNumber((-2743.301));
      node0.isCast();
      node1.hasChildren();
      node1.checkTreeEqualsImpl(node0);
      Node node2 = Node.newString(1783, "7");
      node1.isNot();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node node3 = Node.newNumber((-2743.301), 39, 49);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("gtG_6\"?", false);
      node3.setStaticSourceFile(simpleSourceFile0);
      node0.mayMutateArguments();
      Node node4 = new Node(4194304);
      node4.isString();
      node2.isGetElem();
      Node.extractLineno(29);
      node4.isFunction();
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Node node0 = Node.newString("}b2H0v4K.Cmq", 2170, 2170);
      Node node1 = Node.newString("ARRAYLIT");
      node1.isEquivalentToShallow(node0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      node0.isSwitch();
      node0.isVarArgs();
      node0.addChildToFront(node0);
      node1.getAncestors();
      node0.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Node node0 = Node.newString("8TH}tHrqxVW^", 0, 0);
      node0.getJsDocBuilderForNode();
      node0.isVarArgs();
      node0.isBlock();
      node0.setString("Should not happen\n");
      node0.hasOneChild();
      node0.isAssignAdd();
      Node node1 = new Node(3003, 16, 1);
      Node node2 = Node.newString(54, "8TH}tHrqxVW^", 90, 155);
      Node node3 = new Node((-1362), node0, node0, node1, (-156), 40);
      Node node4 = new Node(31, node3, node2, node2);
      Node node5 = node1.useSourceInfoFrom(node4);
      node5.getSourceFileName();
      Node node6 = Node.newString(57, "com.google.common.base.CharMatcher$2", 119, 29);
      node0.addChildToBack(node6);
      Node node7 = node3.removeFirstChild();
      node1.isScript();
      node7.isName();
      node5.getExistingIntProp(5632212);
      node2.mayMutateArguments();
      node7.isCase();
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "b'S%%.R,/{MpkHtWXK");
      Node node0 = Node.newString(3, "String node not created wit Node.newString", (-475), (-475));
      InputId inputId0 = new InputId("String node not created wit Node.newString");
      Node node1 = new Node(32, node0, node0, node0, node0, 3657, 29);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.isCast();
      node2.copyInformationFrom(node1);
      int int0 = Node.IS_DISPATCHER;
      node1.isGetElem();
      node2.getSourceFileName();
      node2.addChildBefore(node1, node0);
      node1.removeChild(node2);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.setIsSyntheticBlock(true);
      node0.isNull();
      node0.mayMutateArguments();
      node0.getStaticSourceFile();
      node0.getString();
      node0.getJsDocBuilderForNode();
      // Undeclared exception!
      try { 
        node0.getNext();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 1.0 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Node node0 = Node.newString(3, "Mv`yf0DN", 3, 3);
      node0.isCall();
      InputId inputId0 = new InputId("Mv`yf0DN");
      Node node1 = new Node(32, node0, node0, node0, node0, 3657, 29);
      Node node2 = node1.useSourceInfoFrom(node0);
      Node node3 = Node.newString("Mv`yf0DN", 56, 31);
      node3.putBooleanProp(46, true);
      node1.setInputId(inputId0);
      node0.getJsDocBuilderForNode();
      node2.getDouble();
      Node node4 = new Node(node2.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      InputId inputId0 = new InputId("gtG_6\"?");
      Node node1 = Node.newNumber((double) 1);
      Node node2 = node1.cloneTree();
      node0.putBooleanProp(1, true);
      node1.setInputId(inputId0);
      node0.getJsDocBuilderForNode();
      Node node3 = new Node(48, node2, node1, node1);
      Node.newString("", 54, (-2194));
      Node node4 = Node.newNumber((double) 36);
      node4.checkTreeEquals(node1);
      node1.useSourceInfoIfMissingFromForTree(node3);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Node node0 = Node.newString("new child has existing parent");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node1 = new Node(65535, node0, node0, node0, 15, 40);
      node0.getStaticSourceFile();
      node1.getDirectives();
      node1.isDo();
      node0.isGetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "new child has existing parent");
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.valueOf();
      node1.toString();
      node0.checkTreeEquals(node1);
      node_SideEffectFlags0.setReturnsTainted();
      // Undeclared exception!
      try { 
        node0.getProp(node1.OPT_ARG_NAME);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 65535
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Node node0 = new Node(151);
      node0.isDo();
      Node node1 = new Node(54);
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HKS!?");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Node node0 = new Node(1935);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.setChangeTime(15);
      Node node2 = new Node(37, node1, node0, node0);
      Node node3 = node0.srcref(node2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node3.detachChildren();
      Node node4 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node3.addChildBefore(node4, node2);
      node1.isGetElem();
      node2.isCast();
      node2.getLength();
      node3.addChildBefore(node0, node4);
      node4.isAnd();
      node4.isVarArgs();
      // Undeclared exception!
      try { 
        node0.isOnlyModifiesThisCall();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Node node0 = Node.newString("}b2H0v4K.Cmq", 2170, 2170);
      Node node1 = Node.newString("ARRAYLIT");
      node1.isEquivalentToShallow(node0);
      node0.isAssignAdd();
      node1.isTrue();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Node node0 = Node.newString("", 1375, 212);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.setDirectives(linkedHashSet0);
      node0.putProp(212, "");
      node0.isArrayLit();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node0.getProp(212);
      node_SideEffectFlags1.setMutatesArguments();
      node0.isDec();
      node0.isThis();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.valueOf();
      node0.isVarArgs();
      Node node1 = Node.newString("", 48, 212);
      Node.newNumber((double) 56);
      node1.checkTreeEquals(node0);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Node node0 = new Node(107, 107, 107);
      Node node1 = new Node(2, node0, node0, node0, node0);
      node0.addChildrenToFront(node0);
      // Undeclared exception!
      try { 
        node0.getJsDocBuilderForNode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      node0.getInputId();
      Node node1 = Node.newNumber((double) 1);
      Node node2 = node1.cloneTree();
      node0.putBooleanProp(1, true);
      node1.setInputId((InputId) null);
      node0.getJsDocBuilderForNode();
      Node node3 = new Node(48, node2, node1, node1);
      Node node4 = Node.newNumber((-2614.986721));
      node4.setOptionalArg(false);
      Node node5 = Node.newString(32, "9|N=p\"^}", (-3283), 46);
      node3.addChildrenToFront(node1);
      node1.isEquivalentTo(node4);
      node5.children();
      node5.toString();
      node4.isUnscopedQualifiedName();
      node5.isScript();
      node4.isRegExp();
      node1.useSourceInfoIfMissingFromForTree(node0);
      // Undeclared exception!
      try { 
        node2.isScript();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Node node0 = Node.newString((-1081), "gtG_6\"?", (-1081), (-1081));
      node0.isWhile();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = Node.newNumber((-2743.301));
      node0.isCast();
      node1.hasChildren();
      node1.checkTreeEqualsImpl(node0);
      Node.newString(1783, "7");
      node1.isNot();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node node2 = new Node(4);
      Node node3 = Node.newString(53, "7", 31, 2);
      Node node4 = new Node(8388608, node2, node0);
      Node node5 = new Node((-92), node3, node1, node4, node0, 4, 985);
      Node node6 = node5.useSourceInfoFromForTree(node0);
      node6.getChildAtIndex(node1.MAX_COLUMN_NUMBER);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = new Node(1);
      Node node1 = node0.cloneNode();
      // Undeclared exception!
      try { 
        node1.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = "}b2H0v4K.Cmq";
      int int0 = 2170;
      Node node0 = Node.newString("}b2H0v4K.Cmq", 2170, 4703);
      Node node1 = new Node(12, node0, node0, node0, 32, 4095);
      node1.isEquivalentToShallow(node0);
      node1.getChangeTime();
      Node node2 = new Node((-2425), node0);
      Node node3 = Node.newString(string0, int0, node1.CHANGE_TIME);
      node1.addChildAfter(node3, node3);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Node node0 = Node.newString("oDI{");
      node0.isScript();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = Node.newNumber((double) 52, 4, 2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.isGetElem();
      node0.mayMutateGlobalStateOrThrow();
      Node node2 = node0.cloneTree();
      node2.isThis();
      node2.removeFirstChild();
      node0.checkTreeTypeAwareEqualsImpl((Node) null);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Node node0 = Node.newString((-1500), "com.google.common.collect.ImmutableAsList", 16, (-1500));
      Node node1 = new Node(51, node0);
      Node node2 = new Node(42, node1, 56, 53);
      node1.addChildToFront(node2);
      Node node3 = new Node(56);
      node1.isSyntheticBlock();
      node2.isCast();
      node0.hasChildren();
      node0.isNot();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isEquivalentTo(node2);
      node3.isUnscopedQualifiedName();
      node1.getAncestors();
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ImmutableList$Builder");
      node0.wasEmptyNode();
      Node node1 = new Node(130, node0, node0, node0, node0);
      Node node2 = Node.newNumber(2417.3140918, 52, 2211);
      node1.isGetElem();
      Node node3 = Node.newString(1, "The new child node already has a parent.");
      node3.setLength(40);
      node2.cloneTree();
      node1.isThis();
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Node node0 = Node.newString((-158), "new child has existing parent", 692, (-4118));
      node0.isSyntheticBlock();
      Node node1 = new Node(38);
      node0.isWith();
      node1.isCall();
      node1.isVarArgs();
      Node.extractCharno(1223);
      node0.isSetterDef();
      Node node2 = Node.newNumber((-697.9014287256));
      Node.newNumber((double) 55);
      node2.checkTreeEquals(node1);
      Node node3 = Node.newString("");
      node2.useSourceInfoIfMissingFromForTree(node3);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Node node0 = Node.newString("8TH}tHrqxVW^", 0, 0);
      node0.getJsDocBuilderForNode();
      node0.isVarArgs();
      node0.isBlock();
      node0.setString("Should not happen\n");
      node0.hasOneChild();
      node0.isAssignAdd();
      Node node1 = node0.cloneTree();
      node0.putBooleanProp(29, true);
      node0.getInputId();
      node1.setInputId((InputId) null);
      node0.getJsDocBuilderForNode();
      node0.addChildrenToBack(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      node0.isCast();
      node1.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      Node node1 = new Node(42);
      node1.getAncestor(54);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.isObjectLit();
      node0.isGetterDef();
      node1.isFunction();
      node1.detachChildren();
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$", 43, 43);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.useSourceInfoFrom(node0);
      node0.isNoSideEffectsCall();
      node1.addChildrenToBack(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesArguments();
      Node node2 = node0.getAncestor(2);
      node2.removeChild(node1);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = Node.newNumber((double) 37);
      node1.addSuppression("gtG_6\"?");
      node_FileLevelJsDocBuilder0.append("side_effect_flags");
      node_FileLevelJsDocBuilder0.append("side_effect_flags");
      node_FileLevelJsDocBuilder0.append("q,+1*p:m[$g");
      node0.isLabelName();
      node1.getAncestors();
      node1.isFalse();
      node0.getAncestors();
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Node node0 = new Node(106);
      node0.isOr();
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$", 43, 43);
      Node node1 = new Node(43, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("in%r=ec$");
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.isArrayLit();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesArguments();
      node2.isCast();
      Node node3 = node2.getAncestor(65536);
      node1.removeChild(node2);
      node3.useSourceInfoIfMissingFromForTree(node0);
      node1.children();
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Node node0 = Node.newString(2048, "~2/5");
      Node node1 = Node.newString("m5WcU!.H3^aW", 103, 53);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.addChildToFront(node1);
      Node node3 = new Node(16);
      node2.isSyntheticBlock();
      node1.isCast();
      node1.hasChildren();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node3.hasMoreThanOneChild();
      node3.isUnscopedQualifiedName();
      node0.isThis();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Node node0 = Node.newString((-158), "com.google.javascript.rhino.Node$AbstractPropListItem", (-158), (-4118));
      node0.isSyntheticBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.isVarArgs();
      Node node1 = new Node(39, node0);
      node1.getQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node1.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder1.append("");
      node_FileLevelJsDocBuilder1.append("");
      node_FileLevelJsDocBuilder0.append("");
      node1.isQualifiedName();
      Node node2 = new Node(32);
      node2.useSourceInfoFromForTree(node0);
      node1.getChildAtIndex(17);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Node node0 = Node.newNumber((-1677.5851921), 1048576, 36);
      node0.isSyntheticBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = Node.newNumber(0.0);
      node0.isCast();
      node0.hasChildren();
      Node node2 = Node.newString(55, "gtG_6\"?");
      node0.checkTreeEqualsImpl(node2);
      Node node3 = Node.newString(32, "gtG_6\"?");
      node0.isNot();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node node4 = Node.newNumber(2301.36288998889, 0, 38);
      node4.setOptionalArg(true);
      node1.mayMutateArguments();
      Node node5 = new Node(39);
      node3.isString();
      node0.isGetElem();
      Node.extractLineno(57);
      node2.setLineno((-1089));
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber((double) 12, 46, 30);
      node1.isNot();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node1.isAssignAdd();
      node1.isUnscopedQualifiedName();
      node1.isScript();
      node1.getChildBefore(node0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Node node0 = new Node(881);
      Node node1 = new Node(881, node0, node0);
      node1.getDirectives();
      node0.isEquivalentTo(node1, false, false, false);
      node0.addChildToFront(node1);
      node0.isSyntheticBlock();
      node1.isCast();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.hasMoreThanOneChild();
      node0.isBlock();
      node0.setLength(50);
      node0.cloneTree();
      node0.isLabel();
      // Undeclared exception!
      try { 
        node1.isBlock();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Node node0 = new Node(881);
      Node node1 = new Node(881, node0, node0);
      node1.getDirectives();
      node0.isEquivalentTo(node1, false, false, false);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.addChildToFront(node1);
      Node node3 = new Node(2);
      node0.isSyntheticBlock();
      node1.isCast();
      node3.hasChildren();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node2.hasMoreThanOneChild();
      node0.isUnscopedQualifiedName();
      node2.isThis();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      nodeArray0[3] = node2;
      nodeArray0[4] = node3;
      nodeArray0[5] = node1;
      Node node4 = new Node((-1271), nodeArray0, 111, 56);
      node4.isVar();
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Node node0 = Node.newString((-1081), "gtG_6\"?", (-1081), (-1081));
      node0.isSyntheticBlock();
      Node node1 = new Node(8, 57, 30);
      node0.replaceChildAfter(node1, node1);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      double double0 = (-2743.301);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(125);
      Node node1 = new Node(32, node0, node0, node0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.getLength();
      node0.replaceChildAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Node node0 = Node.newString("<{=Cm~w29u5?dc2 v~r");
      Node node1 = new Node(57, node0, node0, 47, 36);
      node1.replaceChildAfter(node0, node0);
      // Undeclared exception!
      try { 
        node0.getJsDocBuilderForNode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isEquivalentTo(node0, false, false, false);
      Node node1 = Node.newNumber((double) 2);
      node1.isFalse();
      node0.isNull();
      node1.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Node node0 = Node.newString(4378, "gtG_6\"?", (-902), 306654252);
      Node node1 = Node.newString(2, "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap");
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.addChildToFront(node1);
      Node node3 = new Node(54);
      node1.isSyntheticBlock();
      node3.isCast();
      node0.hasChildren();
      node3.isNot();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node2.isEquivalentTo(node0);
      node2.isUnscopedQualifiedName();
      node3.isScript();
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Node node0 = Node.newString(3, "String node not created with Node.newString", (-475), (-475));
      node0.isCall();
      node0.getInputId();
      Node node1 = new Node(32, node0, node0, node0, node0, 3657, 29);
      node1.putBooleanProp(1078, true);
      node1.setInputId((InputId) null);
      node0.isReturn();
      node1.wasEmptyNode();
      Node node2 = new Node(835, 1, 2);
      node1.hasChildren();
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$", 43, 43);
      Node node1 = new Node(43, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("in%r=ec$");
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.isNoSideEffectsCall();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node2.isEquivalentTo(node1, true, true, true);
      node0.isCase();
      node2.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Node node0 = new Node(91);
      node0.toStringTree();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node node1 = Node.newString("ASSIGN_RSH\n", (-1570), 2);
      node1.removeFirstChild();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ASSIGN_RSH\n");
      node1.putIntProp(4, 5979);
      node0.isNew();
      node1.setDouble(91);
      node0.getJsDocBuilderForNode();
      node1.isNew();
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Node node0 = Node.newNumber(37.0);
      node0.putBooleanProp((-4140), true);
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(53, node0, node0, node0);
      Node.newString("", 4, 51);
      Node node2 = Node.newNumber(1.0);
      node2.checkTreeEquals(node0);
      node2.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Node node0 = Node.newString("8TH}tHrqxVW^", 0, 0);
      node0.getJsDocBuilderForNode();
      node0.isVarArgs();
      node0.isBlock();
      node0.setString("Should not happen\n");
      node0.hasOneChild();
      node0.isAssignAdd();
      Node node1 = new Node(0);
      Node node2 = Node.newString(54, "8TH}tHrqxVW^", 90, 155);
      Node node3 = new Node((-1362), node0, node0, node1, (-156), 40);
      Node node4 = new Node(31, node3, node2, node2);
      Node node5 = node1.useSourceInfoFrom(node4);
      node5.getSourceFileName();
      Node node6 = Node.newString(57, "com.google.common.base.CharMatcher$2", 119, 29);
      node0.addChildToBack(node6);
      Node node7 = node3.removeFirstChild();
      node1.isScript();
      node7.isName();
      node5.getExistingIntProp(5632212);
      node6.isFor();
      node2.mayMutateArguments();
      node7.isCase();
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Node node0 = Node.newNumber((-2743.4489283687253));
      Node.newNumber((-1143.0));
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Node node0 = Node.newString("}b2H0v4K.Cmq", 2170, 4702);
      Node node1 = Node.newString("}b2H0v4K.Cmq");
      node1.children();
      Node node2 = node0.srcref(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      node0.getIndexOfChild(node1);
      node1.isInc();
      JSType[] jSTypeArray0 = new JSType[8];
      jSTypeArray0[4] = (JSType) null;
      jSTypeArray0[6] = (JSType) null;
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node3.isCase();
      node3.isNot();
      node2.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Node node0 = null;
      Node node1 = new Node(31, (Node) null);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Node node0 = new Node(4702, 119, 4702);
      node0.getStaticSourceFile();
      node0.isThrow();
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      InputId inputId0 = new InputId("gtG_6\"?");
      Node node1 = new Node(2, 43, 42);
      Node node2 = node1.cloneTree();
      node0.putBooleanProp(1, true);
      node1.setInputId(inputId0);
      node0.getJsDocBuilderForNode();
      Node node3 = new Node(1, node0, node2, 51, 8);
      Node node4 = Node.newString("", 54, (-2194));
      node2.isNew();
      node4.removeProp(56);
      node2.mayMutateArguments();
      node2.isAnd();
      node4.toStringTree();
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      InputId inputId0 = new InputId("gtG_6\"?");
      Node node1 = new Node(0, node0, node0);
      Node node2 = node1.cloneTree();
      node0.putBooleanProp(1, true);
      node1.getSourceFileName();
      node1.setInputId(inputId0);
      node0.getJsDocBuilderForNode();
      Node node3 = new Node(1, node0, node2, 51, 8);
      String string0 = "";
      int int0 = 36;
      int int1 = (-2194);
      // Undeclared exception!
      try { 
        Node.newString(string0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString((-4096), "kbE]", 1048576, (-4096));
      Node node1 = Node.newString("kbE]");
      node1.getSourceOffset();
      node0.setString("kbE]");
      node0.addChildAfter(node1, node1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.setChangeTime(node0.SIDE_EFFECT_FLAGS);
      // Undeclared exception!
      try { 
        node0.getAncestor(node1.IS_DISPATCHER);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      simpleErrorReporter0.error("Object#Element", "Object#Key", (-1823), (-1823));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.mayMutateArguments();
      node0.isAnd();
      node0.toStringTree();
      Node node1 = new Node(15, 4095, 10);
      node0.srcref(node1);
      node0.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node0.isFromExterns();
      node0.isSetterDef();
      Node node1 = Node.newNumber(1.0);
      Node node2 = Node.newNumber((-4725.2687));
      node2.checkTreeEquals(node1);
      Node node3 = new Node(8199, node2, node1, node1, node2, 690, 12);
      node1.checkTreeEquals(node0);
      Node node4 = new Node(39);
      node4.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      Node node1 = new Node(52);
      node0.isWith();
      node0.isCall();
      node0.isVarArgs();
      Node.extractCharno(53);
      Node node2 = node1.cloneNode();
      Node node3 = new Node(16, node2, node2, node2);
      node3.isContinue();
      node3.addChildBefore(node2, node0);
      node2.getJSType();
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Node node0 = new Node(141);
      int int0 = Node.IS_NAMESPACE;
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = new Node(2, node0, 49, 48);
      node0.getString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Node node0 = Node.newString(54, "Sv");
      Node node1 = Node.newString(52, "V~:ZnD9j*");
      node0.addChildrenToFront(node1);
      node0.isExprResult();
      Node.newString((-786), "?U?", 29, 2626);
      Node.extractCharno(51);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Node node0 = new Node(106);
      node0.isAnd();
      node0.isGetterDef();
      node0.isExprResult();
      int int0 = Node.QUOTED_PROP;
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Node node0 = Node.newString((-1532), "com.google.common.collect.ImmutableAsList", (-1532), (-1532));
      Node node1 = new Node((-1532), node0, node0, node0, node0);
      node1.checkTreeEqualsImpl(node0);
      Node node2 = Node.newString((-102), "7");
      node2.isNot();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node.newNumber((double) 31);
      Node.newNumber((double) 53, 147, 4095);
      node2.mayMutateArguments();
      node0.getStaticSourceFile();
      node2.isThrow();
      Node.extractCharno(31);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.add((JSType) null);
      simpleErrorReporter0.error("Object#Element", "Object#Key", (-1823), (-1823));
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.mayMutateArguments();
      node0.isAnd();
      node0.toStringTree();
      node0.putIntProp((-1823), 2048);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Node node0 = Node.newString(32, "gtG_6\"?", 3, 779);
      node0.isSyntheticBlock();
      Node node1 = new Node((-2171));
      node0.isWith();
      Node.newString("'iP5#JSSk['dPj");
      node0.isCall();
      node1.isVarArgs();
      Node.extractCharno((-444));
      Node node2 = node1.cloneNode();
      Node node3 = new Node(38, node1, node0, node0);
      node2.isContinue();
      node3.addChildBefore(node1, node1);
      node3.getJSType();
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$", 43, 43);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.useSourceInfoFrom(node0);
      node0.isCall();
      Node.extractCharno(1);
      Node node2 = new Node((-297), node0, node0, node1);
      node1.wasEmptyNode();
      node2.addChildBefore(node1, node0);
      node0.setSideEffectFlags(node1.COLUMN_BITS);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Node node0 = new Node(120);
      Node node1 = new Node(2757, node0, node0);
      node0.getDirectives();
      node1.isEquivalentTo(node0, false, true, true);
      node0.addChildToFront(node1);
      Node node2 = new Node(39);
      node2.setString("cmWB");
      node1.isSyntheticBlock();
      node0.isCast();
      node0.hasChildren();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.hasMoreThanOneChild();
      // Undeclared exception!
      try { 
        node1.isUnscopedQualifiedName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Node node0 = new Node((-1020));
      Node node1 = Node.newNumber((double) 43);
      node0.addChildrenToFront(node1);
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(39, node0, 1, 48);
      node2.getString();
      // Undeclared exception!
      try { 
        node1.isContinue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Node node0 = Node.newString((-1081), "gtG_6\"?", (-1081), (-1081));
      node0.isWhile();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = Node.newNumber((-2743.301));
      node0.isCast();
      node1.hasChildren();
      node1.siblings();
      node1.isEquivalentTo(node0, true, true, false);
      node0.isDec();
      node1.getDouble();
      node1.getChildAtIndex(52);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isFor();
      InputId inputId0 = new InputId("Object#Element");
      Node.newNumber(1.0);
      Node node1 = node0.cloneTree();
      node1.isEquivalentTo(node0);
      node1.putBooleanProp(130, false);
      node0.setInputId(inputId0);
      Node node2 = new Node(1, node1, node1, 794, 794);
      node2.getJsDocBuilderForNode();
      Node node3 = new Node(4, (Node) null, node1, (Node) null);
      int int0 = 306654252;
      int int1 = 65536;
      node0.getJsDocBuilderForNode();
      Node.newString(jSTypeRegistry0.OBJECT_INDEX_TEMPLATE, int0, int1);
      // Undeclared exception!
      try { 
        Node.newNumber((double) node3.SIDE_EFFECT_FLAGS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Node node0 = Node.newString("incrdecr", 539, 539);
      Node node1 = new Node(43, node0, node0, node0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "incrdecr");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      Node node3 = node2.removeFirstChild();
      node3.useSourceInfoFrom(node0);
      node1.isNoSideEffectsCall();
      node1.isEquivalentToTyped(node0);
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(113);
      node0.isQuotedString();
      node0.isTry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.isDefaultCase();
      node0.isTry();
      Node node1 = new Node(46, node0, node0, node0, node0, 51, 0);
      node1.isAnd();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Node node0 = Node.newString((-1081), "gtG_6\"?", (-1081), (-1081));
      node0.isSyntheticBlock();
      Node node1 = new Node(8, 57, 30);
      node1.isFromExterns();
      node0.getFirstChild();
      node0.replaceChildAfter(node1, node1);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      double double0 = (-2743.301);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(3, "~=", 3, 3);
      Node node1 = new Node(2911);
      node0.isWith();
      node0.isCall();
      Node.extractCharno(29);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.getQualifiedName();
      Node node2 = node0.cloneNode();
      Node node3 = new Node(51, node0, node0, node1);
      node2.isContinue();
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Node node0 = Node.newString(32, "jv]u5Z;", 3, 779);
      node0.isSyntheticBlock();
      Node node1 = new Node((-2171));
      node0.isWith();
      node1.setSourceEncodedPositionForTree(394);
      String string0 = "";
      Node.newString("");
      node0.isCall();
      node1.isVarArgs();
      Node.extractCharno((-444));
      Node node2 = node1.cloneNode();
      Node node3 = new Node(38, node1, node0, node0);
      node2.isContinue();
      node3.addChildBefore(node1, node1);
      Node.newString(string0);
      node3.getJSType();
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Node node0 = Node.newString("new child has existing parent");
      node0.getStaticSourceFile();
      node0.getDirectives();
      node0.isDo();
      node0.isGetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.valueOf();
      Node node1 = new Node(64, node0, node0, node0, node0);
      Node node2 = Node.newNumber(1.2, 114, 16);
      node2.isGetElem();
      Node.newString("new child has existing sibling", 3, 102);
      node0.cloneTree();
      node1.isThis();
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Node node0 = Node.newString("side_effect_flags", 62, 840);
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      Node node1 = Node.newNumber((double) 37);
      node1.getIntProp(43);
      node0.isVoid();
      node1.removeChild(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node0.FLAG_LOCAL_RESULTS);
      node0.setSideEffectFlags(node_SideEffectFlags0);
      Node.newNumber((double) node1.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.add((JSType) null);
      simpleErrorReporter0.error("Object#Element", "Object#Key", (-1823), (-1823));
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.mayMutateArguments();
      node0.isAnd();
      Node node1 = new Node(56);
      node0.useSourceInfoFromForTree(node1);
      node0.getChildAtIndex(16);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(113);
      node0.isQuotedString();
      node0.isObjectLit();
      node0.isOnlyModifiesArgumentsCall();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isTry();
      node0.setSourceFileForTesting("node is not a child");
      Node node1 = node0.cloneTree();
      node0.isExprResult();
      Locale locale0 = Locale.forLanguageTag("node is not a child");
      Locale locale1 = new Locale("node is not a child", "node is not a child");
      locale0.getDisplayScript(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      node1.addChildToFront(node0);
      node0.getJsDocBuilderForNode();
      node0.isLabel();
      node0.isLabel();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "node is not a child");
      node1.setDouble(4095);
      node0.isObjectLit();
      Node node2 = node1.getLastSibling();
      // Undeclared exception!
      try { 
        node2.getJSDocInfo();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // WHILE [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$", 38, 38);
      Node node1 = new Node(12, node0, node0, node0, node0, 54, 16);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("in%r=ec$");
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.setSourceFileForTesting("L??nd#@V");
      Node node3 = Node.newNumber((double) 46);
      node0.isUnscopedQualifiedName();
      node1.checkTreeEquals(node3);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Node node0 = new Node((-1393));
      node0.isQuotedString();
      node0.isTry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(106);
      node0.setType(106);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isFunction();
      node0.isThis();
      node0.isVarArgs();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = new Node((-216), node0, (Node) null);
      node0.checkTreeEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Node node0 = new Node(881);
      Node node1 = new Node(881, node0, node0);
      node1.getDirectives();
      node0.isEquivalentTo(node1, true, true, true);
      node0.addChildToFront(node1);
      Node node2 = new Node(2);
      node0.isSyntheticBlock();
      node1.isCast();
      node0.isSwitch();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.hasMoreThanOneChild();
      node0.isUnscopedQualifiedName();
      node0.isThis();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      node2.isRegExp();
      node0.addChildBefore(node2, node2);
      nodeArray0[0].getJSType();
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Node node0 = new Node(114);
      node0.isStringKey();
      node0.getJsDocBuilderForNode();
      Stack<JSType> stack0 = new Stack<JSType>();
      ImmutableList.copyOf((Collection<? extends JSType>) stack0);
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      Node node1 = Node.newString(36, "gtG_6\"?");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.isEmpty();
      Node node2 = Node.newString("gtG_6\"?", 47, 2);
      int int0 = Node.ORIGINALNAME_PROP;
      node2.hasOneChild();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Node node0 = Node.newString("limit is negative");
      Node node1 = new Node(40, node0, node0, (-24), 43);
      node1.siblings();
      node0.type = 29;
      node1.isEquivalentTo(node0, false, true, true);
      node1.isDec();
      node0.getDouble();
      node1.getChildAtIndex(node0.OPT_ARG_NAME);
      node0.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(2040, "~2/5");
      Node node1 = new Node(32, node0, node0, node0, 30, 0);
      Node node2 = Node.newString("~2/5", 55, 53);
      node2.addChildToFront(node0);
      node0.isNoSideEffectsCall();
      node0.getAncestors();
      // Undeclared exception!
      try { 
        Node.extractCharno(node2.ORIGINALNAME_PROP);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Node node0 = new Node(29);
      Node node1 = new Node(12, node0, node0);
      node1.getDirectives();
      node1.isEquivalentTo(node0, false, true, true);
      node1.addChildToFront(node0);
      Node node2 = new Node(node1.SIDE_EFFECTS_ALL);
      String string0 = "cmWB";
      int int0 = 102;
      int int1 = 152;
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(0.5);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getModifies();
      node0.setDirectives(set0);
      Node node1 = new Node(16);
      node1.isString();
      node1.isGetElem();
      Node.extractLineno((-2220));
      Node.extractLineno(122);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString("gf`e8@D");
      node0.putBooleanProp(12288, false);
      node0.isAssign();
      node0.isThis();
      node0.isIf();
      Node node1 = node0.cloneTree();
      node1.isVoid();
      node0.isArrayLit();
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Node node0 = new Node(40);
      node0.setLength(83);
      node0.isIf();
      Node node1 = new Node(52, node0, 47, 1);
      node1.isInstanceOf();
      node1.isGetterDef();
      node1.isScript();
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Node node0 = Node.newString("incrdecr", 539, 539);
      Node node1 = new Node(57, node0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "incrdecr");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
      Node node2 = new Node(4, node0, node0, node1, 30, 42);
      node2.useSourceInfoFrom(node0);
      node1.isNoSideEffectsCall();
      node1.isEquivalentToTyped(node0);
      // Undeclared exception!
      try { 
        node0.isFalse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      Node node1 = new Node(30, node0, node0);
      node0.isWith();
      node0.isCall();
      Node.extractCharno(53);
      Node node2 = node1.cloneNode();
      Node node3 = new Node(16, node2, node2, node2);
      node2.wasEmptyNode();
      node3.addChildBefore(node2, node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Node node0 = Node.newString("incrdecr", 539, 539);
      Node node1 = new Node(43, node0, node0, node0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "incrdecr");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
      Node node2 = new Node(42);
      node2.useSourceInfoFrom(node0);
      node1.isNoSideEffectsCall();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$", 43, 43);
      Node node1 = new Node(43, node0, node0, node0);
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.addChildrenToBack(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setAllFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      ImmutableList<JSType> immutableList1 = immutableList0.asList();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "aB8TYw6X2I>:C");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node0.removeFirstChild();
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.isNoSideEffectsCall();
      node0.isEquivalentToTyped(node2);
      node2.isFalse();
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString((-116), "Object#Element", (-116), (-116));
      Node node1 = new Node(162);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isObjectLit();
      Node node2 = Node.newString("", 47, 103);
      Node node3 = Node.newNumber((double) (-116));
      node3.checkTreeEquals(node2);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Node node0 = Node.newString(":7rC");
      Node node1 = Node.newString(102, ":7rC");
      node0.putBooleanProp(64, false);
      node1.getInputId();
      node0.setInputId((InputId) null);
      node1.getJsDocBuilderForNode();
      Node node2 = new Node(115, node0, node0, node0);
      Node node3 = Node.newString("", 36, 0);
      Node.newNumber((double) 15);
      node2.checkTreeEquals(node3);
      Node node4 = Node.newNumber((-741.2), 48, 20);
      node3.useSourceInfoIfMissingFromForTree(node4);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node0.isFromExterns();
      Node node1 = node0.cloneNode();
      node1.isContinue();
      node1.isOptionalArg();
      Node node2 = Node.newString(1253, "=W<*Qe2ZatvQ}P;-SF", 42, 2201);
      Node.newString("rmsdjbqO(jL8A", 51, (-1914));
      Node.extractLineno((-814));
      node2.isFor();
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Node node0 = Node.newString("{D8>b+xj*_eta", 80, 80);
      Node node1 = new Node(8, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      JSDocInfo jSDocInfo1 = new JSDocInfo();
      jSDocInfo1.setLicense("h}b2H0v4K.Cmq");
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.isAdd();
      node0.isRegExp();
      int int0 = Node.INPUT_ID;
      node2.isCatch();
      node1.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      Node node0 = Node.newNumber(1450.959071, 147456, 11);
      JSType[] jSTypeArray0 = new JSType[8];
      jSTypeArray0[0] = (JSType) null;
      jSTypeArray0[1] = (JSType) null;
      jSTypeArray0[2] = (JSType) null;
      jSTypeArray0[3] = (JSType) null;
      jSTypeArray0[4] = (JSType) null;
      jSTypeArray0[5] = (JSType) null;
      jSTypeArray0[6] = (JSType) null;
      jSTypeArray0[7] = (JSType) null;
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node2 = new Node(107, node0, node0, node1, node1, 1, 16);
      node2.getIndexOfChild(node0);
      node2.isInc();
      node2.isCase();
      node0.isNot();
      node2.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Node node0 = Node.newString("in%R=ec$", 43, 43);
      Node node1 = new Node(43, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("in%R=ec$");
      Node node2 = node1.useSourceInfoFrom(node0);
      int int0 = Node.INPUT_ID;
      node1.getIndexOfChild(node2);
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString("gf`e8@D");
      node0.putBooleanProp(12288, false);
      node0.isAssign();
      node0.isThis();
      Node node1 = new Node(111, node0, node0, node0, node0, 53, (-4096));
      node0.addChildrenToBack(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node2 = node0.removeChildren();
      node2.setLineno((-745));
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.mmutableList$Builder");
      node0.isComma();
      Node node1 = new Node(130, node0, node0, node0, node0);
      Node node2 = Node.newNumber(2417.3140918, 52, 2211);
      node1.isGetElem();
      node2.setLength(40);
      node2.cloneTree();
      node1.isThis();
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      ImmutableList.copyOf((Collection<? extends JSType>) stack0);
      Node node0 = new Node(114, 114, 114);
      node0.isComma();
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Node node0 = Node.newString("}b2H0v4K.Cmq", 2170, 4702);
      Node node1 = Node.newString("ARRAYLIT");
      node1.isEquivalentToShallow(node0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      nodeArray0[2] = node1;
      Node node2 = new Node(0, nodeArray0);
      int int0 = 47;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      int int1 = (-1952);
      Node node3 = null;
      try {
        node3 = new Node(int0, nodeArray0[2], node1, node2, nodeArray0[2], int1, node2.COLUMN_MASK);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      Node node1 = Node.newString(36, "gtG_6\"?");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.isEmpty();
      Node node2 = Node.newString("gtG_6\"?", 47, 2);
      node2.getSideEffectFlags();
      int int0 = Node.ORIGINALNAME_PROP;
      node2.hasOneChild();
      node0.isCast();
      node1.isHook();
      node0.getAncestor((-158));
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Node node0 = Node.newNumber(1706.3701316290733);
      node0.putIntProp(12, 1);
      node0.isNew();
      node0.removeProp(1);
      node0.getStaticSourceFile();
      node0.isOr();
      node0.isCast();
      node0.getAncestor((-1582));
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Node node0 = Node.newString(32, "gtG_6\"?", 3, 779);
      node0.isSyntheticBlock();
      Node node1 = new Node(51);
      node0.isWith();
      node0.isCall();
      node1.isVarArgs();
      Node.extractCharno((-444));
      node1.cloneNode();
      Node node2 = new Node(38, node1, node0, node0);
      node0.isCast();
      node2.isThis();
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(125);
      node0.isVoid();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(36);
      node_SideEffectFlags0.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node0 = Node.newString(212, "");
      node0.isNumber();
      node_SideEffectFlags0.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node0 = Node.newString(212, "");
      node0.isVarArgs();
      node0.isNumber();
      node_SideEffectFlags0.areAllFlagsSet();
      node0.isBreak();
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      String string0 = "gtG_6\"?";
      Node node0 = new Node(36);
      boolean boolean0 = node0.isSyntheticBlock();
      Node node1 = new Node(199);
      node0.isWhile();
      node1.isCall();
      int int0 = 4702;
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.replaceChildAfter(node1, node1);
      Node.newString(string0, int0, node0.SIDE_EFFECTS_ALL);
      node0.getQualifiedName();
      // Undeclared exception!
      try { 
        node1.setWasEmptyNode(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("lOnq3Y}I`xIT+X");
      Node node1 = Node.newNumber((double) 12);
      Node node2 = node0.cloneNode();
      node0.toStringTree();
      node2.getJsDocBuilderForNode();
      node1.isGetterDef();
      Node node3 = new Node((-800));
      node0.isFunction();
      node2.children();
      Node node4 = node3.srcref(node1);
      node4.setType(4095);
      node1.isDefaultCase();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Node node0 = Node.newString("new child has existing parent");
      node0.wasEmptyNode();
      Node node1 = new Node(2048, node0, node0, node0, node0);
      int int0 = Node.INFERRED_FUNCTION;
      node1.hasOneChild();
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      node1.isCast();
      node1.children();
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = Node.newString(1, "Object#Element", 1, 0);
      node0.addSuppression("Unknown class name");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder1.append("Object#Element");
      node_FileLevelJsDocBuilder1.append("]KyXcUUAS\"/4K3+{");
      node_FileLevelJsDocBuilder1.append("Named type with empty name component");
      node0.isLabelName();
      node0.getAncestors();
      node0.isFalse();
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 36, 36);
      node0.isSyntheticBlock();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.isVarArgs();
      Node node1 = new Node(29, node0);
      node1.getQualifiedName();
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("E]<w|)_$");
      node_FileLevelJsDocBuilder0.append("ARRAYLIT");
      node0.isQualifiedName();
      Node node2 = new Node(2);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node3.getInputId();
      node3.setInputId((InputId) null);
      node0.getChildAtIndex(0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(2048, "~2/5");
      Node.newString(147, "m5Wcy!.H3^aW", 30, 39);
      Node node1 = Node.newString("m5Wcy!.H3^aW", 103, 53);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node1.addChildToFront(node0);
      node0.isNoSideEffectsCall();
      node0.getAncestors();
      Node node3 = new Node(91);
      node0.isSyntheticBlock();
      node1.hasChildren();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.hasMoreThanOneChild();
      node2.isThis();
      node3.isVar();
      node3.isLabel();
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString(2835, "<");
      node0.isInc();
      node0.isCall();
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isFor();
      node0.isCast();
      node0.isBreak();
      Node node1 = new Node(2);
      node1.setSourceFileForTesting("P");
      node0.isGetElem();
      int int0 = Node.LAST_PROP;
      node1.getLength();
      node0.getType();
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString((-116), "Object#Element", (-116), (-116));
      Node node1 = new Node(125);
      node1.removeProp(4095);
      node1.isNumber();
      node0.isRegExp();
      node1.isWith();
      node0.isCall();
      node1.isNot();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isReturn();
      node1.isUnscopedQualifiedName();
      node1.isScript();
      node1.getDouble();
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString((-116), "Object#Element", (-116), (-116));
      Node node1 = new Node(47, node0, node0, node0);
      Node node2 = node1.cloneTree();
      node0.putBooleanProp(52, false);
      InputId inputId0 = new InputId("Object#Element");
      inputId0.toString();
      node1.setInputId(inputId0);
      Node node3 = new Node(4, node2, node2, 49, (-1306));
      node3.getJsDocBuilderForNode();
      Node node4 = new Node((-127), node0, node3, node3);
      String string0 = "void";
      int int0 = 3683;
      Node node5 = Node.newString(node0.SIDE_EFFECT_FLAGS, string0, node0.IS_DISPATCHER, int0);
      node0.addChildrenToBack(node5);
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isHook();
      Node node1 = new Node(31, node0, 38, 50);
      node0.hasOneChild();
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isQualifiedName();
      Node node1 = Node.newString("Object#Key", 1213, 49);
      int int0 = Node.QUOTED_PROP;
      node0.hasOneChild();
      node1.isCast();
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1582), 113);
      node0.getSideEffectFlags();
      node0.isTypeOf();
      Node node1 = new Node(53, node0, node0, node0);
      Node node2 = new Node(1, node1, node0);
      node1.addChildrenToBack(node2);
      boolean boolean0 = false;
      boolean boolean1 = true;
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.mmutableList$Builder");
      node0.isComma();
      Node node1 = new Node(130, node0, node0, node0, node0);
      Node node2 = new Node(29, node1, (-907), 1937);
      Node node3 = Node.newString(147, "i3^Pz3vr", 3, (-881));
      node3.getString();
      node1.isContinue();
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isQualifiedName();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(105, nodeArray0, (-2601), 128);
      node1.checkTreeEquals(node0);
      node1.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = node0.cloneNode();
      node1.toStringTree();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("Unknown class name");
      Node node2 = Node.newNumber(0.5);
      node0.checkTreeEquals(node2);
      node2.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Go`g!A#a;esU9'");
      Node node0 = new Node(19, (-235), 8);
      node0.getSideEffectFlags();
      node0.mayMutateGlobalStateOrThrow();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(1, nodeArray0, (-1860), 4095);
      node0.addChildToBack(node1);
      node0.setIsSyntheticBlock(true);
      node0.addChildBefore(node0, node1);
      double double0 = 0.0;
      int int0 = 2480;
      Node node2 = Node.newNumber(double0, node1.DIRECTIVES, int0);
      node2.getJSType();
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Node node0 = Node.newString(36, "com.google.javascript.rhino.Node$AncestorIterable$1", 36, 36);
      Node node1 = new Node(36, node0, node0, node0, node0);
      node1.getDirectives();
      node0.isEquivalentTo(node1, true, true, true);
      Node node2 = new Node(39);
      node2.isSyntheticBlock();
      node1.isCast();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isUnscopedQualifiedName();
      node0.isThis();
      node1.isRegExp();
      Node node3 = Node.newNumber(37.0, 8, 302);
      node1.addChildBefore(node3, node0);
      Node node4 = Node.newString(15, "!asCV?j-6Jjt4R'6{\"");
      node4.getJSType();
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Node node0 = Node.newString(3, "String node not created wit Node.newString", (-475), (-475));
      InputId inputId0 = new InputId("String node not created wit Node.newString");
      Node node1 = new Node(32, node0, node0, node0, node0, 3657, 29);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.isCast();
      int int0 = Node.IS_DISPATCHER;
      node1.isGetElem();
      node2.addChildBefore(node1, node0);
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      Node node0 = Node.newNumber(1450.959071, 147456, 11);
      JSType[] jSTypeArray0 = new JSType[8];
      node0.isOnlyModifiesThisCall();
      jSTypeArray0[0] = (JSType) null;
      jSTypeArray0[1] = (JSType) null;
      node0.isOnlyModifiesArgumentsCall();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isTry();
      Node.newNumber((-1720.373378425954), 5560, 4095);
      Node.newString("ARRAYLIT");
      Node node1 = new Node(56);
      node1.isThrow();
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Node node0 = new Node(901);
      Node node1 = new Node(901, node0, node0);
      node1.getDirectives();
      node0.isEquivalentTo(node1, false, false, false);
      node0.addChildToFront(node1);
      Node node2 = new Node(2);
      node1.isNumber();
      node1.isCast();
      node0.isSwitch();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isParamList();
      node0.isUnscopedQualifiedName();
      node0.isThis();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      node2.isRegExp();
      node0.addChildBefore(node2, node2);
      nodeArray0[0].getJSType();
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Node node0 = new Node(106);
      node0.isOr();
      node0.getStaticSourceFile();
      node0.isParamList();
      node0.isTrue();
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 41, 41);
      node0.isGetProp();
      InputId inputId0 = new InputId("gtG_6\"?");
      Node node1 = Node.newNumber((double) 1);
      Node node2 = node1.cloneTree();
      node0.putBooleanProp(1, true);
      node1.setInputId(inputId0);
      node0.getJsDocBuilderForNode();
      Node node3 = new Node(48, node2, node1, node1);
      Node node4 = Node.newString("", 54, (-2194));
      node2.isNew();
      node4.removeProp(56);
      node2.mayMutateArguments();
      node4.isAdd();
      node0.setQuotedString();
      node1.addChildToBack(node4);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      Node node0 = Node.newNumber(1450.959071, 147456, 11);
      JSType[] jSTypeArray0 = new JSType[8];
      jSTypeArray0[0] = (JSType) null;
      jSTypeArray0[1] = (JSType) null;
      jSTypeArray0[2] = (JSType) null;
      jSTypeArray0[3] = (JSType) null;
      jSTypeArray0[4] = (JSType) null;
      jSTypeArray0[5] = (JSType) null;
      jSTypeArray0[6] = (JSType) null;
      jSTypeArray0[7] = (JSType) null;
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node2 = new Node(107, node0, node0, node1, node1, 1, 16);
      node2.getInputId();
      node1.setInputId((InputId) null);
      node2.getIndexOfChild(node0);
      node2.isInc();
      node0.isCase();
      node1.isNot();
      node1.mayMutateArguments();
      node1.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0));
      node0.setOptionalArg(true);
      node0.hasChildren();
      int int0 = Node.ORIGINALNAME_PROP;
      Node node1 = Node.newString(5560, "inferred");
      node1.addChildrenToFront(node0);
      node1.isIn();
      node1.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.mmutableList$Builder");
      boolean boolean0 = node0.isComma();
      Node node1 = new Node(130, node0, node0, node0, node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      Node node3 = Node.newNumber(2417.3140918, 52, 2211);
      boolean boolean1 = node1.isGetElem();
      Node node4 = new Node(27591, node2);
      Node node5 = new Node(57, node4, node0);
      boolean boolean2 = true;
      node3.isEquivalentTo(node5, boolean1, boolean2, boolean0);
      node3.setLength(node1.ORIGINALNAME_PROP);
      node3.cloneTree();
      // Undeclared exception!
      try { 
        node1.isThis();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Node node0 = new Node(107, 107, 107);
      Node node1 = new Node(2, node0, node0, node0, node0);
      Node node2 = Node.newNumber((double) 55);
      node0.addChildrenToFront(node2);
      node0.getJsDocBuilderForNode();
      Node node3 = new Node(30);
      node0.cloneNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node3.isQualifiedName();
      node2.isGetElem();
      Node.extractLineno((-732));
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Node node0 = Node.newString((-1391), "CharMatcher.INVISIBLE", 12, 3);
      Node node1 = Node.newString(36, "CharMatcher.INVISIBLE");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.getQualifiedName();
      node1.setWasEmptyNode(false);
      node1.isCase();
      node0.getSideEffectFlags();
      node0.isDelProp();
      node1.toString(true, false, false);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Node node0 = new Node(901);
      Node node1 = new Node(901, node0, node0);
      node1.getDirectives();
      node0.isEquivalentTo(node1, false, false, false);
      node0.addChildToFront(node1);
      Node node2 = new Node(2);
      node2.isNumber();
      node1.isCast();
      node0.isSwitch();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isParamList();
      node0.isUnscopedQualifiedName();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      node2.isRegExp();
      node0.getJSType();
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Node node0 = new Node(124);
      node0.isOr();
      node0.isOnlyModifiesArgumentsCall();
      node0.isLabelName();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = node0.clonePropsFrom((Node) null);
      node1.getJsDocBuilderForNode();
      // Undeclared exception!
      try { 
        node0.getQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      Node node1 = Node.newString(36, "gtG_6\"?");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.getQualifiedName();
      node0.setWasEmptyNode(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isCase();
      node1.isInstanceOf();
      node1.isGetterDef();
      node1.isCast();
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Node node0 = Node.newString(3, "String node not created with Node.newString", (-475), (-475));
      node0.isCall();
      InputId inputId0 = new InputId("String node not created with Node.newString");
      Node node1 = new Node(32, node0, node0, node0, node0, 3657, 29);
      Node node2 = node1.cloneTree();
      node2.putBooleanProp(46, true);
      node1.setInputId(inputId0);
      node0.getJsDocBuilderForNode();
      Node node3 = new Node(1365, node2, node1, 32, 31);
      Node.newString("K<}#cE~=?p<av", 29, 148);
      node0.putIntProp(46, 31);
      node1.isNew();
      node1.removeProp((-1532));
      node1.mayMutateArguments();
      node0.isAnd();
      node0.toStringTree();
      node2.getDirectives();
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(91);
      node0.isFor();
      node0.setType((-1573));
      node0.setSideEffectFlags(91);
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Node node0 = new Node(40);
      Node node1 = Node.newString("free_call", 40, 46);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = Node.newString("new child has existing parent", 55, 57);
      Node node4 = Node.newString("");
      Node node5 = new Node((-1751), node1, node4, node4, node0, 29, 575);
      node1.mayMutateArguments();
      Node.newNumber((double) 8);
      node4.isFalse();
      node2.isNull();
      node3.isThrow();
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(2048, "~2/5");
      Node node1 = Node.newString(147, "m5Wcy!.H3^aW", 30, 39);
      Node node2 = Node.newString("m5Wcy!.H3^aW", 103, 53);
      node0.useSourceInfoFromForTree(node2);
      node0.getSourceOffset();
      node2.addChildToFront(node0);
      node0.isNoSideEffectsCall();
      node0.getAncestors();
      node2.setWasEmptyNode(false);
      Node node3 = new Node(91);
      node0.isSyntheticBlock();
      node2.hasChildren();
      node0.isLabelName();
      node3.getAncestors();
      node1.isFalse();
      node3.isNE();
      node1.removeChild(node3);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[2];
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
      jSTypeArray0[0] = jSType1;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(unionType0).getAlternates();
      JSType jSType2 = modificationVisitor0.caseUnionType(unionType0);
      jSTypeArray0[1] = jSType2;
      Node node0 = jSTypeRegistry1.createParameters(jSTypeArray0);
      Node node1 = new Node(8287);
      node0.isCast();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isParamList();
      node1.isRegExp();
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Iterator<JSType> iterator0 = linkedList0.descendingIterator();
      ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isParamList();
      node0.getDirectives();
      node0.isDelProp();
      Node node1 = new Node(4095, node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString((-116), "Object#Element", (-116), (-116));
      Node node1 = new Node(125);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = node1.cloneNode();
      Iterator<JSType> iterator0 = linkedList0.descendingIterator();
      ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node1.isFor();
      node1.isCast();
      node0.isBreak();
      Node node4 = Node.newString(294, "Object#Key");
      node4.isNot();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node node5 = Node.newString(8199, "    ");
      node5.isReturn();
      node3.isUnscopedQualifiedName();
      node4.isScript();
      node2.getType();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      modificationVisitor0.caseBooleanType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isQualifiedName();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(105, nodeArray0, (-2601), 128);
      node1.checkTreeEquals(node0);
      node1.useSourceInfoIfMissingFromForTree(node0);
      node1.getNext();
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Node node0 = new Node(26);
      Node node1 = Node.newString(57, "Should not happen\n", 1, 1);
      Node node2 = Node.newString(5, "Should not happen\n");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.getQualifiedName();
      node2.setWasEmptyNode(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node2.isCase();
      node1.isInstanceOf();
      node1.isGetterDef();
      node2.isCast();
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      JSType jSType0 = templateTypeMapReplacer0.caseNullType();
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      nodeArray0[0] = node0;
      Node node1 = new Node((-475), nodeArray0);
      node0.getSourceFileName();
      Node node2 = new Node(301);
      node0.isWith();
      node2.isCall();
      node1.isVarArgs();
      Node.extractCharno(48);
      node0.isSetterDef();
      Node node3 = Node.newNumber((double) 50);
      node3.checkTreeEquals(node0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node2, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      enumElementType0.getRootNode();
      node1.useSourceInfoIfMissingFromForTree((Node) null);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(113);
      node0.isQuotedString();
      node0.isObjectLit();
      node0.isOnlyModifiesArgumentsCall();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isTry();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      node0.getChildAtIndex((-304));
      node0.useSourceInfoIfMissingFromForTree((Node) null);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(4692, nodeArray0);
      node0.getSourceFileName();
      Node node1 = new Node(2);
      node1.isWith();
      node1.isCall();
      node0.isVarArgs();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.isCase();
      node1.isInstanceOf();
      node1.isGetterDef();
      node1.isCast();
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      Node node1 = new Node(199);
      node0.isWith();
      node1.isCall();
      node0.isEquivalentToTyped(node1);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node1.isAssign();
      node0.isBlock();
      node1.setLength(16);
      Node node2 = node1.cloneTree();
      node1.isThis();
      node2.isBlock();
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Node node0 = new Node((-1257), 36, (-829));
      node0.isCast();
      node0.isNoSideEffectsCall();
      node0.isAssignAdd();
      node0.isFalse();
      Node node1 = new Node(844, node0);
      node1.removeChild(node0);
      Node node2 = new Node(40, node1);
      node0.isEquivalentTo(node2);
      Node node3 = Node.newString(57, "Z+_<<-@W3", 51, 844);
      node1.addChildToBack(node3);
      node0.isSyntheticBlock();
      Node node4 = Node.newString("");
      node4.isFor();
      node0.isTrue();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node3.replaceChild(node4, node2);
      node4.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = node0.cloneNode();
      node1.toStringTree();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("Not declared as a type name");
      Node node2 = Node.newNumber(2162.337);
      node2.checkTreeEquals(node1);
      node0.useSourceInfoIfMissingFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(26);
      boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node0 = Node.newString(".9`t");
      node_SideEffectFlags0.setMutatesThis();
      Node node1 = new Node((-932), node0, (-111), 16);
      node0.useSourceInfoIfMissingFromForTree(node1);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = false;
      node1.replaceChildAfter(node0, node0);
      FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean0);
      node0.getQualifiedName();
      Node node2 = node1.getFirstChild();
      // Undeclared exception!
      try { 
        node2.getInputId();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString((-116), "Object#Element", (-116), (-116));
      Node node1 = new Node(125);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.isVoid();
      node0.isArrayLit();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      node1.isCast();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isParamList();
      node0.isRegExp();
      node1.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString((-116), "Object#Element", (-116), (-116));
      Node node1 = new Node(125);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isObjectLit();
      node1.isGetterDef();
      node0.isFunction();
      node1.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$", 539, 539);
      Node node1 = new Node(43, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("in%r=ec$");
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      Node node3 = new Node(42);
      Node node4 = node3.useSourceInfoFrom(node0);
      node1.isNoSideEffectsCall();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node2.getStaticSourceFile();
      node2.checkTreeEquals(node0);
      node1.useSourceInfoIfMissingFromForTree(node4);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Node node0 = new Node((-1020));
      Node node1 = Node.newString(36, ":A;ll=$b", 133, 132);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = new Node(106);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.setWasEmptyNode(false);
      Node node3 = new Node(715, node2, 83, 32);
      node3.isCase();
      node1.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isFor();
      node0.isCast();
      node0.isBreak();
      Node node1 = Node.newString(37, "ARRAYLIT");
      node0.isNot();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node1.setSideEffectFlags(node_SideEffectFlags0);
      Node.newNumber(844.078338442);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$", 43, 43);
      Node node1 = new Node(43, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("in%r=ec$");
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.isNoSideEffectsCall();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getStaticSourceFile();
      node2.isOr();
      node1.isTrue();
      node2.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Node node0 = Node.newString("", 1375, 212);
      node0.getDirectives();
      node0.isVarArgs();
      node0.isBlock();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(40);
      charArrayWriter0.append('\'');
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(43, node0, node0, node0);
      node0.addChildrenToBack(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(15);
      node1.isNoSideEffectsCall();
      node0.isStringKey();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) stack0);
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node2.isComma();
      Node node3 = new Node(111, (Node[]) null);
      node3.isOptionalArg();
      node1.isBlock();
      node3.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString(154, "com.google.common.collect.ImmutableList$SubList");
      Node node1 = new Node(30, node0, node0, node0, node0, 4, (-814));
      Node node2 = node0.copyInformationFrom(node1);
      node0.checkTreeEquals(node1);
      Node node3 = Node.newString("Node tree inequality:\nTree1:\nSTRING_KEY com.google.common.collect.ImmutableList$SubList\n\n\nTree2:\nNEW\n    STRING_KEY com.google.common.collect.ImmutableList$SubList\n\n\nSubtree1: STRING_KEY com.google.common.collect.ImmutableList$SubList\n\n\nSubtree2: NEW\n    STRING_KEY com.google.common.collect.ImmutableList$SubList\n", 108, 39);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node3, node3);
      node3.getProp(9);
      node0.isStringKey();
      node2.getBooleanProp(47);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Node node0 = new Node(106);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.checkTreeEqualsImpl((Node) null);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-66));
      boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node0 = Node.newString(".9`t");
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = new Node(2, node0, 40, (-806));
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = false;
      node1.replaceChildAfter(node0, node2);
      FileSystemHandling.setPermissions(evoSuiteFile0, boolean1, boolean0, boolean1);
      node0.getQualifiedName();
      node0.getFirstChild();
      Node node3 = null;
      try {
        node3 = new Node(node0.QUOTED_PROP, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$", 38, 38);
      Node node1 = new Node(12, node0, node0, node0, node0, 54, 16);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("in%r=ec$");
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.isTrue();
      node1.isWith();
      node0.isCall();
      node1.isTry();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      arrayList0.listIterator();
      node1.isScript();
      Node node3 = Node.newNumber(0.7);
      node3.isCase();
      node3.isVoid();
      node3.isAdd();
      node2.replaceChildAfter(node0, node1);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Node node0 = Node.newString("in9r=ec", 43, 43);
      node0.mayMutateArguments();
      node0.getStaticSourceFile();
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      node0.getString();
      node0.getJsDocBuilderForNode();
      node0.getNext();
      node0.replaceChildAfter((Node) null, (Node) null);
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Node node0 = Node.newString("", 1375, 212);
      node0.getDirectives();
      node0.isVarArgs();
      node0.isBlock();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(40);
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node0.getString();
      node0.isContinue();
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(4692, nodeArray0);
      node0.getSourceFileName();
      Node node1 = new Node(2);
      node1.useSourceInfoIfMissingFromForTree(node0);
      node1.isWith();
      node1.getQualifiedName();
      node0.getJSDocInfo();
      node0.setWasEmptyNode(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isCase();
      node0.isInstanceOf();
      node0.isGetterDef();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Node.IS_CONSTANT_NAME;
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(4692, nodeArray0);
      node0.getSourceFileName();
      Node node1 = new Node(2);
      node1.isWith();
      node1.isCall();
      node0.isCast();
      node1.isSwitch();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.hasMoreThanOneChild();
      Node node2 = new Node(51, 0, 118);
      node2.isBlock();
      node0.setLength(46);
      node2.cloneTree();
      node0.isThis();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Node node0 = Node.newString("}b2H0v4K.Cmq", 2170, 2170);
      Node node1 = Node.newString("ARRAYLIT");
      node1.isOnlyModifiesArgumentsCall();
      node1.isEquivalentToShallow(node0);
      node0.toString(false, false, false);
      node0.isQuotedString();
      node0.isTry();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      Node node0 = Node.newString("jYNc\"c7Igl");
      node0.toString(true, false, true);
      Node node1 = Node.newNumber(1.2);
      Node node2 = node0.cloneNode();
      node1.toStringTree();
      node2.getJsDocBuilderForNode();
      node0.isGetterDef();
      Node node3 = new Node(107);
      node3.isFunction();
      node3.children();
      node3.srcref(node0);
      node0.setType((-2344));
      node3.isDefaultCase();
      node1.isBlock();
      node3.isBreak();
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$", 43, 43);
      Node node1 = new Node(43, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("in%r=ec$");
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.isNoSideEffectsCall();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node2.isLabelName();
      node1.isFalse();
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$", 43, 43);
      Node node1 = new Node(43, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("in%r=ec$");
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.isNoSideEffectsCall();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("in%r=ec$");
      node_FileLevelJsDocBuilder0.append("e%\u0002],k");
      node1.isFalse();
      node2.isNE();
      node1.isLabelName();
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      Node node0 = Node.newString(3, "String node not created with Node.newString", (-475), (-475));
      node0.isCall();
      InputId inputId0 = new InputId("String node not created with Node.newString");
      Node node1 = new Node(32, node0, node0, node0, node0, (-939), 29);
      Node node2 = node1.cloneTree();
      Node node3 = new Node(48, node1, node2, 1, 47);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node3.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("String node not created with Node.newString");
      node1.isLabelName();
      node1.isFalse();
      Node node4 = new Node((-485));
      node4.isNE();
      node3.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      int int0 = (-485);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString((-485), ">W-&");
      node0.srcrefTree((Node) null);
      node0.isFromExterns();
      Node node1 = node0.getAncestor(int0);
      // Undeclared exception!
      try { 
        node1.detachFromParent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(4692, nodeArray0);
      node0.getSourceFileName();
      Node node1 = new Node(2);
      node1.removeProp(57);
      Node node2 = Node.newNumber((double) 56, 40, 64);
      node2.isSetterDef();
      node1.isRegExp();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Mm<*|]^7Pt");
      node0.isWith();
      node2.isCall();
      node2.isNot();
      node0.isTry();
      Node node3 = Node.newNumber(1.2, 1168, 13);
      node3.getStaticSourceFile();
      Node node4 = new Node(334, 1168, 42);
      node4.isWhile();
      node0.isVoid();
      node1.useSourceInfoIfMissingFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(125);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = new Node(57, node0, node0, node0, 4095, 1);
      node1.isVarArgs();
      node1.mayMutateGlobalStateOrThrow();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      node0.isBlock();
      node1.isCatch();
      int int0 = Node.FREE_CALL;
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(4692, nodeArray0);
      node0.getSourceFileName();
      Node node1 = new Node(2);
      node1.isWith();
      node1.isCall();
      node0.isVarArgs();
      Node node2 = new Node((-971), node1, node0, node0);
      node0.isIf();
      node0.cloneTree();
      node0.isObjectLit();
      node1.isGetterDef();
      node1.isFunction();
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      InputId inputId0 = new InputId("gtG_6\"?");
      Node node1 = Node.newNumber((double) 1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node2 = node1.cloneTree();
      node0.putBooleanProp(1, true);
      node0.getJsDocBuilderForNode();
      Node node3 = new Node(48, node2, node1, node1);
      Node.newString(49, "");
      Node node4 = Node.newNumber((double) 36);
      node4.checkTreeEquals(node1);
      Node node5 = node1.useSourceInfoIfMissingFromForTree(node3);
      node3.useSourceInfoFromForTree(node5);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      Node node0 = Node.newString("incrdecr", 11, 11);
      Node node1 = new Node(40);
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.isNoSideEffectsCall();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node2.isFalse();
      node2.isRegExp();
      node2.getLineno();
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      Node node1 = Node.newString(36, "gtG_6\"?");
      Node node2 = node1.copyInformationFromForTree(node0);
      node0.getQualifiedName();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node2.isFunction();
      Node node3 = Node.newString(130, "");
      node2.isAdd();
      node3.isExprResult();
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      Node node0 = Node.newString("incrdecr", 530, 530);
      Node node1 = new Node(42);
      Node node2 = new Node(36, 4, 54);
      node0.isNoSideEffectsCall();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isFalse();
      node1.isRegExp();
      int int0 = Node.INPUT_ID;
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      Node node0 = Node.newNumber(0.7);
      node0.getDouble();
      int int0 = Node.INPUT_ID;
      node0.isCatch();
      int int1 = Node.FREE_CALL;
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = node0.cloneNode();
      node1.toStringTree();
      node1.getJsDocBuilderForNode();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      Stack<JSType> stack0 = new Stack<JSType>();
      ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node0.isAdd();
      try { 
        node1.setDouble(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      Node node0 = Node.newString("jYNc\"c7Igl");
      node0.toString(true, false, true);
      Node node1 = Node.newNumber(1.2);
      Node node2 = node0.cloneNode();
      node1.toStringTree();
      node2.getJsDocBuilderForNode();
      node0.isGetterDef();
      Node node3 = new Node(107);
      node3.isFunction();
      node3.children();
      node3.srcref(node0);
      node0.setType((-2344));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node0.isCast();
      Node node4 = new Node(1600);
      node4.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(5760, "}S=J7<]Um%", 5760, 21);
      Node node1 = new Node(5760, node0, node0, 40, (-3166));
      node1.checkTreeEqualsImpl(node0);
      Node node2 = node1.getLastSibling();
      node2.setSideEffectFlags(29);
      node1.isCatch();
      String string0 = ":Sv/Xm'\\G}3=/!ko}j";
      node1.setString(string0);
      node1.isScript();
      node1.isThis();
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.putIntProp((-165), (-165));
      node0.isNew();
      node0.removeProp((-165));
      node0.getStaticSourceFile();
      Node node1 = new Node(54, (-1747), 54);
      node1.isOr();
      Node node2 = Node.newString("Should not happen\n", 37, 55);
      node2.isTrue();
      node1.isVarArgs();
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.Multimaps$Entries");
      node0.getStaticSourceFile();
      Node node1 = Node.newString("<b>D-&:DLP.)iEAc?", (-523), 4095);
      node1.getDirectives();
      Node node2 = Node.newString(41, "com.google.common.collect.Multimaps$Entries", 36, 48);
      node2.isDo();
      node2.isGetterDef();
      node2.isSyntheticBlock();
      Node node3 = new Node(544, node0, node1, node2);
      node3.isCast();
      node3.isSwitch();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node3.hasMoreThanOneChild();
      node0.isBlock();
      node3.setLength(16);
      node2.cloneTree();
      node0.isThis();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("Object#Key");
      Node node1 = new Node(47, node0, 36, 40);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isEmpty();
      Node node3 = new Node(110);
      node2.replaceChildAfter(node3, node1);
      node2.getQualifiedName();
      // Undeclared exception!
      try { 
        node1.getFirstChild();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      Node node0 = Node.newNumber(1450.959071, 147456, 11);
      JSType[] jSTypeArray0 = new JSType[8];
      jSTypeArray0[0] = (JSType) null;
      jSTypeArray0[1] = (JSType) null;
      jSTypeArray0[2] = (JSType) null;
      jSTypeArray0[3] = (JSType) null;
      jSTypeArray0[4] = (JSType) null;
      jSTypeArray0[5] = (JSType) null;
      jSTypeArray0[6] = (JSType) null;
      jSTypeArray0[7] = (JSType) null;
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isReturn();
      node0.isUnscopedQualifiedName();
      node0.isScript();
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      Node node0 = Node.newString((-1532), "com.google.common.collect.ImmutableAsList", (-1532), (-1532));
      Node node1 = new Node((-1532), node0, node0, node0, node0);
      Node node2 = node1.cloneTree();
      node2.putBooleanProp(52, true);
      node0.getInputId();
      node2.setInputId((InputId) null);
      node0.isReturn();
      node0.isUnscopedQualifiedName();
      Node.newString(32, "com.google.common.collect.ImmutableAsList", (-778), 1473);
      node1.isScript();
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Node node0 = Node.newString("", 1375, 212);
      Node node1 = new Node(4, node0, 705, 203);
      Node node2 = Node.newString(244, "@V6GKm|B$Z5<-5{/", 4, 36);
      node0.getString();
      node1.isContinue();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.srcrefTree(node2);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1582), 113);
      node0.getSideEffectFlags();
      node0.isSetterDef();
      node0.hasChildren();
      Node node1 = Node.newNumber((-883.910630352));
      node0.checkTreeEquals(node1);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.getIndexOfChild((Node) null);
      node0.isEmpty();
      node1.checkTreeTypeAwareEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isSyntheticBlock();
      InputId inputId0 = new InputId("gtG_6\"?");
      Node node1 = Node.newNumber((double) 1);
      Node node2 = node1.cloneTree();
      node0.putBooleanProp(1, true);
      node0.getJsDocBuilderForNode();
      node1.isSyntheticBlock();
      node0.isCast();
      node0.hasChildren();
      node1.isNot();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node2.isEquivalentTo(node1);
      node0.isUnscopedQualifiedName();
      Node node3 = new Node((-46), node1);
      node3.isCast();
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Node node0 = Node.newString(3, "String node not created with Node.newString", (-475), (-475));
      Node node1 = Node.newString(1406, "");
      node0.isEquivalentTo(node1, true, false, false);
      node0.isCall();
      node0.checkTreeEqualsImpl(node1);
      InputId inputId0 = new InputId("String node not created with Node.newString");
      Node node2 = new Node(32, node0, node0, node0, node0, 3657, 29);
      Node node3 = node2.cloneTree();
      node3.getJSDocInfo();
      node2.setString("String node not created with Node.newString");
      node0.hasOneChild();
      node2.getStaticSourceFile();
      node2.isParamList();
      node2.getInputId();
      node0.isTrue();
      node2.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      String string0 = "com.google.javascript.rhino.jstype.UnknownType";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.javascript.rhino.jstype.UnknownType");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 27591;
      Node node0 = Node.newString("h}b2H0v4K.Cmq");
      node0.setLineno(27591);
      int int1 = 1573;
      int int2 = 83;
      Node node1 = new Node(40, node0, node0);
      node1.getString();
      node0.isVarArgs();
      node0.checkTreeEqualsImpl(node1);
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      Node node0 = Node.newString("", 1375, 212);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.isVarArgs();
      Node.extractCharno(51);
      node0.isEquivalentToShallow((Node) null);
      node0.isSetterDef();
      Node node1 = Node.newNumber((double) node0.LENGTH);
      node1.isQualifiedName();
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(106);
      node0.setType(106);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isFunction();
      Node node1 = Node.newString(1377, ":A;ll=$b");
      node1.isAdd();
      node1.isExprResult();
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      Node node1 = new Node(42);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.isObjectLit();
      Node node2 = node1.clonePropsFrom(node0);
      node0.isGetterDef();
      node1.isFunction();
      node0.isAdd();
      node1.addChildAfter(node0, node0);
      node1.useSourceInfoFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Node node0 = Node.newString(36, "gtG_6\"?", 3, 3);
      node0.isNot();
      InputId inputId0 = new InputId("gtG_6\"?");
      Node node1 = Node.newNumber((double) 1);
      Node node2 = node1.cloneTree();
      node0.putBooleanProp(1, true);
      inputId0.toString();
      node2.setInputId(inputId0);
      node0.getJsDocBuilderForNode();
      Node node3 = new Node(48, node2, node1, node1);
      node3.addChildrenToBack(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node3.getAncestors();
      node3.isFalse();
      node0.getAncestors();
      node_SideEffectFlags0.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      Node node0 = Node.newString(1812, "wpuS6UAbQr~;~6ee]x", 1812, 2533);
      Node node1 = new Node(51, 1058, 380);
      node0.checkTreeEqualsImpl(node1);
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Node node0 = new Node(125);
      node0.isVoid();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(36);
      node0.copyInformationFrom((Node) null);
      node0.isDebugger();
      Node node1 = Node.newString(jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE);
      node0.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = Node.newString(1, "Object#Element", 1, 0);
      node0.addSuppression("Unknown class name");
      node0.getJsDocBuilderForNode();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isObjectLit();
      node0.isGetterDef();
      node0.isFunction();
      node0.isAdd();
      node0.addChildAfter((Node) null, (Node) null);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node0.removeProp(3587);
      node0.isSetterDef();
      node0.isRegExp();
      node0.isWith();
      node0.isCall();
      node0.isDefaultCase();
      node0.isTry();
      Node node1 = Node.newNumber(1.2, 55, 52);
      node0.getStaticSourceFile();
      node1.isWhile();
      Node node2 = new Node(4095, node0, node0, 3587, 31);
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node1);
      node2.isNull();
      node3.getAncestors();
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      Node node0 = Node.newString(3, "'", 3, 3);
      node0.isCall();
      InputId inputId0 = new InputId("'");
      Node node1 = new Node(32, node0, node0, node0, node0, 3657, 29);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("'");
      node_FileLevelJsDocBuilder0.append("side_effect_flags");
      node_FileLevelJsDocBuilder0.append("q,+1*p:m[$g");
      node0.isVoid();
      node1.isGetProp();
      node0.isArrayLit();
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      Node node0 = Node.newString("", 1375, 212);
      node0.isVarArgs();
      node0.isBlock();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(40);
      node0.isVarArgs();
      Node.extractCharno((-536870912));
      node0.isSetterDef();
      Node node1 = Node.newNumber((double) 2);
      node1.isQualifiedName();
      node1.isCase();
      Node node2 = new Node(2029, 57, (-1529));
      node2.isObjectLit();
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Node node0 = Node.newNumber(0.7);
      Node node1 = Node.newNumber((double) 4, 12, 39);
      node1.isName();
      node0.isVoid();
      node1.toString(false, true, false);
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(113);
      node0.isQuotedString();
      node0.isTry();
      node0.wasEmptyNode();
      node0.addChildBefore((Node) null, (Node) null);
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      Node node0 = Node.newNumber((-2743.4489283687253));
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isScript();
      Node node1 = Node.newString("gtG_6\"?", 30, 40);
      node1.toString(false, false, false);
      node1.putIntProp((-1086), (-1929));
      node0.isNew();
      node1.addChildBefore(node0, (Node) null);
      String string0 = "com.google.common.collect.ImmutableList$1";
      int int0 = 84;
      Node node2 = Node.newString(int0, string0);
      node2.getJSType();
      int int1 = 1843;
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = node0.cloneNode();
      node1.toStringTree();
      node1.getJsDocBuilderForNode();
      Node node2 = node0.srcref(node1);
      Node node3 = Node.newNumber(537.47);
      node3.setType(55);
      node1.isDefaultCase();
      node2.isBlock();
      Node.extractLineno((-206));
      node3.removeChildren();
      node2.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      Node node0 = new Node(125);
      int int0 = Node.IS_NAMESPACE;
      node0.isInc();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(113);
      node0.isQuotedString();
      node0.isObjectLit();
      node0.isOnlyModifiesArgumentsCall();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isTry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.isCase();
      Node node1 = Node.newString(" is not a string node");
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      node_NodeMismatch0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Node node0 = Node.newString("incrdecr", 530, 530);
      Node node1 = new Node(42);
      Node node2 = node1.useSourceInfoFrom(node0);
      node0.isNoSideEffectsCall();
      Node.extractCharno((-698));
      Node node3 = node2.cloneNode();
      node0.isOnlyModifiesArgumentsCall();
      Node node4 = new Node(3398, node3, node0, node1);
      node4.setLength(214);
      node2.wasEmptyNode();
      node2.addChildBefore(node4, node4);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(125);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Object#Element");
      node0.isWith();
      node0.isCall();
      node0.isParamList();
      node0.isTry();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isFalse();
      node0.isRegExp();
      int int0 = Node.INPUT_ID;
      node0.isCatch();
      Node node1 = Node.newString("X&OtGuT>nd(e", 49, 40);
      node0.getIndexOfChild(node1);
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Node node0 = Node.newString("jYNc\"c7Igl");
      Node node1 = new Node(53);
      node0.setType(4);
      node1.isAnd();
      node1.isAdd();
      node1.isExprResult();
      Node node2 = new Node(119);
      node2.getChangeTime();
      Node node3 = new Node(49, node1);
      node3.cloneNode();
      node0.addChildAfter(node3, node1);
      node3.addChildToBack(node0);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$", 43, 43);
      Node node1 = new Node(43, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("in%r=ec$");
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.isEquivalentTo(node1, true, true, true);
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      Node node0 = new Node(26);
      Node node1 = Node.newString(57, "Should not happen\n", 1, 1);
      Node node2 = node0.cloneTree();
      node1.putBooleanProp(36, true);
      node1.setInputId((InputId) null);
      node0.getJsDocBuilderForNode();
      Node node3 = new Node(38, node1, node2, node2, node1, 31, 4095);
      Node node4 = new Node(53, node3, node1, 39, (-1720));
      int int0 = 147;
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node4;
      nodeArray0[1] = node2;
      Node node5 = new Node(int0, nodeArray0);
      nodeArray0[0].isNot();
      // Undeclared exception!
      try { 
        node5.isTry();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = node0.cloneTree();
      node0.putBooleanProp((-1557), true);
      node1.getJsDocBuilderForNode();
      node1.getQualifiedName();
      node1.setSideEffectFlags(91);
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      Node node0 = Node.newString("in%O=ecK", (-9), (-9));
      Node node1 = new Node((-9), node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("in%O=ecK");
      node1.useSourceInfoFrom(node0);
      node1.isArrayLit();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.clearAllFlags();
      node0.setSideEffectFlags(node_SideEffectFlags1);
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$", 43, 43);
      Node node1 = new Node(43, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("in%r=ec$");
      node1.isNoSideEffectsCall();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("in%r=ec$", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getStaticSourceFile();
      node1.isOr();
      node1.isTrue();
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$", 38, 38);
      Node node1 = new Node(12, node0, node0, node0, node0, 54, 16);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("in%r=ec$");
      Node node2 = node1.useSourceInfoFrom(node0);
      node0.isVar();
      Node.newNumber((double) 46);
      node0.isFunction();
      node2.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(113);
      node0.isObjectLit();
      node0.isOnlyModifiesArgumentsCall();
      node0.isString();
      node0.isGetElem();
      int int0 = Node.LAST_PROP;
      node0.setJSDocInfo((JSDocInfo) null);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      Node node0 = new Node(114);
      node0.isStringKey();
      node0.getJsDocBuilderForNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      ImmutableList.copyOf((Collection<? extends JSType>) stack0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node1.copyInformationFrom(node0);
      node1.isComma();
      Node node2 = new Node(47, (Node[]) null);
      node2.isAdd();
      // Undeclared exception!
      try { 
        node2.isExprResult();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(125);
      Node node1 = new Node(2, node0, 49, 48);
      Node node2 = Node.newString(55, "com.google.common.collect.Lists", (-2118), 0);
      node2.getString();
      node0.isContinue();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.srcrefTree(node2);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("6I'JQWO[o[June0P", "com.google.javascript.rhino.Node$StringNode", 153, (-2679));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(125);
      Node node1 = new Node(40, 55, 4);
      node1.isWith();
      node0.isCall();
      node1.isTry();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isFalse();
      node1.isRegExp();
      int int0 = Node.INPUT_ID;
      node0.isCatch();
      Node node2 = Node.newString("J&S})>MK7sM~Eui`Jt", 56, (-326));
      node1.getIndexOfChild(node2);
      node2.isComma();
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = new Node(12, 4095, 57);
      node0.isString();
      node1.isOr();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
      node1.isScript();
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Node node0 = Node.newString("in9r=ec", 36, 36);
      Node node1 = new Node(38, node0, node0, node0, node0, 0, 48);
      node0.clonePropsFrom(node1);
      node0.getJsDocBuilderForNode();
      node1.isQualifiedName();
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("in%r=ec$", (-4358), 113);
      Node node1 = new Node(42, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("mv{f,X_Eroa");
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.isSetterDef();
      Node node3 = Node.newNumber((double) 0);
      node1.isQualifiedName();
      Node node4 = new Node(3657, node3, node2, node0, node2);
      node4.checkTreeEquals(node3);
      int int0 = (-4147);
      node0.setSideEffectFlags(int0);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      Node node0 = new Node((-1532), (-1532), (-1532));
      Node node1 = new Node((-1532), node0, node0, node0, node0);
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.getDirectives();
      node0.isEquivalentTo(node1, false, false, false);
      node1.addChildrenAfter(node0, node0);
      node0.isInstanceOf();
      node0.isGetterDef();
      // Undeclared exception!
      try { 
        node0.isScript();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(125);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(2874);
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.getDirectives();
      node1.isEquivalentTo(node0, false, true, false);
      Node node3 = new Node(46, node2, node1, node0, node2, 120, 37);
      node3.addChildrenAfter(node2, node2);
      node2.isInstanceOf();
      node2.isGetterDef();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      Node node0 = Node.newString("", 1375, 212);
      Node node1 = Node.newNumber((double) 38, 43, (-1284));
      node1.getSideEffectFlags();
      Node node2 = new Node(1, node1, node0, node1);
      node2.isTypeOf();
      Node node3 = new Node(42, node0, node2, node2);
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = false;
      node3.isEquivalentTo(node0, boolean1, boolean2, boolean0);
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("{D8>b+xj*_eta", 126, 37);
      Node node1 = new Node(17, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("h}b2H0v4K.Cmq");
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.isAdd();
      node0.isRegExp();
      int int0 = Node.INPUT_ID;
      node0.isCatch();
      node0.getIndexOfChild(node1);
      node1.isEmpty();
      node2.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("{D8>b+xj*_eta", 126, 126);
      Node node1 = new Node(17, node0, node0, node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      int int0 = Node.INPUT_ID;
      node0.getIndexOfChild(node1);
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node2.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("{D8>b+xj*_eta", 126, 126);
      Node node1 = new Node(17, node0, node0, node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.isAdd();
      int int0 = Node.INPUT_ID;
      node0.getIndexOfChild(node1);
      node1.isEmpty();
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node2.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      Node node0 = Node.newString(36, "com.google.javascript.rhino.Node$AncestorItrable$1", 36, 36);
      Node node1 = new Node(36, node0, node0, node0, node0);
      node0.isNumber();
      Node node2 = new Node(39);
      node2.isSyntheticBlock();
      node1.isCast();
      int int0 = Node.IS_DISPATCHER;
      node0.isThis();
      node2.isScript();
      Node node3 = Node.newNumber(37.0, 8, 302);
      node1.addChildBefore(node3, node0);
      node1.isDelProp();
      node1.getChildAtIndex((-396));
      node2.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(125);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Object#Element");
      node0.isWith();
      node0.isCall();
      node0.addSuppression("com.google.javascript.rhino.jstype.JSType$TypePair");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder2 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder1.append("com.google.javascript.rhino.jstype.JSType$TypePair");
      node_FileLevelJsDocBuilder2.append("]KyXcUUAS\"/4K3+{");
      node0.isLabelName();
      node0.isFalse();
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = node0.cloneNode();
      node1.toStringTree();
      InputId inputId0 = new InputId("Not declared as a constructor");
      node1.setInputId(inputId0);
      node1.getJsDocBuilderForNode();
      Node.extractCharno((-3254));
      node0.isSetterDef();
      Node.newNumber((-916.2375841));
      Node node2 = new Node(103, node1);
      node0.checkTreeEquals(node1);
      node2.useSourceInfoIfMissingFromForTree(node0);
      node1.getBooleanProp(37);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = Node.newString(1, "Object#Element", 1, 0);
      node0.addSuppression("Unknown class name");
      node0.getJsDocBuilderForNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("Object#Element");
      node_FileLevelJsDocBuilder0.append("]KyXcUUAS\"/4K3+{");
      node0.isLabelName();
      node0.isFalse();
      node0.isFromExterns();
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      Node node0 = Node.newString("ASSIGN_LSH");
      node0.setSourceFileForTesting("ASSIGN_LSH");
      Node node1 = Node.newString(48, "ASSIGN_LSH");
      Node node2 = new Node(122, node0);
      String string0 = "9A1@PFnKY:";
      node0.setInputId((InputId) null);
      node0.setString("9A1@PFnKY:");
      node1.isEquivalentToShallow(node0);
      node0.toString(true, true, false);
      Node node3 = node0.copyInformationFromForTree(node2);
      node2.isQualifiedName();
      Node node4 = node3.clonePropsFrom(node0);
      node0.getBooleanProp(node4.COLUMN_BITS);
      node3.setLength(node4.FLAG_GLOBAL_STATE_UNMODIFIED);
      Node.extractCharno(node1.IS_DISPATCHER);
      node3.isOptionalArg();
      node0.toString();
      // Undeclared exception!
      try { 
        node0.getParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      Node node0 = Node.newString("jYNc\"c7Igl");
      Node node1 = node0.cloneNode();
      node0.toStringTree();
      node1.getJsDocBuilderForNode();
      node0.isGetterDef();
      node0.isEquivalentToShallow(node1);
      node0.getDouble();
      // Undeclared exception!
      try { 
        node1.isIn();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING jYNc\"c7Igl is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      Node node0 = Node.newString(3, "String node not created with Node.newString", (-475), (-475));
      node0.isCall();
      InputId inputId0 = new InputId("String node not created with Node.newString");
      Node node1 = new Node(32, node0, node0, node0, node0, 3657, 29);
      Node node2 = node1.cloneTree();
      node0.getJsDocBuilderForNode();
      Node node3 = new Node(1365, node2, node1, 32, 31);
      node1.isNot();
      node2.isTry();
      Node.newNumber((double) 16);
      node0.setInputId(inputId0);
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isHook();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      node0.isBlock();
      Node node1 = new Node(103, node0, node0);
      node1.isDec();
      node1.isDebugger();
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      int int0 = 106;
      Node node0 = new Node(106);
      Node node1 = new Node(836, 155, 1180);
      node0.addChildrenToBack(node1);
      node0.isOr();
      node0.isAnd();
      node0.addChildToBack((Node) null);
      node0.toStringTree();
      node0.setDouble(int0);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      Node node0 = Node.newString(3, "String node not created with Node.newString", (-475), (-475));
      node0.isCall();
      InputId inputId0 = new InputId("String node not created with Node.newString");
      Node node1 = new Node(32, node0, node0, node0, node0, 3657, 29);
      Node node2 = new Node((-2229));
      Node node3 = node1.useSourceInfoFrom(node0);
      node3.isNoSideEffectsCall();
      Node node4 = new Node(2);
      node4.isNull();
      node3.isThrow();
      node1.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      Node node0 = new Node(155);
      node0.isGetterDef();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(4095, node0, node0, node0);
      node0.addChildrenToBack(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags((-60));
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.setMutatesArguments();
      node0.isCast();
      Node node2 = node0.getAncestor((-3294));
      node0.removeChild(node2);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(2040, "~2/5");
      Node node1 = Node.newString(147, "m5Wcy!.H3^aW", 30, 67);
      Node.newString("m5Wcy!.H3^aW", 55, 53);
      Node node2 = new Node(12, node1, 43, 2);
      Node node3 = new Node(1335);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isObjectLit();
      node1.isGetterDef();
      node1.isFunction();
      node3.isFromExterns();
      node2.isVarArgs();
      Node node4 = new Node(57);
      node4.checkTreeEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(2040, "~2/5");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = Node.newString(147, "m5Wcy!.H3^aW", 30, 67);
      Node node2 = Node.newString("m5Wcy!.H3^aW", 103, 53);
      node1.getBooleanProp(2);
      node2.addSuppression("h}b2H0v4K.Cmq");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.getJsDocBuilderForNode();
      node2.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("m5Wcy!.H3^aW");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node1.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("QdDq=:o!,Vj)58");
      node1.isLabelName();
      node0.isFalse();
      Node node3 = Node.newString("null", 2, 52);
      node3.setChangeTime(38);
      node2.isEquivalentTo(node1);
      Node node4 = node1.copyInformationFrom(node2);
      node0.srcrefTree(node4);
      node4.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(106);
      node0.setType(106);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isFunction();
      node0.isIf();
      Node node1 = new Node(49, node0, 52, 32);
      node1.cloneTree();
      node1.isInstanceOf();
      node0.isGetterDef();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(106);
      node0.setType(106);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isFunction();
      node0.isIf();
      Node node1 = Node.newString("cr+.(hbLzYU,*g,=ry3");
      node1.removeChildren();
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.isVar();
      node0.addChildrenAfter(node1, (Node) null);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      Node node0 = new Node(124);
      node0.isOr();
      node0.isOnlyModifiesArgumentsCall();
      node0.isVarArgs();
      node0.mayMutateGlobalStateOrThrow();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      node0.copyInformationFrom(node0);
      Node node1 = new Node(100, nodeArray0, (-215), 2);
      node0.checkTreeEquals(node0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.getProp(16);
      node_NodeMismatch0.equals((Object) null);
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(113);
      node0.isQuotedString();
      node0.isCall();
      node0.isOnlyModifiesArgumentsCall();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isSetterDef();
      Node node1 = Node.newNumber(56.0);
      Node node2 = new Node(31, node1);
      node2.checkTreeEquals(node0);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      Node node0 = Node.newString("SnjvA:taqSVG |{(p)", 3, 3);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = new Node(114, 0, 8);
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.isNoSideEffectsCall();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node2.mayMutateArguments();
      node2.isAnd();
      node2.toStringTree();
      node0.setDouble(40);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      Node node0 = Node.newString("incrdecr", 530, 530);
      Node node1 = new Node(38);
      Node node2 = node1.useSourceInfoFrom(node0);
      node0.isNoSideEffectsCall();
      node0.isNull();
      node2.isThrow();
      node2.isFromExterns();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node0.setSideEffectFlags(node_SideEffectFlags2);
      node2.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(2040, "~2/5");
      Node node1 = new Node((-242));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.newString("r|!adGnxn-=Iy", 4095, (-1289));
      int int0 = Node.IS_NAMESPACE;
      node0.isNE();
      node0.isInc();
      node1.isScript();
      node1.isOr();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      Node node0 = new Node(113);
      node0.isObjectLit();
      node0.isOnlyModifiesArgumentsCall();
      node0.isWith();
      node0.isCall();
      node0.isNot();
      node0.isTry();
      Node node1 = Node.newNumber(56.0, (-631), 4);
      node0.getStaticSourceFile();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isWhile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      node1.setSideEffectFlags(node_SideEffectFlags0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      double double0 = (-1648.43697380064);
      Node.newNumber(double0);
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = new Node(0, 0, 1);
      Node node1 = node0.cloneNode();
      // Undeclared exception!
      try { 
        node1.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      Node node0 = new Node(154, 101, 16);
      Node node1 = new Node(4095, node0, 51, 1755);
      node0.clonePropsFrom(node1);
      node0.getSourceFileName();
      node0.isGetProp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = null;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("~HCssXN&_Sm4#RsBK?", node1, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      ObjectType objectType0 = enumElementType0.getParentScope();
      ObjectType objectType1 = FunctionType.getTopDefiningInterface(objectType0, objectType0.EMPTY_TYPE_COMPONENT);
      // Undeclared exception!
      try { 
        objectType0.isInvariant(objectType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      Node node0 = Node.newString("gtG_6\"?", 1322, 2);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = jSDocInfo0.getAssociatedNode();
      Node node2 = node0.useSourceInfoFrom((Node) null);
      node1.isNoSideEffectsCall();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        node2.mayMutateArguments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("in%r=ec$", (-458), (-458));
      Node node1 = new Node(52, node0, node0, node0, node0, 5201, 56);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("in%r=ec$");
      node1.useSourceInfoFrom(node0);
      node1.isVar();
      Node.newNumber((-1766.522));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSType[] jSTypeArray0 = new JSType[1];
      JSType.toMaybeTemplatizedType((JSType) null);
      node1.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      Node node0 = Node.newString(3, "String node not created with Node.newString", (-475), (-475));
      node0.isCall();
      InputId inputId0 = new InputId("String node not created with Node.newString");
      Node node1 = new Node(32, node0, node0, node0, node0, 3657, 29);
      Node node2 = node1.cloneTree();
      node2.clonePropsFrom(node1);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node2.isUnscopedQualifiedName();
      node1.isScript();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      Node node0 = new Node(124);
      node0.isOr();
      node0.isOnlyModifiesArgumentsCall();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isVarArgs();
      node0.mayMutateGlobalStateOrThrow();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isVar();
      int int1 = Node.IS_NAMESPACE;
      node0.hasOneChild();
      node0.isHook();
      Node.newNumber(649.4333962, 2475, 310);
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(113);
      Node node1 = new Node(108);
      Node node2 = Node.newString("4.");
      node2.toStringTree();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node2.isVar();
      node0.isLabel();
      node0.isAssignAdd();
      node1.putIntProp((-3842), 42);
      node1.isTrue();
      node1.isIf();
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(113);
      node0.setSourceEncodedPositionForTree(2008);
      node0.isBreak();
      Node node1 = new Node(36);
      node1.setType(113);
      node0.isAnd();
      node1.isAdd();
      Node node2 = new Node(4095, 49, 117);
      node2.isExprResult();
      node0.getChangeTime();
      node2.putIntProp((-3228), 2);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node2);
      Object object0 = new Object();
      node_NodeMismatch0.equals((Object) null);
      node2.isLabel();
      node0.getAncestors();
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      Node node0 = Node.newString(3, "String node not created with Node.newString", (-475), (-475));
      node0.isCall();
      InputId inputId0 = new InputId("String node not created with Node.newString");
      Node node1 = new Node(32, node0, node0, node0, node0, 3657, 29);
      Node node2 = node1.cloneTree();
      node2.setCharno(12);
      Node node3 = new Node(57);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node3.isObjectLit();
      node1.isGetterDef();
      node0.isFunction();
      node1.getInputId();
      node1.getProp(53);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node3);
      node_NodeMismatch0.equals((Object) null);
      node1.isLabel();
      node2.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      Node node0 = new Node(147);
      node0.isOr();
      node0.isAdd();
      node0.isVarArgs();
      node0.mayMutateGlobalStateOrThrow();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      node0.copyInformationFrom(node0);
      node0.getDouble();
      int int0 = null;
      try {  
      int0 = Node.INPUT_ID;
      } catch(UnsupportedOperationException e) {}
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      Node node0 = Node.newString("String node not reated with NodJ.newStrwg");
      node0.isCall();
      node0.getInputId();
      Node node1 = new Node(31, 2, 15);
      Node node2 = new Node(31, node1, node0, node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("String node not reated with NodJ.newStrwg");
      node2.useSourceInfoFrom(node1);
      node1.isNoSideEffectsCall();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("String node not reated with NodJ.newStrwg", node0, (JSType) null);
      enumType0.toMaybeEnumType();
      node2.isOr();
      // Undeclared exception!
      try { 
        node1.isTrue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = node0.cloneNode();
      node1.toStringTree();
      Node.newNumber((double) 0);
      Node node2 = new Node(46, node0, node0, 147, (-723));
      Node node3 = new Node(40, node2);
      node3.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      Node node0 = new Node(113);
      node0.isBreak();
      Node node1 = new Node(36);
      node1.setType(113);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isAnd();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.isBlock();
      node1.isDec();
      node0.isContinue();
      node1.checkTreeEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Node node0 = Node.newString(3, "String node not created with Node.newString", (-475), (-475));
      node0.isCall();
      InputId inputId0 = new InputId("String node not created with Node.newString");
      Node node1 = new Node(31, node0, node0, node0, node0);
      Node node2 = node1.cloneTree();
      node1.children();
      node2.setCharno(12);
      Node node3 = new Node(57);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node3.isObjectLit();
      node1.isVarArgs();
      Node.extractCharno(77);
      node3.isSetterDef();
      Node node4 = Node.newNumber((-33.266721944));
      node4.checkTreeEquals(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = "";
      Node node5 = null;
      JSType jSType0 = null;
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node5, jSType0);
      enumType0.toAnnotationString();
      enumType0.toMaybeEnumType();
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      JSType jSType0 = templateTypeMapReplacer0.caseNullType();
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      nodeArray0[0] = node0;
      jSTypeRegistry0.createConstructorType(jSTypeArray0[0], true, jSTypeArray0);
      Node node1 = new Node((-475), nodeArray0);
      node0.getSourceFileName();
      Node node2 = new Node(301);
      node0.isWith();
      node2.isCall();
      node1.isVarArgs();
      Node.extractCharno(48);
      node0.isSetterDef();
      Node node3 = Node.newNumber((double) 50);
      node3.checkTreeEquals(node0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node2, jSType0);
      enumType0.toMaybeEnumType();
      node1.getType();
      node3.isLabel();
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(113);
      node0.isQuotedString();
      node0.isObjectLit();
      node0.isOnlyModifiesArgumentsCall();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isTry();
      node0.setSourceFileForTesting("node is not a child");
      Node node1 = node0.cloneTree();
      node0.isExprResult();
      Locale locale0 = Locale.forLanguageTag("node is not a child");
      Locale locale1 = new Locale("node is not a child", "node is not a child");
      locale0.getDisplayScript(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      node0.getJsDocBuilderForNode();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte) (-116);
      byteArray0[8] = (byte)125;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isLabel();
      node1.srcref(node0);
      node0.isLabel();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "node is not a child");
      node1.setDouble(4095);
      Node node2 = node1.getLastSibling();
      node2.getJSDocInfo();
      node2.isEmpty();
      node1.isOptionalArg();
      int int0 = 108;
      String string0 = "=W<*Qe2ZatvQ}P;-SF";
      Node node3 = Node.newString(int0, string0, node0.COLUMN_BITS, node2.SIDE_EFFECTS_ALL);
      node3.isCase();
      node3.isNot();
      node2.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      Node node0 = new Node(113);
      node0.isOnlyModifiesArgumentsCall();
      node0.isVarArgs();
      Node node1 = new Node((-1), node0, node0, node0);
      Node node2 = node0.useSourceInfoFrom(node1);
      node1.isArrayLit();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}b2H0v4K.Cmq");
      node_SideEffectFlags0.clearAllFlags();
      node1.addChildToFront(node2);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(91);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isVar();
      int int1 = Node.IS_NAMESPACE;
      node0.hasOneChild();
      node0.isHook();
      node0.getQualifiedName();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      node0.copyInformationFromForTree((Node) null);
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$", 38, 38);
      Node node1 = new Node(12, node0, node0, node0, node0, 54, 16);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("in%r=ec$");
      Node node2 = node1.useSourceInfoFrom(node0);
      node0.isVar();
      Node node3 = Node.newNumber((double) 46);
      node2.isQualifiedName();
      node1.isQualifiedName();
      node1.checkTreeEquals(node2);
      Node node4 = new Node(39, node1);
      node4.clonePropsFrom(node2);
      node3.isCatch();
      node1.isComma();
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      Node node0 = new Node(124);
      node0.isOr();
      node0.isOnlyModifiesArgumentsCall();
      node0.isLabelName();
      node0.mayMutateGlobalStateOrThrow();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      node0.copyInformationFrom(node0);
      node0.checkTreeEquals(node0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.getLastSibling();
      node0.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(91);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isVar();
      node0.isSetterDef();
      Node node1 = Node.newNumber((double) 42);
      node1.checkTreeEquals(node0);
      node1.getIndexOfChild(node0);
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node((-200), nodeArray0);
      node0.useSourceInfoIfMissingFrom(node2);
      Node.newString("Node tree inequality:\nTree1:\nNUMBER 42.0\n\n\nTree2:\nASSIGN_RSH\n\n\nSubtree1: NUMBER 42.0\n\n\nSubtree2: ASSIGN_RSH\n");
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      Node node0 = Node.newString("String node not reated with NodJ.newStrwg");
      node0.isCall();
      node0.getInputId();
      Node node1 = new Node(31, 2, 15);
      node0.removeProp((-1164));
      node0.isSetterDef();
      String string0 = "b!iG";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      node1.appendStringTree(mockFileWriter0);
      node0.isRegExp();
      node1.isWith();
      node1.isNot();
      node0.setSideEffectFlags(node1.REFLECTED_OBJECT);
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(119);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isParamList();
      node0.isTry();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node((-118), nodeArray0);
      Node node2 = node0.useSourceInfoFrom(node1);
      node1.isNoSideEffectsCall();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = true;
      boolean boolean1 = false;
      node1.setQuotedString();
      boolean boolean2 = true;
      node0.isEquivalentTo(node2, boolean0, boolean1, boolean2);
      // Undeclared exception!
      try { 
        node2.isCase();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      Node node0 = new Node(124);
      node0.isOr();
      node0.isOnlyModifiesArgumentsCall();
      node0.isVarArgs();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = node0.cloneTree();
      node0.putBooleanProp(2170, false);
      node1.getInputId();
      node1.setInputId((InputId) null);
      node1.getJsDocBuilderForNode();
      Node node2 = Node.newString("K<}#cE~=?p<av", (-784), 12);
      node2.putIntProp(32, 29);
      node2.isNew();
      node0.addChildBefore(node2, node2);
      int int0 = 15;
      String string0 = "Node tree inequality:\nTree1:\n";
      Node.newString(int0, string0);
      node1.getJSType();
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("P.S", (-1493), (-588));
      Node node1 = new Node(98, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("h}b2H0v4K.Cmq");
      node1.useSourceInfoFrom(node0);
      node0.isNoSideEffectsCall();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.isEquivalentTo(node0, true, false, false);
      node0.isCase();
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString((-2976), "NoResolvedType", 317, (-2976));
      Node node1 = Node.newString(48, "NoResolvedType");
      Node node2 = Node.newNumber((double) 40, (-2046), (-1264));
      Node node3 = node1.copyInformationFromForTree(node2);
      node0.hasChildren();
      int int0 = Node.IS_DISPATCHER;
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.isVar();
      Node node4 = new Node(13, node1, node0, node3, 2, 4095);
      node4.addChildrenAfter(node2, node0);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(91);
      node0.toStringTree();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.isVar();
      node0.isLabel();
      node0.isAssignAdd();
      node0.putIntProp(2, 4);
      node0.isTrue();
      node0.getExistingIntProp(2);
      node0.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(125);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = Node.newString("inferred", 46, 543);
      int int0 = Node.QUOTED_PROP;
      Node node2 = Node.newString("}b2H0v4K.Cmq", (-1955), 12);
      node1.isEquivalentTo(node0);
      node0.copyInformationFrom(node2);
      Node node3 = Node.newString((-1134), "}b2H0v4K.Cmq", 40, 610418);
      node3.srcrefTree(node2);
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(113);
      node0.isQuotedString();
      node0.isObjectLit();
      Node node1 = node0.cloneNode();
      node0.toStringTree();
      InputId inputId0 = new InputId("WHILE\n");
      Node node2 = new Node(50);
      node2.setInputId(inputId0);
      node1.getJsDocBuilderForNode();
      Node.extractCharno((-2542));
      Node node3 = Node.newNumber((double) 0);
      Node node4 = new Node(30, node3);
      node2.checkTreeEquals(node4);
      node2.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Bl4]z%>qci(Q%c");
      Node node0 = Node.newNumber(0.0, (-2902), (-570));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte) (-92);
      byteArray0[8] = (byte)122;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = new Node(41, node0, node0, node0, 53, 49);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.isVarArgs();
      node0.isOnlyModifiesArgumentsCall();
      node1.useSourceInfoFrom(node0);
      Node.mergeLineCharNo(42, 39);
      node2.getQualifiedName();
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$", 43, 43);
      Node node1 = new Node(43, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("in%r=ec$");
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.isNoSideEffectsCall();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node2.isEquivalentTo(node1, true, true, true);
      node2.getAncestor(2048);
      node2.removeChild((Node) null);
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1582), 113);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.getSideEffectFlags();
      node0.isTypeOf();
      node0.getBooleanProp((-1647));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.setSourceFileForTesting("com.google.common.collect.ImmutableMap");
      Node node1 = Node.newString("com.google.javascript.rhino.Node$AbstractPropListItem");
      node0.isSyntheticBlock();
      node0.removeProp(15);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      Node node2 = Node.newString(57, "com.google.javascript.rhino.Node$AbstractPropListItem");
      node2.setStaticSourceFile(simpleSourceFile0);
      node0.getProp((-1656));
      node1.addChildToBack(node2);
      node2.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(119);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isParamList();
      node0.isTry();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isFalse();
      node0.isRegExp();
      int int0 = Node.INPUT_ID;
      node0.getChangeTime();
      node0.isFromExterns();
      Node node1 = new Node(48);
      node0.useSourceInfoIfMissingFromForTree(node1);
      Node node2 = new Node(57, node1, node1, node1, 46, 37);
      node2.setDouble(12);
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      Node node0 = new Node(125);
      node0.isVoid();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1170);
      node0.isDebugger();
      Node node1 = new Node(51, 1170, 256);
      node1.isEquivalentTo(node0, false, true, true);
      Node node2 = node0.clonePropsFrom(node1);
      node2.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("{D8>b+xj*_eta", 126, 126);
      Node node1 = new Node(39, node0, node0, node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.isAssign();
      int int0 = Node.INPUT_ID;
      node2.setLineno(126);
      node0.useSourceInfoIfMissingFrom(node1);
      Node.newNumber((double) 29);
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(113);
      node0.isEmpty();
      node0.detachChildren();
      node0.isEquivalentToShallow(node0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.isCase();
      Node node1 = new Node(31, node0, node0, node0);
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$", 38, 38);
      Node node1 = new Node(12, node0, node0, node0, node0, 54, 16);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("in%r=ec$");
      Node node2 = node1.useSourceInfoFrom(node0);
      node0.isGetElem();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.setMutatesArguments();
      node2.isCast();
      node1.getAncestor(0);
      Node node3 = new Node(52, node2, node2, node2);
      node1.removeChild(node3);
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      Node node0 = Node.newString("in%r=ec$", 44, 44);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.useSourceInfoFrom(node0);
      node0.isNoSideEffectsCall();
      node1.addChildrenToBack(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(38);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node2 = Node.newString(1, "in%r=ec$");
      node2.isFunction();
      node0.checkTreeEquals(node2);
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(119);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isParamList();
      node0.isTry();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isFalse();
      node0.isRegExp();
      int int0 = Node.INPUT_ID;
      node0.isCatch();
      Node node1 = new Node(29, node0, node0, node0);
      node1.getChildBefore(node0);
      node1.detachChildren();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      Node node0 = Node.newString("String node not reated with NodJ.newStrwg");
      node0.isCall();
      node0.getInputId();
      Node node1 = new Node(31, 2, 15);
      node0.removeProp((-1174));
      node0.mayMutateGlobalStateOrThrow();
      node0.isRegExp();
      node1.isWith();
      node0.setLineno(36);
      node1.isNot();
      node1.srcrefTree(node0);
      node0.setSideEffectFlags(57);
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      Node node0 = new Node(113);
      node0.isBreak();
      Node node1 = new Node(36);
      node1.setType(113);
      Node.newString((-1807), "ARRAYLIT", (-1287), (-301));
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isAnd();
      node1.isBlock();
      node1.isDec();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      Node node0 = Node.newString("incrdecr", 530, 530);
      Node node1 = new Node(42);
      Node node2 = node1.useSourceInfoFrom(node0);
      node0.isNoSideEffectsCall();
      node0.isNull();
      Node node3 = new Node((-896), node1, node2, node1, node2, (-1534), (-253));
      node3.isFunction();
      node3.useSourceInfoFromForTree(node2);
      node2.checkTreeEquals(node3);
      node3.isOnlyModifiesArgumentsCall();
      double double0 = 607.307087579;
      Node.newNumber(double0, node2.IS_CONSTANT_NAME, node0.SIDE_EFFECT_FLAGS);
      node0.isName();
      int int0 = (-486);
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node0.removeProp(1);
      node0.isTrue();
      node0.isRegExp();
      node0.isWith();
      node0.isCall();
      node0.isTry();
      Node node1 = new Node(32, node0, 47, 2);
      node1.srcref(node0);
      Node node2 = node0.getLastSibling();
      node2.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      Node node0 = new Node(113);
      node0.isBreak();
      Node node1 = Node.newString((-1629), "t+#nkl", (-89), 29);
      node1.isCall();
      InputId inputId0 = new InputId("t+#nkl");
      Node node2 = new Node(0, node1, node0, node0, node0, 4095, 127);
      node2.copyInformationFromForTree(node0);
      node0.isCast();
      int int0 = Node.IS_DISPATCHER;
      Node node3 = new Node(55, (Node[]) null);
      node3.isGetElem();
      node1.addChildBefore(node2, node2);
      node1.isScript();
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2170, 2170, 2170);
      node0.isNot();
      node0.getSourceFileName();
      Node node1 = new Node(15);
      Node node2 = new Node(52, node0, node0, node1);
      Node node3 = node2.useSourceInfoFrom(node0);
      node2.setWasEmptyNode(true);
      int int0 = Node.INPUT_ID;
      node0.getIndexOfChild(node1);
      node3.getSideEffectFlags();
      node1.checkTreeTypeAwareEqualsImpl(node3);
      node3.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      Node node0 = new Node(2252);
      node0.setLength(44);
      node0.isThis();
      node0.isString();
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.setIsSyntheticBlock(true);
      node0.isNull();
      node0.mayMutateArguments();
      node0.getStaticSourceFile();
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      node0.getString();
      node0.getJsDocBuilderForNode();
      // Undeclared exception!
      try { 
        node0.getNext();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 1.0 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000002] [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.setIsSyntheticBlock(true);
      node0.isNull();
      node0.mayMutateArguments();
      node0.getStaticSourceFile();
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      node0.getString();
      node0.getJsDocBuilderForNode();
      // Undeclared exception!
      try { 
        node0.getNext();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 1.0 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000002] [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = Node.newString((-2542), "Object#Element", (-2888), 54);
      Node node1 = Node.newString(97, "Object#Key");
      Node node2 = new Node(42, node1);
      Node node3 = node2.copyInformationFromForTree(node1);
      node2.isCast();
      node3.isGetElem();
      node3.addChildBefore(node2, node1);
      node0.isScript();
      node2.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      Node node0 = Node.newNumber((double) 11, 32, 932);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) null;
      jSTypeArray0[1] = (JSType) null;
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node2 = new Node(52, node0, node1, node1, node1, (-1318), 60);
      node2.getIndexOfChild(node1);
      node2.isInc();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      JSType jSType0 = templateTypeMapReplacer0.caseNullType();
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      nodeArray0[0] = node0;
      Node node1 = new Node((-475), nodeArray0);
      node0.getSourceFileName();
      Node node2 = new Node(301);
      node0.isWith();
      node2.isCall();
      node1.isVarArgs();
      Node.extractCharno(48);
      node0.isSetterDef();
      node1.getLastSibling();
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      Node node0 = Node.newString("in9r=ec", 36, 36);
      Node node1 = new Node(38, node0, node0, node0, node0, 0, 48);
      Node node2 = node0.clonePropsFrom(node1);
      node0.getJsDocBuilderForNode();
      node1.getQualifiedName();
      node2.isHook();
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      Node node0 = Node.newString(3, "String node not created wit Node.newString", (-475), (-475));
      InputId inputId0 = new InputId("String node not created wit Node.newString");
      Node node1 = new Node(32, node0, node0, node0, node0, 3657, 29);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.isCast();
      int int0 = Node.IS_DISPATCHER;
      node1.isGetElem();
      Node node3 = node2.getLastSibling();
      node0.srcref(node2);
      node1.replaceChildAfter(node3, node2);
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isHook();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(105, nodeArray0, 12, 128);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      Node node0 = Node.newString("in9r=ec", 36, 36);
      Node node1 = new Node(38, node0, node0, node0, node0, 0, 48);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = node1.copyInformationFrom(node0);
      node2.checkTreeEquals(node0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node0);
      Node.newString("in9r=ec");
      node2.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(524288);
      Node node1 = new Node(148, node0, node0, node0, 56, 39);
      Node node2 = new Node((-182), node1);
      node2.setLineno(4095);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "String node not reated with NodJ.newStrwg");
      Set<String> set0 = jSDocInfo0.getModifies();
      node1.setDirectives(set0);
      String string0 = "ARRAYLIT";
      node0.getSourceOffset();
      Node node3 = node2.clonePropsFrom(node0);
      node2.setString("ARRAYLIT");
      node0.getSourceFileName();
      Node node4 = node2.detachFromParent();
      node2.isNE();
      node4.setLineno(node3.SIDE_EFFECTS_FLAGS_MASK);
      // Undeclared exception!
      try { 
        node4.copyInformationFromForTree(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -182
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      Node node0 = new Node(114);
      node0.isStringKey();
      node0.getJsDocBuilderForNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isLabelName();
      node0.mayMutateGlobalStateOrThrow();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node1 = new Node(4095, node0, node0, node0, node0);
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = new Node(110, node0, node1, 55, 52);
      node3.checkTreeEquals(node0);
      Node node4 = new Node(node3.IS_CONSTANT_NAME, node1, node2, node1, node1.INFERRED_FUNCTION, node2.CHANGE_TIME);
      Node.NodeMismatch node_NodeMismatch0 = null;
      try {
        node_NodeMismatch0 = new Node.NodeMismatch(node4, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      Node node0 = new Node(125, 125, 6);
      Node node1 = new Node((-243));
      node0.isQuotedString();
      node0.isObjectLit();
      node1.isReturn();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.isTry();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = node0.getLastSibling();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      node0.isOptionalArg();
      nodeArray0[1] = node0;
      nodeArray0[2] = node2;
      nodeArray0[3] = node0;
      nodeArray0[4] = node1;
      nodeArray0[5] = node1;
      nodeArray0[6] = node0;
      Node node3 = new Node(43, nodeArray0, 30, 3235);
      node2.srcref(node3);
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(119);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.setJSDocInfo(jSDocInfo0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "y8:;2RTrYD$T5SD3");
      node0.isParamList();
      node0.isTry();
      node0.isVar();
      node0.isAssignAdd();
      node0.isNull();
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      Node node0 = new Node(2280);
      Node node1 = null;
      node0.addChildrenToFront((Node) null);
      // Undeclared exception!
      try { 
        node0.getJsDocBuilderForNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      Node node0 = Node.newString("String node not reated with NodJ.newStrwg");
      node0.getInputId();
      Node node1 = new Node(31, 2, 15);
      node0.removeProp((-1186));
      node1.mayMutateGlobalStateOrThrow();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = node1.copyInformationFrom(node0);
      node0.checkTreeEquals(node2);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node2);
      node0.isFor();
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      JSType jSType0 = templateTypeMapReplacer0.caseNullType();
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSTypeArray0[0], jSTypeArray0[0], jSType0);
      ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node2 = node1.copyInformationFrom(node0);
      node2.isComma();
      node1.isSwitch();
      node1.addChildToFront(node0);
      node0.getAncestors();
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      Node node0 = Node.newString("in%R=ec$", 43, 43);
      Node node1 = new Node(43, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("in%R=ec$");
      Node node2 = node1.useSourceInfoFrom(node0);
      node0.isNoSideEffectsCall();
      node2.getAncestor(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node2.getStaticSourceFile();
      node2.isOr();
      node2.isTrue();
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      nodeArray0[0] = node0;
      Node node1 = new Node((-872), nodeArray0, 38, (-1759));
      Node node2 = node0.getParent();
      node2.setSourceEncodedPosition(147);
      node1.getLineno();
      node0.isAnd();
      node0.isFor();
      Node node3 = Node.newNumber((double) (-872), 38, 33);
      node3.getJSDocInfo();
      node0.isAssignAdd();
      node0.getBooleanProp(16);
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      String string0 = "String node not created with Node.newString";
      Node node0 = Node.newString(3, "String node not created with Node.newString", (-475), (-475));
      node0.isCall();
      InputId inputId0 = new InputId("String node not created with Node.newString");
      Node node1 = new Node(32, node0, node0, node0, node0, 3657, 29);
      Node node2 = node1.cloneTree();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node3 = node2.setJSDocInfo(jSDocInfo0);
      node2.setCharno(12);
      Node node4 = new Node(57);
      node4.isObjectLit();
      node1.isGetterDef();
      node0.isFunction();
      node0.isFromExterns();
      node1.isVarArgs();
      Node node5 = new Node(49);
      Node node6 = new Node(57, node0, node5, node0, 1, 56);
      node3.setString(string0);
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      Node node0 = new Node(125);
      node0.removeChildAfter((Node) null);
      int int0 = Node.IS_NAMESPACE;
      // Undeclared exception!
      try { 
        node0.isInc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      Node node0 = Node.newString("in%R=ec$", 43, 43);
      Node node1 = new Node(43, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setLicense("in%R=ec$");
      Node node2 = node1.useSourceInfoFrom(node0);
      node0.isNoSideEffectsCall();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node2.getStaticSourceFile();
      node2.isOr();
      node2.isTrue();
      node1.useSourceInfoFromForTree(node2);
      node0.isAnd();
  }
}
