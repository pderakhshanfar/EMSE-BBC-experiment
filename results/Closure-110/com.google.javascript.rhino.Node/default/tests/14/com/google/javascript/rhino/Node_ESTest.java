/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 31 22:36:07 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import com.google.javascript.rhino.jstype.TemplatizedType;
import com.google.javascript.rhino.jstype.UnionType;
import java.io.File;
import java.io.PrintWriter;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[5];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor((JSTypeRegistry) null);
      modificationVisitor0.caseObjectType((ObjectType) null);
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) null, "Unknown class name");
      jSTypeArray0[0] = jSType0;
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 0, (-1815), 0);
      nodeArray0[0] = node0;
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      nodeArray0[1] = node1;
      Node node2 = Node.newString(38, "Object#Element", 31, 29);
      nodeArray0[2] = node2;
      Node node3 = new Node(1, nodeArray0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node3);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, jSType0, jSTypeArray0[0], (JSType) functionType0, (JSType) functionType0, (JSType) templateType0);
      JSType jSType1 = jSTypeRegistry0.createFunctionType((ObjectType) null, (JSType) null, (List<JSType>) immutableList0);
      jSTypeArray0[1] = jSType1;
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      ObjectType objectType0 = ObjectType.cast(jSType1);
      TemplateType templateType1 = JSType.toMaybeTemplateType((JSType) templateType0);
      TemplateType templateType2 = templateType0.toMaybeTemplateType();
      ImmutableList<TemplateType> immutableList1 = ImmutableList.of(templateType1, templateType2, templateType2, templateType0, templateType0, templateType0);
      FunctionType functionType1 = jSTypeRegistry0.createConstructorType("Not declared as a constructor", node0, node4, (JSType) objectType0, immutableList1);
      JSType jSType2 = jSTypeRegistry0.createOptionalNullableType(functionType1);
      jSTypeArray0[2] = jSType2;
      JSTypeNative jSTypeNative0 = JSTypeNative.ALL_TYPE;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = new Node(2472);
      node0.isParamList();
      node0.putIntProp(2876, 2472);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newString(117, "i5ZQk");
      node0.wasEmptyNode();
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) null);
      // Undeclared exception!
      try { 
        node0.getLineno();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newString("%!N");
      node0.isWhile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.newNumber(0.0, 152, 126);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node((-289), (-289), 3618);
      Node node1 = new Node(30, nodeArray0);
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1705), (-1705));
      node0.type = 37;
      node0.wasEmptyNode();
      node0.isHook();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      node0.isOptionalArg();
      node0.addChildAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-528), (-528), (-528));
      node0.getJSDocInfo();
      node0.isVarArgs();
      node0.isNE();
      Node node1 = Node.newNumber((double) 38);
      node1.setSideEffectFlags((-528));
      // Undeclared exception!
      try { 
        node0.getSourceFileName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node.newString(2421, "9Z\"LjBUEZOMCkJ;", 2421, 2421);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = new Node(2137, 2137, 2137);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node[] nodeArray0 = new Node[8];
      Node node0 = new Node((-289), (-289), (-289));
      nodeArray0[0] = node0;
      node0.addChildToFront(node0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = new Node(12, 0, 0);
      node0.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = Node.newString(22, "");
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newString(421, "CharMatcher.ASCII");
      Node.newString("CharMatcher.ASCII");
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node[] nodeArray0 = new Node[16];
      Node node0 = new Node((-282), (-282), 3596);
      nodeArray0[0] = node0;
      Node node1 = new Node((-282), nodeArray0);
      node1.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 421;
      Node node0 = Node.newString(421, "CharMatcher.ASCII");
      Node node1 = new Node(421, node0, node0, 4, 30);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node2 = new Node(48, nodeArray0);
      SimpleErrorReporter simpleErrorReporter0 = null;
      try {
        simpleErrorReporter0 = new SimpleErrorReporter();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = Node.newNumber((-1409.6526357045893));
      Node node1 = new Node(0, node0, node0, node0);
      Node node2 = node0.srcref(node1);
      node1.setChangeTime(54);
      node2.getProp(117);
      node1.type = 4;
      node1.isOnlyModifiesArgumentsCall();
      node1.setCharno(0);
      node1.isIf();
      node2.isOnlyModifiesArgumentsCall();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node3 = new Node(1, nodeArray0);
      node0.isSetterDef();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node((-2071), node0, node0, node0);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      Node node4 = Node.newNumber((double) 15, 366, (-113));
      node3.getJSDocInfo();
      node3.getStaticSourceFile();
      node3.setStaticSourceFile((StaticSourceFile) null);
      Node[] nodeArray0 = new Node[0];
      Node node5 = new Node(40, nodeArray0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSType.toMaybeTemplateType((JSType) null);
      JSType.toMaybeTemplatizedType((JSType) null);
      Node node6 = new Node(15, node4, node0, node2, node1, 536870912, 37);
      Node node7 = new Node(node1.SIDE_EFFECT_FLAGS, node2, node6, node2);
      node1.isComma();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = Node.newString(125, "Dd!@H", 1977, (-1257));
      Node node1 = new Node(125, node0, node0, 38, 148);
      Node node2 = new Node(3310, (Node[]) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
      JSType jSType0 = null;
      JSType.toMaybeTemplateType(jSType0);
      JSType.toMaybeTemplatizedType(jSType0);
      Node node3 = null;
      try {
        node3 = new Node(node0.REFLECTED_OBJECT, node0, node2, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newNumber(0.0, (-519), (-519));
      node0.getJSDocInfo();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.addSuppression("~/&''8UYQFmJ!{Q");
      node0.isGetElem();
      node0.isAnd();
      node0.isGetElem();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node((-301), (-301), (-301));
      nodeArray0[0] = node0;
      Node node1 = new Node((-301), nodeArray0);
      node1.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1705), (-1705));
      node0.type = 37;
      node0.wasEmptyNode();
      node0.isHook();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      Node node1 = new Node(55, nodeArray0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
      JSType jSType0 = null;
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newString((-1041), "string", (-1041), (-293));
      Node node1 = new Node(0, node0);
      node1.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node.mergeLineCharNo(56, 56);
      Node node0 = Node.newString("");
      Node node1 = new Node(229432, node0);
      node1.isAssign();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 24;
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getAssociatedNode();
      Node node0 = new Node(116, (Node) null, (Node) null, (Node) null, (Node) null, 4, 8);
      jSDocInfo0.setStruct();
      String string0 = null;
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = new Node(113);
      Node node1 = new Node(116, node0, node0, node0, node0, 15, 113);
      node1.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = new Node(444, (Node) null, (Node) null, (Node) null, (Node) null, 444, 444);
      String string0 = "*m0]W1:4*pO";
      // Undeclared exception!
      try { 
        node0.setSourceFileForTesting(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-289), (-289), (-289));
      Node node1 = new Node(31, node0, node0, node0);
      node1.isQualifiedName();
      node1.isDefaultCase();
      node1.setSideEffectFlags(2);
      // Undeclared exception!
      try { 
        node1.putProp(node0.OPT_ARG_NAME, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got DELPROP
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0));
      node0.setVarArgs(true);
      node0.isAdd();
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = Node.newNumber((double) 38);
      node0.removeProp(52);
      node1.isVoid();
      Node node2 = Node.newNumber(712.715);
      node2.isComma();
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-2615), (-2615));
      node0.isQualifiedName();
      node0.putIntProp((-2615), 1747);
      node0.getSideEffectFlags();
      node0.isVoid();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) null);
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.addChildrenToBack(node1);
      // Undeclared exception!
      try { 
        node0.isString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(1587, 1587, 1587);
      node0.removeFirstChild();
      Node node1 = Node.newNumber((double) 53);
      node0.removeChild(node1);
      int int0 = 4194304;
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(36);
      node0.wasEmptyNode();
      node0.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setThrows();
      node1.getAncestors();
      Node.newNumber((double) 54, 147, 35);
      ArrayList<Node> arrayList0 = new ArrayList<Node>();
      node1.removeFirstChild();
      node1.cloneTree();
      node1.isSwitch();
      node1.getIndexOfChild((Node) null);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newNumber(0.0);
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node((-301), (-301), (-301));
      nodeArray0[0] = node0;
      node0.replaceChild(node0, node0);
      // Undeclared exception!
      try { 
        nodeArray0[0].isFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newString("ClZ3}Ie}pm|!_B2>_Sn");
      node0.isFromExterns();
      node0.toString();
      node0.isCase();
      node0.children();
      Node node1 = new Node((-590), node0, node0);
      node0.removeChild(node1);
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>(0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      Node node1 = Node.newString(54, "Object#Key");
      Node node2 = new Node(0, node0, node1, node1, 791, 1);
      Node node3 = node0.copyInformationFrom(node2);
      node0.getJSDocInfo();
      node0.setSourceFileForTesting("Object#Key");
      JSType[] jSTypeArray0 = new JSType[0];
      SimpleErrorReporter.getMessage0("");
      node1.copyInformationFromForTree(node3);
      int int0 = 218;
      node1.toStringTree();
      // Undeclared exception!
      try { 
        simpleErrorReporter0.warning(jSTypeRegistry0.OBJECT_INDEX_TEMPLATE, jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE, node2.IS_DISPATCHER, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property 
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = node0.cloneTree();
      node0.copyInformationFromForTree(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node1.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      Node node1 = new Node(101, node0, node0, node0);
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newString("Ddbx@z");
      node0.isHook();
      Node node1 = Node.newNumber((double) 4);
      node1.setSourceFileForTesting("Ddbx@z");
      Node node2 = new Node(43, node0, node1, node0, node0);
      node0.isContinue();
      node0.isIn();
      node2.getJSType();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newString(" : ");
      node0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isWhile();
      node0.putProp((-95), "Dd!@H");
      node0.setString("Dd!@H");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = new Node((-289), (-289), (-289));
      Node node1 = new Node(16, node0, node0, node0, 56, 2);
      node0.addChildAfter(node1, node1);
      // Undeclared exception!
      try { 
        node1.isAssign();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = node0.getLastSibling();
      Node.newString("Object#Element");
      Node node2 = Node.newString("Object#Key");
      Node node3 = new Node(53, node1, node0, node2, 46, (-166));
      Node node4 = new Node(35, node1, node3, node1);
      node1.isComma();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newNumber(0.0, 152, 152);
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node0 = Node.newNumber(322.096595304, (-1022), (-1022));
      node0.getProp(2166);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.newNumber(0.0);
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newNumber((-184.0), 593, 15);
      node0.isDelProp();
      node0.setLineno(2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node(55, node0, node0, node0);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      node3.isName();
      node1.addChildrenToFront(node2);
      node1.toStringTree();
      // Undeclared exception!
      try { 
        node2.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 55
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newNumber((-1409.6526357045893));
      Node node1 = new Node(0, node0, node0, node0);
      Node node2 = node0.srcref(node1);
      node1.setChangeTime(54);
      node2.getProp(117);
      node1.type = 4;
      node1.isOnlyModifiesArgumentsCall();
      node1.setCharno(0);
      node1.isIf();
      node0.addChildToFront(node2);
      node2.getExistingIntProp(node1.LAST_PROP);
      node1.isWhile();
      node0.getJSType();
      // Undeclared exception!
      try { 
        node1.addChildAfter(node0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isWhile();
      Node node1 = Node.newString(57, "Dd!@H", 49, 29);
      node1.setOptionalArg(false);
      node1.isOnlyModifiesArgumentsCall();
      node1.setString("Dd!@H");
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = new Node(44, 44, 44);
      Node node1 = new Node(32, node0, node0, 49, 12);
      Node node2 = Node.newString("| oVJe{[r!@2AN`4!3", 4095, 12);
      node2.setChangeTime(51);
      node0.isIn();
      node0.getStaticSourceFile();
      node2.setStaticSourceFile((StaticSourceFile) null);
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getLineno();
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isWhile();
      node0.isCatch();
      node0.getQualifiedName();
      node0.isCall();
      Node node1 = new Node(54, node0, node0, node0, node0);
      node0.addChildrenToBack(node1);
      node0.isCast();
      node1.getJSType();
      node1.addChildToFront(node0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 443, 443);
      node0.isIf();
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(49, node0, 48, 40);
      node1.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newNumber((double) 4);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|QkXPG:OLk");
      Node node1 = new Node((-2071), node0, node0, node0);
      Node node2 = new Node(50, node1);
      Node node3 = new Node(30, node2, node2, node0);
      int int0 = 366;
      int int1 = (-113);
      Node.newNumber((double) node0.NO_SIDE_EFFECTS, int0, int1);
      JSDocInfo jSDocInfo0 = null;
      try {
        jSDocInfo0 = new JSDocInfo();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newNumber((double) 36);
      Node node2 = new Node(12, node0, node1, node1);
      Node node3 = node0.srcref(node2);
      node2.setChangeTime((-2266));
      node3.getProp(4);
      node2.setCharno(29);
      node2.addChildToFront(node3);
      node3.getExistingIntProp(node2.MAX_COLUMN_NUMBER);
      node2.isWhile();
      // Undeclared exception!
      try { 
        node3.getJSType();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node((-289), (-289), (-289));
      nodeArray0[0] = node0;
      node0.addChildToFront(node0);
      node0.isWhile();
      node0.getJSType();
      node0.addChildAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newString("YDtL/|O.");
      Node node1 = new Node(30, node0, node0, node0);
      Node node2 = new Node(4229, node1);
      Node node3 = new Node(0, node2, 46, 39);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newNumber(956.6112379334);
      Node node1 = new Node(42, node0, (-582), 39);
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newNumber(484.3641765801447, 0, 0);
      Node node1 = new Node(4, node0, node0, node0);
      node0.removeChildAfter(node1);
      boolean boolean0 = false;
      JSDocInfo jSDocInfo0 = new JSDocInfo(boolean0);
      // Undeclared exception!
      try { 
        node0.children();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(1, node0, node0, node0);
      node0.removeChildAfter(node1);
      String string0 = "odcMI`2(rUnc";
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = node0.getLastSibling();
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node3 = Node.newNumber((double) 51, 8, 53);
      Node node4 = new Node((-1888), node1);
      Node node5 = node4.removeChildAfter(node2);
      int int0 = (-1944);
      int int1 = 3054;
      Node node6 = null;
      try {
        node6 = new Node(int0, node5, int1, node3.SIDE_EFFECTS_ALL);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      int int0 = (-69);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = "NUMBER_STRING_BOOLEAN";
      Node node0 = null;
      Node node1 = new Node(0, (Node) null, (Node) null, 0, 0);
      JSType jSType0 = null;
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node1, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      // Undeclared exception!
      try { 
        enumType1.getElementsType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 443;
      Node node0 = null;
      Node node1 = new Node(443, (Node) null, (Node) null, (-519), (-519));
      int int1 = 63;
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node((-289), (-289), 3618);
      nodeArray0[0] = node0;
      Node node1 = new Node((-289), nodeArray0);
      node1.isSetterDef();
      node1.isHook();
      Node node2 = new Node(48, node0, node0, 572, 39);
      node1.replaceChild(node2, node0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node0 = Node.newNumber(0.0, (-519), (-519));
      node0.getJSDocInfo();
      node0.setSideEffectFlags(0);
      int int0 = 0;
      int int1 = 83;
      Node.mergeLineCharNo(int0, int1);
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      node0.setSideEffectFlags((-1090));
      node0.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-3806));
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY, (-3806), (-3806));
      node0.getJSDocInfo();
      node0.setSideEffectFlags(8);
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      node0.getSourceFileName();
      Node node1 = Node.newString(4095, (String) null, (-1057), (-862048943));
      node0.getIndexOfChild(node1);
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 1220;
      Node[] nodeArray0 = new Node[9];
      Node node0 = Node.newString(97, (String) null, 1220, 97);
      Node node1 = new Node(int0, node0, node0, node0, node0);
      nodeArray0[0] = node1;
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newString("&q");
      node0.getString();
      node0.setLength(0);
      node0.toString(false, false, true);
      node0.getStaticSourceFile();
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node0.setSideEffectFlags(node_SideEffectFlags3);
      node0.isBlock();
      node0.setQuotedString();
      node_SideEffectFlags2.clearSideEffectFlags();
      int int0 = (-429);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isCatch();
      Node node1 = new Node(54, node0, node0, node0, node0);
      node0.isCast();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node1.wasEmptyNode();
      node1.setString("9Z\"LjBUEZOMCkJ;");
      node0.isAssign();
      // Undeclared exception!
      try { 
        node1.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newString("n>%bJ_]>M", 1014, 1014);
      node0.isLabel();
      node0.mayMutateArguments();
      node0.toString(false, false, false);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newString("unexpected prop id ");
      node0.getString();
      node0.toString(true, false, false);
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node0.isAnd();
      node0.isGetElem();
      node0.mayMutateArguments();
      Node node1 = new Node(98, node0, node0, node0, node0);
      node1.isContinue();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.getString();
      Node node1 = null;
      try {
        node1 = new Node(node0.IS_NAMESPACE, node0, node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 1.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = new Node(112, (-850), (-2606));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      node0.setSideEffectFlags(node_SideEffectFlags0);
      Node node1 = new Node(node0.FLAG_GLOBAL_STATE_UNMODIFIED, node0, node0, node0);
      node0.replaceChild(node1, node1);
      // Undeclared exception!
      try { 
        node0.hasMoreThanOneChild();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got DEFAULT_CASE
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newString(689, "originalname", 689, 114);
      node0.toString();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = Node.newNumber((double) 38);
      node1.setLength(1024);
      node0.removeProp(52);
      node0.isIn();
      Node node2 = Node.newNumber(712.715);
      node2.isComma();
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isWhile();
      node0.isCatch();
      node0.getQualifiedName();
      node0.isCall();
      node0.isBreak();
      node0.setVarArgs(false);
      node0.isDec();
      Node node1 = Node.newString(" c@", 32, 43);
      node1.putBooleanProp(55, false);
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      Node node1 = Node.newNumber((double) 2, 38, 1633);
      Node node2 = new Node(51, node0, node1, node1, 16, 119);
      node1.isNumber();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node3 = Node.newNumber(Double.POSITIVE_INFINITY, (-748), 126);
      Node node4 = new Node(1, node3);
      Node node5 = node3.removeChildAfter(node4);
      node5.isAdd();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newNumber(0.0, 152, 152);
      node0.toStringTree();
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newString(0, "this", 0, 1431);
      Node node1 = node0.cloneNode();
      Node node2 = new Node(0, node0, node0, node0, node0, 37, 53);
      node2.isOnlyModifiesThisCall();
      node1.isVarArgs();
      Node.newNumber((-2771.6), 32, 4);
      node2.isWhile();
      node1.isCatch();
      node0.getQualifiedName();
      node1.isCall();
      node2.isBreak();
      node2.setVarArgs(true);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(369, node0, node0, node0, node0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.getQualifiedName();
      node0.isCall();
      node0.isParamList();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isCatch();
      node0.getJsDocBuilderForNode();
      node0.getQualifiedName();
      node0.isCall();
      node0.isParamList();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = Node.newString("%N");
      node0.isIn();
      node0.isString();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = new Node(2472);
      node0.isBreak();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = new Node((-801), (Node[]) null, (-2036), 825);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "Zqp!}L";
      Node node0 = Node.newString((-536870912), "Zqp!}L");
      Node node1 = new Node(3436, node0, node0, node0, node0, 38, 51);
      boolean boolean0 = true;
      node0.putBooleanProp(8, true);
      node1.isEquivalentToTyped(node0);
      node1.addChildrenAfter(node0, node0);
      int int0 = (-2673);
      // Undeclared exception!
      try { 
        node1.setType(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-99), nodeArray0);
      Node node1 = new Node(1706, node0, node0, node0, 1918, 1);
      node0.isEquivalentToTyped(node1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newNumber((double) 0, (-3944), 50);
      node0.toStringTree();
      node0.setSourceEncodedPosition((-3944));
      node0.isDelProp();
      Node node1 = new Node(2, node0, node0, node0, node0);
      node0.toString(false, true, true);
      node0.addChildrenAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isWhile();
      node0.isCatch();
      node0.getQualifiedName();
      node0.isCall();
      Node node1 = new Node(54, node0, node0, node0);
      node0.addChildrenToBack(node1);
      node0.isBreak();
      node0.setVarArgs(false);
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = new Node((-6098));
      Node node1 = new Node(36, node0, node0, node0, node0, 2, 1);
      node1.isWhile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(37);
      node0.isArrayLit();
      node0.isDebugger();
      node1.isScript();
      node0.addChildrenAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newString("DQFmmHNsq0O3=R", 0, 0);
      Node node1 = new Node(0, node0, node0, node0);
      node1.isComma();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newString("", 313, 313);
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newString(2097152, "com.google.javascript.rhino.Node$ObjectPropListItem");
      Node node1 = new Node(54, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node3 = new Node(46, node0, node1, node2, node0, 57, 1287);
      node0.addChildBefore(node3, node3);
      int int0 = 430;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        node0.setOptionalArg(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = new Node(46, node0, node0);
      node1.setSideEffectFlags(54);
      node1.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node(44, 44, 44);
      Node node1 = new Node(32, node0, node0, 49, 12);
      Node node2 = Node.newString("| oVJe{[r!@2AN`4!3", 4095, 12);
      node2.setChangeTime(51);
      Node node3 = new Node(2, node0, node0, node0, node0);
      node3.isContinue();
      node0.isComma();
      // Undeclared exception!
      try { 
        node0.isVar();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newNumber((double) 43);
      Node node1 = new Node(43, node0, node0, node0);
      Node node2 = new Node(29, node1, node0);
      Node[] nodeArray0 = new Node[4];
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 44;
      int int1 = 4096;
      Node node0 = new Node(44, 44, 4096);
      Node node1 = new Node(32, node0, node0, 49, 12);
      node0.setChangeTime(51);
      Node node2 = null;
      try {
        node2 = new Node(57, node1, node1, node0, node1, 29, 57);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = (-1565);
      Node node0 = new Node((-1565), 918, 918);
      Node node1 = new Node((-1565), node0, node0);
      node0.setWasEmptyNode(false);
      node1.isEquivalentToTyped((Node) null);
      Node node2 = new Node(int0, node1, node1, node0, node0);
      node2.addChildAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newString(0, "");
      Node node1 = new Node(1262, node0, node0, node0, 0, 56);
      Node node2 = Node.newString("");
      Node node3 = new Node(0, node1);
      Node node4 = node1.getLastSibling();
      node4.checkTreeTypeAwareEqualsImpl(node1);
      node2.isFunction();
      node0.setVarArgs(false);
      node4.copyInformationFromForTree(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.setThrows();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newNumber(0.0);
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = new Node((-6098));
      Node node1 = new Node(36, node0, node0, node0, node0, 2, 1);
      node1.isWhile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.isDelProp();
      node1.getProp(8);
      Node node2 = node1.copyInformationFromForTree(node0);
      node0.isSetterDef();
      node2.isThis();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = new Node(53, 590, 53);
      node0.setSourceEncodedPositionForTree((-117));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1683), (-1683), (-1683));
      node0.wasEmptyNode();
      Node node1 = Node.newNumber((double) 40, 31, (-1683));
      node1.addChildrenToFront(node0);
      node1.toStringTree();
      node0.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = new Node((-1977));
      node0.getAncestors();
      Node node1 = new Node((-2373), 52, (-851));
      Node node2 = node0.copyInformationFrom(node1);
      node1.getChildCount();
      node2.removeProp(46);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node((-5), (-6098), (-5));
      Node node1 = new Node(36, node0, node0, node0, node0, 2, 1);
      node1.isEquivalentToTyped(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node2 = new Node((-306), node1, node1, node1, node1);
      node1.isWhile();
      node1.getJSType();
      node0.isInc();
      node2.toStringTree();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(46, nodeArray0);
      node0.isWhile();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.isTry();
      node0.isIn();
      node0.isOnlyModifiesArgumentsCall();
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isCatch();
      node0.getQualifiedName();
      node0.isEquivalentToShallow(node0);
      node0.isBreak();
      node0.setVarArgs(true);
      node0.isVar();
      node0.isNull();
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = node0.getLastSibling();
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isEquivalentToTyped(node2);
      node2.isGetterDef();
      node1.isSetterDef();
      node2.isAdd();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = new Node(0, (-6098), 0);
      Node node1 = new Node(31, node0, node0, node0, node0);
      node0.getJSType();
      node1.isInc();
      node1.toStringTree();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newString(0, "");
      Node node1 = new Node(1262, node0, node0, node0, 0, 56);
      Node node2 = Node.newString("");
      Node node3 = new Node(0, node1);
      Node node4 = node1.getLastSibling();
      node4.checkTreeTypeAwareEqualsImpl(node1);
      node2.isFunction();
      node0.setVarArgs(false);
      node4.copyInformationFromForTree(node1);
      node1.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isCatch();
      node0.isOnlyModifiesArgumentsCall();
      node0.getQualifiedName();
      node0.isCall();
      node0.isBreak();
      node0.setVarArgs(false);
      node0.isEquivalentTo(node0);
      Node.newString(" c@", 32, 43);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node((-2877), node0, node0, node0, 4095, 4);
      node1.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newNumber((double) 47);
      node1.checkTreeEqualsImpl(node0);
      Node node2 = node0.cloneTree();
      node0.getIntProp((-1042));
      node2.isAdd();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1705), (-1705));
      node0.type = 37;
      node0.wasEmptyNode();
      node0.isHook();
      Node node1 = Node.newString(8, "", 4095, 0);
      node1.addChildToBack(node0);
      Node node2 = node1.removeFirstChild();
      node2.mayMutateArguments();
      node1.checkTreeEquals(node2);
      int int0 = 562;
      Node node3 = Node.newNumber((double) node1.VAR_ARGS_NAME, node1.VAR_ARGS_NAME, int0);
      Node node4 = node2.srcref(node3);
      node4.isVarArgs();
      // Undeclared exception!
      try { 
        node3.setLength(node1.EMPTY_BLOCK);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 8
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = Node.newString(470, "", (-4080), 119);
      node1.mayMutateGlobalStateOrThrow();
      node1.checkTreeEquals(node0);
      node1.isExprResult();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = new Node(154);
      node0.wasEmptyNode();
      node0.isHook();
      Node node1 = new Node(153, node0);
      node0.isGetElem();
      Node node2 = Node.newNumber((double) 52, 46, 1);
      ArrayList<Node> arrayList0 = new ArrayList<Node>();
      Node node3 = node1.removeFirstChild();
      node2.cloneTree();
      node2.getIndexOfChild(node3);
      node2.isDebugger();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-3239), 443, (-331));
      node0.toStringTree();
      node0.isBlock();
      node0.isAssign();
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-3254), 443, 4096);
      node0.toStringTree();
      node0.isBlock();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = new Node((-6098));
      Node node1 = new Node(36, node0, node0, node0, node0, 2, 1);
      node1.isWhile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isAssign();
      node0.isCatch();
      node0.getBooleanProp(53);
      node0.addChildToBack(node1);
      node1.removeChild(node0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = Node.newNumber(537.6693523717262);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getAssociatedNode();
      node0.getChildBefore((Node) null);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = Node.newString(0, "this", 0, 1431);
      Node node1 = node0.cloneNode();
      Node node2 = new Node(0, node0, node0, node0, node0, 37, 53);
      node2.isOnlyModifiesThisCall();
      node1.isVarArgs();
      node1.addChildToBack(node0);
      double double0 = (-2771.6);
      Node.newNumber(double0, node0.INCRDECR_PROP, node0.FLAG_ARGUMENTS_UNMODIFIED);
      int int0 = 1377;
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1683), (-1683));
      node0.wasEmptyNode();
      node0.isHook();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      node0.isIf();
      node0.isWhile();
      node0.getInputId();
      node0.hasMoreThanOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setAllFlags();
      node0.getJSDocInfo();
      node0.mayMutateGlobalStateOrThrow();
      node0.checkTreeEquals(node0);
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0), 443, (-571));
      Node node1 = new Node(90, node0, node0, node0, 37, 1);
      node0.isIf();
      node0.isWhile();
      node0.getInputId();
      node1.hasMoreThanOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setAllFlags();
      node0.getJSDocInfo();
      node1.mayMutateGlobalStateOrThrow();
      node1.checkTreeEquals(node0);
      node1.isExprResult();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newNumber((double) 4426, 0, 443);
      Node node1 = new Node(4426, node0, node0, node0, (-3573), 4095);
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.isIf();
      node1.isWhile();
      node1.getInputId();
      node0.hasMoreThanOneChild();
      node1.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags5.setMutatesGlobalState();
      node0.isArrayLit();
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isWhile();
      node0.isCatch();
      node0.getQualifiedName();
      node0.isCall();
      node0.isArrayLit();
      node0.hasChildren();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0), 443, (-571));
      Node node1 = new Node(90, node0, node0, node0, 37, 1);
      node0.isIf();
      node0.isWhile();
      node0.getInputId();
      node1.hasMoreThanOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node1.isArrayLit();
      node1.isDebugger();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newNumber((-1683.0), (-870), 2256);
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(0);
      Node node2 = new Node(32, node1, node1, node1, node1, (-166), 0);
      Node.newNumber((double) 31, 50, 52);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      node2.setIsSyntheticBlock(true);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      node2.setSideEffectFlags(node_SideEffectFlags1);
      node2.setSideEffectFlags(node_SideEffectFlags0);
      node0.removeChild(node2);
      node0.getSourceOffset();
      node0.getJSDocInfo();
      node_SideEffectFlags0.setMutatesThis();
      // Undeclared exception!
      try { 
        node1.isAnd();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got TYPEOF
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newNumber((double) 47);
      node1.setIsSyntheticBlock(false);
      Node node2 = node0.cloneTree();
      node0.getIntProp((-1042));
      node2.isAdd();
      Node.newNumber((-1159.15669011897), 1599, 55);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 2472;
      int int1 = 101;
      Node[] nodeArray0 = new Node[2];
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node0 = jSDocInfo0.getAssociatedNode();
      nodeArray0[0] = null;
      Node node1 = new Node(1519, node0, node0);
      nodeArray0[1] = node1;
      Node node2 = null;
      try {
        node2 = new Node(int1, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = Node.newString(421, "CharMatcher.ASCII");
      Node node1 = new Node(421, node0, node0, 4, 30);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node2 = new Node(48, nodeArray0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      // Undeclared exception!
      try { 
        nodeArray0[0].addChildBefore(nodeArray0[1], node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node((-289), (-289), 3618);
      nodeArray0[0] = node0;
      node0.addChildToFront(node0);
      Node node1 = new Node((-289), nodeArray0);
      node1.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newString(13, "a!]", 4426, 97);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      InputId inputId0 = new InputId("6 o8X0$2");
      node0.isFalse();
      node0.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node0 = Node.newNumber(1.0);
      Node node1 = new Node(112, node0, 0, 55);
      node1.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-4266), (-4266));
      Node node1 = new Node(0, 2036, 748);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node node3 = Node.newString("");
      Object object0 = new Object();
      node0.putProp(2166, object0);
      node0.putProp(53, ">/\"i*[");
      node0.setWasEmptyNode(false);
      node0.isOnlyModifiesThisCall();
      Node node4 = node2.srcrefTree(node1);
      node0.setVarArgs(false);
      node2.isEquivalentTo(node1);
      node3.isAssignAdd();
      node4.isFalse();
      node2.isInstanceOf();
      node3.toStringTree();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(0, node0, 46, (-61));
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isTrue();
      Node.newString(29, "com.google.common.collect.Iterators$6");
      node0.isSyntheticBlock();
      Node.newString("com.google.common.collect.Iterators$6", 39, 1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newNumber(0.0, 0, 0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.isAnd();
      Node node1 = Node.newNumber((-1.0));
      node1.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0));
      node0.setVarArgs(true);
      node0.isAdd();
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = Node.newString(63, "G3tH r(", 63, 63);
      Node node1 = Node.newNumber((-1683.0), 52, 40);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.addSuppression("G3tH r(");
      Node.mergeLineCharNo(91, (-432));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = Node.newString(878, "C%PXG}1");
      Node node1 = new Node(3472, node0, node0, node0, 918, 3592);
      Node node2 = Node.newString("");
      Node node3 = new Node(39, node2);
      Node node4 = node1.getLastSibling();
      node2.checkTreeTypeAwareEqualsImpl(node3);
      node2.isFunction();
      node1.setVarArgs(false);
      Node node5 = Node.newString(21, ".p~", 41, 708);
      node5.copyInformationFromForTree(node4);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setThrows();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newNumber(0.0);
      node0.getIntProp(1685);
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = Node.newString(0, "this", 0, 1431);
      Node node1 = node0.cloneNode();
      Node node2 = new Node(0, node0, node0, node0, node0, 37, 53);
      Node.mergeLineCharNo(1709, 43);
      node1.isEquivalentToTyped(node2);
      node1.putIntProp(1, 113);
      Node node3 = Node.newString(13, "");
      node1.removeChild(node3);
      node3.isCatch();
      node2.isString();
      node1.getType();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setMutatesThis();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = new Node(44, 44, 4096);
      Node node1 = new Node(32, node0, node0, 49, 12);
      node0.setChangeTime(51);
      Node node2 = node1.cloneNode();
      node0.setLineno(44);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node0.isOr();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$AncestorIterable");
      node0.getChangeTime();
      node0.getSideEffectFlags();
      Node[] nodeArray0 = new Node[7];
      Node node1 = new Node(1, node0, 3159, 29);
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      node0.getInputId();
      nodeArray0[3] = node0;
      Node node2 = new Node(40, nodeArray0);
      nodeArray0[4] = node2;
      nodeArray0[5] = node0;
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1683), (-1683));
      node0.wasEmptyNode();
      Node node1 = Node.newNumber(497.7449186448, 57, 30);
      node0.getChangeTime();
      node1.addChildrenToFront(node0);
      node0.getJSType();
      Node node2 = new Node(15);
      node0.addChildAfter(node2, node1);
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(153, node0, node0);
      node1.isDefaultCase();
      node1.checkTreeEquals(node0);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      Node node3 = node1.copyInformationFrom(node0);
      Node node4 = node3.getNext();
      node2.removeChildren();
      node0.isReturn();
      node3.useSourceInfoIfMissingFrom((Node) null);
      node0.replaceChild(node2, node4);
      // Undeclared exception!
      try { 
        node0.isObjectLit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 0;
      Node node0 = Node.newString("DQFmmHNsq0O3=R", 0, 0);
      node0.replaceChild((Node) null, (Node) null);
      Node node1 = new Node(int0, node0, node0, node0);
      StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
      // Undeclared exception!
      try { 
        node1.setStaticSourceFile(staticSourceFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newString(13, "a!]", 4426, 97);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      Node node1 = null;
      node0.replaceChild((Node) null, (Node) null);
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = new Node((-216), (Node) null, (Node) null, (Node) null);
      int int0 = 41;
      // Undeclared exception!
      try { 
        Node.mergeLineCharNo(int0, node0.QUOTED_PROP);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newString(421, "CharMatcher.ASCII");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType.toMaybeTemplateType((JSType) null);
      node0.getAncestors();
      JSType.toMaybeTemplatizedType((JSType) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null);
      jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = Node.newNumber((-2454.79), 81, 35);
      node0.getAncestor(15);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = new Node(97);
      node0.isGetProp();
      node0.setString((String) null);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node.extractLineno(3092);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.isAnd();
      node0.isGetElem();
      Node node1 = new Node(4, node0, node0, (Node) null, (Node) null);
      node0.isDec();
      // Undeclared exception!
      try { 
        node0.isIn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node(44, 44, 4096);
      Node node1 = Node.newString(4096, (String) null, 2, 53);
      node0.useSourceInfoFrom(node1);
      Node node2 = new Node(node0.INCRDECR_PROP, node0, node0, node0.DIRECT_EVAL, node0.COLUMN_BITS);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = new Node(44, 44, 4072);
      Node node1 = new Node(39, node0);
      node0.useSourceInfoFrom(node1);
      Node node2 = new Node(32, node0, node0, 49, 12);
      node0.cloneNode();
      node0.replaceChildAfter(node2, node2);
      // Undeclared exception!
      try { 
        node0.mayMutateGlobalStateOrThrow();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = new Node(4096, 8287, 8287);
      Node node1 = Node.newString(34, "[*&", 4095, 2788);
      Node node2 = node0.useSourceInfoFrom(node1);
      Node node3 = new Node(40, node2, node2, 51, 1);
      String string0 = "BmdM";
      Node node4 = Node.newString("BmdM", 16, 125);
      node1.replaceChildAfter(node0, node4);
      node3.mayMutateGlobalStateOrThrow();
      node4.isLabel();
      node3.getDirectives();
      node3.addSuppression(string0);
      node4.getAncestors();
      // Undeclared exception!
      try { 
        node3.getLastSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = new Node(44);
      node0.replaceChildAfter(node0, node0);
      // Undeclared exception!
      try { 
        node0.mayMutateGlobalStateOrThrow();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = Node.newString(13, "a!]", 4426, 97);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      Node node1 = Node.newString(47, "\n\nSubtree2: ");
      node1.isWhile();
      node1.getJSType();
      Node node2 = new Node(12, node0, node0, node0, node0, 1574, 160);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node2.addChildAfter(node3, node0);
      node2.replaceChildAfter(node3, node0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newString(0, "this", 0, 1431);
      Node node1 = node0.cloneNode();
      Node node2 = new Node(0, node0, node0, node0, node0, 37, 53);
      node2.isOnlyModifiesThisCall();
      node1.isVarArgs();
      node2.isWhile();
      node0.getQualifiedName();
      node2.isBreak();
      node2.setVarArgs(true);
      node1.hasChild(node0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = new Node(0);
      node0.wasEmptyNode();
      Node node1 = new Node((-704), node0);
      node0.isHook();
      node1.addSuppression("s[{xQ'IE");
      node0.isGetElem();
      Node node2 = Node.newString("s[{xQ'IE");
      node2.hasChild(node1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node((-289), (-289), (-289));
      nodeArray0[0] = node0;
      node0.addChildToFront(node0);
      node0.isWhile();
      node0.isBreak();
      node0.setVarArgs(false);
      node0.hasChild(node0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = new Node(44);
      node0.mayMutateGlobalStateOrThrow();
      node0.isLabel();
      node0.getDirectives();
      node0.addSuppression("IsEqualTo(");
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = Node.newString("Ddbx@z");
      node0.isCatch();
      node0.isCast();
      Node node1 = Node.newNumber((double) 4);
      Node node2 = new Node(43, node0, node1, node0, node0);
      node0.isContinue();
      node0.isIn();
      node0.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = new Node(13, 13, 13);
      node0.isGetElem();
      node0.isAnd();
      node0.isGetterDef();
      node0.hasOneChild();
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = Node.newNumber(4312.273185976871, 2450, 2450);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newNumber((double) 443, 443, (-571));
      node0.isInc();
      Node.newNumber((double) 52, 46, 57);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = Node.newNumber((-1409.6526357045893));
      Node node1 = new Node(27, node0, node0, node0);
      Node node2 = node0.srcref(node1);
      node1.setChangeTime(54);
      Object object0 = new Object();
      node1.type = 2;
      node1.isOnlyModifiesArgumentsCall();
      node1.setCharno(0);
      node0.isLabelName();
      node0.addChildToFront(node2);
      node0.isNumber();
      node2.getExistingIntProp(node1.LAST_PROP);
      node1.isWhile();
      // Undeclared exception!
      try { 
        node0.getJSType();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newString(0, "", 0, 0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node0.isCase();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = Node.newString(421, "CharMatcher.ASCII");
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = Node.newString("CharMatcher.ASCII", 57, 50);
      node1.getAncestor(52);
      Node node2 = new Node(3520, (Node[]) null);
      node2.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = Node.newString("DQFmmHNsq0O3=R", 0, 0);
      Node node1 = null;
      node0.detachFromParent();
      node0.replaceChild(node1, node1);
      Node node2 = null;
      try {
        node2 = new Node(node0.COLUMN_MASK, node0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = new Node(1665, 1665, 1856);
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "Dd!\\@H";
      Node node0 = Node.newString("Dd!@H");
      node0.isIn();
      Node[] nodeArray0 = new Node[3];
      node0.wasEmptyNode();
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node1 = null;
      try {
        node1 = new Node(15, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags4.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags7.setThrows();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newNumber((double) 0, (-3944), 50);
      node0.toStringTree();
      node0.setSourceEncodedPosition((-3944));
      node0.isDelProp();
      Node.newString(12, "NUMBER 0.0\n", 36, (-1661));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.wasEmptyNode();
      node0.isLocalResultCall();
      node0.setSourceEncodedPosition(1073741823);
      node0.isVoid();
      node0.getLength();
      node0.getChildCount();
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newString(30, (String) null);
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node0 = Node.newString((-980), (String) null);
      Node node1 = new Node(node0.FLAG_NO_THROWS, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.isComma();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = Node.newNumber(1596.24064709);
      Node node1 = new Node(115, node0, node0, node0, node0, 0, (-1805));
      node1.clonePropsFrom(node0);
      node1.isFromExterns();
      node1.isNull();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = node0.getLastSibling();
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.getChildAtIndex(484);
      // Undeclared exception!
      try { 
        node1.isCast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(29, node0, 3588, (-1037));
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isEquivalentTo(node1, false, false, false);
      node0.isTrue();
      Node.newString(46, "");
      node2.isSyntheticBlock();
      Node.newString("com.google.javascript.rhino.Node$SideEffectFlags", 57, 46);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = node0.getChildAtIndex(100);
      node0.removeChildAfter(node1);
      // Undeclared exception!
      try { 
        node1.isDebugger();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>(1186);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) linkedHashSet0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.getJSDocInfo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setAllFlags();
      node0.isGetterDef();
      Node node1 = new Node(Integer.MIN_VALUE, node0, 48, 1);
      node1.isObjectLit();
      Node node2 = new Node(2877, node1, node1, (-2555), 12);
      node2.getChildAtIndex((-781));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newNumber((double) 4426, 0, 443);
      Node node1 = new Node(4426, node0, node0, node0, (-3573), 4095);
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.isIf();
      node1.isWhile();
      node1.getInputId();
      node0.hasMoreThanOneChild();
      node1.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      node1.getBooleanProp(30);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags5.setMutatesGlobalState();
      node0.isArrayLit();
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newNumber(0.0, (-519), (-519));
      node0.getJSDocInfo();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isGetElem();
      node0.isAnd();
      node0.isGetElem();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = new Node((-6098));
      Node node1 = new Node(36, node0, node0, node0, node0, 2, 1);
      node1.isWhile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.isDelProp();
      node0.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = Node.newString(0, "%");
      Node node1 = new Node((-3944), node0, node0, node0, 0, 56);
      Node node2 = Node.newString("%");
      Node node3 = new Node(0, node1);
      Node node4 = node1.getLastSibling();
      node4.checkTreeTypeAwareEqualsImpl(node1);
      node2.isFunction();
      node0.setVarArgs(false);
      node4.copyInformationFromForTree(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node1.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = Node.newString("%!N");
      node0.isIn();
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newNumber(0.0, (-519), (-519));
      node0.getJSDocInfo();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.addSuppression("~/&''8UYQFmJ!{Q");
      node0.isGetElem();
      node0.isAnd();
      node0.isGetElem();
      Node node1 = new Node(53, node0, node0, node0, node0);
      node1.isContinue();
      node1.isIn();
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
      nodeArray0[3] = node0;
      nodeArray0[4] = node1;
      nodeArray0[5] = node1;
      nodeArray0[6] = node0;
      nodeArray0[7] = node0;
      nodeArray0[8] = node0;
      Node node2 = new Node((-1334), nodeArray0);
      node1.addChildrenToBack(node2);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isDefaultCase();
      node0.checkTreeEquals(node0);
      Node node1 = new Node(51, node0, node0, node0, 0, 56);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Node node2 = node1.getChildBefore(node0);
      node0.getLineno();
      Node node3 = node0.copyInformationFromForTree(node0);
      node0.isTypeOf();
      node1.isFor();
      node1.addChildToBack(node0);
      int int0 = 38;
      Node node4 = new Node(node2.VAR_ARGS_NAME, node3, node0.NO_SIDE_EFFECTS, int0);
      Node node5 = null;
      try {
        node5 = new Node(node4.DIRECT_EVAL, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = Node.newString(0, "this", 0, 1431);
      Node node1 = node0.cloneNode();
      Node node2 = new Node(0, node0, node0, node0, node0, 37, 53);
      node2.isOnlyModifiesThisCall();
      node1.isVarArgs();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setMutatesGlobalState();
      node1.setDouble(1.0);
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setMutatesArguments();
      // Undeclared exception!
      try { 
        node_SideEffectFlags4.setMutatesGlobalState();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isCast();
      Node node1 = new Node(39, node0, 1, 16);
      node0.setDouble(0.0);
      node0.isArrayLit();
      // Undeclared exception!
      try { 
        node1.isDebugger();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING Dd!\\@H is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = Node.newString(0, "this", 0, 0);
      Node node1 = node0.cloneNode();
      node0.isOnlyModifiesThisCall();
      node1.isVarArgs();
      Node.newNumber((double) 2);
      node1.setDouble(42);
      node1.isAssign();
      // Undeclared exception!
      try { 
        node0.isInstanceOf();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1705));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newNumber(0.0, (-1705), 69);
      node0.toStringTree();
      node0.isDelProp();
      node0.getStaticSourceFile();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(2, nodeArray0, 4109, (-1527));
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
      node_NodeMismatch0.equals("NUMBER 0.0\n");
      node0.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newString(13, "a!]", 4426, 97);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      InputId inputId0 = new InputId("6 o8X0$2");
      node_NodeMismatch0.equals(inputId0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = Node.newString("%!N");
      node0.isAssign();
      node0.isIn();
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType.toMaybeTemplateType((JSType) null);
      JSType.toMaybeTemplatizedType((JSType) null);
      Node node0 = new Node(1);
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSType.toMaybeTemplateType((JSType) null);
      JSType.toMaybeTemplatizedType((JSType) null);
      Node node0 = Node.newString(0, "Unknown class name");
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = new Node(44, 44, 4096);
      Node node1 = new Node(32, node0, node0, 49, 12);
      node0.wasEmptyNode();
      Node node2 = Node.newString("| oVJe{[r!@2AN`4!3", 4095, 12);
      node2.setChangeTime(51);
      node0.getProp((-460));
      node1.isOnlyModifiesArgumentsCall();
      node2.setCharno(15);
      Node node3 = Node.newString(42, "| oVJe{[r!@2AN`4!3");
      node2.addChildBefore(node3, node3);
      node0.isIf();
      node0.addChildToFront(node1);
      node1.getExistingIntProp(node0.JSDOC_INFO_PROP);
      // Undeclared exception!
      try { 
        node0.isWhile();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isNot();
      node0.isCatch();
      node0.isIf();
      Node node1 = new Node((-1925), node0, node0, node0, node0);
      node1.isThis();
      node0.addChildBefore(node1, node1);
      Node node2 = new Node(node0.IS_DISPATCHER, node1);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newNumber(0.0, (-519), (-519));
      node0.getJSDocInfo();
      node0.getStaticSourceFile();
      node0.isIf();
      Node node1 = new Node(31, node0, node0, node0, node0);
      node1.isThis();
      node0.isWhile();
      node1.addChildBefore(node0, node0);
      Node node2 = new Node(node0.SIDE_EFFECT_FLAGS, node1);
      Node node3 = node2.removeChildAfter(node0);
      Node node4 = null;
      try {
        node4 = new Node(node0.MAX_COLUMN_NUMBER, node1, node3.NO_SIDE_EFFECTS, node3.STATIC_SOURCE_FILE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = new Node(0);
      Node.newNumber((double) 47);
      Node node1 = node0.cloneTree();
      node0.getIntProp((-1042));
      node1.isAdd();
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node0 = new Node(111, 147, 3618);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[1] = node0;
      node0.isSyntheticBlock();
      Node node1 = new Node(118, nodeArray0);
      nodeArray0[0].isSetterDef();
      node1.isOr();
      int int0 = 771;
      node1.getChildAtIndex(int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = new Node(280);
      Node node1 = new Node(38, node0, node0, node0, node0, 48, 2198);
      Node node2 = Node.newNumber((double) 0, 36, 55);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node2.isDec();
      Node node3 = new Node(3510, node0, node0, node1);
      node2.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2250);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node0 = Node.newNumber(1.0, 4565, 4565);
      node0.getJSDocInfo();
      node0.setSideEffectFlags(3088);
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      node0.setStaticSourceFile(staticSourceFile0);
      String string0 = ", ...";
      // Undeclared exception!
      try { 
        node0.addSuppression(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node((-2071), node0, node0, node0);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      node3.setChangeTime(1023);
      node2.getProp(117);
      node2.isOnlyModifiesArgumentsCall();
      node3.setCharno(105);
      node3.getStaticSourceFile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      node2.setChangeTime(47);
      jSTypeArray0[0] = jSType0;
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node4.isIf();
      jSTypeRegistry0.getObjectIndexKey();
      node4.addChildToFront(node0);
      int int0 = (-2498);
      node2.getExistingIntProp(int0);
      node1.isWhile();
      node2.getJSType();
      node4.addChildAfter(node3, node2);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node((-2071), node0, node0, node0);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      node3.setChangeTime(1023);
      Object object0 = new Object();
      node2.isOnlyModifiesArgumentsCall();
      node3.setCharno(105);
      node2.setChangeTime(47);
      node2.isAssignAdd();
      node3.isSetterDef();
      node3.isAdd();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newNumber(0.0, (-519), (-519));
      node0.getJSDocInfo();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.addSuppression("~/&''8UYQFmJ!{Q");
      node0.isGetElem();
      node0.isAnd();
      node0.isGetElem();
      Node node1 = new Node(53, node0, node0, node0, node0);
      node1.isContinue();
      node1.isIn();
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node1.isComma();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = Node.newNumber(1596.24064709);
      node0.wasEmptyNode();
      Node node1 = new Node(115, node0, node0, node0, node0, 0, (-1805));
      Node node2 = node1.clonePropsFrom(node0);
      node2.srcref(node0);
      node1.isFromExterns();
      node1.isNull();
      node0.setDouble(32);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node node0 = Node.newString(421, "CharMatcher.ASCII");
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = Node.newString("CharMatcher.ASCII", 57, 50);
      Node node2 = node1.srcrefTree(node0);
      node2.removeProp((-793));
      node1.getAncestor(52);
      Node node3 = new Node(3520, (Node[]) null);
      node3.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = Node.newNumber(3426.16665756, (-381), 1436);
      node0.wasEmptyNode();
      node0.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.isOr();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, 1612);
      Node node1 = new Node(130, 50, 2775);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node node3 = Node.newString("");
      Object object0 = new Object();
      node3.putProp(54, "");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("^3Q=;-`%", false);
      node3.putProp(43, simpleSourceFile0);
      node2.setWasEmptyNode(false);
      node1.isOnlyModifiesThisCall();
      node2.srcrefTree(node0);
      Node node4 = new Node(3407, node2, 4095, 49);
      node4.setVarArgs(true);
      node0.isEquivalentTo(node2);
      node0.isAssignAdd();
      node1.isFalse();
      node3.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-528), (-528), (-528));
      node0.getJSDocInfo();
      node0.isNE();
      Node node1 = Node.newNumber((double) 38);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = new Node((-2125), node0, node1);
      node2.isOr();
      node1.isCatch();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newNumber(0.0, (-519), (-519));
      node0.getJSDocInfo();
      node0.getStaticSourceFile();
      node0.isGetElem();
      node0.isAnd();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setAllFlags();
      node0.mayMutateGlobalStateOrThrow();
      node0.checkTreeEquals(node0);
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = Node.newString("e<5],UR\":MA");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      nodeArray0[7] = node0;
      nodeArray0[8] = node0;
      Node node1 = new Node(54, nodeArray0, (-1953), (-742));
      node0.addChildrenToFront(node1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = Node.newString(0, "this", 0, 1431);
      Node node1 = node0.cloneNode();
      Node node2 = new Node(0, node0, node0, node0, node0, 37, 53);
      node2.siblings();
      node2.isOnlyModifiesThisCall();
      node1.isVarArgs();
      Node node3 = Node.newNumber((-2771.6), 32, 4);
      node2.isWhile();
      node1.isCatch();
      node0.getQualifiedName();
      node1.isCall();
      node3.isAnd();
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.siblings();
      int int0 = Node.IS_DISPATCHER;
      node0.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = Node.newString(1451, "K,UKsWlZER%", 1073741824, 0);
      Node node1 = node0.cloneNode();
      Node node2 = new Node(1073741824, node0, node0, node1, node1, 56, 38);
      node2.isOnlyModifiesThisCall();
      node2.isVarArgs();
      Node node3 = Node.newNumber((-1.0), 54, (-5));
      node0.isWhile();
      node2.isCatch();
      node0.getQualifiedName();
      node0.isCall();
      node3.isBreak();
      node0.setVarArgs(true);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newNumber(0.0, (-519), (-519));
      node0.getJSDocInfo();
      Node node1 = Node.newNumber((-1.0));
      Node node2 = new Node(16, node1, node1, node1, node0, 16, 48);
      Node node3 = node0.clonePropsFrom(node2);
      Node node4 = new Node(46, 47, (-1));
      node4.isFromExterns();
      node3.isNull();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      String string0 = "LABEL_NAME";
      Node node0 = Node.newNumber((-629.416), 3143, 0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      node0.getSourceFileName();
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      node0.isLocalResultCall();
      templateType0.unboxesTo();
      JSType[] jSTypeArray1 = new JSType[8];
      jSTypeArray1[0] = (JSType) templateType0;
      jSTypeArray1[1] = null;
      jSTypeArray1[2] = null;
      jSTypeArray1[3] = (JSType) templateType0;
      jSTypeArray1[4] = null;
      jSTypeArray1[5] = (JSType) templateType0;
      jSTypeArray1[6] = (JSType) templateType0;
      jSTypeArray1[7] = null;
      jSTypeRegistry1.createOptionalParameters(jSTypeArray1);
      JSType jSType0 = jSTypeRegistry1.getType((StaticScope<JSType>) templateType0, templateType0.NOT_A_CLASS, templateType0.EMPTY_TYPE_COMPONENT, node0.SLASH_V, node0.FLAG_THIS_UNMODIFIED);
      ImmutableList.of(templateType0, templateType0, templateType0, templateType0, templateType0, templateType0, templateType0, templateType0, templateType0);
      String string1 = "RM7a?`}^9^>l}&.X";
      // Undeclared exception!
      try { 
        jSType0.findPropertyType(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ProxyObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = new Node((-779));
      node0.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = Node.newString("%!N");
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newString(0, "'z6gFTHV!", 0, 0);
      Node node1 = node0.cloneNode();
      Node node2 = new Node((-4304), node0, node0, node0, node1, (-1617), 57);
      Node.mergeLineCharNo((-1617), (-880));
      node2.isEquivalentToTyped(node1);
      node2.putIntProp((-485), 16);
      Node node3 = Node.newString((-3023), "");
      node2.removeChild(node3);
      node3.isCatch();
      node3.isString();
      node0.getType();
      double double0 = Double.POSITIVE_INFINITY;
      int int0 = 192;
      Node node4 = Node.newNumber(double0, int0, node1.FLAG_LOCAL_RESULTS);
      node1.isWhile();
      node0.isCatch();
      // Undeclared exception!
      try { 
        node4.getQualifiedName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isWhile();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      ListIterator<JSType> listIterator0 = arrayList0.listIterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
      immutableList0.asList();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node2 = new Node(47, node0);
      node2.replaceChild(node1, node1);
      Node node3 = node2.useSourceInfoFrom(node1);
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node3, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newString(0, "'z6gFTHV!", 0, 0);
      Node node1 = node0.cloneNode();
      Node node2 = new Node((-4304), node0, node0, node0, node1, 46, 57);
      int int0 = Node.COLUMN_BITS;
      node2.isEquivalentToTyped(node1);
      node2.putIntProp((-485), 16);
      Node node3 = Node.newString((-3023), "");
      node2.removeChild(node3);
      node3.isCatch();
      node3.isString();
      node0.getType();
      double double0 = Double.POSITIVE_INFINITY;
      int int1 = 192;
      Node.newNumber(double0, int1, node1.FLAG_LOCAL_RESULTS);
      // Undeclared exception!
      try { 
        node1.isWhile();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = Node.newString(0, "");
      Node node1 = new Node(1262, node0, node0, node0, (-20), 56);
      Node node2 = Node.newString("");
      Node node3 = new Node(0, node1);
      Node node4 = node1.getLastSibling();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node2);
      node2.isFunction();
      node0.setVarArgs(false);
      Node node5 = node4.copyInformationFromForTree(node1);
      Node node6 = new Node(47);
      node6.getSideEffectFlags();
      node5.isObjectLit();
      node5.removeChild(node1);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.getStaticSourceFile();
      node0.mayMutateGlobalStateOrThrow();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isGetElem();
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      LinkedHashSet<TemplateType> linkedHashSet0 = new LinkedHashSet<TemplateType>(4095);
      ImmutableList<TemplateType> immutableList0 = ImmutableList.copyOf((Iterable<? extends TemplateType>) linkedHashSet0);
      ImmutableList.builder();
      jSTypeRegistry0.createInterfaceType("com.google.common.base.Predicates$NotPredicate", node0, immutableList0);
      JSType[] jSTypeArray0 = null;
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        node1.setVarArgs(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = new Node(43);
      node0.getStaticSourceFile();
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = Node.newNumber(717.8519);
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newNumber(0.0, (-519), (-519));
      node0.getJSDocInfo();
      Node node1 = new Node(57, node0, node0, 2, 37);
      Node node2 = new Node(16, node1, node1, node1, node0, 16, 48);
      Node.newNumber((double) node1.VAR_ARGS_NAME, node2.CHANGE_TIME, node1.SLASH_V);
      int int0 = (-1);
      Node node3 = new Node(node1.IS_NAMESPACE, node0.IS_DISPATCHER, int0);
      node3.isFromExterns();
      // Undeclared exception!
      try { 
        node1.isObjectLit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newString("39'5ZYM#o");
      node0.isCast();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = new Node((-2502), 12, 132);
      node0.isSyntheticBlock();
      node1.isSyntheticBlock();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
      nodeArray0[3] = node0;
      jSDocInfo0.getAssociatedNode();
      nodeArray0[4] = null;
      Node node2 = new Node(99, node0, node0);
      nodeArray0[0] = node2;
      nodeArray0[6] = node1;
      nodeArray0[7] = node0;
      Node node3 = new Node((-1705), nodeArray0);
      nodeArray0[3].mayMutateGlobalStateOrThrow();
      Node node4 = new Node(node1.SIDE_EFFECTS_FLAGS_MASK, nodeArray0);
      node4.isOr();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = Node.newString((-536870912), "Zqp!}L");
      Node node1 = new Node(3436, node0, node0, node0, node0, 38, 51);
      node1.checkTreeEqualsImpl(node0);
      node0.putBooleanProp(8, true);
      node1.toStringTree();
      node1.addChildrenAfter(node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = null;
      try {
        jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 3436
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = new Node(280);
      Node node1 = Node.newNumber((double) 0, 36, 55);
      node1.isName();
      node1.addChildrenToFront(node0);
      node0.toStringTree();
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 280
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newNumber(0.0, (-519), (-519));
      node0.getJSDocInfo();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.isGetElem();
      node0.isAnd();
      node0.isGetElem();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.getDouble();
      Node node1 = Node.newString((-2416), "Object#Key");
      node_SideEffectFlags0.setMutatesArguments();
      node0.isFromExterns();
      node1.isUnscopedQualifiedName();
      simpleErrorReporter0.warning((String) null, "Rg$f>:Hy:@Ih", 0, 323);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.getProp((-1485));
      node_NodeMismatch0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node(55, node0, node0, node0);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      node3.getJSDocInfo();
      node2.addSuppression((String) null);
      Node node4 = new Node((-629), node3, node1, node1, node3);
      node1.isWhile();
      node0.getJSType();
      // Undeclared exception!
      try { 
        node3.isInc();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node((-2071), node0, node0, node0);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      Node node4 = Node.newNumber((double) 15, 366, (-113));
      node3.getJSDocInfo();
      StaticSourceFile staticSourceFile0 = node3.getStaticSourceFile();
      node3.setStaticSourceFile((StaticSourceFile) null);
      node2.addSuppression((String) null);
      node2.isGetElem();
      node3.isAnd();
      node3.isGetElem();
      Node node5 = new Node(155, node4, node1, node0, node0);
      node3.isContinue();
      node0.isIn();
      Node node6 = Node.newNumber((double) node2.JSDOC_INFO_PROP);
      node6.getStaticSourceFile();
      node6.setStaticSourceFile(staticSourceFile0);
      // Undeclared exception!
      try { 
        node5.isComma();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newNumber((double) 47);
      node0.cloneTree();
      Node node2 = new Node(118, node1, node0, node0, node1, 191, 32);
      node2.isUnscopedQualifiedName();
      Node node3 = new Node(49, node0, 56, 52);
      node2.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node((-2071), node0, node0, node0);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      node3.setChangeTime(1023);
      node2.getProp(117);
      node2.isOnlyModifiesArgumentsCall();
      node3.setCharno(105);
      node3.getStaticSourceFile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      node2.setChangeTime(47);
      jSTypeArray0[0] = jSType0;
      Node node4 = new Node(29, node0);
      node4.isIf();
      jSTypeRegistry0.getObjectIndexKey();
      node4.addChildToFront(node0);
      int int0 = (-2498);
      node2.getExistingIntProp(int0);
      // Undeclared exception!
      try { 
        node1.isWhile();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      Node node1 = new Node(50, node0);
      node0.wasEmptyNode();
      Node node2 = new Node(54, 47, 47);
      node2.isHook();
      Node node3 = new Node(4095, node0);
      // Undeclared exception!
      try { 
        node2.isGetElem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = new Node(44, 44, 4096);
      Node node1 = new Node(32, node0, node0, 49, 12);
      node0.wasEmptyNode();
      Node node2 = Node.newString("| oVJe{[r!@2AN`4!3", 4095, 12);
      node2.setChangeTime(51);
      Node node3 = null;
      node1.replaceChild((Node) null, node0);
      Node node4 = new Node(node0.DIRECTIVES, node3, node0, node0);
      StaticSourceFile staticSourceFile0 = node2.getStaticSourceFile();
      // Undeclared exception!
      try { 
        node4.setStaticSourceFile(staticSourceFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node node0 = new Node(44, 44, 44);
      Node node1 = new Node(32, node0, node0, 49, 12);
      Node node2 = Node.newString("| oVJe{[r!@2AN`4!3", 4095, 12);
      node2.setChangeTime(51);
      Node node3 = null;
      node1.replaceChild((Node) null, node0);
      Node node4 = new Node(node0.DIRECTIVES, node3, node0, node0);
      // Undeclared exception!
      try { 
        node2.getStaticSourceFile();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      int int0 = (-779);
      Node node0 = Node.newNumber((double) 43);
      Node node1 = new Node(43, node0, node0, node0);
      int int1 = 16;
      int int2 = (-2767);
      Node node2 = node0.removeChildren();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = null;
      Node node3 = new Node((-2416), node2, node0, node2, 50, 130);
      nodeArray0[1] = node3;
      nodeArray0[2] = node1;
      nodeArray0[3] = node2;
      int int3 = 8233;
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.mergeLineCharNo((-2654), (-2654));
      Node node0 = new Node((-2654), (-1), (-2654));
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      Node node1 = new Node(39, node0, node0, node0);
      Node node2 = node1.removeChildren();
      Node node3 = new Node(37, node2, node2, node2, 30, 4095);
      Node.newString(46, "com.google.javascript.rhino.Node$AncestorIterable$1");
      Node node4 = new Node(29, node2, node1, node3);
      node4.isWhile();
      node4.isCatch();
      String string0 = "gz 8\\G";
      // Undeclared exception!
      try { 
        Node.newString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = new Node(444, (Node) null, (Node) null, (Node) null, 444, 444);
      String string0 = "*m0]W1:4*pO";
      // Undeclared exception!
      try { 
        node0.setSourceFileForTesting(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = Node.newNumber(632.83, 130, 130);
      node0.putProp(130, (Object) null);
      node0.mayMutateArguments();
      node0.type = 43;
      node0.mayMutateArguments();
      boolean boolean0 = false;
      node0.setQuotedString();
      boolean boolean1 = false;
      node0.toString(boolean0, boolean0, boolean1);
      node0.isFunction();
      int int0 = 65536;
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = Node.newString((String) null);
      // Undeclared exception!
      try { 
        node0.isWhile();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = Node.newNumber((double) 4426, 0, 443);
      Node node1 = new Node(4426, node0, node0, node0, (-3573), 4095);
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.isIf();
      node1.isWhile();
      node1.getInputId();
      node0.hasMoreThanOneChild();
      node1.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags5.setMutatesGlobalState();
      node0.isArrayLit();
      node1.isDebugger();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.isDebugger();
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(0);
      Node node2 = Node.newNumber((double) 4, 2, (-656));
      node1.getJSDocInfo();
      node2.isVarArgs();
      node0.isWhile();
      node2.getQualifiedName();
      node1.hasOneChild();
      node2.setVarArgs(false);
      Node node3 = new Node(1);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      nodeArray0[1] = node2;
      nodeArray0[2] = node3;
      nodeArray0[3] = node2;
      nodeArray0[4] = node0;
      nodeArray0[5] = node1;
      node0.setSourceFileForTesting("");
      nodeArray0[6] = node0;
      nodeArray0[7] = node0;
      Node node4 = new Node(4095, nodeArray0, 48, 46);
      nodeArray0[0].hasChild(nodeArray0[2]);
      nodeArray0[3].addChildrenToFront(nodeArray0[7]);
      node2.putIntProp(node1.DECR_FLAG, node1.OPT_ARG_NAME);
      nodeArray0[6].getNext();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isWhile();
      node0.isCatch();
      node0.getQualifiedName();
      node0.isCall();
      node0.isBreak();
      Node node1 = Node.newString("", 40, 57);
      Node node2 = new Node(326, node0, node0, node1, node0, 108, 50);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node2.setJSDocInfo(jSDocInfo0);
      node2.isNull();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>(1186);
      ImmutableList.copyOf((Iterable<? extends JSType>) linkedHashSet0);
      Node node0 = Node.newString(1320, "9Z\"LjBUEZOMCkJ;", 1186, 1320);
      Node node1 = new Node(1186, node0, node0, 2, 55);
      Node node2 = node1.srcrefTree(node0);
      node2.replaceChildAfter(node0, node1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      Node node1 = Node.newNumber((double) 2, 38, 1633);
      Node[] nodeArray0 = new Node[1];
      Node node2 = new Node(51, node0, node1, node1, 16, 119);
      nodeArray0[0] = node2;
      Node node3 = new Node(155, nodeArray0, 105, 8);
      Node node4 = new Node((-966), 127, (-966));
      node3.replaceChildAfter(node2, node4);
      node4.isNoSideEffectsCall();
      int int0 = (-1);
      Node node5 = new Node(node0.IS_CONSTANT_NAME, node3, node2, node2, int0, node3.STATIC_SOURCE_FILE);
      Node node6 = node5.useSourceInfoIfMissingFrom(node1);
      node2.checkTreeEqualsImpl(node6);
      node5.isName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setAllFlags();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, 1612);
      Node node1 = new Node(130, 50, 2775);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node node3 = Node.newString("");
      Object object0 = new Object();
      node3.putProp((-2259), "");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("^3Q=;-`%", false);
      node3.putProp(43, simpleSourceFile0);
      node0.addSuppression("");
      node3.getAncestors();
      node1.getLastSibling();
      Node node4 = new Node(39, node3, node0);
      node1.srcrefTree(node4);
      node2.cloneNode();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = new Node(44);
      node0.mayMutateGlobalStateOrThrow();
      node0.isLabel();
      node0.hasOneChild();
      node0.getDirectives();
      node0.addSuppression("IsEqualTo(");
      node0.getAncestors();
      Node node1 = node0.getLastSibling();
      node0.srcrefTree(node1);
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = new Node(0, (-6098), 0);
      Node node1 = new Node(112, node0, node0, node0, node0);
      node1.isWhile();
      node0.getJSType();
      Node node2 = new Node(2, node1, node0, node0, 32768, 54);
      node1.addChildAfter(node0, node2);
      node0.isAssign();
      node1.isNumber();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, 1612);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType.toMaybeTemplateType((JSType) null);
      JSType.toMaybeTemplatizedType((JSType) null);
      Node node1 = new Node(618);
      node0.isIn();
      node0.getIndexOfChild(node1);
      node1.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = new Node(63, (-2870), 4);
      Node node1 = new Node((-1062), node0, node0, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node.newString("");
      Object object0 = new Object();
      node2.putProp((-1062), node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      int int0 = 85;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType((FunctionType) null, (ObjectType) null);
      node0.putProp(int0, functionType0);
      boolean boolean0 = false;
      boolean boolean1 = true;
      node2.setWasEmptyNode(boolean1);
      node1.isOnlyModifiesThisCall();
      Node node3 = node0.srcrefTree(node2);
      Node node4 = new Node(node1.DIRECT_EVAL, node3, functionType0.ENUMDECL, node3.REFLECTED_OBJECT);
      node4.setVarArgs(boolean0);
      // Undeclared exception!
      try { 
        node0.isEquivalentTo(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isWhile();
      node0.isCatch();
      node0.getQualifiedName();
      node0.isCall();
      node0.isBreak();
      node0.setVarArgs(false);
      node0.isVar();
      Node node1 = Node.newString(" c@", 32, 43);
      node1.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isWhile();
      node0.isCatch();
      node0.getQualifiedName();
      node0.isCall();
      node0.isBreak();
      node0.setVarArgs(false);
      node0.isInc();
      Node.newString(" c@", 32, 43);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node.extractLineno((-870));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2477);
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) (-179), (-870), 1048575);
      Node node1 = new Node((-179), node0, node0, node0);
      node1.isQualifiedName();
      node1.isDefaultCase();
      node1.setSideEffectFlags(30);
      Node node2 = node0.getNext();
      node1.removeChildren();
      node2.isReturn();
      // Undeclared exception!
      try { 
        node2.useSourceInfoIfMissingFrom(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -179
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node.extractLineno((-870));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2477);
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) (-870), (-870), 1048575);
      Node node1 = new Node(36);
      node0.isStringKey();
      node0.isRegExp();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = new Node(65);
      Node.newNumber((double) 31, 48, 52);
      Node.newNumber((-843.723));
      Node node1 = new Node(57, 227, 42);
      node1.setSideEffectFlags((-3796));
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(50);
      Node node2 = new Node(32, node1, node1, node1, node1, (-166), 0);
      Node node3 = Node.newNumber((double) 31, 50, 52);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node1.isName();
      node2.setSideEffectFlags(node_SideEffectFlags1);
      node2.setSideEffectFlags(node_SideEffectFlags0);
      node0.getSourceOffset();
      node0.getJSDocInfo();
      node_SideEffectFlags0.setMutatesThis();
      // Undeclared exception!
      try { 
        node3.isCall();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got TYPEOF
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newNumber((double) 0, (-3944), 50);
      node0.toStringTree();
      node0.isBlock();
      node0.setQuotedString();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      Node[] nodeArray0 = null;
      Node node1 = null;
      try {
        node1 = new Node(node0.INPUT_ID, nodeArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      int int0 = 340;
      Node[] nodeArray0 = new Node[7];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[6];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[9];
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSTypeNative jSTypeNative2 = JSTypeNative.URI_ERROR_TYPE;
      jSTypeNativeArray0[2] = jSTypeNative2;
      JSTypeNative jSTypeNative3 = JSTypeNative.REGEXP_FUNCTION_TYPE;
      jSTypeNativeArray0[3] = jSTypeNative3;
      JSTypeNative jSTypeNative4 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
      jSTypeNativeArray0[4] = jSTypeNative4;
      JSTypeNative jSTypeNative5 = JSTypeNative.NUMBER_OBJECT_TYPE;
      jSTypeNativeArray0[5] = jSTypeNative5;
      JSTypeNative jSTypeNative6 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      jSTypeNativeArray0[6] = jSTypeNative6;
      JSTypeNative jSTypeNative7 = JSTypeNative.REFERENCE_ERROR_TYPE;
      jSTypeNativeArray0[7] = jSTypeNative7;
      JSTypeNative jSTypeNative8 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
      jSTypeNativeArray0[8] = jSTypeNative8;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      jSTypeArray0[0] = jSType0;
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Dd!@H", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      enumElementType1.getParentScope();
      jSTypeArray0[1] = (JSType) null;
      TemplateType templateType0 = null;
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of((TemplateType) null);
      ImmutableList<JSType> immutableList1 = ImmutableList.of((JSType) templateType0, jSTypeArray0[1]);
      TemplateTypeMap templateTypeMap0 = jSTypeRegistry0.createTemplateTypeMap(immutableList0, immutableList1);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = null;
      try {
        templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, templateTypeMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newNumber((double) 47);
      node1.addChildrenToBack(node0);
      Node node2 = node0.cloneTree();
      node0.getIntProp((-1042));
      node2.isAdd();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isWhile();
      node0.isCatch();
      node0.getJsDocBuilderForNode();
      node0.getQualifiedName();
      node0.isCall();
      node0.isParamList();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node((-2071), node0, node0, node0);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      Node.newNumber((double) 15, 366, (-113));
      node3.getJSDocInfo();
      Node node4 = node2.srcrefTree(node1);
      node3.removeProp(31);
      node4.getAncestor(50);
      Node node5 = new Node(57, (Node[]) null);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = Node.newNumber(2896.0);
      node0.getString();
      // Undeclared exception!
      try { 
        node0.mayMutateGlobalStateOrThrow();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 2896.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = Node.newString("&q");
      node0.getString();
      node0.setLength(0);
      node0.toString(false, false, true);
      node0.getStaticSourceFile();
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node0.setSideEffectFlags(node_SideEffectFlags3);
      node0.isBlock();
      node0.setQuotedString();
      node_SideEffectFlags2.clearSideEffectFlags();
      Node[] nodeArray0 = null;
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-519), (-519));
      node0.getJSDocInfo();
      Node node1 = Node.newNumber((-1.0));
      Node node2 = new Node(16, node1, node1, node1, node0, 16, 48);
      Node node3 = node0.clonePropsFrom(node2);
      node1.cloneTree();
      Node node4 = new Node(46, 47, (-1));
      node0.isOnlyModifiesArgumentsCall();
      node4.isFromExterns();
      node3.isNull();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = new Node((-2110));
      Node node1 = Node.newNumber((double) 15);
      node1.cloneTree();
      node0.getIntProp(54);
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node((-289), (-289), (-289));
      nodeArray0[0] = node0;
      node0.toString();
      // Undeclared exception!
      try { 
        nodeArray0[0].addChildToFront(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -289
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = Node.newNumber((double) 4426, 0, 443);
      Node node1 = new Node(4426, node0, node0, node0, (-3573), 4095);
      node1.isIf();
      node1.isWhile();
      node1.getInputId();
      node0.hasMoreThanOneChild();
      node1.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.clearAllFlags();
      Node node2 = Node.newNumber(0.0, 113, 29);
      node2.getAncestors();
      node1.isGetterDef();
      node0.hasOneChild();
      Node.mergeLineCharNo((-2580), 38);
      node0.hasChildren();
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node(36, node0, node0, node0, node0, 53, 16);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      Node node4 = Node.newNumber((double) 15, 366, (-113));
      node3.getJSDocInfo();
      node2.addSuppression((String) null);
      node2.isGetElem();
      node0.isCatch();
      node0.getAncestor(0);
      Node node5 = new Node(48);
      node4.isVar();
      node3.isNull();
      node4.mayMutateArguments();
      node2.hasChildren();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(50);
      Node node2 = new Node(32, node1, node1, node1, node1, (-166), 0);
      Node.newNumber((double) 31, 50, 52);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node2.isReturn();
      Node node3 = node1.useSourceInfoIfMissingFrom(node0);
      Node node4 = node0.cloneNode();
      node3.setLineno(36);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      Vector<JSType> vector0 = new Vector<JSType>();
      JSType jSType0 = jSTypeRegistry0.createFunctionType(objectType0, (JSType) null, (List<JSType>) vector0);
      ObjectType.cast(jSType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", node2, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      enumElementType0.toMaybeEnumElementType();
      enumElementType0.getJSDocInfo();
      node4.setJSDocInfo(jSDocInfo0);
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newNumber(0.0);
      node0.setLineno(105);
      node0.setString("");
      Node node1 = new Node(node0.JSDOC_INFO_PROP);
      node1.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isHook();
      node0.toString();
      node0.isNot();
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = Node.newString(0, "this", 0, 0);
      Node node1 = node0.cloneNode();
      node0.isOnlyModifiesThisCall();
      node1.isVarArgs();
      node1.isBreak();
      node0.setVarArgs(false);
      node0.isDec();
      node0.setLineno(57);
      Node.newString(")Y6%4)B", 50, 38);
      node0.hasChildren();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newNumber((-1.0), 0, 42);
      Node node1 = new Node(4095, node0, node0, node0, 30, 43);
      node0.mayMutateGlobalStateOrThrow();
      node1.isCase();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.isExprResult();
      node1.setSideEffectFlags(node_SideEffectFlags0);
      int int0 = 126;
      Node.mergeLineCharNo(node1.INCRDECR_PROP, int0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-289));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = Node.newNumber((-1932.0), (-289), (-289));
      node0.getProp(103);
      Node node1 = new Node(54, node0, node0, node0, 2, 2);
      node1.setString("node is not a child");
      node0.isAssign();
      node1.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-289));
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = Node.newNumber((-1932.0), (-289), 108);
      Node node1 = new Node(31, node0, node0, node0);
      node1.isQualifiedName();
      node1.isDefaultCase();
      node1.setSideEffectFlags(2);
      node1.getNext();
      Node node2 = node0.removeChildren();
      // Undeclared exception!
      try { 
        node2.isReturn();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got DELPROP
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = Node.newString(0, "this", 0, 1431);
      node0.cloneNode();
      Node node1 = new Node(0, node0, node0, node0, node0, 37, 53);
      node1.isOnlyModifiesThisCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.getString();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node2 = new Node(1);
      node2.isStringKey();
      node2.isTrue();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setLineno(39);
      node0.getQualifiedName();
      Node node1 = new Node(153, node0, node0, node0);
      node1.isCall();
      node1.setJSType((JSType) null);
      node1.isParamList();
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType.toMaybeTemplateType((JSType) null);
      JSType.toMaybeTemplatizedType((JSType) null);
      Node node0 = new Node(1);
      node0.getIntProp(0);
      node0.isFalse();
      node0.isOnlyModifiesThisCall();
      node0.setSideEffectFlags((Node.SideEffectFlags) null);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isWhile();
      node0.isCatch();
      node0.children();
      node0.getQualifiedName();
      node0.isCall();
      node0.isBreak();
      node0.setVarArgs(false);
      node0.isVar();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = Node.newNumber((-3385.6515), (-775), (-775));
      Node node1 = new Node(4138, node0, 65536, 4095);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("second new child has existing sibling", "TypeError", 54, 461845907);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_PROTOTYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node2.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      TemplateType templateType0 = JSType.toMaybeTemplateType(jSType0);
      jSTypeRegistry0.resetImplicitPrototype(jSType0, (ObjectType) null);
      node1.children();
      node0.addChildrenAfter(node1, node1);
      node1.getDouble();
      node2.isThrow();
      node0.getDouble();
      String string0 = "";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node1, templateType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      // Undeclared exception!
      try { 
        enumElementType0.toMaybeEnumElementType();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newString(0, "'z6gFTHV!", 0, 0);
      Node node1 = node0.cloneNode();
      Node node2 = new Node((-4304), node0, node0, node0, node1, 46, 57);
      int int0 = Node.COLUMN_BITS;
      node1.isCatch();
      node2.children();
      node0.getQualifiedName();
      node2.isBreak();
      node2.setVarArgs(false);
      node2.isVar();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      int int0 = Node.VAR_ARGS_NAME;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2477);
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) (-179), (-870), 30);
      Node node1 = new Node((-179), node0, node0, node0);
      node1.isNoSideEffectsCall();
      node1.isDefaultCase();
      node1.setSideEffectFlags(30);
      node0.getNext();
      node1.removeChildren();
      int int1 = 122;
      // Undeclared exception!
      try { 
        node1.getProp(int1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -179
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newNumber((double) 47);
      Node node2 = node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesThis();
      node2.isArrayLit();
      node2.addChildrenToBack(node0);
      node1.isDebugger();
      node0.isScript();
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      Node node1 = Node.newNumber((double) 2, 38, 1633);
      Node[] nodeArray0 = new Node[1];
      Node node2 = new Node(51, node0, node1, node1, 16, 119);
      nodeArray0[0] = node2;
      Node node3 = new Node(155, nodeArray0, 105, 8);
      Node node4 = new Node((-966), 127, (-966));
      node4.isQuotedString();
      node4.setQuotedString();
      node3.replaceChildAfter(nodeArray0[0], node4);
      node4.isNoSideEffectsCall();
      int int0 = (-1);
      Node node5 = new Node(node0.IS_CONSTANT_NAME, node3, node2, node2, int0, node3.STATIC_SOURCE_FILE);
      Node node6 = node5.useSourceInfoIfMissingFrom(node1);
      node2.checkTreeEqualsImpl(node6);
      node5.isName();
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = new Node(0, (-6098), 0);
      Node node1 = new Node(36, node0, node0, node0, node0, 2, 1);
      node0.isNE();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isSyntheticBlock();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node1.isArrayLit();
      node0.isDebugger();
      node1.isIn();
      node1.toString(false, false, false);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = node0.getLastSibling();
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isEquivalentToTyped(node2);
      node2.isGetterDef();
      node1.isSetterDef();
      node1.isThis();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1683), (-1683));
      node0.wasEmptyNode();
      node0.isHook();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      node0.addSuppression(" : ");
      node0.isGetElem();
      node0.isAnd();
      node0.mayMutateArguments();
      Node node1 = Node.newString("", 63, 50);
      Node node2 = new Node(2, node0, node0, node0, node1);
      node0.isContinue();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(" : ", false);
      node2.setStaticSourceFile(simpleSourceFile0);
      node1.isComma();
      node1.isThis();
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-528), 86, (-528));
      node0.getJSDocInfo();
      node0.isVarArgs();
      node0.isNE();
      node0.getQualifiedName();
      node0.isGetElem();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node0.isGetElem();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = (JSType) null;
      jSTypeArray0[1] = null;
      jSTypeArray0[2] = null;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, true, jSTypeArray0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, jSTypeArray0[0], jSTypeArray0[0], (JSType) functionType0, jSTypeArray0[2], jSTypeArray0[0], (JSType) functionType0, jSTypeArray0[2], jSTypeArray0[2], (JSType) templateType0, jSTypeArray0[0]);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node1.getIndexOfChild(node0);
      node1.isOr();
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = new Node((-6098));
      Node node1 = new Node(36, node0, node0, node0, node0, 2, 1);
      boolean boolean0 = node1.isWhile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node2 = new Node((-1594), node1, node0, node0);
      node2.setVarArgs(boolean0);
      // Undeclared exception!
      try { 
        node2.isObjectLit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = Node.newNumber((double) 43);
      Node node1 = new Node(43, node0, node0, node0);
      node0.removeChildren();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node1;
      Node node2 = new Node((-2416), node1, node0, node1, 50, 130);
      String string0 = "com.google.common.base.CharMatcher$Or";
      Node.newString(node2.OPT_ARG_NAME, string0);
      node2.getQualifiedName();
      // Undeclared exception!
      try { 
        node0.isBreak();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = new Node((-6098));
      Node node1 = new Node(36, node0, node0, node0, node0, 2, 1);
      node1.isWhile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node2 = node1.getLastSibling();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node2.isFunction();
      node0.setVarArgs(false);
      Node node3 = new Node(35, node2, node0, 73, 39);
      node3.copyInformationFromForTree(node0);
      node3.isSetterDef();
      node1.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(118);
      node_SideEffectFlags0.setMutatesArguments();
      Node node0 = new Node(118, 118, 118);
      Node node1 = new Node(36, node0, node0, node0, node0, 2, 1);
      node1.isWhile();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesThis();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = new Node(8, node0, node1);
      // Undeclared exception!
      try { 
        node2.isSetterDef();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = Node.newNumber((double) 43);
      node0.getStaticSourceFile();
      node0.mayMutateGlobalStateOrThrow();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isGetElem();
      node0.isFromExterns();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node0.isDo();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSType jSType0 = linkedList0.removeLast();
      linkedList0.add(jSType0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = Node.newString("ar8b@Y?", 147, 4426);
      Node node1 = null;
      node0.setJSType((JSType) null);
      node0.isEquivalentToTyped((Node) null);
      node0.isCall();
      node0.removeChildAfter(node1);
      node0.getJsDocBuilderForNode();
      // Undeclared exception!
      try { 
        node0.getStaticSourceFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node((-2071), node0, node0, node0);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      node3.setChangeTime(1023);
      Object object0 = new Object();
      node2.isOnlyModifiesArgumentsCall();
      node3.setCharno(105);
      node3.getStaticSourceFile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      node2.setChangeTime(47);
      jSTypeArray0[0] = jSType0;
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node4.isIf();
      jSTypeRegistry0.getObjectElementKey();
      node2.isAssignAdd();
      node2.getExistingIntProp((-2498));
      node1.isWhile();
      node2.getJSType();
      node4.addChildAfter(node3, node2);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.getExistingIntProp((-1990));
      node0.getJSDocInfo();
      // Undeclared exception!
      try { 
        node0.isQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: -1990
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newString("");
      node0.isWhile();
      node0.isCatch();
      node0.getJsDocBuilderForNode();
      node0.getQualifiedName();
      Node node1 = new Node(31, node0, node0, 2, 53);
      node1.getAncestors();
      Node node2 = new Node(4095, 2, 301);
      node2.isGetterDef();
      node2.hasOneChild();
      Node.mergeLineCharNo(38, 30);
      node0.hasChildren();
      node2.isTrue();
      node2.getString();
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = new Node(4095);
      node0.removeChildren();
      node0.getDirectives();
      node0.getString();
      // Undeclared exception!
      try { 
        node0.getChangeTime();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4095
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isCatch();
      node0.getQualifiedName();
      node0.isCall();
      node0.isBreak();
      node0.setVarArgs(false);
      node0.isInc();
      Node node1 = Node.newString(" c@", 32, 43);
      node1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node.newNumber((double) 38);
      node0.removeProp(52);
      node0.isIn();
      Node node1 = Node.newNumber(712.715);
      node1.isComma();
      node0.isEmpty();
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, (-2), 1142);
      Node node1 = new Node(1579, node0, node0, node0, 32, 46);
      node1.isWith();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType.toMaybeTemplatizedType((JSType) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Should not happen\n", node0, (JSType) null);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      Node node2 = enumElementType1.getRootNode();
      node2.isWhile();
      node2.getInputId();
      // Undeclared exception!
      try { 
        node1.hasMoreThanOneChild();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newNumber(0.0);
      node_SideEffectFlags0.clearAllFlags();
      Node node1 = Node.newString("", 37, 295);
      node0.mayMutateGlobalStateOrThrow();
      node1.isNew();
      node1.isLabelName();
      node0.isWith();
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = new Node(86, (-528), (-528));
      Node node1 = new Node(57, node0);
      node0.addChildToFront(node1);
      node1.isWhile();
      node1.getJSType();
      node1.addChildAfter((Node) null, (Node) null);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      ImmutableList.copyOf((Iterable<? extends JSType>) linkedHashSet0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node.newString((String) null, 62, (-2707));
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isWhile();
      node0.isName();
      Node node1 = Node.newNumber(306.547494656748);
      node0.addChildrenToFront(node1);
      node0.toStringTree();
      node0.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(223, "CharMatcher.ASCII");
      node0.setQuotedString();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = Node.newString("CharMatcher.ASCII", 53, 116);
      Node node2 = node0.srcrefTree(node1);
      node1.removeProp(8);
      node2.getStaticSourceFile();
      Node node3 = Node.newNumber((double) 56, 40, 47);
      node1.mayMutateArguments();
      Node node4 = new Node((-1831), node3, node1, node3, 1818623, 4397);
      node4.setStaticSourceFile((StaticSourceFile) null);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node node0 = new Node(57, 57, 97);
      node0.isGetProp();
      node0.setString((String) null);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isGetProp();
      node0.setString((String) null);
      node0.isAnd();
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = new Node(1665, 1665, 1856);
      node0.setString("=FYb9ZCX");
      node0.detachFromParent();
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = new Node(57, 57, 97);
      node0.isRegExp();
      node0.setString((String) null);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[6].useSourceInfoFromForTree(node0);
      nodeArray0[0] = node0;
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = new Node((-3480), 15, 15);
      node0.isRegExp();
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      InputId inputId0 = new InputId("6 o8X02");
      Node.extractCharno((-487));
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isWhile();
      node0.isCatch();
      node0.getQualifiedName();
      node0.isCall();
      Node node1 = Node.newNumber((double) 4);
      node0.setDouble(0.0);
      node0.isAssign();
      // Undeclared exception!
      try { 
        node1.isInstanceOf();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING Dd!\\@H is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isWhile();
      node0.isCatch();
      node0.getQualifiedName();
      node0.isCall();
      Node node1 = new Node(54, node0, node0, node0);
      node0.addChildrenToBack(node1);
      node0.isBreak();
      node0.setVarArgs(false);
      node1.isStringKey();
      node1.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = Node.newString(0, "this", 0, 0);
      Node node1 = node0.cloneNode();
      node0.isOnlyModifiesThisCall();
      node1.isVarArgs();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node1.addSuppression((String) null);
      node1.isGetElem();
      node1.isAnd();
      node1.isGetElem();
      Node node2 = new Node(117, node1, node0, node0, node0);
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(1548);
      Node node1 = node0.cloneNode();
      node0.isOnlyModifiesThisCall();
      node1.isVarArgs();
      Node node2 = Node.newNumber(0.0);
      node2.setDouble(Double.POSITIVE_INFINITY);
      node0.isAssign();
      Node node3 = Node.newString("`#Cg[\"\u0000");
      node3.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isCatch();
      node0.getQualifiedName();
      node0.isCall();
      node0.isBreak();
      node0.setVarArgs(false);
      node0.isInc();
      node0.toString();
      Node node1 = Node.newString(" c@", 32, 43);
      node1.isOnlyModifiesThisCall();
      node1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = Node.newString(366, "", 366, 366);
      Node node1 = Node.newString(1, "", 795, 42);
      node1.detachChildren();
      node0.isSyntheticBlock();
      node0.hasOneChild();
      node1.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(9, node0, node0, node0);
      Node node2 = node1.srcref(node0);
      node1.setChangeTime(57);
      node1.setCharno(8);
      node1.isRegExp();
      Node node3 = new Node(17);
      Node node4 = new Node(1, node2, node3, node0, node0);
      node4.addChildToFront(node3);
      node2.isNumber();
      // Undeclared exception!
      try { 
        node4.getExistingIntProp(node3.DIRECT_EVAL);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0), 443, (-571));
      Node node1 = new Node(90, node0, node0, node0, 37, 1);
      node0.isIf();
      node0.isWhile();
      node0.getInputId();
      node1.hasMoreThanOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      Node node2 = Node.newString(2016, "jE3");
      node2.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(2016);
      Node node1 = new Node((-712));
      Node node2 = new Node(2, node0, node1, node0, node0, 32, 0);
      Node node3 = Node.newNumber((double) 8, 57, 48);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      node1.isReturn();
      node0.useSourceInfoIfMissingFrom(node1);
      Node node4 = node0.cloneNode();
      node2.setLineno(366);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createFunctionType(objectType0, (JSType) objectType0, (List<JSType>) vector0);
      ObjectType.cast(objectType0);
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(objectType0, (String) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node4, jSType0);
      enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getJSDocInfo();
      node3.isDebugger();
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = new Node(2912);
      Node node1 = new Node(32, node0, node0, node0);
      Node node2 = new Node((-1217), node1);
      Node node3 = node1.srcref(node0);
      Node node4 = Node.newNumber((double) 42, (-571), 117);
      node4.getJSDocInfo();
      node0.getStaticSourceFile();
      node2.setStaticSourceFile((StaticSourceFile) null);
      node0.addSuppression("");
      node3.isGetElem();
      node2.isAnd();
      node3.isGetElem();
      Node node5 = new Node(30, node1, node0, node1, node3);
      Node node6 = new Node(node4.VAR_ARGS_NAME, node0, node5, node3, node5);
      node5.isAdd();
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newString(0, "'z6gFTHV!", 0, 0);
      Node node1 = node0.cloneNode();
      Node node2 = new Node((-4304), node0, node0, node0, node1, 46, 57);
      int int0 = Node.COLUMN_BITS;
      node2.isEquivalentToTyped(node1);
      node2.putIntProp((-485), 16);
      Node node3 = Node.newString((-3023), "");
      node3.isCatch();
      node3.isString();
      node0.getType();
      Node node4 = Node.newNumber(Double.POSITIVE_INFINITY, 198, 16);
      node1.isWhile();
      node0.isCatch();
      node4.getQualifiedName();
      node_SideEffectFlags0.setMutatesThis();
      node1.isArrayLit();
      node1.isBreak();
      node1.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1683), (-1683));
      node0.wasEmptyNode();
      node0.isHook();
      node0.getStaticSourceFile();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node0.isString();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.isTrue();
      Node node1 = Node.newString("Object#Key");
      node1.isEquivalentToTyped(node0);
      node0.addChildToFront(node1);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0), 443, (-571));
      Node node1 = new Node(90, node0, node0, node0, 37, 1);
      node0.isIf();
      node0.isWhile();
      node0.getInputId();
      node1.hasMoreThanOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setAllFlags();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.getSourceOffset();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node2 = new Node(999, nodeArray0, (-568), 16);
      node2.getJSDocInfo();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node node3 = new Node(node2.MAX_COLUMN_NUMBER, nodeArray0);
      node3.isCall();
      int int0 = 39;
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 443, 443);
      Node node1 = new Node(90, node0, node0, node0, 37, 1);
      node0.isCase();
      node1.getSourceOffset();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node1.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isRegExp();
      node0.setString((String) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = null;
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node node0 = new Node(280);
      Node node1 = new Node(33, node0, 29, 132);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.isEquivalentTo(node0, false, false, false);
      node2.isTrue();
      Node.newString(120, "");
      node2.isSyntheticBlock();
      Node.newString("", 42, 2);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node node0 = Node.newString("DQFmmHNsq0O3=R", 0, 0);
      Node node1 = null;
      Node node2 = Node.newString(46, "com.google.javascript.rhino.Node$AncestorIterable$1");
      node2.getDouble();
      node0.isWhile();
      node0.isCatch();
      String string0 = "";
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isWhile();
      node0.children();
      node0.getQualifiedName();
      node0.isCall();
      node0.getDouble();
      Node node1 = null;
      try {
        node1 = new Node(node0.FLAG_ARGUMENTS_UNMODIFIED, node0, node0.COLUMN_BITS, node0.EMPTY_BLOCK);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING Dd!\\@H is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node node0 = new Node(44, 44, 4096);
      Node node1 = new Node(32, node0, node0, 49, 12);
      node0.setChangeTime(51);
      node1.cloneNode();
      node0.setLineno(44);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.getSourceOffset();
      node0.getJSDocInfo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(321);
      node_SideEffectFlags0.setMutatesThis();
      Node node2 = Node.newString("Object#Element");
      node2.hasChildren();
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.getStaticSourceFile();
      node0.mayMutateGlobalStateOrThrow();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isGetElem();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node0.isGetElem();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.isParamList();
      node0.isExprResult();
      node0.isLabelName();
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = Node.newString("Recorded bad position information\nstart-char: ", 96, (-713));
      node0.children();
      Node node1 = Node.newNumber((double) 54, 119, 2180);
      Node node2 = Node.newString("Recorded bad position information\nstart-char: ", (-882), 40);
      node2.useSourceInfoFromForTree(node1);
      Node.newNumber(1212.804, 1, (-713));
      Node node3 = node0.clonePropsFrom(node1);
      node0.getJSDocInfo();
      node0.isName();
      node1.addChildrenAfter(node0, node3);
      node0.checkTreeEqualsImpl(node3);
      node1.getInputId();
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node node0 = Node.newString("unexpected prop id ");
      node0.getString();
      node0.setLength(0);
      node0.toString(false, false, false);
      node0.getStaticSourceFile();
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node0.isAnd();
      node0.isTrue();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      node0.addChildToFront((Node) null);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("/, A^n@u}5W", 639, (-1318));
      node0.children();
      Node node1 = Node.newNumber((-2333.0052), 617, 55);
      Node node2 = Node.newString("/, A^n@u}5W", 9, (-40));
      Node node3 = node0.useSourceInfoFromForTree(node1);
      Node node4 = Node.newNumber((double) 46, 52, 56);
      Node node5 = new Node((-3012), node4, node0, node1, node0, 49, (-4999));
      Node node6 = node5.clonePropsFrom(node3);
      node2.getJSDocInfo();
      node2.isName();
      Node node7 = new Node(43, node3);
      node7.addChildrenAfter(node6, node0);
      node1.checkTreeEqualsImpl(node0);
      node1.getInputId();
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newNumber(0.0);
      node0.setLineno(105);
      Node node1 = Node.newNumber(Double.POSITIVE_INFINITY, Integer.MAX_VALUE, 30);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("oX^LTs(.S", false);
      Node node2 = new Node(4035, node0, node1, 57, 15);
      node2.isComma();
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isNot();
      node0.isCatch();
      node0.isCall();
      Node node1 = Node.newNumber((double) 4);
      node0.setDouble(0.0);
      node0.isArrayLit();
      // Undeclared exception!
      try { 
        node1.isDebugger();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING Dd!\\@H is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getLineno();
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1683), (-1683));
      node0.wasEmptyNode();
      node0.isHook();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      node0.addSuppression(" : ");
      node0.isGetElem();
      node0.isAnd();
      node0.mayMutateArguments();
      node0.setOptionalArg(true);
      Node.newString("tuz?<(/7w*(,tq5:M[", 26, 4);
      Node node1 = new Node(30, node0);
      node1.getIntProp(1);
      node1.addChildToBack(node0);
      nodeArray0[1].isObjectLit();
      node1.isFor();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
      List<JSType> list0 = null;
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(list0);
      // Undeclared exception!
      try { 
        node2.getSideEffectFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Node node0 = Node.newString("'@!@H");
      Node node1 = new Node(54, node0, node0, node0);
      node0.removeChildren();
      Node.newString(228, "\"", (-179), 16);
      Node.newString(36, "'@!@H", 40, 49);
      node1.detachChildren();
      Node node2 = Node.newString(960, "\"");
      node2.isSyntheticBlock();
      node2.hasOneChild();
      node1.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isWhile();
      node0.isCatch();
      node0.getQualifiedName();
      node0.isCall();
      node0.isBreak();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = Node.newString("", 40, 57);
      Node node2 = new Node(326, node0, node0, node1, node0, 108, 50);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node2.setJSDocInfo(jSDocInfo0);
      node2.isNull();
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = new Node(0, (-6098), 0);
      Node node1 = new Node(52, node0, node0, node0, node0);
      node1.isWhile();
      node1.isVar();
      node1.isNull();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1683), (-1683));
      node0.wasEmptyNode();
      node0.isHook();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      node0.addSuppression(" : ");
      node0.isGetElem();
      node0.isAnd();
      Node node1 = Node.newString(" : ", 63, 50);
      node0.isOnlyModifiesThisCall();
      Node node2 = node0.srcrefTree(node0);
      node0.setVarArgs(false);
      Node node3 = Node.newNumber(497.7449186448);
      node3.isEquivalentTo(node0);
      node2.isAssignAdd();
      node0.isFalse();
      node1.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node((-2071), node0, node0, node0);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      Node node4 = Node.newNumber((double) 15, 366, (-113));
      node3.getJSDocInfo();
      node2.isGetterDef();
      node0.hasOneChild();
      node4.isSetterDef();
      node2.isAdd();
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Node node0 = new Node(0);
      node0.getLength();
      node0.isHook();
      Node node1 = new Node(153, node0);
      node0.isGetElem();
      node1.isAnd();
      node0.isGetElem();
      node1.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isWhile();
      node0.isCatch();
      node0.getQualifiedName();
      node0.isCall();
      Node node1 = new Node(54, node0, node0, node0, node0);
      node0.addChildrenToBack(node1);
      node1.getLength();
      node0.isCast();
      node0.setVarArgs(false);
      node1.isStringKey();
      node1.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      int int0 = 2180;
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      Node node0 = new Node(2180, (Node) null);
      Node node1 = new Node(int0, node0, node0);
      node1.isObjectLit();
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-528), (-528), (-528));
      node0.getJSDocInfo();
      node0.isVarArgs();
      node0.isNE();
      node0.getQualifiedName();
      node0.isGetElem();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node0.isGetElem();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSType.toMaybeTemplateType((JSType) null);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = (JSType) null;
      node0.isCatch();
      node0.getAncestor((-1746));
      int int0 = 691;
      Node node1 = new Node(int0);
      node1.isStringKey();
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newNumber(0.0);
      node0.removeProp(2199);
      node0.isIn();
      Node node1 = Node.newNumber(Double.POSITIVE_INFINITY);
      node1.getStaticSourceFile();
      Node node2 = node0.getAncestor((-274));
      int int0 = 10;
      Node node3 = new Node(int0);
      node2.isStringKey();
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isCatch();
      node0.getQualifiedName();
      node0.isCall();
      Node node1 = new Node(37, node0, node0, node0, 48, 42);
      node0.isIf();
      node1.isWhile();
      node1.getInputId();
      node1.hasMoreThanOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node0.getJSDocInfo();
      node_SideEffectFlags0.setMutatesThis();
      node1.isCall();
      node1.isBreak();
      Node node2 = Node.newString(4095, "Dd!@H");
      node2.setVarArgs(false);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1705), (-1705));
      node0.type = 37;
      node0.wasEmptyNode();
      node0.isHook();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setAllFlags();
      node0.getJSDocInfo();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isCall();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = new Node(0, (-6094), 0);
      Node.newString(36, "CLM*=iA))@", 56, 47);
      Node node1 = new Node(112, node0, node0, node0, node0);
      node1.isWhile();
      node1.isVar();
      node1.isNull();
      node0.isSwitch();
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      Node node1 = Node.newNumber((double) 2, 38, 1633);
      Node node2 = new Node(51, node0, node1, node1, 16, 119);
      node1.isBreak();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.newString("Dd!@H", 103, 113);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node3.setJSDocInfo(jSDocInfo0);
      node1.isNull();
      node3.isSwitch();
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-3239), 443, (-331));
      node0.addChildrenToFront((Node) null);
      node0.toStringTree();
      node0.isBlock();
      node0.isAssign();
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-10));
      Node node0 = Node.newNumber((double) (-10), (-10), (-3712));
      node0.isName();
      node0.addChildrenToFront((Node) null);
      node0.toStringTree();
      node0.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = new Node(4095, node0, 16, 37);
      node1.isGetElem();
      node1.isDo();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      ListIterator<JSType> listIterator0 = arrayList0.listIterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
      ImmutableList<JSType> immutableList1 = immutableList0.asList();
      Node node2 = jSTypeRegistry1.createParameters((List<JSType>) immutableList1);
      node2.isDo();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSType jSType0 = linkedList0.removeLast();
      linkedList0.add(jSType0);
      JSTypeRegistry jSTypeRegistry3 = new JSTypeRegistry(simpleErrorReporter1);
      // Undeclared exception!
      try { 
        jSTypeRegistry3.createParametersWithVarArgs((List<JSType>) linkedList0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-4266), (-4266));
      Node node1 = new Node(0, 0, 748);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      String string0 = "";
      Node node3 = Node.newString("");
      Object object0 = new Object();
      node0.putProp(42, ">/\"i*[");
      node0.setWasEmptyNode(false);
      node0.isOnlyModifiesThisCall();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node3.setDirectives(set0);
      node1.isGetterDef();
      node2.srcrefTree(node1);
      // Undeclared exception!
      try { 
        node2.isEquivalentTo(node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$ObjectPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-4266), (-4266));
      Node node1 = new Node(0, 2036, 748);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      String string0 = "";
      Node node3 = Node.newString("");
      Object object0 = new Object();
      node0.putProp(2166, object0);
      node0.putProp(42, ">/\"i*[");
      node0.setWasEmptyNode(false);
      node0.isOnlyModifiesThisCall();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node3.setDirectives(set0);
      Node node4 = node2.srcrefTree(node1);
      node2.isEquivalentTo(node1);
      node3.isAssignAdd();
      node4.isFalse();
      try { 
        node0.setString(string0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$ObjectPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Node.extractLineno((-870));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2477);
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) (-870), (-870), 1048575);
      Node node1 = new Node(2477, node0, node0, node0);
      node1.isQualifiedName();
      node1.isDefaultCase();
      node1.isContinue();
      node0.isIn();
      node1.getStaticSourceFile();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("LY^e_DkC.^", false);
      node1.setStaticSourceFile(simpleSourceFile0);
      node1.isComma();
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node((-2071), (-2071), (-3680));
      Node node1 = new Node((-2071), node0, node0, node0);
      Node node2 = new Node(0, node1);
      Node node3 = node0.srcref(node2);
      Node.newNumber((-1102.7505978), (-1277), 57);
      node2.getJSDocInfo();
      node0.isGetterDef();
      node0.hasOneChild();
      node3.isSetterDef();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1705), (-1705));
      node0.type = 37;
      node0.wasEmptyNode();
      node0.isHook();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      node0.addSuppression(" : ");
      node0.isGetElem();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(154);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesArguments();
      node0.setSideEffectFlags(node_SideEffectFlags1);
      node0.setQuotedString();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.clearSideEffectFlags();
      Node[] nodeArray1 = null;
      Node node1 = new Node(node0.FLAG_ARGUMENTS_UNMODIFIED, nodeArray1);
      // Undeclared exception!
      try { 
        nodeArray0[3].isSetterDef();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1705), (-1705));
      node0.type = 37;
      node0.wasEmptyNode();
      node0.isHook();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      node0.isGetElem();
      node0.isAnd();
      node0.isGetterDef();
      node0.isSetterDef();
      node0.hasMoreThanOneChild();
      node0.setSideEffectFlags(116);
      node0.isEquivalentTo(node0, false, false, true);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Node node0 = Node.newNumber((double) 443, 443, (-571));
      node0.isBreak();
      node0.isInc();
      Node node1 = Node.newString("+.x.[/9}FNI$Gb]", 36, 524288);
      node0.mayMutateGlobalStateOrThrow();
      node0.isNew();
      node0.isLabelName();
      node0.isWith();
      node1.isDebugger();
      node0.isNumber();
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0), 443, 443);
      Node node1 = new Node(90, node0, node0, node0, 37, 1);
      node0.isIf();
      node0.isWhile();
      node0.getInputId();
      Node node2 = node1.removeChildAfter(node0);
      node2.addChildToBack(node1);
      node2.isFromExterns();
      // Undeclared exception!
      try { 
        node0.isDo();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = new Node(0, (-6098), 0);
      Node node1 = new Node(55, node0, 1516, 2719);
      node1.isEquivalentTo(node0, true, false, false);
      node0.isTrue();
      Node node2 = Node.newString(50, "");
      node1.isWhile();
      node0.getJSType();
      node2.addChildAfter(node1, node0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node((-2071), node0, node0, node0);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      node3.setChangeTime(1023);
      Object object0 = new Object();
      node2.isOnlyModifiesArgumentsCall();
      node3.setCharno(105);
      node3.getStaticSourceFile();
      Node node4 = Node.newString(2200, "com.google.javascript.rhino.Node$AncestorIterable$1");
      node1.isWhile();
      node1.isCatch();
      node4.getAncestor(2438);
      Node node5 = new Node(55);
      node4.isStringKey();
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node((-2071), node0, node0, node0);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      Node.newNumber((double) 15, 366, (-113));
      node3.getJSDocInfo();
      node3.getStaticSourceFile();
      node3.setStaticSourceFile((StaticSourceFile) null);
      node2.addSuppression((String) null);
      node2.isGetElem();
      node0.isCatch();
      Node node4 = node0.getAncestor(0);
      Node node5 = new Node(48);
      node4.isStringKey();
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node(55, node0, node0, node0);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      node3.getJSDocInfo();
      node2.addSuppression((String) null);
      node0.isCatch();
      node0.getAncestor(0);
      node3.isDelProp();
      node0.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newNumber(0.0, 152, 152);
      node0.isDelProp();
      node0.setSourceEncodedPositionForTree(119);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isWhile();
      node0.isCatch();
      node0.getQualifiedName();
      node0.isCall();
      Node node1 = new Node(54, node0, node0, node0, node0);
      node0.addChildrenToBack(node1);
      node0.isCast();
      node0.setVarArgs(false);
      node1.isStringKey();
      node1.isObjectLit();
      node1.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[2];
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      TemplateType templateType0 = jSTypeRegistry1.getObjectIndexKey();
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) templateType0);
      jSTypeArray0[0] = (JSType) objectType0;
      JSType.toMaybeTemplateType((JSType) objectType0);
      jSTypeArray0[1] = (JSType) null;
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = new Node((-1002), node0, node0);
      Node node2 = new Node(44, node1);
      Node node3 = node0.srcref(node1);
      node3.isFromExterns();
      Node node4 = Node.newNumber((double) 50, 57, 128);
      node2.getJSDocInfo();
      node1.getStaticSourceFile();
      Node.newNumber((-904.663998926));
      node4.setDouble(46);
      Node node5 = Node.newNumber(117.6);
      node5.isAssign();
      node2.isInstanceOf();
      node2.isBreak();
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-289));
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = Node.newNumber((-1932.0), (-289), 108);
      Node node1 = new Node(31, node0, node0, node0);
      node1.isOptionalArg();
      node1.isDefaultCase();
      node1.setSideEffectFlags(2);
      node1.getNext();
      Node node2 = node0.removeChildren();
      // Undeclared exception!
      try { 
        node2.isReturn();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got DELPROP
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(29, node0, 3588, (-1037));
      node0.isEquivalentTo(node1, false, false, false);
      node0.isTrue();
      Node node2 = Node.newString(46, "");
      node1.isWhile();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node2.setStaticSourceFile(simpleSourceFile0);
      node0.isComma();
      node1.setType(117);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Node node0 = new Node(0);
      node0.wasEmptyNode();
      node0.getLength();
      node0.isHook();
      node0.setType(0);
      Node node1 = new Node(153, node0);
      node1.addSuppression(" : ");
      node0.isGetElem();
      node1.isAnd();
      node0.isGetElem();
      node1.isGetterDef();
      node1.isSetterDef();
      node1.isAdd();
      node1.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      Node node1 = Node.newNumber((double) 2, 38, 1633);
      Node node2 = new Node(51, node0, node1, node1, 16, 119);
      node2.setSourceEncodedPosition(2292);
      node1.isBreak();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.newString("Dd!@H", 103, 113);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      InputId inputId0 = new InputId("Object#Key");
      node3.setInputId(inputId0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node3.setJSDocInfo(jSDocInfo0);
      node1.isNull();
      node3.isSwitch();
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isWhile();
      node0.isCall();
      Node node1 = new Node(54, node0, node0, node0, node0);
      node0.addChildrenToBack(node1);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node1.isCase();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      InputId inputId0 = new InputId("");
      node1.setInputId(inputId0);
      node1.isLabelName();
      node0.isOr();
      node1.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.getQualifiedName();
      node0.isCall();
      node0.isBreak();
      node0.setVarArgs(false);
      node0.isInc();
      Node node1 = Node.newString(" c@", 32, 43);
      node1.mayMutateGlobalStateOrThrow();
      node1.isNew();
      node1.isLabelName();
      node1.isWith();
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(46, nodeArray0);
      Node node1 = new Node(37, node0, node0, node0, node0, (-1104), 0);
      node0.isWhile();
      node0.isDelProp();
      node1.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0), 443, (-571));
      Node node1 = new Node(90, node0, node0, node0, 37, 1);
      node0.isIf();
      node0.isWhile();
      node0.getInputId();
      node1.hasMoreThanOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setAllFlags();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node1.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.getStaticSourceFile();
      node0.mayMutateGlobalStateOrThrow();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isGetElem();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node0.isGetElem();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.isParamList();
      InputId inputId0 = new InputId("");
      Node node1 = new Node(3375, node0, node0);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      node_NodeMismatch0.equals(jSTypeRegistry1);
      Node.extractLineno(39);
      node0.isVarArgs();
      node0.getIntProp(1115);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1683), (-1683));
      node0.wasEmptyNode();
      int int0 = 130;
      Node node1 = new Node(39, 130, 42);
      node1.isGetProp();
      node1.setString((String) null);
      int int1 = 4095;
      Node node2 = new Node(int1);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node2;
      nodeArray0[1] = node0;
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1683), (-1683));
      node0.wasEmptyNode();
      Node node1 = new Node(39, 130, 42);
      node1.isSetterDef();
      node1.setString((String) null);
      int int0 = 31;
      Node node2 = new Node(int0);
      int int1 = (-3538);
      Node[] nodeArray0 = null;
      Node node3 = new Node(int1, nodeArray0);
      // Undeclared exception!
      try { 
        node3.srcrefTree(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.getStaticSourceFile();
      node0.isNull();
      node0.isGetElem();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node0.isCase();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.isExprResult();
      node0.isLabelName();
      node0.isWith();
      node0.siblings();
      node0.setSourceEncodedPositionForTree(1023);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(530);
      node_SideEffectFlags0.valueOf();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(530, 93, (-352));
      Node node1 = Node.newNumber(1332.028682451);
      Node node2 = new Node(530, node0, node1, 54, 4095);
      JSType.toMaybeTemplateType((JSType) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("y[AAB1u!1>Av474)iQ-", node2, (JSType) null);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      JSDocInfo jSDocInfo0 = enumElementType1.getJSDocInfo();
      Node node3 = jSDocInfo0.getAssociatedNode();
      node3.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-519), (-519));
      node0.getJSDocInfo();
      node0.getStaticSourceFile();
      node0.isGetElem();
      Node node1 = new Node(54, node0);
      Node node2 = node0.getLastSibling();
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node2.isFunction();
      node1.setVarArgs(false);
      node0.copyInformationFromForTree((Node) null);
      node0.isSetterDef();
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Node node0 = new Node(44, 44, 44);
      Node node1 = new Node(32, node0, node0, 49, 12);
      Node node2 = Node.newString("| oVJe{[r!@2AN`4!3", 4095, 12);
      Node node3 = Node.newString(55, "| oVJe{[r!@2AN`4!3");
      node3.addSuppression("| oVJe{[r!@2AN`4!3");
      node3.getSourceOffset();
      node3.getJSDocInfo();
      node1.isThrow();
      node3.isBreak();
      Node node4 = new Node((-1124), node2, node2, node0);
      node4.isDelProp();
      node1.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(115, 115, 1023);
      Node node1 = new Node(336, node0);
      node1.setChangeTime(47);
      Node node2 = new Node(52, 1162, 50);
      Node node3 = node2.cloneNode();
      node3.setLineno((-725));
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      node1.getSourceOffset();
      node2.getJSDocInfo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-725));
      node_SideEffectFlags0.setMutatesThis();
      Node node4 = Node.newString("Object#Element");
      node4.isSetterDef();
      node0.setSideEffectFlags(36);
      node3.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Node node0 = new Node(44, 44, 4096);
      Node node1 = new Node(29, node0);
      node0.setChangeTime(51);
      Node node2 = node1.cloneNode();
      node0.setLineno(44);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.getSourceOffset();
      node0.getJSDocInfo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(321);
      node_SideEffectFlags0.setMutatesThis();
      Node.newString("Object#Element");
      node2.isSetterDef();
      node1.getLastChild();
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node((-2071), node0, node0, node0);
      Node node2 = new Node(50, node1);
      node2.srcref(node0);
      node2.isFromExterns();
      Node.newNumber((double) 15, 366, (-113));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags5.clearAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      node1.isReturn();
      Node node3 = node2.useSourceInfoIfMissingFrom(node0);
      node2.cloneNode();
      node3.isWhile();
      node0.getJSType();
      node1.addChildAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Node node0 = new Node(280);
      Node node1 = Node.newNumber((double) 2, 2, 1285);
      node1.wasEmptyNode();
      node0.isHook();
      node1.addSuppression(" : ");
      node1.isGetElem();
      node0.isAnd();
      node0.isGetElem();
      node1.isGetterDef();
      node1.hasOneChild();
      node0.isSetterDef();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Node node0 = Node.newNumber(497.7449186448, 149, 0);
      node0.wasEmptyNode();
      node0.isHook();
      node0.addSuppression(" : ");
      node0.isGetElem();
      node0.isAnd();
      Node node1 = Node.newString(" : ", (-1683), 56);
      node0.isOnlyModifiesThisCall();
      Node node2 = node0.srcrefTree(node1);
      node0.setVarArgs(false);
      Node.newNumber(0.5);
      node0.isEquivalentTo(node2);
      node2.isAssignAdd();
      node1.isFalse();
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node((-2071), node0, node0, node0);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      node3.setChangeTime(1023);
      Object object0 = new Object();
      node2.isOnlyModifiesArgumentsCall();
      node3.setCharno(105);
      node3.getStaticSourceFile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      node2.setChangeTime(47);
      jSTypeArray0[0] = jSType0;
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node4.isIf();
      jSTypeRegistry0.getObjectElementKey();
      node0.isStringKey();
      node4.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Node node0 = Node.newNumber(497.7449186448, 149, 0);
      node0.wasEmptyNode();
      node0.isHook();
      node0.addSuppression(" : ");
      node0.isGetElem();
      node0.isAnd();
      Node node1 = Node.newString(" : ", (-1683), 56);
      node0.isOnlyModifiesThisCall();
      node0.srcrefTree(node1);
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(254, nodeArray0);
      Node node3 = new Node(2, node2, 41, 55);
      node3.srcrefTree(node2);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(29, node0, 3588, (-1037));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.isCase();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.isExprResult();
      node0.isLabelName();
      node1.isWith();
      node1.siblings();
      node1.setSourceEncodedPositionForTree(1018);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newString(0, "'z6gFTHV!", 0, 0);
      Node node1 = node0.cloneNode();
      Node node2 = new Node((-4304), node0, node0, node0, node1, 46, 57);
      int int0 = Node.COLUMN_BITS;
      node2.setSourceEncodedPositionForTree(1655);
      node2.isEquivalentToTyped(node1);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node2.putIntProp(37, 16);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node2);
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isWhile();
      node0.setSourceEncodedPositionForTree(1446);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(55, nodeArray0);
      node1.isEquivalentToTyped(node0);
      node0.putIntProp(54, 1);
      node0.setString("");
      Node node2 = new Node(1896);
      Node.newNumber((double) 36);
      Node node3 = new Node(35, nodeArray0);
      node0.srcrefTree(node3);
      node2.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = node0.getLastSibling();
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isEquivalentToTyped(node2);
      node2.putIntProp(48, 2);
      Node.newString(29, "");
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node3.removeChild(node1);
      node3.isCatch();
      // Undeclared exception!
      try { 
        node2.isString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1683), (-1683));
      node0.wasEmptyNode();
      Node node1 = Node.newNumber(497.7449186448, 57, 30);
      node1.addChildrenToFront(node0);
      node0.toStringTree();
      node1.isAssign();
      node0.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isWhile();
      node0.isLabel();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("Dd!@H");
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>(1186);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) linkedHashSet0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node1 = new Node(1186, node0, node0, node0, 1, 54);
      node1.mayMutateGlobalStateOrThrow();
      node0.isLabel();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Object#Element");
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Node node0 = Node.newString(13, "a!]", 4426, 97);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isWhile();
      node0.getJSType();
      node0.getStaticSourceFile();
      Node node1 = new Node(12, node0, node0, node0, node0, 1574, 39);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node1.addChildAfter(node2, node0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = "DQFmmHNsq0O3=R";
      Node node0 = new Node(0);
      String string1 = "*J";
      node0.getDouble();
      // Undeclared exception!
      try { 
        node0.isGetElem();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.getStaticSourceFile();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node.newString("Dd!@H", 37, 47);
      node0.isIf();
      Node node1 = Node.newString(3, "Object#Key");
      node1.getDouble();
      Node node2 = new Node(node1.MAX_COLUMN_NUMBER);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Node node0 = new Node(0);
      Node.newNumber((double) 47);
      Node node1 = new Node(4095, node0, 36, 53);
      node0.getIntProp((-1034));
      node1.isAdd();
      node0.isLabel();
      node0.getSourcePosition();
      node1.isDo();
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(44, nodeArray0);
      node0.isWhile();
      node0.isCatch();
      node0.getQualifiedName();
      Node node1 = Node.newString(2383, "com.google.javascript.rhino.Node$ObjectPropListItem", 2197, 108);
      Node node2 = new Node(438, node0, node0, node1);
      node1.isQualifiedName();
      node1.isDefaultCase();
      node1.isContinue();
      node2.isIn();
      node2.getStaticSourceFile();
      node2.getJSType();
      node2.addChildAfter(node0, node1);
      int int0 = 152;
      int int1 = 2618;
      Node.newNumber((double) node0.VAR_ARGS_NAME, int0, int1);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.isWhile();
      node0.isCatch();
      node0.getQualifiedName();
      node0.isCall();
      node0.isBreak();
      node0.setVarArgs(false);
      node0.isDec();
      Node node1 = Node.newString(" c@", 32, 43);
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node1.setDirectives(set0);
      node1.isHook();
      node0.addSuppression((String) null);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = node0.getLastSibling();
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node1.isLabelName();
      node2.putIntProp(19, 2);
      node2.getNext();
      node1.removeChildren();
      Node node3 = new Node(5760);
      node3.isReturn();
      node0.useSourceInfoIfMissingFrom(node3);
      node0.replaceChild(node2, (Node) null);
      Node.newString(jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE);
      int int0 = 40;
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newNumber(0.0, (-519), (-519));
      node0.getJSDocInfo();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isGetElem();
      node0.isAnd();
      node0.isGetElem();
      Node node1 = new Node(53, node0, node0, node0, node0);
      node1.isContinue();
      node1.isIn();
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      boolean boolean0 = node0.isScript();
      node0.addChildrenToFront(node1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("com.google.common.base.Predicates$ContainsPatternPredicate", "com.google.common.base.Predicates$ContainsPatternPredicate");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, boolean0);
      node0.appendStringTree(mockPrintWriter1);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Node[] nodeArray0 = new Node[8];
      Node node0 = new Node((-289), (-289), (-289));
      nodeArray0[0] = node0;
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1705), (-1705));
      node0.type = 37;
      node0.wasEmptyNode();
      node0.isHook();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      node0.setString("");
      int int0 = (-643);
      Node node1 = new Node(int0);
      node1.getSourceFileName();
      // Undeclared exception!
      try { 
        node1.getSourcePosition();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CALL is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.getQualifiedName();
      node0.isCall();
      node0.isBreak();
      node0.setVarArgs(false);
      node0.isInc();
      Node node1 = new Node(16, node0, node0, node0, node0, 47, 47);
      node1.mayMutateGlobalStateOrThrow();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.getProp(47);
      node1.isLabelName();
      node1.isWith();
      node1.addChildrenAfter(node2, node2);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-528), (-528), (-528));
      Node node1 = new Node(48, node0, node0, node0, 147, 12);
      node0.isIf();
      node1.isUnscopedQualifiedName();
      node0.isWhile();
      node1.getInputId();
      node0.hasMoreThanOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      node0.replaceChild(node1, node1);
      String string0 = "_n7In-T(8n4OkK|4";
      // Undeclared exception!
      try { 
        Node.newString(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node((-289), (-289), 3618);
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = new Node(50, node0);
      node1.isCase();
      node0.isLabelName();
      node1.isOr();
      node0.getCharno();
      node0.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Node node0 = new Node(280);
      Node node1 = new Node(4095, node0, node0, node0);
      node1.isName();
      node1.addChildrenToFront(node0);
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0), 443, (-571));
      Node node1 = new Node(90, node0, node0, node0, 37, 1);
      node0.isIf();
      node0.isWhile();
      Node node2 = Node.newString("ARRAY_TYPE", 43, 15);
      node2.isContinue();
      node1.isIn();
      node2.getStaticSourceFile();
      node2.setStaticSourceFile((StaticSourceFile) null);
      node2.isScript();
      node2.addChildrenToFront(node0);
      String string0 = "com.google.common.collect.Lists$AbstractListWrapper";
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0, string1);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Node node0 = Node.newNumber((double) 443, (-3254), (-938));
      Node node1 = Node.newString("_J4eD'm1P");
      node1.toStringTree();
      node1.isBlock();
      node1.isAssign();
      node0.getDouble();
      node1.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(31, 31, 1186);
      node0.isWhile();
      node0.putProp((-579), simpleErrorReporter0);
      node0.setString(",gFc3k)aW");
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Node node0 = new Node(0);
      node0.getLength();
      node0.isHook();
      Node node1 = new Node(153, node0);
      node1.addSuppression(" : ");
      node0.isGetElem();
      node1.setDouble(54);
      node1.isAssign();
      node0.isInstanceOf();
      // Undeclared exception!
      try { 
        node0.getBooleanProp(node1.INCRDECR_PROP);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // LABEL_NAME [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Node node0 = new Node((-1640), 8232, 148);
      Node node1 = new Node(12, node0, node0, (-1640), 49);
      node1.setChangeTime(36);
      Node node2 = node1.cloneNode();
      node0.setLineno(37);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getSourceOffset();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node2.setDouble(39);
      String string0 = "t";
      int int0 = 77;
      int int1 = 556;
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Node node0 = new Node(44, 44, 4096);
      Node node1 = new Node(32, node0, node0, 49, 12);
      String string0 = "| oVJe{[r!@2AN`4!3";
      node0.setChangeTime(51);
      Node node2 = node1.cloneNode();
      node0.setLineno(44);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.getSourceOffset();
      JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node node3 = Node.newString("Object#Element");
      node3.hasChildren();
      String string1 = "";
      MockFile mockFile0 = new MockFile("Object#Key", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale(string0, jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE, jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      Object object0 = node3.getProp(node1.OPT_ARG_NAME);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) node_SideEffectFlags0;
      objectArray0[3] = (Object) node_SideEffectFlags1;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) jSDocInfo0;
      objectArray0[6] = (Object) node3;
      Object object1 = node2.getProp(node1.QUOTED_PROP);
      objectArray0[7] = object1;
      objectArray0[8] = (Object) node3;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE, objectArray0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, boolean0);
      PrintWriter printWriter1 = mockPrintWriter1.format(string1, objectArray0);
      node1.appendStringTree(printWriter1);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(50);
      node0.wasEmptyNode();
      node0.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node1.getAncestors();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node0.isReturn();
      node0.useSourceInfoIfMissingFrom(node1);
      Node node2 = new Node(674, 65536, 674);
      node0.isWhile();
      node0.getJSType();
      Node node3 = new Node((-230));
      node1.addChildAfter(node3, node3);
      node3.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.getQualifiedName();
      Node node1 = new Node(147, node0, node0, node0, 37, 38);
      node1.isIf();
      node1.isWhile();
      node1.getInputId();
      node1.hasMoreThanOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags2.setAllFlags();
      node1.getJSDocInfo();
      node0.mayMutateGlobalStateOrThrow();
      node1.checkTreeEquals(node0);
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(153, node0, node0);
      node0.isDefaultCase();
      node1.checkTreeEquals(node0);
      Node node2 = node1.copyInformationFrom(node0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Node tree inequality:\nTree1:\nLABEL_NAME\n    STRING \n\n\nTree2:\nSTRING \n\n\nSubtree1: LABEL_NAME\n    STRING \n\n\nSubtree2: STRING \n");
      node0.getLineno();
      Node node3 = node1.copyInformationFromForTree(node0);
      node0.isTypeOf();
      node2.replaceChild(node0, node3);
      node2.isFor();
      Node node4 = Node.newNumber(654.8733539292394, 97, 4095);
      node1.wasEmptyNode();
      node0.getIndexOfChild(node4);
      node2.isUnscopedQualifiedName();
      node3.children();
      Node node5 = node2.removeFirstChild();
      node5.cloneTree();
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = new Node(0, (-6098), 0);
      Node node1 = new Node(112, node0, node0, node0, node0);
      node1.isWhile();
      Node node2 = new Node(4, node1);
      node1.replaceChild(node0, node2);
      node2.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Node node0 = Node.newString("d61 (sB7GJ}wY)>b38", (-10), 49);
      node0.isFor();
      Node node1 = new Node(49, node0, node0);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Node node0 = Node.newString(0, "");
      Node node1 = new Node(1262, node0, node0, node0, 0, 56);
      Node node2 = Node.newString("");
      Node.newString(16, "");
      Node node3 = node1.getLastSibling();
      node3.checkTreeTypeAwareEqualsImpl(node1);
      node2.isFunction();
      node1.addChildrenToFront(node2);
      node0.setVarArgs(false);
      Node node4 = node3.copyInformationFromForTree(node1);
      node1.isSetterDef();
      node2.isThis();
      node0.getJSDocInfo();
      node4.cloneTree();
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[8];
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      jSTypeArray0[0] = (JSType) templateType0;
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY, 1, 0);
      Node node1 = new Node((-590), 47, (-1683));
      Node node2 = new Node(116, node0, node1, node1, node0, 148, 2987);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node2, templateType0);
      ObjectType objectType0 = enumType0.getImplicitPrototype();
      jSTypeArray0[1] = (JSType) objectType0;
      TemplateType templateType1 = jSTypeRegistry0.createTemplateType("Not declared as a type name");
      jSTypeArray0[2] = (JSType) templateType1;
      EnumType enumType1 = jSTypeRegistry0.createEnumType("Not declared as a type name", node1, enumType0);
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      JSType jSType0 = enumElementType1.getPrimitiveType();
      jSTypeArray0[3] = jSType0;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType1 = modificationVisitor0.caseNumberType();
      jSTypeArray0[4] = jSType1;
      EnumElementType enumElementType2 = enumElementType0.toMaybeEnumElementType();
      jSTypeArray0[5] = (JSType) enumElementType2;
      modificationVisitor0.caseNumberType();
      node1.isNew();
      node2.isLabelName();
      node2.isWith();
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(324, 324, 2154);
      node0.isGetElem();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      node0.isCase();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      node0.isExprResult();
      node0.isLabelName();
      Node node1 = Node.newString(49, "Object#Key", 17, 57);
      node0.isWith();
      Node.newString("Object#Key");
      node1.setSourceEncodedPositionForTree(16);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1683), (-1683), 0);
      node0.wasEmptyNode();
      node0.isHook();
      node0.isGetElem();
      node0.isAnd();
      Node node1 = Node.newString(" : ", (-1683), 56);
      node0.isOnlyModifiesThisCall();
      Node node2 = node0.srcrefTree(node1);
      node0.setVarArgs(false);
      Node.newString(" : ");
      Node.newNumber(0.5);
      node0.isEquivalentTo(node2);
      node2.isAssignAdd();
      node1.isFalse();
      node1.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1683), (-1683));
      node0.isCatch();
      node0.isHook();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = Node.newString(31, "");
      node1.setCharno(356);
      node0.getStaticSourceFile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", node1, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumType enumType2 = enumType1.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType2.getElementsType();
      enumElementType0.toMaybeEnumElementType();
      node0.checkTreeEqualsImpl(node0);
      enumElementType0.getPropertyNode("Not declared as a constructor");
      node0.getInputId();
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-528), (-528), (-528));
      Node node1 = new Node(48, node0, node0, node0, 147, 12);
      node0.isIf();
      node1.isUnscopedQualifiedName();
      node0.isWhile();
      node1.getInputId();
      node0.hasMoreThanOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.isOr();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      node1.srcrefTree((Node) null);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Node node0 = new Node((-6098));
      Node node1 = new Node(36, node0, node0, node0, node0, 2, 1);
      node1.isWhile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.isDelProp();
      node1.getProp(8);
      node0.isOr();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("Object#Key");
      Node node1 = new Node(21, node0, 55, 54);
      node1.putProp(1032, jSTypeRegistry0);
      node1.isTrue();
      InputId inputId0 = new InputId("I{zXNbr");
      node1.isRegExp();
      node0.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = node0.getLastSibling();
      node1.useSourceInfoIfMissingFromForTree(node0);
      node1.isEquivalentToTyped(node0);
      node1.putIntProp(15, 0);
      Node.newString(57, "Object#Element");
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node2.removeChild(node1);
      String string0 = "j%CB]az)WCgS \"J`y|I";
      // Undeclared exception!
      try { 
        Node.newString(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(153, node0, node0);
      node1.isDefaultCase();
      node1.checkTreeEquals(node0);
      Node node2 = node1.copyInformationFrom(node0);
      node1.toString(false, true, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Node tree inequality:\nTree1:\nLABEL_NAME\n    STRING \n\n\nTree2:\nSTRING \n\n\nSubtree1: LABEL_NAME\n    STRING \n\n\nSubtree2: STRING \n");
      node0.getLineno();
      Node node3 = Node.newString("Node tree inequality:\nTree1:\nLABEL_NAME\n    STRING \n\n\nTree2:\nSTRING \n\n\nSubtree1: LABEL_NAME\n    STRING \n\n\nSubtree2: STRING \n", 1191, 304);
      node3.getAncestors();
      node2.putIntProp(47, 118);
      node1.isQualifiedName();
      node2.isEmpty();
      Node node4 = node0.detachFromParent();
      node2.clonePropsFrom(node4);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Node node0 = new Node(44, 44, 4096);
      Node node1 = new Node(32, node0, 4095, 52);
      String string0 = "| oVJe{[r!@2AN`4!3";
      node0.setChangeTime(51);
      Node node2 = node1.cloneNode();
      node0.setLineno(44);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.getSourceOffset();
      node0.getJSDocInfo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node node3 = Node.newString("Object#Element");
      node3.hasChildren();
      MockFile mockFile0 = new MockFile("Object#Key", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(jSTypeRegistry0.OBJECT_INDEX_TEMPLATE);
      Locale locale0 = new Locale(string0, jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE, jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      Object object0 = node3.getProp(node1.OPT_ARG_NAME);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) node_SideEffectFlags0;
      objectArray0[3] = (Object) node_SideEffectFlags1;
      Node.newString(string0);
      Node node4 = new Node(node0.SIDE_EFFECTS_ALL);
      node0.getSourceFileName();
      node0.clonePropsFrom(node3);
      double double0 = 0.0;
      node2.setDouble(double0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Node node0 = Node.newString("K1");
      node0.isWhile();
      node0.setSourceEncodedPositionForTree(4426);
      Node node1 = new Node((-1271), node0, node0, 53, 31);
      node0.isEquivalentToTyped(node0);
      node0.putIntProp(54, 46);
      node0.setString("");
      Node node2 = new Node(90);
      Node node3 = new Node(9, node2, node1, node2);
      node1.getStaticSourceFile();
      node0.getSourceFileName();
      node3.hasChild(node1);
      node3.getAncestors();
      node0.getProp(53);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) 443, (-711), 443);
      Node node1 = new Node(443, node0);
      node1.isWhile();
      node0.isCatch();
      node0.getQualifiedName();
      node1.isCall();
      node0.isBreak();
      node1.setVarArgs(true);
      node1.isDec();
      Node node2 = Node.newString((String) null, 50, 153);
      node2.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Node node0 = Node.newString("=FYb9ZCX", 67, 67);
      node0.getProp(67);
      Node node1 = new Node(39, node0, 21, (-4587));
      node1.getInputId();
      node1.isEquivalentTo(node0);
      node1.isEquivalentToShallow(node0);
      node0.isAnd();
      Node node2 = node1.cloneTree();
      node1.isQualifiedName();
      node2.type = (-604);
      node2.isEquivalentTo(node1, false, false, false);
      node1.hasOneChild();
      Node.newString("", 36, 77);
      node0.putIntProp(67, (-206));
      node0.isQualifiedName();
      node1.isEmpty();
      node2.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Node node0 = new Node(0, (-6098), 0);
      Node node1 = new Node(36, node0, node0, node0, node0, 2, 1);
      node1.isWhile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node1.isArrayLit();
      node0.isDebugger();
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Node node0 = Node.newString("=FYb9ZCX", 67, 67);
      node0.getProp(67);
      Node node1 = new Node(39, node0, 21, (-4587));
      node1.getInputId();
      node1.isEquivalentTo(node0);
      node1.isEquivalentToShallow(node0);
      node0.isAnd();
      Node node2 = node1.cloneTree();
      node1.isQualifiedName();
      node2.type = (-604);
      node2.isEquivalentTo(node1, false, false, false);
      node1.hasOneChild();
      Node node3 = Node.newString("", 36, 77);
      node3.checkTreeEquals(node0);
      Node node4 = node1.srcrefTree(node2);
      node2.isGetterDef();
      node0.getChildBefore(node4);
      String string0 = null;
      Node.newString(string0);
      node2.toStringTree();
      node0.toStringTree();
      node2.getCharno();
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.getStaticSourceFile();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node0.isCase();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.isExprResult();
      Node node1 = Node.newString("input_id");
      node1.isEquivalentToTyped(node0);
      node0.addChildToFront(node1);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node((-289), (-289), (-289));
      nodeArray0[0] = node0;
      Node node1 = new Node((-289), node0, 32, 4095);
      node0.getChildBefore(node1);
      nodeArray0[0].addChildToFront(node0);
      // Undeclared exception!
      try { 
        node0.isWhile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      node0.getQualifiedName();
      node0.isCall();
      node0.isBreak();
      Node node1 = new Node(52, node0, node0, (-497), (-1253));
      node1.isEquivalentToTyped(node0);
      node1.putIntProp(284, 2);
      node1.setString("=FYb9ZCX");
      int int0 = (-1076);
      Node node2 = new Node(int0);
      Node node3 = Node.newNumber((double) node2.COLUMN_MASK);
      node2.srcrefTree(node3);
      // Undeclared exception!
      try { 
        node0.getSourceOffset();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 284
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1705), (-1705));
      node0.type = 37;
      node0.wasEmptyNode();
      node0.isHook();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.isOr();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1705), (-1705));
      node0.type = 37;
      node0.wasEmptyNode();
      node0.isHook();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.isOr();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-528), (-528), (-528));
      Node node1 = new Node(48, node0, node0, node0, 147, 12);
      node0.isIf();
      node1.isUnscopedQualifiedName();
      node0.isWhile();
      node1.getInputId();
      node0.hasMoreThanOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node0.setCharno(39);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.isOr();
      node0.isOnlyModifiesArgumentsCall();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable((Node) null);
      node_AncestorIterable0.iterator();
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Node node0 = Node.newString("=FYb9ZCX", 67, 67);
      Node node1 = new Node(39, node0, 21, (-4587));
      node1.getInputId();
      node1.isEquivalentTo(node0);
      node1.isEquivalentToShallow(node0);
      node0.isAnd();
      node1.isQualifiedName();
      node0.isEquivalentTo(node1, false, false, false);
      node1.hasOneChild();
      Node node2 = Node.newString("=FYb9ZCX", 36, 77);
      node2.checkTreeEquals(node0);
      Node node3 = node1.srcrefTree(node0);
      node3.removeFirstChild();
      node1.isGetterDef();
      node0.getChildBefore(node3);
      String string0 = null;
      Node.newString(string0);
      node1.toStringTree();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node1);
      node_NodeMismatch0.equals(node2);
      node0.toStringTree();
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Node node0 = Node.newString("@)xo bee/V-qRP$6g");
      node0.isWhile();
      node0.isCatch();
      boolean boolean0 = node0.isTry();
      Node node1 = new Node(43, node0, node0, node0, node0);
      Node node2 = new Node(1574, (-1917), 52);
      node2.addChildrenToBack(node0);
      node0.setVarArgs(boolean0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setReturnsTainted();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0));
      node0.isCall();
      Node node1 = new Node(40, node0, node0, node0, node0);
      node1.addChildrenToBack(node0);
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = null;
      try {
        jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newString(0, "'z6gFTHV!", 0, 0);
      Node node1 = node0.cloneNode();
      Node node2 = new Node((-4304), node0, node0, node0, node1, 46, 57);
      int int0 = Node.COLUMN_BITS;
      node2.isEquivalentToTyped(node1);
      node2.putIntProp((-485), 16);
      node_SideEffectFlags0.clearAllFlags();
      node1.replaceChild(node2, node0);
      String string0 = "T9(aVNzk/\\";
      Node node3 = Node.newString(string0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      Node node4 = null;
      try {
        node4 = new Node(node3.CHANGE_TIME, node1, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = new Node(8, node0, node0, node0, 16, 12);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      node3.setChangeTime(1023);
      Object object0 = new Object();
      node2.isOnlyModifiesArgumentsCall();
      node3.setCharno(105);
      node3.getStaticSourceFile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      node2.setChangeTime(47);
      jSTypeArray0[0] = jSType0;
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node4.isIf();
      jSTypeRegistry0.getObjectElementKey();
      node0.isStringKey();
      node4.isObjectLit();
      node2.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Node node0 = new Node(1266);
      Node node1 = new Node(40, node0, 2700, 36);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isEquivalentTo(node2, false, true, true);
      node2.isTrue();
      Node.newString(29, "");
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node((-2071), node0, node0, node0);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      node2.isFromExterns();
      Node node4 = Node.newNumber((double) 15, 366, (-113));
      node3.getJSDocInfo();
      node1.isCall();
      node3.isBreak();
      node2.setVarArgs(false);
      node2.isDec();
      Node node5 = Node.newString("a7`6Dv", 53, 30);
      node0.isEquivalentTo(node5, false, false, false);
      Node node6 = node1.useSourceInfoFrom(node0);
      node3.addChildBefore(node4, node6);
      node5.useSourceInfoFrom(node2);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Node node0 = new Node((-5285));
      Node node1 = new Node(50);
      node0.wasEmptyNode();
      node0.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node1.getAncestors();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node node3 = new Node(677, 65536, 677);
      node0.isWhile();
      node1.isString();
      node2.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = new Node(44);
      node0.wasEmptyNode();
      node0.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node node2 = Node.newNumber(238.3023, 57, 51);
      node0.isName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.wasEmptyNode();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.isDec();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.getSourceFileName();
      Node node3 = new Node(57, (Node[]) null, (-2520), 49);
      node2.addChildrenAfter(node1, node3);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Node node0 = Node.newString("");
      node0.isWhile();
      node0.isCatch();
      node0.isCall();
      Node node1 = new Node(54, node0, node0, node0, node0);
      node0.addChildrenToBack(node1);
      node0.isCast();
      node0.setVarArgs(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags5.clearAllFlags();
      node1.isArrayLit();
      node0.isDebugger();
      node1.getChildBefore(node0);
      node1.getType();
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(50);
      Node node2 = node1.srcref(node0);
      node2.isFromExterns();
      Node node3 = Node.newNumber((double) 16, 4095, 43);
      node2.getJSDocInfo();
      node2.isCall();
      node0.setVarArgs(false);
      node0.isDec();
      Node.newString("z!^G'9!;]5Rhp'", (-1435), 42);
      node1.isEquivalentTo(node2, false, false, false);
      node0.useSourceInfoFrom(node3);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Node node0 = Node.newString(0, "");
      Node node1 = new Node(0, node0, node0, node0, 0, 56);
      Node node2 = Node.newString("");
      Node node3 = new Node(0, node1);
      Node node4 = node1.getLastSibling();
      node0.getLength();
      node4.checkTreeTypeAwareEqualsImpl(node1);
      node2.isFunction();
      node0.setVarArgs(false);
      node4.copyInformationFromForTree(node1);
      node1.isSetterDef();
      node2.isThis();
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newNumber(0.0);
      node_SideEffectFlags0.setThrows();
      Node node1 = new Node(32, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      node2.toStringTree();
      node1.isNull();
      Node node3 = new Node(29, node1, node1, node0, node0, 54, 110);
      node3.isSwitch();
      node0.setLineno(node1.EMPTY_BLOCK);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node((-2071), node0, node0, node0);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      node3.setChangeTime(1023);
      Object object0 = new Object();
      node0.getAncestors();
      Node node4 = new Node(53, 309, 49);
      node0.copyInformationFrom(node4);
      node1.getChildCount();
      node3.removeProp((-142));
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-971));
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(4215);
      node0.isStringKey();
      node0.isRegExp();
      node0.isBlock();
      node0.getDirectives();
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.JSDocInfo$StringPosition");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.removeFirstChild();
      node0.addChildToBack((Node) null);
      String string0 = "=FYb9ZCX";
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Node node0 = new Node(209);
      node0.mayMutateArguments();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isDelProp();
      Node node1 = Node.newNumber((double) 36, 4, 29);
      node0.isQualifiedName();
      node0.clonePropsFrom((Node) null);
      node1.isNoSideEffectsCall();
      node0.addChildToFront(node1);
      // Undeclared exception!
      try { 
        node1.addChildAfter(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1705), (-1705));
      node0.type = 37;
      node0.wasEmptyNode();
      node0.isHook();
      Node[] nodeArray0 = new Node[7];
      Node node1 = new Node(4, nodeArray0[4], (-1379), 2053);
      node1.isWhile();
      int int0 = 2235;
      String string0 = "IkiOcI/D^&/h";
      Node node2 = Node.newString(int0, string0);
      // Undeclared exception!
      try { 
        node2.getJSType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Node.extractLineno((-870));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2477);
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags2.areAllFlagsSet();
      Node node0 = Node.newNumber((double) (-870), (-870), 1048575);
      Node node1 = new Node(36);
      node0.isStringKey();
      node1.isEquivalentToTyped(node0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Node node0 = new Node(44, 44, 4096);
      Node node1 = new Node(32, node0, node0, 49, 12);
      String string0 = "| oVJe{[r!@2AN`4!3";
      node0.setChangeTime(51);
      Node node2 = node1.cloneNode();
      node0.setLineno(44);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.getSourceOffset();
      node0.getJSDocInfo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node node3 = Node.newString("Object#Element");
      node3.hasChildren();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("Object#Key", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale(string0, jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE, jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      PriorityQueue<TemplateType> priorityQueue0 = new PriorityQueue<TemplateType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) priorityQueue0);
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.useSourceInfoIfMissingFrom(node4);
      int int0 = 1532;
      Node node5 = new Node(node2.SIDE_EFFECTS_FLAGS_MASK, int0, node0.LAST_PROP);
      int int1 = 32;
      int int2 = (-156);
      int int3 = 32;
      Node node6 = new Node(int1, node5, node4, node0, node5, int2, int3);
      node6.isWhile();
      node4.toStringTree();
      node4.isAssign();
      // Undeclared exception!
      try { 
        node5.setQuotedString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>(1186);
      ImmutableList.copyOf((Iterable<? extends JSType>) linkedHashSet0);
      String string0 = "9Z\"LjBUEZOMCkJ;";
      Node node0 = Node.newString(1320, "9Z\"LjBUEZOMCkJ;", 1186, 1320);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node0.appendStringTree((Appendable) null);
      node_FileLevelJsDocBuilder0.append(string0);
      node_FileLevelJsDocBuilder0.append(string0);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Node node0 = new Node(0);
      node0.wasEmptyNode();
      node0.isHook();
      Node node1 = new Node(153, node0);
      node0.isGetElem();
      node0.isGetElem();
      node1.isUnscopedQualifiedName();
      Node node2 = Node.newNumber((double) 52, 46, 1);
      node2.children();
      Node node3 = node1.removeFirstChild();
      node2.cloneTree();
      node0.isSwitch();
      node2.getIndexOfChild(node3);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Node node0 = new Node(97);
      node0.isGetProp();
      Node node1 = new Node(54, 39, 1);
      node0.copyInformationFromForTree(node1);
      node0.setString((String) null);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node2 = null;
      try {
        node2 = new Node(node0.SIDE_EFFECTS_FLAGS_MASK);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ASSIGN_MOD 39 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Node node0 = new Node(0);
      node0.wasEmptyNode();
      node0.isHook();
      Node node1 = new Node(153, node0);
      node1.addSuppression(" : ");
      node0.isGetElem();
      node1.isAnd();
      node0.isGetElem();
      Node node2 = Node.newString(" : ");
      node2.mayMutateArguments();
      Node node3 = new Node((-580));
      node1.getSourceFileName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      Node node1 = Node.newNumber((double) 2, 38, 56);
      node1.isGetProp();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      node1.isAnd();
      Node node2 = node0.cloneTree();
      Node node3 = new Node(36, node2, node0, node0, 4095, 2509);
      node3.isQualifiedName();
      node2.isEquivalentTo(node3, true, true, true);
      node3.hasOneChild();
      String string0 = "";
      int int0 = (-51);
      jSTypeRegistry0.createParametersWithVarArgs((JSType[]) null);
      int int1 = (-3720);
      Node node4 = Node.newString(string0, int0, int1);
      node2.checkTreeEquals(node3);
      node4.srcrefTree(node0);
      node1.isGetterDef();
      node1.getChildBefore(node2);
      // Undeclared exception!
      try { 
        Node.newString(jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = new Node(0, (-6098), 0);
      Node node1 = null;
      node0.addChildrenToBack((Node) null);
      boolean boolean0 = node0.isCast();
      // Undeclared exception!
      try { 
        node0.setVarArgs(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node((-2071), node0, node0, node0);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      node3.setChangeTime(1015);
      node0.setLineno(3709);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node2.getSourceOffset();
      node3.getJSDocInfo();
      node1.getQualifiedName();
      node2.isThrow();
      node1.isBreak();
      node2.setVarArgs(false);
      node2.isDec();
      node2.isSwitch();
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setLineno(39);
      node0.getQualifiedName();
      Node node1 = new Node(153, node0, node0, node0);
      node1.isCall();
      node1.setJSType((JSType) null);
      node1.isParamList();
      node1.isThrow();
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newNumber(0.0, (-519), (-519));
      node0.getJSDocInfo();
      node0.getStaticSourceFile();
      node0.isIf();
      Node node1 = new Node(31, node0, node0, node0, node0);
      node1.isUnscopedQualifiedName();
      node0.isWhile();
      node0.getInputId();
      node0.hasMoreThanOneChild();
      Node node2 = node1.cloneNode();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node1.isBreak();
      node1.setVarArgs(false);
      node0.isVar();
      node0.isNull();
      node2.getLength();
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node((-2071), node0, node0, node0);
      Node node2 = new Node(43, 16, 1);
      Node node3 = node2.srcref(node0);
      Node.newNumber((double) 15, 366, (-113));
      node3.getJSDocInfo();
      node2.addSuppression((String) null);
      node2.isGetElem();
      node0.getJSDocInfo();
      node0.isDelProp();
      node0.isArrayLit();
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setLineno(39);
      node0.getQualifiedName();
      Node node1 = new Node(153, node0, node0, node0);
      node1.isCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.isOr();
      node1.isCatch();
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = node0.getLastSibling();
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node3 = Node.newNumber((double) 51, 8, 53);
      node2.getInputId();
      node1.hasMoreThanOneChild();
      Node node4 = node0.cloneNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isBreak();
      node2.setVarArgs(false);
      node4.isVar();
      node2.isNull();
      node2.getLength();
      node2.isWhile();
      Node.newString("Object#Element");
      node3.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newNumber(0.0, (-519), (-519));
      node0.getJSDocInfo();
      node0.getStaticSourceFile();
      node0.isIf();
      Node node1 = new Node(31, node0, node0, node0, node0);
      node1.isThis();
      node0.isWhile();
      node1.addChildBefore(node0, node0);
      Node node2 = new Node(node0.SIDE_EFFECT_FLAGS, node1);
      node2.removeChildAfter(node0);
      // Undeclared exception!
      try { 
        node2.isSetterDef();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Node node0 = new Node(44, 44, 4096);
      Node node1 = new Node(32, node0, node0, 49, 12);
      node0.setChangeTime(51);
      node1.cloneNode();
      node0.setLineno(44);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.getSourceOffset();
      node0.getJSDocInfo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node node2 = Node.newString("Object#Element");
      node2.hasChildren();
      node_SideEffectFlags0.setMutatesArguments();
      node0.wasEmptyNode();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      node2.isDec();
      node2.getSourceFileName();
      node1.addChildrenAfter(node2, node0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Node node0 = new Node(44, 44, 4096);
      Node node1 = new Node(32, node0, node0, 49, 12);
      node0.setChangeTime(51);
      Node node2 = node1.cloneNode();
      node0.setLineno(44);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node1.getStaticSourceFile();
      node1.isIf();
      node0.isThis();
      node0.isWhile();
      node2.addChildBefore(node0, node0);
      Node node3 = new Node(node1.OPT_ARG_NAME, node2);
      node0.removeChildAfter(node2);
      int int0 = 13;
      int int1 = 103;
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newNumber(0.0, 0, 0);
      node0.getJSDocInfo();
      node0.getStaticSourceFile();
      node0.isGetElem();
      node0.isAssign();
      node0.isGetElem();
      Node node1 = new Node(53, node0, node0, node0, node0);
      node1.isContinue();
      Node node2 = Node.newNumber((double) 54);
      node1.replaceChild(node0, node2);
      node1.isFor();
      node2.getJSType();
      node1.toStringTree();
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Node node0 = new Node(0);
      node0.wasEmptyNode();
      node0.isHook();
      Node node1 = new Node(153, node0);
      node0.isGetElem();
      boolean boolean0 = node0.isGetElem();
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node1.isAnd();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.EVAL_ERROR_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      jSTypeArray0[0] = jSType0;
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node3 = new Node(86, node0, node2, node0);
      node3.isTrue();
      JSDocInfo jSDocInfo0 = new JSDocInfo(boolean0);
      // Undeclared exception!
      try { 
        jSDocInfo0.getAssociatedNode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY, (-560), (-2119));
      Node node1 = null;
      node0.checkTreeEqualsImpl((Node) null);
      node0.isAssign();
      int int0 = 624;
      int int1 = 1959;
      Node node2 = new Node(int1, node0);
      int int2 = (-1070);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>(1186);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) linkedHashSet0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.getJSDocInfo();
      node0.getStaticSourceFile();
      Node node1 = Node.newNumber((double) 16);
      node1.getJSDocInfo();
      node0.getQualifiedName();
      node1.isThrow();
      Node node2 = new Node(2, node1, 2, 8199);
      node2.isBreak();
      node0.setVarArgs(false);
      node1.isDec();
      Node node3 = Node.newString(1144, "4S,ZStby)A8o4_n(Pf");
      node3.isSwitch();
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Node node0 = new Node(0);
      node0.wasEmptyNode();
      node0.getLength();
      node0.isHook();
      Node node1 = Node.newString(56, " : ");
      node1.addSuppression(" : ");
      node0.isGetElem();
      node1.isAnd();
      node0.isGetElem();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.isGetterDef();
      Node node2 = new Node(12, node1, 29, 15);
      node1.isObjectLit();
      node2.getChildAtIndex(4);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Node node0 = Node.newString("=FYb9ZCX", (-5139), (-5139));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.getString();
      node0.setString("/[)y#");
      Node node1 = Node.newString("=FYb9ZCX");
      Node node2 = node0.useSourceInfoFrom(node1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "is_namespace");
      node1.addSuppression(".t<}t~5#3t5gP_AB~");
      node2.setIsSyntheticBlock(true);
      node1.addChildToFront(node2);
      node0.isHook();
      node0.checkTreeEquals(node2);
      node1.isReturn();
      node0.isQuotedString();
      node1.children();
      node0.setSourceEncodedPosition(101);
      node0.isName();
      node1.isName();
      node2.getLineno();
      node2.mayMutateArguments();
      Node node3 = Node.newNumber((double) 42, (-1693), 40);
      node2.replaceChildAfter(node0, node3);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newNumber(0.0, (-519), (-519));
      node0.getJSDocInfo();
      node0.getStaticSourceFile();
      node0.isGetElem();
      node0.isAnd();
      node0.isGetElem();
      node0.addSuppression("zgOnbZ!dZ7?X!4({B");
      node0.isGetElem();
      node0.getJSDocInfo();
      node0.isCatch();
      Node node1 = node0.getAncestor((-2744));
      node0.isParamList();
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Node node0 = new Node(44, 44, 4096);
      Node node1 = new Node(32, node0, node0, 49, 12);
      node1.isHook();
      node1.isGetElem();
      node0.isAnd();
      Node node2 = Node.newString("| oVJe{[r!@2AN`4!3", 39, 50);
      node0.isOnlyModifiesThisCall();
      node1.srcrefTree(node0);
      node2.setVarArgs(false);
      Node node3 = Node.newString(" : ");
      Node node4 = Node.newNumber((double) 50);
      node3.isEquivalentTo(node4);
      node3.isAssignAdd();
      node2.isFalse();
      Node node5 = Node.newNumber((-2484.63400321643), 29, 47);
      node5.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Node node0 = new Node(154);
      node0.wasEmptyNode();
      node0.isHook();
      Node node1 = new Node(153, node0);
      node0.isGetElem();
      node0.isGetElem();
      node1.isUnscopedQualifiedName();
      Node node2 = Node.newNumber((double) 52, 46, 1);
      Iterable<Node> iterable0 = new ArrayList<Node>();
      Node node3 = node1.removeFirstChild();
      node2.cloneTree();
      node0.isSwitch();
      node2.getIndexOfChild(node3);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node((-2071), node0, node0, node0);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      node3.setChangeTime(46);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node1.getSourceOffset();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node4 = Node.newString("Object#Element");
      node2.hasChildren();
      node_SideEffectFlags0.setMutatesArguments();
      node2.wasEmptyNode();
      node3.isDec();
      node3.getSourceFileName();
      node3.addChildrenAfter(node4, node2);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isHook();
      Node node1 = node0.copyInformationFrom((Node) null);
      node1.toString();
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
          JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
          JSType[] jSTypeArray0 = new JSType[8];
          jSTypeRegistry0.getObjectElementKey();
          Node node0 = Node.newNumber((double) 1, (-511), 1506);
          node0.wasEmptyNode();
          node0.addChildrenToFront(node0);
          node0.toStringTree();
          node0.isAssign();
          node0.setQuotedString();
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = new Node(0, (-6098), 0);
      Node node1 = new Node(36, node0, node0, node0, node0, 2, 1);
      node1.isWhile();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setAllFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node1.isArrayLit();
      node0.isDebugger();
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(153, node0, node0);
      node1.isDefaultCase();
      node1.checkTreeEquals(node0);
      Node node2 = node1.copyInformationFrom(node0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Node tree inequality:\nTree1:\nLABEL_NAME\n    STRING \n\n\nTree2:\nSTRING \n\n\nSubtree1: LABEL_NAME\n    STRING \n\n\nSubtree2: STRING \n");
      node2.getChildBefore(node1);
      node0.getLineno();
      node1.copyInformationFromForTree(node0);
      // Undeclared exception!
      try { 
        node0.isTypeOf();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Node node0 = new Node(44, 44, 44);
      Node node1 = new Node(32, node0, node0, 49, 12);
      node0.setChangeTime(51);
      Node node2 = node1.cloneNode();
      node0.setLineno(44);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.getChildBefore(node2);
      // Undeclared exception!
      try { 
        node2.getLineno();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 1304, 4426);
      Node node1 = new Node(4095, node0, node0, node0, 12, (-1279));
      node0.isIf();
      node0.isUnscopedQualifiedName();
      node0.isWhile();
      node1.getInputId();
      node1.hasMoreThanOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.isAssignAdd();
      node1.getExistingIntProp(39);
      node0.isWhile();
      node0.getJSType();
      node1.addChildAfter(node0, node0);
      // Undeclared exception!
      try { 
        node0.isVoid();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 39
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Node node0 = new Node((-1683));
      Node node1 = new Node(0);
      node0.wasEmptyNode();
      node1.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node0.getAncestors();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node2 = new Node((-1752), node1, node1, 57, 0);
      node2.isReturn();
      node0.useSourceInfoIfMissingFrom(node2);
      Node node3 = new Node(55, node0);
      node3.isAssign();
      node2.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      Node node1 = new Node(26, node0, node0, node0, node0, 30, 118);
      Node node2 = Node.newNumber((double) 50, 48, (-1411));
      Node node3 = new Node(49, 39, 31);
      node1.addSuppression("The existing child node of the parent should not be null.");
      node3.isGetElem();
      node0.isAnd();
      Node node4 = new Node(103, node1, node1, 4095, 49);
      node4.isTry();
      node1.isGetterDef();
      node2.isDelProp();
      node1.isAdd();
      node4.isCatch();
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0), 443, (-571));
      Node node1 = new Node(90, node0, node0, node0, 37, 1);
      node0.isIf();
      node0.isWhile();
      node0.getInputId();
      node1.hasMoreThanOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setAllFlags();
      node0.getJSDocInfo();
      node_SideEffectFlags1.setReturnsTainted();
      node1.isCall();
      node1.isBreak();
      node0.isCatch();
      node0.getDouble();
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = Node.newNumber(0.0, (-519), (-519));
      node0.getJSDocInfo();
      node0.getStaticSourceFile();
      node0.isGetElem();
      node0.isAnd();
      node0.isThis();
      node0.isWhile();
      Node node1 = null;
      node0.addChildBefore((Node) null, (Node) null);
      Node node2 = new Node(node0.DIRECTIVES, node0);
      node0.removeChildAfter(node1);
      // Undeclared exception!
      try { 
        node2.isSetterDef();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(50);
      Node node2 = node1.srcref(node0);
      node2.isFromExterns();
      node2.getJSDocInfo();
      node2.isCall();
      node0.setVarArgs(false);
      node0.isDec();
      Node node3 = Node.newString("z!^G'9!;]5Rhp'");
      node1.isEquivalentTo(node2, false, true, true);
      node3.setQuotedString();
      node2.isInc();
      node3.toStringTree();
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(50);
      Node node2 = node1.srcref(node0);
      node2.isFromExterns();
      Node.newNumber((double) 16, 4095, 43);
      node2.getJSDocInfo();
      node2.isCall();
      node0.setVarArgs(false);
      node0.isDec();
      Node node3 = Node.newString("z!^G'9!;]5Rhp'");
      node1.isEquivalentTo(node2, false, true, true);
      node3.setQuotedString();
      node2.isInc();
      node3.toStringTree();
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Node node0 = Node.newString("", 113, 113);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Comparator<JSType> comparator0 = (Comparator<JSType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isEquivalentTo(node1);
      linkedList0.sort(comparator0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
      Node node2 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) linkedList0);
      jSTypeRegistry1.createFromTypeNodes(node0, "Object#Element", (StaticScope<JSType>) null);
      node0.isOnlyModifiesThisCall();
      node2.isSwitch();
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[8];
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      jSTypeArray0[0] = (JSType) templateType0;
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY, 1, 0);
      Node node1 = new Node(1, node0, node0, node0, node0, 49, (-992));
      node1.isWhile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(33);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setAllFlags();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Node node2 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) linkedList0);
      node1.getIndexOfChild(node2);
      node2.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0), 443, 443);
      Node node1 = new Node(90, node0, node0, node0, 37, 1);
      node0.isIf();
      node0.isWhile();
      node0.getInputId();
      node0.addChildToBack(node1);
      node0.isLabelName();
      node0.isWith();
      node0.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Node node0 = new Node(44, 44, 4096);
      Node node1 = new Node(32, node0, node0, 49, 12);
      node0.setChangeTime(51);
      Node node2 = node1.cloneNode();
      node0.setLineno(44);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.getSourceOffset();
      node0.getJSDocInfo();
      node1.getQualifiedName();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      enumElementType1.toMaybeEnumElementType();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4426);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node0.isOr();
      node0.isCatch();
      node0.getParent();
      node0.checkTreeEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0), 443, 443);
      Node node1 = new Node(90, node0, node0, node0, 37, 1);
      node0.isIf();
      node0.isWhile();
      node0.getInputId();
      node1.useSourceInfoFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.isAssignAdd();
      node1.getExistingIntProp(57);
      node1.isWhile();
      node1.getJSType();
      // Undeclared exception!
      try { 
        node1.addChildAfter(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 57
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = new Node(0, (-6098), 0);
      Node node1 = new Node(112, node0, node0, node0, node0);
      node1.isWhile();
      node0.getJSType();
      node1.isInc();
      node1.toStringTree();
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node((-2071), node0, node0, node0);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      node3.setChangeTime(46);
      node0.setLineno(3709);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node2.getSourceOffset();
      node3.getJSDocInfo();
      node1.getQualifiedName();
      node2.isThrow();
      node1.isBreak();
      node2.setVarArgs(false);
      node2.isDec();
      node2.isSwitch();
      node2.addSuppression("^]w5h+V\"8@+");
      node1.isDelProp();
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Node node0 = Node.newNumber((-1044.0673779), (-3225), 126);
      node0.getQualifiedName();
      Node node1 = new Node(152, node0, 39, 46);
      node0.copyInformationFrom(node1);
      Node node2 = null;
      node0.isEquivalentToShallow((Node) null);
      node0.isEmpty();
      node0.getAncestors();
      double double0 = 525.5335163184;
      // Undeclared exception!
      try { 
        node0.setDouble(double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node(50, node0);
      Node node2 = node1.srcref(node0);
      node1.isFromExterns();
      Node node3 = Node.newNumber((double) 15, 366, (-113));
      node2.getJSDocInfo();
      node0.isCall();
      node2.isBreak();
      node1.setVarArgs(false);
      node1.isDec();
      Node node4 = Node.newString("a7`6Dv", 53, 30);
      node0.isEquivalentTo(node4, false, false, false);
      Node node5 = node0.useSourceInfoFrom(node0);
      node2.addChildBefore(node3, node5);
      node4.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Node node0 = new Node(154);
      node0.wasEmptyNode();
      node0.isHook();
      Node node1 = new Node(153, node0);
      node0.isGetElem();
      node0.isGetElem();
      node1.isUnscopedQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.clearSideEffectFlags();
      node1.isReturn();
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.isAssign();
      node0.isObjectLit();
      node1.isInc();
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      String string0 = "~r>";
      Node node0 = Node.newString("~r>", 3226, (-1160));
      node0.isRegExp();
      node0.getIntProp(3226);
      node0.isOptionalArg();
      node0.isBreak();
      node0.isLabel();
      node0.addChildrenAfter((Node) null, (Node) null);
      Node.newString(node0.DIRECTIVES, string0);
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) 443);
      Node node1 = new Node(86, node0, node0, node0, 37, 1);
      node0.isIf();
      node0.isWhile();
      node0.getInputId();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      node2.isReturn();
      node1.useSourceInfoIfMissingFrom(node0);
      node0.isAssign();
      node2.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(153, node0, node0);
      node1.isDefaultCase();
      node1.checkTreeEquals(node0);
      node1.useSourceInfoIfMissingFromForTree(node0);
      Node node2 = node1.copyInformationFrom(node0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Node tree inequality:\nTree1:\nLABEL_NAME\n    STRING \n\n\nTree2:\nSTRING \n\n\nSubtree1: LABEL_NAME\n    STRING \n\n\nSubtree2: STRING \n");
      node0.getLineno();
      Node node3 = node1.copyInformationFromForTree(node0);
      node0.isTypeOf();
      node1.replaceChild(node0, node3);
      node0.isFor();
      node3.isWhile();
      node0.getJSType();
      node0.toStringTree();
      node2.isBlock();
      node2.isSwitch();
      node3.isDo();
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 52, 85);
      Node node1 = new Node(132, node0, node0, node0, 3014, 26);
      node0.hasOneChild();
      node0.isWhile();
      node1.getInputId();
      node0.hasMoreThanOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setAllFlags();
      node1.cloneTree();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node_SideEffectFlags2.setReturnsTainted();
      Node node2 = new Node(29);
      node2.isCall();
      node1.isBreak();
      node2.setVarArgs(false);
      node2.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Node node0 = new Node(0);
      node0.wasEmptyNode();
      node0.getLength();
      node0.isHook();
      Node node1 = Node.newString(56, " : ");
      node1.addSuppression(" : ");
      node1.addSuppression(" : ");
      node0.isGetElem();
      node0.mayMutateArguments();
      node1.isGetElem();
      node1.isGetterDef();
      Node node2 = new Node(16777216, node0, 43, 39);
      node2.getLength();
      node0.isObjectLit();
      Node node3 = new Node(46, 55, 48);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0), 443, (-571));
      Node node1 = new Node(90, node0, node0, node0, 37, 1);
      node0.getJSDocInfo();
      node0.isIf();
      node0.isWhile();
      node0.getInputId();
      node1.hasMoreThanOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node2 = new Node(1218);
      node2.setVarArgs(true);
      Node node3 = Node.newNumber(0.7);
      node3.isVarArgs();
      node3.isComma();
      node2.isEmpty();
      node2.isComma();
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Node node0 = Node.newString("wsR8|=1o*5fR~?.");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Node node1 = new Node(117, node0, node0);
      node0.isDefaultCase();
      node0.checkTreeEquals(node1);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      Node node3 = node1.copyInformationFrom(node0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node4 = node1.copyInformationFromForTree(node3);
      node4.isTypeOf();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node5 = new Node((-2571), 57, (-106));
      node5.replaceChild(node4, node3);
      node2.isFor();
      node3.isWhile();
      node5.getJSType();
      node3.toStringTree();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Node node0 = new Node(0, (-6098), 0);
      Node node1 = new Node(36, node0, node0, node0, node0, 2, 1);
      node1.isWhile();
      Node node2 = Node.newString(" c@", 2, 52);
      Node node3 = new Node(8, 50, 50);
      node3.putIntProp(863, 103);
      node2.isQualifiedName();
      node1.isEmpty();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0), 443, 443);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node1 = new Node(90, node0, node0, node0, 37, 1);
      node0.isUnscopedQualifiedName();
      node1.isIf();
      Node node2 = Node.newNumber((-1.0));
      node0.putIntProp(147, (-1554));
      node2.isQualifiedName();
      node1.isEmpty();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>(1186);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) linkedHashSet0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.getJSDocInfo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node0.isArrayLit();
      node0.isDebugger();
      node0.isScript();
      node0.isNot();
      node0.isParamList();
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Node node0 = new Node(44, 44, 44);
      Node node1 = new Node(32, node0, node0, 49, 12);
      node1.setChangeTime(51);
      node0.isIn();
      node1.srcref(node0);
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.isComma();
      Node.newString("| oVJe{[r!@2AN`4!3", 130, 40);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Node node0 = new Node(44, 44, 4096);
      Node node1 = new Node(32, node0, node0, 49, 12);
      node0.setChangeTime(51);
      Node node2 = node1.cloneNode();
      node0.setLineno(44);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.isWhile();
      node0.getInputId();
      Node node3 = node2.useSourceInfoFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isAssignAdd();
      node1.setString(" is not a number node");
      node3.getExistingIntProp(node2.OPT_ARG_NAME);
      node2.isWhile();
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // TYPEOF 49 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Node node0 = new Node(0);
      node0.wasEmptyNode();
      node0.getLength();
      node0.isHook();
      Node node1 = Node.newString(56, " : ");
      node1.addSuppression(" : ");
      node0.srcrefTree(node1);
      node0.isGetElem();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.getObjectElementKey();
      SimpleErrorReporter.getMessage0("Named type with empty name component");
      JSType[] jSTypeArray0 = new JSType[0];
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParameters(jSTypeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property Named type with empty name component
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      Node node0 = new Node(44, 44, 44);
      Node node1 = new Node(32, node0, node0, 49, 12);
      Node node2 = Node.newString(40, "incrdecr");
      Node node3 = Node.newString(1, "W5K&oZph0H", 57, (-3329));
      node3.hasMoreThanOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(57);
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node node4 = Node.newString(8, "W5K&oZph0H", 21, 90);
      node1.checkTreeTypeAwareEqualsImpl(node4);
      node1.clonePropsFrom(node2);
      node2.getProp(2147483645);
      node4.isOr();
      node2.isAdd();
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-528), (-528), (-528));
      Node node1 = new Node(122, node0);
      node1.checkTreeEquals(node0);
      Node node2 = node1.copyInformationFrom(node0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^%JA}_jLOW`]'U");
      node2.getLineno();
      node2.copyInformationFromForTree(node0);
      node1.isTypeOf();
      Node node3 = new Node(4284, node1, node1, node0);
      node3.replaceChild(node1, node2);
      node1.isFor();
      node1.isWhile();
      Node node4 = new Node(node3.DIRECT_EVAL);
      // Undeclared exception!
      try { 
        node0.isBlock();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>(1186);
      ImmutableList.copyOf((Iterable<? extends JSType>) linkedHashSet0);
      Node node0 = Node.newString(1186, "input_id", 115, 1186);
      Node node1 = new Node(1186, node0, node0, 55, 54);
      node1.isCast();
      Node node2 = Node.newNumber((-5103.7));
      node2.setDouble(16);
      node0.isArrayLit();
      node1.isDebugger();
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      Node node0 = Node.newString(0, "");
      Node node1 = new Node(1262, node0, node0, node0, 0, 56);
      Node node2 = new Node(0, node1);
      node2.isEquivalentTo(node0, true, true, false);
      Node node3 = node1.getLastSibling();
      node2.isGetElem();
      node0.setVarArgs(false);
      node1.isComma();
      node1.getJSDocInfo();
      node3.isIf();
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Node node0 = new Node((-50));
      Node node1 = Node.newNumber((double) 47);
      Node node2 = node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesThis();
      node2.isArrayLit();
      node2.addChildrenToBack(node0);
      node2.isOnlyModifiesArgumentsCall();
      node0.isScript();
      node1.isNot();
      node2.isReturn();
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0), 443, 443);
      node0.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.clearSideEffectFlags();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node0.checkTreeTypeAwareEqualsImpl((Node) null);
      node0.isOr();
      node0.isFor();
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      Node node0 = new Node(124);
      Node node1 = node0.removeChildAfter((Node) null);
      node1.getLength();
      // Undeclared exception!
      try { 
        node1.isOnlyModifiesThisCall();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>(0);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) linkedHashSet0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node1 = new Node(1975, node0, node0, node0, (-762), 47);
      node0.mayMutateGlobalStateOrThrow();
      node1.isLabel();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("9Z\"LjBUEZOMCkJ;");
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Node node0 = Node.newString("DS^lt,W[");
      Node node1 = new Node(90, node0, node0);
      node0.isDefaultCase();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node1.checkTreeEquals(node0);
      Node node2 = node0.copyInformationFrom(node1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DS^lt,W[");
      node1.getChildBefore(node2);
      Node node3 = Node.newString(46, "DS^lt,W[", 56, 4);
      node3.getLineno();
      Node node4 = node1.copyInformationFromForTree((Node) null);
      node2.isTypeOf();
      node0.isFor();
      node4.addChildToBack(node3);
      int int0 = 31;
      int int1 = (-571);
      Node node5 = null;
      try {
        node5 = new Node(node2.FREE_CALL, node1, int0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      ListIterator<JSType> listIterator0 = arrayList0.listIterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
      ImmutableList<JSType> immutableList1 = immutableList0.asList();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList1);
      node0.getJSType();
      Node node1 = new Node(43);
      Node node2 = new Node((-4616), node0, node1, node0);
      node2.isInc();
      node1.toStringTree();
      node0.isGetElem();
      node1.clonePropsFrom(node2);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(77);
      Node node0 = Node.newNumber((double) 77, 5842, 1186);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.addSuppression("setIsNoSideEffectsCall only supports CALL and NEW nodes, got ");
      node0.isAnd();
      Node node1 = Node.newString("com.google.javascript.rhino.Node$IntPropListItem", 0, 5);
      Node node2 = new Node(4095, node1, node1, node0, node0);
      node1.cloneTree();
      node2.isContinue();
      Node node3 = Node.newString(85, "this", (-1043), 8);
      node3.isComma();
      node3.isVar();
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      Node node0 = new Node(44, 44, 44);
      Node node1 = new Node(32, node0, node0, 49, 12);
      Node node2 = Node.newString("| oVJe{[r!@2AN`4!3", 4095, 12);
      node2.setChangeTime(51);
      node0.isIn();
      node0.getStaticSourceFile();
      node0.copyInformationFrom(node2);
      Node node3 = null;
      Node node4 = new Node(0, node2, node0, (Node) null, node0);
      node4.isAdd();
      // Undeclared exception!
      try { 
        node2.addChildToFront(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node((-2071), node0, node0, node0);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      node3.setChangeTime(46);
      node0.setLineno(3709);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node4 = Node.newNumber((-1683.0), 42, 1519);
      Node node5 = new Node(54, node4, node3, (-1536), (-2515));
      node3.isEquivalentToShallow(node2);
      node2.isNull();
      node4.isSwitch();
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0), 441, 441);
      Node node1 = new Node(30, node0, node0, node0, 37, 1);
      node0.isIf();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isWhile();
      node0.getInputId();
      node1.useSourceInfoFromForTree(node0);
      node1.setDouble(0.7);
      node1.isAssignAdd();
      node1.getExistingIntProp(node0.REFLECTED_OBJECT);
      // Undeclared exception!
      try { 
        node1.isWhile();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NEW 441 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      Node node0 = Node.newString(0, "");
      Node node1 = new Node(1262, node0, node0, node0, 0, 56);
      Node node2 = Node.newString("");
      node2.setSourceEncodedPosition(491);
      Node.newString(16, "");
      Node node3 = node1.getLastSibling();
      node3.checkTreeTypeAwareEqualsImpl(node1);
      node2.isFunction();
      node0.setVarArgs(false);
      Node node4 = node3.copyInformationFromForTree(node1);
      node4.getBooleanProp(57);
      node1.isSetterDef();
      node1.isAdd();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-33));
      Node node0 = new Node((-33), (-6098), (-33));
      Node node1 = new Node(112, node0, node0, node0, node0);
      node1.isBreak();
      node1.setVarArgs(false);
      node1.isDec();
      Node node2 = Node.newString("a7`6Dv", 38, 1218);
      node2.isEquivalentTo(node0, false, false, false);
      Node node3 = node1.useSourceInfoFrom(node2);
      node0.addChildBefore(node3, node3);
      node1.useSourceInfoFrom(node3);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(153, node0, node0);
      node1.isDefaultCase();
      node1.checkTreeEquals(node0);
      Node node2 = node1.copyInformationFrom(node0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Node tree inequality:\nTree1:\nLABEL_NAME\n    STRING \n\n\nTree2:\nSTRING \n\n\nSubtree1: LABEL_NAME\n    STRING \n\n\nSubtree2: STRING \n");
      node0.getLineno();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node3 = node1.copyInformationFromForTree(node0);
      node2.isTypeOf();
      node1.replaceChild(node0, node3);
      node1.isFor();
      node1.isWhile();
      node1.isScript();
      node3.isNot();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = node0.cloneTree();
      node0.getIntProp(52);
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Node node0 = new Node(42, 4096, 103);
      Node node1 = new Node(116, node0, node0, (-2486), 965);
      node1.setChangeTime(36);
      Node node2 = node1.cloneNode();
      node0.setLineno((-1485));
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getSourceOffset();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node2.setDouble(46);
      String string0 = "t";
      int int0 = (-4466);
      int int1 = 30;
      Node.newString(int0, string0, int1, node2.ORIGINALNAME_PROP);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      Node node0 = new Node(44, 44, 44);
      Node node1 = node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesThis();
      node1.isArrayLit();
      node1.addChildrenToBack(node0);
      node0.isDebugger();
      node1.isScript();
      node1.isNot();
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0), 443, 443);
      Node node1 = new Node(90, node0, node0, node0, 37, 1);
      node0.isIf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(54);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node node2 = Node.newString(29, "length", (-431), 1131);
      node2.checkTreeTypeAwareEqualsImpl(node1);
      Node node3 = new Node(4);
      node3.clonePropsFrom(node2);
      node3.isQuotedString();
      node3.isEquivalentToTyped(node1);
      node0.getProp((-349));
      node3.isOr();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setLineno(39);
      node0.getQualifiedName();
      Node node1 = new Node(152, node0, node0, node0);
      node1.isAnd();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node1.setJSType((JSType) null);
      node1.isExprResult();
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(153, node0, node0);
      node1.isDefaultCase();
      node1.checkTreeEquals(node0);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node1.copyInformationFrom(node0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Node tree inequality:\nTree1:\nLABEL_NAME\n    STRING \n\n\nTree2:\nSTRING \n\n\nSubtree1: LABEL_NAME\n    STRING \n\n\nSubtree2: STRING \n");
      Node node3 = node1.copyInformationFromForTree(node0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node2;
      node3.checkTreeEquals(node1);
      Node node4 = new Node(38, nodeArray0);
      node3.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("");
      Node node1 = new Node(153, node0, node0);
      node1.isDefaultCase();
      node1.checkTreeEquals(node0);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node1.copyInformationFrom(node0);
      node2.checkTreeEquals(node1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Node tree inequality:\nTree1:\nLABEL_NAME\n    STRING \n\n\nTree2:\nSTRING \n\n\nSubtree1: LABEL_NAME\n    STRING \n\n\nSubtree2: STRING \n");
      node1.copyInformationFromForTree(node0);
      Node node3 = new Node(30, node0, node0, node0, 46, 53);
      node3.addChildrenToBack(node2);
      // Undeclared exception!
      try { 
        node3.isDebugger();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newNumber((double) 47);
      Node node2 = node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesThis();
      node2.isArrayLit();
      node2.isTypeOf();
      node0.replaceChild(node2, node1);
      // Undeclared exception!
      try { 
        node0.isFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>(1186);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) linkedHashSet0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node1 = new Node(1186, node0, node0, node0, 1, 54);
      node1.mayMutateGlobalStateOrThrow();
      node0.putProp(41, jSTypeRegistry0);
      node0.setString("Object#Element");
      node0.replaceChild(node1, node1);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      Node node0 = new Node((-33), (-6129), (-33));
      Node node1 = new Node(112, node0, node0, node0, node0);
      node1.isBreak();
      node0.isNull();
      node1.setVarArgs(true);
      node1.getDouble();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.isDelProp();
      node0.getIndexOfChild(node1);
      // Undeclared exception!
      try { 
        node1.detachFromParent();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DEFAULT_CASE [var_args_name: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-33));
      Node node0 = new Node((-33), (-6098), (-33));
      Node node1 = new Node(112, node0, node0, node0, node0);
      node1.isBreak();
      node0.isCall();
      node1.setVarArgs(true);
      node1.getDouble();
      int int0 = (-1474);
      int int1 = 222;
      Node node2 = new Node(node0.FLAG_ARGUMENTS_UNMODIFIED, node0, int0, int1);
      // Undeclared exception!
      try { 
        node1.isObjectLit();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DEFAULT_CASE [var_args_name: com.google.javascript.rhino.Node$IntPropListItem@0000000004] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      Node node0 = new Node(44, 44, 44);
      Node node1 = new Node(32, node0, node0, 49, 12);
      node1.copyInformationFrom(node0);
      Node.newString(48, "'i!$T]bDT+ic[");
      node0.addSuppression((String) null);
      node1.isGetElem();
      node0.isAnd();
      node0.isGetElem();
      node0.cloneTree();
      Node node2 = Node.newString((-1705), "++l", (-18), (-1628));
      node2.isGetterDef();
      Node node3 = new Node((-952), node1, 16, (-4433));
      node3.isObjectLit();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node(42);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      node3.setChangeTime(46);
      node0.setLineno(3709);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node2.getSourceOffset();
      node3.getJSDocInfo();
      node1.getQualifiedName();
      node2.isThrow();
      node2.isAdd();
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node(42);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      node3.setChangeTime(46);
      node0.setLineno(3709);
      node2.getSourceOffset();
      node3.getJSDocInfo();
      node1.getQualifiedName();
      node2.isThrow();
      node2.isAdd();
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(65);
      Node node2 = new Node(32, node1, node1, node1, node1, 39, 0);
      Node node3 = Node.newNumber((double) 31, 4095, 52);
      Node node4 = new Node(103, node2);
      node2.addSuppression("?|ILCV,U4Q5{Ro$,");
      Node node5 = new Node(1);
      node0.copyInformationFrom(node5);
      node3.toString();
      node1.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node(42);
      Node node2 = node1.srcref(node0);
      node2.setChangeTime(46);
      node0.setLineno(3709);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.getSourceOffset();
      node2.getJSDocInfo();
      node1.getQualifiedName();
      node0.isThrow();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node((-2071), node0, node0, node0);
      Node node2 = new Node(50, node1);
      Node node3 = node2.srcref(node0);
      node3.setChangeTime(46);
      node0.setLineno(3709);
      Node node4 = new Node((-433));
      Node node5 = node4.copyInformationFrom(node0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.javascript.rhino.Node$SideEffectFlags");
      Node node6 = node1.copyInformationFromForTree(node5);
      node5.isTypeOf();
      node2.replaceChild(node6, node6);
      node3.isFor();
      node0.isWhile();
      node0.getJSType();
      node0.toStringTree();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-12));
      Node node0 = new Node(0, (-6113), 0);
      Node node1 = new Node(112, node0, node0, node0, node0);
      node1.isNull();
      node0.getJSType();
      node1.mayMutateGlobalStateOrThrow();
      node1.isSwitch();
      node0.isFunction();
      node1.getChildBefore(node0);
      node0.hasMoreThanOneChild();
      node1.srcref((Node) null);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Node node0 = Node.newString("x~]6vBPQ~9MVSk?8");
      Node node1 = Node.newString("x~]6vBPQ~9MVSk?8");
      Node node2 = new Node(153, node1, node0);
      node2.isDefaultCase();
      node2.checkTreeEquals(node0);
      Node node3 = node2.copyInformationFrom(node0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Node tree inequality:\nTree1:\nLABEL_NAME\n    STRING x~]6vBPQ~9MVSk?8\n    STRING x~]6vBPQ~9MVSk?8\n\n\nTree2:\nSTRING x~]6vBPQ~9MVSk?8\n\n\nSubtree1: LABEL_NAME\n    STRING x~]6vBPQ~9MVSk?8\n    STRING x~]6vBPQ~9MVSk?8\n\n\nSubtree2: STRING x~]6vBPQ~9MVSk?8\n");
      node0.getLineno();
      Node node4 = node2.copyInformationFromForTree(node0);
      node0.isTypeOf();
      node3.replaceChild(node0, node4);
      Node node5 = node4.removeFirstChild();
      node5.cloneTree();
      node5.getIndexOfChild(node3);
      node4.isDebugger();
      node5.checkTreeTypeAwareEqualsImpl(node0);
      node2.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(153, node0, node0);
      node1.isDefaultCase();
      node1.checkTreeEquals(node0);
      node1.useSourceInfoIfMissingFromForTree(node0);
      Node node2 = node1.copyInformationFrom(node0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Node tree inequality:\nTree1:\nLABEL_NAME\n    STRING \n\n\nTree2:\nSTRING \n\n\nSubtree1: LABEL_NAME\n    STRING \n\n\nSubtree2: STRING \n");
      Node node3 = node1.copyInformationFromForTree(node0);
      node0.isTypeOf();
      node1.replaceChild(node0, node3);
      node0.isFor();
      node3.isWhile();
      node3.addChildToBack(node0);
      node2.removeChild(node1);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-12));
      Node node0 = new Node(0, (-6113), 0);
      Node node1 = new Node(112, node0, node0, node0, node0);
      node1.useSourceInfoFromForTree(node0);
      Node.newString(155, (String) null);
      node1.isNull();
      node0.getJSType();
      node1.mayMutateGlobalStateOrThrow();
      node1.isInc();
      node1.isSwitch();
      // Undeclared exception!
      try { 
        node1.isLocalResultCall();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      Node node1 = new Node(26, node0, node0, node0, node0, 30, 118);
      Node node2 = Node.newNumber((double) 50, 48, (-1411));
      node1.srcrefTree(node2);
      Node node3 = new Node(49, 39, 31);
      node1.addSuppression("The existing child node of the parent should not be null.");
      node3.isGetElem();
      node0.isAnd();
      node1.setString("The existing child node of the parent should not be null.");
      node3.isAssign();
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node.newNumber((double) 47);
      Node node1 = node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags1.setMutatesThis();
      node1.isArrayLit();
      node0.isScript();
      node1.isReturn();
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = Node.newNumber((double) 47);
      node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(49);
      Node node2 = Node.newString(57, "null", 54, 49);
      node2.checkTreeEqualsImpl(node1);
      Node[] nodeArray0 = new Node[0];
      Node node3 = new Node(40, nodeArray0, 2, 1403);
      node3.clonePropsFrom(node1);
      node3.getProp(4);
      node2.isOr();
      node2.isAdd();
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0), 441, 441);
      Node node1 = new Node(37, node0, node0, node0, 37, 1);
      node0.isIf();
      node0.isWhile();
      node1.isUnscopedQualifiedName();
      node1.isIf();
      node1.isUnscopedQualifiedName();
      node0.isAnd();
      Node node2 = Node.newString((-549), ">`+FnA");
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node1.isAdd();
      node3.isCatch();
      node3.isNot();
      node0.addChildToFront(node2);
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Node node0 = Node.newString("Dd!@H");
      Node node1 = new Node((-852), (-2746), 31);
      node0.useSourceInfoIfMissingFrom(node1);
      node0.isWhile();
      node0.putProp((-95), "Dd!@H");
      node0.setString("Dd!@H");
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString(113, "com.google.common.collect.UnmodifiableListIterator");
      node0.hasMoreThanOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(30);
      Node node1 = Node.newString(1728, "null", 810, 2131);
      node0.isWhile();
      node0.isNE();
      node1.isAdd();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-33));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = new Node((-33), (-6098), (-33));
      Node node1 = new Node(112, node0, node0, node0, node0);
      node1.isBreak();
      node1.cloneNode();
      node1.setVarArgs(false);
      node1.isDec();
      node1.setSideEffectFlags(48);
      int int0 = 32;
      node1.putProp(int0, node_SideEffectFlags0);
      String string0 = "+#8/~uz4sbIUA&vO";
      node0.setString(string0);
  }
}
