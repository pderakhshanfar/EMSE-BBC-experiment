/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 03 13:09:00 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import com.google.javascript.rhino.jstype.TemplatizedType;
import com.google.javascript.rhino.jstype.UnionType;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newString(105, "synthetic");
      Node node1 = new Node(1610612736, node0, 30, 65535);
      Node node2 = new Node((-575), node1);
      node2.isQualifiedName();
      node2.isUnscopedQualifiedName();
      Node.newNumber(1.0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node2);
      node_AncestorIterable0.iterator();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("synthetic", true);
      node1.setStaticSourceFile(simpleSourceFile0);
      node2.detachChildren();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = Node.newNumber((-1355.312384231813));
      node0.getAncestors();
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isVarArgs();
      node0.setSourceEncodedPositionForTree(1895);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isQualifiedName();
      Node node1 = Node.newString("", 49, 54);
      node1.getQualifiedName();
      Node node2 = new Node((-1939));
      node2.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newString("ull");
      node0.addSuppression("ull");
      node0.mayMutateGlobalStateOrThrow();
      node0.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newString(103, "qT1(AU");
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = new Node((-1939));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(0.0);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isDec();
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node.newNumber((-3033.01612990409));
      Node node0 = new Node(4);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.detachChildren();
      Node.newString(36, "");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(56, node0, node0, node0, node0);
      node1.detachChildren();
      node1.isHook();
      node0.getLength();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = new Node(46, 46, 46);
      Node node1 = Node.newNumber((double) 52, 8, 32);
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = Node.newString(101, "synthetic");
      Node node1 = new Node(1610612736, node0, 30, 65535);
      Node node2 = new Node((-575), node1);
      node2.isQualifiedName();
      node2.isUnscopedQualifiedName();
      Node.newNumber(1.0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node2);
      node_AncestorIterable0.iterator();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("synthetic", false);
      node2.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node(0, node0);
      node1.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node((-1937));
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newString("second new child has existing sibling");
      Node.newString(43, "second new child has existing sibling");
      Node node1 = new Node(2092419947, node0, 8, 49);
      Node node2 = Node.newString(57, "second new child has existing sibling");
      node2.isContinue();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newString(87, ":6:le-rYWV9|G");
      node0.addChildToFront(node0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newString(751619276, "3", (-2646), 751619276);
      Node node1 = new Node(751619276, node0, node0, 56, 751619276);
      node1.getBooleanProp(40);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = Node.newNumber((-3725.9729798367), (-1852), 0);
      node0.setDouble(0.0);
      node0.addSuppression(")}");
      Node node1 = Node.newNumber((double) 52, 114, 29);
      node0.isNE();
      node0.getLastSibling();
      node1.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = new Node((-1342));
      Node node1 = new Node(1, node0);
      Node.newString(29, (String) null);
      double double0 = (-1176.0);
      // Undeclared exception!
      try { 
        node1.setDouble(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node.newString((String) null);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node(88, 88, 88);
      Node node1 = new Node(88, node0, node0, node0);
      node1.isOptionalArg();
      node0.isAssign();
      node0.mayMutateArguments();
      Node node2 = Node.newString(50, (String) null);
      node2.getJsDocBuilderForNode();
      // Undeclared exception!
      try { 
        node1.isCase();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 55;
      Node[] nodeArray0 = new Node[6];
      Node node0 = Node.newNumber(0.0, 55, 55);
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateType templateType0 = jSTypeRegistry1.getObjectElementKey();
      jSTypeArray0[0] = (JSType) templateType0;
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      nodeArray0[1] = node1;
      Node node2 = new Node(31, node1);
      nodeArray0[2] = node2;
      Node node3 = new Node(754);
      nodeArray0[3] = node3;
      Node node4 = new Node(42, node3, node0);
      nodeArray0[4] = node4;
      Node node5 = Node.newString((-1653), " : ");
      nodeArray0[5] = node5;
      Node node6 = new Node(55, nodeArray0, 46, (-2511));
      int int1 = 0;
      int int2 = 0;
      Node node7 = new Node(int0, node6, int1, int2);
      int int3 = 55;
      Node node8 = new Node(int0, node7, node4, node0, int3, node7.POST_FLAG);
      // Undeclared exception!
      try { 
        node8.copyInformationFromForTree(node5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isBreak();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node(126, 126, 126);
      Node node1 = new Node(55, node0, node0);
      node1.getDouble();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newNumber(2256.5717129, 627, 627);
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = new Node(118, nodeArray0);
      node0.isEquivalentToShallow(nodeArray0[0]);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-2636), nodeArray0, (-2636), (-2636));
      node0.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node[] nodeArray0 = new Node[6];
      Node node0 = Node.newNumber(0.0, 55, 55);
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = new Node(55, node0);
      Node node2 = new Node(56);
      Node node3 = new Node((-1778), node0, node0);
      String string0 = null;
      Node.newString(node0.COLUMN_BITS, string0);
      int int0 = (-682);
      int int1 = 87;
      Node node4 = null;
      try {
        node4 = new Node(node0.INFERRED_FUNCTION, nodeArray0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = new Node(627, 627, 627);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(36);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = new Node(4, nodeArray0, 806, 30);
      Node.newNumber((double) node0.FREE_CALL);
      int int0 = 303;
      Node node2 = null;
      try {
        node2 = new Node(int0, node0, node1.SIDE_EFFECTS_ALL, node1.FLAG_ARGUMENTS_UNMODIFIED);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node(88, 88, 88);
      node0.isOptionalArg();
      node0.isVar();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = new Node(48, nodeArray0);
      // Undeclared exception!
      try { 
        node1.isDefaultCase();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString("Use SerializedForm");
      nodeArray0[0] = node0;
      Node node1 = new Node(2147483645, node0, 4067, 11);
      nodeArray0[1] = node1;
      Node node2 = new Node((-1544), nodeArray0);
      node2.getParent();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(1930);
      Node node1 = new Node(16, node0, node0);
      Node node2 = Node.newString(46, ")^V`=`)?.&q");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      nodeArray0[1] = node3;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node1;
      nodeArray0[5] = node0;
      nodeArray0[6] = node2;
      Node node4 = new Node(116, nodeArray0, (-4402), 40);
      double double0 = (-4807.5806493695);
      Node node5 = Node.newNumber(double0);
      int int0 = (-239);
      Node node6 = new Node(node0.MAX_COLUMN_NUMBER, node5, int0, node0.SLASH_V);
      Node node7 = new Node(node0.LAST_PROP, nodeArray0[3], nodeArray0[6], node6, node1.DECR_FLAG, node2.FLAG_NO_THROWS);
      // Undeclared exception!
      try { 
        nodeArray0[0].copyInformationFromForTree(node6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = (-1421);
      Node node0 = Node.newString("new child has existing sibling");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      Node node1 = new Node((-855), node0);
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      Node node2 = new Node(57, nodeArray0, 42, 16);
      Node node3 = new Node(int0, node0, node2, nodeArray0[2]);
      node3.addChildBefore(node1, node1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node.newNumber((double) 46);
      Node node0 = Node.newString(103, "fP");
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node.newNumber((-6.59609731023429));
      Node node0 = Node.newNumber((double) 55);
      node0.setDouble(49);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node((-1937), (-1937), (-1937));
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newString(113, "com.google.javascript.rhino.Node$IntPropListItem");
      node0.isNE();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newString("ARn9h_FIF/");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      TreeSet<String> treeSet1 = new TreeSet<String>((SortedSet<String>) treeSet0);
      node0.setDirectives(treeSet1);
      node0.isOptionalArg();
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "com.google.javascript.rhino.jstype.AllType";
      Node node0 = Node.newString(16384, "com.google.javascript.rhino.jstype.AllType");
      Node node1 = Node.newNumber(0.0, 32, 54);
      node1.addChildToFront(node0);
      node1.checkTreeEquals(node0);
      node1.setSideEffectFlags(node0.ORIGINALNAME_PROP);
      // Undeclared exception!
      try { 
        node0.mayMutateArguments();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 16384
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(105, node0, node0, node0, node0);
      node1.checkTreeEquals(node0);
      node1.getBooleanProp(105);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newString("8T.YJm,<\"B>9`Xu?Eyg");
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newNumber((-1355.312384231813));
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isVarArgs();
      node0.setSourceEncodedPositionForTree(1895);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newNumber((double) 43);
      Node node1 = new Node(36, node0);
      node0.isEquivalentToShallow(node1);
      node1.addChildBefore((Node) null, (Node) null);
      node0.isLocalResultCall();
      // Undeclared exception!
      try { 
        node0.isNew();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newNumber(3556.67);
      node0.getSourceFileName();
      node0.isQuotedString();
      node0.setString(",9,u(Cb\"");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newNumber(0.5231480982533273);
      node0.mayMutateArguments();
      node0.toStringTree();
      int int0 = Node.COLUMN_BITS;
      node0.isIn();
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node.extractLineno(3406);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newString("node is not a child");
      node0.isEmpty();
      Node node1 = new Node(317, node0, node0, node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(2977, nodeArray0);
      Node node1 = new Node(2977, node0, node0);
      node0.isNoSideEffectsCall();
      node1.putProp(510, node0);
      node1.isEquivalentTo(node0, false, true, false);
      Node.newNumber((double) 8, 30, 40);
      node1.addChildToFront(node0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.checkTreeEquals(node0);
      Node node1 = new Node(0, node0, node0, node0);
      node0.detachFromParent();
      node1.getChangeTime();
      node0.isScript();
      node0.isIf();
      Node node2 = Node.newString(38, "Object#Element");
      node2.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node(116);
      Node node1 = new Node(12, 54, 49);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node1.getDouble();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      vector0.trimToSize();
      Node node1 = new Node(105, node0, node0, node0, node0);
      node1.checkTreeEquals(node0);
      node0.replaceChild(node1, node1);
      node0.isDo();
      // Undeclared exception!
      try { 
        node0.isArrayLit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newNumber((double) 305, 305, 305);
      Node node1 = Node.newNumber((-1355.312384231813), 36, 49);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = new Node(305, node0, node0, node0, 0, 772);
      node0.setString("l; /nD)HRuak'z@fl(|");
      boolean boolean0 = false;
      node2.setVarArgs(boolean0);
      node2.isComma();
      node2.addChildToBack(node1);
      node0.detachChildren();
      // Undeclared exception!
      try { 
        node0.addChildBefore(node2, node2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 305.0 305 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      node0.isOnlyModifiesArgumentsCall();
      node0.isGetterDef();
      node0.isDebugger();
      Node node1 = new Node(93, 61440, 49);
      node0.toString(true, false, true);
      node0.isEquivalentTo(node1);
      node0.isEquivalentToShallow(node1);
      node1.children();
      node1.isAdd();
      Node node2 = new Node(38, node0, node0, node0, node1, 57, 37);
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(40, node0, node0);
      node1.detachChildren();
      node1.isHook();
      Node.extractLineno(3406);
      node1.isEquivalentTo(node0, true, true, false);
      Node.newNumber((-2571.2), 37, 37);
      node0.addChildToFront(node1);
      node0.isObjectLit();
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";XP(jR')2W@CG");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(105, node0, node0, node0, node0);
      InputId inputId0 = new InputId("Object#Key");
      node0.setInputId(inputId0);
      node1.checkTreeEquals(node0);
      node0.replaceChild(node1, node1);
      node0.isDo();
      node0.isArrayLit();
      vector0.ensureCapacity(node0.FLAG_ARGUMENTS_UNMODIFIED);
      // Undeclared exception!
      try { 
        node1.getInputId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString(55, "Null");
      node0.isFromExterns();
      Node node1 = Node.newNumber((double) 38);
      node0.isGetProp();
      Node node2 = new Node((-2468), node0, node1, node0, node0);
      node1.checkTreeEquals(node2);
      node0.isVar();
      node1.isAssignAdd();
      // Undeclared exception!
      try { 
        node0.isCast();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2468
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newString("U8I@cwN+YNID}&~D#", (-4646), 4095);
      node0.toStringTree();
      int int0 = 122;
      Node node1 = Node.newString("STRING U8I@cwN+YNID}&~D#\n", 48, 122);
      node0.setWasEmptyNode(true);
      node0.setChangeTime(1355);
      Node node2 = Node.newString("U8I@cwN+YNID}&~D#", (-2501), (-2693));
      String string0 = node2.getQualifiedName();
      node2.addChildrenToFront(node0);
      node2.isContinue();
      node2.getLength();
      node2.getChildBefore(node1);
      node2.isGetElem();
      int int1 = (-3207);
      Node node3 = Node.newString(int1, string0, node2.NO_SIDE_EFFECTS, node1.STATIC_SOURCE_FILE);
      boolean boolean0 = false;
      JSDocInfo jSDocInfo0 = new JSDocInfo(boolean0);
      Set<String> set0 = jSDocInfo0.getSuppressions();
      node3.setDirectives(set0);
      // Undeclared exception!
      try { 
        node1.isUnscopedQualifiedName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      node0.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node(116);
      node0.isIf();
      Node node1 = new Node(32);
      node1.isEmpty();
      node0.isEmpty();
      node1.addChildrenToFront(node0);
      node0.isWith();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newString((String) null, (-1917), (-1917));
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node(88, 88, 88);
      node0.removeChild(node0);
      // Undeclared exception!
      try { 
        node0.isExprResult();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newString("missing prop: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "missing prop: ");
      node0.addSuppression("STRING 8I@*cw.+YND}&~D#\n");
      node0.setString("8I@*cw.+YND}&~D#");
      Node node1 = new Node((-1207));
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newString(1256, "J1<`Y!<>", 1034, 0);
      node0.setChangeTime((-1678));
      node0.addChildToBack((Node) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newString("vv");
      node0.getInputId();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.getQualifiedName();
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node.newString((-1438), "slash_v", 16, 16);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newString("UI@cwN+YNID}&D#", (-4653), (-4653));
      node0.toStringTree();
      node0.setWasEmptyNode(true);
      node0.checkTreeEqualsImpl(node0);
      node0.isLabel();
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isQualifiedName();
      Node node1 = Node.newString("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = new Node(55, node0, node1);
      node0.addChildToFront(node2);
      node2.isNE();
      node2.isLabelName();
      String string0 = "p";
      node1.addChildrenToFront(node0);
      // Undeclared exception!
      try { 
        node0.addSuppression(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newNumber(0.5);
      String string0 = "REGEXP_TYPE";
      Node node1 = Node.newString(49, "REGEXP_TYPE");
      Node node2 = Node.newString(126, "REGEXP_TYPE");
      node0.addChildToFront(node2);
      node2.isNE();
      node1.isLabelName();
      node1.addSuppression("REGEXP_TYPE");
      Node node3 = Node.newString("REGEXP_TYPE", 450, 1);
      node1.getQualifiedName();
      node0.addChildrenToFront(node3);
      node1.isContinue();
      node2.getLength();
      node1.isGetElem();
      Node.mergeLineCharNo((-1623), 57);
      Node node4 = new Node((-1266), node3, node1, node2, 343, 36);
      node3.addChildBefore(node4, node1);
      int int0 = 36;
      int int1 = 50;
      Node.newString(int0, string0, int1, node1.QUOTED_PROP);
      boolean boolean0 = false;
      JSDocInfo jSDocInfo0 = null;
      try {
        jSDocInfo0 = new JSDocInfo(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = new Node(88, 88, 88);
      Node node1 = new Node(88, node0, node0, node0);
      node1.removeChild(node1);
      // Undeclared exception!
      try { 
        node0.isExprResult();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(17, node0, node0);
      node1.detachChildren();
      node0.isNull();
      int int0 = Node.FLAG_GLOBAL_STATE_UNMODIFIED;
      node1.isGetProp();
      Node node2 = new Node((-1275), node1, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1));
      node_SideEffectFlags0.clearSideEffectFlags();
      node2.clonePropsFrom(node0);
      node0.isName();
      node1.setSourceEncodedPositionForTree(46);
      Node node3 = Node.newNumber((double) 8, (-433), (-1261));
      node2.getChildBefore(node3);
      node3.isWhile();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = new Node(15, node0);
      node0.isOnlyModifiesArgumentsCall();
      node0.isSyntheticBlock();
      Node node2 = Node.newNumber((-3568.049798539505), 43, 4);
      node1.isCase();
      Node node3 = new Node(42, node2);
      node3.getQualifiedName();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node3.isWith();
      node3.hasMoreThanOneChild();
      node2.getIndexOfChild(node3);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newString("cH:[E1yh`^bNn*=S;7i");
      Node node1 = new Node(12, node0, node0);
      int int0 = Node.DECR_FLAG;
      Node node2 = new Node(42, node1);
      InputId inputId0 = new InputId("cH:[E1yh`^bNn*=S;7i");
      node1.putProp(40, inputId0);
      node1.isCall();
      Node node3 = Node.newString("#&qQU&BM@-");
      node1.getChildBefore(node3);
      int int1 = 1868;
      // Undeclared exception!
      try { 
        Node.extractCharno(int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      Node node1 = null;
      node0.setLineno(0);
      Node node2 = new Node(64, node0, (Node) null, node0, 21, 0);
      node0.useSourceInfoIfMissingFrom(node2);
      node2.isOr();
      node2.isScript();
      node0.isNumber();
      // Undeclared exception!
      try { 
        node2.isIf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newNumber((double) 64);
      Node.newNumber((double) 51, 132, 40);
      node0.setLineno(3757);
      node0.mayMutateArguments();
      node0.getExistingIntProp(1954);
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(305.0);
      node0.isWhile();
      Node node1 = new Node(57, node0, node0, node0, 30, 15);
      node1.addChildrenAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-379), 2156, (-379));
      Node node1 = new Node((-379), node0, 12, 1534);
      node1.getCharno();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newString("q {\"\"\"U )5)m");
      Node node1 = new Node(85, node0, node0, node0);
      node0.addChildrenAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newString("second new child has existing sibling");
      node0.removeFirstChild();
      node0.setOptionalArg(false);
      node0.toString(true, true, true);
      Node.newString(43, "second new child has existing sibling");
      Node.newString(57, "second new child has existing sibling");
      Node node1 = new Node(53, (Node) null, node0, node0, 4, 4095);
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "7[`{44m";
      Node node0 = Node.newString("7[`{44m");
      int int0 = 0;
      Node node1 = new Node(2, 43, 52);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(0, node0, node0);
      node2.setLength(0);
      node2.isQuotedString();
      node0.replaceChild(node2, node2);
      int int1 = 110;
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = Node.newString("second new child has existing sibling");
      node0.removeFirstChild();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.copyInformationFrom((Node) null);
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 46;
      Node node0 = new Node(46);
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.checkTreeEquals(node0);
      node0.replaceChild(node0, node0);
      // Undeclared exception!
      try { 
        node0.isOnlyModifiesArgumentsCall();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newString("UI@cwN+YNID}&D#", (-4653), (-4653));
      node0.toStringTree();
      Node node1 = Node.newString("STRING UI@cwN+YNID}&D#\n", 12, 122);
      node1.addChildrenToBack(node0);
      node0.setWasEmptyNode(true);
      node1.isExprResult();
      node1.useSourceInfoFrom(node0);
      node0.isEquivalentToTyped(node1);
      node1.isFor();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = Node.newString("Za");
      Vector<JSType> vector0 = new Vector<JSType>();
      node1.detachChildren();
      node1.isHook();
      node1.isGetProp();
      node0.checkTreeEqualsImpl(node1);
      node0.isContinue();
      node0.addChildAfter(node1, (Node) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = (-2636);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-2636), nodeArray0, (-2636), (-2636));
      node0.removeProp(3426);
      node0.addChildrenAfter((Node) null, (Node) null);
      node0.setSideEffectFlags(int0);
      // Undeclared exception!
      try { 
        node0.isFromExterns();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      node0.isFromExterns();
      Node node1 = Node.newNumber((double) 47);
      node0.isDebugger();
      node1.setLength(43);
      node1.isEquivalentTo(node0);
      node1.hasOneChild();
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(305.0);
      node0.isTry();
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node(52, node0, node0, node0);
      node1.addChildrenAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "Null";
      Node node0 = Node.newString(64, "Null");
      Node node1 = new Node(130, 46, 8);
      int int0 = (-1214);
      Node node2 = Node.newString(4095, "Null", 37, (-1214));
      node0.addChildrenToBack(node2);
      Node node3 = new Node(53, node1, node0);
      node1.setLength(4095);
      node0.isWhile();
      node0.replaceChild(node3, node1);
      Node node4 = Node.newNumber((double) node2.SIDE_EFFECTS_ALL, node1.DIRECT_EVAL, node3.SIDE_EFFECTS_ALL);
      node2.getExistingIntProp(node0.SYNTHETIC_BLOCK_PROP);
      // Undeclared exception!
      try { 
        node1.addChildToFront(node4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(305.0);
      node0.isTry();
      Node node1 = new Node(52, node0, node0, node0);
      node1.addChildrenAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(2977, nodeArray0);
      Node node1 = new Node(48, node0, node0, node0, 2, 1);
      int int0 = 510;
      node1.addChildAfter(node0, node0);
      // Undeclared exception!
      try { 
        node0.isNoSideEffectsCall();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newString("7[`{44m");
      Node node1 = new Node(2, 43, 52);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(0, node0, node0);
      node2.setLength(0);
      node1.isWhile();
      node0.replaceChild(node2, node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "second new child has existing sibling";
      Node node0 = Node.newString(0, "second new child has existing sibling", 2086, 0);
      Node node1 = node0.removeFirstChild();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node2 = jSTypeRegistry0.createOptionalParameters((JSType[]) null);
      String string1 = "$BWhf_]?Zw|(1Ek'sR";
      int int0 = (-1657);
      int int1 = (-1338);
      simpleErrorReporter0.warning(jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE, string1, int0, int1);
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node0, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newString("second new child has existing sibling");
      node0.removeFirstChild();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node(482, 482, 482);
      Node node1 = new Node(55);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = Node.newString(" y<");
      node2.isThrow();
      int int0 = Node.FLAG_GLOBAL_STATE_UNMODIFIED;
      node2.isGetProp();
      Node node3 = new Node(57, node0, node2, node1);
      node3.removeFirstChild();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-3025));
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node4 = node2.clonePropsFrom(node1);
      node_SideEffectFlags0.areAllFlagsSet();
      Node node5 = new Node(39, 39, (-3872));
      Node node6 = new Node(55, node4);
      node1.isStringKey();
      int int1 = 54;
      node1.getAncestor(int1);
      node1.isContinue();
      node1.clonePropsFrom(node2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = "!9{]v;CA";
      int int0 = 32768;
      Node[] nodeArray0 = new Node[8];
      Node node0 = Node.newString("Object#Key", 14, 41);
      nodeArray0[0] = node0;
      Node node1 = Node.newString(8, "Object#Element", 434, 43);
      nodeArray0[1] = node1;
      Node node2 = Node.newString(0, "!9{]v;CA", 253, 4);
      nodeArray0[2] = node2;
      Node node3 = new Node(0, node0, node0, node0, node2, 2, (-103));
      nodeArray0[3] = node3;
      JSType[] jSTypeArray0 = new JSType[7];
      JSType jSType0 = null;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, jSTypeArray0);
      JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(functionType0);
      jSTypeArray0[0] = jSType1;
      FunctionType functionType1 = jSTypeRegistry0.createConstructorType(jSType1, jSTypeArray0);
      jSTypeArray0[1] = (JSType) functionType1;
      FunctionType functionType2 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
      jSTypeArray0[2] = (JSType) functionType2;
      // Undeclared exception!
      try { 
        JSType.toMaybeFunctionType(jSTypeArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newString("The new child node already has a parent.", (-109), (-109));
      Node node1 = new Node((-109), node0, node0, node0, node0, (-4249), 784);
      node1.getBooleanProp(54);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newNumber((-1833.373559825869), 4256, (-2851));
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(56, node0, node0, node0, node0);
      node1.detachChildren();
      Node node2 = Node.newNumber((double) 37, 6, 16);
      Node node3 = new Node(56, node0, node1, node0);
      Node node4 = Node.newString((-921), "", 4, 15);
      Node node5 = new Node(1261, node2, node1, node3, node4);
      node1.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      // Undeclared exception!
      try { 
        node2.siblings();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isTry();
      node0.mayMutateArguments();
      Node node1 = new Node(249, node0, node0, 48, 1);
      node1.cloneTree();
      node1.isExprResult();
      node1.isEquivalentToTyped(node0);
      Node.mergeLineCharNo(16, 88);
      node1.isInstanceOf();
      node1.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4402), nodeArray0, 0, 0);
      node0.hasOneChild();
      node0.isQualifiedName();
      node0.isVarArgs();
      Node node1 = node0.cloneTree();
      node0.copyInformationFrom(node1);
      node0.getQualifiedName();
      node0.getProp(38);
      Node node2 = new Node(57, (-1894), 33);
      node0.replaceChildAfter(node2, node2);
      node0.getDirectives();
      node2.isGetterDef();
      node2.addChildBefore(node1, node1);
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(node1.FLAG_ARGUMENTS_UNMODIFIED);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newNumber((-908.5890251));
      node0.getStaticSourceFile();
      node0.isSyntheticBlock();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.hasOneChild();
      node0.isDec();
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2958, 368, 1230);
      Node node1 = new Node(1434, node0, node0, node0, node0);
      node1.cloneTree();
      node0.getJSType();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = new Node(1335);
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = new Node(46);
      node0.replaceChildAfter(node0, node0);
      // Undeclared exception!
      try { 
        node0.isOnlyModifiesArgumentsCall();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(118);
      Node node0 = Node.newString(47, "");
      Node node1 = Node.newNumber((double) 46);
      Node node2 = new Node(152, node0, node0, node1);
      node2.isSyntheticBlock();
      Node node3 = Node.newNumber((-1936.2048466502));
      node1.isCase();
      Node node4 = new Node(4095, node2);
      node3.isVarArgs();
      node2.isRegExp();
      Node node5 = node2.cloneTree();
      node4.isWith();
      node1.hasMoreThanOneChild();
      node5.isFalse();
      node4.isNE();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newString(117, "o1S63T8`'<PiwL&a-RB");
      Node node1 = new Node(4096, node0);
      Node node2 = new Node(3600, node1);
      node1.replaceChildAfter(node0, node2);
      node2.isOnlyModifiesArgumentsCall();
      node2.checkTreeEqualsImpl(node0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      // Undeclared exception!
      try { 
        node2.getDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isNoSideEffectsCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesArguments();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags2.clearAllFlags();
      int int0 = 0;
      int int1 = 1;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.createParameters((JSType[]) null);
      int int2 = 0;
      Node[] nodeArray0 = new Node[3];
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(118);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node0 = new Node(118, 3264, 3264);
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(9, 0, 10);
      node0.isString();
      Node node1 = new Node(0, 0, 42);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.getExistingIntProp((-2093));
      node0.isAnd();
      node0.mayMutateGlobalStateOrThrow();
      node0.detachChildren();
      int int0 = 2097152;
      node0.getDirectives();
      // Undeclared exception!
      try { 
        node0.setSourceEncodedPositionForTree(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: -2093
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node(9);
      Node node1 = new Node(31, 52, 9);
      Node node2 = new Node((-6), node1, node1, node1, node1, 54, 634);
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node0);
      int int0 = Node.INPUT_ID;
      node1.isEquivalentToTyped(node3);
      node0.detachChildren();
      node1.isCase();
      node1.putIntProp((-285), 77);
      node2.isOptionalArg();
      node2.isVar();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0);
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node4.isLabel();
      node4.isNE();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = new Node(83, node0, node0, 52, 42);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.getChangeTime();
      node0.mayMutateArguments();
      node0.getExistingIntProp(1954);
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.mayMutateArguments();
      node0.getExistingIntProp(1954);
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(56, node0, node0, node0, node0);
      node1.detachChildren();
      node1.isHook();
      Node node2 = Node.newString(36, "");
      node2.getSideEffectFlags();
      node1.isString();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newString("Yv!Y.)t%C'Y", 98, 97);
      node0.isString();
      Node node1 = new Node(1610, 38, (-2093));
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node1.getExistingIntProp(97);
      node1.isAnd();
      node0.mayMutateGlobalStateOrThrow();
      node2.detachChildren();
      node0.getDirectives();
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 97
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 15;
      Node node0 = Node.newString(15, "s#`0$E2|L9s8Qh;C=");
      Node node1 = new Node(15, node0, node0, 2, 32);
      Node node2 = Node.newString("s#`0$E2|L9s8Qh;C=");
      Node node3 = new Node(55, node2, node2, (Node) null, node1, 1, 404);
      Node node4 = new Node(int0, node1, node3, node1, node2.DIRECT_EVAL, node0.NO_SIDE_EFFECTS);
      node4.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(40, node0, node0);
      node1.detachChildren();
      node1.isHook();
      Node.extractLineno(3406);
      node0.isGetProp();
      node0.isNumber();
      node1.isIf();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      nodeArray0[3] = node1;
      Node node2 = new Node(43, nodeArray0);
      node2.checkTreeEqualsImpl(nodeArray0[0]);
      nodeArray0[3].isQuotedString();
      // Undeclared exception!
      try { 
        nodeArray0[2].isUnscopedQualifiedName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = (-290);
      Node node0 = new Node((-290), (Node[]) null);
      Node node1 = null;
      try {
        node1 = new Node(int0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString(2330, "");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.getInputId();
      SimpleErrorReporter.getMessage1("", (Object) null);
      node0.isOptionalArg();
      List<JSType> list0 = null;
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 0;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.valueOf();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node0 = new Node(0);
      node_SideEffectFlags0.setMutatesThis();
      node0.mayMutateGlobalStateOrThrow();
      node0.setOptionalArg(false);
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.setQuotedString();
      // Undeclared exception!
      try { 
        node0.getJsDocBuilderForNode();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = new Node(627, 627, 627);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(36);
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.setSideEffectFlags(node_SideEffectFlags0);
      // Undeclared exception!
      try { 
        node0.isCall();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 627
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isTry();
      node0.mayMutateArguments();
      Node node1 = new Node(249, node0, node0, 48, 1);
      node0.isEquivalentTo(node1, false, true, true);
      Node node2 = new Node(0, node0, 65536, 218);
      node2.getIntProp(node0.SIDE_EFFECTS_ALL);
      node0.isEquivalentToTyped(node2);
      node2.getDirectives();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newNumber(2804.0);
      node0.mayMutateArguments();
      node0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newNumber(305.0);
      node0.isTry();
      Node node1 = new Node(0, node0, node0, node0);
      node0.addChildrenAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = Node.newString("cH:[E1yh`^bNn*=S;7i");
      Node node1 = new Node(49, node0, node0, node0);
      int int0 = Node.QUOTED_PROP;
      Node node2 = new Node(29, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(2958, nodeArray0);
      Node node1 = new Node(2958, node0, node0);
      node0.isNoSideEffectsCall();
      node1.putProp(510, node0);
      node0.mayMutateArguments();
      Node node2 = new Node((-12), node0, 37, 56);
      node1.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newNumber(0.7);
      node0.isFromExterns();
      Node node1 = Node.newNumber((double) 37);
      node1.isGetProp();
      node1.toStringTree();
      Node node2 = Node.newNumber((double) 123);
      Node node3 = new Node(29, node1, node2, node1);
      node2.setVarArgs(false);
      node3.isExprResult();
      node2.isEquivalentToTyped(node0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.javascript.rhino.Node$SiblingNodeIterable");
      node0.mayMutateArguments();
      node0.isEquivalentTo(node0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newString(102, "");
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = new Node(88, 88, 88);
      Node node1 = new Node(88, node0, node0, node0);
      node0.isExprResult();
      node1.isEquivalentToTyped(node0);
      node1.isFor();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = new Node(46);
      node0.isOnlyModifiesArgumentsCall();
      node0.checkTreeEqualsImpl(node0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = new Node(46, node0, node0, node0);
      node1.removeChild(node0);
      node0.isExprResult();
      node1.isEquivalentToTyped(node0);
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newString("is_constant_name");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.isIf();
      Node node3 = new Node(2, node0, node0, node1, 47, 0);
      Node node4 = new Node(51, node3, node2, node2);
      node4.addChildToFront(node1);
      node3.isStringKey();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      Node node1 = Node.newNumber(1962.07705272);
      node0.setLineno(0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node0);
      node2.isOnlyModifiesThisCall();
      node1.isOr();
      node0.isScript();
      node2.isLocalResultCall();
      node0.isNumber();
      node1.isIf();
      node2.children();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.getJsDocBuilderForNode();
      node1.isSyntheticBlock();
      node0.isWhile();
      node2.isWith();
      node0.checkTreeTypeAwareEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newNumber(0.5);
      node0.putBooleanProp((-2410), false);
      Node node1 = Node.newString("com.google.common.collect.ImmutableCollection$Builder");
      Node node2 = Node.newNumber(716.33722);
      Node node3 = node0.useSourceInfoFrom(node2);
      Node node4 = node0.copyInformationFrom(node1);
      node2.clonePropsFrom(node0);
      Node node5 = Node.newNumber(0.0);
      node0.checkTreeEquals(node5);
      node1.isOr();
      node3.checkTreeEqualsImpl(node0);
      Node node6 = node4.useSourceInfoFrom(node5);
      node6.detachFromParent();
      int int0 = 8233;
      int int1 = (-1517);
      node3.putIntProp(int0, int1);
      node3.isAssignAdd();
      node0.isBreak();
      // Undeclared exception!
      try { 
        node5.copyInformationFromForTree(node3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = Node.newString("8T.YJm,<\"B>9`Xu?Eyg");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.isEquivalentTo(node0, false, true, true);
      Node.newNumber((double) 30, 572, 116);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node3.addChildToFront(node1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newNumber((-24.46274361358921));
      node0.isTry();
      node0.mayMutateArguments();
      Node node1 = new Node(249, node0, node0, 48, 1);
      Node node2 = node1.cloneTree();
      node1.isExprResult();
      node2.isEquivalentToTyped(node2);
      node0.isIf();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node2);
      node2.isQuotedString();
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = new Node((-1678));
      Node node1 = new Node(2201, node0);
      node1.isOnlyModifiesArgumentsCall();
      node1.isOptionalArg();
      node1.isDebugger();
      node1.isEquivalentTo(node0);
      node1.isEquivalentToShallow(node0);
      node1.isAdd();
      node0.isSwitch();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node.newString(1256, "J1<`Y!<>", 1034, 0);
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      node2.getSourceOffset();
      node2.getLineno();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = Node.newString(4, "PF$w?8jD@cQy7h", 4, 4);
      node0.children();
      node0.isEquivalentToShallow((Node) null);
      node0.isSyntheticBlock();
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(40, node0, node0);
      node1.isHook();
      node1.getSourceOffset();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = Node.newString("q {\"\"\"U )5)m");
      node0.getSideEffectFlags();
      node0.getSourceFileName();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kg:HlYLi>T?@z|[");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(147);
      node0.isDebugger();
      Node.newNumber((double) 43);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = new Node(1808);
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = new Node(21);
      node0.isDebugger();
      Node node1 = Node.newNumber((double) 56, 735, 120);
      node0.isAssign();
      Node.newString(1353, "b-{`5NtE");
      node0.isAdd();
      node1.getDouble();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node2.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-379), 2156, (-379));
      node0.isQuotedString();
      node0.isFor();
      node0.isContinue();
      node0.isArrayLit();
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getStaticSourceFile();
      Node node1 = Node.newString("", 32, 32);
      node0.getChangeTime();
      node0.isBreak();
      node0.getCharno();
      node0.getJsDocBuilderForNode();
      node0.isFunction();
      node0.isArrayLit();
      node1.setSideEffectFlags(130);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      // Undeclared exception!
      try { 
        node_SideEffectFlags2.clearAllFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = new Node(46);
      node0.getSourceFileName();
      node0.isFunction();
      node0.setString("AKE");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = Node.newNumber(1449.640613353, 108, 37);
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = new Node(52);
      Node node1 = new Node(15, node0);
      node0.isOnlyModifiesArgumentsCall();
      node0.setSideEffectFlags(52);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = new Node(65536, 338, 13);
      node0.isQuotedString();
      node0.getChangeTime();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newString(143, "RWGEbG_TYHE");
      Node node2 = Node.newString(105, "RWGEbG_TYHE");
      node1.isNE();
      node1.isLabelName();
      node0.addSuppression("RWGEbG_TYHE");
      node1.mayMutateArguments();
      node1.getProp(1024);
      node2.isFunction();
      Node[] nodeArray0 = new Node[0];
      Node node3 = new Node(53, nodeArray0, (-896), 4095);
      node3.isScript();
      node2.isHook();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newString("8T.YJm,<\"B>9`Xu?Eyg");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(30, node0, node0, node0);
      node1.isIn();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node2 = new Node(15, node1, node1, node1);
      Node.newString("8T.YJm,<\"B>9`Xu?Eyg", 29, 55);
      node0.isIn();
      int int0 = Node.VAR_ARGS_NAME;
      node1.getBooleanProp(0);
      Node node3 = Node.newNumber((double) 12, 1, 155);
      node3.addChildToFront(node2);
      node1.setSideEffectFlags((-2939));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = new Node(36);
      Node node1 = new Node(15, node0);
      node1.useSourceInfoFrom(node0);
      node1.replaceChildAfter(node0, node0);
      // Undeclared exception!
      try { 
        node0.isOnlyModifiesArgumentsCall();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      node0.isFromExterns();
      Node node1 = Node.newNumber((double) 38);
      node1.isArrayLit();
      node1.toStringTree();
      node1.isExprResult();
      node1.isEquivalentToTyped(node1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = Node.DIRECT_EVAL;
      Node node0 = Node.newNumber((-1.0));
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = Node.newNumber(0.7);
      InputId inputId0 = new InputId("O(L'(hgg$>JTrZTa-");
      Node node1 = Node.newString(1314, "O(L'(hgg$>JTrZTa-", 3546, 130);
      node1.setInputId(inputId0);
      node0.setIsSyntheticBlock(false);
      node1.getIndexOfChild(node0);
      node0.isComma();
      node1.isName();
      Node node2 = Node.newString(2, "O(L'(hgg$>JTrZTa-");
      Node node3 = new Node((-4027));
      node1.clonePropsFrom(node0);
      node3.isOnlyModifiesThisCall();
      node3.toString();
      Node node4 = node2.getLastChild();
      node1.isEquivalentToTyped(node2);
      int int0 = 159;
      node3.putIntProp(node4.MAX_COLUMN_NUMBER, int0);
      // Undeclared exception!
      try { 
        node4.isAdd();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newNumber((double) 4);
      Node node2 = node0.useSourceInfoFrom(node1);
      Node node3 = node0.copyInformationFrom(node2);
      Node node4 = Node.newString("");
      Node node5 = Node.newNumber((double) 2);
      Node node6 = new Node(30, node2, node1, 578, 38);
      node0.checkTreeEquals(node6);
      node2.isOr();
      node3.checkTreeEqualsImpl(node2);
      Node node7 = new Node(110, 13, 77);
      Node node8 = node0.useSourceInfoFrom(node7);
      Node node9 = node2.detachFromParent();
      node5.isDo();
      node9.isArrayLit();
      Stack<JSType> stack0 = new Stack<JSType>();
      stack0.ensureCapacity(414);
      node4.getInputId();
      node8.setCharno(51);
      node7.isCall();
      node4.isFunction();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = Node.newString("\"S}Lk}}BbG[\"!?gO7");
      node0.setVarArgs(true);
      Node node1 = Node.newNumber(2229.01334309);
      node1.replaceChildAfter(node0, node0);
      node0.getString();
      node0.getChildCount();
      // Undeclared exception!
      try { 
        node0.copyInformationFrom(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 1757;
      Node node0 = new Node(1757);
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1757
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isHook();
      node0.isParamList();
      node0.getQualifiedName();
      node0.isNE();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((JSType[]) null);
      node1.siblings();
      node0.addChildrenAfter(node1, node1);
      int int0 = (-1355);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newString(40, "]VK'.;oCSZF3)", 40, 40);
      Node node1 = new Node(40, node0, node0);
      node0.isGetterDef();
      node1.getSourceOffset();
      node1.isParamList();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals(jSTypeRegistry0);
      node0.isParamList();
      Node node1 = Node.newNumber(0.5, (-623), 52);
      Node node2 = node0.getChildBefore(node1);
      node2.getIndexOfChild(node1);
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      Node node1 = new Node(627, node0, (Node) null);
      node1.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = new Node(110);
      Node node1 = Node.newNumber((double) 36);
      Node node2 = Node.newNumber((double) 53);
      node2.setVarArgs(true);
      node2.siblings();
      node1.getChangeTime();
      node0.addChildToBack(node1);
      Node node3 = Node.newNumber((double) 42);
      Node node4 = node2.cloneNode();
      node2.isThrow();
      node0.getBooleanProp(31);
      node1.hasOneChild();
      node1.getCharno();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(302);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.setReturnsTainted();
      node1.setSourceEncodedPositionForTree(38);
      Node node5 = node2.useSourceInfoIfMissingFrom(node3);
      node2.isOr();
      node4.isSyntheticBlock();
      node0.getSideEffectFlags();
      Node.NodeMismatch node_NodeMismatch0 = node3.checkTreeTypeAwareEqualsImpl(node1);
      node_NodeMismatch0.equals((Object) null);
      node5.isParamList();
      Node node6 = node2.getChildBefore(node3);
      node6.getIndexOfChild(node2);
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newString("Za", (-928), (-928));
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals("Za");
      node0.isLocalResultCall();
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newNumber(0.5);
      Node node1 = Node.newString(49, "REGEXP_TYPE");
      Node node2 = Node.newString(126, "REGEXP_TYPE");
      node0.addChildToFront(node2);
      node2.isNE();
      node1.isLabelName();
      String string0 = "p";
      node0.addChildToBack(node2);
      node1.addSuppression(string0);
      node2.setQuotedString();
      int int0 = 2957;
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(88, (-3485), (-3485));
      Node node1 = new Node(88, node0, node0, node0);
      node1.setSourceFileForTesting("Object#Element");
      Node node2 = Node.newString("Object#Key");
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      node1.isOptionalArg();
      node2.isScript();
      Node.newString("", 2, 38);
      node0.isVar();
      node1.isAssignAdd();
      node0.hasChild(node3);
      node0.getProp(40);
      Node node4 = Node.newString("STRING 8I@*cw.+YND}&~D#\n", 39, 172);
      node4.isThrow();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(88);
      Node node1 = new Node(88, node0, node0, node0);
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isThrow();
      int int0 = Node.STATIC_SOURCE_FILE;
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newNumber(1962.07705272);
      node0.isIf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.isSyntheticBlock();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "U8I@cwN+YNID}&~D#");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newNumber(1141.33944366347, (-4500), 4361);
      node0.isNE();
      node0.isExprResult();
      Node node1 = new Node(98, node0, node0);
      node1.isNoSideEffectsCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.getType("VXSZY?3");
      node0.setJSType((JSType) null);
      node1.setSourceEncodedPositionForTree((-1004));
      Node node2 = node0.srcref(node1);
      Node node3 = node0.clonePropsFrom(node1);
      node2.getChangeTime();
      Node node4 = node0.useSourceInfoIfMissingFromForTree(node1);
      node3.getSourceOffset();
      node4.isComma();
      node4.addSuppression("start index");
      node1.isFromExterns();
      node3.isComma();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newString(101, "synthetic");
      node0.isQuotedString();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2394);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags4.clearAllFlags();
      node0.isOptionalArg();
      Node node1 = Node.newNumber(1222.4027);
      Node node2 = new Node(49);
      node0.isWhile();
      node1.isAssignAdd();
      node1.hasChild(node0);
      node0.getProp(16);
      node2.isThrow();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = new Node(1757, (-469), 47);
      node0.putProp(49, "");
      node0.isCall();
      Node node1 = Node.newString("");
      node0.getChildBefore(node1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newString("q {\"\"\"U )5)m");
      node0.isVar();
      node0.isFromExterns();
      node0.isInstanceOf();
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = Node.newNumber((-3995.857), (-472), (-472));
      node0.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(56, "", 12, 49);
      node1.detachChildren();
      node1.isGetProp();
      Node node2 = new Node((-1266), node1, node0, node0);
      Node node3 = new Node(119, 970, 1803);
      node2.addChildToFront(node3);
      node2.getParent();
      node3.setLength(52);
      node3.isCall();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = Node.newString(101, "synthetic");
      node0.setSourceFileForTesting("synthetic");
      Node node1 = new Node(1610612736, node0, 30, 65522);
      node0.getChildAtIndex(16);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = new Node(110);
      Node node1 = Node.newNumber((double) 36);
      Node node2 = Node.newNumber((double) 53);
      node2.setVarArgs(true);
      node2.siblings();
      node1.getChangeTime();
      node0.addChildToBack(node1);
      Node node3 = Node.newNumber((double) 42);
      node2.cloneNode();
      node2.isThrow();
      node0.getBooleanProp(31);
      node1.hasOneChild();
      node1.getCharno();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(302);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.setReturnsTainted();
      node1.setSourceEncodedPositionForTree(38);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("d17ik-EB-szOYrp[", true);
      node3.setStaticSourceFile(simpleSourceFile0);
      node2.setSourceFileForTesting("d17ik-EB-szOYrp[");
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.addChildToFront(node2);
      node1.getDouble();
      node0.setLineno((-601));
      node3.isArrayLit();
      node2.isAnd();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      node0.useSourceInfoIfMissingFromForTree((Node) null);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = Node.newString((-327), "8I@*cw.+YND}&~D#", (-327), (-327));
      node0.isUnscopedQualifiedName();
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newString("U8I@cwN+YNID}&~D#", (-4646), (-4646));
      node0.toStringTree();
      node0.setWasEmptyNode(true);
      Node node1 = Node.newString(29, "STRING U8I@cwN+YNID}&~D#\n");
      int int0 = 16384;
      node0.useSourceInfoIfMissingFromForTree((Node) null);
      node1.getJsDocBuilderForNode();
      node1.setCharno(int0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.isTypeOf();
      // Undeclared exception!
      try { 
        node1.isThis();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = new Node((-1678));
      Node node1 = new Node((-774), node0);
      node0.isOnlyModifiesArgumentsCall();
      node1.isOptionalArg();
      node0.isDebugger();
      node1.isEquivalentTo(node0);
      node1.isEquivalentToShallow(node0);
      node1.isAdd();
      node1.isSwitch();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = new Node(53, node1, node1, node1, node1);
      int int0 = 2086;
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node1;
      Node node3 = new Node(2, (Node[]) null);
      nodeArray0[1] = node3;
      nodeArray0[2] = node0;
      int int1 = (-2871);
      Node node4 = new Node(int0, nodeArray0, node3.CHANGE_TIME, int1);
      // Undeclared exception!
      try { 
        node4.setJSDocInfo(jSDocInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      node0.isFromExterns();
      Node node1 = null;
      node0.setLineno(0);
      Node node2 = new Node(64, node0, (Node) null, node0, 21, 0);
      node0.useSourceInfoIfMissingFrom(node2);
      node2.isOr();
      node2.isScript();
      node0.isNumber();
      // Undeclared exception!
      try { 
        node2.isIf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(103, 103, 103);
      node0.isCatch();
      node0.isRegExp();
      node0.cloneTree();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isWith();
      node0.isCatch();
      node0.isFor();
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = new Node(110);
      Node node1 = Node.newNumber((double) 36);
      Node node2 = Node.newNumber((double) 53);
      node2.setVarArgs(true);
      node2.siblings();
      node1.getChangeTime();
      node0.addChildToBack(node1);
      Node node3 = Node.newNumber((double) 42);
      Node node4 = node2.cloneNode();
      node2.isThrow();
      node0.getBooleanProp(31);
      node1.hasOneChild();
      node1.getCharno();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(302);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.setReturnsTainted();
      node1.setSourceEncodedPositionForTree(38);
      Node node5 = node2.useSourceInfoIfMissingFrom(node3);
      node2.isOr();
      node4.isSyntheticBlock();
      node0.getSideEffectFlags();
      Node.NodeMismatch node_NodeMismatch0 = node3.checkTreeTypeAwareEqualsImpl(node1);
      node_NodeMismatch0.equals((Object) null);
      node5.isParamList();
      node0.getSourcePosition();
      Node node6 = node2.getChildBefore(node3);
      node6.getIndexOfChild(node2);
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isTry();
      node0.mayMutateArguments();
      Node node1 = new Node(249, node0, node0, 48, 1);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node_AncestorIterable0.iterator();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("}+", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.detachChildren();
      node1.isScript();
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = Node.newNumber((-1993.804496840024));
      Node.newString("7lv'vcGuA?)f", 4095, 1);
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = "7[`{44m";
      Node node0 = Node.newString("7[`{44m");
      int int0 = 0;
      Node node1 = new Node(2, 43, 52);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(0, node0, node0);
      node2.setLength(0);
      node1.isWhile();
      node0.replaceChild(node2, node2);
      int int1 = 110;
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = new Node(113);
      Node node1 = Node.newString("Object#Key");
      node0.isWhile();
      node0.isAssignAdd();
      node0.getProp(113);
      node0.isFunction();
      node0.addChildrenAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = new Node(627, 627, 627);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1809);
      node0.setSideEffectFlags(node_SideEffectFlags0);
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int int0 = 55;
      Node[] nodeArray0 = new Node[6];
      Node node0 = Node.newNumber(0.0, 55, 55);
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.setLength(122);
      node0.replaceChild(node0, node0);
      int int1 = 102;
      Node.newNumber((double) node0.COLUMN_BITS, node0.SLASH_V, int1);
      // Undeclared exception!
      try { 
        nodeArray0[0].getExistingIntProp(node0.COLUMN_BITS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node.extractLineno(13);
      String string0 = "T`Llk!";
      Node node0 = Node.newString(13, "T`Llk!", 100, 0);
      node0.detachFromParent();
      boolean boolean0 = false;
      JSDocInfo jSDocInfo0 = null;
      try {
        jSDocInfo0 = new JSDocInfo(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isLabel();
      node0.setType(0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isLabel();
      node0.isFunction();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      node0.isFromExterns();
      Node.newNumber(1962.07705272);
      node0.setLineno(0);
      Node node1 = new Node(64, node0, node0, node0, 21, 32);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.isOr();
      node2.isOptionalArg();
      node1.isScript();
      node0.isNumber();
      node1.isIf();
      node1.checkTreeEqualsImpl(node0);
      node1.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(118);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node0 = new Node(118, 3264, 3264);
      node0.isNumber();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(103, 103, 103);
      node0.isIf();
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int int0 = 0;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.valueOf();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node0 = new Node(0);
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags0.setMutatesThis();
      node0.mayMutateGlobalStateOrThrow();
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.setOptionalArg(false);
      node_SideEffectFlags2.setMutatesGlobalState();
      node0.setQuotedString();
      // Undeclared exception!
      try { 
        node0.getJsDocBuilderForNode();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(118);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node0 = new Node(118, 118, 118);
      node0.getChildAtIndex(29);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = Node.newNumber((double) 46);
      Node node1 = Node.newNumber((double) 57, 54, 30);
      node1.addChildToFront(node0);
      Node node2 = new Node(43, node0, node0, node0);
      node0.isEquivalentToTyped(node0);
      Node.mergeLineCharNo(node0.OPT_ARG_NAME, node0.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = new Node((-1678));
      Node node1 = Node.newString(30, "");
      node0.isFromExterns();
      Node node2 = null;
      node0.setLineno(29);
      Node node3 = Node.newNumber((double) 49);
      Node node4 = new Node((-654), node3, node1);
      Node node5 = new Node(2361, node3, node4, node1, 40, 50);
      Node node6 = node1.useSourceInfoIfMissingFrom(node5);
      node5.isOr();
      node6.isScript();
      // Undeclared exception!
      try { 
        node1.isNumber();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(2958, nodeArray0);
      Node node1 = new Node(2958, node0, node0);
      node0.isNoSideEffectsCall();
      node1.putProp(510, node0);
      node0.mayMutateArguments();
      Node node2 = new Node(16, node0, node1, node0, 54, 55);
      node1.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = new Node(1757);
      Node node1 = Node.newString((-1), "", 14, (-2654));
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$FileLevelJsDocBuilder");
      Node node1 = new Node(31, node0, node0, node0);
      Node node2 = new Node(1205, node0, node0, node0, node1, 93, 57);
      node2.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = Node.newNumber(2256.5717129, 627, 627);
      Node node1 = new Node(42, node0);
      Node node2 = new Node(1, node0, node1, node1, node0, 55, 1);
      node2.getDouble();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = new Node(110);
      Node node1 = Node.newNumber((double) 36);
      Node node2 = Node.newNumber((double) 53);
      node2.setVarArgs(true);
      node2.siblings();
      node1.getChangeTime();
      node0.addChildToBack(node1);
      Node.newNumber((double) 42);
      node2.cloneNode();
      Node node3 = Node.newString(4095, "", 1385, (-1));
      node3.checkTreeEquals(node1);
      node3.isQualifiedName();
      node0.getDouble();
      node2.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = Node.newNumber((-3995.857), (-472), (-472));
      node0.toString();
      node0.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = Node.newNumber((-3995.857), (-472), (-472));
      node0.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node0.isTypeOf();
      node0.getAncestor(39);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newNumber(2256.5717129, 627, 627);
      node0.getAncestor(122);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = Node.newString("q {\"\"\"U )5)m");
      node0.isTypeOf();
      node0.isFromExterns();
      node0.isInstanceOf();
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = new Node((-1678));
      Node node1 = new Node(1260, node0);
      node1.mayMutateArguments();
      boolean boolean0 = node1.isOptionalArg();
      node0.isDebugger();
      node1.isEquivalentTo(node0);
      node1.isEquivalentToShallow(node0);
      node1.isAdd();
      node1.isSwitch();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = new Node(53, node1, node1, node1, node1);
      int int0 = 2077;
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node1;
      Node node3 = new Node(2, (Node[]) null);
      nodeArray0[1] = node3;
      nodeArray0[2] = node0;
      // Undeclared exception!
      try { 
        jSDocInfo0.setJavaDispatch(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = new Node(53, node0);
      node0.isOnlyModifiesArgumentsCall();
      node0.isOptionalArg();
      node1.isDebugger();
      node1.isEquivalentTo(node0);
      node1.isEquivalentToShallow(node0);
      node1.isAdd();
      node0.isSwitch();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node.newString(16, "quoted", 39, 36);
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      node2.getSourceOffset();
      node1.getLineno();
      node2.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = Node.newNumber((-3995.857), (-472), (-472));
      node0.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.setSourceEncodedPositionForTree((-472));
      Node node1 = new Node(1820, node0, node0, node0);
      Node node2 = node1.detachFromParent();
      node0.getChangeTime();
      node0.isScript();
      // Undeclared exception!
      try { 
        node2.isNumber();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4402), nodeArray0, 0, 0);
      node0.hasOneChild();
      node0.isQualifiedName();
      node0.isVarArgs();
      Node node1 = node0.cloneTree();
      Node node2 = node0.copyInformationFrom(node1);
      node0.getQualifiedName();
      node0.getProp(38);
      Node node3 = new Node(57, (-1894), 33);
      node3.putIntProp(847, 15);
      node0.replaceChildAfter(node3, node3);
      node0.getDirectives();
      node3.isGetterDef();
      node3.addChildBefore(node1, node1);
      Node node4 = node0.getChildAtIndex(node1.FLAG_ARGUMENTS_UNMODIFIED);
      // Undeclared exception!
      try { 
        node4.addChildAfter(node0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = Node.newString("8T.YJm,<\"B>9`Xu?Eyg");
      Node node1 = new Node(30);
      Node node2 = new Node(15, node0, node1, node0, node1);
      node0.isContinue();
      Node node3 = new Node(16, node0, node0);
      node1.getDouble();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node node0 = Node.newNumber(2256.5717129, 627, 627);
      Node node1 = Node.newString("quoted", 38, 552);
      node0.isEquivalentToTyped(node1);
      Node node2 = Node.newString("0L`BGtGDKI", 2762, (-1145));
      node2.isWhile();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = Node.newString(48, "");
      Node node1 = Node.newString(1491, "");
      node0.getLength();
      node0.useSourceInfoIfMissingFrom(node1);
      Node node2 = node1.srcref(node0);
      node2.getSideEffectFlags();
      node0.getIndexOfChild(node1);
      node1.getLineno();
      node1.isCatch();
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = new Node(88, 88, 88);
      Node node1 = new Node(88, node0, node0, node0);
      node0.isExprResult();
      node1.isCatch();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = new Node(26, node0, node0, node0, node0, (-1015), 2);
      node0.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(305.0);
      node0.addSuppression("_&xcjyc7=ePZ%KL5-");
      node0.isTry();
      node0.srcref((Node) null);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType[] jSTypeArray0 = new JSType[5];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      JSType jSType0 = null;
      FunctionType functionType0 = jSTypeRegistry1.createFunctionType((JSType) null, jSTypeArray0);
      jSTypeArray0[0] = (JSType) functionType0;
      Node node0 = Node.newString("Object#Element");
      Node node1 = new Node(0, node0, node0, node0);
      Node node2 = new Node(0, node1, 37, 1);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node2, jSTypeArray0[0]);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getOwnerFunction();
      jSTypeArray0[1] = (JSType) null;
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      jSTypeArray0[2] = (JSType) templateType1;
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry((ErrorReporter) null);
      JSType jSType1 = jSTypeRegistry2.createFromTypeNodes(node1, "Unknown class name", templateType0);
      jSTypeArray0[3] = jSType1;
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = new Node(57, (Node) null, (Node) null, 57, 57);
      int int0 = (-917);
      // Undeclared exception!
      try { 
        node0.getProp(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals(jSTypeRegistry0);
      node0.isParamList();
      node0.isDec();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = Node.newString((-1914), "NUMBER_TYPE");
      Node node1 = new Node((-327), node0, node0, node0, node0);
      Node node2 = new Node((-1914), node1, node0, 15, 154);
      node2.isIn();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4402), nodeArray0, 12, 12);
      node0.hasOneChild();
      node0.isQualifiedName();
      node0.isVarArgs();
      Node node1 = new Node(30, node0, node0, node0);
      Node node2 = new Node(57, node1, node0, 37, 56);
      node0.getQualifiedName();
      int int0 = (-1894);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) 0, 0, (-4685));
      Node node1 = new Node(0, node0, node0, node0, node0);
      node0.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      node0.siblings();
      node_SideEffectFlags0.setAllFlags();
      Node node2 = new Node(15);
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(103, 103, 103);
      node0.isIf();
      node0.checkTreeEqualsImpl(node0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.removeChildren();
      node0.getDouble();
      Node.extractLineno(node0.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString(30, "y!{@S'9O5?04gq");
      node0.getDirectives();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = new Node(9, 0, 9);
      node0.hasChild(node0);
      Node node1 = new Node(0, 0, 42);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      int int0 = Node.REFLECTED_OBJECT;
      node1.isAnd();
      node2.mayMutateGlobalStateOrThrow();
      node0.detachChildren();
      Node node3 = Node.newString(43, ">");
      node3.getDirectives();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(40, node0, node0);
      node1.detachChildren();
      node1.isHook();
      Node.extractLineno(3406);
      node1.isEquivalentTo(node0, false, false, true);
      Node node2 = new Node(1386, node1, (-1575), 3335);
      node1.getJsDocBuilderForNode();
      node2.hasChild(node0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = Node.newNumber((-3725.9729798367), (-1852), 0);
      node0.isHook();
      int int0 = Node.DIRECT_EVAL;
      node0.hasChild(node0);
      Node node1 = new Node(4095, node0, node0, node0);
      node0.isExprResult();
      node0.isFor();
      node1.isComma();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      node0.isFromExterns();
      Node node1 = new Node(16);
      node0.mayMutateArguments();
      Node node2 = new Node(141, node1, node1, (-1058), 31);
      node0.isEquivalentTo(node1, true, true, true);
      Node node3 = new Node(16, node0, 2, (-197));
      node2.getJsDocBuilderForNode();
      node2.hasChild(node1);
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = Node.newString("8T.YJm,<\"B>9`Xu?Eyg");
      node0.isSyntheticBlock();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8T.YJm,<\"B>9`Xu?Eyg");
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node1 = new Node(15, node0, node0, node0);
      node0.setSourceEncodedPosition(181);
      node1.setChangeTime((-3428));
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = Node.newString(64, "#4o8*5AbGN0FmMQ?{W");
      Node node1 = Node.newString(16, "#4o8*5AbGN0FmMQ?{W");
      int int0 = Node.FLAG_LOCAL_RESULTS;
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node1.srcref(node2);
      node1.getSideEffectFlags();
      node0.getIndexOfChild(node2);
      node0.getLineno();
      node0.type = 15;
      node2.setSourceEncodedPosition(43);
      node0.isCatch();
      Node node3 = new Node(42, node1, 49, 1);
      Node node4 = new Node(49);
      node3.addChildBefore(node4, node0);
      double double0 = 1.0;
      node1.setDouble(double0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = Node.newNumber((double) 12288);
      Node node1 = new Node(12288, node0);
      node1.isEquivalentToShallow(node0);
      node1.addChildBefore(node0, node0);
      // Undeclared exception!
      try { 
        node1.isLocalResultCall();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      Node node1 = new Node(12, 54, 49);
      node1.addChildBefore(node0, node0);
      node1.isLocalResultCall();
      LinkedList<JSType> linkedList0 = null;
      try {
        linkedList0 = new LinkedList<JSType>();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = Node.newString(1491, "Null");
      node0.isFromExterns();
      Node node1 = Node.newNumber((double) 1);
      node0.setLineno(1109);
      Node node2 = new Node((-677), node1, node1, node1, 0, 15);
      Node node3 = node0.useSourceInfoIfMissingFrom(node2);
      node0.isOr();
      node0.isOptionalArg();
      node2.isScript();
      Node node4 = new Node((-1546), 38, 152);
      node4.isIf();
      node3.checkTreeEqualsImpl(node0);
      node3.isQuotedString();
      node3.isEmpty();
      node2.isContinue();
      node2.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = Node.newString(40, "REGEXP_TYPE");
      node0.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = Node.newString(101, "synthetic");
      node0.isOr();
      node0.isTry();
      node0.checkTreeEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags1.clearAllFlags();
      Node node0 = new Node(627, 5760, (-718));
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(9);
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.clearSideEffectFlags();
      node0.setSideEffectFlags(node_SideEffectFlags3);
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      int int0 = 55;
      Node[] nodeArray0 = new Node[6];
      Node node0 = Node.newNumber(0.0, 55, 55);
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Object#Element");
      StringWriter stringWriter2 = stringWriter1.append(']');
      node0.appendStringTree(stringWriter2);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.setLength(122);
      node0.replaceChild(node0, node0);
      int int1 = 102;
      Node node1 = Node.newNumber((double) node0.COLUMN_BITS, node0.SLASH_V, int1);
      nodeArray0[0].getExistingIntProp(node0.COLUMN_BITS);
      // Undeclared exception!
      try { 
        node1.addChildToFront(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node.extractCharno(39);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 55, 55);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node1 = Node.newNumber((double) 12, 54, 102);
      node1.addChildToFront(node0);
      node0.getParent();
      node1.setLength(55);
      Node.newString("Ko?:?-S[RKpp$[S", 43, Integer.MAX_VALUE);
      node1.isWhile();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = Node.newNumber((-3995.857), (-472), (-472));
      node0.isAdd();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node0.isTypeOf();
      node0.isCall();
      node0.isComma();
      node0.getLength();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.isComma();
      vector0.iterator();
      node0.getSourceFileName();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node.mergeLineCharNo(199, 199);
      Node node0 = Node.newString(",noh@{Kn3E^8%ea", 815303, 1941);
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(40, node0, node0);
      node1.detachChildren();
      node1.isHook();
      Node.extractLineno(3406);
      node0.isGetProp();
      node1.isExprResult();
      node1.getSideEffectFlags();
      node1.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = "8T.YJm,<\"B>9`Xu?Eyg";
      Node node0 = Node.newString("8T.YJm,<\"B>9`Xu?Eyg");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.getDouble();
      // Undeclared exception!
      try { 
        node1.isEquivalentTo(node2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING 8T.YJm,<\"B>9`Xu?Eyg is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      int int0 = Node.DIRECT_EVAL;
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(1274, 5, 1274);
      nodeArray0[0] = node0;
      node0.srcrefTree(node0);
      Node node1 = new Node(49, nodeArray0);
      node0.isScript();
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = Node.newString(64, "#4o8*5AbGN0FmMQ?{W");
      Node node1 = Node.newNumber(0.5, 51, 4095);
      String string0 = "quoted";
      Node node2 = Node.newString((String) null, 715, (-540));
      node2.isEquivalentToTyped(node1);
      int int0 = 52;
      Node.newString(string0, node0.FLAG_LOCAL_RESULTS, int0);
      node2.isWhile();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = new Node(9, 0, 9);
      node0.hasChild(node0);
      Node node1 = new Node(0, 0, 42);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      int int0 = Node.REFLECTED_OBJECT;
      node1.isAnd();
      node2.mayMutateGlobalStateOrThrow();
      node0.detachChildren();
      Node node3 = new Node(92, 55, (-2733));
      node0.isIf();
      node0.checkTreeEqualsImpl(node1);
      node3.isQuotedString();
      node2.checkTreeEquals(node3);
      node3.isEmpty();
      node2.isContinue();
      node2.useSourceInfoFrom(node3);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = Node.newNumber((-3995.857), (-472), (-472));
      node0.isAdd();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node0.isTypeOf();
      node0.isCall();
      node0.isComma();
      Node.mergeLineCharNo(53, 31);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      int int0 = Node.ORIGINALNAME_PROP;
      node0.isBlock();
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals(jSTypeRegistry0);
      node0.isParamList();
      Node node1 = new Node(57, 77, 48);
      node1.isIf();
      node1.checkTreeEqualsImpl(node0);
      node1.isQuotedString();
      node0.isFor();
      node0.isContinue();
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.cloneNode();
      Node node3 = node1.getChildBefore(node2);
      node3.isIf();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isNoSideEffectsCall();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = Node.newString("8T.YJm,<\"B>9`Xu?Eyg");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(30, node0, 30, 57);
      node1.isQuotedString();
      node0.isOr();
      node1.addChildToFront(node0);
      // Undeclared exception!
      try { 
        node1.isOptionalArg();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(118);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = new Node(118, 3264, 3264);
      node0.isStringKey();
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(56, node0, node0, node0, node0);
      node1.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(56);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags6.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags5.areAllFlagsSet();
      Node node2 = Node.newString("U;XDrJex1");
      node2.isVar();
      node2.getDouble();
      node2.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = Node.newString(118, "");
      Node node1 = Node.newString(46, "");
      node1.setIsSyntheticBlock(true);
      node1.addChildToFront(node0);
      node1.isLabelName();
      node1.addSuppression("q)=H~(NF])s&>{r");
      node0.isVar();
      Node node2 = new Node(533);
      node2.isCase();
      node2.isCast();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = Node.newString(0, "second new child has existing sibling", 2086, 2086);
      Node node1 = new Node(48, node0, node0, 37, 30);
      node0.addChildrenAfter(node0, node1);
      node1.isArrayLit();
      Vector<JSType> vector0 = new Vector<JSType>();
      vector0.removeAllElements();
      int int0 = 348;
      vector0.ensureCapacity(int0);
      // Undeclared exception!
      try { 
        node0.getInputId();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = new Node((-984), (Node) null);
      node0.toString();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = new Node(9, 0, 9);
      node0.hasChild(node0);
      Node node1 = new Node(0, 0, 42);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      int int0 = Node.REFLECTED_OBJECT;
      node2.mayMutateGlobalStateOrThrow();
      node0.detachChildren();
      Node node3 = new Node(92, 55, (-2733));
      node0.isIf();
      node0.checkTreeEqualsImpl(node1);
      node3.isQuotedString();
      node2.checkTreeEquals(node3);
      node3.isEmpty();
      node2.isContinue();
      node2.useSourceInfoFrom(node3);
      node1.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = new Node(46, 46, 46);
      Node node1 = new Node(53, node0);
      node0.isOnlyModifiesArgumentsCall();
      node0.isOptionalArg();
      node1.isDebugger();
      node1.isEquivalentTo(node0);
      node1.isEquivalentToShallow(node0);
      node1.isAdd();
      node0.isSwitch();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node.newString("quoted");
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      node2.getSourceOffset();
      node1.getLineno();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(40, node0, node0);
      node1.detachChildren();
      node1.isHook();
      Node.extractLineno(3406);
      node0.isGetProp();
      Node.newNumber(42.0);
      node1.isExprResult();
      node1.isFunction();
      Node.mergeLineCharNo((-1051), 55);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = new Node(1930);
      Node node1 = new Node(16, node0, node0);
      Node node2 = Node.newString(46, ")^V`=`)?.&q");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node.extractLineno(100);
      node2.isGetProp();
      node0.isExprResult();
      node2.isLocalResultCall();
      node2.toStringTree();
      Node.newString(33, "#&");
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = Node.newNumber((-3995.857), (-472), (-472));
      node0.isVar();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isTypeOf();
      node0.getAncestor(39);
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = Node.newNumber((-3995.857), (-472), (-472));
      node0.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node0.isTypeOf();
      node0.getAncestor(39);
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = Node.newNumber((-3033.01612990409));
      Node node1 = Node.newString(512, ">NG3@b5<");
      int int0 = Node.FLAG_LOCAL_RESULTS;
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node node3 = new Node(42, node0, node2, node0, node1);
      node3.srcref(node1);
      node1.getSideEffectFlags();
      node2.getIndexOfChild(node0);
      node1.getLineno();
      node2.setSourceEncodedPosition(254);
      node2.isCatch();
      Node node4 = new Node(83, node0, (-390), 30);
      int int1 = 37;
      Node node5 = new Node(int1);
      node4.addChildBefore(node0, node5);
      node2.setDouble(node1.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(40, node0, node0);
      node1.detachChildren();
      node1.isHook();
      node1.isEquivalentTo(node0, true, true, true);
      Node.newNumber((-2571.2), 37, 37);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) 0, 0, (-4685));
      Node node1 = new Node(0, node0, node0, node0, node0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[2];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[4];
      JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSTypeNative jSTypeNative2 = JSTypeNative.ALL_TYPE;
      jSTypeNativeArray0[2] = jSTypeNative2;
      JSTypeNative jSTypeNative3 = JSTypeNative.NO_TYPE;
      jSTypeNativeArray0[3] = jSTypeNative3;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      jSTypeArray0[0] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType("Not declared as a type name", node0, node0, jSType0, (ImmutableList<TemplateType>) null);
      jSTypeArray0[1] = (JSType) functionType0;
      jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = Node.newString("$[0-9]+", 105, 105);
      node0.isNE();
      Node node1 = Node.newNumber(30.0);
      node0.isOptionalArg();
      node0.isEquivalentToShallow(node0);
      node1.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = Node.newString(64, "#4o8*5AbGN0FmMQ?{W");
      Node node1 = Node.newString(16, "#4o8*5AbGN0FmMQ?{W");
      int int0 = Node.FLAG_LOCAL_RESULTS;
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      Node node3 = node1.srcref(node2);
      node1.getSideEffectFlags();
      node0.getIndexOfChild(node2);
      node0.getLineno();
      node0.type = 15;
      node2.setSourceEncodedPosition(43);
      node0.isCatch();
      Node node4 = new Node(42, node1, 49, 1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-862048943));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node3.setSideEffectFlags(node_SideEffectFlags1);
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = new Node(98, 98, (-2232));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(15);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node0.setSideEffectFlags(node_SideEffectFlags1);
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) 0, 0, (-4685));
      Node node1 = new Node(0, node0, node0, node0, node0);
      node0.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      node0.siblings();
      node_SideEffectFlags0.setAllFlags();
      Node node2 = new Node(15);
      node2.getAncestors();
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = Node.newString(0, "6DpM&hA[Zk2j{=H3AM]");
      node0.isOptionalArg();
      Node node1 = new Node(29, 52, (-1426));
      node0.addChildAfter(node1, node1);
      node0.hasMoreThanOneChild();
      node0.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node[] nodeArray0 = new Node[6];
      Node node0 = Node.newNumber(0.0, 55, 55);
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateType templateType0 = jSTypeRegistry1.getObjectElementKey();
      jSTypeArray0[0] = (JSType) templateType0;
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      nodeArray0[1] = node1;
      Node node2 = new Node(31, node1);
      nodeArray0[2] = node2;
      nodeArray0[3] = node2;
      Node node3 = new Node(42, node2, node0);
      nodeArray0[4] = node3;
      Node node4 = new Node(178, node3, node3);
      Node node5 = node0.useSourceInfoIfMissingFrom(node4);
      Node node6 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node6.addChildAfter(node5, node0);
      node6.isOr();
      nodeArray0[0].isSyntheticBlock();
      node4.getSideEffectFlags();
      int int0 = 29;
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = new Node(46);
      Node.newString("Za");
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node2 = new Node(0, node1, node0);
      node1.detachChildren();
      node2.isHook();
      Node.extractLineno(1373);
      Node node3 = Node.newString(")2{T+*cK");
      node3.isGetProp();
      Node.newNumber((double) 54);
      node1.isExprResult();
      node0.isSwitch();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node2.isNumber();
      node3.isDec();
      node2.addChildAfter(node1, node3);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 3000, 3000);
      node0.isLabel();
      node0.getAncestors();
      node0.getBooleanProp(3000);
      node0.getQualifiedName();
      node0.isQuotedString();
      node0.srcrefTree((Node) null);
      Node node1 = null;
      node0.copyInformationFromForTree(node1);
      int int0 = 113;
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 3000, 3000);
      node0.isLabel();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node0.mayMutateGlobalStateOrThrow();
      node0.getQualifiedName();
      node0.isQuotedString();
      Node node1 = node0.srcrefTree((Node) null);
      Node node2 = null;
      node0.copyInformationFromForTree(node2);
      // Undeclared exception!
      try { 
        node1.getDirectives();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(40, node0, node0);
      node1.detachChildren();
      node0.setDouble((-627.4456409151105));
      String string0 = "STRING_VALUE_OR_OBJECT_TYPE";
      node0.addSuppression(string0);
      int int0 = (-517);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.setDouble(57);
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = Node.newNumber((-3033.01612990409));
      Node node1 = Node.newString(512, ">NG3@b5<");
      int int0 = Node.FLAG_LOCAL_RESULTS;
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node node3 = new Node(42, node0, node2, node0, node1);
      node3.srcref(node1);
      node1.getSideEffectFlags();
      Node node4 = node3.useSourceInfoFromForTree(node2);
      node1.isEquivalentTo(node4, true, true, false);
      Node.newNumber((-1.0), 54, 751616000);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.addChildToFront(node4);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("gLbQlJ1");
      Node node1 = new Node(126, node0, 49, 4);
      node0.useSourceInfoFrom(node1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.getSourceFileName();
      node0.getJsDocBuilderForNode();
      node1.isOnlyModifiesArgumentsCall();
      node1.getType();
      node2.toString(true, true, true);
      node2.isCase();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = new Node(627, 627, 627);
      Node node1 = Node.newString("quoted", 36, 222);
      node1.isEquivalentToTyped(node0);
      Node node2 = Node.newString("quoted", (-201), 132);
      node0.isWhile();
      node2.getCharno();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = new Node(627, 627, 627);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1809);
      node_SideEffectFlags0.setMutatesGlobalState();
      Stack<JSType> stack0 = new Stack<JSType>();
      stack0.removeAllElements();
      stack0.ensureCapacity(55);
      node0.getInputId();
      node0.setCharno((-2278));
      node0.setInputId((InputId) null);
      node0.isCall();
      Node node1 = Node.newString("");
      node1.isFunction();
      Node.mergeLineCharNo(0, (-2278));
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = Node.newString("S86CMue5");
      InputId inputId0 = new InputId("S86CMue5");
      node0.setInputId(inputId0);
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = Node.newNumber(305.0);
      node0.isTry();
      Node node1 = new Node(0, node0, node0, node0);
      node1.setCharno(148);
      node0.addChildrenAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = Node.newNumber(2256.5717129, 627, 627);
      Node node1 = Node.newString("quoted", 38, 552);
      node0.isEquivalentToTyped(node1);
      node1.isSwitch();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node.newString(0, "quoted", 16, (-3233));
      node0.setJSDocInfo(jSDocInfo0);
      node1.getSourceOffset();
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = new Node(15, node0);
      node0.isOnlyModifiesArgumentsCall();
      node1.isGetterDef();
      node1.isDebugger();
      node1.isEquivalentTo(node0);
      node1.isEquivalentToShallow(node0);
      node1.isAdd();
      Node.newString((String) null, 57, 12);
      node1.isWhile();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node((-1246));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = new Node((-472), node0);
      node1.isInc();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      simpleErrorReporter0.error("Object#Element", ":a:FKm)~ydJ#Z", 88, 88);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isLabel();
      Node.extractCharno(40);
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = new Node(1930);
      Node node1 = new Node(16, node0, node0);
      Node node2 = Node.newString(46, ")^V`=`)?.&q");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      nodeArray0[1] = node3;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      node0.isEquivalentTo(node3, true, true, true);
      Node.newNumber(0.0, 38, 47);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry1.createParameters((List<JSType>) stack0);
      node1.addChildToFront(node3);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("Object#Element", "qk]$ao", 867, 867);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.getQualifiedName();
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_TYPE;
      jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Not declared as a type name");
      node_FileLevelJsDocBuilder0.append("Object#Element");
      node0.isSyntheticBlock();
      int int0 = (-329);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node0.addChildrenAfter(node1, node1);
      node0.getProp(int0);
      // Undeclared exception!
      try { 
        node0.isTry();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = Node.newString("Za");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Stack<JSType>();
      int int0 = Node.NO_SIDE_EFFECTS;
      node1.isExprResult();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("Za");
      node0.getChildAtIndex(55);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("com.google.common.base.CharMatcher$13", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isLabel();
      node0.isNE();
      Node node1 = new Node(49, node0, 32, (-102));
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = new Node(2455, 2455, 37);
      Node node1 = new Node(39, node0, 0, 48);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      int int0 = Node.REFLECTED_OBJECT;
      node2.isAnd();
      Node node3 = Node.newString((-2231), "");
      node3.mayMutateGlobalStateOrThrow();
      node1.detachChildren();
      Node node4 = new Node(1806, 37, 50);
      node1.checkTreeEqualsImpl(node2);
      node4.isQuotedString();
      node0.checkTreeEquals(node3);
      node2.isEmpty();
      node2.isTypeOf();
      node2.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = new Node(627, 627, 627);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(36);
      node0.isGetterDef();
      node0.isDebugger();
      node0.isEquivalentTo(node0);
      node0.isAssign();
      node0.isAdd();
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(61, nodeArray0);
      Node node1 = new Node(52, node0);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = Node.newString(4095, "$`fg=");
      node2.isGetterDef();
      node2.isDebugger();
      node0.isEquivalentTo(node2);
      node2.isAssign();
      node2.isAdd();
      Node.newString("$`fg=", (-2242), 53);
      node1.isWhile();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = Node.newString(126, "REGEXP_TYPE");
      node0.isNE();
      node0.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(40, node0, node0);
      node1.detachChildren();
      node0.isThrow();
      Node.extractLineno(3406);
      node1.isEquivalentTo(node0, true, true, false);
      Node.newNumber((-2571.2), 37, 37);
      node0.addChildToFront(node1);
      node0.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = Node.newString("8T.YJm,<\"B>9`Xu?Eyg");
      Node node1 = new Node(15, node0, node0, 57, 46);
      node0.isTry();
      Node node2 = new Node(31, node1, node0, node0);
      int int0 = 1432;
      Node node3 = new Node(int0, node2);
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node3, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = Node.newString("Za");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node3 = new Node(46, node2, node1);
      node3.detachChildren();
      node1.isHook();
      Node.extractLineno(300);
      node1.isGetProp();
      Node.newNumber((double) 8);
      node2.isExprResult();
      Node node4 = Node.newString(1411, "The new child node already has a parent.", 37, 46);
      node4.isFunction();
      Node.mergeLineCharNo((-153), 29);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 3000, 3000);
      node0.isLabel();
      node0.getAncestors();
      node0.isNumber();
      node0.getQualifiedName();
      node0.isQuotedString();
      node0.srcrefTree((Node) null);
      Node node1 = null;
      node0.copyInformationFromForTree(node1);
      int int0 = 113;
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = Node.newNumber((double) 46);
      Node node1 = Node.newString(103, "fP");
      node0.isScript();
      node0.isNumber();
      node0.isIf();
      node0.checkTreeEqualsImpl(node1);
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-4402), nodeArray0, 0, 0);
      node0.hasOneChild();
      Node node1 = new Node(29, node0, node0);
      node0.detachChildren();
      node1.setDouble(49);
      String string0 = "";
      // Undeclared exception!
      try { 
        node0.addSuppression(string0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NEG is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(40, node0, node0);
      node1.detachChildren();
      node1.isHook();
      Node.extractLineno(3406);
      node0.isGetProp();
      Node.newNumber(42.0);
      node1.isExprResult();
      node1.hasMoreThanOneChild();
      node1.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.mayMutateArguments();
      int int0 = Node.INFERRED_FUNCTION;
      node0.isCast();
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = Node.newString(0, "6DpM&hA[Zk2j{=H3AM]");
      node0.isOptionalArg();
      node0.isSyntheticBlock();
      Node node1 = new Node(29, 52, (-1426));
      node1.removeProp(4095);
      node0.isSyntheticBlock();
      node0.addChildAfter(node1, node1);
      node0.hasMoreThanOneChild();
      node0.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isFunction();
      node0.isNull();
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = Node.newNumber((-3725.9729798367), (-1852), 39);
      node0.isEquivalentTo(node0);
      int int0 = Node.DIRECT_EVAL;
      node0.isGetProp();
      Node node1 = new Node(4095, node0, node0, node0);
      node0.isExprResult();
      node0.isNull();
      Node.mergeLineCharNo(16, 1);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = Node.newString(101, "synthetic");
      Node node1 = new Node(1610612736, node0, 30, 65535);
      node0.isQuotedString();
      Node node2 = Node.newNumber((double) 39, (-920), (-1));
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("V");
      node0.getChildAtIndex(16);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = new Node((-3553), (Node[]) null, 3162, (-23));
      int int0 = 26;
      node0.getIntProp(int0);
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      simpleErrorReporter0.error("Object#Element", ":a:FKm)~ydJ#Z", 88, 88);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isLabel();
      node0.getJSType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) null);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.addChildToFront(node1);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      int int0 = Node.DIRECT_EVAL;
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(1274, 5, 1274);
      nodeArray0[0] = node0;
      Node node1 = new Node(49, nodeArray0);
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      int int0 = Node.DIRECT_EVAL;
      Node node0 = Node.newString(1, "\n\nSubtree2: ");
      node0.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = Node.newString("Za");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node1.wasEmptyNode();
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node3 = new Node(46, node2, node1);
      node3.detachChildren();
      node1.isHook();
      Node.extractLineno(300);
      node1.isGetProp();
      Node node4 = Node.newNumber((double) 8);
      node2.isExprResult();
      node4.setString("Object#Element");
      int int0 = 1411;
      String string0 = "The new child node already has a parent.";
      int int1 = 46;
      // Undeclared exception!
      try { 
        Node.newString(int0, string0, node4.OPT_ARG_NAME, int1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 8.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(40, node0, node0);
      node1.detachChildren();
      node0.isThrow();
      int int0 = Node.DIRECT_EVAL;
      node1.isGetProp();
      Node node2 = new Node((-1266), node1, node0, node0);
      node0.isExprResult();
      node1.isNull();
      Node.mergeLineCharNo(4, 2);
      node1.isInstanceOf();
      Node node3 = Node.newNumber((-2065.78884871), (-3485), 29);
      node2.clonePropsFrom(node3);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = Node.newString("q {\"\"\"U )5)m");
      node0.isInstanceOf();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = Node.newNumber((double) 46);
      Node node1 = Node.newString(46, "STRING U8I@cwN+YNID}&~D#\n");
      Node node2 = Node.newNumber((double) 57, 54, 8);
      node2.addChildToFront(node1);
      node2.getDirectives();
      node0.isFromExterns();
      node1.getAncestor(0);
      Node node3 = new Node(50, node2, node2, node1, 0, 52);
      node3.isQuotedString();
      // Undeclared exception!
      try { 
        node1.isUnscopedQualifiedName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      simpleErrorReporter0.error("Object#Element", ":a:FKm)~ydJ#Z", 88, 88);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isLabel();
      Node node1 = Node.newNumber(0.0);
      Node node2 = new Node(4095, node1, 0, 139);
      Node node3 = new Node(264, 556, 36);
      Node node4 = new Node(1, node2, node3, node1, 1249585, 50);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node5 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node5.copyInformationFromForTree(node3);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = Node.newString(101, "synthetic");
      Node node1 = new Node(1610612736, node0, 30, 65535);
      node0.isQuotedString();
      Node node2 = Node.newNumber((double) 39, (-920), (-1));
      node2.getJsDocBuilderForNode();
      node1.isVar();
      node2.getDouble();
      node2.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(61, nodeArray0);
      Node node1 = new Node(52, node0);
      node1.isOnlyModifiesArgumentsCall();
      Node node2 = Node.newString(4095, "$`fg=");
      node2.isGetterDef();
      node2.isNumber();
      node0.isEquivalentTo(node2);
      node2.isAssign();
      node1.getAncestor(4095);
      node2.isThis();
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = new Node(627, 627, 627);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(36);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = Node.newString((-153), "Should not call getLineOffset with line number ");
      node1.isGetterDef();
      node1.isDebugger();
      node1.isEquivalentTo(node0);
      node0.isAssign();
      node0.isAdd();
      Node node2 = Node.newString("", (-1079), 46);
      node1.isWhile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      node2.setJSType(jSType0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = Node.newNumber(0.5);
      node0.putBooleanProp((-2410), false);
      Node node1 = new Node(15, node0, node0, node0, 42, 4095);
      Node node2 = Node.newNumber(716.33722);
      node0.useSourceInfoFrom(node2);
      Node node3 = node0.copyInformationFrom(node1);
      Node node4 = node2.clonePropsFrom(node0);
      Node node5 = Node.newNumber(0.0);
      node5.setChangeTime(4);
      node3.isOptionalArg();
      Node.newNumber((double) 12);
      Node.newString("com.google.common.collect.ImmutableCollection$Builder", 37, 118);
      node3.isWhile();
      node4.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = new Node(88, 88, 88);
      node0.isOptionalArg();
      node0.isVar();
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = Node.newString("8T.YJm,<\"B>9`Xu?Eyg");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = new Node(30, node0, node0, node0);
      Node node2 = Node.newString("Object#Key", 32, 55);
      node2.isIn();
      Node.newString("8T.YJm,<\"B>9`Xu?Eyg");
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node3.addChildToFront(node1);
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = Node.newString("8T.YJm,<\"B>9`Xu?Eyg");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(30, node0, node0, node0);
      Node.newString("8T.YJm,<\"B>9`Xu?Eyg");
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = Node.newNumber(0.5);
      node0.putBooleanProp((-2410), false);
      Node node1 = new Node(15, node0, node0, node0, 42, 4095);
      node0.useSourceInfoFrom(node0);
      node1.clonePropsFrom(node0);
      Node.newNumber(0.0);
      node0.isOptionalArg();
      Node.newNumber((double) 12);
      Node.newString("com.google.common.collect.ImmutableCollection$Builder", 37, 118);
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      node0.isFromExterns();
      Node node1 = Node.newNumber(1962.07705272);
      node1.hasOneChild();
      node0.getCharno();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(118);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags4.setReturnsTainted();
      node1.setSourceEncodedPositionForTree(1697);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Null", true);
      node1.setStaticSourceFile(simpleSourceFile0);
      node0.setSourceFileForTesting("@");
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.addChildToFront(node1);
      node1.getDouble();
      node1.setLineno(32);
      node1.isArrayLit();
      node1.isAnd();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      Node node2 = node1.useSourceInfoIfMissingFromForTree((Node) null);
      node2.isDebugger();
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = Node.newString("8T.YJm,<\"B>9`Xu?Eyg");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(30, node0, node0, node0);
      node1.isIn();
      Node node2 = Node.newNumber((double) 53, 85, 32);
      node2.setLineno(46);
      node1.mayMutateArguments();
      node0.getExistingIntProp(53);
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = Node.newString(52, (String) null, 52, 52);
      node0.getDouble();
      // Undeclared exception!
      try { 
        node0.isNot();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node node0 = new Node(46);
      Node.newString("Za");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node1.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setAllFlags();
      node1.isTypeOf();
      node0.getAncestor(8);
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = Node.newNumber(0.5);
      Node node1 = Node.newString(49, "REGEXP_TYPE");
      Node node2 = Node.newString(126, "REGEXP_TYPE");
      node0.addChildToFront(node2);
      node2.isNE();
      node1.isLabelName();
      node1.addSuppression("p");
      node2.setQuotedString();
      Node.mergeLineCharNo(57, 2957);
      node2.setIsSyntheticBlock(false);
      node2.addChildrenAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node node0 = Node.newString("_");
      node0.setIsSyntheticBlock(true);
      Node node1 = new Node(30);
      node1.isCatch();
      Node.newNumber((double) 56);
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node.newNumber((double) 46);
      Node.newString(103, "fP");
      Node node0 = new Node(31, 46, 4095);
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isVoid();
      Node node1 = new Node(12, node0, node0, 43, 0);
      node0.checkTreeEqualsImpl(node1);
      node0.isEmpty();
      node0.checkTreeEquals(node1);
      node0.isEmpty();
      Node.mergeLineCharNo(1, (-192));
      node1.checkTreeEqualsImpl(node0);
      node1.addChildToBack(node0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      int int0 = 10;
      Node node0 = new Node(10, (Node) null, (Node) null, (Node) null, (Node) null);
      node0.isAdd();
      // Undeclared exception!
      try { 
        node0.getBooleanProp(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = new Node(15, node0);
      node0.isOnlyModifiesArgumentsCall();
      node1.isGetterDef();
      node1.isGetterDef();
      node0.isAnd();
      node1.isEquivalentToShallow(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      node0.setDirectives(set0);
      node0.isUnscopedQualifiedName();
      node1.removeChildren();
      node1.getExistingIntProp(50);
      // Undeclared exception!
      try { 
        node1.setJSDocInfo(jSDocInfo0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 50
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      node0.isFromExterns();
      Node node1 = Node.newNumber((double) 38);
      node1.toStringTree();
      Node node2 = new Node(143, node0, node0, node1);
      node2.isExprResult();
      node1.isEquivalentToTyped(node1);
      Node.mergeLineCharNo(37, 4095);
      Node node3 = node2.useSourceInfoFrom(node0);
      node3.getJsDocBuilderForNode();
      node2.removeChildren();
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Node node0 = Node.newString("8T.YJm,<\"B>9`Xu?Eyg");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = new Node(30, node0, node0, node0);
      Node.extractLineno(Integer.MIN_VALUE);
      node0.isGetProp();
      Node.newNumber((-1581.672574));
      node0.isExprResult();
      node1.putIntProp(49, 46);
      Node node2 = Node.newString(15, "", 1958, (-1892));
      node2.isFunction();
      Node.mergeLineCharNo((-800), 1);
      Node node3 = Node.newString("The new child node already has a parent.", 52, 4);
      node3.siblings();
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = new Node((-872), (-872), (-872));
      node0.isIf();
      node0.setWasEmptyNode(false);
      Node node1 = Node.newNumber((double) 48, 4095, 42);
      Node node2 = new Node(8, node0, node1, (-26), 873);
      node2.isInstanceOf();
      node2.replaceChild(node0, node1);
      node2.isObjectLit();
      node1.isDec();
      node1.isSwitch();
      node1.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = "this";
      Node node0 = Node.newString("this");
      Node node1 = new Node(43, (-1892), 52);
      node1.addChildrenToBack(node0);
      Node node2 = new Node(2735, node1, node1);
      node0.setLength(39);
      node2.isWhile();
      node2.replaceChild(node0, node1);
      int int0 = (-4693);
      // Undeclared exception!
      try { 
        Node.newNumber((double) node0.VAR_ARGS_NAME, int0, node2.IS_CONSTANT_NAME);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(11, 53, 4095);
      Node node2 = Node.newNumber((double) 4095, 47, 300);
      Node node3 = new Node(12, node2, node0, node1);
      node2.isOptionalArg();
      node0.isVar();
      node0.replaceChild(node3, node2);
      node1.isAssignAdd();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-472));
      Node node0 = Node.newNumber((double) (-472), (-2783), (-2783));
      node0.isGetterDef();
      node0.isDebugger();
      Node node1 = Node.newNumber((-243.6), 8233, 37);
      node1.isEquivalentTo(node0);
      node1.isAssign();
      node0.isAdd();
      Node node2 = Node.newString("iW", 53, (-813));
      node2.isWhile();
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = Node.newString("Za");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node3 = new Node(46, node2, node1);
      node1.isHook();
      Node.extractLineno(300);
      node1.isGetProp();
      Node node4 = Node.newNumber((double) 8);
      node2.isExprResult();
      node4.putIntProp((-446), 4);
      Node node5 = Node.newString(1418, "The new child node already has a parent.", 37, 46);
      node5.isFunction();
      Node.mergeLineCharNo((-153), 29);
      node3.siblings();
      node5.isNew();
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node node0 = Node.newString("U8I@cwN+YNID}&~D#", (-4646), (-4646));
      node0.toStringTree();
      Node node1 = new Node((-2459), node0, 40, 15);
      node1.isObjectLit();
      node0.isNew();
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = Node.newString("8T.YJm,<\"B>9`Xu?Eyg");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(30, node0, node0, node0);
      node1.isNew();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((JSType[]) null);
      node1.setCharno(node2.VAR_ARGS_NAME);
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = new Node(103);
      node0.setSourceFileForTesting("com.google.javascript.rhino.Node$AncestorIterable$1");
      node0.isVoid();
      node0.isDec();
      Node node1 = new Node(2);
      Node node2 = new Node(1, node1, node0, node1, 1, 52);
      Node.newString(29, "com.google.javascript.rhino.Node$AncestorIterable$1");
      node1.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      node0.isFromExterns();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node2 = new Node(2640, node1, node0);
      node0.detachChildren();
      node2.isHook();
      Node.extractLineno(916);
      node2.isVoid();
      Node node3 = Node.newNumber((-3718.1));
      Node node4 = new Node(42);
      node4.isExprResult();
      node3.putIntProp(39, 12288);
      Node node5 = Node.newString(62, (String) null, 1958, 116);
      node4.isFunction();
      Node.mergeLineCharNo(node2.IS_CONSTANT_NAME, node1.LENGTH);
      node5.siblings();
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(118);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((double) 118, 116, 116);
      Node node1 = new Node(2, node0, node0, node0, (-1), 32);
      nodeArray0[0] = node1;
      Node node2 = Node.newString("zCK[$SUcRR", 38, 114);
      nodeArray0[1] = node2;
      Node node3 = new Node(118, nodeArray0);
      node3.isEquivalentToShallow(node1);
      node0.isAdd();
      node1.isSwitch();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node.newString(12, "l5uQ?jdTE0Q9BVM", 51, (-961));
      node1.setJSDocInfo(jSDocInfo0);
      node0.getSourceOffset();
      node1.getLineno();
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      node0.isVar();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.areAllFlagsSet();
      node0.isNumber();
      Node.newString("$7K+%QG'QMr|)");
      Node node1 = new Node(4095, node0);
      node1.getDouble();
      node1.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = new Node(53, node0);
      node0.isOnlyModifiesArgumentsCall();
      node0.isOptionalArg();
      node1.isDebugger();
      node1.isEquivalentTo(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags4.areAllFlagsSet();
      Node node2 = new Node(16, 12288, 40);
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      node0.isFromExterns();
      Node node1 = Node.newNumber((double) 38);
      node0.isGetProp();
      Node node2 = new Node(111, node0, node0, node1);
      node2.isExprResult();
      node2.isNull();
      Node.mergeLineCharNo(31, 627);
      node2.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      Node node1 = Node.newNumber(1962.07705272);
      node0.setLineno(0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node0);
      node1.isOr();
      node0.isScript();
      node2.isLocalResultCall();
      node0.isNumber();
      node1.isIf();
      node2.children();
      node0.checkTreeEqualsImpl(node0);
      node2.isString();
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(40, node0, node0);
      node1.detachChildren();
      node1.isHook();
      node1.removeChildAfter(node0);
      int int0 = 3406;
      // Undeclared exception!
      try { 
        Node.extractLineno(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("");
      Node node1 = new Node(52);
      int int0 = Node.NO_SIDE_EFFECTS;
      node1.removeChildAfter(node0);
      int int1 = 40;
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(40, node0, node0);
      node1.isHook();
      node1.removeChildAfter(node0);
      int int0 = 3406;
      // Undeclared exception!
      try { 
        Node.extractLineno(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("");
      Node node1 = new Node(31, node0, node0);
      int int0 = Node.NO_SIDE_EFFECTS;
      node1.removeChildAfter(node0);
      int int1 = 40;
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node node0 = new Node(1274, 5, 1274);
      Node node1 = new Node(52, node0);
      Node node2 = new Node((-935), node1, node0, node0, node0);
      node1.checkTreeEquals(node2);
      int int0 = 2005;
      node1.getBooleanProp(int0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Node node0 = new Node(40, 40, 122);
      Node node1 = new Node(39, node0, node0, node0, node0, 15, 122);
      Node node2 = new Node((-2016), node0, node1, node1, node0);
      Node node3 = new Node(node0.DIRECT_EVAL, node2, node2, node1);
      node3.isOptionalArg();
      // Undeclared exception!
      try { 
        node2.isVar();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Node node0 = Node.newString((-22), "Gw<&");
      node0.isOptionalArg();
      node0.isSyntheticBlock();
      Node node1 = new Node(65, 52, (-1426));
      node1.cloneTree();
      node1.removeProp(4095);
      node0.isSyntheticBlock();
      node0.addChildAfter(node1, node1);
      node0.hasMoreThanOneChild();
      node1.getLength();
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Node node0 = Node.newString(101, "synthetic");
      Node node1 = new Node(1610612736, node0, 30, 65535);
      node0.isQuotedString();
      node0.isOr();
      node0.isOptionalArg();
      node1.isScript();
      node1.isNumber();
      node1.isIf();
      node0.checkTreeEqualsImpl(node1);
      node1.isQuotedString();
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-472));
      Node node0 = Node.newNumber((double) (-472), (-2783), (-2783));
      node0.isGetterDef();
      node0.isGetterDef();
      node0.isDebugger();
      Node node1 = Node.newNumber(0.0);
      node0.isEquivalentTo(node1);
      node1.isEquivalentToShallow(node0);
      Node node2 = new Node(49, node1, node0);
      node2.isAdd();
      Node.newString("eQJ>|3g~r]3W6,jX l", 2, 56);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node.newString(38, "eQJ>|3g~r]3W6,jX l");
      node3.isWhile();
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Node node0 = Node.newString(101, "synthetic");
      node0.isQuotedString();
      node0.isOr();
      Node node1 = Node.newNumber((double) 101, 54, 51);
      node0.toString(false, false, false);
      node1.addChildToFront(node0);
      node0.isFor();
      node1.checkTreeEqualsImpl(node0);
      node1.isContinue();
      Node.newNumber((-4054.218355));
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      node0.isFromExterns();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      node0.isOptionalArg();
      node0.isDebugger();
      Node node1 = new Node(28, node0, node0, node0, node0, 30, 55);
      node0.isEquivalentTo(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node2 = new Node(32768, 4095, 55);
      node0.isStringKey();
      node2.isGetElem();
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Node node0 = Node.newNumber(1648.9104250438047, (-472), 365);
      node0.isVar();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(56, node0, node0, node0, node0);
      node1.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(56);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags5.clearAllFlags();
      node1.isOptionalArg();
      Node node2 = Node.newNumber(1014.798);
      Node node3 = Node.newString("", 37, 55);
      node2.isWhile();
      node1.isAssignAdd();
      node0.hasChild(node2);
      node3.getProp(1044);
      node1.isThrow();
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Node node0 = new Node((-1917));
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-472));
      Node node0 = Node.newNumber((double) (-472), (-2783), (-2783));
      node0.isGetterDef();
      node0.isDebugger();
      Node node1 = Node.newNumber((-243.6), 8233, 37);
      node1.isEquivalentTo(node0);
      node1.isAssign();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node2 = Node.newString("HxOo>0czl?h");
      node1.isVar();
      node0.getDouble();
      Node[] nodeArray0 = new Node[0];
      Node node3 = new Node(50, node2, node1, node1, node2);
      node3.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(56, node0, node0, node0, node0);
      node1.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(56);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags5.clearAllFlags();
      node1.setChangeTime(12);
      node1.isOptionalArg();
      Node node2 = Node.newNumber(1014.798);
      Node.newString("", 37, 55);
      node2.isWhile();
      node1.isAssignAdd();
      node2.isOptionalArg();
      node1.isNot();
      node0.replaceChild(node2, node2);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Node.mergeLineCharNo(1319, 4292);
      Node node0 = Node.newNumber(1288.055935559738, 4292, 5406719);
      node0.getSideEffectFlags();
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Node node0 = Node.newString("8T.YJm,<\"B>9`Xu?Eyg");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(30, node0, 30, 57);
      node1.isQuotedString();
      node0.isOr();
      node1.isOptionalArg();
      node0.isScript();
      node1.isNumber();
      node0.isIf();
      node0.checkTreeEqualsImpl(node1);
      node1.isQuotedString();
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Node node0 = Node.newNumber(0.7);
      node0.isLocalResultCall();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.getIntProp(110);
      node0.siblings();
      node0.children();
      node0.isNull();
      node0.getDouble();
      Node node1 = Node.newNumber((-1783.0), 43, 105);
      node1.addChildBefore(node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node1.isOptionalArg();
      node1.setSideEffectFlags(node_SideEffectFlags0);
      // Undeclared exception!
      try { 
        node0.isCast();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Node node0 = Node.newString("8T.YJm,<\"B>9`Xu?Eyg");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = new Node(55, node0, node0);
      Node.extractLineno(Integer.MIN_VALUE);
      node0.isGetProp();
      Node.newNumber((-1581.672574));
      node0.isExprResult();
      node1.putIntProp(49, 46);
      Node node2 = Node.newString(15, "", 1958, (-1892));
      node2.isFunction();
      Node.mergeLineCharNo((-800), 1);
      Node node3 = Node.newString("The new child node already has a parent.", 52, 4);
      node3.putProp(21, (Object) null);
      node3.siblings();
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = node0.cloneTree();
      Node node2 = node1.copyInformationFrom(node0);
      node1.getQualifiedName();
      Node[] nodeArray0 = new Node[0];
      Node node3 = new Node(36, nodeArray0);
      node2.replaceChildAfter(node3, node0);
      node3.isGetterDef();
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(118);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node0 = new Node(118, 3264, 3264);
      int int0 = 1;
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = Node.newString("z_[gG<M[0JZN\u0005", 48, 42);
      nodeArray0[2] = node1;
      Node node2 = new Node(12, nodeArray0, 42, 57);
      int int1 = 308;
      Node node3 = new Node(int0, node2, int1, node0.DECR_FLAG);
      // Undeclared exception!
      try { 
        nodeArray0[1].wasEmptyNode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("*[-KA[_$|3,lYKCZ");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) templateType0;
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.isQuotedString();
      node0.hasChild(node1);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(40, node0, node0);
      node0.detachChildren();
      node0.isHook();
      Node.extractLineno(3);
      Node node2 = Node.newString((-3523), "", (-2062), 1283);
      node2.isGetProp();
      Node node3 = Node.newNumber(3476.453195104696);
      node1.isExprResult();
      node3.isFunction();
      Node.mergeLineCharNo(56, 33);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Node node0 = Node.newString((-2271), "Null");
      node0.isFromExterns();
      Node node1 = Node.newNumber((double) 43);
      node0.isGetProp();
      Node node2 = new Node(33, node0, node0, node1);
      node0.isExprResult();
      node1.isNull();
      Node.mergeLineCharNo(37, 56);
      node1.isInstanceOf();
      node0.getType();
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      int int0 = (-178);
      Node node0 = Node.newString((-178), "4;wK6T%", (-178), (-1069));
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = Node.newString(2, "4;wK6T%");
      String string0 = "quoted";
      node1.isVarArgs();
      node0.removeChild(node1);
      node0.setLength(node1.SLASH_V);
      Node node2 = Node.newString(node1.STATIC_SOURCE_FILE, string0, int0, node0.SIDE_EFFECT_FLAGS);
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFrom(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newString(195, "REGEXP_TYPE");
      Node node2 = Node.newString(55, "({");
      node2.addChildToFront(node1);
      node1.isNE();
      node1.isLabelName();
      node0.addSuppression("REGEXP_TYPE");
      node1.isAssign();
      Node node3 = new Node(15);
      Node node4 = new Node((-2271), node3, node1);
      node4.isAdd();
      String string0 = ":9RJE`";
      int int0 = (-767);
      int int1 = (-2460);
      Node.newString(string0, int0, int1);
      // Undeclared exception!
      try { 
        node3.isWhile();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Node node0 = Node.newString(101, "synthetic");
      Node node1 = new Node(1610612736, node0, 30, 65535);
      node0.isQuotedString();
      node0.isOr();
      node0.isArrayLit();
      node1.isScript();
      node1.isNumber();
      node1.isIf();
      node0.checkTreeEqualsImpl(node1);
      node1.isQuotedString();
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Node node0 = Node.newString("U8I@cwN+YNID}&~D#", (-4646), 4095);
      node0.toStringTree();
      Node node1 = Node.newString("STRING U8I@cwN+YNID}&~D#\n", 12, 122);
      node0.setWasEmptyNode(true);
      node0.setChangeTime(51);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setThrows();
      node0.isAnd();
      node1.mayMutateGlobalStateOrThrow();
      node0.detachChildren();
      Node node2 = new Node(40, 77, (-1206));
      node1.isIf();
      node2.checkTreeEqualsImpl(node0);
      node1.isQuotedString();
      node1.checkTreeEquals(node2);
      node0.isEmpty();
      node2.isContinue();
      node2.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Node node0 = new Node(116);
      node0.isIf();
      node0.checkTreeEqualsImpl(node0);
      Node node1 = new Node(32);
      node1.isEmpty();
      node0.isEmpty();
      node1.addChildrenToFront(node0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.isWith();
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = Node.newString("Za");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      int int0 = Node.NO_SIDE_EFFECTS;
      node1.isExprResult();
      Node node2 = new Node(30, node0, node0, (-761), 55);
      node2.hasMoreThanOneChild();
      node0.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(40, node0, node0);
      node1.detachChildren();
      node1.isHook();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) stack0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry1.createOptionalParameters(jSTypeArray0);
      node2.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node2.isTypeOf();
      node1.getAncestor((-243));
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Node.newString(".SXl", 64, 64);
      Node node0 = Node.newString(".SXl");
      Vector<JSType> vector0 = new Vector<JSType>();
      int int0 = Node.NO_SIDE_EFFECTS;
      node0.isExprResult();
      node0.isTypeOf();
      Node node1 = node0.getAncestor((-536870912));
      node1.isThis();
      node1.isLabelName();
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isTry();
      node0.isDebugger();
      Node node1 = new Node((-1744), 8232, 15);
      node1.toString(true, false, true);
      node1.isEquivalentTo(node0);
      node0.isEquivalentToShallow(node1);
      node1.children();
      node0.isAdd();
      int int0 = 19;
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Node node0 = new Node(46, 46, 46);
      Node node1 = Node.newString("S86CMue5");
      InputId inputId0 = new InputId("S86CMue5");
      node1.setInputId(inputId0);
      node0.checkTreeEquals(node1);
      node1.checkTreeEquals(node0);
      node0.checkTreeEqualsImpl(node1);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      node0.isFromExterns();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      node0.isOptionalArg();
      node0.isDebugger();
      Node node1 = new Node(28, node0, node0, node0, node0, 30, 55);
      node0.isEquivalentTo(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node2 = new Node(32768, 4095, 55);
      node0.isStringKey();
      node2.isGetElem();
      node1.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.isComma();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("8I@*cw.+YND}&~D#", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      vector0.iterator();
      node0.getSourceFileName();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Node node0 = new Node(143);
      node0.isIf();
      node0.checkTreeEqualsImpl(node0);
      Node node1 = new Node(4, node0);
      node1.isEmpty();
      node0.isEmpty();
      node1.addChildrenToFront(node0);
      LinkedList<JSType> linkedList0 = null;
      try {
        linkedList0 = new LinkedList<JSType>();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(88, (-3485), (-3485));
      Node node1 = new Node(88, node0, node0, node0);
      Node node2 = new Node(88, node1, node1, node1, 43, 172);
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      node2.isNumber();
      node1.isOptionalArg();
      node2.isScript();
      node1.isNumber();
      node0.isIf();
      node0.isHook();
      int int0 = Node.VAR_ARGS_NAME;
      node2.getBooleanProp((-619));
      node3.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      node0.isVarArgs();
      Node node1 = Node.newNumber(1962.07705272);
      node0.setLineno(0);
      Node node2 = new Node(64, node0, node0, node0, 34, 32);
      Node node3 = node0.useSourceInfoIfMissingFrom(node2);
      node3.isNumber();
      node3.isOptionalArg();
      node2.isScript();
      node0.isNumber();
      node2.isIf();
      node3.isHook();
      int int0 = Node.VAR_ARGS_NAME;
      node0.getBooleanProp(30);
      node1.isArrayLit();
      node3.isDec();
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(305.0);
      node0.isTry();
      Node node1 = new Node(52, node0, node0, node0);
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.javascript.rhino.Node$AncestorIterable$1");
      Node node0 = new Node(103);
      node0.toString(false, true, false);
      node0.isVoid();
      node0.getType();
      node0.getJsDocBuilderForNode();
      node0.isDec();
      Node node1 = new Node(2);
      node0.addChildAfter(node1, node1);
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags((-1706));
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags2.areAllFlagsSet();
      Node node0 = new Node(3264, (-1706), 4095);
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Node node0 = Node.newString(1208, "Null");
      node0.setQuotedString();
      Node node1 = Node.newNumber(1962.07705272);
      node1.getStaticSourceFile();
      node1.isInstanceOf();
      node1.isLabel();
      node0.setDouble(43);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Node node0 = Node.newString("8T.YJm,<\"B>9`Xu?Eyg");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(30, node0, node0, node0);
      node1.isNew();
      Node node2 = new Node(15, node1, node1, node1);
      Node.newString("8T.YJm,<\"B>9`Xu?Eyg", 29, 55);
      node0.isIn();
      int int0 = Node.INFERRED_FUNCTION;
      node2.isWhile();
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = new Node(126, node0, node0, node0);
      node1.toString(true, false, true);
      node0.hasOneChild();
      Node node2 = new Node(12, node0, node0, node1, node1);
      node0.hasChild(node2);
      String string0 = "";
      Node.newString(node0.INFERRED_FUNCTION, string0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      node0.isGetterDef();
      Node node1 = Node.newNumber((double) 54, 1155, 48);
      node1.isUnscopedQualifiedName();
      node1.setOptionalArg(true);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      Node node3 = Node.newNumber((double) 42);
      node3.siblings();
      node0.addChildrenAfter(node3, node3);
      Node node4 = new Node(node0.FREE_CALL, node2);
      Node node5 = node1.srcrefTree(node4);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node2);
      node4.isVarArgs();
      Object object0 = node0.getProp(node3.DIRECTIVES);
      node_NodeMismatch0.equals(object0);
      // Undeclared exception!
      try { 
        node5.addChildrenToBack(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Node node0 = null;
      Node node1 = new Node(130, (Node) null, (Node) null, (Node) null);
      node1.replaceChildAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Node node0 = new Node(9, (-11), (-11));
      node0.hasChild(node0);
      Node node1 = new Node(0, (-7), 42);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      int int0 = Node.REFLECTED_OBJECT;
      node2.isTrue();
      node2.mayMutateGlobalStateOrThrow();
      node0.detachChildren();
      Node node3 = new Node(92, 55, (-2733));
      node0.isIf();
      node0.checkTreeEqualsImpl(node1);
      node3.isQuotedString();
      node2.checkTreeEquals(node3);
      node3.isEmpty();
      node2.isContinue();
      node3.setString("Node tree inequality:\nTree1:\nBITOR\n\n\nTree2:\nASSIGN_URSH\n\n\nSubtree1: BITOR\n\n\nSubtree2: ASSIGN_URSH\n");
      Node node4 = node3.useSourceInfoIfMissingFrom(node2);
      double double0 = 1.0;
      node4.setDouble(double0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Node node0 = Node.newString("Za", (-928), (-928));
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals("Za");
      node0.isTrue();
      node0.isName();
      node0.isScript();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Node node0 = new Node(103);
      node0.toString(false, true, true);
      node0.getJsDocBuilderForNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSType[] jSTypeArray0 = new JSType[0];
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Node node0 = Node.newString("7[`{44m");
      node0.isVarArgs();
      Node node1 = Node.newNumber((double) 39);
      node0.setLineno((-1338));
      Node node2 = new Node((-478), node0, node0, node1, 4, 2348);
      node2.useSourceInfoIfMissingFrom(node1);
      node1.isNumber();
      node2.isOptionalArg();
      node2.isScript();
      Node node3 = Node.newString("");
      node3.isNumber();
      node2.isIf();
      node0.isHook();
      int int0 = Node.VAR_ARGS_NAME;
      node3.getBooleanProp(31);
      node1.isArrayLit();
      node3.isDec();
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Node node0 = new Node((-1678));
      Node node1 = Node.newString("", 30, 50);
      node1.hasChildren();
      Node node2 = null;
      node0.setLineno(29);
      Node node3 = Node.newNumber((double) 49);
      Node node4 = new Node((-654), node3, node1);
      Node node5 = new Node(2361, node3, node4, node1, 40, 50);
      Node node6 = node1.useSourceInfoIfMissingFrom(node5);
      node5.isOr();
      node6.isScript();
      // Undeclared exception!
      try { 
        node1.isNumber();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Node node0 = new Node((-1678));
      Node node1 = Node.newString("", 30, 50);
      node1.hasChildren();
      Node node2 = new Node(46, node1, 38, 1);
      Node node3 = new Node(42);
      node3.checkTreeEqualsImpl(node1);
      node0.isQuotedString();
      node3.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Node node0 = new Node((-1678));
      Node node1 = new Node(0, node0);
      node1.hasChildren();
      Node node2 = new Node(46, node1, 38, 1);
      Node node3 = new Node(42);
      node3.checkTreeEqualsImpl(node1);
      node0.isQuotedString();
      node3.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = new Node(15, node0);
      node0.isOnlyModifiesArgumentsCall();
      node0.isOptionalArg();
      node1.isDebugger();
      node1.isEquivalentTo(node0);
      node0.getIndexOfChild(node1);
      node0.getLineno();
      node0.setSourceEncodedPosition((-1));
      node0.isCatch();
      Node node2 = new Node(1738, node1, 37, (-39));
      Node node3 = new Node(51);
      Node node4 = Node.newString("aK+u$Z7; &-X.oL.w\"", 77, 37);
      node3.isWhile();
      node4.isWith();
      node2.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Node node0 = new Node((-2191));
      node0.isOptionalArg();
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      node0.isOnlyModifiesArgumentsCall();
      node0.isGetterDef();
      Node node1 = new Node(31);
      node1.mayMutateArguments();
      Node.extractLineno(55);
      node1.isVoid();
      Node node2 = Node.newNumber((double) 50);
      Node node3 = new Node(0);
      Node node4 = Node.newString((String) null, 38, 48);
      node4.isExprResult();
      node2.putIntProp(node1.CHANGE_TIME, node3.FLAG_LOCAL_RESULTS);
      int int0 = 2528;
      String string0 = "";
      // Undeclared exception!
      try { 
        Node.newString(int0, string0, node3.LAST_PROP, node4.INPUT_ID);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Node node0 = new Node(46);
      node0.isDo();
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Node node0 = Node.newNumber((double) 46);
      Node node1 = new Node(31, node0, node0, node0);
      node1.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.removeChild(node0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      node0.isFromExterns();
      Node node1 = Node.newNumber((double) 38);
      node0.isGetProp();
      node1.toStringTree();
      node1.putBooleanProp(40, false);
      Node node2 = new Node(143, node0, node0, node1);
      node2.isOptionalArg();
      node2.removeChild(node0);
      node2.isExprResult();
      node1.isEquivalentToTyped(node1);
      Node.mergeLineCharNo(37, 4095);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Node node0 = new Node((-1432), (-1432), (-1940));
      boolean boolean0 = node0.isIf();
      Node node1 = null;
      node0.checkTreeEqualsImpl((Node) null);
      node0.setWasEmptyNode(boolean0);
      int int0 = (-3195);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Node node0 = Node.newString("8T.YJm,<\"B>9`Xu?Eyg");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(30, node0, node0, node0);
      node1.isNew();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node2 = new Node(15, node1, node1, node1);
      Node node3 = Node.newString("8T.YJm,<\"B>9`Xu?Eyg", 29, 55);
      node0.isIn();
      int int0 = Node.VAR_ARGS_NAME;
      node1.getBooleanProp(0);
      node1.isArrayLit();
      node1.isDec();
      node3.isDec();
      node1.isDelProp();
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      jSTypeRegistry0.resetForTypeCheck();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isDelProp();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Node node0 = Node.newString("8T.YJm,<\"B>9`Xu?Eyg");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(30, node0, 30, 57);
      node1.isQuotedString();
      node0.isOr();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags4.areAllFlagsSet();
      Node node2 = new Node(177, 50, 2462);
      node0.isStringKey();
      node1.isGetElem();
      node2.getSourceFileName();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      node1.copyInformationFromForTree((Node) null);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Node node0 = Node.newString(52, "Null");
      node0.isFromExterns();
      Node node1 = Node.newNumber((double) 38);
      node0.isQuotedString();
      Node node2 = node1.srcrefTree(node0);
      node2.copyInformationFromForTree((Node) null);
      node0.getDirectives();
      node2.hasOneChild();
      // Undeclared exception!
      try { 
        Node.newNumber((double) node0.FLAG_GLOBAL_STATE_UNMODIFIED);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(24, node0, node0);
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      node1.detachChildren();
      node0.isThrow();
      int int0 = Node.DIRECT_EVAL;
      node1.hasChildren();
      Node node2 = new Node(43);
      node0.isExprResult();
      node1.isNull();
      Node.mergeLineCharNo(4, 2);
      node1.isInstanceOf();
      node2.removeChild(node0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = Node.newString("Za");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node2.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setAllFlags();
      Node node3 = new Node(51, node1, node2, 120, 102);
      node3.hasMoreThanOneChild();
      node2.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Node node0 = Node.newNumber(2256.5717129, 2721, 2721);
      Node node1 = new Node(300, node0);
      node0.isDelProp();
      node1.isScript();
      Node.newNumber(1913.8);
      node1.isExprResult();
      node1.isFunction();
      Node.mergeLineCharNo((-872), 49);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Node node0 = Node.newString((-472), "U8I@cwN+YNID}&~D#");
      Node node1 = Node.newString(55, "fP");
      node0.getString();
      node0.addChildToFront(node1);
      node1.hasOneChild();
      Node node2 = new Node(39, node0, node0, node1, node0, 39, (-3297));
      node2.isRegExp();
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Node node0 = Node.newNumber((double) 305, 305, 305);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = Node.newNumber((-1355.312384231813), 36, 49);
      node1.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = new Node(305, node0, node0, node0, 0, 0);
      Node node3 = Node.newNumber((double) 30);
      String string0 = node3.checkTreeEquals(node0);
      boolean boolean0 = node1.isOr();
      node3.checkTreeEqualsImpl(node2);
      Node node4 = Node.newString("", 113, 56);
      node1.useSourceInfoFrom(node4);
      Node node5 = new Node(2, node4, node4, node0, node4);
      int int0 = 2610;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(int0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) string0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, boolean0);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(string0, objectArray0);
      // Undeclared exception!
      try { 
        node4.appendStringTree(printWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-243.6), 53, (-1150));
      node0.getString();
      node0.isOr();
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        FileSystemHandling.createFolder(evoSuiteFile0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -243.6 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Node node0 = Node.newNumber((double) 46);
      node0.getString();
      // Undeclared exception!
      try { 
        Node.newNumber((double) node0.REFLECTED_OBJECT, node0.SLASH_V, node0.FLAG_NO_THROWS);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 46.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Node node0 = Node.newString("8T.YJm,<\"B>9`Xu?Eyg");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(30, node0, node0, node0);
      node1.isNew();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      node1.cloneNode();
      Node node2 = new Node(15, node1, node1, node1);
      Node.newString("8T.YJm,<\"B>9`Xu?Eyg", 29, 55);
      node0.isIn();
      node1.isEquivalentTo(node2);
      Node.newString("(ap");
      node2.toString(true, false, false);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isTry();
      node0.mayMutateArguments();
      Node node1 = new Node(249, node0, node0, 48, 1);
      node0.getDouble();
      node0.isEquivalentTo(node1);
      Node.newString((String) null);
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = new Node(15, node0);
      node0.isOptionalArg();
      node1.isDebugger();
      node0.isEquivalentTo(node1);
      node1.getIndexOfChild(node0);
      node1.checkTreeEqualsImpl(node0);
      node1.isContinue();
      Node node2 = new Node(143, node0, node1);
      node1.addChildAfter(node2, node2);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Node node0 = Node.newNumber(0.5);
      Node node1 = Node.newString("com.google.common.collect.ImmutableCollection$Builder");
      Node node2 = Node.newNumber(716.33722);
      Node node3 = node0.useSourceInfoFrom(node2);
      Node node4 = node0.copyInformationFrom(node1);
      Node.newString("com.google.common.collect.ImmutableCollection$Builder");
      Node node5 = Node.newNumber(0.0);
      node0.checkTreeEquals(node5);
      node1.isOr();
      node3.checkTreeEqualsImpl(node0);
      node4.useSourceInfoFrom(node5);
      Node node6 = new Node(56, node5, node0, node4, node5);
      node6.isDo();
      node5.isArrayLit();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node.newString("", 31, 374);
      node1.isWhile();
      node6.getIndexOfChild(node5);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Node node0 = Node.newString("U8I@cwN+YNID}&~D#", (-4646), (-4646));
      node0.toStringTree();
      Node node1 = Node.newString("STRING U8I@cwN+YNID}&~D#\n", 12, 122);
      node0.setWasEmptyNode(true);
      Node node2 = Node.newString(29, "STRING U8I@cwN+YNID}&~D#\n");
      node2.setSourceEncodedPosition(300);
      Node node3 = new Node(155, node0, node1, node1, node2);
      node0.isDo();
      node2.isArrayLit();
      Node.newString("reflected_object", 38, 1);
      node2.getJsDocBuilderForNode();
      Node node4 = new Node(39);
      node3.getIndexOfChild(node4);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isQualifiedName();
      Node node1 = new Node(46, node0, node0, node0, node0);
      Node node2 = node1.copyInformationFrom(node0);
      node2.getQualifiedName();
      node2.replaceChildAfter(node0, node0);
      // Undeclared exception!
      try { 
        node2.isGetterDef();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = new Node(15, node0);
      node1.replaceChildAfter(node0, node0);
      // Undeclared exception!
      try { 
        node0.isOnlyModifiesArgumentsCall();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-746.1755));
      Node node1 = Node.newString("TYPE_ERROR_FUNCTION_TYPE");
      Node node2 = new Node(43, node1, node0, node0, node1, 50, 111);
      node2.addChildrenToBack(node1);
      node0.getAncestors();
      double double0 = 1.0;
      // Undeclared exception!
      try { 
        Node.newNumber(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(56, node0, node0, node0, node0);
      node1.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(56);
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      Node node2 = new Node(132, node1, (-1886), 3302);
      Node.newString(15, "", (-575), 1);
      Node node3 = new Node((-3690));
      Node.newString("com.google.common.base.Joiner", 49, 33);
      node1.isWhile();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      node2.copyInformationFromForTree(node1);
      node0.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Node node0 = Node.newString(".SXl", 64, 64);
      node0.isVarArgs();
      Node node1 = new Node(31);
      node0.getBooleanProp(2);
      Node node2 = new Node(4095, node1, node1, node0, 47, 46);
      node2.isEquivalentTo(node1, false, false, false);
      node1.isUnscopedQualifiedName();
      node1.isNot();
      node2.copyInformationFromForTree(node1);
      node1.isCatch();
      node1.isFunction();
      node2.toString();
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = new Node(15, node0);
      node0.isOnlyModifiesArgumentsCall();
      node0.isOptionalArg();
      node1.isDebugger();
      node1.isEquivalentTo(node0);
      node0.getIndexOfChild(node1);
      node0.getLineno();
      node0.setSourceEncodedPosition((-1));
      node0.isCatch();
      Node node2 = new Node(1738, node1, 37, (-39));
      Node.newString(39, "", 11, (-145));
      Node node3 = new Node(51);
      Node.newString("aK+u$Z7; &-X.oL.w\"", 77, 37);
      node3.isWhile();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      node3.copyInformationFromForTree(node0);
      node1.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.javascript.rhino.Node$AncestorIterable$1");
      Node node0 = new Node(103);
      node0.toString(false, true, true);
      node0.isVoid();
      node0.getType();
      node0.getJsDocBuilderForNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.addChildrenAfter(node1, node1);
      node1.getString();
      Node node2 = Node.newString(jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE);
      node2.isCall();
      int int0 = 130;
      Node node3 = new Node(int0, node2, node1);
      node3.removeChild(node0);
      // Undeclared exception!
      try { 
        node1.addChildToBack(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(88, (-3485), (-3485));
      Node node1 = new Node(88, node0, node0, node0);
      Node node2 = new Node(88, node1, node1, node1, 43, 172);
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      node1.isOptionalArg();
      node2.isScript();
      node1.isNumber();
      node0.isIf();
      node0.addSuppression("");
      node0.isHook();
      int int0 = Node.VAR_ARGS_NAME;
      node3.isObjectLit();
      node2.isThrow();
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(47, "Null");
      Node node1 = Node.newNumber(1.2);
      node0.setLineno((-855));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node3 = node2.useSourceInfoIfMissingFrom(node1);
      node3.isOr();
      node2.isScript();
      node1.isLocalResultCall();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = null;
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      JSType.toMaybeFunctionType((JSType) null);
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      TemplatizedType templatizedType0 = jSTypeRegistry1.createTemplatizedType((ObjectType) null, (Map<TemplateType, JSType>) hashMap0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0, (JSType) templatizedType0, jSType0, (JSType) templateType0, (JSType) templatizedType0);
      Node node4 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) immutableList0);
      node4.isNumber();
      // Undeclared exception!
      try { 
        node3.isIf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Node node0 = Node.newString("cH:[E1yh`^bNn*=S;7i");
      Node node1 = new Node(12, node0, node0);
      node0.detachChildren();
      node0.isThrow();
      int int0 = Node.DIRECT_EVAL;
      Node node2 = new Node(42, node1);
      node2.isVarArgs();
      node0.isRegExp();
      Node node3 = node0.cloneTree();
      node3.setSideEffectFlags((Node.SideEffectFlags) null);
      node0.isWith();
      // Undeclared exception!
      try { 
        node1.isRegExp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Node node0 = new Node(9, (-11), (-11));
      Node node1 = new Node(0, (-7), 42);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      int int0 = Node.INPUT_ID;
      node2.isTrue();
      node1.isEquivalentToTyped(node1);
      node0.detachChildren();
      Node node3 = new Node(86, 55, (-2733));
      node0.isIf();
      node0.checkTreeEqualsImpl(node1);
      node3.isQuotedString();
      node2.checkTreeEquals(node3);
      node3.isEmpty();
      node2.isContinue();
      node3.setString("Node tree inequality:\nTree1:\nBITOR\n\n\nTree2:\nASSIGN\n\n\nSubtree1: BITOR\n\n\nSubtree2: ASSIGN\n");
      double double0 = 1.0;
      node3.setDouble(double0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-243.6), 53, (-1150));
      Node node1 = new Node(4095, 42, 83);
      node1.hasChild(node0);
      Node node2 = new Node(130, 449, 0);
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      int int0 = Node.REFLECTED_OBJECT;
      node3.isTrue();
      node2.mayMutateGlobalStateOrThrow();
      node1.detachChildren();
      Node node4 = new Node(9, (-2733), 159);
      node0.isIf();
      node2.checkTreeEqualsImpl(node3);
      node3.isQuotedString();
      node0.checkTreeEquals(node3);
      node1.isEmpty();
      int int1 = 2203;
      Node node5 = new Node(int1);
      String string0 = "U14VD";
      node5.setString(string0);
      Node node6 = node1.useSourceInfoIfMissingFrom(node4);
      double double0 = 1.0;
      node0.setDouble(double0);
      Node.newNumber((double) node0.SIDE_EFFECTS_ALL, node1.DECR_FLAG, node6.SIDE_EFFECTS_ALL);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Node node0 = Node.newString(43, "slash_v");
      Node node1 = Node.newString(113, "slash_v");
      node1.addChildToFront(node0);
      node1.children();
      node1.isLocalResultCall();
      node1.isHook();
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Node node0 = new Node(627, 627, 627);
      node0.setLineno(50);
      Node node1 = new Node(51, node0, node0, node0, node0, 105, 32);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node0.isOr();
      node2.isScript();
      node2.isLocalResultCall();
      node2.isNumber();
      node2.isIf();
      node1.children();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.isSyntheticBlock();
      node1.isReturn();
      node2.getJSType();
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Node node0 = new Node(627, 627, 627);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(8);
      Node node1 = Node.newNumber((double) 54, 31, 37);
      node1.isOr();
      node0.checkTreeEqualsImpl(node1);
      Node node2 = Node.newNumber(265.1102832785, 1, 666);
      Node node3 = node1.useSourceInfoFrom(node2);
      Node node4 = new Node((-3140), node0, node2, node3, node2);
      node0.isDo();
      node0.isArrayLit();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node.newString("O0kx^bweUC'd;WH6", 57, 8);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node3;
      nodeArray0[1] = node0;
      nodeArray0[2] = node3;
      nodeArray0[3] = node1;
      Node node5 = Node.newString(53, "com.google.javascript.rhino.Node$ObjectPropListItem");
      nodeArray0[4] = node5;
      nodeArray0[5] = node4;
      Node node6 = new Node(1731, nodeArray0, 57, 57);
      node6.isWhile();
      nodeArray0[0].getIndexOfChild(node6);
      int int0 = (-1401);
      Node.extractCharno(int0);
      node2.getLineno();
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(2958, nodeArray0);
      Node node1 = new Node(2958, node0, node0);
      node0.isNoSideEffectsCall();
      node1.putProp(510, node0);
      node0.mayMutateArguments();
      node1.isIf();
      node1.isHook();
      int int0 = Node.VAR_ARGS_NAME;
      node1.getBooleanProp(3210);
      node0.isArrayLit();
      node1.isDec();
      node0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Node node0 = Node.newString("8T.YJm,<\"B>9`Xu?Eyg");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(30, node0, 30, 57);
      node1.isQuotedString();
      node0.isOr();
      node1.isOptionalArg();
      node0.isScript();
      node1.isNumber();
      node0.isIf();
      Node node2 = Node.newString("NRIe,6(Z!Dj4E", 50, 1709);
      node2.isWhile();
      Node node3 = Node.newString(51, "index");
      node0.getIndexOfChild(node3);
      node0.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Node node0 = Node.newNumber(1685.510178);
      Node node1 = Node.newString(86, "REGEXP_TYPE");
      Node node2 = Node.newString(181, "({");
      node1.addChildToFront(node2);
      node1.isNE();
      node2.addSuppression("VAR");
      node1.isAssign();
      Node node3 = new Node(54);
      node3.isAdd();
      Node.newString("com.google.javascript.rhino.Node$SideEffectFlags", 131, 1438);
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Node node0 = Node.newNumber(1685.510178);
      Node node1 = Node.newString(86, "REGEXP_TYPE");
      Node node2 = Node.newString(181, "({");
      node1.addChildToFront(node2);
      node1.isNE();
      node1.isLabelName();
      node2.addSuppression("VAR");
      node1.isAssign();
      Node node3 = new Node(54);
      Node node4 = new Node(50, node0, node3);
      node3.isAdd();
      Node.newString("com.google.javascript.rhino.Node$SideEffectFlags", 131, 1438);
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Node.newNumber((double) 46);
      Node node0 = Node.newString(172088, "u?D9b");
      node0.setSideEffectFlags(2);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(88, (-3485), (-3485));
      Node node1 = new Node(37, node0, node0, node0, node0, 15, 49);
      Node node2 = new Node(88, node1, node1, node1, 43, 172);
      node1.useSourceInfoIfMissingFrom(node2);
      Node node3 = new Node(102, 864, 52);
      node2.isIf();
      node1.checkTreeEqualsImpl(node3);
      node0.isQuotedString();
      node1.checkTreeEquals(node0);
      node0.isEmpty();
      node2.isContinue();
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Node node0 = Node.newString("8T.YJm,<\"B>9`Xu?Eyg");
      Node node1 = new Node(30, node0, node0, node0);
      Node node2 = new Node(50, node1, 16, 43);
      node2.setString("8T.YJm,<\"B>9`Xu?Eyg");
      // Undeclared exception!
      try { 
        node0.isIn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Node node0 = Node.newString("cH:[E1yh`^bNn*=S;7i");
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getAssociatedNode();
      node0.useSourceInfoIfMissingFrom((Node) null);
      Node node1 = new Node(node0.COLUMN_BITS, node0, node0);
      // Undeclared exception!
      try { 
        node0.detachChildren();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Node node0 = Node.newString("U8I@cwN+YNID}&~D#", (-4646), (-4646));
      node0.toStringTree();
      Node node1 = Node.newString("STRING U8I@cwN+YNID}&~D#\n", 12, 122);
      node0.setWasEmptyNode(true);
      Node node2 = Node.newString(29, "STRING U8I@cwN+YNID}&~D#\n");
      node2.setSourceEncodedPosition(307);
      node0.setChangeTime(51);
      node0.isDebugger();
      node1.isEquivalentTo(node0);
      node0.isEquivalentToShallow(node1);
      node1.isAdd();
      node0.isSwitch();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node.newString(3042, "", 429, 29);
      node1.setJSDocInfo(jSDocInfo0);
      Node.newString((-2179), "quoted");
      Node node3 = Node.newString("quoted", 42, (-1254));
      node3.getLineno();
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Node node0 = Node.newString("UI@cwN+YNID}&D#", (-4653), (-4653));
      node0.toStringTree();
      Node node1 = Node.newString("STRING UI@cwN+YNID}&D#\n", 12, 29);
      node0.setWasEmptyNode(true);
      node1.checkTreeEqualsImpl(node0);
      node0.isLabel();
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Node node0 = new Node(9, (-11), (-11));
      Node node1 = new Node(0, (-7), 42);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      int int0 = Node.INPUT_ID;
      node2.isTrue();
      node1.isEquivalentToTyped(node1);
      node0.detachChildren();
      Node node3 = new Node(86, 55, (-2733));
      node0.isIf();
      node0.checkTreeEqualsImpl(node1);
      node3.isQuotedString();
      node2.checkTreeEquals(node3);
      node3.isEmpty();
      node2.isContinue();
      Node.mergeLineCharNo((-1625), 48);
      node0.isInstanceOf();
      node0.checkTreeEqualsImpl(node2);
      node2.isNE();
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = new Node(15, node0);
      node1.isEquivalentToShallow(node1);
      node0.isOptionalArg();
      node1.isDebugger();
      node1.isEquivalentTo(node0);
      node0.getIndexOfChild(node1);
      node0.setSourceEncodedPosition((-1));
      node0.isCatch();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setThrows();
      node_SideEffectFlags6.clearAllFlags();
      node_SideEffectFlags5.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setThrows();
      node_SideEffectFlags7.areAllFlagsSet();
      Node.newString((String) null);
      node0.isVar();
      // Undeclared exception!
      try { 
        node1.getSideEffectFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Node node0 = new Node(46, 46, 46);
      Node node1 = new Node(15, node0);
      node1.isEquivalentToShallow(node1);
      node0.isOptionalArg();
      node1.isDebugger();
      node1.isEquivalentTo(node0);
      node0.getIndexOfChild(node1);
      node1.isWith();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node((-7), (-7), (-7));
      Node node1 = Node.newString("VS|[aXAN9Me[");
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      int int0 = Node.NO_SIDE_EFFECTS;
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node2.isExprResult();
      node0.isTypeOf();
      node1.getAncestor(4);
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      Node node1 = Node.newNumber(1962.07705272);
      node0.setLineno(0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node0);
      node1.isOr();
      node0.isScript();
      node2.isLocalResultCall();
      node0.isNumber();
      node1.isIf();
      node2.children();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isExprResult();
      node2.setString("Number node not created with Node.newNumber");
      node2.setDouble((-444.056910509));
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(118);
      Node node0 = Node.newString(118, "ARRAY_TYPE", 118, 118);
      node0.getSourceFileName();
      node0.isQuotedString();
      node0.setString("fPMKKhgKfaaH49'CF");
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isTry();
      node0.mayMutateArguments();
      node0.getDouble();
      node0.isEquivalentTo(node0);
      Node node1 = Node.newString((String) null);
      int int0 = 153;
      Node.mergeLineCharNo(node0.INPUT_ID, int0);
      // Undeclared exception!
      try { 
        node0.useSourceInfoFrom(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(40, node0, node0);
      node1.detachChildren();
      node0.isThrow();
      int int0 = Node.DIRECT_EVAL;
      Node node2 = new Node((-1266), node1, node0, node0);
      node0.isExprResult();
      node1.isNull();
      Node.mergeLineCharNo(4, 2);
      node1.isInstanceOf();
      node2.isOnlyModifiesThisCall();
      node2.isFor();
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(100, 100, 100);
      node0.isWhile();
      node0.isDelProp();
      node0.getProp((-1179));
      node0.isOnlyModifiesThisCall();
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Node node0 = Node.newNumber(0.5);
      Node node1 = Node.newString(49, "REGEXP_TYPE");
      Node node2 = Node.newString(126, "REGEXP_TYPE");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.addChildToFront(node2);
      node2.isNE();
      node1.isLabelName();
      node1.addSuppression("p");
      node2.isAssign();
      node0.isAdd();
      Node.newString(":9RJE`", 33, 1);
      node2.isWhile();
      node2.putBooleanProp(3229, true);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Node node0 = new Node(64, (-677), (-1639));
      Node node1 = new Node(111, node0, node0);
      node0.checkTreeEqualsImpl(node1);
      Node node2 = new Node(54);
      node0.isEmpty();
      node0.isEmpty();
      Node node3 = Node.newString("W~i~'mkhg(_<Xx^M");
      node1.addChildrenToFront(node3);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node3.isWith();
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = Node.newString("Za");
      Vector<JSType> vector0 = new Vector<JSType>();
      int int0 = Node.NO_SIDE_EFFECTS;
      node1.isExprResult();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getAncestor(2);
      node1.putIntProp(1938, 36);
      node1.setDouble(4095);
      node1.siblings();
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getDouble();
      node0.isEquivalentTo(node0);
      node0.setVarArgs(true);
      node0.isNot();
      node0.isBreak();
      node0.isFunction();
      node0.toString();
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Node node0 = new Node(103);
      Node node1 = new Node(112, 57, 48);
      node1.setChangeTime(37);
      node1.isIf();
      node0.checkTreeEqualsImpl(node1);
      node0.checkTreeEquals(node1);
      node1.isContinue();
      node0.isQuotedString();
      node1.setString("Node tree inequality:\nTree1:\nDEC\n\n\nTree2:\nDEFAULT_CASE 57 [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000003]\n\n\nSubtree1: DEC\n\n\nSubtree2: DEFAULT_CASE 57 [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000003]\n");
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Node node0 = Node.newString("UI@cwN+YNID}&D#", (-4653), (-4653));
      node0.toStringTree();
      Node.newString("STRING UI@cwN+YNID}&D#\n", 12, 122);
      node0.setWasEmptyNode(true);
      node0.isFunction();
      node0.toString();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Node node0 = Node.newString("U8I@cwN+YNID}&~D#", (-4646), (-4646));
      node0.toStringTree();
      Node node1 = Node.newString("STRING U8I@cwN+YNID}&~D#\n", 12, 122);
      node0.setWasEmptyNode(true);
      Node node2 = Node.newString(29, "STRING U8I@cwN+YNID}&~D#\n");
      node2.setSourceEncodedPosition(300);
      node0.setChangeTime(51);
      node1.isEquivalentTo(node0);
      node0.isEquivalentToShallow(node1);
      node1.isAdd();
      node0.getBooleanProp(53);
      node0.putIntProp(306654252, (-1156));
      node0.setDouble((-658.2342));
      node2.siblings();
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(40, node0, node0);
      node1.detachChildren();
      node0.isThrow();
      int int0 = Node.FLAG_GLOBAL_STATE_UNMODIFIED;
      node1.isGetProp();
      int int1 = Node.REFLECTED_OBJECT;
      node1.isAnd();
      node1.mayMutateGlobalStateOrThrow();
      node0.detachChildren();
      Node node2 = new Node((-2541), 38, 14);
      Node node3 = Node.newString(39, "");
      node3.isIf();
      node0.checkTreeEqualsImpl(node1);
      node0.isQuotedString();
      node1.checkTreeEquals(node3);
      node1.isEmpty();
      node3.isContinue();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(56, node0, node0, node0, node0);
      node1.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(56);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node1.clonePropsFrom(node0);
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags5.clearAllFlags();
      node1.isOptionalArg();
      Node node2 = Node.newNumber(1014.798);
      Node node3 = Node.newString("", 37, 55);
      node2.isWhile();
      node1.isAssignAdd();
      node0.hasChild(node2);
      node3.getProp(1044);
      node1.isThrow();
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      Node.newString(8, "Null");
      Node node1 = Node.newString(8, "Null");
      node1.addChildToFront(node0);
      node0.isNE();
      Node node2 = new Node(31);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Element");
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0);
      jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.isEmpty();
      node1.isContinue();
      node0.isRegExp();
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Node node0 = Node.newNumber(2256.5717129, 627, 627);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isCall();
      node0.isRegExp();
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(305.0);
      node0.isTry();
      Node node1 = new Node(52, node0, node0, node0);
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      Node.newString(8, "Null");
      Node node1 = Node.newString(8, "Null");
      node1.addChildToFront(node0);
      node0.isNE();
      Node node2 = new Node(31);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node3.isCase();
      node3.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(103, 103, 103);
      node0.isIf();
      node0.checkTreeEqualsImpl(node0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newString(195, "REGEXP_TYPE");
      Node.newString(2090, "U8I@cwN+YNID}&~D#");
      node1.addChildToFront(node0);
      node1.isNE();
      Node node2 = new Node(2612);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative jSTypeNative0 = JSTypeNative.EVAL_ERROR_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0);
      jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.isCase();
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      String string0 = "Null";
      Node node0 = Node.newString(64, "Null");
      node0.isFromExterns();
      Node node1 = Node.newNumber((double) 38);
      node0.isGetProp();
      Node node2 = new Node(111, node0, node0, node1);
      node2.isExprResult();
      node2.isNull();
      node2.getString();
      node0.hasChildren();
      // Undeclared exception!
      try { 
        node2.isOr();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CASE is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Node node0 = new Node(88);
      node0.isFalse();
      node0.isGetProp();
      node0.getString();
      // Undeclared exception!
      try { 
        node0.isDelProp();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ASSIGN_BITXOR is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Node node0 = Node.newNumber(38.0);
      node0.isTry();
      node0.mayMutateArguments();
      Node node1 = new Node(2192, 2, 1);
      Node node2 = new Node(57, node0, node1, (-23), 77);
      node2.srcref(node0);
      node0.cloneTree();
      node2.isExprResult();
      node1.isEquivalentToTyped(node2);
      Node.mergeLineCharNo(40, 29);
      node2.isInstanceOf();
      node0.isFalse();
      node1.setDouble((-2277.497625));
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Node node0 = new Node(88, 88, 88);
      InputId inputId0 = new InputId("qCq;0o[j");
      node0.setInputId(inputId0);
      Node node1 = null;
      node0.checkTreeEquals((Node) null);
      node0.checkTreeEquals(node1);
      // Undeclared exception!
      try { 
        node0.isVar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Node node0 = Node.newString("UI@cwN+YNID}&D#", (-4653), (-4653));
      node0.toStringTree();
      Node node1 = new Node(32, node0, node0, node0, 49, 53);
      node0.setWasEmptyNode(false);
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.isLabel();
      node1.isFor();
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node((-11), (-11), 57);
      Node node1 = new Node(48, 40, 982);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      int int0 = Node.INPUT_ID;
      node1.isTrue();
      node0.isEquivalentToTyped(node2);
      node1.detachChildren();
      Node node3 = new Node(55, node0);
      node3.isIf();
      node0.checkTreeEqualsImpl(node1);
      node0.isQuotedString();
      node1.checkTreeEquals(node2);
      node1.isEmpty();
      node2.isContinue();
      int int1 = (-1956);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Node node0 = Node.newNumber((-3995.857), (-472), (-472));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4096);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      Node node1 = Node.newString("duplicate child", (-2056), 1801);
      node0.getQualifiedName();
      node1.addChildrenToFront(node0);
      node1.isContinue();
      node1.getLength();
      node1.isGetElem();
      Node.mergeLineCharNo(0, (-1625));
      node1.addChildBefore(node0, node0);
      int int0 = 301;
      String string0 = "";
      int int1 = (-189);
      Node.newString(int0, string0, node1.COLUMN_BITS, int1);
      boolean boolean0 = false;
      JSDocInfo jSDocInfo0 = new JSDocInfo(boolean0);
      // Undeclared exception!
      try { 
        node0.isAdd();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals(jSTypeRegistry0);
      node0.isParamList();
      Node node1 = new Node(57, 77, 48);
      node1.isIf();
      node1.checkTreeEqualsImpl(node0);
      node1.isQuotedString();
      node0.isFor();
      node0.isContinue();
      Node node2 = node0.useSourceInfoFrom(node1);
      node1.copyInformationFrom(node2);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(88, (-3485), (-3485));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.javascript.rhino.Node$SideEffectFlags");
      Node node1 = new Node(88, node0, node0, node0);
      Node node2 = Node.newString("Object#Key");
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      node0.addChildrenToFront(node2);
      node1.isOptionalArg();
      node2.isScript();
      node0.isEquivalentToShallow(node1);
      node2.isAdd();
      Node node4 = Node.newString("STRING 8I@*cw.+YND}&~D#\n", 32, 2);
      node3.isWhile();
      node4.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = new Node(77, 77, 16);
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Node node0 = Node.newNumber(30.0);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)127;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.getBooleanProp((-690));
      node0.isQuotedString();
      node0.siblings();
      node0.isBlock();
      node0.isOptionalArg();
      node0.isFromExterns();
      Node node1 = node0.detachFromParent();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      node1.getSourceFileName();
      // Undeclared exception!
      try { 
        node1.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "no next sibling.");
      int int0 = 3030;
      Node node0 = new Node(3030);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)120;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isCast();
      Node node1 = Node.newNumber(36.0);
      node1.setString("no next sibling.");
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.addChildrenAfter(node1, node1);
      node0.setLineno(int0);
      node0.isScript();
      node0.siblings();
      String string0 = "%\\Y#";
      node0.setString(string0);
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Node node0 = Node.newNumber((double) 46);
      Node node1 = Node.newString(46, "STRING U8I@cwN+YNID}&~D#\n");
      Node node2 = Node.newString(103, "fP");
      Node node3 = Node.newNumber((double) 57, 54, 1900);
      node3.addChildToFront(node2);
      node3.isNE();
      node2.isLabelName();
      Node node4 = new Node(42, 55, 124);
      node1.isIf();
      node0.checkTreeEqualsImpl(node3);
      node0.hasOneChild();
      node4.isFor();
      node1.isContinue();
      node0.useSourceInfoFrom(node2);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(88, 88, 88);
      Node node1 = new Node(88, node0, node0, node0);
      node1.setSourceFileForTesting("Object#Element");
      Node node2 = Node.newString("Object#Key");
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      node1.isOptionalArg();
      node2.isScript();
      Node node4 = Node.newString("", 2, 38);
      node0.isVar();
      node1.isAssignAdd();
      node0.hasChild(node3);
      Node node5 = new Node(0, node4, node3, node2, 3786, 15);
      Node.newString(48, "string");
      node4.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Node node0 = Node.newString("8T.YJm,<\"B>9`Xu?Ey,g");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(30, node0, 30, 57);
      node0.isSwitch();
      Node node2 = Node.newNumber((-893.691));
      node2.removeProp((-1));
      Node node3 = Node.newNumber(5065.23013, 152, 6);
      Node node4 = new Node(303, node3, 1220, 4);
      node2.addChildToFront(node4);
      node3.isObjectLit();
      node2.isNew();
      node3.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node((-1025), 120, (-1025));
      node0.isFromExterns();
      Node node1 = Node.newNumber((-1.0));
      node0.isGetProp();
      Node node2 = new Node(3553, node1, node1, node1);
      node2.isExprResult();
      node1.isNull();
      node0.setString("com.google.javascript.rhino.Node$AncestorIterable$1");
      double double0 = 1026.89938211;
      node0.setDouble(double0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "nZKb!yt");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString(32, "STRING U8I@cwN+YNID}&~D#\n", 39, 153);
      node0.getString();
      node0.getSideEffectFlags();
      Node.newString("nZKb!yt", 898, 4095);
      node0.setString("STRING U8I@cwN+YNID}&~D#\n");
      node0.isRegExp();
      node0.cloneTree();
      Node node1 = node0.getChildAtIndex(31);
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      String string0 = "REGEXP_TYPE";
      Node node1 = Node.newString(165, "REGEXP_TYPE");
      node1.isVarArgs();
      Node node2 = Node.newString(8, "({");
      Node node3 = new Node(50, node0, node1, node0, node1);
      node2.addChildAfter(node0, node3);
      node2.addChildToFront(node1);
      node1.isNE();
      // Undeclared exception!
      try { 
        node0.addSuppression(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "STRING U8I@cwN+YNID}&~D#\n");
      Node node0 = new Node(88, (-3485), (-3485));
      Node node1 = new Node(37, node0, node0, node0, node0, 15, 49);
      Node node2 = new Node(88, node1, node1, node1, 43, 172);
      node1.mayMutateArguments();
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      Node node4 = Node.newString(51, "Object#Key");
      Node node5 = new Node(1067, node4, node2, node2, node1);
      node5.mayMutateArguments();
      int int0 = 412;
      Node node6 = new Node(node3.DIRECT_EVAL, node0, node5, node5, int0, node2.COLUMN_BITS);
      node4.getJsDocBuilderForNode();
      node4.isFalse();
      node4.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = new Node(15, node0);
      node0.isOnlyModifiesArgumentsCall();
      node1.isDebugger();
      Node node2 = Node.newNumber((-3568.049798539505), 43, 4);
      Node node3 = new Node(1593, node1, node2, 2650, 57);
      Node node4 = node1.srcref(node2);
      node2.cloneTree();
      node0.isExprResult();
      node2.isEquivalentToTyped(node4);
      Node.mergeLineCharNo(154, 1);
      node1.isInstanceOf();
      node3.isFalse();
      node1.setDouble(0.5);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Node.mergeLineCharNo(1319, 4292);
      Node node0 = Node.newNumber(1288.055935559738, 4292, 5406719);
      node0.removeChildren();
      node0.getSideEffectFlags();
      node0.wasEmptyNode();
      Node.mergeLineCharNo(0, 37);
      node0.useSourceInfoFrom((Node) null);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Node node0 = new Node(9, 0, 9);
      node0.hasChild(node0);
      Node node1 = new Node(0, 0, 42);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      int int0 = Node.REFLECTED_OBJECT;
      node1.isAnd();
      node2.mayMutateGlobalStateOrThrow();
      node1.addChildrenToFront(node2);
      Node node3 = new Node(92, 55, (-2733));
      node0.isIf();
      node0.checkTreeEqualsImpl(node1);
      node3.isQuotedString();
      node2.checkTreeEquals(node3);
      node3.isEmpty();
      node2.getBooleanProp(672);
      node1.getNext();
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Node node0 = Node.newString("", 40, 40);
      Node node1 = new Node(40, node0, node0);
      node1.detachChildren();
      node0.isThrow();
      int int0 = Node.FLAG_GLOBAL_STATE_UNMODIFIED;
      node1.isGetProp();
      int int1 = Node.REFLECTED_OBJECT;
      node1.isAnd();
      node1.mayMutateGlobalStateOrThrow();
      node0.detachChildren();
      Node node2 = new Node((-2541), 38, 14);
      Node node3 = Node.newString(39, "");
      node3.isIf();
      node0.checkTreeEqualsImpl(node1);
      node0.isQuotedString();
      node1.checkTreeEquals(node3);
      node1.isEmpty();
      node3.isContinue();
      node0.isCast();
      node3.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Node node0 = new Node(46, 46, 46);
      Node node1 = new Node(15, node0);
      node1.isEquivalentToShallow(node1);
      node0.isOptionalArg();
      node1.isDebugger();
      node1.isEquivalentTo(node0);
      node1.getIndexOfChild(node1);
      Node node2 = Node.newNumber((-1000.0), 53, 47);
      node1.isReturn();
      Node node3 = node0.useSourceInfoFrom(node2);
      Node node4 = new Node(32, node3, node2, node3, node2);
      node1.isDo();
      // Undeclared exception!
      try { 
        node1.isArrayLit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(103, 103, 103);
      node0.isIf();
      node0.addSuppression(",*Xaxg;4q*u1f@aP");
      node0.checkTreeEqualsImpl(node0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.getDouble();
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Node.newNumber((double) 46);
      Node.newString(46, "STRING U8I@cwN+YNID}&~D#\n");
      Node node0 = Node.newString(103, "fP");
      Node node1 = Node.newNumber((double) 57, 54, 1900);
      node1.addChildToFront(node0);
      node1.isNE();
      node0.isLabelName();
      node0.addSuppression(".pp~D[Q=+");
      node1.addSuppression((String) null);
      Node node2 = Node.newString("p", (-943), 2);
      node1.setString("U2U_CONSTRUCTOR_TYPE");
      node2.isRegExp();
      node0.cloneTree();
      int int0 = (-206);
      Node node3 = node2.getChildAtIndex(int0);
      node3.isAdd();
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Node node0 = Node.newString("", 40, 40);
      Node node1 = new Node(40, node0, node0);
      node1.detachChildren();
      node1.isInc();
      int int0 = Node.FLAG_GLOBAL_STATE_UNMODIFIED;
      node1.isGetProp();
      int int1 = Node.REFLECTED_OBJECT;
      node1.isAnd();
      node1.mayMutateGlobalStateOrThrow();
      node0.detachChildren();
      Node node2 = new Node((-2541), 38, 14);
      node1.toString();
      node2.isNew();
      Node.mergeLineCharNo(4095, 4095);
      node0.isInstanceOf();
      node1.isFalse();
      Object object0 = new Object();
      node1.isThrow();
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Node node0 = Node.newString(101, "synthetic");
      node0.isQuotedString();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2394);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags3.clearAllFlags();
      node0.isOptionalArg();
      Node node1 = new Node(50, node0, 4095, 124);
      node1.getChildAtIndex(48);
      node1.children();
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(56, node0, node0, node0, node0);
      node1.detachChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(56);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.detachChildren();
      Node node3 = Node.newString(153, "@");
      node3.isHook();
      node3.isComma();
      Node node4 = Node.newNumber(0.0);
      node0.addChildBefore(node4, (Node) null);
      node0.setDouble(node3.IS_CONSTANT_NAME);
      node2.copyInformationFrom(node0);
      int int0 = 86;
      Node.extractCharno(int0);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Node node0 = Node.newNumber((double) 12288);
      Node node1 = new Node(12288, node0);
      node1.isEquivalentToShallow(node0);
      node0.detachChildren();
      Node node2 = new Node(42, 40, 2804);
      Node node3 = Node.newString(3039, "X)p'jzzZ}1");
      Node node4 = Node.newString(726, "X)p'jzzZ}1");
      Node node5 = new Node(306654252, node2, node4, 2147483645, 305);
      node5.isIf();
      node3.checkTreeEqualsImpl(node2);
      node5.isQuotedString();
      node1.isEmpty();
      node4.isContinue();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Node node0 = Node.newString("U8I@cwN+YNID}&~D#", (-4646), (-4646));
      node0.toStringTree();
      Node node1 = Node.newString("STRING U8I@cwN+YNID}&~D#\n", 12, 122);
      node0.setWasEmptyNode(true);
      Node node2 = Node.newString(29, "STRING U8I@cwN+YNID}&~D#\n");
      node2.setSourceEncodedPosition(300);
      node0.setChangeTime(51);
      node0.isReturn();
      node0.isEquivalentToShallow(node1);
      Node node3 = new Node(46, node1, 43, 103);
      node1.addChildToFront((Node) null);
      node1.isObjectLit();
      node2.isNew();
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Null");
      Node node0 = Node.newString((-602), "Null");
      node0.setVarArgs(false);
      node0.isNoSideEffectsCall();
      node0.isBreak();
      node0.toString();
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newString(165, "REGEXP_TYPE");
      Node node2 = Node.newString(55, "({");
      node2.addChildToFront(node1);
      node1.isNE();
      node1.isLabelName();
      node0.addSuppression("REGEXP_TYPE");
      node1.isAssign();
      node1.mayMutateArguments();
      Node.newString(411, "REGEXP_TYPE");
      node0.getJsDocBuilderForNode();
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object#Element");
      Node node0 = new Node(126, (-3485), (-3485));
      Node node1 = new Node(31, node0, node0, node0, node0);
      Node node2 = Node.newString("Object#Key");
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      node0.isIf();
      node2.checkTreeEqualsImpl(node1);
      node1.setJSDocInfo((JSDocInfo) null);
      node2.isQuotedString();
      node1.isFor();
      node3.isContinue();
      node2.isArrayLit();
      node2.isExprResult();
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      String string0 = "second new child has existing sibling";
      Node node0 = Node.newString("second new child has existing sibling");
      Node node1 = node0.removeFirstChild();
      Node.newString(43, "second new child has existing sibling");
      Node node2 = new Node(2092419964, node0, 8, 49);
      node2.isEquivalentTo((Node) null, false, false, true);
      Node node3 = Node.newString(node1.LAST_PROP, string0);
      node3.addChildrenToFront(node0);
      int int0 = 147;
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isIf();
      node0.checkTreeEqualsImpl(node0);
      Node node1 = Node.newNumber((double) 57, 15, 30);
      Node node2 = new Node(50, node1, node0, node1, (-2318), 8232);
      node0.isQuotedString();
      node1.isEmpty();
      Node node3 = new Node(105);
      Node node4 = new Node(57, node3, node0, node1, node2);
      node4.isContinue();
      int int0 = (-3487);
      Node node5 = new Node(int0, node3, node3);
      node4.isCast();
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node((-4646), node0, node0);
      node1.detachChildren();
      node1.isThrow();
      int int0 = Node.FLAG_GLOBAL_STATE_UNMODIFIED;
      node0.isOptionalArg();
      int int1 = Node.REFLECTED_OBJECT;
      node1.isAnd();
      node0.mayMutateGlobalStateOrThrow();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node2.detachChildren();
      Node node3 = new Node(1444, 0, 113);
      node2.toString();
      node3.isEquivalentToTyped(node2);
      Node.mergeLineCharNo(4, 16);
      node0.isInstanceOf();
      node0.isFalse();
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node3.isOptionalArg();
      node4.getProp(57);
      node3.isBreak();
      node2.isReturn();
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Node node0 = new Node(9, 125, 125);
      Node node1 = new Node(15, (-7), 42);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      int int0 = Node.INPUT_ID;
      node2.isTrue();
      node1.isEquivalentToTyped(node1);
      node0.detachChildren();
      Node node3 = new Node(86, 55, (-2733));
      node0.isIf();
      node0.checkTreeEqualsImpl(node1);
      node1.isVarArgs();
      Node node4 = new Node((-1308), node0, node0);
      node4.isRegExp();
      node1.cloneTree();
      node4.getChildAtIndex((-1842));
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Node node0 = Node.newString("cH:[E1yh`^bNn*=S;7i");
      Node node1 = new Node(12, node0, node0);
      node0.detachChildren();
      int int0 = Node.DIRECT_EVAL;
      node1.isTypeOf();
      node1.isGetElem();
      node0.getString();
      node1.getChildAtIndex((-825));
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Node node0 = new Node(46, 46, 46);
      Node node1 = new Node(15, node0);
      node1.isEquivalentToShallow(node1);
      node0.isOptionalArg();
      node1.isDebugger();
      node1.isIn();
      int int0 = Node.OPT_ARG_NAME;
      Node node2 = Node.newNumber((-1000.0), 53, 47);
      node0.detachFromParent();
      node2.setQuotedString();
      node0.getChangeTime();
      // Undeclared exception!
      try { 
        node1.isScript();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(2958, nodeArray0);
      Node node1 = new Node(2958, node0, node0);
      Node node2 = node0.cloneTree();
      node1.removeChild(node0);
      node1.isExprResult();
      node2.isEquivalentToTyped(node0);
      node0.isIf();
      node0.checkTreeEqualsImpl(node1);
      node0.isQuotedString();
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Node node0 = new Node(9, (-11), (-11));
      Node node1 = new Node(0, (-7), 42);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.isTrue();
      node1.isEquivalentToTyped(node1);
      node0.detachChildren();
      Node node3 = new Node(86, 55, (-2733));
      node0.isIf();
      node0.checkTreeEqualsImpl(node1);
      node3.isQuotedString();
      node3.clonePropsFrom(node1);
      node2.checkTreeEquals(node3);
      node3.isEmpty();
      node2.isContinue();
      node3.setString("Node tree inequality:\nTree1:\nBITOR\n\n\nTree2:\nASSIGN\n\n\nSubtree1: BITOR\n\n\nSubtree2: ASSIGN\n");
      double double0 = 1.0;
      node3.setDouble(double0);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newString(165, "REGEXP_TYPE");
      Node node2 = Node.newString(55, "({");
      node2.addChildToFront(node1);
      node1.isNE();
      node1.isLabelName();
      node0.addSuppression("REGEXP_TYPE");
      node1.isAssign();
      node1.mayMutateArguments();
      Node.newString(411, "REGEXP_TYPE");
      Node.extractCharno((-53));
      node1.isInc();
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Node node0 = Node.newString(101, "synthetic");
      node0.isQuotedString();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2394);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.clearAllFlags();
      node0.isOptionalArg();
      Node node1 = Node.newNumber(1222.4027);
      Node node2 = new Node(49);
      node0.isWhile();
      node1.hasChild(node0);
      node0.getProp(16);
      node2.isThrow();
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(118);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node0 = Node.newString(43, "slash_v");
      Node node1 = Node.newString(113, "com.google.javascript.rhino.Node$IntPropListItem");
      node1.addChildToFront(node0);
      node1.isNE();
      node0.isLabelName();
      node1.addSuppression("com.google.javascript.rhino.Node$AncestorIterable");
      node0.isAssign();
      node1.mayMutateArguments();
      Node.newString(51, "com.google.javascript.rhino.Node$IntPropListItem");
      node0.copyInformationFrom(node1);
      node0.isRegExp();
      node1.getJSDocInfo();
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(3256, 3000, 3256);
      Node node1 = new Node(963, node0, node0, node0);
      Node node2 = Node.newString("Object#Element");
      Node node3 = node2.useSourceInfoIfMissingFrom(node0);
      node3.isIf();
      node1.checkTreeEqualsImpl(node0);
      node0.isQuotedString();
      node1.isFor();
      node1.isContinue();
      node3.isArrayLit();
      node2.isExprResult();
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      node0.isFromExterns();
      Node node1 = Node.newNumber((double) 38);
      node0.isGetProp();
      node1.toStringTree();
      Node node2 = new Node(143, node0, node0, node1);
      node2.isExprResult();
      node1.isEquivalentToTyped(node1);
      Node.mergeLineCharNo(37, 4095);
      node2.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      node0.isFromExterns();
      Node node1 = Node.newNumber((double) 38);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isGetProp();
      Node node2 = new Node(143, node0, node0, node1);
      node1.isIf();
      node2.children();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node1.getJsDocBuilderForNode();
      node0.isSyntheticBlock();
      node1.isWhile();
      node2.isWith();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node2.siblings();
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = new Node(15, node0);
      node0.isOnlyModifiesArgumentsCall();
      node0.isCatch();
      node0.setSourceEncodedPosition(1008);
      Node node2 = node0.srcrefTree(node1);
      node1.setChangeTime(1707);
      node0.isReturn();
      node0.isEquivalentToShallow(node1);
      node0.isAdd();
      node0.getBooleanProp(52);
      node0.setDouble(2);
      node0.siblings();
      node2.getLineno();
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Node node0 = Node.newNumber((double) 46);
      Node node1 = new Node(0, node0, node0);
      Node.newString(103, "fP");
      node1.getString();
      Node node2 = Node.newNumber((double) node0.REFLECTED_OBJECT, node0.SLASH_V, node1.FLAG_NO_THROWS);
      node1.isCatch();
      node2.isStringKey();
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getDouble();
      node0.isEquivalentTo((Node) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        node0.setVarArgs(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Node node0 = new Node(35);
      Node node1 = new Node(15, node0);
      node0.isOnlyModifiesArgumentsCall();
      node0.isCatch();
      Node node2 = Node.newNumber((-3568.049798539505), 43, 4);
      node1.isCase();
      Node node3 = new Node(42, node2);
      node3.isVarArgs();
      node0.isRegExp();
      Node node4 = node0.cloneTree();
      node4.isQuotedString();
      node1.getChildAtIndex(1226);
      node4.isAdd();
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Node node0 = Node.newString("missing prop: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "missing prop: ");
      Node node1 = new Node(37, node0, node0, node0, node0, 47, 4095);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.isOptionalArg();
      node0.isScript();
      node0.isNumber();
      Node node3 = Node.newNumber((double) 56);
      node3.isIf();
      node0.isHook();
      node2.isArrayLit();
      node3.isExprResult();
      node3.getJSDocInfo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node1.setSideEffectFlags(node_SideEffectFlags2);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Node node0 = Node.newString("U8I@cwN+YNID}&~D#", (-4646), (-4646));
      node0.toStringTree();
      Node node1 = Node.newString("STRING U8I@cwN+YNID}&~D#\n", 12, 122);
      node0.setWasEmptyNode(true);
      Node node2 = Node.newString(29, "STRING U8I@cwN+YNID}&~D#\n");
      node2.setSourceEncodedPosition(300);
      node0.setChangeTime(51);
      node0.isReturn();
      node0.isEquivalentToShallow(node1);
      Node node3 = new Node(30, node0, node1, node1, node2);
      node2.isDo();
      node0.isArrayLit();
      Node.newString("STRING U8I@cwN+YNID}&~D#\n", 132, 30);
      node1.isWhile();
      node2.isSyntheticBlock();
      node2.getLineno();
      node3.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Node node0 = new Node(103);
      node0.setSourceFileForTesting("com.google.javascript.rhino.Node$AncestorIterable$1");
      node0.isVoid();
      Node node1 = new Node(12, node0, node0, 43, 0);
      node0.checkTreeEqualsImpl(node1);
      node0.checkTreeEquals(node1);
      node0.isEmpty();
      node0.isContinue();
      node1.isNull();
      Node.mergeLineCharNo(4095, 32);
      Node node2 = Node.newString("j", 46, 8);
      node2.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Node node0 = new Node(103);
      node0.setSourceFileForTesting("com.google.javascript.rhino.Node$AncestorIterable$1");
      node0.isVoid();
      Node node1 = new Node(48, 108, 472);
      node0.isAssignAdd();
      node0.checkTreeEqualsImpl(node1);
      node0.isEmpty();
      node0.checkTreeEquals(node1);
      node0.isEmpty();
      node0.isContinue();
      int int0 = (-192);
      // Undeclared exception!
      try { 
        Node.mergeLineCharNo(node0.FLAG_GLOBAL_STATE_UNMODIFIED, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 48
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Node node0 = new Node(9, 9, 9);
      Node node1 = new Node(15, (-7), 42);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      int int0 = Node.INPUT_ID;
      node2.isTrue();
      node1.isEquivalentToTyped(node1);
      node0.detachChildren();
      Node node3 = new Node(86, 55, (-2733));
      Node node4 = node3.copyInformationFromForTree(node0);
      node3.isAssignAdd();
      node0.checkTreeEqualsImpl(node1);
      node3.isEmpty();
      node2.checkTreeEquals(node3);
      node3.isEmpty();
      node2.isContinue();
      Node.mergeLineCharNo(40, 48);
      node0.children();
      node0.checkTreeEqualsImpl(node2);
      node2.isNE();
      node4.getNext();
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Node node0 = new Node(9, 9, 9);
      Node node1 = new Node(15, (-7), 42);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      int int0 = Node.SLASH_V;
      node2.isTrue();
      node1.isEquivalentToTyped(node1);
      String string0 = "~,T";
      Node node3 = Node.newString(48, "~,T");
      node2.addChildToFront(node3);
      node3.appendStringTree((Appendable) null);
      node0.isLabelName();
      String string1 = "com.google.javascript.rhino.Node$AncestorIterable";
      // Undeclared exception!
      try { 
        node1.addSuppression(string1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 48
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Node node0 = Node.newString(40, "]VK'.;oCSZF3)", 40, 40);
      node0.detachChildren();
      node0.isHook();
      Node node1 = new Node(43, node0, node0, node0);
      node1.isGetProp();
      node1.checkTreeEqualsImpl(node0);
      node0.isContinue();
      node0.addChildAfter((Node) null, node1);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Node node0 = Node.newString("U8I@cwN+YNID}&~D#", (-4646), (-4646));
      node0.toStringTree();
      Node node1 = Node.newString("STRING U8I@cwN+YNID}&~D#\n", 12, 1645);
      node0.setWasEmptyNode(true);
      Node node2 = Node.newString(29, "STRING U8I@cwN+YNID}&~D#\n");
      node2.setSourceEncodedPosition(317);
      node0.setChangeTime(51);
      node2.isEmpty();
      node0.isEquivalentToShallow(node1);
      node1.isAdd();
      node2.isNull();
      node1.setString((String) null);
      node1.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8A<O@*X/CN_'");
      Node node0 = Node.newString(4096, "8A<O@*X/CN_'", 46, 4096);
      Node node1 = new Node(37);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.setType(130);
      node1.getAncestors();
      InputId inputId0 = new InputId("O(L'(hgg$>JTrZTa-");
      node0.setInputId(inputId0);
      node1.setIsSyntheticBlock(true);
      node0.getIndexOfChild(node1);
      node1.isComma();
      node0.isName();
      Node node2 = Node.newString(143, "8A<O@*X/CN_'");
      Node node3 = node2.clonePropsFrom(node0);
      node3.isOnlyModifiesThisCall();
      node2.toString();
      Node node4 = node1.getLastChild();
      node4.isEquivalentToTyped(node1);
      int int0 = 176143;
      int int1 = 184;
      node2.putIntProp(int0, int1);
      node3.isAdd();
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Node node0 = Node.newString(130, "com.google.common.base.Predicates$ContainsPatternPredicate");
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Node node0 = new Node((-7));
      Node node1 = new Node(56);
      node0.isEquivalentTo(node1, false, true, false);
      node0.setLineno(101);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.getString();
      node1.isExprResult();
      node0.isIn();
      node2.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Node node0 = Node.newString(4096, "8A<O@*X/CN_'", 46, 4096);
      Node node1 = new Node(37);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.setType(29);
      node1.getAncestors();
      InputId inputId0 = new InputId("O(L'(hgg$>JTrZTa-");
      node0.setInputId(inputId0);
      node1.setIsSyntheticBlock(true);
      node0.getIndexOfChild(node1);
      node1.isComma();
      node0.isName();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.isInstanceOf();
      node1.isGetProp();
      node1.getString();
      node0.isLabel();
      int int0 = 33;
      node0.getParent();
      Node.mergeLineCharNo(node1.LENGTH, int0);
      // Undeclared exception!
      try { 
        node2.useSourceInfoFrom(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NEG [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000007] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8A<O@*X/CN_'");
      Node node0 = Node.newString(4096, "8A<O@*X/CN_'", 46, 4096);
      Node node1 = new Node(37);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.setType(130);
      node1.getAncestors();
      InputId inputId0 = new InputId("O(L'(hgg$>JTrZTa-");
      node0.setInputId(inputId0);
      node1.setIsSyntheticBlock(true);
      node0.getIndexOfChild(node1);
      node1.isComma();
      node0.isName();
      node0.useSourceInfoIfMissingFrom(node1);
      node1.isInstanceOf();
      node1.isGetProp();
      node1.getString();
      node0.isLabel();
      int int0 = 105;
      String string0 = "r*yu";
      Node.newString(int0, string0);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      Node node0 = new Node(64, 108, (-1639));
      Node node1 = new Node(55, 4096, 31);
      Node node2 = new Node(16, node0, node1, 52, 12);
      Node node3 = node2.cloneTree();
      node0.isExprResult();
      node1.isExprResult();
      node1.isIf();
      node0.getSourceFileName();
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node2.isQuotedString();
      node3.isUnscopedQualifiedName();
      node3.isAnd();
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-472), (-472), 365);
      node0.isNE();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      Node node1 = new Node(4095, node0, 55, 53);
      node0.isScript();
      node0.isSwitch();
      node1.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8A<O@*X/CN_'");
      Node node0 = Node.newString(4096, "8A<O@*X/CN_'", 46, 4096);
      Node node1 = new Node(329, node0, node0);
      node0.detachChildren();
      node0.isThrow();
      int int0 = Node.FLAG_GLOBAL_STATE_UNMODIFIED;
      Node node2 = new Node(103);
      node1.isOptionalArg();
      int int1 = Node.REFLECTED_OBJECT;
      node1.hasOneChild();
      node1.mayMutateGlobalStateOrThrow();
      node0.detachChildren();
      Node node3 = new Node((-2278), 55, 40);
      node1.toString();
      node1.isEquivalentToTyped(node3);
      int int2 = (-174);
      int int3 = 8287;
      Node.mergeLineCharNo(int2, int3);
      node2.isInstanceOf();
      node2.isFalse();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        node3.isBreak();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 329
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      Node node0 = new Node(64, 108, (-1639));
      Node node1 = new Node(101, node0);
      node0.isEquivalentToShallow(node1);
      node1.isOptionalArg();
      node1.isDebugger();
      node1.isEquivalentTo(node0);
      node1.getIndexOfChild(node0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node0.isOptionalArg();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((JSType[]) null);
      node3.isScript();
      node1.isNumber();
      node1.isIf();
      node0.isHook();
      node2.isArrayLit();
      Node node4 = null;
      try {
        node4 = new Node(node0.JSDOC_INFO_PROP, node3, node0, node0, node3.REFLECTED_OBJECT, node2.FLAG_ARGUMENTS_UNMODIFIED);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      simpleErrorReporter0.error("Object#Element", ":a:FKm)~ydJ#Z", 88, 88);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isLabel();
      Node node1 = node0.cloneTree();
      node1.isWith();
      node0.hasMoreThanOneChild();
      node1.isFalse();
      node1.isNE();
      node1.isSwitch();
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(2249);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.clonePropsFrom(node0);
      // Undeclared exception!
      try { 
        node1.copyInformationFrom(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(113, "B q-h");
      node0.setVarArgs(true);
      node0.isNot();
      node0.isBreak();
      node0.isEquivalentToTyped((Node) null);
      node0.isFor();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Node node0 = new Node(116);
      node0.isIf();
      node0.checkTreeEqualsImpl(node0);
      Node node1 = new Node(32);
      node0.isNE();
      node0.isEmpty();
      node1.useSourceInfoIfMissingFromForTree(node0);
      node1.isNot();
      node1.isCatch();
      node0.isFunction();
      node0.toString();
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      Node node0 = Node.newString(3426, "");
      node0.isFromExterns();
      Node node1 = Node.newNumber(1520.0173642);
      node0.toStringTree();
      int int0 = 1375;
      Node node2 = new Node(int0, node1, node1, node0);
      // Undeclared exception!
      try { 
        node1.isExprResult();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 3426
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      String string0 = "N7XHO[&>(>#g+~M~|T";
      Node node0 = Node.newString((-1862), "N7XHO[&>(>#g+~M~|T", (-1862), (-1862));
      node0.isObjectLit();
      Node node1 = node0.removeFirstChild();
      node0.useSourceInfoFromForTree((Node) null);
      // Undeclared exception!
      try { 
        node1.useSourceInfoFromForTree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      jSTypeArray0[0] = (JSType) objectType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      Node node0 = new Node(64, 108, (-1639));
      Node node1 = new Node(101, node0);
      node0.isSwitch();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
      node_SideEffectFlags0.clearSideEffectFlags();
      node0.clonePropsFrom(node1);
      node_SideEffectFlags0.areAllFlagsSet();
      Node node2 = new Node(39, (-1426), 1047);
      Node node3 = new Node(1373, node2);
      node1.isStringKey();
      Node node4 = Node.newNumber(1.0, 38, (-721));
      node4.getAncestor(47);
      node4.isContinue();
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(2958, nodeArray0);
      Node node1 = new Node(2958, node0, node0);
      Node node2 = node0.cloneTree();
      node1.removeChild(node0);
      node1.isExprResult();
      node2.isEquivalentToTyped(node0);
      node0.isIf();
      node0.checkTreeEqualsImpl(node1);
      node0.isQuotedString();
      node0.isDefaultCase();
      node2.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Node node0 = Node.newString(101, "synthetic");
      node0.isQuotedString();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2394);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags4.clearAllFlags();
      Node node1 = new Node(86, node0);
      node1.isVarArgs();
      node0.isRegExp();
      Node node2 = node1.cloneTree();
      node0.isWith();
      node2.hasMoreThanOneChild();
      node0.isFalse();
      node2.isNE();
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      Node node0 = Node.newString(55, "Null");
      node0.isFromExterns();
      Node node1 = Node.newNumber((double) 38);
      node0.isGetProp();
      Node node2 = new Node(111, node0, node0, node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node2.setJSDocInfo(jSDocInfo0);
      node2.isExprResult();
      node2.isNull();
      node1.setString("Null");
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Node node0 = new Node(88, 88, 88);
      Node node1 = new Node(88, node0, node0, node0);
      node1.isOptionalArg();
      node0.isVar();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isQuotedString();
      Node.newNumber(1311.220287857401);
      Node node2 = node1.getFirstChild();
      Node.newString("j");
      node2.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      Node node0 = new Node(64, 108, (-1639));
      Node node1 = new Node(101, node0);
      node0.isSwitch();
      Node node2 = Node.newNumber((-3644.801));
      node2.removeProp(10);
      node0.isAnd();
      node1.addSuppression("STRING 8I@*cw.+YND}&~D#\n");
      node2.isAssignAdd();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node3 = node1.setJSDocInfo(jSDocInfo0);
      node3.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals(jSTypeRegistry0);
      node0.isParamList();
      Node node1 = new Node((-27), node0, node0, node0, 9, 8);
      node1.getIndexOfChild(node0);
      node0.isComma();
      node1.isName();
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.isInstanceOf();
      node1.isGetProp();
      node1.getString();
      node2.isLabel();
      int int0 = Node.SIDE_EFFECTS_FLAGS_MASK;
      // Undeclared exception!
      try { 
        node0.useSourceInfoFrom(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -27
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(40, node0, node0);
      node1.detachChildren();
      node1.isHook();
      node0.isLabelName();
      node1.copyInformationFromForTree(node0);
      node0.addSuppression("Should not happen\n");
      node0.isIn();
      node0.isIf();
      node0.checkTreeEqualsImpl(node1);
      node1.isQuotedString();
      node1.getChildAtIndex(44);
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      Node node0 = Node.newString("cH:[E1yh`^bNn*=S;7i");
      Node node1 = new Node(12, node0, node0);
      node0.detachChildren();
      node0.isThrow();
      Node node2 = new Node(46, node1, node1);
      node1.addChildToFront(node2);
      node0.isNE();
      node2.isLabelName();
      node2.addSuppression("p$");
      node0.isAssign();
      node1.mayMutateArguments();
      Node.newString(56, "p$");
      node2.getChildCount();
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      Node node0 = new Node(103, 103, 103);
      node0.isIf();
      node0.checkTreeEqualsImpl(node0);
      Node node1 = new Node(50, node0, node0, node0, (-2318), 8232);
      Node node2 = Node.newString(37, "");
      Node node3 = new Node(2287);
      Node node4 = node1.clonePropsFrom(node0);
      node2.isOnlyModifiesThisCall();
      node2.toString();
      node4.getLastChild();
      node0.isEquivalentToTyped(node2);
      node4.putIntProp(108, 941);
      node0.srcrefTree(node2);
      node3.isAdd();
      node3.getString();
      node1.setQuotedString();
      node2.isIf();
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Node node0 = new Node(46);
      node0.isOnlyModifiesArgumentsCall();
      node0.isThrow();
      int int0 = Node.FLAG_GLOBAL_STATE_UNMODIFIED;
      node0.isGetProp();
      Node node1 = new Node(37, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-7));
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node2 = Node.newString("*[y'!]oI*w$PO", (-3242), 50);
      node1.clonePropsFrom(node2);
      node_SideEffectFlags0.areAllFlagsSet();
      Node node3 = new Node(35, 30, 1);
      Node node4 = new Node(53, node0);
      node1.isStringKey();
      int int1 = 54;
      Node node5 = node2.getAncestor(int1);
      node4.isContinue();
      node0.removeProp(node4.INCRDECR_PROP);
      // Undeclared exception!
      try { 
        node5.toStringTree();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      Node node0 = Node.newString(43, "slash_v");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node1 = Node.newString(118, "");
      Node node2 = Node.newNumber((double) 48);
      node2.addChildToFront(node1);
      node1.isNE();
      node0.children();
      node0.isAnd();
      node1.addSuppression("");
      node1.isAssignAdd();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node3 = new Node(43, node0, (-541), 39);
      node3.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      Node node0 = new Node((-984), (Node) null, (-984), (-984));
      node0.toString();
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Node node0 = new Node(21, (-1870), 118);
      Node node1 = new Node(2, node0, 4095, 37);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      int int0 = Node.INPUT_ID;
      node2.isEquivalentToTyped(node1);
      node1.detachChildren();
      node0.isDec();
      node2.putIntProp(15, 29);
      Node node3 = new Node(29, node2, node0, node0, 57, (-240));
      Node.newString(51, "b$IuV M}3v");
      node1.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      Node node0 = new Node(116);
      node0.isIf();
      node0.setWasEmptyNode(false);
      Node node1 = Node.newString(4, "W)");
      node1.setSourceEncodedPosition(117);
      node0.setChangeTime((-2130));
      node1.isReturn();
      node1.isEquivalentToShallow(node0);
      node1.isAdd();
      node1.getBooleanProp(2);
      node1.setDouble(54);
      node1.siblings();
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(3, 3, 57);
      Node node1 = new Node(48, 40, 982);
      int int0 = Node.INPUT_ID;
      node1.isTrue();
      node0.isEquivalentToTyped(node0);
      Node node2 = new Node(51, node0, node0, node0, 12, 2);
      node1.isInstanceOf();
      node0.isSyntheticBlock();
      Node node3 = new Node(982, 2, 38);
      node3.getProp(49);
      node3.getJSDocInfo();
      node1.mayMutateGlobalStateOrThrow();
      node3.addChildAfter(node1, (Node) null);
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      Node node0 = new Node(88, 88, 88);
      node0.isGetterDef();
      Node node1 = new Node(49);
      node1.getBooleanProp(43);
      Node node2 = new Node(16, node0, node0, node1, 8233, 50);
      node2.isTypeOf();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n\nSubtree1: ");
      node1.useSourceInfoFrom(node0);
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      Node node0 = new Node(1374, (-1), 102);
      node0.isGetterDef();
      Node node1 = new Node(36);
      node1.getBooleanProp((-1188));
      Node node2 = new Node(4050, node0, node0, node1, 2, 1636);
      node2.copyInformationFrom(node0);
      node1.isEquivalentTo(node0, true, false, true);
      node2.setSideEffectFlags(37);
      node1.isHook();
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(40, node0, node0);
      node1.detachChildren();
      node1.isHook();
      node1.useSourceInfoIfMissingFrom(node0);
      node1.isEquivalentTo(node0, true, true, true);
      Node.newNumber(107.5684, 37, 37);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = Node.newString("Za");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node2.getBooleanProp((-1397));
      node1.detachChildren();
      node1.isHook();
      node2.isComma();
      node0.isTrue();
      node0.hasMoreThanOneChild();
      node1.isFalse();
      Node node3 = node2.copyInformationFromForTree(node1);
      node1.isNE();
      node2.getChildBefore(node1);
      node3.isAnd();
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      int int0 = 103;
      Node node0 = new Node(103, 103, 103);
      node0.isIf();
      node0.checkTreeEqualsImpl(node0);
      node0.getAncestors();
      node0.hasOneChild();
      node0.isNoSideEffectsCall();
      Node node1 = new Node(101, node0, 40, 103);
      node0.srcref(node1);
      node1.detachFromParent();
      int int1 = 83;
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Node node0 = new Node(88, 88, 88);
      node0.isOptionalArg();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(108);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.clearSideEffectFlags();
      Node node1 = node0.clonePropsFrom((Node) null);
      node_SideEffectFlags0.areAllFlagsSet();
      int int0 = 4366;
      Node node2 = null;
      try {
        node2 = new Node(node1.INFERRED_FUNCTION, node1.SIDE_EFFECTS_ALL, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(40, node0, node0);
      node1.detachChildren();
      int int0 = Node.FLAG_GLOBAL_STATE_UNMODIFIED;
      Node node2 = new Node(30);
      node2.addChildToFront(node0);
      node2.isNE();
      node2.children();
      node2.isAnd();
      node1.addSuppression("");
      node1.isAssignAdd();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node2.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node((-6), (-6), 57);
      Node node1 = new Node(48, 40, 982);
      int int0 = Node.INPUT_ID;
      node1.isTrue();
      node0.isEquivalentToTyped(node0);
      Node node2 = new Node(51, node0, node0, node0, 12, 2);
      node1.isInstanceOf();
      node0.isSyntheticBlock();
      Node node3 = new Node(982, 2, 38);
      node2.useSourceInfoIfMissingFrom(node1);
      node3.isInstanceOf();
      node2.isGetProp();
      node3.getString();
      node0.isLabel();
      int int1 = 154;
      // Undeclared exception!
      try { 
        Node.mergeLineCharNo(int1, node0.FLAG_NO_THROWS);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 982
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      Node node0 = new Node(116);
      node0.isGetterDef();
      node0.getBooleanProp(117);
      Node node1 = new Node((-1354), node0, node0, node0, 309, 93);
      node0.copyInformationFrom(node1);
      node0.isEquivalentTo(node1, false, false, true);
      node0.setSideEffectFlags(148);
      node1.isHook();
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.removeChildAfter((Node) null);
      // Undeclared exception!
      try { 
        node0.isBreak();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(100);
      node0.isWhile();
      node0.isAssignAdd();
      node0.getProp((-1197));
      node0.isFunction();
      Node node1 = new Node(2, node0, node0, node0, 32, 47);
      node1.isReturn();
      node1.isFor();
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      Node node0 = new Node(116);
      Node node1 = new Node(55, 2216, 36);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      int int0 = Node.INPUT_ID;
      node0.isEquivalentToTyped(node2);
      node2.detachChildren();
      node1.isCase();
      node1.putIntProp(57, 155);
      Node node3 = Node.newString(4095, "Nz%NvLHL;6*_u");
      node3.isOptionalArg();
      node3.isName();
      node3.checkTreeEqualsImpl(node2);
      node1.isContinue();
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Node node0 = new Node(118, 118, 118);
      Node node1 = new Node(3143, node0);
      node1.isSwitch();
      Node node2 = Node.newNumber(2664.670284);
      node2.toString();
      node1.removeProp(32);
      node0.getLength();
      Node.newString("^[xqSov sDxfC!Xef", 86, (-2232));
      node0.getChildAtIndex((-130));
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(118);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node0 = Node.newString((-2551), "j");
      Node node1 = Node.newString(54, "j");
      Node node2 = Node.newString("STRING U8I@cwN+YNID}&~D#\n");
      node2.addChildToFront(node1);
      node2.isLabelName();
      node0.addSuppression("");
      node0.isAssign();
      node2.mayMutateArguments();
      Node node3 = new Node(33, (-3767), (-2446));
      node3.copyInformationFrom(node1);
      node3.isThis();
      node1.isGetProp();
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      Node node0 = Node.newString((-63), "STRING 8I@*cw.+YND}&~D#\n");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = Node.newString("STRING U8I@cwN+YNID}&~D#\n", 88, 56);
      node0.getIntProp(48);
      node1.mayMutateArguments();
      Node node2 = Node.newString("mF{<>^v|Q", 50, 29);
      Node node3 = new Node(1327, node0, node1, node0, node2);
      node3.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Node node0 = new Node(46);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-4795));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node(48);
      node0.getIndexOfChild(node1);
      node0.isComma();
      node1.isName();
      node0.useSourceInfoIfMissingFrom(node1);
      Node node2 = new Node(155);
      node2.isInstanceOf();
      node0.isGetProp();
      Node node3 = Node.newString("Object#Element");
      node3.isVarArgs();
      node3.getString();
      node1.isLabel();
      Node.mergeLineCharNo(148, 4);
      node2.useSourceInfoFrom(node0);
      node3.getType();
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Node node0 = Node.newString("cH:[E1yh`^bNn*=S;7i");
      node0.isGetterDef();
      node0.getBooleanProp(117);
      Node node1 = new Node(93, node0, node0, node0, 65536, 49);
      Node node2 = node1.copyInformationFrom(node0);
      boolean boolean0 = node2.isBlock();
      Node node3 = new Node((-221), node2, node1, node0);
      Node node4 = Node.newNumber((double) node1.COLUMN_MASK);
      node4.copyInformationFrom(node1);
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      List<JSType> list0 = null;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParametersWithVarArgs(list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Node node0 = Node.newString("ar3|:");
      Node node1 = new Node(17, node0, node0);
      node1.detachChildren();
      node0.isNull();
      int int0 = Node.FLAG_GLOBAL_STATE_UNMODIFIED;
      node1.isGetProp();
      Node node2 = new Node(4, node1, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1));
      node_SideEffectFlags0.clearSideEffectFlags();
      node2.clonePropsFrom(node0);
      node0.isName();
      node2.isArrayLit();
      Node.newString("\"", 4, 40);
      node1.isWhile();
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node node0 = new Node(147);
      Node node1 = node0.cloneNode();
      node1.isVarArgs();
      node0.isGetElem();
      node0.isGetElem();
      node1.isSwitch();
      node1.isCast();
      node0.getJSDocInfo();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = null;
      Node node2 = Node.newString(165, (String) null);
      node2.wasEmptyNode();
      int int0 = (-2133);
      node2.setLineno(int0);
      // Undeclared exception!
      try { 
        node2.removeChildAfter(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      Node.newNumber((double) 46);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString(46, "STRING U8I@cwN+YNID}&~D#\n");
      Node node1 = Node.newString(103, "fP");
      node0.getString();
      Node node2 = Node.newNumber((double) 57, 54, 8);
      node2.addChildToFront(node1);
      Node node3 = new Node(100, 116, 114);
      Node node4 = new Node(57, node0);
      node1.isStringKey();
      node0.getAncestor(1);
      node1.isContinue();
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      Node.newNumber((double) 46);
      Node node0 = Node.newString(46, "STRING U8I@cwN+YNID}&~D#\n");
      Node node1 = Node.newNumber((double) 57, 54, 8);
      node1.getDirectives();
      node0.getAncestor(0);
      Stack<JSType> stack0 = new Stack<JSType>();
      stack0.iterator();
      node1.isFor();
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.mayMutateArguments();
      int int0 = Node.OPT_ARG_NAME;
      node0.replaceChildAfter((Node) null, (Node) null);
      double double0 = (-2492.5);
      Node node1 = Node.newNumber(double0);
      // Undeclared exception!
      try { 
        node0.getIndexOfChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      Node node0 = Node.newString("cH:[E1yh`^bNn*=S;7i");
      Node node1 = new Node(12, node0, node0);
      node0.detachChildren();
      node1.isFromExterns();
      int int0 = Node.DIRECT_EVAL;
      node1.isNot();
      node0.removeChildAfter(node1);
      // Undeclared exception!
      try { 
        node1.isCatch();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      Node node0 = new Node(141);
      node0.isIf();
      node0.setWasEmptyNode(false);
      Node node1 = Node.newNumber((double) 38, 51, 8);
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(56, nodeArray0);
      node2.isInstanceOf();
      node2.isObjectLit();
      node2.isDec();
      node1.isSwitch();
      node2.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.javascript.rhino.Node$AncestorIterable$1");
      Node node0 = new Node(103);
      Node node1 = new Node(112, 57, 48);
      node1.setChangeTime(39);
      node1.isIf();
      node0.checkTreeEqualsImpl(node1);
      node0.isQuotedString();
      node0.checkTreeEquals(node1);
      node1.addSuppression("com.google.javascript.rhino.Node$AncestorIterable$1");
      node1.isAssign();
      node1.mayMutateArguments();
      Node node2 = Node.newString(42, "STAR");
      Node node3 = node1.copyInformationFrom(node2);
      node2.isEquivalentTo(node0, false, true, false);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node2.isComma();
      Node node4 = Node.newString(53, "STAR");
      node3.srcref(node4);
      node0.toString(true, true, true);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      Node node0 = new Node(141);
      node0.isIf();
      node0.setWasEmptyNode(false);
      Node node1 = Node.newNumber((double) 38, 51, 8);
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(56, nodeArray0);
      node2.isInstanceOf();
      node1.mayMutateArguments();
      Node.newString("1=");
      Node.newString(41, "n-=`Ul7Wo]g~TnMj^;");
      Node node3 = Node.newNumber((double) 30);
      node3.isLabelName();
      node1.isRegExp();
      Node node4 = Node.newNumber(31.0, 16, 2);
      node2.srcrefTree(node4);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      Node node0 = new Node(64, 108, (-1639));
      Node node1 = new Node(101, node0);
      node0.isSwitch();
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isObjectLit();
      node1.isNew();
      Node node2 = new Node(54, node0, node1, node1, 2, 45);
      node0.isSetterDef();
      node2.setDouble(node0.INFERRED_FUNCTION);
      int int0 = (-2245);
      Node node3 = new Node(int0, node2);
      // Undeclared exception!
      try { 
        node1.isGetElem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      Node node0 = new Node(0, 0, 581);
      Node node1 = new Node(281, node0);
      node0.isEquivalentToTyped(node1);
      node1.isEquivalentToShallow(node0);
      node1.isOptionalArg();
      node1.isDebugger();
      node0.isEquivalentTo(node1);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.isEquivalentToTyped(node2);
      node0.isScript();
      node1.isNumber();
      node2.isEmpty();
      node0.isHook();
      node2.isArrayLit();
      node2.isExprResult();
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      Node node1 = Node.newString(1, "com.google.javascript.rhino.Node$IntPropListItem");
      node1.addChildToFront(node0);
      node1.isNE();
      node1.isAnd();
      node1.addSuppression("com.google.javascript.rhino.Node$IntPropListItem");
      node0.isAssignAdd();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Node.newNumber((double) 46);
      Node node0 = Node.newString(46, "STRING U8I@cwN+YNID}&~D#\n");
      Node node1 = Node.newNumber((double) 57, 54, 8);
      node1.addChildToFront(node0);
      node1.getDirectives();
      node0.getAncestor(0);
      Node node2 = new Node(50, node1, node1, node0, 0, 52);
      node2.addChildrenToFront(node1);
      node2.isQuotedString();
      // Undeclared exception!
      try { 
        node0.isUnscopedQualifiedName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.isTry();
      node0.mayMutateArguments();
      Node node1 = new Node(119, node0, node0, (-1681), 49);
      Node node2 = node1.cloneTree();
      node0.isExprResult();
      Node node3 = Node.newString("Zw-hUn_9@~G");
      node3.isEquivalentToTyped(node0);
      node2.isIf();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node3);
      node3.hasOneChild();
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      Node node0 = Node.newNumber((double) 40, 40, 2147483645);
      node0.isVar();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.detachChildren();
      node0.isCase();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      jSTypeArray0[0] = (JSType) objectType0;
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node1.siblings();
      node1.putIntProp((-618), 0);
      node1.isOptionalArg();
      node1.isName();
      node0.isScript();
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      Node node0 = new Node(3000);
      node0.isLabel();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node0.mayMutateGlobalStateOrThrow();
      node0.getQualifiedName();
      node0.isOnlyModifiesThisCall();
      node0.srcrefTree((Node) null);
      node0.isCast();
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.copyInformationFromForTree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(103, 103, 103);
      node0.isCatch();
      node0.isRegExp();
      Node node1 = node0.cloneTree();
      node0.isWith();
      node1.isRegExp();
      node0.isFalse();
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Node node0 = Node.newString(".SXl", 64, 64);
      node0.isVarArgs();
      Node node1 = new Node(31);
      node0.getBooleanProp(2);
      Node node2 = new Node(4095, node1, node1, node0, 47, 46);
      node1.isUnscopedQualifiedName();
      node1.copyInformationFrom(node0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.getDouble();
      node1.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      Node node0 = Node.newString(4096, "8A<O@*X/CN_'", 46, 4096);
      Node node1 = new Node(37);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.setType(130);
      node1.getAncestors();
      InputId inputId0 = new InputId("O(L'(hgg$>JTrZTa-");
      Node node2 = node1.cloneTree();
      node0.isExprResult();
      node1.isEquivalentToTyped(node0);
      node1.isIf();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node2);
      node2.isQuotedString();
      node2.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      Node node0 = Node.newNumber((double) 46);
      Node node1 = Node.newString(46, "STRING U8I@cwN+YNID}&~D#\n");
      Node node2 = new Node(103);
      node0.removeProp(37);
      Node.newString("STRING U8I@cwN+YNID}&~D#\n", 32, (-427));
      Node[] nodeArray0 = new Node[1];
      node1.getProp(30);
      nodeArray0[0] = node1;
      Node node3 = new Node(52, nodeArray0);
      node3.getChildAtIndex(0);
      Node node4 = Node.newString("STRING U8I@cwN+YNID}&~D#\n");
      node4.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      Node node0 = new Node(64, 108, (-1639));
      Node node1 = Node.newString(12, "fP");
      Node node2 = Node.newNumber((double) 50, 29, (-950));
      node1.addChildToFront(node0);
      node0.srcref(node1);
      node2.isFor();
      node0.checkTreeEqualsImpl(node2);
      Node.newNumber((double) 1);
      node0.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "km]{^+zg=Q+iDk5{9");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Node node0 = new Node(103);
      node0.setVarArgs(true);
      node0.isNot();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "b");
      node0.isTrue();
      Node node1 = new Node(2337, node0, node0, node0);
      node0.copyInformationFrom(node1);
      node0.isRegExp();
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node node0 = new Node(147);
      Node node1 = node0.cloneNode();
      node1.isVarArgs();
      node0.isGetElem();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.isSwitch();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2V{6-,6#");
      node1.isTrue();
      Node node2 = new Node(56);
      Node node3 = new Node(38, node0, node1, node2);
      node3.copyInformationFrom(node2);
      node1.isRegExp();
      node1.isParamList();
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      Node node0 = new Node(46, 46, 46);
      Node node1 = new Node(15, node0);
      node1.isEquivalentToShallow(node1);
      node0.isOptionalArg();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.putProp(155, jSDocInfo0);
      node0.isCall();
      Node.newString(40, "ASSIGN_BITXOR");
      node1.getChildBefore(node0);
      Node.extractCharno(48);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node2 = jSTypeRegistry0.createOptionalParameters((JSType[]) null);
      node2.isInc();
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(118);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node0 = Node.newString(43, "slash_v");
      Node node1 = Node.newString(113, "slash_v");
      node1.addChildToFront(node0);
      node0.isFalse();
      node1.addSuppression("com.google.javascript.rhino.Node$AncestorIterable");
      node0.isAssign();
      node1.isAssign();
      node1.mayMutateArguments();
      Node node2 = node1.copyInformationFrom(node0);
      node2.isContinue();
      node2.isGetProp();
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isQualifiedName();
      Node node1 = Node.newString("", 49, 54);
      node1.getQualifiedName();
      node1.getString();
      Node.newNumber((double) 52, 124, 1424);
      node0.isIf();
      node1.checkTreeEqualsImpl(node0);
      node1.isLabel();
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(40, node0, node0);
      node1.detachChildren();
      node1.isHook();
      node1.addSuppression("RGa3:3P.c");
      node0.isAssign();
      node1.mayMutateArguments();
      Node.newString((-2712), "=oS8!Zj");
      Node node2 = node1.copyInformationFrom(node0);
      node1.isRegExp();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node2.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(105, node0, node0, node0, node0);
      node1.checkTreeEquals(node0);
      node1.getIntProp(149);
      node1.addSuppression("JZKT3z45Ozs1S");
      node1.isVar();
      node0.isAssignAdd();
      node1.isCast();
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      Node node0 = Node.newNumber((-24.46274361358921));
      node0.isTry();
      node0.mayMutateArguments();
      Node node1 = new Node(249, node0, node0, 48, 1);
      Node node2 = node1.cloneTree();
      node1.isExprResult();
      node2.isEquivalentToTyped(node2);
      node0.isIf();
      node2.isQuotedString();
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      Node node0 = Node.newString("cH:[E1yh`^bNn*=S;7i");
      node0.isIf();
      node0.checkTreeTypeAwareEqualsImpl((Node) null);
      int int0 = (-84);
      Node node1 = null;
      try {
        node1 = new Node(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      Node node0 = new Node(70, 70, 70);
      Node node1 = new Node(70, node0, node0, node0);
      node1.removeChild(node0);
      node1.setLineno(46);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node0.isCatch();
      Node node3 = new Node((-109), node2, node2, node1, node2);
      node3.isArrayLit();
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      Node node0 = Node.newString(57, "U8I@cwN+YNID}&~D#");
      Node node1 = Node.newString(42, "U8I@cwN+YNID}&~D#");
      node1.addChildToFront(node0);
      node0.isTrue();
      node0.isOnlyModifiesArgumentsCall();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'0n*`$8ej=(");
      node0.useSourceInfoFrom(node1);
      node1.isThis();
      node1.setDouble(16);
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      Node node0 = Node.newNumber((-2301.4523048));
      node0.isTry();
      node0.mayMutateArguments();
      Node node1 = new Node(4, node0, node0, 52, 10);
      Node node2 = node1.cloneTree();
      node0.isExprResult();
      node2.isEquivalentToTyped(node1);
      node0.isIf();
      node1.isQuotedString();
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      Node node0 = new Node(116);
      node0.isIf();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      Node node1 = new Node(32);
      node1.isEmpty();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Za");
      node1.isTrue();
      Node node2 = new Node((-27), node1, node0, node1);
      Node node3 = node1.copyInformationFrom(node0);
      node3.getJSDocInfo();
      node0.isRegExp();
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node node0 = new Node(147);
      Node node1 = node0.cloneNode();
      node1.isVarArgs();
      Node node2 = new Node(2, node1, node1, node0, 56, 1841);
      node1.isBlock();
      Node node3 = new Node(2, node1, node1, node0);
      double double0 = (-1.0);
      Node.newNumber(double0);
      node1.copyInformationFrom(node3);
      int int0 = 125;
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      Node node0 = Node.newNumber((double) 38);
      Node node1 = new Node(38, node0, node0, node0, node0);
      node0.isNoSideEffectsCall();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.javascript.rhino.Node");
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node1.clonePropsFrom(node0);
      node1.addChildToBack(node2);
      node1.checkTreeEquals(node0);
      String string0 = "C";
      // Undeclared exception!
      try { 
        Node.newString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("i/jt5/ikL$~8|n]*r", (-717), 304);
      node0.toStringTree();
      Node node1 = Node.newString("i/jt5/ikL$~8|n]*r", 1, 2195);
      node1.setWasEmptyNode(true);
      Node node2 = new Node(55, node0, node0, 1571, 47);
      node2.siblings();
      node1.checkTreeEqualsImpl(node2);
      node2.isLabel();
      node2.hasMoreThanOneChild();
      node1.isOr();
      node2.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "km]{^+zg=Q+iDk5{9");
      Node node0 = new Node(103);
      node0.setVarArgs(true);
      node0.isVarArgs();
      node0.isNoSideEffectsCall();
      node0.isBreak();
      node0.isFunction();
      node0.toString();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "km]{^+zg=Q+iDk5{9");
      Node node0 = new Node(103);
      node0.setVarArgs(true);
      node0.isVarArgs();
      node0.isNoSideEffectsCall();
      node0.isBreak();
      node0.isFunction();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(31, node0, node0);
      int int0 = Node.NO_SIDE_EFFECTS;
      Node node2 = new Node((-742), (-6505), 8);
      node1.isCatch();
      node0.isRegExp();
      Node node3 = new Node(30);
      node3.cloneTree();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node4.isWith();
      node1.isCatch();
      node1.isStringKey();
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      Node node0 = new Node(86);
      Node node1 = new Node(63, node0, node0, node0, node0);
      node1.removeFirstChild();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      List<JSType> list0 = null;
      jSTypeRegistry0.createParameters((List<JSType>) null);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[6];
      JSType jSType0 = null;
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isQualifiedName();
      Node node1 = Node.newString("", 49, 54);
      node1.getDirectives();
      Node node2 = node1.getAncestor(0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node4 = new Node(40, node2, node3, node2, 9, (-1182));
      node4.isQuotedString();
      node0.isUnscopedQualifiedName();
      node4.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(118);
      node_SideEffectFlags0.setThrows();
      String string0 = "ARRAY_TYPE";
      Node node0 = Node.newString(118, "ARRAY_TYPE", 118, 118);
      node0.isEmpty();
      node0.isContinue();
      node0.isFunction();
      node0.toString();
      node0.isEmpty();
      node0.addChildrenToFront((Node) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      int int0 = 63;
      // Undeclared exception!
      try { 
        Node.newString(int0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      String string0 = "B q-h";
      Node node0 = Node.newString("", 3426, 217);
      int int0 = 25;
      node0.addChildrenToBack((Node) null);
      node0.removeProp(int0);
      Node node1 = null;
      int int1 = 1650;
      int int2 = 103;
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(100);
      node0.isWhile();
      node0.isDelProp();
      Node node1 = new Node(263, node0, node0, node0, node0, 2, 100);
      node0.isEquivalentToTyped(node1);
      node0.getProp((-1179));
      node0.isFunction();
      node0.isScript();
      node0.isHook();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.copyInformationFrom(node2);
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      Node node0 = new Node(116);
      node0.isContinue();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      Node node1 = new Node(32);
      node1.isEmpty();
      node0.isEmpty();
      node1.addChildrenToFront(node0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node0.isInstanceOf();
      node1.isGetProp();
      node1.getString();
      // Undeclared exception!
      try { 
        node2.isLabel();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // TYPEOF is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-472), (-472), 103);
      node0.isVar();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.detachChildren();
      node0.isCase();
      node0.putIntProp(40, 114);
      node0.isOptionalArg();
      node0.isName();
      Node node1 = Node.newNumber((-1.0), 52, 37);
      node0.copyInformationFrom(node1);
      node0.isRegExp();
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(98, 98, 8287);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((double) 37);
      nodeArray0[1] = node1;
      Node node2 = Node.newString(108, "U8I@cwN+YNID}&~D#");
      nodeArray0[2] = node2;
      Node node3 = new Node(46, nodeArray0, 4095, 8287);
      node3.removeChildAfter(node0);
      node0.removeProp(52);
      node1.setSideEffectFlags(29);
      nodeArray0[0].isFromExterns();
      node1.isContinue();
      node1.addChildAfter(nodeArray0[0], nodeArray0[0]);
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(98, 98, 8287);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((double) 37);
      nodeArray0[1] = node1;
      Node node2 = Node.newString(108, "U8I@cwN+YNID}&~D#");
      nodeArray0[2] = node2;
      Node node3 = new Node(46, nodeArray0, 4095, 8287);
      node3.removeChildAfter(node0);
      node0.removeProp(52);
      node2.addChildrenAfter(node1, node0);
      nodeArray0[1].setSideEffectFlags(node2.JSDOC_INFO_PROP);
      nodeArray0[0].isFromExterns();
      int int0 = 2906;
      Node.mergeLineCharNo(int0, node1.FLAG_LOCAL_RESULTS);
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.getLength();
      node0.isComma();
      vector0.iterator();
      node0.isWith();
      node0.isVar();
      node0.isFor();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      Node node0 = Node.newString(64, "Null");
      node0.isAssignAdd();
      Node node1 = Node.newString("Null");
      node1.putBooleanProp(36, false);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node3 = node2.copyInformationFrom(node0);
      node3.isRegExp();
      node2.isWith();
      node2.isNull();
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      Node node0 = Node.newString("Pl+U-xf&W'D^>p^:");
      Node node1 = new Node(4, node0, (-355), 97);
      node1.cloneNode();
      node0.useSourceInfoIfMissingFrom(node1);
      node0.isVar();
      node0.isOptionalArg();
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      Node node0 = new Node(147);
      Node node1 = node0.cloneNode();
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.checkTreeEquals(node1);
      node0.isDebugger();
      Node.newNumber((double) 31);
      node1.isTypeOf();
      node0.isStringKey();
      node0.getLength();
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      Node node0 = new Node(103);
      Node node1 = new Node(112, 57, 48);
      node1.setChangeTime(37);
      node1.isIf();
      node0.checkTreeEqualsImpl(node1);
      node0.checkTreeEquals(node1);
      node1.isEmpty();
      node1.isContinue();
      node0.isQuotedString();
      Node.mergeLineCharNo((-475), (-723));
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = Node.newString(42, "Za");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-98);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node2 = Node.newNumber((double) 38);
      node0.isTry();
      Node node3 = new Node(12, node2, node2, node2);
      node0.addChildrenAfter(node1, (Node) null);
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      Node node0 = new Node(116);
      node0.isContinue();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      Node node1 = new Node(32);
      node1.isEmpty();
      node1.srcref(node0);
      node0.isEmpty();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node0.isInstanceOf();
      node1.isGetProp();
      node1.getString();
      // Undeclared exception!
      try { 
        node2.isLabel();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // TYPEOF is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(118);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node0 = Node.newString(43, "slash_v");
      Node node1 = Node.newString(113, "slash_v");
      node1.addChildToFront(node0);
      node0.isLabelName();
      node1.addSuppression("com.google.javascript.rhino.Node$AncestorIterable");
      node0.isAssign();
      Node.newString(51, "slash_v");
      Node node2 = new Node(49, 57, 38);
      node0.isRegExp();
      node1.isDefaultCase();
      node2.copyInformationFromForTree(node1);
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      Node node0 = new Node(116);
      node0.isContinue();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      Node node1 = new Node(32);
      Node node2 = new Node(4095);
      node0.cloneNode();
      node1.isVarArgs();
      node1.isGetElem();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.isCast();
      node0.setString("no next sibling.");
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node((-974));
      Node node1 = node0.cloneNode();
      node1.isVarArgs();
      node0.isGetElem();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.isCast();
      node0.setString("%5bZ75bbi17D56 J `_");
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      LinkedList<BooleanType> linkedList0 = new LinkedList<BooleanType>();
      Iterator<BooleanType> iterator0 = linkedList0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isEquivalentTo(node1, true, true, false);
      node0.isCatch();
      node1.isStringKey();
  }
}
