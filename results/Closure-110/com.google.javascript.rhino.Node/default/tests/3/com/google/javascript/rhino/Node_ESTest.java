/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 04 06:50:26 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import com.google.javascript.rhino.jstype.TemplatizedType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.io.CharArrayWriter;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = (-1733);
      Node node0 = Node.newNumber(1.0);
      Node node1 = new Node((-38), node0, node0, 50, 12);
      Node node2 = new Node((-1733), node0, node0, node0, node1, 53, 37);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        node2.setOptionalArg(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = new Node(12);
      Node node1 = new Node(31, node0, node0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node.newString("Object#Key");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node.newNumber((-2674.9409615692925));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(49);
      Node node2 = new Node(16, node0, node0, node1, node0, 8, 56);
      node1.isDo();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = new Node(1659, 1659, 1659);
      node0.addChildrenToBack(node0);
      Node node1 = new Node(55, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.isQualifiedName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node.mergeLineCharNo(115, 115);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = Node.newString(1734, "0JTGOyr?V");
      Node node1 = new Node(1734, node0, node0, 49, 16);
      node1.addChildToFront(node0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = new Node((-339));
      Node node1 = new Node((-339), node0, node0, 53, 46);
      Node node2 = new Node((-339), node1, node1, node1, node0, (-339), 46);
      // Undeclared exception!
      try { 
        node2.mayMutateGlobalStateOrThrow();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 83;
      int int1 = 1716;
      Node[] nodeArray0 = new Node[8];
      Node node0 = Node.newString(0, "v*$TCZ')B>}JW~c7");
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber(488.550575, (-1275), (-1));
      Node node2 = new Node(2369, node0, node1, 54, 77);
      nodeArray0[1] = node2;
      String string0 = null;
      Node node3 = Node.newString((-881), (String) null);
      nodeArray0[2] = node3;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
      JSType[] jSTypeArray0 = new JSType[6];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.getGreatestSubtypeWithProperty(jSType0, jSType0.NOT_A_TYPE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node.newNumber(1.0, 16, (-1763));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = Node.newString("", (-101), (-101));
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node(892, 892, 892);
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = Node.newString((String) null);
      // Undeclared exception!
      try { 
        node0.getQualifiedName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node.newString((-346), ".");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newNumber((double) 0, 0, (-4217));
      Node node1 = new Node((-357), node0, node0);
      Node node2 = Node.newString("Object#Element", (-798), 1165);
      Node node3 = new Node(0, node0, node1, node2, node1);
      JSType jSType0 = node3.getJSType();
      String string0 = "r$~w@lu*WmV!";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node0, jSType0);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = (JSType) enumType0;
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) enumType0, jSTypeArray0[0], (JSType) enumType0);
      // Undeclared exception!
      try { 
        immutableList0.subList(node3.FLAG_THIS_UNMODIFIED, node1.IS_CONSTANT_NAME);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 153;
      Node.newString(153, (String) null);
      // Undeclared exception!
      try { 
        Node.newNumber((double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node(153, (-1769), (-1715));
      Node node1 = new Node(54, node0, 48, 55);
      node0.isCatch();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)63;
      byteArray0[4] = (byte)105;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.areAllFlagsSet();
      node1.getJsDocBuilderForNode();
      Node node2 = new Node(159, node1, node0);
      node2.isSwitch();
      node2.isFalse();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 1805;
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node((-1186));
      nodeArray0[0] = node0;
      Node node1 = new Node(4095, node0);
      nodeArray0[1] = node1;
      Node node2 = new Node((-491), node0, node1);
      nodeArray0[2] = node2;
      int int1 = 0;
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node((-3970), 0, 0);
      Node node1 = new Node(4095, node0, 57, 16);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node(90, 90, 90);
      node0.setChangeTime(90);
      node0.isGetElem();
      Node node1 = new Node(52, node0, 2, 4095);
      Node node2 = new Node(0, node0, node0, 29, (-2645));
      node1.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = new Node(1669);
      Node node1 = new Node(1669, node0, node0, node0, node0, (-3297), 50);
      int int0 = 1324;
      Node node2 = new Node(0, node0);
      node0.addChildrenToBack(node2);
      Node node3 = new Node(node0.FLAG_LOCAL_RESULTS, node1, node0, node1, node1, int0, node0.FLAG_LOCAL_RESULTS);
      // Undeclared exception!
      try { 
        node3.getBooleanProp(node1.SLASH_V);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = new Node(93, 2871, 93);
      Node node1 = new Node(15, node0);
      node1.checkTreeEqualsImpl(node1);
      node0.isBlock();
      Node node2 = new Node(56, node1, node0);
      node2.isUnscopedQualifiedName();
      // Undeclared exception!
      try { 
        node0.isBreak();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1209), (-1209));
      node0.setCharno(125);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newString("nm~");
      node0.setDouble((-191.43229949));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node(306, 306, 306);
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(8199);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = new Node(99, 99, 99);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(49);
      node0.setLineno(2516);
      node0.getStaticSourceFile();
      node0.isNE();
      Node node1 = new Node(38, node0, node0, node0, node0, 32, 48);
      node1.useSourceInfoIfMissingFrom(node0);
      node0.getChildBefore(node1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString(" [", (-1797), 0);
      nodeArray0[0] = node0;
      Node node1 = Node.newString(0, "");
      nodeArray0[1] = node1;
      Node node2 = new Node(0, nodeArray0, 54, 54);
      node2.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node(105);
      Node[] nodeArray0 = new Node[1];
      Node node1 = new Node(36, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newString(0, "%VvWz?VOOgDbGY38N~", 0, 0);
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newString("^>XFrQmeSgDp[}'sLN/");
      Node node1 = new Node(40, node0, node0, node0);
      node1.isTrue();
      node1.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newNumber(1799.2072979012);
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = new Node(105);
      Node node1 = new Node(57, node0, node0, node0, node0);
      node0.isEquivalentToShallow(node1);
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newString("nm~");
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals("nm~");
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("[ArrowType]");
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(42, nodeArray0, 303, 42);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      Node node1 = new Node(46, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = new Node(34, 2239, 109);
      Node node1 = new Node(32, node0);
      node0.isFromExterns();
      node1.isCatch();
      Node node2 = node1.cloneTree();
      node2.checkTreeTypeAwareEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
      int int0 = Node.DECR_FLAG;
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newString(126, "(D");
      Node node1 = new Node(126, node0, 4095, 49);
      node1.isEmpty();
      node0.addChildToFront(node1);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      node_NodeMismatch0.equals(node0);
      Node.extractCharno(47);
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = new Node(105);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(46, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newString("F=23.}p", (-2044), 0);
      node0.getInputId();
      Node node1 = new Node((-2044), node0, node0);
      node1.getExistingIntProp(85);
      node1.detachChildren();
      String string0 = "uUMC3ZZg$X}f4pD~u)";
      node1.addSuppression(string0);
      // Undeclared exception!
      try { 
        node0.isVarArgs();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 85
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = new Node((-181));
      node0.getExistingIntProp((-181));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 1831, 1831);
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = new Node(1336);
      node0.isFromExterns();
      node0.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newString(262144, "W`.Pr!etN&%}*O{7", 262144, 0);
      node0.isTypeOf();
      String string0 = node0.getSourceFileName();
      node0.putBooleanProp(262144, true);
      node0.isContinue();
      node0.isString();
      int int0 = (-2111);
      int int1 = 127;
      MockFileWriter mockFileWriter0 = new MockFileWriter((String) null);
      node0.appendStringTree(mockFileWriter0);
      Node node1 = Node.newString(string0, int0, int1);
      node0.addChildAfter(node1, node1);
      JSDocInfo jSDocInfo0 = null;
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = new Node((-1585), (-1585), 151609);
      node0.putIntProp(151609, (-1585));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.hasChildren();
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = new Node(129);
      node0.getSourceFileName();
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isContinue();
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newString("h=hfX%{wlRCN");
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      InputId[] inputIdArray0 = new InputId[8];
      inputIdArray0[0] = null;
      inputIdArray0[1] = null;
      inputIdArray0[2] = null;
      inputIdArray0[3] = null;
      inputIdArray0[4] = null;
      inputIdArray0[5] = null;
      inputIdArray0[6] = null;
      inputIdArray0[7] = null;
      ImmutableList.of((InputId) null, (InputId) null, (InputId) null, (InputId) null, (InputId) null, (InputId) null, (InputId) null, (InputId) null, (InputId) null, (InputId) null, (InputId) null, (InputId) null, inputIdArray0);
      int int1 = 0;
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node(132, 132, 85);
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(57, node0, node0, 32, 108);
      node1.addChildToBack(node0);
      node0.isUnscopedQualifiedName();
      // Undeclared exception!
      try { 
        node0.isNoSideEffectsCall();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newNumber((-3551.10704), 46, 46);
      node0.isBreak();
      node0.isAssignAdd();
      node0.isAssignAdd();
      Node node1 = new Node(32, node0);
      node1.setLength((-581));
      Node node2 = node0.detachFromParent();
      node2.putIntProp(8, 29);
      Node.newNumber(1608.15401163, 54, 51);
      Node.newNumber((-1.0), 2189, (-691));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isBreak();
      node0.getIntProp(115);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = new Node(155, (Node) null, (Node) null);
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(115);
      node0.setWasEmptyNode(true);
      node0.getProp(16);
      node0.isLocalResultCall();
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 1901;
      Node node0 = Node.newNumber((-1256.74));
      int int1 = 0;
      node0.setWasEmptyNode(true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node1 = jSTypeRegistry0.createOptionalParameters((JSType[]) null);
      node0.useSourceInfoIfMissingFromForTree(node1);
      int int2 = (-106);
      Node node2 = new Node(int0, node0, node0, node0, node0, int1, int2);
      // Undeclared exception!
      try { 
        node2.isAdd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      int int0 = (-778);
      int int1 = 0;
      int int2 = 0;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(0, (Node) null, (Node) null, (-778), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesArguments();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesArguments();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getAssociatedNode();
      Node node0 = new Node(148, (Node) null, (Node) null, (-3087), 0);
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.setLineno((-176));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newString("6Ud", 309, 309);
      node0.setLineno(309);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newString("Z4T0gmHj5& r6");
      node0.getQualifiedName();
      node0.setLineno((-672));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString(1247, " (");
      Node node1 = null;
      node0.setType(1247);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl((Node) null);
      node_NodeMismatch0.equals(node1);
      String string0 = "UEIHeFovy1_";
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = new Node(115);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32);
      node0.setType(54);
      node0.isParamList();
      node0.getBooleanProp(31);
      node0.isFor();
      node0.isVar();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = Node.newString("F=23.}p");
      node0.checkTreeTypeAwareEqualsImpl((Node) null);
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node(682, (Node[]) null, 0, 682);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = Node.newString((-462), "Pp:4sH&on~LnO-Szn", 12, 38);
      node0.mayMutateArguments();
      node0.getSourceFileName();
      node0.putBooleanProp((-463), false);
      Node node1 = new Node(40, node0);
      node0.children();
      Node node2 = new Node((-434), node1, node1, node1, node0);
      node2.isBreak();
      node1.isTypeOf();
      node1.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newNumber(2136.522340147, 118, 118);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      Node node1 = new Node((-2346), node0, node0, 30, (-1797));
      nodeArray0[6] = node1;
      Node node2 = new Node(697, nodeArray0);
      node0.addChildBefore(node2, nodeArray0[4]);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 1637;
      Node node0 = Node.newNumber((-706.7196934329461), 31, 1637);
      node0.isQuotedString();
      node0.isUnscopedQualifiedName();
      node0.isNoSideEffectsCall();
      Node node1 = Node.newString((-542), (String) null);
      node1.isOptionalArg();
      node0.addChildrenAfter(node1, node1);
      node0.isVarArgs();
      // Undeclared exception!
      try { 
        node0.isWith();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newString(60, "");
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("{'>,&V4%\" )7;");
      node0.isNoSideEffectsCall();
      node0.getSideEffectFlags();
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isBreak();
      node0.isQuotedString();
      int int0 = Node.INFERRED_FUNCTION;
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Node node0 = Node.newString(38, "}u&5b");
      node0.getQualifiedName();
      node0.isDec();
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 1331;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(1331, (Node) null, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = new Node((-742), (Node) null, (Node) null, (Node) null);
      node0.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags2.clearAllFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplatizedType((JSType) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", (Node) null, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      Node node0 = enumElementType0.getPropertyNode(enumType1.UNKNOWN_NAME);
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.getIntProp(115);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(50);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node0.setSideEffectFlags(node_SideEffectFlags2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString("input_id");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node0.setSideEffectFlags(node_SideEffectFlags1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1074, nodeArray0, 1085, 4768);
      Node node1 = new Node(1074, node0, 0, 54);
      int int0 = (-93);
      node1.setString("side_effect_flags");
      String string0 = "incrdecr";
      node1.setSourceFileForTesting(string0);
      boolean boolean0 = true;
      node0.putBooleanProp(int0, boolean0);
      // Undeclared exception!
      try { 
        node0.removeChildren();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1074
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = (-181);
      Node node0 = new Node((-181));
      node0.setString((String) null);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -181
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(122, nodeArray0);
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = Node.newString("", 387, 8192);
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((double) 718, 718, 718);
      Node node1 = new Node(38, node0, node0, 29, 15);
      nodeArray0[0] = node1;
      Node node2 = new Node(718, nodeArray0, 1476, 37);
      node1.setString("oR&?<b7XDK6");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.detachChildren();
      node0.isOnlyModifiesThisCall();
      node0.setVarArgs(false);
      node0.addSuppression("");
      node0.getProp((-924));
      node0.isThrow();
      node0.isGetProp();
      Node node1 = null;
      Node node2 = node0.useSourceInfoFrom((Node) null);
      node2.isOnlyModifiesArgumentsCall();
      node2.getChangeTime();
      node0.isDelProp();
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newString(27, "xl");
      Node node1 = new Node(2, node0, 53, 53);
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newString("nm~");
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node.newNumber((-18.972056196849515));
      Node node0 = Node.newNumber((double) 40);
      node0.putIntProp(29, 1);
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      Node node1 = new Node(54, node0, node0, node0, 48, 12);
      node1.addSuppression("FOR");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("GLOBALTHIS");
      node0.getJSDocInfo();
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = new Node(12, 12, 0);
      node0.getChildAtIndex(0);
      node0.detachChildren();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = new Node(130, 130, (-8));
      node0.putIntProp(57, 130);
      node0.getStaticSourceFile();
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newString("NH");
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node(306, 306, 306);
      node0.setOptionalArg(false);
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = new Node(1404, 50, 1404);
      node0.isThrow();
      Node node1 = new Node(39, node0);
      node0.isFalse();
      Node node2 = new Node(29, node1, node1, node0, node0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-62);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newNumber(20.303, 868, 868);
      node0.isTry();
      node0.setLineno((byte)90);
      node0.isTypeOf();
      node0.getQualifiedName();
      Node node1 = node0.cloneTree();
      node1.wasEmptyNode();
      node0.setDouble((-701.8958767311024));
      node0.addSuppression("Object#Key");
      node0.addSuppression("Object#Key");
      node0.isQualifiedName();
      node0.getIntProp((byte)116);
      Node node2 = new Node(40, node0, 2092, 15);
      node2.getAncestor(32);
      node0.replaceChild(node2, node2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newNumber(3110.384992);
      node0.hasChildren();
      node0.isOnlyModifiesArgumentsCall();
      node0.setLineno((-1));
      node0.isQualifiedName();
      Node node1 = new Node(313, node0, node0, 113, 1);
      node1.detachChildren();
      node0.addChildrenAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = new Node(115, 115, 131);
      node0.isSetterDef();
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.toStringTree();
      Node node1 = Node.newNumber((double) 53, 8, 39);
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(49, node1, node1, node0, node1, (-2784), 30);
      node2.isThrow();
      node2.isLabel();
      node1.addSuppression("+DvFL$~Y7h0Bnb");
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newNumber(2371.43936433, 1171, 100);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      node0.putProp(1171, locale_FilteringMode0);
      node0.detachChildren();
      node0.isGetterDef();
      node0.isCast();
      Node.extractCharno(30);
      node0.isName();
      node0.isExprResult();
      node0.isName();
      Node node1 = node0.getParent();
      Node node2 = node0.useSourceInfoFrom((Node) null);
      node2.isTry();
      node1.isDec();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newString("Z4T0gmHj5& r6");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.setSideEffectFlags(node_SideEffectFlags0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setMutatesArguments();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[2];
      JSType jSType0 = null;
      JSType.toMaybeFunctionType((JSType) null);
      jSTypeRegistry0.createFunctionTypeWithNewReturnType((FunctionType) null, (JSType) null);
      String string0 = "com.google.common.base.CharMatcher$1";
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(115);
      node0.getAncestors();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable((Node) null);
      node_AncestorIterable0.spliterator();
      node_AncestorIterable0.iterator();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString("M");
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = new Node(56);
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(552);
      node0.isQuotedString();
      node0.isInc();
      node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node(111);
      node0.isCase();
      node0.isOnlyModifiesThisCall();
      node0.isQualifiedName();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node((-583));
      node0.hasChildren();
      Node node1 = Node.newString((String) null);
      node0.replaceChild(node1, node1);
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 304;
      Node node0 = Node.newString(304, "", 304, 304);
      node0.cloneTree();
      node0.isReturn();
      Node node1 = node0.detachFromParent();
      // Undeclared exception!
      try { 
        node1.getJSDocInfo();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newString("fWE+kq+");
      node0.getQualifiedName();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newNumber((-2602.33552131819), 56, 56);
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = node0.detachFromParent();
      // Undeclared exception!
      try { 
        node1.useSourceInfoIfMissingFrom(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      Node node1 = new Node(54, node0, node0, node0, 48, 12);
      node1.addChildAfter(node1, node0);
      node0.isDebugger();
      node1.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 1875;
      String string0 = "com.google.javascript.rhino.Node$AncestorIterable$1";
      Node node0 = Node.newString("com.google.javascript.rhino.Node$AncestorIterable$1", 0, 0);
      Node node1 = new Node(47, node0, node0, node0);
      Node node2 = new Node(34, node1, node1, node0, 47, 37);
      int int1 = 2548;
      Node.newString(int1, string0, node0.JSDOC_INFO_PROP, node0.ORIGINALNAME_PROP);
      Node node3 = null;
      try {
        node3 = new Node(int0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = new Node(104, 2855, 104);
      Node node1 = new Node(15, node0);
      node1.checkTreeEqualsImpl(node1);
      node1.isBlock();
      Node node2 = new Node(46, node1, node1, node0);
      node2.isBreak();
      // Undeclared exception!
      try { 
        node0.isArrayLit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = Node.newString(153, "Node tree inequality:\nTree1:\n");
      Node node1 = new Node(1, node0, node0);
      node0.isEquivalentTo(node1);
      Node node2 = new Node(29, node1, node0, node0, 2, 54);
      node1.addChildAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newString("", (-4030), (-4030));
      node0.setString("call");
      node0.isFromExterns();
      node0.getSourceFileName();
      node0.getProp((-4030));
      node0.setString("PT");
      node0.toString(false, false, false);
      node0.isOptionalArg();
      node0.isLocalResultCall();
      Node.mergeLineCharNo(0, (-1425));
      Node node1 = Node.newNumber((double) (-1));
      node0.copyInformationFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.valueOf();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getSideEffectFlags();
      node0.isWhile();
      Node node1 = new Node(0, node0);
      node0.replaceChild(node1, node1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = new Node(115, 115, 166);
      node0.isNumber();
      node0.setSourceFileForTesting("uJ*{TUe'dUVCY");
      node0.isFromExterns();
      Node node1 = node0.cloneTree();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isQualifiedName();
      node1.getString();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      node0.isSwitch();
      node0.getSideEffectFlags();
      node0.isWhile();
      node0.toString(false, true, false);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node(115);
      node0.mayMutateArguments();
      node0.isSetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node0.isBreak();
      node0.isBreak();
      node0.toString(false, false, false);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = new Node(162, 162, 162);
      node0.isOptionalArg();
      node0.getIntProp(162);
      Node.mergeLineCharNo(16, 32);
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newString((-4018), "l", (-4018), (-4018));
      node0.setString("l");
      node0.isDo();
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node.extractLineno(0);
      Node node0 = new Node(0);
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newString("q2-;a&J]9aV`#.Q");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.setSideEffectFlags(node_SideEffectFlags0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = new Node(1374);
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = new Node(1659, 1659, 1659);
      node0.addChildrenToBack(node0);
      Node node1 = new Node(2, node0);
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFrom(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = new Node((-691), (-691), 0);
      Node node1 = new Node(1500, node0);
      node0.getChildBefore(node1);
      node0.isBlock();
      node0.setChangeTime(node1.IS_NAMESPACE);
      // Undeclared exception!
      try { 
        node0.isDec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = new Node((-691), (-691), 0);
      Node node1 = node0.getChildBefore(node0);
      node1.addChildrenToFront(node0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = null;
      try {
        node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = Node.newString("Object#Element", 132, 132);
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = new Node(56, (-646), 56);
      node0.isDec();
      node0.isSetterDef();
      node0.isNumber();
      node0.setType(0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node0.isQualifiedName();
      node0.isBlock();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isString();
      node_SideEffectFlags2.setMutatesArguments();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = new Node((-181));
      node0.isBlock();
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = new Node(157, 1377, 157);
      node0.isNumber();
      node0.isGetterDef();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newString("F/");
      node0.isDec();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = new Node(8199, 2871, 8199);
      Node node1 = new Node(33, node0);
      node0.checkTreeEqualsImpl(node1);
      node0.isParamList();
      node1.isDec();
      node0.isOnlyModifiesThisCall();
      node1.isQualifiedName();
      node1.isNull();
      node0.isLocalResultCall();
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = Node.newString(38, "}u&5b");
      node0.isQuotedString();
      node0.isQualifiedName();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = new Node(148, 99, 148);
      node0.isSetterDef();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node0.isAnd();
      node0.isAssignAdd();
      node0.isInc();
      Node node1 = new Node(32, node0, node0, node0);
      node0.hasChildren();
      node1.isLabel();
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = null;
      Node node1 = new Node(33, (Node) null);
      // Undeclared exception!
      try { 
        node1.checkTreeTypeAwareEqualsImpl(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      Node node1 = new Node(0, node0);
      node1.getSourceOffset();
      node0.isFromExterns();
      node1.isNoSideEffectsCall();
      node1.isCatch();
      node1.cloneTree();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3873);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = Node.newString(126, "(D");
      Node node1 = new Node(126, node0, 4095, 49);
      Node node2 = node1.cloneTree();
      node2.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = new Node(782, (-1459), 37);
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = Node.newString("cgn@*Y4pL+Tc68Du7");
      node0.isCatch();
      node0.isQualifiedName();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = Node.newString("Zq6\"U Wu-%^bw7qA/K", (-112), (-112));
      node0.getNext();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = Node.newNumber(2116.086862668287);
      Node node1 = Node.newString("input_id", 36, 49);
      node1.checkTreeEqualsImpl(node0);
      node1.isOr();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeProp(12);
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      Node node1 = new Node(54);
      node0.isEquivalentToShallow(node1);
      node0.removeChildren();
      Node node2 = node0.cloneTree();
      node0.replaceChildAfter(node1, node2);
      int int0 = 4500;
      node0.setCharno(int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = new Node(105);
      node0.toStringTree();
      node0.isOnlyModifiesThisCall();
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = new Node(199, 199, 199);
      Node node1 = Node.newNumber((double) 0);
      node0.replaceChildAfter(node1, node1);
      // Undeclared exception!
      try { 
        node1.isName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = new Node(1023, 2305, (-695));
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = new Node(105, 105, 1857);
      node0.isUnscopedQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(47);
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.areAllFlagsSet();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.isTrue();
      node0.isCase();
      node0.isStringKey();
      Node node1 = new Node(115, 0, 52);
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      Node node1 = new Node(0, node0);
      node1.getSourceOffset();
      node1.removeChildren();
      node0.isFromExterns();
      node1.isNoSideEffectsCall();
      node1.isCatch();
      node1.cloneTree();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3873);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isOr();
      node0.isAssignAdd();
      Node node1 = Node.newNumber((double) 48, 171, 2);
      node0.addChildrenToBack(node1);
      node0.addChildrenToFront(node0);
      node0.replaceChildAfter(node0, node0);
      node0.setCharno(node0.JSDOC_INFO_PROP);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = new Node(1669);
      Node node1 = new Node(1669, node0, node0, node0, node0, (-3297), 50);
      node0.addChildrenToBack(node1);
      node0.isExprResult();
      Node node2 = new Node(16, node1, node0, node1, node1, 1324, 16);
      node2.getBooleanProp(node1.SLASH_V);
      node1.addChildAfter(node0, node2);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newString(264, "]ges.RFV<>=");
      Node node1 = new Node((-3344), node0, node0, node0, node0);
      node1.isExprResult();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = new Node(1659);
      node0.addChildrenToBack(node0);
      Node node1 = node0.detachFromParent();
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = new Node(132, 132, 132);
      Node node1 = new Node(1, node0, node0, 1, 16);
      Node node2 = new Node(47, node1);
      node2.isFalse();
      node1.isGetElem();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node(552);
      node0.isInc();
      node0.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.isVoid();
      node0.isOnlyModifiesThisCall();
      node0.isFalse();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[5];
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[7];
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.NUMBER_OBJECT_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSTypeNative jSTypeNative2 = JSTypeNative.BOOLEAN_OBJECT_TYPE;
      jSTypeNativeArray0[2] = jSTypeNative2;
      JSTypeNative jSTypeNative3 = JSTypeNative.VOID_TYPE;
      jSTypeNativeArray0[3] = jSTypeNative3;
      JSTypeNative jSTypeNative4 = JSTypeNative.ERROR_TYPE;
      jSTypeNativeArray0[4] = jSTypeNative4;
      JSTypeNative jSTypeNative5 = JSTypeNative.ARRAY_TYPE;
      jSTypeNativeArray0[5] = jSTypeNative5;
      JSTypeNative jSTypeNative6 = JSTypeNative.REGEXP_TYPE;
      jSTypeNativeArray0[6] = jSTypeNative6;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      jSTypeArray0[0] = jSType0;
      JSType jSType1 = jSTypeRegistry0.createNullableType(jSTypeArray0[0]);
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType1, true, jSTypeArray0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
      jSTypeArray0[1] = (JSType) functionType1;
      int int0 = 2430;
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newString("M", (-4021), (-4021));
      node0.isTrue();
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = Node.newString("F(", 34, 34);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isAdd();
      node0.isDec();
      Node node1 = new Node(43, node0, node0, node0, node0);
      node0.isCall();
      node0.isName();
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = Node.newString(162, "(l", 162, 162);
      node0.setString("(l");
      node0.toStringTree();
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node.newNumber((-1294.56), 4, (-1209));
      Node node0 = Node.newString(599, "\"<e;VJQN", 86, 105);
      node0.setCharno((-1804));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 93, 23);
      node0.isBreak();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node1 = new Node((-1628), nodeArray0, 49, 12);
      node1.isAssignAdd();
      node1.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = new Node(12);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node1 = new Node(1, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = Node.newString("Z4T0gmHj5& r6");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node1 = new Node(54, nodeArray0, 112, 112);
      node1.setSideEffectFlags(node_SideEffectFlags0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = new Node(1669);
      Node node1 = new Node(1669, node0, node0, node0, node0, (-3297), 50);
      node1.isBreak();
      node1.isAssignAdd();
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.setChangeTime(115);
      node0.isGetElem();
      node0.isCall();
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newNumber((-706.7196934329461), 31, 1637);
      node0.isQuotedString();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4008);
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.areAllFlagsSet();
      node0.setChangeTime(4008);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = new Node(1668);
      node0.addChildrenToBack(node0);
      node0.isExprResult();
      Node node1 = node0.removeChildren();
      node0.setCharno(91);
      node1.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      simpleErrorReporter0.warning("Object#Element", "+ck", 4, 4);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.setLineno((-176));
      Node node1 = new Node(52, (-691), 16);
      node0.removeChildAfter(node1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = Node.newString("jm");
      node0.isDo();
      Node node1 = new Node(689);
      node1.removeChildAfter(node0);
      Node node2 = node1.removeChildAfter(node0);
      Node node3 = null;
      try {
        node3 = new Node(node0.DIRECTIVES, node1, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isSetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node0.isAssignAdd();
      Node node1 = new Node(32, node0, node0, 1, 2);
      node1.getBooleanProp((-350));
      node0.addChildrenToFront(node1);
      node0.removeChildAfter(node1);
      node0.cloneNode();
      // Undeclared exception!
      try { 
        node0.isVar();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      int int0 = Node.NO_SIDE_EFFECTS;
      node0.wasEmptyNode();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1074, nodeArray0, 1085, 4768);
      Node node1 = new Node(1074, node0, 0, 54);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative jSTypeNative0 = JSTypeNative.TOP_LEVEL_PROTOTYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getLeastSupertype(enumType0);
      node1.isObjectLit();
      enumElementType0.getRootNode();
      node0.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = new Node(105);
      node0.getSideEffectFlags();
      node0.mayMutateGlobalStateOrThrow();
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newNumber(0.0);
      node0.setString("{R/.4RF6WfS]]8dy");
      String string0 = "V-cq9B~CN3'K[";
      // Undeclared exception!
      try { 
        node0.setSourceFileForTesting(string0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 0.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = Node.newNumber((double) 40);
      node0.isCall();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newString("0eBt<its@^,xX", 2187, 2187);
      Node node1 = new Node(44, node0, node0, node0, node0);
      node1.setString("0eBt<its@^,xX");
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newString(4096, "", 790, (-691));
      node1.isTypeOf();
      node0.getSourceFileName();
      node0.putBooleanProp(56, false);
      Node node2 = new Node(4, node1);
      node2.isContinue();
      node1.isString();
      MockFileWriter mockFileWriter0 = new MockFileWriter("");
      node1.appendStringTree(mockFileWriter0);
      String string0 = "";
      int int0 = 42;
      Node node3 = Node.newString(string0, node0.NO_SIDE_EFFECTS, int0);
      node2.addChildAfter(node0, node3);
      JSDocInfo jSDocInfo0 = null;
      node3.setJSDocInfo(jSDocInfo0);
      // Undeclared exception!
      try { 
        node3.setJSDocInfo(jSDocInfo0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.addChildAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = new Node((-2044), (-2044), 70);
      Node node1 = new Node((-2044), node0, node0);
      node1.addChildrenAfter(node0, node0);
      node1.isTry();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = new Node(1669);
      Node node1 = new Node(1669, node0, node0, node0, node0, (-3297), 50);
      Node node2 = new Node((-4117), node1);
      node1.addChildrenToBack(node0);
      int int0 = 120;
      Node node3 = new Node(node1.SYNTHETIC_BLOCK_PROP, node0, node2);
      int int1 = 881;
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = new Node(132, 132, 132);
      Node node1 = new Node(1, node0, node0, 1, 16);
      node1.isNot();
      node1.checkTreeEqualsImpl(node0);
      node1.addChildrenToBack(node0);
      // Undeclared exception!
      try { 
        node1.setChangeTime(node0.SIDE_EFFECTS_FLAGS_MASK);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = new Node((-691), (-691), 0);
      Node node1 = new Node(1500, node0);
      node1.setDouble((-691));
      node0.getChildBefore(node1);
      node0.isBlock();
      // Undeclared exception!
      try { 
        node0.setChangeTime(node1.IS_NAMESPACE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1500
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = new Node(2842);
      Node node1 = new Node(32, node0, node0, 49, (-655));
      node0.isEquivalentToTyped(node1);
      node0.setDouble(410.9460556423434);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = new Node(1637, 1637, 1637);
      node0.isQuotedString();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node((-3009), node0, node0, 862, 1561);
      node0.addChildToBack(node1);
      node0.isUnscopedQualifiedName();
      node0.isNoSideEffectsCall();
      node0.isVarArgs();
      node0.setSourceEncodedPositionForTree(2212);
      int int0 = Node.OPT_ARG_NAME;
      node0.isDec();
      node0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newString((-1), "");
      Node node1 = new Node(53, node0, node0, node0, 55, 1);
      node1.setSourceEncodedPositionForTree(1402);
      node1.isOnlyModifiesArgumentsCall();
      node0.getIntProp(309);
      Node.mergeLineCharNo(2721, 4);
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newNumber((double) 126);
      Node node1 = new Node(126, node0, node0);
      node1.getJsDocBuilderForNode();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1074, nodeArray0, 1085, 4754);
      Node node1 = new Node(1074, node0, 0, 54);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.isNoSideEffectsCall();
      node0.isVarArgs();
      node1.setSourceEncodedPositionForTree(2179);
      int int0 = Node.OPT_ARG_NAME;
      node0.isBlock();
      node1.getJSDocInfo();
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      Node node1 = new Node(0, node0);
      node1.getSourceOffset();
      node0.isFromExterns();
      node1.isNoSideEffectsCall();
      node1.isCatch();
      node1.cloneTree();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3873);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.mergeLineCharNo((-507), 1754);
      node_SideEffectFlags1.clearSideEffectFlags();
      node1.setLineno(130);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = Node.newNumber((double) 46, 46, 16);
      node0.children();
      node0.isBreak();
      node0.isAssignAdd();
      node0.isAssignAdd();
      Node.newString(48, "0", 15, 47);
      Node.newString("free_call");
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = new Node(38);
      node0.children();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newNumber((-3738.987), 46, 45);
      node0.isBreak();
      node0.isAssignAdd();
      node0.isAssignAdd();
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = new Node(126);
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newNumber(2136.4713, 1174, 1174);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      node0.getChangeTime();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.removeChild(node1);
      double double0 = 2174.0847;
      node0.setDouble(double0);
      node1.removeProp(node0.IS_NAMESPACE);
      String string0 = "yZ;X.Zrn{Jr*~h`'__x";
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = new Node((-3512));
      node0.getChildAtIndex((-3512));
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = new Node(673);
      Node node1 = new Node(2, node0);
      node0.removeChild(node1);
      // Undeclared exception!
      try { 
        node0.isFromExterns();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int int0 = 16777216;
      Node[] nodeArray0 = new Node[9];
      Node node0 = Node.newNumber(5151.7214826);
      Node node1 = new Node(16777216, node0, node0);
      Node node2 = new Node(16777216, node1, (-1802), 39);
      nodeArray0[0] = node2;
      Node node3 = Node.newNumber((double) 0);
      nodeArray0[1] = node3;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      nodeArray0[2] = node4;
      Node node5 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      nodeArray0[3] = node5;
      Node node6 = new Node((-2446), node4, node3, 56, 4095);
      nodeArray0[4] = node6;
      Node node7 = Node.newString("Object#Element");
      nodeArray0[5] = node7;
      Node node8 = new Node(4, node4, node3, node1, 380, 47);
      nodeArray0[6] = node8;
      nodeArray0[4].isNoSideEffectsCall();
      Node node9 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      nodeArray0[7] = node9;
      Node node10 = Node.newString(jSTypeRegistry0.OBJECT_INDEX_TEMPLATE);
      nodeArray0[8] = node10;
      Node node11 = null;
      try {
        node11 = new Node(int0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = new Node(1894);
      node0.addChildrenToBack(node0);
      node0.mayMutateArguments();
      Node node1 = new Node(42, node0, node0, node0, (-2926), 2);
      node1.addChildAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = new Node(115, 115, 140);
      node0.isNumber();
      Node node1 = new Node(29, 53, 29);
      node1.clonePropsFrom(node0);
      node1.isInc();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 142, (-3372));
      Node node1 = new Node(51, node0, node0, node0);
      Node node2 = node0.clonePropsFrom(node1);
      node0.getString();
      node2.useSourceInfoFromForTree(node0);
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 0.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(130, 130, (-464));
      node0.putIntProp(57, 130);
      node0.getStaticSourceFile();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isCatch();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node(37, node0);
      node1.useSourceInfoFromForTree(node0);
      node0.clonePropsFrom(node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node2 = jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node2.isInc();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = new Node(1669);
      node0.addChildrenToBack(node0);
      node0.isExprResult();
      Node node1 = node0.removeChildren();
      node1.isEquivalentTo(node0, false, false, false);
      node0.replaceChildAfter(node1, node0);
      node0.setCharno(node1.FLAG_THIS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = new Node(100);
      node0.isEquivalentTo(node0);
      int int0 = Node.IS_CONSTANT_NAME;
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = new Node(104);
      node0.checkTreeEqualsImpl(node0);
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeProp(12);
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      Node node1 = new Node(54);
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(86, node0, node0, node0, node1, 37, 57);
      node0.getBooleanProp(15);
      node1.addChildAfter(node2, node2);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1518));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.areAllFlagsSet();
      int int0 = 91;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((JSType[]) null);
      Node node1 = new Node(int0, node0);
      int int1 = 32;
      // Undeclared exception!
      try { 
        node1.setChangeTime(int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = new Node(29);
      node0.getDirectives();
      node0.getExistingIntProp(90);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeProp(12);
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      node0.setLineno(12);
      Node node1 = new Node(52, 2, 1);
      node1.getDirectives();
      node0.removeChildAfter(node1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(153, "Node tree inequality:\nTree1:\n");
      Node node1 = Node.newNumber((double) 0);
      node1.addChildrenToFront(node0);
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      simpleErrorReporter0.warning("Object#Element", "+ck", 4, 4);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = new Node((-582));
      node0.isEquivalentToShallow(node1);
      Node node2 = node0.removeChildren();
      Node node3 = node1.cloneTree();
      node3.addChildrenToFront(node0);
      node3.replaceChildAfter(node1, node1);
      node2.setCharno(node0.IS_CONSTANT_NAME);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = new Node(142, 142, (-3372));
      Node node1 = new Node(51, node0, node0, node0);
      Node node2 = node0.clonePropsFrom(node1);
      node0.getString();
      node2.useSourceInfoFromForTree(node0);
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 142
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node node0 = new Node(142, (-1932), 142);
      node0.isScript();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newNumber(718.2321, 45, 130);
      node0.isBreak();
      node0.isAssignAdd();
      node0.isAssignAdd();
      node0.isIf();
      Node.extractLineno((-1990));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = Node.newNumber((-706.7196934329461), 31, 1637);
      node0.isQuotedString();
      node0.isUnscopedQualifiedName();
      Node node1 = Node.newString(39, "String node not created with Node.newString", 1669, 4);
      Node node2 = new Node(52, node1);
      node0.removeProp(1);
      node0.isGetElem();
      String string0 = node1.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      node2.isEquivalentToShallow(node0);
      node1.removeChildren();
      Node node3 = node2.cloneTree();
      node3.setQuotedString();
      int int0 = (-2878);
      Node node4 = Node.newString(int0, string0);
      node1.replaceChildAfter(node4, node2);
      int int1 = 8232;
      node4.setCharno(int1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setQuotedString();
      // Undeclared exception!
      try { 
        node0.isArrayLit();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$AncestorIterable$1", 0, 0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.useSourceInfoFromForTree(node1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node2 = Node.newNumber(0.0, 1108, (-2083));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.isRegExp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node2.setSideEffectFlags(node_SideEffectFlags2);
      node2.isBreak();
      node0.isThrow();
      node1.isLabel();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = new Node(8199);
      node0.hasChild(node0);
      node0.isAssignAdd();
      node0.isIf();
      node0.isRegExp();
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList.copyOf(jSTypeArray0);
      Node node0 = Node.newString("Object#Key", 12, 12);
      node0.removeProp(36);
      node0.isGetElem();
      Node node1 = node0.cloneTree();
      Node node2 = Node.newString("Object#Element");
      node0.checkTreeEqualsImpl(node2);
      Node node3 = new Node(40, node2, node1, node0, 1, 48);
      Node node4 = node3.useSourceInfoFromForTree(node0);
      node4.setStaticSourceFile((StaticSourceFile) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = new Node((-455), (-488), (-488));
      node0.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newString(4096, "", 790, (-691));
      node0.mayMutateArguments();
      node0.getSourceFileName();
      node0.putBooleanProp(56, false);
      Node node2 = new Node(4, node1);
      node2.children();
      node1.isBreak();
      node0.isTypeOf();
      node1.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = new Node(8199, 8199, 8199);
      Node node1 = new Node(33, node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.children();
      node1.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = Node.newString("{(");
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.detachChildren();
      Node node1 = Node.newString("", 1928, 1209);
      Node node2 = Node.newNumber(1555.8717174571061, 47, 36);
      Node node3 = new Node(32, node1, node2, node2);
      Node node4 = Node.newString("", (-2362), (-646));
      Node node5 = Node.newString(56, "com.google.javascript.rhino.Node$AncestorIterable$1", 31, (-1775));
      Node node6 = new Node(36, node0);
      node2.isQuotedString();
      node5.removeProp(12);
      node3.isGetElem();
      node5.toStringTree();
      node6.getLineno();
      node1.toStringTree();
      node2.getSourceOffset();
      node1.isEquivalentToShallow(node4);
      node6.removeChildren();
      node6.cloneTree();
      node1.replaceChildAfter(node5, node5);
      node2.setCharno(node4.MAX_COLUMN_NUMBER);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = new Node(32);
      node0.isParamList();
      node0.isContinue();
      node0.getNext();
      node0.removeChildAfter((Node) null);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = Node.newString("nm~");
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = Node.newString((String) null, 1776, 1531);
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = new Node(1637, 1637, 1637);
      node0.isQuotedString();
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newString(4096, (String) null, 536870912, (-1404));
      node1.checkTreeEquals(node0);
      int int0 = (-3217);
      node1.setCharno(int0);
      node1.getType();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = Node.newString((-171), (String) null, (-171), (-658));
      double double0 = (-1.0);
      node0.setDouble(double0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = Node.newNumber((-1294.56), 4, (-1209));
      int int0 = 599;
      String string0 = "\"<e;VJQN";
      node0.setSideEffectFlags(4);
      int int1 = 86;
      int int2 = 1669;
      String string1 = "";
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = new Node(130, 130, (-464));
      node0.putIntProp(57, 130);
      node0.getStaticSourceFile();
      byte[] byteArray0 = new byte[0];
      node0.setWasEmptyNode(true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isCatch();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node(37, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isEquivalentToShallow(node1);
      node2.setSideEffectFlags(35);
      node0.isSyntheticBlock();
      node0.toStringTree();
      node2.isCall();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = Node.newString(126, "(D");
      node0.mayMutateGlobalStateOrThrow();
      node0.setSideEffectFlags((-2212));
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      int int0 = Node.INFERRED_FUNCTION;
      Node node0 = new Node(55, (Node) null, (Node) null, (Node) null, (Node) null, (-2330), (-2330));
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)63;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byteArray0[4] = (byte) (-127);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString("w_:YBHI`");
      node0.setQuotedString();
      int int0 = 2738;
      Node node1 = new Node(4095, node0, node0, node0, 57, 49);
      node0.replaceChild(node1, node1);
      node0.setSourceEncodedPosition(int0);
      node1.children();
      Node node2 = node0.getNext();
      node2.isTry();
      int int1 = 23;
      node0.removeProp(int1);
      node1.isUnscopedQualifiedName();
      node0.isEmpty();
      // Undeclared exception!
      try { 
        Node.newNumber((double) node0.IS_DISPATCHER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = Node.newString("?*");
      node0.setQuotedString();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = new Node(673);
      Node node1 = new Node(30, node0, node0);
      node1.removeChild(node0);
      int int0 = Node.INFERRED_FUNCTION;
      Node node2 = new Node(55, node1);
      node2.replaceChild(node1, node0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = new Node(130, 130, 0);
      node0.putIntProp(57, 130);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Q,Mt]");
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = new Node(40, 35, 1424);
      node0.isIf();
      node0.setJSType((JSType) null);
      node0.getBooleanProp(0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("");
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = Node.newString("Pip");
      node0.isStringKey();
      node0.isName();
      node0.isCast();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("nz1)a7rmZ1*:*~");
      node_FileLevelJsDocBuilder0.append("prev is not a child of this node.");
      Node.extractCharno(4095);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeProp(12);
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      Node node1 = new Node(54);
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(86, node0, node0, node0, node1, 37, 57);
      node0.getBooleanProp(15);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry1.createParameters(jSTypeArray0);
      node2.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = new Node(1659);
      node0.addChildrenToBack(node0);
      Node node1 = node0.detachFromParent();
      Node node2 = node0.useSourceInfoIfMissingFrom(node0);
      node2.isCall();
      node1.toString(true, true, true);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = new Node((-6));
      node0.getChildAtIndex(25);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node.newNumber(0.0);
      Node node0 = new Node(16, 90, 1);
      node0.getChildAtIndex(16);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = new Node(1637, 1637, 1637);
      node0.isQuotedString();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node((-3009), node0, node0, 862, 1561);
      node0.addChildToBack(node1);
      node0.isUnscopedQualifiedName();
      node0.isNoSideEffectsCall();
      node0.isSwitch();
      Node node2 = Node.newString("d~[");
      node0.isOnlyModifiesThisCall();
      node2.isScript();
      node2.getString();
      node1.wasEmptyNode();
      node0.removeFirstChild();
      node2.getParent();
      node2.setQuotedString();
      node2.cloneTree();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      Node node1 = new Node(54, node0, node0, node0, 48, 12);
      node1.isContinue();
      node1.getJSType();
      node1.removeFirstChild();
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(70);
      node0.getAncestor(153);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = new Node(110, 110, 1225);
      node0.isSwitch();
      node0.getSideEffectFlags();
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = new Node(132, 132, (-615));
      Node node1 = new Node(47, node0);
      node0.isFalse();
      Node node2 = node0.cloneTree();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node2.isScript();
      node2.addChildBefore(node0, node0);
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$AncestorIterable$1", 0, 0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.useSourceInfoFromForTree(node1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node2 = Node.newNumber(0.0, 1108, (-2083));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node2.mayMutateGlobalStateOrThrow();
      node1.isRegExp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node0.isAdd();
      node2.setSideEffectFlags(node_SideEffectFlags2);
      node2.isBreak();
      node0.isThrow();
      node1.isLabel();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isAdd();
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = Node.newString("nm~");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = new Node(31, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString(" [", (-1797), 0);
      nodeArray0[0] = node0;
      node0.getSideEffectFlags();
      Node node1 = new Node(1174, node0, node0, node0);
      node1.setJSType((JSType) null);
      node1.isFromExterns();
      Node node2 = Node.newString(42, " [", 108, 37);
      Node[] nodeArray1 = new Node[1];
      nodeArray1[0] = node0;
      Node node3 = new Node(52, nodeArray1);
      node0.replaceChildAfter(node2, node3);
      node0.getBooleanProp(node1.MAX_COLUMN_NUMBER);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = nodeArray0[0].getJsDocBuilderForNode();
      String string0 = "";
      node_FileLevelJsDocBuilder0.append(string0);
      // Undeclared exception!
      try { 
        node1.removeChildAfter(nodeArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = Node.newString("g<,)-l<$T^VOHOb", (-1682), (-1682));
      Node node1 = new Node((-591), 50, 16);
      node1.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeProp(12);
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Node node1 = new Node(54);
      node0.isEquivalentToShallow(node1);
      int int0 = 86;
      node0.checkTreeEquals(node1);
      Node node2 = new Node(int0, node0, node0, node0, node1, node1.OPT_ARG_NAME, node0.REFLECTED_OBJECT);
      int int1 = 15;
      node0.getBooleanProp(int1);
      node1.addChildAfter(node2, node2);
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeProp(89);
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Node node1 = new Node(83);
      node0.isEquivalentToShallow(node1);
      node0.checkTreeEquals(node1);
      Node node2 = new Node(0, node1, node0, node0, node0, 57, 42);
      node2.getBooleanProp(1364);
      node1.addChildAfter(node2, node2);
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = Node.newString(34, "");
      Node node1 = new Node(34, node0, node0);
      node1.isAdd();
      node0.mayMutateGlobalStateOrThrow();
      node1.isUnscopedQualifiedName();
      node1.addChildToBack(node0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.EVAL_ERROR_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getLeastSupertype(enumType0);
      enumType0.defineElement("Unknown class name", node0);
      int int0 = Node.OPT_ARG_NAME;
      node0.isDec();
      node0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)63;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = Node.newNumber((-116.0), 1108, 153);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isRegExp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      node0.setSideEffectFlags(node_SideEffectFlags2);
      node0.isBreak();
      node0.isThrow();
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)63;
      Node node0 = Node.newString("", 56, (-1894));
      node0.isNoSideEffectsCall();
      Node node1 = Node.newString(113, "2jo.J)0r{E6");
      node0.isOptionalArg();
      Node node2 = new Node(139);
      node1.addChildrenAfter(node2, node0);
      node1.isVarArgs();
      node2.isWith();
      node2.setSourceEncodedPositionForTree(node0.FLAG_GLOBAL_STATE_UNMODIFIED);
      int int0 = 119;
      node1.getIntProp(int0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = new Node(142);
      node0.setSourceEncodedPositionForTree(33);
      node0.children();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = new Node(1637, 1637, 1637);
      node0.isQuotedString();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node((-3009), node0, node0, 862, 1561);
      node0.addChildToBack(node1);
      node0.isUnscopedQualifiedName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.isObjectLit();
      node1.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newNumber(2136.4713, 1174, 1174);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      node0.getChangeTime();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.removeChild(node1);
      double double0 = 2174.0847;
      node0.setDouble(double0);
      node1.removeProp(node0.IS_NAMESPACE);
      String string0 = "yZ;X.Zrn{Jr*~h`'__x";
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = new Node(50, 35, 1424);
      node0.isIf();
      node0.setJSType((JSType) null);
      node0.getBooleanProp(0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = new Node((-691), (-691), 0);
      node0.addSuppression("com.google.common.collect.Sets$ImprovedAbstractSet");
      node0.isVarArgs();
      node0.toString();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node0.JSDOC_INFO_PROP);
      node_SideEffectFlags0.setThrows();
      // Undeclared exception!
      try { 
        node0.removeFirstChild();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -691
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = Node.newString(1734, "0JTGOyr?V");
      Node node1 = new Node(1734, node0, node0, 49, 16);
      node0.toString();
      Node.mergeLineCharNo(node1.POST_FLAG, node0.SYNTHETIC_BLOCK_PROP);
      // Undeclared exception!
      try { 
        node1.isGetterDef();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1734
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString("");
      node0.isFromExterns();
      node0.isNE();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(31, nodeArray0);
      node0.children();
      node1.setDirectives((Set<String>) null);
      node1.getChangeTime();
      Node node2 = node0.getChildBefore(node1);
      String string0 = "";
      int int0 = 2524;
      Node.newString(node2.INCRDECR_PROP, string0, node1.LENGTH, int0);
      node2.setDouble(node1.SIDE_EFFECTS_FLAGS_MASK);
      node2.getSourceOffset();
      // Undeclared exception!
      try { 
        node0.getJsDocBuilderForNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = new Node(1397, (-1320), 111);
      node0.getDirectives();
      node0.setDirectives((Set<String>) null);
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.children();
      node0.isCall();
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = Node.newString(34, "");
      Node node1 = new Node(34, node0, node0);
      node1.isAdd();
      node0.mayMutateGlobalStateOrThrow();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      nodeArray0[3] = node1;
      Node node2 = new Node((-1707), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node((-4953), 39, 4754);
      Node node2 = new Node(4, node1);
      node1.setDouble(0.0);
      Node node3 = node2.getChildBefore(node1);
      node3.isNew();
      int int0 = (-630);
      // Undeclared exception!
      try { 
        node0.setChangeTime(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -4953
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = new Node(38);
      node0.getSourceFileName();
      node0.isWhile();
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeProp(12);
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      Node node1 = new Node(54);
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(86, node0, node0, node0, node1, 37, 57);
      Node.mergeLineCharNo(4, 2605);
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)63;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = Node.newNumber((-116.0), (int) (byte)103, 153);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      node0.setLineno(153);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node.extractCharno(1011);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeProp(12);
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      Node node1 = new Node(54);
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(86, node0, node0, node0, node1, 37, 57);
      node0.isThrow();
      node2.isLabel();
      node2.addSuppression((String) null);
      node2.isEquivalentTo(node0, false, false, false);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = new Node(2060, 2060, 2060);
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = new Node(56, (-646), 56);
      node0.isSetterDef();
      node0.isNumber();
      node0.getDouble();
      int int0 = 0;
      // Undeclared exception!
      try { 
        node0.setType(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 56
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = new Node(76);
      node0.isQualifiedName();
      node0.getBooleanProp(301);
      node0.isCast();
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.isFromExterns();
      node0.isCatch();
      node0.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = new Node(1668);
      node0.addChildrenToBack(node0);
      node0.isExprResult();
      Node node1 = node0.removeChildren();
      node0.isEquivalentToTyped(node1);
      node0.isEquivalentTo(node1, false, false, false);
      node0.replaceChildAfter(node1, node1);
      int int0 = (-1630);
      node0.setCharno(int0);
      // Undeclared exception!
      try { 
        node1.isVarArgs();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      Node node1 = new Node(54, node0, node0, node0, 48, 12);
      node1.isEquivalentToTyped(node0);
      node1.addChildAfter(node1, node0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = new Node(99, 2871, 99);
      Node node1 = new Node(15, node0);
      node1.setLineno(2516);
      node1.siblings();
      node1.isEquivalentTo(node1);
      node1.useSourceInfoIfMissingFrom(node0);
      node0.isSyntheticBlock();
      node1.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = Node.newString("F=23.}p", (-2044), 0);
      node0.getInputId();
      Node node1 = new Node((-2044), node0, node0);
      node1.addChildrenAfter(node0, node0);
      int int0 = 85;
      node1.getExistingIntProp(int0);
      // Undeclared exception!
      try { 
        node1.detachChildren();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      int int0 = (-2024);
      Node node0 = new Node((-2024), (-2024), (-2024));
      node0.isSetterDef();
      node0.isNumber();
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2024
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.detachChildren();
      node0.isOnlyModifiesThisCall();
      node0.setVarArgs(false);
      Node node1 = new Node(32, node0, node0, 8, 4);
      node0.setDouble(4095);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node2 = new Node(32, nodeArray0);
      node1.getChildBefore(node2);
      // Undeclared exception!
      try { 
        nodeArray0[0].isBlock();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = Node.newNumber(0.7);
      node0.setDouble((-1.0));
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = new Node((-691), (-691), 0);
      node0.addSuppression("");
      int int0 = 48;
      node0.getProp(48);
      node0.isThrow();
      node0.isGetProp();
      Node node1 = null;
      node0.useSourceInfoFrom((Node) null);
      node0.isOnlyModifiesArgumentsCall();
      node0.getChangeTime();
      // Undeclared exception!
      try { 
        node0.isDelProp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeProp(12);
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node2 = new Node(38);
      node0.isEquivalentToShallow(node1);
      Node node3 = node1.removeChildren();
      Node node4 = node1.cloneTree();
      node2.addChildrenToFront(node1);
      node2.replaceChildAfter(node1, node0);
      node4.setCharno(node3.LENGTH);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = new Node(115);
      node0.mayMutateArguments();
      node0.getSourceFileName();
      Node node1 = new Node(29, node0, node0, node0, 32, 53);
      node1.replaceChildAfter(node0, node0);
      // Undeclared exception!
      try { 
        node0.isGetterDef();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = new Node(35, 31, 2155);
      Node node1 = new Node(102, node0);
      node0.isFalse();
      node0.isCatch();
      Node node2 = node1.cloneTree();
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node1.isGetElem();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      int int0 = 101;
      Node node0 = new Node(101);
      node0.isSetterDef();
      node0.isSwitch();
      node0.getSideEffectFlags();
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.replaceChildAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newNumber((double) 143);
      Node node1 = new Node((-495), node0, 152, 16);
      node1.addChildrenToFront(node0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeProp(12);
      node0.hasChildren();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      Node node1 = new Node(54);
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(86, node0, node0, node0, node1, 37, 57);
      node0.isThrow();
      node2.addChildrenToFront(node1);
      int int0 = 2151;
      Node node3 = new Node(int0);
      node3.replaceChildAfter(node0, node1);
      // Undeclared exception!
      try { 
        node2.setCharno(node3.DIRECT_EVAL);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList.copyOf(jSTypeArray0);
      Node node0 = Node.newString("Object#Key", 12, 12);
      node0.removeProp(12);
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      Node node1 = new Node(54);
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(62, node0, node0, node0, node1, 37, 57);
      node0.isRegExp();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry1.createParameters(jSTypeArray0);
      node2.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = new Node((-3643));
      Node node1 = new Node(968, node0, 512, (-937));
      Node node2 = new Node(40, node1, node1, node1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node3 = new Node(40, node2, node0, node0, 1275, 753);
      node3.addChildToFront(node0);
      node3.isVoid();
      node3.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.putIntProp(51, (-188));
      node0.isWhile();
      node0.setDouble(29);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = Node.newString("0}k-n\"'oC'");
      node0.getJSDocInfo();
      Node node1 = Node.newNumber((double) 31);
      node0.putIntProp((-617), 57);
      node1.isWhile();
      node0.setDouble(38);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      int int0 = Node.mergeLineCharNo(4, (-1565));
      Node node0 = Node.newNumber(0.0, 12, (-3094));
      node0.type = 12;
      node0.putIntProp(12, 48);
      node0.setLineno(12);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.toString();
      node0.getExistingIntProp(int0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      int int1 = 56;
      Node node1 = new Node(node0.FLAG_ARGUMENTS_UNMODIFIED, node0, node0, int1, node0.COLUMN_BITS);
      int int2 = (-2362);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(34, node0, node0);
      node0.removeProp(15);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType0, templateType0, templateType0, templateType0, templateType0, templateType0, templateType0, templateType0, templateType0, templateType0, templateType0);
      ImmutableList<TemplateType> immutableList1 = immutableList0.asList();
      ImmutableList<JSType> immutableList2 = ImmutableList.of((JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0);
      TemplateTypeMap templateTypeMap0 = jSTypeRegistry0.createTemplateTypeMap(immutableList1, immutableList2);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, templateTypeMap0);
      JSType jSType0 = templateTypeMapReplacer0.caseNoType();
      templateType0.canCastTo(jSType0);
      node1.setJSType(templateType0);
      node1.isAdd();
      node0.isDec();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.mayMutateGlobalStateOrThrow();
      node1.isDo();
      Node.newNumber(3111.8818685, 1, 4095);
      node1.isInc();
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isDo();
      node0.isNull();
      node0.isFalse();
      node0.cloneTree();
      Node node1 = new Node(115, 115, 115);
      node0.addChildBefore(node1, (Node) null);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newString(4096, "", 38, (-691));
      node0.mayMutateArguments();
      node0.getSourceFileName();
      node1.getJSDocInfo();
      node0.setVarArgs(false);
      node0.putBooleanProp(40, false);
      Node node2 = new Node(4, node1);
      node2.children();
      node1.isBreak();
      node0.isTypeOf();
      node1.isAssignAdd();
      node0.isNE();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[4];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, false, jSTypeArray0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(functionType0);
      jSTypeArray0[0] = jSType0;
      JSType jSType1 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSType0, "gvE>g");
      jSTypeArray0[1] = jSType1;
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("dc.F");
      jSTypeArray0[2] = (JSType) templateType0;
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, jSTypeArray0[0], (JSType) null, (JSType) templateType0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType(jSType1, (List<JSType>) immutableList0);
      jSTypeArray0[3] = (JSType) functionType1;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node1.addChildBefore(node2, node3);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.hasChildren();
      node0.setLineno(33);
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = new Node(122);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.getExistingIntProp(122);
      // Undeclared exception!
      try { 
        node0.isHook();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 122
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = new Node((-691), (-691), 0);
      Node node1 = node0.removeChildren();
      node0.isEquivalentToTyped((Node) null);
      node1.hasChild(node1);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isSyntheticBlock();
      Node node1 = Node.newNumber((-2896.012279043066), 154, (-1));
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isEquivalentTo(node1);
      node0.getIntProp((-2219));
      node0.getJSType();
      Node node2 = node1.cloneTree();
      node2.getChildCount();
      node1.useSourceInfoFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.checkTreeEqualsImpl(node0);
      Node node1 = Node.newNumber((double) 40);
      node0.putIntProp(42, 50);
      node1.isWhile();
      node0.setDouble(4095);
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getJSDocInfo();
      Node node1 = Node.newNumber((double) 40);
      node1.isEquivalentTo(node0, true, true, true);
      Node node2 = new Node(983, 30, 56);
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node1.isTry();
      Node.newString((String) null);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = Node.newString("nm~");
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isBlock();
      node0.getLength();
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("-@IA/IBAopOk", 3039, 3039);
      Node node1 = new Node(3039, node0);
      node1.isSetterDef();
      node0.mayMutateArguments();
      node1.getLength();
      node0.isNot();
      node0.getJSType();
      node1.isNot();
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isNot();
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      Node node1 = new Node(54, node0, node0, node0, 48, 12);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.addChildBefore(node0, node0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(54, node0);
      node0.checkTreeEquals(node1);
      node0.isVarArgs();
      // Undeclared exception!
      try { 
        node0.isLabelName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = Node.newNumber((double) 46, 46, 16);
      node0.children();
      node0.hasMoreThanOneChild();
      node0.isAssignAdd();
      node0.isAssignAdd();
      Node node1 = Node.newString(48, "0", 15, 47);
      Node.newString("free_call");
      Node.newNumber(0.0, 47, 47);
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = new Node(16, 16, 0);
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = new Node(101);
      Node node1 = new Node(37, (-2476), 38);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node2 = new Node(32, 46, 57);
      Node node3 = new Node(913, node1, node1, node0, node2);
      Node node4 = new Node(4095, 55, 43);
      node2.children();
      node3.hasMoreThanOneChild();
      node3.isEmpty();
      node2.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = Node.newString("Z4T0gmHj5& r6");
      node0.getDirectives();
      node0.getString();
      node0.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isFor();
      Node node1 = new Node(54, node0, node0, node0, 48, 12);
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = Node.newNumber((double) 46, 46, 27);
      node0.children();
      node0.isBreak();
      node0.isAssignAdd();
      node0.isAssignAdd();
      Node node1 = Node.newString(48, "0", 15, 47);
      Node.newString("free_call");
      node1.isFor();
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node.mergeLineCharNo(4, (-1565));
      Node node0 = Node.newNumber(0.0, 12, (-3094));
      node0.type = 12;
      node0.setLineno(12);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.toString();
      node0.getExistingIntProp((-1));
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      int int0 = 56;
      Node node1 = new Node(node0.FLAG_ARGUMENTS_UNMODIFIED, node0, node0, int0, node0.COLUMN_BITS);
      int int1 = (-2362);
      node1.type = int1;
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = new Node(153, 99, 153);
      node0.isSetterDef();
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node0.isAnd();
      node0.isAssignAdd();
      node0.isDo();
      node0.getChildAtIndex((-1027));
      node0.getLastChild();
      node0.addChildrenToFront((Node) null);
      node0.isParamList();
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      int int0 = 1637;
      Node node0 = Node.newNumber((-706.7196934329461), 31, 1637);
      node0.isQuotedString();
      node0.isUnscopedQualifiedName();
      node0.isNoSideEffectsCall();
      Node node1 = Node.newNumber((double) 56, 2, 40);
      node1.isQuotedString();
      node0.setOptionalArg(false);
      node1.isOptionalArg();
      node0.addChildrenAfter(node1, node1);
      node0.isVarArgs();
      node0.isWith();
      int int1 = 2212;
      // Undeclared exception!
      try { 
        node0.setSourceEncodedPositionForTree(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isIn();
      int int0 = Node.SIDE_EFFECT_FLAGS;
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = new Node(56, (-646), 56);
      node0.isSetterDef();
      node0.isIn();
      node0.getDouble();
      int int0 = 0;
      // Undeclared exception!
      try { 
        node0.setType(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 56
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = new Node(51, 149, (-1031));
      node0.isIn();
      node0.isExprResult();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = Node.newString("prev is not a child of this node.", 4, 57);
      node1.getAncestor(1054);
      node1.getBooleanProp(47);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.getExistingIntProp(153);
      node0.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = Node.newNumber((double) 46, 46, 16);
      node0.children();
      node0.isBreak();
      Node node1 = new Node(29, node0, node0, (-1281), 16);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      Node node3 = node0.srcref(node2);
      node1.setOptionalArg(false);
      node0.isEquivalentToShallow(node1);
      Node node4 = Node.newString("NUMBER_OBJECT_TYPE");
      node1.addChildBefore(node4, node3);
      node1.getJSDocInfo();
      node4.isNumber();
      Node node5 = new Node((-417), 1442, 31);
      node0.cloneNode();
      node5.setLength(77);
      Node node6 = node5.detachFromParent();
      int int0 = (-166);
      node6.putIntProp(node2.INFERRED_FUNCTION, int0);
      int int1 = 3;
      Node.newNumber((double) node1.FLAG_LOCAL_RESULTS, int1, node3.NO_SIDE_EFFECTS);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = new Node(35, 31, 2155);
      Node node1 = new Node(102, node0);
      Node node2 = node1.cloneTree();
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node0.isScript();
      node1.addChildBefore(node2, node0);
      node0.useSourceInfoFrom(node2);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = new Node(993, node0, node0, node0);
      node0.children();
      node1.isDefaultCase();
      node1.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = new Node(159, 112, (-828));
      Node node1 = new Node(52, node0, node0, node0, node0, 55, 55);
      node1.isStringKey();
      node1.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node node0 = Node.newString("g<,)-l<$T^VOHOb");
      node0.setLength(56);
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(54);
      node0.isWhile();
      node0.addSuppression((String) null);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node node0 = Node.newNumber((double) 46, 46, 16);
      MockFileWriter mockFileWriter0 = new MockFileWriter("m$P|*-n_7%Z!6'");
      node0.appendStringTree(mockFileWriter0);
      Node node1 = Node.newString("originalname", (-2571), (-1373));
      node1.addChildAfter(node0, node0);
      JSDocInfo jSDocInfo0 = null;
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      node2.setJSDocInfo(jSDocInfo0);
      node2.isFromExterns();
      node1.copyInformationFromForTree(node2);
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node node0 = new Node(1659);
      node0.addChildrenToBack(node0);
      Node node1 = node0.detachFromParent();
      Node node2 = node0.useSourceInfoIfMissingFrom(node0);
      Node.newNumber((double) 54);
      node2.isCall();
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 8388608, 49);
      node0.children();
      node0.isBreak();
      node0.isAssignAdd();
      node0.isAssignAdd();
      Node.newString(1733, "0", (-1272), 2258);
      Node node1 = Node.newString("free_call");
      Node node2 = Node.newString(37, "0", 46, (-2571));
      node2.isArrayLit();
      node1.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.detachChildren();
      Node node1 = Node.newString("", 1928, 1209);
      Node node2 = Node.newNumber(0.0, 47, 36);
      Node node3 = new Node(32, node1, node2, node2);
      Node node4 = Node.newString("", (-2362), (-646));
      Node node5 = Node.newString(56, "com.google.javascript.rhino.Node$AncestorIterable$1", 31, (-1775));
      Node node6 = new Node(36, node0);
      node2.isQuotedString();
      node6.copyInformationFromForTree(node3);
      node5.removeProp(12);
      node3.isGetElem();
      node5.toStringTree();
      node3.removeFirstChild();
      node6.getLineno();
      node1.toStringTree();
      node2.getSourceOffset();
      node1.isEquivalentToShallow(node4);
      node6.removeChildren();
      node6.cloneTree();
      node1.replaceChildAfter(node5, node5);
      node5.useSourceInfoFromForTree(node3);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      node0.isSwitch();
      node0.getSideEffectFlags();
      node0.isWhile();
      Node node1 = new Node(1016, node0, node0, node0, node0);
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Node node0 = new Node(8199, 8199, 8199);
      Node node1 = new Node(33, node0);
      node0.checkTreeEqualsImpl(node1);
      node1.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      node1.getJsDocBuilderForNode();
      node0.isCall();
      node1.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.NoObjectType", (-312), 545);
      Node node1 = new Node((-312), node0, node0, 4, 103);
      Node node2 = new Node(492, node1, node0, node0, node1, 2604, 1);
      node2.isOr();
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Node node0 = Node.newString("F=23.}p", (-2044), 0);
      node0.getInputId();
      Node node1 = new Node((-2044), node0, node0);
      node1.setType(57);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2044));
      node_SideEffectFlags0.setMutatesArguments();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node1.setJSType((JSType) null);
      node0.isAdd();
      node0.isDec();
      Node node2 = new Node(188432);
      node0.isEquivalentToShallow(node2);
      Node node3 = new Node(53, node2, node0, node1, node0, 29, 47);
      Node.mergeLineCharNo(node2.IS_CONSTANT_NAME, node2.QUOTED_PROP);
      node2.isGetterDef();
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node node0 = Node.newString("nm~");
      node0.isTrue();
      Node node1 = new Node(15, node0, node0, 1937, (-2737));
      node0.addChildBefore(node1, node1);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node node0 = Node.newNumber((double) 46, 46, 16);
      node0.isContinue();
      Node node1 = Node.newNumber((double) 43);
      node1.isString();
      node0.children();
      node1.isBreak();
      node1.isAssignAdd();
      node1.isAssignAdd();
      node0.setChangeTime(0);
      node0.toString();
      Node.mergeLineCharNo(37, (-984));
      node0.isGetterDef();
      node1.addChildBefore(node0, node0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.detachChildren();
      node0.isOnlyModifiesThisCall();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-1I");
      node0.setVarArgs(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      node0.putIntProp((-3113), (-3113));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.areAllFlagsSet();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = null;
      jSTypeRegistry0.createParametersWithVarArgs((JSType[]) null);
      int int0 = 111;
      Node node1 = new Node(int0, node0);
      String string0 = "";
      SimpleErrorReporter.getMessage(string0, jSTypeArray0);
      int int1 = 2925;
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node node0 = new Node(99);
      node0.isDefaultCase();
      node0.isIf();
      node0.isUnscopedQualifiedName();
      node0.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isNull();
      node0.getSourceFileName();
      node0.putBooleanProp(40, false);
      node0.isTypeOf();
      node0.children();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = Node.newString("", 100, 30);
      node0.removeProp((-1833));
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      Node node1 = new Node(49);
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(55, node1, node1, node1, node1, 111, 1);
      node1.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      jSTypeArray0[0] = jSType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node3.useSourceInfoIfMissingFrom(node1);
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node node0 = Node.newString("cgn@A*Y4pL+T)68Du7");
      node0.removeFirstChild();
      node0.isOnlyModifiesThisCall();
      node0.isReturn();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.detachChildren();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = Node.newString("-@IA/IBAopOk", 52, 1658);
      Node node2 = Node.newString(55, "-@IA/IBAopOk");
      node1.isSetterDef();
      node0.mayMutateArguments();
      node1.getLength();
      node1.removeFirstChild();
      node0.isNot();
      node0.isNot();
      node2.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-5062));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node2.setSideEffectFlags(node_SideEffectFlags4);
      node1.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Node node0 = Node.newString(34, "");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.setSideEffectFlags(node_SideEffectFlags0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1074, nodeArray0, 1085, 4768);
      Node node1 = new Node(1074, node0, 0, 54);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.TOP_LEVEL_PROTOTYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, jSType0);
      enumType0.getImplicitPrototype();
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getLeastSupertype(enumType0);
      node0.addChildrenToFront(node1);
      node1.replaceChildAfter(node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node2 = jSDocInfo0.getAssociatedNode();
      node2.setCharno(node1.QUOTED_PROP);
      node1.isDelProp();
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getSourceFileName();
      node0.putBooleanProp((-1069), true);
      node0.getDirectives();
      node0.isBlock();
      node0.children();
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.detachChildren();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = Node.newString("-@IA/IBAopOk");
      node0.addChildToBack(node1);
      Node node2 = new Node(49);
      node2.isUnscopedQualifiedName();
      node0.isNoSideEffectsCall();
      node1.isSwitch();
      Node node3 = Node.newString("d~[");
      node3.cloneNode();
      node1.isOnlyModifiesThisCall();
      node3.isScript();
      node2.getString();
      node1.removeFirstChild();
      node0.getParent();
      // Undeclared exception!
      try { 
        node1.setQuotedString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // THROW is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Node node0 = new Node(1637, 1637, 1637);
      node0.isQuotedString();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node((-3009), node0, node0, 862, 1561);
      Node node2 = Node.newString("side_effect_flags", 48, 706);
      Node node3 = new Node(1, node2);
      node2.isSetterDef();
      node3.mayMutateArguments();
      node0.getLength();
      node1.isNot();
      node3.getJSType();
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Node node0 = Node.newNumber((-3551.10704), 46, 46);
      node0.isBreak();
      node0.getSourceFileName();
      node0.putBooleanProp(46, true);
      node0.siblings();
      node0.isSetterDef();
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Node node0 = new Node(93, 93, 93);
      Node node1 = new Node(15, node0);
      node1.isCatch();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.isNE();
      node1.toStringTree();
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Node node0 = Node.newNumber((-3551.10704), 46, 46);
      node0.isBreak();
      Node node1 = Node.newString(4095, "Qe", 4095, (-1115));
      Node node2 = new Node(32, node1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node2.isQuotedString();
      node0.removeProp(15);
      node1.isGetElem();
      node2.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      node2.getSourceOffset();
      // Undeclared exception!
      try { 
        Node.newNumber((double) node1.MAX_COLUMN_NUMBER);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4095
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node node0 = Node.newNumber((-3551.10704), 46, 46);
      node0.isAnd();
      node0.isAssignAdd();
      node0.isAssignAdd();
      node0.isDo();
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Node node0 = new Node(153, 1377, 153);
      node0.toStringTree();
      node0.getQualifiedName();
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.setSourceEncodedPosition(115);
      node0.isDo();
      node0.isNull();
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      simpleErrorReporter0.error("", "", 12, 1655);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeProp(12);
      node0.isGetElem();
      node0.getLineno();
      node0.toStringTree();
      Node node1 = new Node(54);
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(86, node0, node0, node0, node1, 37, 57);
      node2.setSourceEncodedPosition((-916));
      Node.mergeLineCharNo(4, 39);
      node2.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList.copyOf(jSTypeArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Node node0 = new Node(83);
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1074, (-1), 1074);
      Node node1 = new Node(1074, node0, node0, node0, node0);
      Node node2 = new Node(1085, node1, (-4376), 37);
      node2.children();
      node1.hasMoreThanOneChild();
      node1.isAssignAdd();
      Node node3 = new Node(15, nodeArray0);
      node3.isAssignAdd();
      Node.newString(50, "=yJD\"p$>65", 147, 38);
      Node.newString("=yJD\"p$>65");
      Node.newNumber((-1978.00983207669), 114, 42);
      node3.isUnscopedQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node_FileLevelJsDocBuilder0.append("~=ux &");
      node0.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = new Node(42, node0, node0, node0, node0, (-1163), 42);
      node1.isRegExp();
      node0.mayMutateGlobalStateOrThrow();
      node1.hasMoreThanOneChild();
      node1.isEmpty();
      node1.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Node node0 = Node.newString(126, "~Bi-NzXnb6", 126, 126);
      node0.isVoid();
      node0.getJSType();
      Node node1 = new Node(4, node0, node0);
      node0.type = 53;
      node1.setChangeTime(0);
      Node node2 = Node.newNumber(0.0);
      node2.mayMutateArguments();
      node1.putProp(48, node0);
      node0.putIntProp(3798, (-105));
      node0.removeChild(node1);
      node1.checkTreeEqualsImpl(node0);
      node0.isGetElem();
      int int0 = 113;
      node0.getBooleanProp(int0);
      // Undeclared exception!
      try { 
        node0.isParamList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Node node0 = Node.newString("F=23.}p", (-2044), 0);
      node0.getInputId();
      Node node1 = new Node((-2044), node0, node0);
      node1.setType(57);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2044));
      node_SideEffectFlags0.setMutatesArguments();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node2 = Node.newNumber((-861.874619399246), (-1980), 50);
      node0.isBreak();
      node1.isAssignAdd();
      node0.setInputId((InputId) null);
      node2.isAssignAdd();
      node0.isIf();
      node1.getStaticSourceFile();
      node2.toString();
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Node node0 = Node.newString("g<,)-l<$T^VOHOb");
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isThis();
      Node.newString("g<,)-l<$T^VOHOb", 0, 30);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Node node0 = Node.newString(304, "", 304, 304);
      node0.isReturn();
      Node node1 = new Node(0, node0, node0, node0, node0, 36, 4095);
      node1.isBlock();
      node1.setChangeTime(1);
      node0.toString();
      Node.mergeLineCharNo(1085, 31);
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Node node0 = Node.newNumber((double) 46, 46, 16);
      node0.children();
      node0.isBreak();
      Node node1 = new Node(29, node0, node0, (-1281), 16);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      Node node3 = node0.srcref(node2);
      node1.setOptionalArg(false);
      node0.isEquivalentToShallow(node1);
      node1.addChildBefore(node0, node3);
      node1.getJSDocInfo();
      node1.isNumber();
      int int0 = (-417);
      int int1 = 1442;
      Node node4 = null;
      try {
        node4 = new Node(int0, int1, node3.SIDE_EFFECTS_FLAGS_MASK);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Node node0 = Node.newString("g9m#p[gVa'Nd#kE![@");
      Node node1 = new Node(126, node0, node0);
      node0.addChildToBack(node1);
      Node node2 = new Node(2263);
      node1.isUnscopedQualifiedName();
      node0.isNoSideEffectsCall();
      node2.isSwitch();
      Node node3 = Node.newString("d~[");
      Node node4 = node2.cloneNode();
      node2.isOnlyModifiesThisCall();
      node3.isScript();
      node3.getString();
      node2.removeFirstChild();
      Node node5 = node1.getParent();
      node4.setQuotedString();
      node5.cloneTree();
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Node node0 = new Node(39, 39, 0);
      node0.isSetterDef();
      node0.isIn();
      node0.getDouble();
      int int0 = 2432;
      // Undeclared exception!
      try { 
        node0.setType(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Node node0 = Node.newString("g<,)-l<$T^VOHOb");
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Node.mergeLineCharNo(4, (-1565));
      Node node0 = Node.newNumber(0.0, 3856, 3856);
      node0.mayMutateArguments();
      node0.getSourceFileName();
      node0.putBooleanProp(3856, false);
      node0.isSetterDef();
      node0.isNE();
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Node node0 = Node.newNumber(2.8207291475371865);
      Node node1 = Node.newString("FOR");
      node1.getSideEffectFlags();
      node1.getBooleanProp(43);
      Node node2 = new Node(4095, node0, node0, node1, node1);
      node2.addChildAfter(node0, node0);
      node1.isCall();
      // Undeclared exception!
      try { 
        node0.isName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeProp(12);
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      Node node1 = new Node(15);
      Node node2 = new Node(4, node0, node0, node0, node1, 37, 57);
      node2.setCharno((-232));
      node1.getBooleanProp(53);
      Node[] nodeArray0 = new Node[0];
      Node node3 = new Node(119, nodeArray0, 53, 51);
      node1.addChildAfter(node0, node3);
      node2.cloneNode();
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Node node0 = Node.newString("g/}=\"lE[@K#KhMG", 13, 13);
      node0.isEquivalentTo(node0);
      node0.isComma();
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Node node0 = Node.newString("N", 0, 0);
      Node node1 = node0.cloneTree();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      Node node2 = new Node(1, (Node[]) null, 57, 310);
      int int0 = (-3714);
      int int1 = 573;
      Node node3 = new Node(int0, node0, node1, node0, node0, int1, node0.INFERRED_FUNCTION);
      // Undeclared exception!
      try { 
        node2.getBooleanProp(node3.ORIGINALNAME_PROP);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.hasChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesGlobalState();
      node0.isAssignAdd();
      Node node1 = Node.newString(50, "Object#Key", 40, 1810);
      Node.newString("Object#Key");
      node1.isArrayLit();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Node.newString("[;@0n6A#&5ZR9k-S<p");
      Node node0 = Node.newString(8, "[;@0n6A#&5ZR9k-S<p");
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Node node0 = Node.newString(38, "}u&5b");
      node0.isQuotedString();
      Node node1 = new Node(38);
      Node node2 = new Node(38, node1, node1);
      node1.isName();
      node2.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Node node0 = Node.newNumber((double) 16, 16, 101);
      node0.children();
      node0.hasMoreThanOneChild();
      Node node1 = new Node(47);
      Node node2 = new Node(310, node1);
      node2.isFromExterns();
      node1.isCatch();
      Node node3 = node1.cloneTree();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(54);
      node_SideEffectFlags0.clearAllFlags();
      node3.setCharno(26);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Node node0 = new Node(11);
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Node node0 = Node.newString("N", 0, 0);
      node0.isAssignAdd();
      node0.isAssignAdd();
      Node node1 = Node.newString(152, ",+/od}d(l?bOc+O", 47, 262144);
      Node.newString(",+/od}d(l?bOc+O");
      Node node2 = Node.newNumber(638.5217435393471, (-536870912), 51);
      node1.isUnscopedQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("");
      node1.isHook();
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.detachChildren();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = Node.newString("-@IA/IBAopOk");
      node0.addChildToBack(node1);
      Node node2 = new Node(49);
      node2.isUnscopedQualifiedName();
      node1.getInputId();
      int int0 = 4;
      Node[] nodeArray0 = new Node[6];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      nodeArray0[0] = node3;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node1;
      nodeArray0[5] = node0;
      Node node4 = new Node((-420), nodeArray0);
      Node node5 = new Node(int0, node1, node4);
      node5.addChildrenAfter(nodeArray0[1], node0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      int int1 = 1810;
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isNull();
      node0.getSourceFileName();
      Node node1 = Node.newNumber((double) 15, 1500, 124);
      node0.useSourceInfoFrom(node1);
      node0.putBooleanProp(40, false);
      node0.isTypeOf();
      node0.children();
      node0.isDefaultCase();
      node0.getProp(36);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Node node0 = new Node(115, 115, 153);
      node0.isSetterDef();
      node0.isNumber();
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      node0.isEquivalentToShallow(node0);
      Node node1 = new Node(51, node0, node0, node0, node0, 49, (-316));
      node0.isThrow();
      node0.isLabel();
      node0.addSuppression("com.google.common.collect.ImmutableMapValues");
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = new Node(0, node0);
      node0.isFromExterns();
      node1.isCatch();
      Node node2 = node1.cloneTree();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3873);
      node2.isIf();
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Node node0 = new Node(552);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isVoid();
      node0.isOnlyModifiesThisCall();
      Node node1 = Node.newString(1, "direct_eval", 38, 120);
      node0.useSourceInfoFromForTree(node1);
      node0.isFalse();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.toStringTree();
      node0.isAdd();
      int int0 = 32;
      Node node2 = null;
      try {
        node2 = new Node(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 552
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.detachChildren();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = Node.newString("-@IA/IBAopOk", 52, 1658);
      Node node2 = new Node((-2212), node1);
      Node.newString((-4096), "", 4095, (-3181));
      Node node3 = Node.newString("");
      node2.isArrayLit();
      node3.isName();
      node3.isCast();
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      Node node1 = new Node(36, node0);
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Node node0 = Node.newString("uP+", 0, 0);
      node0.getInputId();
      Node node1 = new Node(1, node0, node0);
      node1.setType(46);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(137);
      node_SideEffectFlags0.setMutatesArguments();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node1.hasChildren();
      node0.setLineno(40);
      Node.newString(51, "u@.<14Xrx%}V_");
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Node node0 = new Node(104, 2846, 104);
      Node node1 = new Node(57, node0, node0, 0, 42);
      node1.checkTreeEqualsImpl(node1);
      node1.isBlock();
      node1.isCase();
      node1.hasChildren();
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Node node0 = new Node(34, 34, 109);
      Node node1 = new Node(32, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      node1.getSideEffectFlags();
      node1.isArrayLit();
      node1.replaceChild(node0, node0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newNumber((double) 46, 46, 16);
      node0.children();
      node0.isBreak();
      Node node1 = new Node(29, node0, node0, (-1281), 16);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      Node node3 = node0.srcref(node2);
      node1.setOptionalArg(false);
      node0.isEquivalentToShallow(node1);
      Node node4 = Node.newString("NUMBER_OBJECT_TYPE");
      node1.addChildBefore(node4, node3);
      node1.getJSDocInfo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(584);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node2.setVarArgs(false);
      node4.setCharno(15);
      node4.replaceChild(node2, node0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Node node0 = new Node((-5450));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isVoid();
      node0.isOnlyModifiesThisCall();
      node0.isFalse();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.toStringTree();
      int int0 = 64;
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Node node0 = Node.newNumber((double) 46, 46, 27);
      node0.children();
      Node node1 = new Node((-1143), node0, 13, 4);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.TOP_LEVEL_PROTOTYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      node1.checkTreeEqualsImpl(node0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node1, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getLeastSupertype(enumType0);
      enumElementType0.isEmptyType();
      node0.isObjectLit();
      enumElementType0.getRootNode();
      node1.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = new Node(0, node0);
      node0.isFromExterns();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)77;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.isCatch();
      node1.cloneTree();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.isNE();
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Node node0 = new Node(130, 130, (-8));
      node0.putIntProp(57, 130);
      node0.getStaticSourceFile();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Q,Mt]");
      node0.isFor();
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Node node0 = new Node(130, 130, 0);
      node0.putIntProp(57, 130);
      node0.getIntProp(0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Q,Mt]");
      node0.getType();
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.detachChildren();
      node0.isOnlyModifiesThisCall();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-1I");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      node0.isIn();
      Node node1 = new Node(111, node0);
      node0.setChangeTime(2925);
      node1.isNull();
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Node node0 = Node.newNumber((double) 34);
      int int0 = Node.NO_SIDE_EFFECTS;
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Node node0 = new Node((-11), (-11), (-11));
      Node node1 = new Node(48, 40, 39);
      node1.isCatch();
      Node node2 = node1.cloneTree();
      node0.checkTreeEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3873);
      node2.isIf();
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Node node0 = Node.newNumber((double) 46, 46, 27);
      node0.children();
      node0.isBreak();
      node0.isAssignAdd();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      node0.isQualifiedName();
      node0.isBlock();
      Node node1 = Node.newNumber((double) 57);
      node1.isString();
      Node node2 = Node.newString("GREATEST_FUNCTION_TYPE");
      node2.isUnscopedQualifiedName();
      node2.isBreak();
      node0.getChangeTime();
      node1.srcrefTree(node2);
      node1.getJSType();
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Node node0 = Node.newString("uP+", 0, 0);
      node0.getInputId();
      Node node1 = new Node(1, node0, node0);
      node1.setType(46);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(137);
      node_SideEffectFlags0.setMutatesArguments();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node1.hasChildren();
      node0.setLineno(40);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("Object#Element");
      node1.isHook();
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Node node0 = new Node(16, 16, 0);
      node0.putIntProp(57, 16);
      node0.isString();
      node0.isUnscopedQualifiedName();
      node0.setSideEffectFlags(16);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Node node0 = Node.newString("", 100, 30);
      node0.removeProp((-1833));
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      Node node1 = new Node(49);
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(55, node1, node1, node1, node1, 111, 1);
      node1.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node1.isScript();
      node0.getString();
      Node node3 = node0.removeFirstChild();
      Node node4 = node1.getParent();
      node4.setQuotedString();
      node3.cloneTree();
      node2.getLineno();
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(54);
      node0.getBooleanProp(86);
      node0.isParamList();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1219);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.areAllFlagsSet();
      node0.getJsDocBuilderForNode();
      node0.isSwitch();
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isParamList();
      node0.getExistingIntProp(115);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Node node0 = Node.newNumber((-3551.10704), 46, 46);
      node0.isNumber();
      Node node1 = Node.newString(4095, "Qe", 4095, (-1115));
      Node node2 = Node.newString("Qe", 49, 29);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node2.isQuotedString();
      node0.removeProp(15);
      node1.isGetElem();
      node2.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      node2.getSourceOffset();
      Node node3 = Node.newNumber((double) 4095);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node4 = new Node(43, node3);
      node1.setChangeTime(57);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((double) 718, 718, 718);
      Node node1 = new Node(38, node0, node0, 29, 15);
      nodeArray0[0] = node1;
      node0.isNumber();
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = new Node(0, node0);
      node0.isFromExterns();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)0;
      Node node2 = Node.newString("com.google.common.base.Joiner$MapJoiner", 1977, 37);
      node2.toStringTree();
      Node node3 = new Node(2048);
      node1.isEquivalentToShallow(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(40);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.clearAllFlags();
      node3.setCharno((-50));
      node0.replaceChild(node2, node2);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Node node0 = new Node(552);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isVoid();
      node0.isOnlyModifiesThisCall();
      node0.isFalse();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte)77;
      node0.isCatch();
      Node node1 = Node.newString("");
      Node node2 = node1.cloneTree();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node0.isNE();
      node2.toStringTree();
      node0.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeProp(12);
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node2 = new Node(38);
      Node.newString("Object#Key");
      Node.newNumber(501.200577251841, (-2391), 33);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.isObjectLit();
      node1.getQualifiedName();
      node1.isTry();
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isParamList();
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Node node0 = new Node(90, 90, 140);
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      Node node0 = Node.newString(38, "Object#Key");
      Node node1 = new Node(38);
      Node node2 = new Node(8, node0, node1);
      node0.getQualifiedName();
      node2.isTry();
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Node node0 = Node.newNumber((-3551.10704), 46, 46);
      node0.isBreak();
      Node node1 = Node.newString(4095, "Qe", 4095, (-1115));
      Node node2 = new Node(32, node1);
      node2.useSourceInfoIfMissingFromForTree(node1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node2.isQuotedString();
      node0.removeProp(15);
      node1.isGetElem();
      node1.setSideEffectFlags((Node.SideEffectFlags) null);
      node2.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setAllFlags();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((double) 718, 718, 718);
      Node node1 = new Node(38, node0, node0, 29, 15);
      nodeArray0[0] = node1;
      node0.setSideEffectFlags((Node.SideEffectFlags) null);
      node0.isBreak();
      // Undeclared exception!
      try { 
        node1.isThrow();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((double) 718, 718, 718);
      Node node1 = new Node(38, node0, node0, 29, 15);
      nodeArray0[0] = node1;
      node1.setString("oR&?<b7XDK6");
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Node node0 = new Node(130, 130, (-8));
      node0.putIntProp(57, 130);
      node0.isBreak();
      node0.isAssignAdd();
      node0.isAssignAdd();
      node0.isDo();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Node node0 = Node.newString("F=23.}p", (-2044), 0);
      node0.getInputId();
      Node node1 = new Node((-2044), node0, node0);
      node1.isReturn();
      Node node2 = node1.detachFromParent();
      node1.isBlock();
      int int0 = (-1028);
      // Undeclared exception!
      try { 
        node2.setChangeTime(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = new Node(1502, 3314, 1502);
      node0.isQualifiedName();
      node0.isEquivalentToShallow((Node) null);
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = new Node(0, node0);
      node0.isFromExterns();
      node1.isCatch();
      node1.cloneTree();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = Node.newNumber((double) 51, 18, 51);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.isComma();
      node2.getQualifiedName();
      node2.isTry();
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Node node0 = new Node((-181));
      node0.isComma();
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Node node0 = Node.newString("uP+", 0, 0);
      node0.getInputId();
      Node node1 = new Node(1, node0, node0);
      node1.setType(46);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(137);
      node0.getLineno();
      node1.toStringTree();
      Node node2 = new Node((-1878));
      node0.isEquivalentToShallow(node1);
      Node node3 = new Node((-2692), node2, node2, node2, node0, 2324, 4095);
      int int0 = 4622;
      int int1 = (-1788);
      Node.mergeLineCharNo(int0, int1);
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Node node0 = new Node(8199);
      node0.hasChild(node0);
      node0.isNoSideEffectsCall();
      Node node1 = Node.newString(63, (String) null);
      node0.isOptionalArg();
      node0.addChildrenAfter(node1, node1);
      // Undeclared exception!
      try { 
        node1.isVarArgs();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Node node0 = new Node(8198, 2871, 8198);
      Node node1 = new Node(33, node0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
      node0.isAdd();
      node1.hasChild(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      node_SideEffectFlags0.setAllFlags();
      node1.mayMutateGlobalStateOrThrow();
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(34, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.isAdd();
      node0.isDec();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.mayMutateGlobalStateOrThrow();
      node1.isOnlyModifiesThisCall();
      node1.isDo();
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Node node0 = Node.newNumber((-3977.0171292416), (-1), 63);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("7ZmXI#0{3yG");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Number node not created with Node.newNumber");
      node0.putProp((-1515), (Object) null);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Node node0 = new Node(122);
      node0.setSourceFileForTesting("9&!'Vr'Q}S\"|.n,!\"%7");
      node0.getExistingIntProp(122);
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.javascript.rhino.JSDocInfo$StringPosition");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node0 = Node.newNumber(1.0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = Node.newNumber((double) 4095);
      node1.setSourceFileForTesting((String) null);
      node0.setSideEffectFlags(48);
      boolean boolean0 = true;
      node0.setIsSyntheticBlock(boolean0);
      node0.isCast();
      node0.isLabel();
      String string0 = "#";
      Node node2 = Node.newString(string0, node0.IS_CONSTANT_NAME, node0.DIRECTIVES);
      // Undeclared exception!
      try { 
        node2.getAncestors();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Node node0 = new Node(8199);
      node0.hasChild(node0);
      node0.isNoSideEffectsCall();
      node0.isBreak();
      node0.isAssignAdd();
      node0.isAssignAdd();
      node0.isIf();
      node0.isRegExp();
      node0.isOptionalArg();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Node node0 = new Node(38, 38, 38);
      node0.isQualifiedName();
      // Undeclared exception!
      try { 
        node0.isEquivalentToShallow(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 38 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeProp(12);
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node2 = new Node(38);
      Node.newString("Object#Key");
      node2.isQualifiedName();
      node1.isBlock();
      node0.isString();
      // Undeclared exception!
      try { 
        node0.isUnscopedQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Node node0 = Node.newString(44, "REFERENCE_ERROR_TYPE");
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Node node0 = new Node(1074, (-1), 1074);
      Node node1 = new Node(1074, node0, node0, node0, node0);
      Node node2 = new Node(1085, node1, (-4376), 37);
      node2.children();
      node1.hasMoreThanOneChild();
      node2.putBooleanProp(86, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node1.isAssignAdd();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2025);
      node0.isIf();
      node1.copyInformationFrom(node2);
      node1.isStringKey();
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Node node0 = Node.newString("", 100, 30);
      node0.removeProp((-1833));
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      node0.isOnlyModifiesThisCall();
      node0.toStringTree();
      node0.isEquivalentToShallow(node0);
      Node node1 = new Node(57, node0, node0, node0, node0, 111, 1);
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node1.useSourceInfoIfMissingFrom(node0);
      node0.isScript();
      node0.getString();
      Node node2 = node0.removeFirstChild();
      Node node3 = node0.getParent();
      node3.setQuotedString();
      Node node4 = node2.cloneTree();
      node1.getLineno();
      node4.addChildrenAfter(node2, node0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(53);
      node0.replaceChild(node1, node1);
      Node node2 = null;
      try {
        node2 = new Node(node0.FLAG_ARGUMENTS_UNMODIFIED, node0, node0, node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Node node0 = new Node(132, 132, 132);
      Node node1 = new Node(36, node0, node0, node0);
      node1.isNot();
      node1.isVar();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(283);
      node0.isVar();
      node1.getChildBefore(node1);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(53);
      node0.replaceChild(node1, node1);
      Node node2 = null;
      try {
        node2 = new Node(node0.FLAG_ARGUMENTS_UNMODIFIED, node0, node0, node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Node node0 = new Node(153, (-1769), (-1715));
      Node node1 = new Node(57, 53, 4);
      node0.isCatch();
      Node node2 = node1.cloneTree();
      node2.checkTreeEqualsImpl(node1);
      node2.useSourceInfoFromForTree(node0);
      node2.setStaticSourceFile((StaticSourceFile) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
      node2.isIf();
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Node node0 = Node.newString("9uKxD|J");
      node0.isVar();
      node0.isUnscopedQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2460));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags2.setThrows();
      node0.isFromExterns();
      node0.isBlock();
      node0.isUnscopedQualifiedName();
      node0.getIntProp((-2460));
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Node node0 = new Node(118, 118, 118);
      node0.isWith();
      node0.isContinue();
      node0.isCatch();
      Node node1 = node0.cloneTree();
      node0.isAssign();
      node1.isVar();
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Node node0 = Node.newNumber((double) 16, 16, 101);
      Node node1 = new Node((-3597));
      node0.isWhile();
      node0.setSourceEncodedPositionForTree(46);
      node1.useSourceInfoIfMissingFromForTree(node0);
      node1.getIntProp(48);
      Node.mergeLineCharNo((-1458), 4095);
      node1.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Node node0 = Node.newNumber((-2537.046), (-1014), 10);
      node0.setLineno(39);
      node0.isOptionalArg();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|ql]Nb:$?DLW{5<");
      Node.newString("a3=JS}Uqxq+z&e1Fi");
      node0.isInstanceOf();
      Node node1 = node0.getChildAtIndex(39);
      node0.isFalse();
      node0.isCast();
      node1.getJSDocInfo();
      node1.toStringTree();
      node1.isQualifiedName();
      double double0 = (-1.0);
      // Undeclared exception!
      try { 
        Node.newNumber(double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Node node0 = Node.newString("", (-4021), (-4021));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Node node0 = new Node(76);
      node0.isOnlyModifiesThisCall();
      Node node1 = new Node(52, node0, 126, 46);
      node0.addChildrenToFront(node1);
      node0.isEquivalentTo(node1, true, true, false);
      Node node2 = Node.newString("OKNth[PSr$nljE");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.cloneTree();
      node1.isInstanceOf();
      node2.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Node node0 = new Node((-990));
      node0.children();
      Node node1 = Node.newString("", 102, 0);
      node0.hasOneChild();
      Node node2 = new Node(12, node0, node0, node1, 438, 4095);
      node2.siblings();
      node0.isEquivalentToShallow(node2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.isHook();
      Node node3 = node1.useSourceInfoFrom(node0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)50;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node3.getExistingIntProp((-532));
      node1.isExprResult();
      int int0 = (-6133);
      Node.newNumber((double) node3.FLAG_LOCAL_RESULTS, int0, node0.MAX_COLUMN_NUMBER);
      node3.isBreak();
      node0.setSideEffectFlags(node1.OPT_ARG_NAME);
      node1.isCatch();
      node3.isHook();
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Node node0 = new Node(130, 130, (-464));
      node0.putIntProp(57, 130);
      node0.getStaticSourceFile();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isCatch();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node(37, node0);
      node1.useSourceInfoFromForTree(node0);
      node1.isNE();
      node0.toStringTree();
      node1.hasOneChild();
      node0.isGetterDef();
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Node node0 = new Node(115, 115, 153);
      node0.isSetterDef();
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      node0.isQualifiedName();
      node0.isBlock();
      node0.isString();
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Node node0 = Node.newString(126, "(D");
      Node node1 = new Node(126, node0, 4095, 49);
      node1.srcrefTree(node0);
      node1.isEmpty();
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Node node0 = Node.newString("[k}kn\"'oC'");
      node0.isNew();
      Node node1 = Node.newString("input_id", 38, 8);
      node0.checkTreeEqualsImpl(node1);
      node1.isOr();
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Node node0 = new Node(142, 35, 142);
      Node node1 = new Node(122, node0);
      Node node2 = new Node(4095, node0, 46, 8);
      node1.children();
      node0.hasMoreThanOneChild();
      // Undeclared exception!
      try { 
        node2.isRegExp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Node node0 = new Node(142, (-1166), 3106);
      Node node1 = new Node(20, node0, (-1065), 56);
      node0.isEquivalentTo(node1);
      node0.isCast();
      node0.setLineno(4095);
      node0.isCall();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      node0.clonePropsFrom((Node) null);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Node node0 = Node.newString("", 100, 30);
      node0.removeProp((-1833));
      node0.isGetElem();
      node0.isOnlyModifiesArgumentsCall();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      Node node1 = new Node(49);
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(55, node1, node1, node1, node1, 111, 1);
      node2.setChangeTime(100);
      node0.toString();
      int int0 = Node.INFERRED_FUNCTION;
      node0.isScript();
      node2.addChildBefore(node0, node1);
      node1.isNew();
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Node node0 = Node.newString("nm~");
      Node node1 = Node.newString("nm~");
      node1.isInc();
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString("eUHo`/M");
      Node node1 = new Node(8199, node0, node0, node0, 43, 4095);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      node_NodeMismatch0.equals(templateType0);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Node node0 = Node.newNumber(21.060597368650367);
      node0.checkTreeEqualsImpl(node0);
      Node node1 = Node.newNumber((double) 40);
      node0.putIntProp(42, 50);
      node1.isWhile();
      node0.setDouble(4095);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Node node0 = Node.newNumber((double) 46, 46, 27);
      node0.children();
      node0.getBooleanProp(142);
      node0.isParamList();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(5103);
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.areAllFlagsSet();
      node0.getJsDocBuilderForNode();
      Node node1 = node0.cloneTree();
      node1.checkTreeEqualsImpl(node0);
      node0.useSourceInfoFromForTree(node1);
      node1.setStaticSourceFile((StaticSourceFile) null);
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(36);
      node1.isIf();
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Node node0 = Node.newString("", 100, 30);
      node0.removeProp((-1833));
      node0.isGetElem();
      node0.isOnlyModifiesArgumentsCall();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      Node node1 = new Node(49);
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(55, node1, node1, node1, node1, 111, 1);
      node1.siblings();
      node2.setChangeTime(100);
      node0.toString();
      int int0 = Node.INFERRED_FUNCTION;
      node0.isScript();
      node2.addChildBefore(node0, node1);
      node1.isNew();
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Node node0 = new Node(157);
      node0.isDelProp();
      node0.isGetProp();
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Node node0 = new Node(1659);
      node0.addChildrenToBack(node0);
      Node node1 = node0.detachFromParent();
      Node node2 = node0.useSourceInfoIfMissingFrom(node0);
      node0.addChildToFront((Node) null);
      node2.isComma();
      // Undeclared exception!
      try { 
        node0.getAncestor(node1.FLAG_ARGUMENTS_UNMODIFIED);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Node node0 = new Node((-691), (-691), 0);
      Node node1 = new Node(40, node0);
      node0.setIsSyntheticBlock(false);
      Node node2 = node0.getChildBefore(node1);
      node0.isBlock();
      node2.getSideEffectFlags();
      // Undeclared exception!
      try { 
        node0.setChangeTime(node1.IS_NAMESPACE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isParamList();
      Node node1 = Node.newNumber((double) 2);
      node1.setIsSyntheticBlock(false);
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList.copyOf(jSTypeArray0);
      Node node0 = Node.newString("Object#Key", 12, 12);
      node0.removeProp(36);
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setMutatesThis();
      node0.isQualifiedName();
      Node node1 = new Node((-6942), node0, node0, node0, 37, Integer.MAX_VALUE);
      node1.setJSDocInfo((JSDocInfo) null);
      node1.isHook();
      node0.isString();
      node1.isUnscopedQualifiedName();
      Node node2 = new Node(57, 4095, (-315));
      node2.isBreak();
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = Node.newString("Object#Key");
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Node node0 = new Node((-1304), 12, Integer.MAX_VALUE);
      Node node1 = new Node(64, 42, 166);
      boolean boolean0 = node1.isCatch();
      Node node2 = node1.cloneTree();
      node1.checkTreeEqualsImpl(node0);
      node2.useSourceInfoFromForTree(node0);
      StaticSourceFile staticSourceFile0 = null;
      Node node3 = Node.newString((String) null);
      boolean boolean1 = true;
      boolean boolean2 = false;
      node0.toString(boolean0, boolean1, boolean2);
      node3.setStaticSourceFile(staticSourceFile0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node2.FLAG_LOCAL_RESULTS);
      // Undeclared exception!
      try { 
        node0.isIf();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList.copyOf(jSTypeArray0);
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
      Node node1 = null;
      node0.addChildrenToBack((Node) null);
      int int0 = 4;
      String string0 = "g<,)-l<$T^VOHOb";
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      node0.putIntProp(57, 130);
      node0.isBreak();
      node0.isAssignAdd();
      node0.isAssignAdd();
      node0.isDo();
      Node node1 = Node.newNumber((double) 55);
      node0.setDouble(8);
      Node node2 = null;
      try {
        node2 = new Node(node1.INFERRED_FUNCTION, node1, node0, node0.DIRECTIVES, node1.SIDE_EFFECTS_FLAGS_MASK);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // EXPR_RESULT 130 [reflected_object: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      node0.putIntProp(57, 154);
      node0.getStaticSourceFile();
      node0.getJSDocInfo();
      node0.putIntProp(49, 1120);
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Node node0 = Node.newString("eUHo`/M");
      Node node1 = new Node(8199, node0, node0, node0, 43, 4095);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setChangeTime(125);
      node1.isDec();
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeProp(12);
      node0.isGetElem();
      node0.toStringTree();
      Node node1 = new Node(1706, node0, node0, (-165), 148);
      node0.addChildToFront(node1);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Node node0 = new Node(115, 115, 153);
      node0.isSetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node_SideEffectFlags0.setMutatesArguments();
      node0.isOptionalArg();
      node0.isAssignAdd();
      Node node1 = new Node(56, node0, node0, 2925, 50);
      node1.useSourceInfoFrom(node0);
      node0.isUnscopedQualifiedName();
      node1.isNoSideEffectsCall();
      node1.isSwitch();
      node0.isOnlyModifiesThisCall();
      node0.wasEmptyNode();
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node0 = new Node(65535);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = new Node(9, node0);
      Node node2 = node0.useSourceInfoFrom(node1);
      node1.getAncestors();
      node1.isSwitch();
      node1.isBreak();
      Node node3 = node1.srcref(node0);
      node2.type = 47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      node0.getLength();
      node2.setString("=vq5?H=;W");
      String string0 = "C9k6Pb1+:e9G3rzh!";
      Charset charset0 = Charset.forName(string0);
      Set<String> set0 = charset0.aliases();
      node1.setDirectives(set0);
      node2.isExprResult();
      node0.wasEmptyNode();
      // Undeclared exception!
      try { 
        Node.newNumber((double) node3.DECR_FLAG);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // REGEXP is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Node node0 = new Node(1659);
      node0.addChildrenToBack(node0);
      node0.isUnscopedQualifiedName();
      node0.isAssign();
      node0.isDo();
      node0.isNot();
      Node node1 = new Node(48);
      node1.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Node node0 = Node.newNumber((double) 46, 46, 27);
      node0.children();
      node0.isBreak();
      node0.isAssignAdd();
      Node node1 = new Node(1);
      Node node2 = Node.newString("1[4/_]n'JJR^5}j@i");
      Node node3 = Node.newNumber(0.0, 3739, 16);
      node3.setCharno(40);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node3.isAssign();
      Node node4 = new Node(4095, node2, node0, node0, 36, 32);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node5 = jSDocInfo0.getAssociatedNode();
      Node node6 = new Node(1245, node4, (Node) null, node1, node0, 1844, 1245);
      String string0 = node6.getQualifiedName();
      int int0 = 2359;
      Node node7 = Node.newString(int0, string0);
      node7.siblings();
      Node node8 = new Node(node4.EMPTY_BLOCK, node5, node2, node7, node7.DIRECTIVES, node1.FREE_CALL);
      node2.isTry();
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Node node0 = Node.newString("should never be called");
      Node node1 = new Node(153, node0, 125, 53);
      Node node2 = new Node(153, node1, node0, 0, 35);
      node2.getLastChild();
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeProp(12);
      node0.isInc();
      node0.toStringTree();
      node0.getLineno();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node2 = new Node(4, node1, node0, node1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)115;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node3 = node2.cloneTree();
      node0.checkTreeEqualsImpl(node1);
      Node node4 = node0.useSourceInfoFromForTree(node3);
      node4.addSuppression("B{eoN@r}!&3");
      node1.isInc();
      node4.isVar();
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TreeSet<UnknownType> treeSet0 = new TreeSet<UnknownType>();
      TreeSet<UnknownType> treeSet1 = new TreeSet<UnknownType>((SortedSet<UnknownType>) treeSet0);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) treeSet1);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isFunction();
      node0.isDec();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 49164;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseStringType();
      JSType[] jSTypeArray0 = new JSType[8];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      jSTypeArray0[6] = jSType0;
      jSTypeArray0[7] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, jSTypeArray0);
      immutableList0.add((JSType) functionType0);
      Node node1 = Node.newNumber((double) node0.DIRECTIVES, node0.FLAG_NO_THROWS, int0);
      // Undeclared exception!
      try { 
        node0.srcrefTree(node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Node node0 = new Node(105);
      node0.isBlock();
      Node node1 = new Node(51, node0);
      node1.isDec();
      node1.cloneTree();
      node0.getSideEffectFlags();
      node1.isFunction();
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Node node0 = new Node(105, 105, 1857);
      node0.isUnscopedQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isFunction();
      node0.isDec();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative jSTypeNative0 = JSTypeNative.DATE_TYPE;
      jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      node0.isNew();
      node0.isVarArgs();
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Node node0 = new Node(99, 99, 99);
      node0.isSetterDef();
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      Node node1 = new Node(0, 1, 38);
      node1.isAssignAdd();
      Node node2 = new Node(42, node0, 49, 31);
      node2.isEquivalentToShallow(node0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isOnlyModifiesThisCall();
      node2.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.cloneTree();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.toStringTree();
      Node node1 = new Node(42, node0);
      Node.newString("STRING  0\n");
      Node node2 = Node.newString("");
      node1.isQualifiedName();
      node2.toString(true, true, false);
      Node node3 = new Node(37, 30, 30);
      Node node4 = Node.newString("Object#Key");
      Node node5 = new Node(8, node0, node4, node2, 56, 49);
      node3.isFalse();
      int int0 = 1830;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(int0);
      int int1 = 2203;
      int int2 = 234;
      int int3 = 94;
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Node node0 = new Node(118, 118, 182);
      Node node1 = Node.newNumber(5815.22537205255, 130, 56);
      Node node2 = new Node(11, node1, node1, (-520), 1160);
      node1.detachFromParent();
      Node.newString("", 118, 40);
      node2.setString("oR&?<b7XDK6");
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(34, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.isAdd();
      node0.isDec();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.isEquivalentToTyped(node0);
      node1.isOnlyModifiesThisCall();
      node1.isDo();
      node1.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Node node0 = new Node(115, 115, 166);
      node0.isSetterDef();
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(974);
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags((-3007));
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags4.areAllFlagsSet();
      node0.getJsDocBuilderForNode();
      node0.isSwitch();
      node0.isFalse();
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Node node0 = Node.newString("nm~");
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(34, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.isAdd();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.mayMutateGlobalStateOrThrow();
      node1.isOnlyModifiesThisCall();
      node1.useSourceInfoFromForTree(node0);
      node1.isDo();
      node1.isQualifiedName();
      Node.newNumber((-1466.0), 34, 4095);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isWith();
      node0.isFor();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.areAllFlagsSet();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.isTrue();
      node0.isCase();
      node0.isWhile();
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList.copyOf(jSTypeArray0);
      Node node0 = Node.newString("Object#Key", 12, 12);
      node0.removeProp(36);
      node0.removeProp(12);
      node0.isFor();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      node0.getJsDocBuilderForNode();
      Node node1 = node0.cloneTree();
      node0.checkTreeEqualsImpl(node1);
      node0.isOnlyModifiesThisCall();
      node0.isDo();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node2.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Node node0 = new Node(1074, (-1), 1074);
      Node node1 = new Node(1074, node0, node0, node0, node0);
      Node node2 = new Node(1085, node1, (-4376), 37);
      node2.children();
      node1.isCast();
      node1.toString();
      node0.isInc();
      node0.checkTreeEquals(node2);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Node node0 = Node.newString(33, "|d");
      node0.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isWith();
      node0.isFor();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      Node node1 = new Node(4095, node0, node0, node0, 2273, 43);
      node1.getIndexOfChild(node0);
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isWith();
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node0.isAssignAdd();
      node0.getBooleanProp((-342));
      node0.addChildrenToFront(node0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("");
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Node node0 = new Node(115, 115, 166);
      node0.isSetterDef();
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(974);
      Node.SideEffectFlags node_SideEffectFlags3 = new Node.SideEffectFlags((-3007));
      node_SideEffectFlags3.setMutatesArguments();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.setLineno((-2411));
      Node node1 = new Node(29, 55, 40);
      node1.isQualifiedName();
      node1.isName();
      node1.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Node node0 = new Node(1074, (-1), 1074);
      Node node1 = new Node(1074, node0, node0, node0, node0);
      Node node2 = new Node(1085, node1, (-4376), 37);
      node2.children();
      node1.hasMoreThanOneChild();
      node2.putBooleanProp(86, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags1.areAllFlagsSet();
      node0.getJsDocBuilderForNode();
      node2.isSwitch();
      node0.isFalse();
      node2.isOr();
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Node node0 = new Node(93, 2871, 93);
      Node node1 = new Node(15, node0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isBlock();
      node1.isAdd();
      node1.isComma();
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Node node0 = new Node(8199);
      node0.hasChild(node0);
      node0.isNoSideEffectsCall();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-42);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[6] = (byte)96;
      byteArray0[4] = (byte)96;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)26;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.checkTreeEqualsImpl(node0);
      Node node1 = node0.useSourceInfoFromForTree(node0);
      node0.isInc();
      node1.isVar();
      node1.isHook();
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Node node0 = Node.newString("Pip");
      node0.isStringKey();
      node0.isName();
      node0.isCast();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Pip");
      node_FileLevelJsDocBuilder0.append("nz1)a7rmZ1*:*~");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      node0.setChangeTime(310);
      Node node1 = new Node(83, nodeArray0, 57, 4);
      nodeArray0[0].getSourcePosition();
      nodeArray0[1].isNew();
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeProp(12);
      node0.isInc();
      node0.toStringTree();
      node0.getLineno();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node2 = new Node(4, node1, node0, node1);
      byte[] byteArray0 = new byte[7];
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
      byteArray0[0] = (byte) (-31);
      node0.isAssignAdd();
      node0.isIf();
      Node node3 = new Node(15, 38, 83);
      node0.mayMutateGlobalStateOrThrow();
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 1429, 0);
      Node node1 = new Node((-1466), node0, node0, node0);
      Node node2 = new Node(29, node1, node1, node1, 2418, 48);
      Node node3 = Node.newString(57, "", 310, 56);
      Node node4 = new Node(47, node2);
      node3.isQuotedString();
      Node node5 = new Node(4095, 40, 53);
      node2.getChildAtIndex(56);
      node5.isFalse();
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isOnlyModifiesThisCall();
      node0.addSuppression("");
      Object object0 = new Object();
      node0.isThrow();
      node0.isGetProp();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"uN0?$FRD@}q");
      node0.isUnscopedQualifiedName();
      node0.isEquivalentToTyped(node0);
      node0.isSwitch();
      node0.isOnlyModifiesThisCall();
      node0.isEquivalentToShallow(node0);
      node0.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Node node0 = Node.newNumber((double) 46, 46, 27);
      node0.isBreak();
      node0.isAssignAdd();
      node0.isReturn();
      node0.toString();
      Node node1 = new Node(4095, (-2279), 477);
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      Node node1 = new Node(51, node0);
      node1.removeChildAfter(node0);
      // Undeclared exception!
      try { 
        node0.cloneNode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "oEOsmmm2<1HlS");
      Node node0 = new Node(93);
      Node node1 = Node.newNumber((double) 38, (-1088), 777);
      node0.isAnd();
      node0.isAssignAdd();
      node0.isAssignAdd();
      node1.isAssignAdd();
      node0.isNot();
      node1.getChildAtIndex(120);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "oEOsmmm2<1HlS");
      Node node0 = new Node(93);
      Node node1 = Node.newNumber((double) 38, (-1088), 777);
      node0.isAnd();
      node0.isAssignAdd();
      node1.isAssignAdd();
      node0.isNot();
      node1.getChildAtIndex(120);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Node node0 = new Node(8199);
      node0.hasChild(node0);
      node0.isNoSideEffectsCall();
      node0.isAssignAdd();
      node0.isIf();
      Node node1 = new Node(57, 32, (-2032));
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      node_NodeMismatch0.equals(node0);
      node1.isCase();
      node1.isAnd();
      node0.getIntProp(57);
      node1.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Node node0 = new Node(153, 99, 153);
      node0.isSetterDef();
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node0.isAnd();
      node0.isAssignAdd();
      node0.isAssignAdd();
      node0.isDo();
      node0.getChildAtIndex(46);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Node node0 = null;
      Node node1 = new Node(2, (Node) null, (Node) null, (Node) null, 43, 43);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        node1.setOptionalArg(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.isReturn();
      node0.toString();
      node0.getDouble();
      Node node1 = node0.getChildAtIndex(33);
      node1.setSideEffectFlags(node0.EMPTY_BLOCK);
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(376, (Node) null, (Node) null, (Node) null, (Node) null);
      node0.setSideEffectFlags(node_SideEffectFlags0);
      // Undeclared exception!
      try { 
        node0.cloneNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Node node0 = new Node(46);
      Node node1 = new Node(993, node0, node0, node0);
      node1.putBooleanProp(8, false);
      node1.isTypeOf();
      node0.children();
      node1.isDefaultCase();
      node1.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(34, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.isAdd();
      node0.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags3.areAllFlagsSet();
      node1.getJsDocBuilderForNode();
      node0.isSwitch();
      node1.isFalse();
      node0.isOr();
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Node node0 = new Node(1637, 1637, 1637);
      node0.isQuotedString();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node((-3009), node0, node0, 862, 1561);
      Node node2 = new Node(302);
      Node node3 = Node.newString("new child has existing sibling");
      node0.isQualifiedName();
      node3.isBlock();
      node0.isString();
      Node node4 = new Node(37, node3, node2, node0, node1);
      node0.isUnscopedQualifiedName();
      node3.isComma();
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node0);
      node_NodeMismatch0.equals(node4);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Node node0 = Node.newString("", (-4026), (-4026));
      node0.setString("call");
      node0.isUnscopedQualifiedName();
      Node node1 = new Node((-222), node0, node0, node0, node0);
      node0.isEquivalentToTyped(node1);
      node0.isSwitch();
      node0.isOnlyModifiesThisCall();
      node0.isEmpty();
      node1.removeFirstChild();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Node node0 = Node.newString("nm~");
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Node node0 = Node.newString("eUHo`/M");
      node0.isGetElem();
      node0.toStringTree();
      node0.getAncestor(46);
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      Node node1 = new Node(148);
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(54, node0, node0, node0, node0, 49, 108);
      Node node3 = Node.newNumber((double) 52, 302, (-974));
      node3.isThrow();
      node3.isLabel();
      node2.addSuppression("STRING eUHo`/M\n");
      node0.getChildBefore((Node) null);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isDo();
      node0.isStringKey();
      node0.addChildrenToFront(node0);
      Node node1 = node0.getChildBefore((Node) null);
      node0.hasOneChild();
      node0.isCase();
      node0.isString();
      node0.mayMutateGlobalStateOrThrow();
      node0.isObjectLit();
      node1.isTrue();
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Node node0 = new Node(1659);
      node0.getAncestor(Integer.MIN_VALUE);
      node0.addChildrenToBack(node0);
      node0.isExprResult();
      // Undeclared exception!
      try { 
        node0.removeChildren();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Node node0 = Node.newString(64, "'7", (-123), 64);
      Node node1 = new Node((-123), node0, node0, node0, 56, (-1650));
      Node node2 = node1.getAncestor(0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node1.setSideEffectFlags(node_SideEffectFlags4);
      int int0 = (-532);
      node2.getBooleanProp(int0);
      node2.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Node node0 = new Node(104, 2849, 104);
      Node node1 = new Node(57, node0, node0, 0, 42);
      node1.checkTreeEqualsImpl(node1);
      node1.isBlock();
      node1.isCase();
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      boolean boolean0 = node0.isDebugger();
      node0.isParamList();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1219);
      Node node1 = new Node(1798);
      node0.addChildToBack(node1);
      node0.getSideEffectFlags();
      node1.getExistingIntProp(42);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
      JSType[] jSTypeArray0 = null;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 42
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      node0.isNew();
      node0.isDebugger();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isReturn();
      node0.toString();
      Node node1 = Node.newString("NUMBER 0.0");
      node1.setQuotedString();
      Node.extractLineno(154);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeProp(12);
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(38);
      Node node2 = Node.newString("Object#Key");
      node1.cloneNode();
      node2.isVar();
      node2.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      String string0 = "";
      Node node0 = new Node(1179, 1179, 1179);
      node0.getInputId();
      node0.isAssign();
      node0.toString();
      // Undeclared exception!
      try { 
        Node.newString(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1179
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Node node0 = Node.newString("nm~");
      Node node1 = Node.newNumber(Double.POSITIVE_INFINITY, 111, 457);
      node1.copyInformationFromForTree(node0);
      node0.getAncestor((-1285));
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(4194304, (-464), 46);
      Node node1 = new Node(0, node0, node0, node0, node0, 47, 16);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(33);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setMutatesThis();
      node0.putBooleanProp(32, true);
      node1.isTypeOf();
      Node node2 = new Node(57);
      node2.children();
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Node node0 = new Node(153, 99, 153);
      node0.isSetterDef();
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node0.isAnd();
      node0.isAssignAdd();
      node0.isAssignAdd();
      Node node1 = node0.cloneNode();
      node0.isEquivalentTo(node1, false, false, false);
      Node node2 = Node.newNumber((double) 52);
      node0.useSourceInfoFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeProp(12);
      node0.isGetElem();
      node0.toStringTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(29);
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(55);
      Node node1 = new Node(102);
      Node node2 = new Node(83, node1, node0, 0, 2024);
      node0.setCharno(42);
      node0.replaceChild(node1, node1);
      node0.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeProp(12);
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(29);
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(55);
      Node node1 = new Node(102);
      Node node2 = new Node(83, node1, node0, 0, 2024);
      node0.setCharno(42);
      node0.replaceChild(node1, node1);
      node0.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Node node0 = new Node(115, 115, 166);
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setMutatesGlobalState();
      node0.isParamList();
      node0.isHook();
      node0.isString();
      node0.isUnscopedQualifiedName();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\",us'Pv[6pdk,p#K`)");
      Node node0 = new Node(115, 115, 115);
      node0.isWith();
      node0.isFor();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node0.isAssignAdd();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(16);
      node0.isAnd();
      node0.isAssignAdd();
      node0.isAssignAdd();
      node0.isAssignAdd();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList.copyOf(jSTypeArray0);
      Node node0 = Node.newString("Object#Key", 12, 12);
      node0.removeProp(36);
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      Node node1 = new Node(71);
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(62, node0, node0, node0, node1, 37, 57);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      node1.isQualifiedName();
      node1.isBlock();
      node1.isString();
      node0.isUnscopedQualifiedName();
      node2.isComma();
      node1.getCharno();
      node1.isDec();
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Node node0 = Node.newNumber((-2896.012279043066));
      node0.setSourceFileForTesting("uJ*{TUe'dUVCY");
      node0.setString((String) null);
      int int0 = (-1609);
      node0.type = int0;
      int int1 = 469;
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Node node0 = new Node(30, 30, 30);
      node0.removeProp((-1833));
      node0.isGetElem();
      Node node1 = Node.newString("g<,)-l<$T^VOHOb");
      node1.hasChild(node0);
      node1.isNoSideEffectsCall();
      node1.isAssignAdd();
      node0.isIf();
      node0.isRegExp();
      node1.isOptionalArg();
      node0.toStringTree();
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Node node0 = Node.newNumber((-3551.10704), 46, 46);
      node0.isBreak();
      node0.isAssignAdd();
      node0.isAssignAdd();
      Node node1 = new Node(32, node0, node0);
      node0.hasChild(node1);
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Node node0 = new Node(1659);
      node0.addChildrenToBack(node0);
      node0.isExprResult();
      Node node1 = node0.removeChildren();
      node0.isEquivalentTo(node1, false, false, false);
      node0.useSourceInfoIfMissingFrom(node1);
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Node node0 = Node.newString("nm~");
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Node node0 = Node.newNumber((double) 718, 718, 718);
      Node node1 = new Node(0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.isThis();
      String string0 = node0.getString();
      node0.removeFirstChild();
      node1.getParent();
      // Undeclared exception!
      try { 
        Node.newString(string0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 718.0 718 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Node node0 = new Node(93, 2871, 93);
      Node node1 = new Node(15, node0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.isNE();
      node2.toStringTree();
      node2.hasOneChild();
      node0.isGetterDef();
      node0.checkTreeEquals(node2);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((double) 718, 718, 718);
      Node node1 = new Node(718, node0, node0, node0, 8192, (-1337));
      nodeArray0[0] = node1;
      Node node2 = new Node(718, nodeArray0, 50, 37);
      node1.isCall();
      node2.isLabelName();
      node0.getChildBefore(node2);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Node node0 = Node.newString("cgn@A*Y4pL+T)68Du7");
      node0.isOnlyModifiesThisCall();
      node0.isQualifiedName();
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.common.base.Joiner$MapJoiner");
      Node node0 = new Node((-3256), (Node) null, (-3256), 13);
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      Node node0 = new Node(130, 130, (-464));
      node0.putIntProp(57, 130);
      node0.getStaticSourceFile();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isInstanceOf();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node(37, node0);
      node1.useSourceInfoFromForTree(node0);
      node1.isNE();
      node0.toStringTree();
      node1.hasOneChild();
      node0.isGetterDef();
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Node node0 = Node.newNumber((-2896.012279043066));
      node0.setSourceFileForTesting("uJ*{TUe'dUVCY");
      node0.checkTreeEqualsImpl(node0);
      node0.isBlock();
      node0.isUnscopedQualifiedName();
      node0.isBreak();
      node0.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      Node node0 = new Node(153, 99, 153);
      node0.isSetterDef();
      Node node1 = Node.newNumber(46.0, 57, 29);
      Node node2 = node0.clonePropsFrom(node1);
      node2.getString();
      Node node3 = null;
      Node node4 = new Node(node2.DIRECTIVES, node3, node3);
      // Undeclared exception!
      try { 
        node1.isAdd();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // LABEL_NAME 99 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      Node node0 = Node.newString("", 100, 30);
      node0.removeProp((-1833));
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      Node node1 = new Node(49);
      node0.isEquivalentToShallow(node1);
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(1171, nodeArray0, 4095, 37);
      node1.getSourcePosition();
      Node node3 = new Node(130, node2);
      node3.addChildAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      Node node0 = Node.newString("^O");
      Node node1 = new Node(64, node0);
      node1.getSourceOffset();
      node1.addChildToBack((Node) null);
      node0.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 1429, 0);
      node0.isAnd();
      node0.getDouble();
      node0.setType(1427);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Node has existing propeties.");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Node has existing propeties.");
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      Node node0 = new Node(130, 130, (-8));
      node0.putIntProp(57, 130);
      node0.getStaticSourceFile();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(4095, nodeArray0, 130, 8);
      Node node2 = node1.copyInformationFrom(node0);
      node2.isEquivalentTo(node0, true, true, true);
      node1.getSourcePosition();
      node1.addChildAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.detachChildren();
      Node node1 = Node.newString("", 1928, 57);
      Node node2 = Node.newNumber(0.0, 47, 36);
      Node node3 = new Node(32, node1, node2, node2);
      Node node4 = Node.newString("", 38, (-691));
      node3.copyInformationFromForTree(node2);
      Node node5 = new Node(36, node0);
      node2.isQuotedString();
      node2.removeProp(12);
      node3.isGetElem();
      node0.toStringTree();
      node5.getLineno();
      node1.toStringTree();
      node0.removeFirstChild();
      node0.getParent();
      node5.setQuotedString();
      node4.cloneTree();
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeProp(12);
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node2 = new Node(38);
      Node node3 = Node.newString("Object#Key");
      node3.mayMutateGlobalStateOrThrow();
      Node.newNumber((double) 2, (-2391), 33);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.isObjectLit();
      node1.getQualifiedName();
      node1.isTry();
      node1.isLabelName();
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      Node node0 = Node.newNumber((double) 718, 718, 718);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1629));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags0.setMutatesThis();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = new Node(49, node0, node0, node0, node0);
      node1.isDefaultCase();
      node1.isHook();
      node0.isString();
      node0.isExprResult();
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      Node node0 = new Node(1659);
      node0.addChildrenToBack(node0);
      node0.detachFromParent();
      node0.useSourceInfoIfMissingFrom(node0);
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeProp(12);
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PARAM_LIST\n");
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node2 = new Node(38);
      node1.useSourceInfoFrom(node2);
      Node node3 = Node.newString("Object#Key");
      node3.mayMutateGlobalStateOrThrow();
      Node.newNumber((double) 2, (-2391), 33);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.isObjectLit();
      node1.getQualifiedName();
      node1.isTry();
      node1.isLabelName();
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("q2-;a&J]9aV`#.Q");
      node0.setQuotedString();
      Node.extractLineno(16);
      node0.setDouble(12);
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isSetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node0.isAssignAdd();
      Node node1 = new Node(32, node0, node0, 1, 2);
      Node node2 = Node.newString("EP iU=b./+O");
      node2.setQuotedString();
      Node.extractLineno((-969));
      node2.setDouble(1002.658444529809);
      node1.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = new Node(0, node0);
      node0.isFromExterns();
      node1.isCatch();
      Node node2 = node1.cloneTree();
      node2.isOptionalArg();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3873);
      node2.isIf();
      node1.getChildCount();
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.setChangeTime(115);
      node0.isGetElem();
      node0.toStringTree();
      node0.isOnlyModifiesThisCall();
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      Node node0 = new Node(153, 99, 153);
      node0.isSetterDef();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      Node node1 = new Node((-954));
      node1.isEquivalentToShallow(node0);
      Node node2 = new Node(16, node0, node1, node1, node0, 15, 210);
      node2.setChangeTime(115);
      node2.toString();
      int int0 = Node.INFERRED_FUNCTION;
      node1.isScript();
      node0.addChildBefore(node1, node2);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      Node node1 = Node.newString("", 8, 57);
      Node.newNumber((double) 1, 63, 51);
      Node node2 = new Node(0, node1, node0, node1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "input_id");
      Node.newString("", 132, 3428);
      Node node3 = node2.copyInformationFromForTree(node0);
      Node node4 = Node.newNumber(0.5, (-2149), 57);
      Node node5 = new Node(332, node4);
      node3.isOr();
      node0.removeProp(19);
      node3.isGetElem();
      String string0 = node5.toStringTree();
      int int0 = Node.NO_SIDE_EFFECTS;
      node3.toStringTree();
      int int1 = (-1126);
      int int2 = 32;
      Node node6 = new Node(node3.FLAG_ARGUMENTS_UNMODIFIED, int1, int2);
      node6.removeFirstChild();
      Node.newString(string0);
      node2.isArrayLit();
      node0.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(153, 153, 153);
      Node node1 = Node.newString("Object#Element");
      node0.isWhile();
      node0.useSourceInfoFrom(node1);
      Node node2 = Node.newString(42, "Object#Element");
      node2.isBlock();
      node0.isString();
      Node node3 = new Node(46, node2, node0, node0, node0);
      node1.isUnscopedQualifiedName();
      node2.isLabelName();
      node3.removeProp(1);
      node2.setLineno(31);
      node0.getType();
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      Node node0 = Node.newString(126, "(D");
      Node node1 = null;
      node0.isEquivalentTo((Node) null, false, true, true);
      node0.getChildBefore(node1);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      Node node0 = Node.newString(126, "~Bi-NzXnb6", 126, 126);
      node0.isVoid();
      Node node1 = new Node(126, node0);
      node0.setQuotedString();
      node1.cloneTree();
      Node.extractLineno((-221));
      node1.setDouble(40);
      node0.isOnlyModifiesArgumentsCall();
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[3];
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      jSTypeArray0[0] = (JSType) functionType0;
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(jSTypeArray0[0]);
      jSTypeArray0[1] = jSType0;
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Not declared as a type name");
      jSTypeArray0[2] = (JSType) templateType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = new Node((-387), node0, node0, node0, node0);
      node1.cloneTree();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList.copyOf(jSTypeArray0);
      Node node0 = new Node(83);
      int int0 = Node.FLAG_LOCAL_RESULTS;
      node0.getBooleanProp(112);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.addChildrenToFront(node1);
      node0.isOnlyModifiesThisCall();
      node0.isEquivalentToShallow(node1);
      Node node2 = node0.removeFirstChild();
      node2.getStaticSourceFile();
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isSetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node0.isAssignAdd();
      Node node1 = new Node(32, node0, node0, 1, 2);
      node0.setLineno(0);
      node1.isVoid();
      node1.setSourceFileForTesting("]_Q_.6FJW`-!");
      Node node2 = node0.srcrefTree(node1);
      node1.getChildCount();
      node2.isObjectLit();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[4];
      TemplateTypeMap templateTypeMap0 = jSTypeRegistry0.createTemplateTypeMap((ImmutableList<TemplateType>) null, (ImmutableList<JSType>) null);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, templateTypeMap0);
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn((TemplateTypeMap) null).when(unionType0).getTemplateTypeMap();
      doReturn(false).when(unionType0).hasAnyTemplateTypes();
      doReturn(false, false).when(unionType0).isAllType();
      doReturn(false, false).when(unionType0).isFunctionType();
      doReturn(false).when(unionType0).isNoResolvedType();
      doReturn(false).when(unionType0).isNoType();
      doReturn(false).when(unionType0).isTemplatizedType();
      doReturn(false).when(unionType0).isUnionType();
      doReturn((ObjectType) null).when(unionType0).toObjectType();
      doReturn((Collection) null).when(unionType0).getAlternates();
      doReturn(false, false, false).when(unionType0).isUnknownType();
      JSType jSType0 = templateTypeMapReplacer0.caseUnionType(unionType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("]_Q_.6FJW`-!", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      jSTypeArray0[0] = (JSType) enumType1;
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSTypeArray0[0]);
      jSTypeArray0[1] = (JSType) null;
      JSType jSType1 = jSTypeRegistry0.createNullableType(jSType0);
      jSTypeArray0[2] = jSType1;
      JSType jSType2 = templateTypeMapReplacer0.caseFunctionType(functionType0);
      jSType2.getTypesUnderInequality(jSType0);
      jSTypeArray0[3] = jSType2;
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Node node0 = new Node((-2044), (-2044), (-2044));
      node0.putIntProp((-168), (-2044));
      node0.getStaticSourceFile();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)26;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isInstanceOf();
      Node node1 = new Node((-650), node0, node0, (-704), (byte)51);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node2 = new Node((-3207), node1);
      Node node3 = node1.useSourceInfoFromForTree(node0);
      node2.isNE();
      node0.toStringTree();
      node3.hasOneChild();
      node1.isGetterDef();
      int int0 = 46;
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node3;
      nodeArray0[1] = node1;
      nodeArray0[2] = node1;
      nodeArray0[3] = node0;
      nodeArray0[4] = node1;
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "n:N_cd^Ikg&K*N V9aj";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(1024, "n:N_cd^Ikg&K*N V9aj");
      node0.isEmpty();
      Node node1 = node0.getNext();
      Node node2 = Node.newNumber((-2163.55927637657));
      node0.getQualifiedName();
      boolean boolean1 = true;
      node2.useSourceInfoFromForTree((Node) null);
      node2.setIsSyntheticBlock(boolean1);
      node1.setVarArgs(boolean0);
      // Undeclared exception!
      try { 
        node0.isCast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      Node node0 = new Node(130, 130, (-8));
      node0.putIntProp(57, 130);
      node0.getStaticSourceFile();
      node0.setSourceEncodedPositionForTree((-8));
      Node node1 = node0.useSourceInfoFromForTree((Node) null);
      node0.isNE();
      node1.toStringTree();
      // Undeclared exception!
      try { 
        node0.hasOneChild();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("Object#Key");
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.setType(54);
      node0.isSwitch();
      node0.getJsDocBuilderForNode();
      node0.isVar();
      Node node1 = Node.newString(52, "Object#Key");
      node1.setLineno((-372));
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node node3 = node2.copyInformationFrom(node0);
      node3.isOptionalArg();
      node2.useSourceInfoFrom(node0);
      node1.getProp(56);
      node0.isThis();
      node0.isVarArgs();
      node0.getJSDocInfo();
      node3.isTypeOf();
      node2.copyInformationFrom(node3);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      Node node0 = new Node(56, 56, 56);
      node0.isIn();
      node0.isExprResult();
      node0.isEquivalentTo(node0, true, false, true);
      Node node1 = new Node(49, node0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.isCall();
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isSetterDef();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pGI8");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node0.isAssignAdd();
      Node node1 = new Node(32, node0, node0, 1, 2);
      Node node2 = Node.newString("EP iU=b./+O");
      node2.setQuotedString();
      node2.isQuotedString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.isOnlyModifiesThisCall();
      node2.isQualifiedName();
      node1.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      Node node0 = new Node(115);
      node0.putBooleanProp(115, true);
      node0.isParamList();
      node0.getBooleanProp(115);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.checkTreeTypeAwareEqualsImpl((Node) null);
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\",us'Pv[6pdk,p#K`)");
      Node node0 = new Node(115, 115, 115);
      node0.isWith();
      node0.isFor();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node0.isAssignAdd();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(16);
      node0.isAnd();
      Node node1 = node0.cloneTree();
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node1.isIf();
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Node node0 = new Node(99, 2871, 99);
      Node node1 = new Node(15, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(49);
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setMutatesThis();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.isDefaultCase();
      node0.isHook();
      node1.isString();
      node1.isExprResult();
      Node node2 = node0.cloneNode();
      node1.srcrefTree(node2);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      Node node0 = new Node(8199, 2871, 8199);
      Node node1 = new Node(33, node0);
      node0.isScript();
      Node node2 = new Node(51, node0, node0, node1, node1, (-174), 2);
      String string0 = node2.getString();
      node2.removeFirstChild();
      node0.getParent();
      Node.newString(string0);
      // Undeclared exception!
      try { 
        node1.isArrayLit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      Node node0 = new Node(34, 2239, 109);
      Node node1 = new Node(32, node0);
      node0.isFromExterns();
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(46, nodeArray0);
      node1.addChildrenToFront(node2);
      node0.setChangeTime(31);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.detachChildren();
      Node node1 = Node.newString("", 1928, 57);
      Node node2 = Node.newNumber(0.0, 47, 36);
      Node node3 = new Node(32, node1, node2, node2);
      node1.copyInformationFromForTree(node2);
      node3.getBooleanProp(127);
      node3.addChildrenToFront(node0);
      node0.isOnlyModifiesThisCall();
      node0.isEquivalentToShallow(node1);
      node2.removeFirstChild();
      node3.getStaticSourceFile();
      node3.isDec();
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Node node0 = Node.newString("{(");
      node0.toStringTree();
      node0.removeChild((Node) null);
      node0.siblings();
      // Undeclared exception!
      try { 
        node0.isThis();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "EP iU=b./+O");
      Node node0 = new Node(115, 2842, 36);
      node0.isHook();
      node0.isFor();
      node0.setOptionalArg(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      node0.putIntProp(51, 3);
      node0.getStaticSourceFile();
      node0.isContinue();
      int int0 = 1404;
      node0.getIntProp(int0);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isFunction();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.isCall();
      Node node1 = new Node(32, node0, node0, 1, 2);
      Node node2 = Node.newString("EP iU=b./+O");
      node2.setQuotedString();
      Node.extractLineno((-969));
      node2.setDouble(1002.658444529809);
      node1.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isSetterDef();
      node0.isAssign();
      node0.toString();
      Node node1 = Node.newString("FOR");
      node0.getSideEffectFlags();
      node0.getBooleanProp(54);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.isAssignAdd();
      Node node2 = new Node(48, node1, node0, 4, 43);
      node0.getBooleanProp(48);
      node1.addChildrenToFront(node2);
      node2.isOnlyModifiesThisCall();
      node2.isEquivalentToShallow(node1);
      node2.removeFirstChild();
      node2.getStaticSourceFile();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      Node node0 = new Node(12, 12, 33);
      node0.getQualifiedName();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      Node node0 = new Node(56, 56, 56);
      node0.isIn();
      node0.isExprResult();
      Node node1 = new Node(108, 53, 51);
      node0.copyInformationFrom(node1);
      node0.setQuotedString();
      node0.isArrayLit();
      Node node2 = null;
      try {
        node2 = new Node(node0.MAX_COLUMN_NUMBER, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Node node0 = Node.newString("nm~");
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals("nm~");
      node0.checkTreeEqualsImpl((Node) null);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Node node0 = Node.newString("2ui8eb(2");
      Node node1 = new Node(52, node0, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.checkTreeTypeAwareEqualsImpl(node1);
      node1.isBlock();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Node node0 = Node.newString("F(", 34, 34);
      Node node1 = new Node(16, node0, node0, node0, 0, 42);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.isAdd();
      node0.isAnd();
      Node node2 = Node.newNumber(41.66141667391669, (-847), 29);
      node2.isFunction();
      node1.isDec();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative jSTypeNative0 = JSTypeNative.EVAL_ERROR_TYPE;
      jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      node1.isNew();
      node2.isVarArgs();
      node2.isDo();
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      Node node0 = Node.newString("cgn@*Y4pL+Tc68Du7");
      node0.setLength(1767);
      node0.isWhile();
      node0.isOr();
      node0.setLineno(1767);
      node0.isHook();
      node0.setDouble(1767);
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      Node node0 = Node.newString("", 100, 30);
      node0.removeProp((-1833));
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      Node node1 = new Node(49);
      node0.isEquivalentToShallow(node1);
      node0.setLength(2);
      Node.newString("prototype", 42, 32);
      Node node2 = new Node(46, node1, node1, node1, node1, 111, 1);
      node2.setChangeTime(100);
      node0.toString();
      int int0 = Node.INFERRED_FUNCTION;
      node0.isScript();
      node2.addChildBefore(node0, node1);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isSetterDef();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isAdd();
      node0.isDec();
      node0.isOnlyModifiesThisCall();
      node0.isQualifiedName();
      node0.isNull();
      node0.isEquivalentTo(node0);
      node0.isLocalResultCall();
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      Node node0 = new Node(105, 126, 105);
      node0.isUnscopedQualifiedName();
      node0.isFunction();
      int int0 = Node.DECR_FLAG;
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      Node node0 = new Node(52, 45, 52);
      node0.isDebugger();
      node0.cloneNode();
      node0.isParamList();
      Node node1 = new Node(54, node0, node0, 50, 36);
      node1.getBooleanProp(1);
      node0.addChildrenToFront(node1);
      Node node2 = new Node(12, node0, 49, 53);
      node1.removeChildAfter(node2);
      node1.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      Node node0 = new Node(115, 115, 140);
      node0.isNumber();
      node0.getSideEffectFlags();
      Node node1 = new Node(55);
      node1.getBooleanProp(1572);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node2 = new Node(30, node1, node0, node1, node0);
      Node node3 = Node.newString("slash_v", (-559), (-2407));
      node2.useSourceInfoFromForTree(node3);
      node2.isCall();
      node2.isQualifiedName();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      Node node0 = Node.newString(153, "Node tree inequality:\nTree1:\n");
      Node node1 = Node.newNumber((double) 0);
      node0.copyInformationFromForTree((Node) null);
      node1.isName();
      node1.isComma();
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      Node node0 = new Node(110, (-646), 110);
      node0.isWhile();
      node0.useSourceInfoFrom(node0);
      Node node1 = Node.newString(42, "/5z~`,kw5Zc1HuG5");
      node0.isString();
      node0.isAdd();
      node1.mayMutateGlobalStateOrThrow();
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      Node node0 = new Node(38, 38, 38);
      node0.isSyntheticBlock();
      node0.isEquivalentTo(node0, false, false, false);
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      Node node0 = new Node(60, 43, 60);
      Node node1 = new Node(38, node0, node0, node0, 9, 9);
      node1.isUnscopedQualifiedName();
      int int0 = 16;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(int0);
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = null;
      try {
        node_SideEffectFlags1 = new Node.SideEffectFlags(node0.QUOTED_PROP);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 9 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Node node0 = Node.newString("g<,)-l<$T^VOHOb");
      node0.isFunction();
      node0.isDec();
      node0.isNew();
      node0.isVarArgs();
      node0.isDo();
      node0.useSourceInfoIfMissingFrom((Node) null);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Node node0 = new Node(115, 115, 140);
      node0.isNumber();
      node0.isGetElem();
      node0.toStringTree();
      int int0 = Node.DIRECTIVES;
      node0.toStringTree();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.getIntProp(48);
      node0.isDefaultCase();
      node0.isHook();
      node0.isString();
      node0.isExprResult();
      Node node1 = node0.cloneNode();
      Node node2 = new Node(8, node0, node1, node1, node0, 3435, 2);
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node2);
      node3.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.detachChildren();
      Node node1 = Node.newString("g<,)-l<$T^VOHOb", 4095, 30);
      Node node2 = Node.newNumber((double) 4, 37, (-803));
      Node node3 = Node.newNumber(1945.6);
      Node node4 = new Node(2, node3, node3, node2);
      Node node5 = Node.newString("}%bZjg,k5", 4095, 32);
      Node node6 = node0.copyInformationFromForTree(node4);
      Node node7 = new Node(47, node4);
      node1.isQuotedString();
      node5.removeProp(42);
      node6.isGetElem();
      node4.isDo();
      node6.isNot();
      node4.getChildAtIndex(13);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(51, (-3777), 51);
      Node node1 = new Node(40, node0);
      node1.isFromExterns();
      node0.isCatch();
      node0.cloneTree();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      int int0 = Node.DECR_FLAG;
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      Node node0 = new Node((-2544), (-2544), (-876));
      Node node1 = Node.newString(39, "_?3v(L?Q");
      Node node2 = new Node(37, node1);
      node2.isFromExterns();
      node0.isCatch();
      Node node3 = node2.cloneTree();
      node0.checkTreeTypeAwareEqualsImpl(node3);
      int int0 = Node.DECR_FLAG;
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      Node node0 = new Node(60, 43, 60);
      Node node1 = new Node(4095, node0);
      node1.isUnscopedQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(36);
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.areAllFlagsSet();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.isTrue();
      node1.isCase();
      node1.isStringKey();
      Node node2 = new Node(47, (-3809), (-942));
      node2.useSourceInfoFromForTree(node0);
      Node node3 = new Node(51);
      node0.isEquivalentTo(node3);
      node1.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Node node0 = new Node(115, 115, 140);
      node0.isNumber();
      node0.isGetElem();
      node0.toStringTree();
      int int0 = Node.DIRECTIVES;
      node0.toStringTree();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isDefaultCase();
      node0.isHook();
      node0.isString();
      node0.isExprResult();
      Node node1 = node0.cloneNode();
      node1.removeProp(12);
      Node.extractCharno(0);
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(38);
      Node node1 = Node.newString(2635, "\"v^0z+\"_LW1-#&", (-3901), 36);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.getBooleanProp((-2796));
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      Node node0 = new Node(105, 105, 1857);
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(36);
      node_SideEffectFlags1.setMutatesGlobalState();
      node0.isParamList();
      node0.isComma();
      Node node1 = node0.cloneNode();
      node1.setQuotedString();
      int int0 = 4;
      String string0 = "ZpQ{4";
      // Undeclared exception!
      try { 
        node0.getJSDocInfo();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      Node node0 = new Node(110, (-646), 110);
      Node node1 = new Node(54);
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(12, node0, node0, node0);
      Node node3 = new Node(15, (-1908), 38);
      node3.setSourceFileForTesting("\n\nTree2:\n");
      Node.newNumber((double) 8, 1191, 50);
      Node node4 = new Node(61650);
      Node node5 = Node.newString("\n\nTree2:\n");
      node4.isNot();
      node5.isOnlyModifiesThisCall();
      Node.extractCharno((-4572));
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      Node node0 = new Node(130, 130, (-464));
      node0.putIntProp(57, 130);
      node0.getStaticSourceFile();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.checkTreeTypeAwareEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node(37, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isEquivalentToShallow(node1);
      node0.toStringTree();
      node1.hasOneChild();
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      Node node0 = new Node(54, 45, 54);
      node0.isDebugger();
      node0.isStringKey();
      Node node1 = new Node(0, node0);
      Node node2 = new Node(0, node1, node1, 54, 31);
      node0.isCast();
      node1.isReturn();
      node2.isEquivalentToShallow(node1);
      Node node3 = Node.newNumber((-1.0), 36, 30);
      Node node4 = new Node(33, node2, node0, node3);
      node0.getStaticSourceFile();
      node2.getType();
      node4.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      Node node0 = new Node(54, 45, 54);
      node0.isDebugger();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isStringKey();
      Node node1 = new Node(0, node0);
      Node node2 = new Node(0, node1, node1, 54, 31);
      node0.isCast();
      node0.addChildrenToFront(node2);
      node1.isReturn();
      node1.isEquivalentToShallow(node2);
      Node node3 = new Node((-2607), node0, node2, node0);
      JSDocInfo jSDocInfo0 = null;
      node3.setJSDocInfo(jSDocInfo0);
      node0.getStaticSourceFile();
      // Undeclared exception!
      try { 
        node1.getType();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node0.isBreak();
      int int0 = Node.DECR_FLAG;
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      Node node0 = new Node(105, 105, 1857);
      node0.isUnscopedQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = new Node(358, node0, node0, (-1632), 59);
      node0.getBooleanProp(54);
      node0.addChildrenToFront(node1);
      node0.isOnlyModifiesThisCall();
      Node node2 = new Node(916, 36, 15);
      node2.isEquivalentToShallow(node0);
      Node node3 = node1.removeFirstChild();
      node2.getStaticSourceFile();
      node3.isSwitch();
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      Node node0 = new Node(142, 35, (-637));
      Node node1 = new Node(122, node0);
      node1.isFromExterns();
      node1.isCatch();
      Node node2 = node0.cloneTree();
      node2.getQualifiedName();
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node1.isQualifiedName();
      node1.isName();
      node1.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      Node node0 = new Node(54, 45, 54);
      node0.isDebugger();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isStringKey();
      Node node1 = new Node(0, node0);
      Node node2 = new Node(0, node1, node1, 54, 31);
      node0.isCast();
      node0.addChildrenToFront(node2);
      node1.isReturn();
      node1.isEquivalentToShallow(node2);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.isAdd();
      node1.setJSDocInfo(jSDocInfo0);
      Node node3 = new Node((-2607), node0, node2, node0);
      JSDocInfo jSDocInfo1 = null;
      node3.setJSDocInfo(jSDocInfo1);
      node0.getStaticSourceFile();
      node1.getType();
      // Undeclared exception!
      try { 
        node1.isOptionalArg();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      Node node0 = new Node(153, 99, 153);
      node0.isSetterDef();
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node0.isAnd();
      node0.isAssignAdd();
      node0.isAssignAdd();
      Node node1 = node0.cloneNode();
      node0.isEquivalentTo(node1, false, false, false);
      node0.srcref(node1);
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\",us'Pv[6pdk,p#K`)");
      Node node0 = new Node(115, 115, 115);
      node0.isWith();
      node0.isFor();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      Node node1 = node0.setJSDocInfo((JSDocInfo) null);
      node1.getStaticSourceFile();
      node1.getType();
      node0.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      Node node0 = new Node(93);
      node0.isAnd();
      node0.isNot();
      node0.getDirectives();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(52, node0, node0, node0);
      node1.children();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(2237, 132, 132);
      node0.siblings();
      Node node1 = new Node(1633, node0, node0, 2908, 528);
      node1.removeChild(node0);
      node1.isDelProp();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)119;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isVarArgs();
      node1.setDouble(0.7);
      node1.isOnlyModifiesArgumentsCall();
      node1.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getSourceFileName();
      Node node1 = new Node(16, node0, node0);
      Node node2 = new Node(55);
      node1.addChildAfter(node2, node0);
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      Node node0 = new Node(671, 671, 671);
      Node node1 = new Node(671, node0);
      Node node2 = node1.srcrefTree(node0);
      node2.addChildBefore(node1, node0);
      node2.setIsSyntheticBlock(false);
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.stream();
      hashSet0.add("FOR");
      node0.checkTreeEqualsImpl(node2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node2.setDirectives(hashSet0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node3 = Node.newString((-2263), "", 2291, 1);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.setDescription("");
      Node node4 = node1.setJSDocInfo(jSDocInfo0);
      node4.isLocalResultCall();
      node0.getLastSibling();
      node3.isTypeOf();
      node3.wasEmptyNode();
      node2.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      Node node0 = new Node(130, 130, (-8));
      node0.putIntProp(57, 130);
      node0.getStaticSourceFile();
      node0.setSourceEncodedPositionForTree((-8));
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(4095, nodeArray0, 130, 8);
      node1.addChildToFront(node0);
      node1.getSourcePosition();
      node1.removeProp(16);
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      Node node0 = new Node(115, 115, 140);
      node0.isNumber();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = new Node(32, 38, 98);
      node1.clonePropsFrom(node0);
      node0.isInc();
      node1.addSuppression("Object#Element");
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      Node node0 = new Node(130, 130, (-464));
      node0.putIntProp(57, 130);
      node0.getStaticSourceFile();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isInstanceOf();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      Node node1 = node0.cloneTree();
      node0.getSourceFileName();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isScript();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.checkTreeEqualsImpl(node2);
      node2.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isSetterDef();
      Node node1 = new Node(57, 1524, 57);
      node1.isNumber();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node2 = new Node((-627), 15, (-4376));
      Node node3 = node2.clonePropsFrom(node0);
      node3.isInc();
      node2.addSuppression("Object#Key");
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      Node node0 = Node.newString(126, "(D", 126, 126);
      Node node1 = new Node(126, node0, 4095, 49);
      node1.isReturn();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      Node node0 = Node.newString("g/}=\"9~[@#K#KhMG", (-19), (-19));
      node0.isDec();
      Node node1 = new Node(51, 15, 50);
      node1.clonePropsFrom(node0);
      node0.isFalse();
      node1.addSuppression("g/}=\"9~[@#K#KhMG");
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Node node0 = new Node(93, nodeArray0, 117, 3087);
      Node node1 = Node.newString(57, "avvgK_Y*$d", 305, 93);
      Node node2 = new Node(1, node0, node0, node1, (-464), 1);
      node0.getIndexOfChild(node2);
      Node node3 = Node.newString(42, "avvgK_Y*$d");
      node1.getType();
      node3.getLastChild();
      node2.detachFromParent();
      double double0 = (-1.0);
      Node.newNumber(double0);
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      Node node0 = Node.newString("~");
      node0.isThis();
      Node node1 = Node.newString(2044, "~");
      node0.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      Node node0 = new Node(54, 45, 54);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isStringKey();
      Node node1 = new Node(0, node0);
      Node node2 = new Node(0, node1, node1, 54, 31);
      node0.isCast();
      node0.addChildrenToFront(node2);
      node1.isReturn();
      node1.isEquivalentToShallow(node2);
      Node node3 = node1.cloneNode();
      Node[] nodeArray0 = new Node[0];
      Node node4 = new Node(1, nodeArray0);
      Node node5 = new Node(4, nodeArray0, 1, 32);
      node4.isEquivalentTo(node5, false, true, false);
      node2.addChildAfter(node5, node3);
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      Node node1 = Node.newNumber((-2089.3189652580418), (-1188), 30);
      Node node2 = new Node(4, node0, node0);
      Node node3 = node2.clonePropsFrom(node1);
      Node node4 = new Node((-4461));
      node0.isEquivalentToShallow(node4);
      Node node5 = new Node(49, node3, node1, node1, node4, 111, (-560));
      Node node6 = new Node(15, node1, node5);
      node6.isRegExp();
      node6.isScript();
      node1.isArrayLit();
      int int0 = (-3142);
      Node node7 = new Node(int0, node0, node2);
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      Node node0 = new Node(93);
      node0.isAnd();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.areAllFlagsSet();
      Node node1 = new Node(51);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      Node node2 = new Node(35, 14, 1);
      node0.isNE();
      node0.isBreak();
      node2.useSourceInfoIfMissingFromForTree(node0);
      node1.children();
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      Node node0 = new Node(130, 130, (-464));
      node0.putIntProp(57, 130);
      node0.getStaticSourceFile();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isCatch();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node(37, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isEquivalentToShallow(node1);
      node0.toStringTree();
      node1.hasOneChild();
      node0.isGetterDef();
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isDo();
      node0.isStringKey();
      node0.addChildrenToFront(node0);
      Node node1 = node0.getChildBefore((Node) null);
      node0.hasOneChild();
      node0.isCase();
      node0.isString();
      node0.mayMutateGlobalStateOrThrow();
      node0.isObjectLit();
      node1.toStringTree();
      node1.detachFromParent();
      // Undeclared exception!
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      Node node0 = new Node(171, 99, 171);
      node0.isSetterDef();
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node0.isAnd();
      node0.isAssignAdd();
      node0.isAssignAdd();
      Node node1 = node0.cloneNode();
      node0.hasChildren();
      node1.isLabel();
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      Node node0 = new Node(93);
      node0.isAnd();
      node0.isNot();
      HashSet<String> hashSet0 = new HashSet<String>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = Node.newString(" ~Ky:wI<v,T");
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isIn();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      Node node0 = new Node(130, 130, (-8));
      node0.putIntProp(57, 130);
      node0.getStaticSourceFile();
      node0.setSourceEncodedPositionForTree((-8));
      node0.isAssignAdd();
      node0.isAssignAdd();
      Node node1 = node0.cloneNode();
      node0.setLength(115);
      node0.isEquivalentTo(node1, false, true, false);
      node0.addChildAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      Node node0 = new Node((-765));
      node0.putIntProp(57, (-765));
      node0.isString();
      node0.isUnscopedQualifiedName();
      node0.setSideEffectFlags((-765));
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      Node node0 = new Node(54, 45, 54);
      node0.isDebugger();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isStringKey();
      Node node1 = new Node(0, node0);
      Node node2 = new Node(0, node1, node1, 54, 31);
      Node node3 = Node.newString(1548, "DELPROP", 99, 46);
      Node node4 = new Node(56, node2, node2, node2, 42, 30);
      node1.getIndexOfChild(node3);
      Node.newString(46, "DELPROP");
      node1.getType();
      node2.getLastChild();
      node2.detachFromParent();
      Node.newNumber(0.5);
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      Node node0 = new Node(54, 45, 54);
      node0.isDebugger();
      node0.isStringKey();
      Node node1 = new Node(0, node0);
      Node node2 = new Node(0, node1, node1, 54, 31);
      Node node3 = Node.newString(1548, "DELPROP", 99, 46);
      Node node4 = new Node(56, node2, node2, node2, 42, 30);
      node1.getIndexOfChild(node3);
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      Node node0 = new Node(99, 47, 99);
      node0.isSetterDef();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wgL");
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      node0.isAnd();
      Node node1 = new Node(30, 1, 38);
      node1.isAssignAdd();
      node1.detachChildren();
      Node node2 = new Node(52, 0, 52);
      node2.isAssignAdd();
      Node node3 = node2.cloneNode();
      Node.newString("", 29, 97);
      node3.isEquivalentTo(node0, true, true, true);
      node3.addChildAfter(node0, node0);
      node1.useSourceInfoIfMissingFrom(node2);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      Node node0 = new Node(105);
      node0.isOnlyModifiesThisCall();
      node0.isParamList();
      node0.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      node0.cloneTree();
      Node node1 = new Node(2685, node0);
      node1.setQuotedString();
      node0.isName();
      Node.extractLineno(node1.INFERRED_FUNCTION);
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      Node node0 = new Node(115, 115, 140);
      node0.isNumber();
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      Node node1 = new Node(301, 1, 32);
      Node node2 = new Node(153, node0, node1);
      node0.copyInformationFrom(node2);
      node0.isEquivalentToShallow(node0);
      node0.isUnscopedQualifiedName();
      node0.isLabelName();
      node0.isSetterDef();
      node0.isSwitch();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(49);
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      Node node0 = new Node(115, 115, 140);
      node0.isNumber();
      Node node1 = node0.clonePropsFrom(node0);
      Node node2 = new Node((-2756), node0);
      node2.copyInformationFromForTree(node0);
      node1.isEquivalentToShallow(node2);
      node1.isGetProp();
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.detachChildren();
      Node node1 = Node.newString("", 1928, 57);
      Node node2 = Node.newNumber(0.0, 47, 36);
      Node node3 = new Node(32, node1, node2, node2);
      Node node4 = Node.newString("", 38, (-691));
      Node node5 = node3.copyInformationFromForTree(node2);
      Node node6 = new Node(36, node0);
      node0.isNE();
      node5.setType((-1791));
      node4.isBreak();
      node5.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      Node node0 = new Node(130, 130, (-8));
      node0.putIntProp(57, 130);
      node0.getStaticSourceFile();
      node0.setSourceEncodedPositionForTree((-8));
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(4095, nodeArray0, 130, 8);
      node0.srcref(node1);
      node1.addChildToFront(node0);
      node1.getSourcePosition();
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = (-774);
      Node node0 = new Node(77, (-774), (-774));
      node0.isDelProp();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7e3XKxBJ-d86361");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) linkedHashSet0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Element");
      node0.isOptionalArg();
      int int1 = 103;
      node0.isVarArgs();
      InputId inputId0 = new InputId("");
      node2.getSourceFileName();
      SimpleErrorReporter.getMessage1("Object#Element", inputId0);
      node2.setWasEmptyNode(boolean0);
      boolean boolean1 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(jSTypeRegistry0.OBJECT_INDEX_TEMPLATE, boolean1);
      node1.setStaticSourceFile(simpleSourceFile0);
      String string0 = "EP iU=b./+O";
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      Node node0 = new Node(99, 2871, 99);
      Node node1 = new Node(15, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(49);
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node1.setType(30);
      node_SideEffectFlags1.setMutatesThis();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.isDefaultCase();
      node0.isHook();
      node1.isString();
      node1.isExprResult();
      Node node2 = node0.cloneNode();
      node1.srcrefTree(node2);
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Node node1 = new Node(3412, 102, 0);
      node0.isNumber();
      Node node2 = new Node(147, 40, 1);
      node2.isOnlyModifiesThisCall();
      node1.clonePropsFrom(node2);
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      Node node0 = new Node(4931, 115, 126);
      node0.isWith();
      node0.isFor();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(42);
      int int0 = 2105;
      Node node1 = new Node(49, node0, node0, 30, 2105);
      Node node2 = new Node(31, node0, node0, node1);
      Node node3 = new Node(int0, node0, node2, node2, node2.FREE_CALL, node0.CHANGE_TIME);
      int int1 = 46;
      node3.putIntProp(int1, node0.OPT_ARG_NAME);
      // Undeclared exception!
      try { 
        node1.getStaticSourceFile();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isBreak();
      int int0 = Node.DECR_FLAG;
      node0.isNot();
      node0.isHook();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getAssociatedNode();
      node0.addChildrenAfter((Node) null, (Node) null);
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isBreak();
      int int0 = Node.DECR_FLAG;
      node0.isNot();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getAssociatedNode();
      node0.addChildrenAfter((Node) null, (Node) null);
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      Node node0 = new Node(105);
      node0.isName();
      node0.toString();
      Node node1 = new Node(2656, node0);
      node0.setLength(2);
      node1.isNE();
      node0.isLocalResultCall();
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      Node node0 = new Node(104, 2855, 104);
      Node node1 = new Node(31);
      node1.checkTreeEqualsImpl(node1);
      node0.isBlock();
      node1.copyInformationFromForTree(node0);
      node0.isDo();
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      Node node0 = new Node(105, 105, 1857);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1635));
      node_SideEffectFlags0.areAllFlagsSet();
      Node node1 = new Node(37);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node0.srcref(node1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node2 = new Node(30, 406, 37);
      node2.isNE();
      node0.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/B'E( 7hpg=Tt;9");
      Node node0 = new Node((-1143));
      node0.setVarArgs(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object#Element");
      Node node1 = Node.newNumber((double) 36, 130, 8);
      node0.putIntProp(112, 47);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.setLineno(262144);
      node0.setLineno((-1143));
      node0.getType();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.setDeprecationReason("Object#Key");
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      node2.getInputId();
      node1.replaceChild(node0, node0);
      node1.checkTreeEquals(node0);
      int int0 = 1;
      node0.setLineno(int0);
      node0.isDec();
      Node node3 = node0.clonePropsFrom(node1);
      Node node4 = node3.useSourceInfoFrom(node1);
      node3.isBlock();
      node0.getInputId();
      // Undeclared exception!
      try { 
        node4.isContinue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(57);
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node1 = new Node(12);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node0);
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node0.isAssignAdd();
      Node node2 = new Node(110, node0, node0);
      Node node3 = node2.cloneNode();
      node2.isEquivalentTo(node1, false, false, false);
      node1.addChildAfter(node3, node2);
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      Node node0 = Node.newNumber((-3562.234845479421));
      node0.getDouble();
      Node node1 = new Node(977, node0, node0, node0, node0, (-659), 50);
      node1.isSyntheticBlock();
      node0.getSourceOffset();
      node1.isEmpty();
      node1.wasEmptyNode();
      node1.detachFromParent();
      node0.isName();
      node1.isTypeOf();
      // Undeclared exception!
      try { 
        node0.copyInformationFrom(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      Node node0 = new Node(383, 45, 45);
      node0.isDebugger();
      node0.isStringKey();
      Node node1 = new Node(0, node0);
      Node node2 = new Node(32, node0, node0, 16384, 8);
      node1.isCast();
      node1.isReturn();
      int int0 = 3281;
      Node node3 = new Node(int0, node0, node2, node2);
      JSDocInfo jSDocInfo0 = null;
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      Node node0 = new Node(110, 673, 56);
      Node node1 = new Node(2, node0);
      node1.removeChild(node0);
      node0.isFromExterns();
      Node node2 = node0.cloneTree();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node2.isQualifiedName();
      node1.isName();
      node0.isNew();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.detachChildren();
      Node node1 = Node.newString("", 1928, 57);
      Node node2 = new Node(49);
      int int0 = 53;
      Node node3 = new Node(53, node1, node1, node2, node0, 8, 56);
      node1.getJsDocBuilderForNode();
      node3.getQualifiedName();
      node3.replaceChildAfter(node1, node2);
      node2.setCharno(int0);
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      Node node0 = Node.newString("", 100, 30);
      node0.removeProp((-1833));
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      Node node1 = new Node(49);
      node0.isEquivalentToShallow(node1);
      node0.setLength(2);
      Node node2 = new Node(4, node1);
      node2.isReturn();
      node0.isCase();
      node0.isString();
      node0.mayMutateGlobalStateOrThrow();
      node2.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      Node node0 = Node.newString(126, "~Bi-NzXnb6", 126, 126);
      node0.isVoid();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = jSDocInfo0.getAssociatedNode();
      node0.isEquivalentTo((Node) null);
      node0.isCast();
      // Undeclared exception!
      try { 
        node0.setLineno(node1.MAX_COLUMN_NUMBER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isDo();
      node0.addChildrenToBack(node0);
      node0.isExprResult();
      Node node1 = node0.removeChildren();
      Node node2 = new Node(51, node0);
      node2.isEquivalentTo(node1, true, false, true);
      node1.replaceChildAfter(node2, node0);
      node2.setCharno(node1.JSDOC_INFO_PROP);
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      Node node0 = new Node(130, 130, (-464));
      node0.putIntProp(57, 130);
      node0.getStaticSourceFile();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isCatch();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.useSourceInfoFromForTree(node0);
      node0.setChangeTime(2);
      int int0 = Node.INFERRED_FUNCTION;
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      Node node0 = new Node(104, 104, 104);
      node0.isDo();
      node0.isHook();
      node0.addChildrenToFront(node0);
      node0.isReturn();
      Node node1 = Node.newString("com.google.javascript.rhino.jstype.JSType$TypePair");
      node0.addChildToFront(node1);
      node1.getSourcePosition();
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      Node node0 = new Node(34, 2239, 109);
      Node node1 = new Node(32, node0);
      node0.isFromExterns();
      node1.isCatch();
      Node node2 = node1.cloneTree();
      node2.checkTreeTypeAwareEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node1.addChildToFront(node2);
      node_SideEffectFlags2.setThrows();
      node2.setSideEffectFlags(node_SideEffectFlags1);
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      Node node0 = new Node(99, 99, 99);
      node0.isSetterDef();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wgL");
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      node0.isAnd();
      Node node1 = new Node(0, 1, 38);
      node1.isAssignAdd();
      node1.detachChildren();
      Node node2 = new Node(52, 48, 52);
      node2.isAssignAdd();
      Node node3 = node2.cloneNode();
      node3.copyInformationFrom(node1);
      Node node4 = new Node(42, node3, node0, 12, 37);
      node4.wasEmptyNode();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      Node node0 = new Node(130, 130, (-464));
      node0.putIntProp(57, 130);
      node0.getStaticSourceFile();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isCatch();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.useSourceInfoFromForTree(node0);
      node0.setChangeTime(2);
      int int0 = Node.INFERRED_FUNCTION;
      Node node1 = Node.newNumber((-1.0));
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isOnlyModifiesArgumentsCall();
      node1.toString();
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      Node node0 = new Node(105, 105, 1857);
      node0.isUnscopedQualifiedName();
      node0.isFunction();
      node0.isDec();
      Node node1 = Node.newString("C|#}Jk1@k^8");
      node0.useSourceInfoFromForTree(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = new Node(4095, node0);
      int int0 = Node.INPUT_ID;
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)23;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString(147, "SUB");
      Node node1 = new Node(147, node0, node0, node0);
      node1.getLength();
      node1.useSourceInfoFromForTree(node0);
      node0.setSourceEncodedPositionForTree(0);
      node1.addChildrenToBack(node0);
      node1.isOr();
      node1.isComma();
      node1.addChildToFront(node0);
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList.copyOf(jSTypeArray0);
      Node node0 = Node.newString("Object#Key", 12, 12);
      node0.isGetElem();
      node0.cloneTree();
      Node node1 = new Node(49, node0, node0, 40, 3542);
      node1.cloneTree();
      Node node2 = Node.newString("Object#Element");
      node2.isEmpty();
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      Node node0 = new Node(105, 105, 1857);
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(54);
      node0.copyInformationFrom(node1);
      node0.isFunction();
      node0.isDec();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = new Node(4095, node0);
      Node.extractLineno(29);
      node2.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isNumber();
      node0.isExprResult();
      node0.toStringTree();
      Node node1 = Node.newString("FOR 115\n");
      node1.clonePropsFrom(node0);
      node1.getBooleanProp(50);
      Node node2 = new Node((-3668), node1, node1, node0, node0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node2.appendStringTree(charArrayWriter0);
      node1.isCall();
      // Undeclared exception!
      try { 
        node1.getSourcePosition();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -3668
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeProp(12);
      node0.isGetElem();
      node0.isParamList();
      node0.getBooleanProp(1857);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node1.isFor();
      node1.isVar();
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      Node node0 = Node.newNumber((double) 868);
      node0.addSuppression("vh|~#TNd>");
      node0.addSuppression("lL}Jdv~");
      node0.setString("lL}Jdv~");
      node0.getQualifiedName();
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      Node.newNumber(0.0);
      Node node0 = new Node(85, 2, 46);
      Node node1 = new Node(31, node0);
      Node node2 = new Node(52, 32, 3556196);
      node2.isFromExterns();
      node1.isCatch();
      Node node3 = node1.cloneTree();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null);
      ImmutableList<JSType> immutableList1 = immutableList0.asList();
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) immutableList1);
      node4.checkTreeTypeAwareEqualsImpl(node3);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setMutatesThis();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      Node node0 = new Node(99, 2871, 99);
      Node node1 = new Node(4095, node0, 46, 46);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(49);
      node_SideEffectFlags0.setMutatesArguments();
      node0.isEquivalentTo(node1, false, false, true);
      Node node2 = new Node(21, node1);
      Node node3 = node2.useSourceInfoIfMissingFrom(node0);
      node3.isCall();
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      node0.putIntProp(57, 130);
      node0.getStaticSourceFile();
      node0.setWasEmptyNode(true);
      node0.isCatch();
      Node node1 = node0.useSourceInfoFromForTree(node0);
      node1.isEquivalentToShallow(node0);
      node0.toStringTree();
      node1.isBreak();
      int int0 = Node.INFERRED_FUNCTION;
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      Node node0 = new Node(130, 130, (-464));
      node0.putIntProp(57, 130);
      node0.getStaticSourceFile();
      byte[] byteArray0 = new byte[0];
      node0.setWasEmptyNode(true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isCatch();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node(37, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isEquivalentToShallow(node1);
      node0.toStringTree();
      node1.hasOneChild();
      node0.isGetterDef();
      node2.addSuppression("EXPR_RESULT [empty_block: com.google.javascript.rhino.Node$IntPropListItem@0000000003] [reflected_object: com.google.javascript.rhino.Node$IntPropListItem@0000000002]\n");
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      Node node0 = Node.newString("g/}=\"9~[@#K#KhMG", 13, 13);
      Node node1 = new Node(1059, node0, node0, node0);
      Node node2 = Node.newString("]dZ4/hH", 0, 44);
      node1.copyInformationFromForTree(node2);
      Node node3 = new Node(48, node0);
      node1.isNot();
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      Node node0 = new Node(153, 1377, 153);
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node0.isAssignAdd();
      Node node1 = node0.cloneNode();
      node0.isEquivalentTo(node1, false, false, false);
      node0.useSourceInfoIfMissingFrom(node1);
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      Node node0 = new Node(110, 673, 56);
      Node node1 = new Node(2, node0);
      node1.removeChild(node0);
      node0.isFromExterns();
      Node node2 = node0.cloneTree();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node2.isQualifiedName();
      node1.isName();
      node0.useSourceInfoIfMissingFrom(node2);
      node0.isNew();
      node0.isCast();
      Node.extractLineno(110);
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      Node node0 = new Node(130, 130, (-464));
      node0.putIntProp(57, 130);
      node0.getStaticSourceFile();
      byte[] byteArray0 = new byte[0];
      node0.setWasEmptyNode(true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isCatch();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node(52, node0, node0, node0, 37, 36);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      node0.isEquivalentTo(node1, true, false, true);
      node0.useSourceInfoIfMissingFrom(node2);
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
      Node node0 = new Node(38);
      Node node1 = new Node(8, node0, node0);
      node0.getQualifiedName();
      node1.isTry();
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      Node node0 = new Node(38, 38, 38);
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      Node node0 = new Node(132, 35, (-615));
      Node node1 = new Node(122, node0);
      node0.isFalse();
      node1.isCatch();
      Node node2 = node0.cloneTree();
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node1.isGetElem();
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isSetterDef();
      node0.isAssign();
      Node node1 = new Node(46, node0);
      node0.isFalse();
      node0.isCatch();
      Node node2 = new Node(4095, node1, 0, 138);
      Node node3 = node2.cloneTree();
      node3.checkTreeTypeAwareEqualsImpl(node0);
      node1.isGetElem();
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      Node node0 = Node.newString(16, "com.google.common.collect.ImmutableAsList", 1990, 2293);
      node0.isVoid();
      node0.isBlock();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node0.isParamList();
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      Node node0 = new Node(116, 545, 116);
      node0.isExprResult();
      Node node1 = Node.newNumber((double) 50);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isCatch();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.useSourceInfoFromForTree(node1);
      node1.setChangeTime(29);
      int int0 = Node.INFERRED_FUNCTION;
      node1.isScript();
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      Node node0 = new Node(99, 2871, 99);
      Node node1 = new Node(15, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(49);
      node1.setLineno(2516);
      node1.isFromExterns();
      Node node2 = Node.newString("-m(rCy9`^=S", 43, 40);
      Node node3 = node1.copyInformationFromForTree(node2);
      Node node4 = new Node(56, node2);
      node1.isNot();
      node3.isNew();
      node3.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      Node node0 = new Node(54, 45, 54);
      node0.isDebugger();
      node0.isStringKey();
      Node node1 = new Node(0, node0);
      Node node2 = new Node(0, node1, node1, 54, 31);
      node1.setSourceFileForTesting("P!s.");
      Node node3 = new Node(56, node2, node2, node2, 42, 30);
      node3.setType(2879);
      node1.isVar();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(49);
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      Node node0 = new Node(132, 35, (-615));
      node0.isAssignAdd();
      Node node1 = node0.cloneNode();
      node1.isEquivalentToShallow(node0);
      node0.toStringTree();
      node1.isGetterDef();
      node0.addSuppression("com.google.javascript.rhino.Node$FileLevelJsDocBuilder");
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      Node node0 = new Node(132, 35, 338);
      Node node1 = new Node(122, node0);
      node0.isFalse();
      node1.isCatch();
      Node node2 = node0.cloneTree();
      node2.checkTreeEqualsImpl(node0);
      node1.setChangeTime(31);
      node2.isVar();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(283);
      node1.isSetterDef();
      node1.getChildBefore(node2);
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      Node node0 = new Node(35, 31, 2155);
      Node node1 = new Node(102, node0);
      Node node2 = node1.cloneTree();
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      Node node0 = Node.newNumber((-1294.56), (-39), (-1209));
      node0.isDo();
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(153, node0);
      node1.isLabelName();
      node1.isSetterDef();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node node2 = Node.newString(30, "CGhU2NGgqb#4`!", 55, 15);
      Node node3 = new Node((-1547), node0, node2);
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      Node node0 = new Node(35, 31, 2155);
      Node node1 = new Node(102, node0);
      node0.isFalse();
      node0.isCatch();
      Node node2 = node1.cloneTree();
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node0.isScript();
      node1.addChildBefore(node2, node0);
      node1.addChildBefore(node2, node2);
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isOnlyModifiesThisCall();
      node0.isEquivalentToTyped(node0);
      Node node1 = new Node(4095);
      int int0 = Node.INPUT_ID;
      node0.toStringTree();
      node1.isEquivalentToShallow(node0);
      Node node2 = Node.newString("FOR 115\n", 50, 2604);
      Node node3 = new Node(31, node1, node0, node1, node2, 147, (-32));
      node2.setChangeTime(57);
      node0.toString();
      node3.isScript();
      node3.addChildBefore(node1, node0);
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      Node node0 = new Node(34);
      Node node1 = new Node(16, node0, node0, node0, 0, 42);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.isAdd();
      node0.isDec();
      node1.isOnlyModifiesThisCall();
      node0.isComma();
      node0.isNull();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ud\"#IM");
      node1.isLocalResultCall();
      node1.getLastChild();
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      Node node0 = new Node(99, 2871, 99);
      Node node1 = new Node(15, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(49);
      node1.setLineno(2);
      node1.isFromExterns();
      node1.cloneNode();
      node0.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      Node.newNumber((double) 839);
      Node node0 = Node.newNumber((double) 2, 461, 16);
      String string0 = "lL}Jdvl(";
      node0.addSuppression("lL}Jdvl(");
      node0.setString("lL}Jdvl(");
      Node.newString(string0);
      SimpleErrorReporter simpleErrorReporter0 = null;
      try {
        simpleErrorReporter0 = new SimpleErrorReporter();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 2.0 461 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1085);
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = new Node(101);
      node0.isDec();
      node0.isGetElem();
      node0.isOnlyModifiesThisCall();
      node0.isNull();
      node0.isNE();
      Node node1 = new Node(56, node0, node0, node0, node0, 50, 38);
      node1.isLocalResultCall();
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(54);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(54, nodeArray0, 54, 127);
      node0.isAssignAdd();
      Node node1 = new Node(52, nodeArray0);
      Node node2 = node1.cloneNode();
      node0.isEquivalentToShallow(node1);
      node1.toStringTree();
      node0.isGetterDef();
      node2.addSuppression("Mn>");
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      Node node0 = new Node((-2044), (-2044), 70);
      Node node1 = node0.cloneNode();
      Node node2 = new Node(43, node0, 0, 70);
      node1.isSwitch();
      node2.addChildrenAfter(node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      // Undeclared exception!
      try { 
        node0.isAdd();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      Node node0 = new Node(132, 35, 338);
      Node node1 = new Node(122, node0);
      node0.isFalse();
      node1.isCatch();
      node1.isDec();
      node1.isGetElem();
      node0.isOnlyModifiesThisCall();
      node1.isNull();
      node1.isNE();
      node0.isLocalResultCall();
      node1.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      Node node0 = new Node(115, 115, 166);
      node0.isNumber();
      node0.setSourceFileForTesting("uJ*{TUe'dUVCY");
      node0.isFromExterns();
      node0.cloneTree();
      node0.getExistingIntProp((-1044));
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      Node node0 = new Node(105, 105, 1857);
      Node node1 = Node.newString("6;RrlCNV3V", 1928, 2);
      Node node2 = new Node(15, node1, node0, node0);
      Node node3 = Node.newString("IA", 1, (-3145));
      node3.removeFirstChild();
      node0.copyInformationFromForTree(node1);
      Node node4 = new Node(117, node1);
      node2.isNot();
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      Node node1 = new Node(31, 1023, 36);
      Node node2 = new Node(93, node1);
      Node node3 = node1.detachFromParent();
      node0.checkTreeEqualsImpl(node0);
      node1.isAdd();
      node2.hasChild(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2440);
      node_SideEffectFlags0.setAllFlags();
      node1.mayMutateGlobalStateOrThrow();
      node1.isUnscopedQualifiedName();
      node3.isInc();
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      Node node0 = Node.newString("", 100, 30);
      node0.removeProp((-1833));
      node0.isGetElem();
      node0.toStringTree();
      node0.getLineno();
      node0.toStringTree();
      Node node1 = new Node(49);
      node0.isEquivalentToShallow(node1);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node2 = new Node((-3548), nodeArray0);
      node2.isEquivalentTo(node1, false, false, false);
      Node node3 = new Node(53, node2);
      node1.useSourceInfoIfMissingFrom(node2);
      Node node4 = Node.newNumber((double) 32, (-5885), 125);
      node4.isCall();
      node2.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isSetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node_SideEffectFlags0.setReturnsTainted();
      int int0 = Node.COLUMN_MASK;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node2 = new Node(55);
      Node node3 = Node.newString("com.google.common.collect.ImmutableCollection$Builder");
      Node node4 = new Node(4095, node0, node3, 40, 57);
      node4.isObjectLit();
      node0.getQualifiedName();
      node1.isTry();
      node4.useSourceInfoIfMissingFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(33, 2132, 2235);
      Node node1 = new Node(33, node0);
      Node node2 = new Node(2897, node1, node1, 16, 43);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node2.setJSDocInfo(jSDocInfo0);
      Node node3 = new Node(2235, node2, node2);
      node1.getJSDocInfo();
      node3.getSideEffectFlags();
      node3.isNull();
      node3.getLastChild();
      node3.addChildToFront(node1);
      node3.isInc();
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      Node node0 = new Node(8199, 8199, 8199);
      Node node1 = new Node(33, node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      node1.isQualifiedName();
      node1.getString();
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      Node node0 = new Node(99, 99, 99);
      node0.isSetterDef();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wgL");
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      node0.isAnd();
      Node node1 = new Node(0, 1, 38);
      Node node2 = Node.newString("EP iU=b./+O", 16, 0);
      node0.copyInformationFromForTree(node2);
      Node node3 = new Node((-912), node1);
      node2.isNot();
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      Node node0 = new Node(126, 120, 3243);
      node0.isIn();
      node0.isExprResult();
      Node node1 = new Node(113, node0, node0, 2217, 935);
      node0.isEquivalentTo(node1, false, false, true);
      Node node2 = new Node(31, node1);
      node1.useSourceInfoIfMissingFrom(node2);
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      int int0 = Node.INFERRED_FUNCTION;
      Node node0 = Node.newString(100, "ARRAYLIT", 30, 111);
      node0.putBooleanProp(103, false);
      Node node1 = new Node((-1833), node0, node0, node0, node0, 766, 57);
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList.copyOf(jSTypeArray0);
      Node node0 = Node.newString("Object#Key", 12, 12);
      node0.removeProp(36);
      node0.isBreak();
      Node node1 = new Node(40, node0, node0, 4, 39);
      node1.isEquivalentTo(node0, false, true, false);
      Node node2 = new Node(50, node0);
      node2.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      Node node0 = new Node(76, 76, 76);
      node0.isExprResult();
      node0.isEquivalentTo(node0, true, true, true);
      Node node1 = Node.newString("g,)-<$T^VOHOb");
      node1.addChildToFront(node0);
      node1.getSourcePosition();
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      Node node0 = Node.newNumber(45.498144780490506);
      Node node1 = new Node(30, node0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node0);
      node0.isAdd();
      node1.hasChild(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-422));
      node_SideEffectFlags0.setAllFlags();
      node0.mayMutateGlobalStateOrThrow();
      Node node2 = Node.newString((-2164), "EP iU=b./+O", 31, 8);
      node1.addChildBefore(node0, node2);
      node2.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node((-2856));
      node0.cloneNode();
      node0.getSideEffectFlags();
      node0.getChangeTime();
      node0.setJSType((JSType) null);
      node0.setOptionalArg(true);
      node0.setCharno(0);
      Node node1 = new Node(4, node0);
      Node node2 = node0.copyInformationFrom(node1);
      node1.setCharno(4095);
      node2.getJsDocBuilderForNode();
      node2.setLineno(15);
      node0.mayMutateGlobalStateOrThrow();
      node1.cloneNode();
      node0.getJsDocBuilderForNode();
      node0.isNE();
      node0.isDefaultCase();
      node2.isAnd();
      node2.replaceChild(node0, node1);
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      Node node0 = Node.newNumber((double) 839);
      Node node1 = Node.newNumber((double) 2, 461, 16);
      node1.toStringTree();
      Node node2 = new Node(2);
      node1.isEquivalentToShallow(node0);
      Node node3 = new Node(1275, node1, node0, node0, node0, 1056, (-2333));
      node3.setChangeTime(15);
      node1.toString();
      int int0 = Node.INFERRED_FUNCTION;
      int int1 = 3;
      Node node4 = new Node((-2035), node0, 4095, 36);
      int int2 = (-3094);
      Node node5 = new Node(int1, node2, node0, node4, node1, node3.JSDOC_INFO_PROP, int2);
      node5.isScript();
      node2.addChildBefore(node0, node1);
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(112, nodeArray0);
      node0.isSetterDef();
      node0.isSwitch();
      node0.getSideEffectFlags();
      node0.isWhile();
      node0.mayMutateGlobalStateOrThrow();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isWith();
      node0.isFromExterns();
      node0.toString();
      Node node1 = new Node(30, node0);
      node1.setLength(461);
      Node node2 = node1.cloneNode();
      node2.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      Node node0 = new Node(105, 105, 1857);
      node0.isUnscopedQualifiedName();
      node0.setLineno(1857);
      node0.isFromExterns();
      Node node1 = Node.newString("0}k-n\"'oC'");
      node0.isInc();
      node1.getString();
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      Node node0 = Node.newString(38, "}u&5b");
      node0.getQualifiedName();
      node0.isDec();
      node0.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.isSetterDef();
      node0.isSwitch();
      node0.getSideEffectFlags();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isWhile();
      node0.isFromExterns();
      node0.isFromExterns();
      node0.isTrue();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      Node node0 = new Node(8199, 8199, 8199);
      Node node1 = new Node(33, node0);
      node1.getDirectives();
      node0.getSideEffectFlags();
      node0.isWhile();
      node0.isOr();
      node1.copyInformationFromForTree(node0);
      node1.isFromExterns();
      node1.isCall();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      Node node0 = new Node(153, 1377, 153);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Node node1 = Node.newString("Object#Key", 32, 5760);
      node0.isGetElem();
      node0.cloneTree();
      Node node2 = Node.newString("Object#Key");
      node0.checkTreeEqualsImpl(node2);
      node1.isComma();
      node2.isTrue();
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isParamList();
      node0.isFor();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.getStaticSourceFile();
      node0.isContinue();
      node0.srcref((Node) null);
      node0.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      Node node0 = new Node(153, 1377, 153);
      node0.isNumber();
      node0.isDefaultCase();
      node0.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isInstanceOf();
      Node node1 = Node.newNumber(865.8021264046515, 42, 1377);
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.getAncestor(1113);
      node0.getChildBefore(node2);
      node0.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      Node node0 = Node.newNumber(45.498144780490506);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isParamList();
      Node node1 = Node.newString(42, "Z9O\"ZJv");
      node1.toString();
      Node node2 = Node.newNumber(45.498144780490506);
      node1.addChildAfter(node2, (Node) null);
      node1.getQualifiedName();
      node1.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      Node node0 = new Node(105, 126, 105);
      node0.isUnscopedQualifiedName();
      node0.isFunction();
      node0.isDec();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.getAncestors();
      Node node1 = new Node(42, node0);
      node0.getJSDocInfo();
      node1.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.addChildAfter((Node) null, (Node) null);
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newNumber(50.0, 9, (-1166));
      node0.appendStringTree((Appendable) null);
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = true;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)105;
      byteArray0[0] = byte0;
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      Node node0 = new Node(90, 90, (-2896));
      node0.isNumber();
      node0.setChangeTime(90);
      node0.isGetElem();
      node0.toStringTree();
      Node node1 = Node.newString("Z&NIv!$7vQC@M}ex&", 30, 5700);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.isQualifiedName();
      node0.isSyntheticBlock();
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      Node node0 = new Node(142, (-1932), 142);
      node0.isUnscopedQualifiedName();
      node0.isDebugger();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(132, node0);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.removeProp(3088);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isLabel();
      node1.isAnd();
      node1.useSourceInfoFrom(node0);
      node1.isDec();
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      Node node0 = new Node(153, 1377, 153);
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      Node node1 = new Node(29, node0, 0, 2);
      node0.isEquivalentToShallow(node1);
      node0.useSourceInfoFrom(node1);
      node0.toStringTree();
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      Node node0 = new Node(105, 126, 105);
      node0.isUnscopedQualifiedName();
      node0.isFunction();
      node0.isDec();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(42, node0);
      node1.getStaticSourceFile();
      int int0 = Node.INPUT_ID;
      node1.isGetProp();
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = new Node(51, (-1289), 3269422);
      node0.isWith();
      node0.getBooleanProp(49);
      node0.isFor();
      node1.putIntProp(16, 43);
      node1.isObjectLit();
      node0.getQualifiedName();
      node1.isObjectLit();
      Node node2 = new Node(29);
      node1.srcref(node2);
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = Node.newString("Object#Key", 12, 12);
      node0.removeProp(36);
      node0.isGetElem();
      node0.getLineno();
      node0.toStringTree();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node1.isAssignAdd();
      Node node2 = new Node(44, node0, node0, node1, (-1250), 53);
      Node node3 = node2.cloneNode();
      node3.isEquivalentToShallow(node2);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node2;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
      nodeArray0[3] = node3;
      nodeArray0[4] = node1;
      nodeArray0[5] = node3;
      nodeArray0[6] = node1;
      nodeArray0[7] = node1;
      Node node4 = new Node(12, nodeArray0, 114, 1);
      node4.toStringTree();
      node4.isOnlyModifiesThisCall();
      nodeArray0[6].isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      Node node0 = new Node(8199, 8199, 8199);
      Node node1 = new Node(33, node0);
      node1.useSourceInfoIfMissingFrom(node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isAdd();
      node1.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Element");
      Node node0 = new Node(115);
      node0.isParamList();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node(126, node0, node0);
      node1.isTry();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.checkTreeEqualsImpl(node1);
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      Node node0 = new Node(105);
      node0.isIf();
      Node node1 = new Node(51, node0);
      Node node2 = new Node(2);
      Node node3 = new Node(1, node2, node1, node1, node1, 15, 15);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node1, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getLeastSupertype(enumType0);
      node2.isObjectLit();
      node1.getLastChild();
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = new Node(29, 43, 6);
      Node node2 = node0.srcref(node1);
      node0.isParamList();
      node0.getExistingIntProp(115);
      node2.getIntProp(node1.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(35, 31, 2155);
      Node node1 = node0.cloneTree();
      Node node2 = Node.newString("P|)Z_Gar}4m.5`4r");
      node0.checkTreeEqualsImpl(node1);
      node0.isComma();
      node2.isTrue();
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      Node node0 = new Node(105);
      node0.isIf();
      Node node1 = new Node(51, node0);
      node1.isFalse();
      node1.useSourceInfoFromForTree(node0);
      node1.getSourcePosition();
      Node node2 = new Node((-298), node0);
      int int0 = 1285;
      Node[] nodeArray0 = new Node[5];
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      Node node0 = new Node(153, 1377, 153);
      node0.isNumber();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getThisType();
      jSDocInfo0.setEnumParameterType((JSTypeExpression) null);
      node0.setJSDocInfo(jSDocInfo0);
      node0.toStringTree();
      node0.isGetterDef();
      node0.getQualifiedName();
      node0.isContinue();
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(122, nodeArray0);
      node0.removeProp(122);
      Node node1 = new Node(124, 47, 47);
      node1.isNumber();
      node0.setSourceFileForTesting("uJ*{TUe'dUVCY");
      node0.isFromExterns();
      Node node2 = node0.cloneTree();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node2.getString();
      node2.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      Node node0 = new Node(105);
      node0.isIf();
      Node node1 = new Node(51, node0);
      node1.isFalse();
      Node node2 = node1.cloneTree();
      node0.isGetElem();
      node0.isEmpty();
      node2.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node(148, node0, node0, node0, node0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-17);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node2 = node1.cloneTree();
      node2.getInputId();
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      Node node0 = new Node(105, 105, 1857);
      node0.setLineno(1857);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("EP iU=b./+O", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isFromExterns();
      Node node1 = Node.newString("0}k-n\"'oC'");
      node0.isInc();
      node0.isNew();
      node1.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isSetterDef();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseStringType();
      EnumType enumType0 = jSTypeRegistry1.createEnumType("Unknown class name", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      JSType jSType1 = enumElementType1.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType1, jSType0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isInstanceOf();
      enumElementType0.matchesInt32Context();
      Node node2 = Node.newNumber((-330.9713657), 38, 21);
      Node node3 = node1.copyInformationFromForTree(node2);
      node0.getAncestor(4095);
      node3.isSwitch();
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      Node node0 = new Node(132, 35, 132);
      node0.getStaticSourceFile();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-112);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isCatch();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node(16777216);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.getSourcePosition();
      Node node3 = new Node(12, node2);
      node2.setSideEffectFlags((-2561));
      node3.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      Node node0 = new Node(31, 105, 2155);
      Node node1 = new Node(52, node0);
      node1.isCatch();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.isGetElem();
      node1.isName();
      node1.getChangeTime();
      node0.isAnd();
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(101);
      node0.isSetterDef();
      node0.hasChildren();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.toString();
      node0.getSideEffectFlags();
      Node node1 = new Node(36, node0, node0, node0, node0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString(38, "}u&5b");
      Node node1 = new Node(103, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node0.toStringTree();
      node1.isCall();
      node1.useSourceInfoIfMissingFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      Node node0 = new Node(126, 34, 2181);
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(108);
      node0.isAssignAdd();
      Node node1 = node0.cloneNode();
      node1.isEquivalentToShallow((Node) null);
      node0.toStringTree();
      node0.isOnlyModifiesThisCall();
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      Node node0 = Node.newString(38, "}u&5b");
      Node node1 = new Node(38);
      Node node2 = new Node(38, node1, node1);
      node0.getQualifiedName();
      node1.isTry();
      node2.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      Node node0 = new Node(153, 112, (-777));
      Node node1 = new Node(153, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.setMutatesArguments();
      node1.isStringKey();
      node1.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(77, 1, 1);
      Node node1 = new Node(47, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isStringKey();
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      Node node0 = Node.newString(126, "~Bi-NzXnb6", 126, 126);
      node0.isVoid();
      Node node1 = new Node(40);
      node1.cloneTree();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      Node node2 = new Node(15, (-611), 113);
      node2.isGetElem();
  }

  @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getJSDocInfo();
      Node.newNumber((double) 40);
      Node node1 = new Node((-1758), 29, 108);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.isCall();
  }

  @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      Node node0 = Node.newString(126, "(D");
      node0.getChangeTime();
      node0.isName();
      node0.checkTreeEquals((Node) null);
  }

  @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.spliterator();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = Node.newString("Object#Key");
      node1.isString();
      node0.isTry();
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = new Node(111, node0);
      Node node2 = Node.newString("FOR");
      node1.checkTreeEqualsImpl(node2);
      node0.srcref(node1);
      node2.getAncestors();
      node2.isNew();
      node2.addChildToBack(node1);
      node0.checkTreeEqualsImpl(node2);
      node2.isAssign();
  }

  @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      Node node0 = new Node(34, 34, 109);
      Node node1 = new Node(32, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node3 = new Node(49);
      Node node4 = Node.newNumber((double) 2, (-2714), 12);
      node2.isObjectLit();
      node4.isCall();
      Node node5 = node3.srcrefTree(node4);
      node4.removeChildAfter(node5);
  }

  @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.putIntProp(42, (-188));
      node0.isWhile();
      node0.setDouble(29);
  }

  @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.getJSDocInfo();
      Node.newNumber(313.81435);
      node0.putIntProp(42, (-188));
      node0.isWhile();
      node0.setDouble(29);
  }

  @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isEquivalentToShallow(node0);
      node0.isRegExp();
      Node node1 = new Node(114, node0, node0, node0, node0, 12, 12);
      node1.isWhile();
      Node.newString(" i75\"c(we!M\"");
      node0.isOr();
      node0.mayMutateGlobalStateOrThrow();
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      Node node0 = new Node(132, 35, 132);
      Node node1 = new Node(1, node0, node0, 1, 16);
      node0.srcref(node1);
      node0.isFalse();
      node1.checkTreeEqualsImpl(node0);
      node1.setChangeTime(31);
      node1.isVar();
      Node node2 = new Node(91, node0);
      int int0 = Node.INPUT_ID;
  }

  @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      Node node0 = new Node(130, 130, (-464));
      node0.putIntProp(57, 130);
      node0.getStaticSourceFile();
      byte[] byteArray0 = new byte[0];
      node0.setWasEmptyNode(true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isCatch();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.isNull();
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      Node node0 = new Node(142, 142, 3106);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesArguments();
      node0.isStringKey();
      node0.useSourceInfoIfMissingFromForTree((Node) null);
  }

  @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      node0.isSwitch();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isStringKey();
      node0.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      Node node0 = new Node(132, 132, (-615));
      node0.getDirectives();
      node0.isSwitch();
      node0.getSideEffectFlags();
      node0.isWhile();
      Node node1 = Node.newNumber(4.699);
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      node0.putIntProp(57, 154);
      node0.getStaticSourceFile();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isCatch();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      node0.putIntProp(57, 154);
      node0.getStaticSourceFile();
      byte[] byteArray0 = new byte[0];
      node0.setWasEmptyNode(true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isCatch();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node(37, node0);
      Node node2 = new Node(16, node1, node0);
      node2.isEquivalentToShallow(node1);
      node0.toStringTree();
      // Undeclared exception!
      try { 
        node0.isGetterDef();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      Node node0 = new Node(60, 53, 60);
      Node node1 = new Node(38, node0, node0, node0, 3, 3);
      Node node2 = new Node(31, 2695, 29);
      Node node3 = node2.clonePropsFrom(node1);
      node3.addSuppression("Object#Element");
      node1.getIntProp((-521));
      Node.mergeLineCharNo(436, 124);
      node0.isArrayLit();
      node2.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      Node node0 = new Node(93, 2871, 93);
      Node node1 = new Node(1, node0, 1, 0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.isNE();
      node2.toStringTree();
      node0.siblings();
      node1.hasOneChild();
      node0.isGetterDef();
      node0.checkTreeEquals(node2);
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.srcrefTree((Node) null);
      node0.isEquivalentToShallow(node0);
      EvoSuiteFile evoSuiteFile0 = null;
  }

  @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.resetForTypeCheck();
      ImmutableList.copyOf(jSTypeArray0);
      Node node0 = Node.newString("Object#Element");
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.addChildToFront(node1);
      node0.isComma();
      node0.toString(true, true, true);
      node0.isDo();
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node0.toStringTree();
      node0.isDefaultCase();
      node0.isHook();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node0.isInstanceOf();
      Node node1 = Node.newNumber((-2597.795), 1943, 24);
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.isEquivalentTo(node0, false, false, false);
      node2.getAncestor(2);
      node1.isSwitch();
      node0.getDirectives();
      node0.addChildrenAfter(node1, (Node) null);
  }

  @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      Node node0 = Node.newString((-487), "EP iU=b./+O");
      Node node1 = new Node(126, node0, node0, node0, 4095, 1673);
      Node.newString("EP iU=b./+O", 1673, 46);
      Node node2 = new Node((-372), node1, 57, 186);
      Node node3 = node1.copyInformationFromForTree(node0);
      node3.getLength();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node4 = node2.setJSDocInfo(jSDocInfo0);
      node2.getDirectives();
      node4.getString();
      node1.isIf();
      node4.getProp(node0.NO_SIDE_EFFECTS);
      node1.getSideEffectFlags();
      node4.getStaticSourceFile();
      String string0 = "H]O*AIkAKao";
      node0.addSuppression(string0);
      // Undeclared exception!
      try { 
        node4.getSourceOffset();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -372
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      Node node0 = new Node(38, 38, 38);
      node0.isSyntheticBlock();
      node0.isEquivalentTo(node0, false, true, false);
      Node node1 = new Node(40, node0, node0, node0, node0);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      node_NodeMismatch0.equals(node1);
      node0.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      Node node0 = new Node(31, 162, 60);
      Node node1 = new Node(46, 39, 60);
      node1.setLineno(125);
      node0.isUnscopedQualifiedName();
      Node.mergeLineCharNo(4095, 1612);
      node0.isCast();
      node1.getStaticSourceFile();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      NavigableSet<String> navigableSet0 = treeSet0.descendingSet();
      node0.setDirectives(navigableSet0);
      node0.putIntProp(51, (-188));
      node0.isWhile();
      node0.setDouble(29);
      int int0 = (-449);
      // Undeclared exception!
      try { 
        node0.getBooleanProp(int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FOR 115 [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] [source_file: com.google.javascript.rhino.Node$IntPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      Node node0 = new Node(90, 90, 140);
      Locale locale0 = Locale.CANADA;
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      node0.setDirectives(set0);
      node0.isNumber();
      node0.setChangeTime(90);
      node0.toStringTree();
      node0.isOnlyModifiesThisCall();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      Node node0 = new Node(105);
      Node node1 = new Node(39, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.setMutatesArguments();
      node0.isStringKey();
      node0.useSourceInfoIfMissingFromForTree(node1);
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Node node0 = Node.newString(64, "'7", (-123), 64);
      Node node1 = new Node((-123), node0, node0, node0, 56, (-1650));
      node1.getAncestor(0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.getSideEffectFlags();
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      Node node0 = new Node(60, 59, 60);
      Node node1 = new Node(38, node0, node0, node0, 15, 15);
      node0.setSourceFileForTesting("EP iU=b./+O");
      node0.isFromExterns();
      Node node2 = node1.cloneTree();
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node1.isQualifiedName();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x|pbh*A#");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = new Node(111, node0, node0, 55, 40);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.getString();
      node0.isGetterDef();
      node1.children();
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      Node node0 = new Node(101);
      node0.isSetterDef();
      node0.isDebugger();
      node0.getSideEffectFlags();
      node0.isWhile();
      node0.isOr();
      Node node1 = node0.cloneTree();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
      nodeArray0[3] = node1;
      nodeArray0[4] = node0;
      nodeArray0[5] = node1;
      Node node2 = new Node(46, nodeArray0, 1383, 83);
      node2.isEquivalentToShallow(nodeArray0[4]);
      node1.getDouble();
  }

  @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      Node node0 = Node.newString(122, "~Bi-NzXnb6", 122, 122);
      node0.isVoid();
      Node node1 = Node.newString(2, "~Bi-NzXnb6");
      node0.addChildToFront(node1);
      node0.isComma();
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      Node node0 = new Node((-777), (-777), 114);
      Node node1 = new Node(40, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node0.isStringKey();
      node1.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(147, 147, 62);
      node0.mayMutateArguments();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(147, node0, node0, node0);
      Node node2 = new Node(473, node1);
      Node.newString(37, "U3DZ=[a", 54, 42);
      node2.getJSDocInfo();
      Node node3 = node2.getLastChild();
      node3.isNull();
      node0.addChildrenToFront(node1);
      node3.isEmpty();
      node1.addChildToFront(node3);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-86);
  }

  @Test(timeout = 4000)
  public void test796()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setWasEmptyNode(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)71;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isCatch();
      Node node1 = new Node((byte)111, node0, node0, node0, node0);
      node1.clonePropsFrom(node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node2 = new Node(30, node1);
      Node node3 = new Node(52, node2, node1);
      node0.isEquivalentToShallow(node3);
      int int0 = 2951;
      int int1 = 120;
      node3.putIntProp(int0, int1);
      node3.toStringTree();
      node3.isGetterDef();
      node0.addChildAfter(node1, node3);
  }

  @Test(timeout = 4000)
  public void test797()  throws Throwable  {
      Node node0 = new Node(102, 24, 116);
      Node node1 = new Node(24, node0, node0, node0, (-3293), 2);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)103;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node2 = new Node((-1697), node1);
      node2.isGetElem();
      node1.getLastChild();
  }

  @Test(timeout = 4000)
  public void test798()  throws Throwable  {
      Node node0 = new Node(39, 12, (-464));
      node0.putIntProp((-444), 1294);
      node0.getStaticSourceFile();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)22;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = Node.newString("cgn@A*Y4pL+T)68Du7", 52, (-2888));
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node2 = new Node(31, node1);
      Node node3 = node2.useSourceInfoFromForTree(node1);
      node3.isEquivalentToShallow(node0);
      node2.toStringTree();
      node0.hasOneChild();
      node3.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test799()  throws Throwable  {
      Node node0 = Node.newString(38, "}u&5b");
      node0.isQualifiedName();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test800()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      node0.isIf();
      Node node1 = new Node(51, node0);
      node1.isAdd();
      node0.useSourceInfoFrom(node1);
      node1.isOnlyModifiesThisCall();
      node1.addChildToFront(node0);
      // Undeclared exception!
      try { 
        node1.isTypeOf();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test801()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      Node.newString("");
      node0.isCatch();
      node0.isQualifiedName();
      Node node1 = new Node(12);
      node1.isNull();
      node1.getCharno();
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test802()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node0.isWith();
      Node node1 = new Node(642, node0, node0);
      node0.isEquivalentToTyped(node1);
      node0.isCatch();
      Node node2 = node1.cloneTree();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node2.isEquivalentTo(node3, false, true, false);
      node3.checkTreeTypeAwareEqualsImpl(node2);
      node1.isTry();
      node3.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test803()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      node0.putIntProp(57, 130);
      node0.getStaticSourceFile();
      node0.setWasEmptyNode(false);
      node0.isCatch();
      Node node1 = node0.useSourceInfoFromForTree(node0);
      node1.isEquivalentToShallow(node0);
      node1.putIntProp(47, 3265);
      node1.getString();
  }

  @Test(timeout = 4000)
  public void test804()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      node0.putIntProp(57, 130);
      node0.getStaticSourceFile();
      Node.newNumber((-1964.5182), 39, 37);
      node0.setWasEmptyNode(true);
      node0.isCatch();
      Node node1 = node0.useSourceInfoFromForTree(node0);
      node1.isEquivalentToShallow(node0);
      node1.putIntProp(47, 3265);
      node1.getString();
  }

  @Test(timeout = 4000)
  public void test805()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      node0.putIntProp(112, 112);
      node0.getStaticSourceFile();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte) (-98);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isCatch();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node((-2971), node0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.getSourcePosition();
      Node node3 = new Node(45, node2);
      int int0 = 439;
      node3.setSideEffectFlags(int0);
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test806()  throws Throwable  {
      Node node0 = new Node(100, (-1478), (-1478));
      Node node1 = new Node(30, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node0.isStringKey();
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test807()  throws Throwable  {
      Node node0 = new Node(153, 112, (-777));
      Node node1 = new Node(153, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node1.isStringKey();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node2.isNoSideEffectsCall();
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test808()  throws Throwable  {
      Node node0 = new Node(306, 306, 306);
      node0.getIntProp(2939);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      jSTypeArray0[0] = jSType0;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry1.createConstructorType(jSTypeArray0[0], false, jSTypeArray0);
      jSTypeArray0[1] = (JSType) functionType0;
      Node node1 = new Node(51, node0, node0, node0, node0, 867, 51);
      Node.newString(93, "#K,r+hD!'Ru[", 1, 12);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("M,", node1, functionType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      jSTypeArray0[2] = (JSType) enumElementType0;
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.checkTreeEquals(node2);
      node2.getAncestor(1);
  }

  @Test(timeout = 4000)
  public void test809()  throws Throwable  {
      Node node0 = new Node(111, 111, 83);
      node0.putIntProp(83, 83);
      node0.getStaticSourceFile();
      node0.setWasEmptyNode(false);
      node0.isCatch();
      Node node1 = Node.newNumber(4301.24166);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.isEquivalentToShallow(node0);
      node2.putIntProp(31, (-1));
      node1.getString();
  }
}
