/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 31 08:29:37 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import com.google.javascript.rhino.jstype.TemplatizedType;
import java.io.File;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      Node node1 = Node.newString("Node has existing properties.", 12, 4095);
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = new Node(37);
      node0.setSideEffectFlags(37);
      node0.isAdd();
      node0.getSourceFileName();
      node0.isObjectLit();
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = node0.useSourceInfoFromForTree(node0);
      node0.isBlock();
      node0.isObjectLit();
      node1.toString();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node.newString("Node has existing properties.");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 40, 40);
      node0.setJSDocInfo((JSDocInfo) null);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ImmutableLis$ubList", 116, 116);
      node0.detachChildren();
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node.newString(826, "m_p.xjA#4LP6'Xh0! ", 826, 102);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 2521, 2521);
      node0.getAncestors();
      node0.setSourceEncodedPosition(2521);
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = new Node(153);
      node0.getLength();
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = new Node(51);
      node0.isBreak();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.getDirectives();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = Node.newString(40, "Y");
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = Node.newString("node is not a child");
      node0.isQualifiedName();
      Node node1 = new Node(1801, node0, node0, 0, (-1331));
      node1.toString(false, false, false);
      String string0 = null;
      node0.addSuppression(string0);
      node0.isOnlyModifiesThisCall();
      node1.isFromExterns();
      // Undeclared exception!
      try { 
        node1.isParamList();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1801
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.JSDocInfo$NamePosition");
      node0.getStaticSourceFile();
      node0.isQualifiedName();
      node0.isOptionalArg();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-443));
      Node node1 = new Node((-443), node0, node0);
      node1.isExprResult();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = new Node(1258, 115, (-2222));
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(51, node0, node0, 38, 55);
      node1.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node((-612));
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newString("I*3Mn\"MmA{b $~", (-473), (-473));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-119);
      byteArray0[7] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.setCharno(88);
      node0.isName();
      node0.isBreak();
      Node node1 = new Node(42, node0, node0, node0, node0);
      node1.isQualifiedName();
      node0.setString("I*3Mn\"MmA{b $~");
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 61;
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      Node node1 = Node.newNumber((-1.0), (-1266), (-218));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.getQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node1.setSideEffectFlags(node_SideEffectFlags1);
      int int1 = 0;
      Node node2 = new Node(int0, node0, node1, node1, node1, node0.FREE_CALL, int1);
      node0.hasChildren();
      int int2 = (-1135);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newString((-3038), "com.google.javascript.rhino.Node$NodeMismatch", 114, (-3038));
      Node node1 = new Node((-3038), node0);
      node1.cloneNode();
      node0.getAncestor(53);
      node1.toString(false, false, true);
      node1.replaceChildAfter(node0, node0);
      Node.extractLineno(node1.FLAG_LOCAL_RESULTS);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = "FUNCTION_INSTANCE_TYPE";
      int int0 = 15;
      Node node0 = Node.newNumber((double) 15);
      Node node1 = new Node(15, node0);
      Node node2 = new Node(15, node0, node1);
      JSType jSType0 = null;
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newNumber(46.0);
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node(51);
      Node node1 = new Node(51, node0);
      node1.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      Node node1 = new Node(16, node0, node0, node0, node0, 4095, 4);
      node1.isAdd();
      node0.isHook();
      node0.isThrow();
      Node node2 = new Node(29, node0, node0, 27, 2);
      node2.addChildrenAfter(node0, node0);
      // Undeclared exception!
      try { 
        node2.isEmpty();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 49;
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(0, node0, node0, node0);
      nodeArray0[0] = node1;
      Node node2 = Node.newString(2201, "undefined", 2, 43);
      nodeArray0[1] = node2;
      Node node3 = Node.newString("undefined");
      node1.addChildToFront(node1);
      Node node4 = new Node(51, node1);
      String string0 = "{,~g15+&)\"57cO6@Sn}";
      Node.newString(string0);
      node3.addChildBefore(node4, node2);
      nodeArray0[2] = node3;
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setIsSyntheticBlock(true);
      node0.hasChildren();
      Node node1 = new Node(2, node0, node0);
      Node node2 = new Node(15, node1, node0);
      node2.isExprResult();
      // Undeclared exception!
      try { 
        node2.getLastSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      boolean boolean0 = true;
      Node node1 = Node.newString(0, ".5LEe,eHn", 0, 32);
      Locale locale0 = new Locale("I_9ugzqqS7Z8@Rw");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      node1.toStringTree();
      node0.setOptionalArg(boolean0);
      node0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newString((-1228), ")e8/'ebq:G");
      InputId inputId0 = new InputId("; .3A5YNp%nG}rt#[");
      node0.setInputId(inputId0);
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node((-3036));
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = new Node(0, node0, node0, node0, 5760, (-2306));
      node1.toStringTree();
      node1.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.areAllFlagsSet();
      String string0 = "a`";
      Node node0 = Node.newString("a`");
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags5.clearSideEffectFlags();
      node_SideEffectFlags4.clearAllFlags();
      Node node1 = new Node(1, node0, node0, node0, node0, 0, 55);
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      node1.setLength(8);
      node0.replaceChildAfter(node1, node1);
      // Undeclared exception!
      try { 
        node1.isFor();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags3.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1028), (-1028));
      Node node1 = new Node((-1028), node0, node0, node0, node0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1589);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-3410));
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = new Node((-846), 101, (-846));
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      Node node0 = Node.newString("0fg`/m5", 906, (-3769));
      node0.getQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("0fg`/m5");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      Node node1 = new Node(16, node0, node0, node0, node0, 4095, 4);
      node1.isAdd();
      node0.isHook();
      node1.isInc();
      node0.setString("NO_OBJECT_TYPE");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newString("0fg`/m5", 906, (-3769));
      node0.getQualifiedName();
      node0.isScript();
      node0.detachChildren();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("+B{'");
      node_SideEffectFlags0.setThrows();
      node0.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newNumber((-13.393708785555821));
      node0.isOptionalArg();
      node0.setLength(2034);
      node0.isHook();
      node0.isNot();
      node0.toString();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newString((-3038), "com.google.javascript.rhino.Node$NodeMismatch", 114, 56);
      node0.setType(56);
      node0.replaceChildAfter(node0, node0);
      Node.extractLineno(node0.FLAG_LOCAL_RESULTS);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "missing prop: ";
      Node node0 = Node.newString("missing prop: ", 85, 1011);
      Node node1 = new Node(1011, node0, node0, node0, node0);
      node1.mayMutateArguments();
      Node node2 = new Node(213048, node1, node0, node1, node1, 40, (-95));
      int int0 = 39;
      int int1 = (-687);
      Node.newString(node0.ORIGINALNAME_PROP, string0, int0, int1);
      String string1 = "";
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1232);
      String string0 = "";
      Node node1 = new Node(39, node0, node0, node0, node0);
      Node.newString(0, "NZ'=rTiXt\"n3Ie&Dbq");
      Node node2 = new Node(1232, node0, node1, node0, node1, 117, 52);
      node2.mayMutateGlobalStateOrThrow();
      InputId inputId0 = new InputId(string0);
      inputId0.toString();
      ErrorReporter errorReporter0 = null;
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newString("buwkMu]0");
      Node node1 = new Node(4, node0);
      Node node2 = node0.cloneTree();
      node1.replaceChildAfter(node0, node2);
      node0.getLastChild();
      node0.getType();
      // Undeclared exception!
      try { 
        node1.getSideEffectFlags();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newString((-3038), "com.google.javascript.rhino.Node$NodeMismatch", 114, 56);
      Node node1 = new Node(56, node0);
      node1.replaceChildAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newString((-1819), ",", 26, (-2084));
      Node node1 = new Node((-1819), node0, node0);
      node1.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newString(154, "=|G! !,K/jDDR53/q");
      node0.isSetterDef();
      node0.isFor();
      node0.getCharno();
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isCall();
      Node node1 = Node.newString("com.google.javascript.rhino.Node$AbstractPropListItem", 2781, 50);
      node1.detachChildren();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.Node$AbstractPropListItem");
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newString(113, "com.google.common.collect.ImmutableList$Builder");
      node0.getQualifiedName();
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = new Node(51, 51, 51);
      Node node1 = Node.newNumber((double) 57, 4095, 0);
      node0.isAdd();
      node1.isHook();
      node1.isInc();
      node0.checkTreeEqualsImpl(node1);
      node1.setString("m_p.xjA#4LP6'Xh0! ");
      node1.isExprResult();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newNumber(402.8644206946486);
      Node node1 = new Node(818, node0, node0, node0, node0, 1800, 1);
      node1.checkTreeEquals(node0);
      node1.isDefaultCase();
      node0.getQualifiedName();
      // Undeclared exception!
      try { 
        node1.isDefaultCase();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 818
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newString("buwkMu]0");
      Node node1 = Node.newString(43, "buwkMu]0", 40, 8233);
      node1.getSideEffectFlags();
      node0.isCatch();
      node0.isDo();
      node1.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newNumber(2899.619732, 0, 0);
      node0.getDouble();
      node0.isVarArgs();
      node0.setLength(0);
      Node node1 = new Node(51, node0, node0, 35, 1812);
      node1.getString();
      int int0 = 8;
      node1.getExistingIntProp(int0);
      node0.replaceChildAfter(node1, node1);
      // Undeclared exception!
      try { 
        node0.getLastChild();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // IN 35 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node(37);
      node0.setSideEffectFlags(30);
      node0.isGetElem();
      node0.toString();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.getDouble();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newNumber(2758.7575248638);
      node0.isNull();
      node0.getSourceFileName();
      node0.getString();
      // Undeclared exception!
      try { 
        node0.getSideEffectFlags();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 2758.7575248638 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node.extractLineno(42);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node(12, node0, node0);
      node1.isString();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.getDouble();
      // Undeclared exception!
      try { 
        node0.isOptionalArg();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // WHILE 113 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node(105);
      int int0 = Node.POST_FLAG;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node0.getString();
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newString("?;pK$7!x$rc+", 3926, 0);
      Node node1 = new Node(35, node0, node0);
      Node node2 = new Node(0, node1, 4096, 3239);
      Node node3 = node2.removeFirstChild();
      node3.getNext();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newString("no a trAn(Node");
      Node node1 = new Node((-685), node0, node0, node0, 57, 40);
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = new Node(8, node0, node0);
      node1.removeChild(node0);
      node1.isCase();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = new Node(0);
      node0.getNext();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newString(")RR!1^v!1U:jgv");
      Node node1 = new Node(16, node0, 42, 37);
      Node node2 = new Node(40, node0, node1, node1, 57, 4095);
      node0.removeFirstChild();
      // Undeclared exception!
      try { 
        node2.isIn();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.JSDocInfo$NamePosition");
      Node node1 = new Node(0, node0, 1817, 12);
      Node node2 = node1.useSourceInfoFromForTree((Node) null);
      node0.isExprResult();
      node2.isNew();
      node0.setSideEffectFlags(node1.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("DELPROP");
      Node node1 = new Node(40, node0, 4095, 1);
      node1.useSourceInfoFromForTree((Node) null);
      node1.isNew();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node1.SYNTHETIC_BLOCK_PROP);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, (-2938), (-2938));
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(38, 38, 38);
      Node node1 = new Node(38, node0);
      node1.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.setSideEffectFlags(node_SideEffectFlags0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = new Node(101);
      node0.setSideEffectFlags(101);
      // Undeclared exception!
      try { 
        node0.hasMoreThanOneChild();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got AND
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1232);
      Node node1 = Node.newString(48, "");
      Node.newString(0, "NZ'=rTiXt\"n3Ie&Dbq");
      Node node2 = new Node(1232, node0, node1, node0, node1, 117, 52);
      node2.mayMutateGlobalStateOrThrow();
      InputId inputId0 = new InputId("");
      inputId0.toString();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType jSType0 = null;
      JSType.toMaybeTemplatizedType((JSType) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", node1, (JSType) null);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      String string0 = null;
      ObjectType.createDelegateSuffix(string0);
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      enumElementType0.canTestForShallowEqualityWith(jSType0);
      // Undeclared exception!
      try { 
        enumElementType1.getRootNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = Node.newString(309, "BJ?B$I_@I");
      node0.isGetProp();
      node0.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node.newString("buwkMu]0");
      Node.newString(43, "rootype", 40, 158);
      Node node0 = Node.newString(4095, "rootype");
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node0 = jSDocInfo0.getAssociatedNode();
      Node node1 = new Node(4, (Node) null, 2, 0);
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, 377);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      List<JSType> list0 = null;
      node0.getIntProp(0);
      simpleErrorReporter0.error("Object#Key", "Object#Element", (-4479), 50);
      Node node1 = new Node(55);
      node1.getProp(4095);
      jSTypeRegistry0.isForwardDeclaredType("");
      SimpleErrorReporter.getMessage1("Object#Element", (Object) null);
      Node node2 = jSTypeRegistry0.createParameters(list0);
      node0.addChildrenToBack(node2);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newString("no a trAn(Node");
      Node node1 = new Node(30, node0, node0, node0, 57, 40);
      node1.getType();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = null;
      Node node1 = new Node(85, (Node) null, (Node) null, (Node) null, 85, 996);
      node1.mayMutateArguments();
      node1.getInputId();
      // Undeclared exception!
      try { 
        node1.checkTreeEqualsImpl(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(57, 57, 96);
      Node node1 = new Node((-685), node0, (Node) null, (Node) null, 51, 126);
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node0 = jSDocInfo0.getAssociatedNode();
      Node node1 = new Node(97, (Node) null, (Node) null, (Node) null, (Node) null);
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.common.base.Predicates$NotPredicate", 0, 0);
      Node node1 = Node.newString("o#I*VAf!e]o4h)arK", 49, (-3387));
      Node node2 = new Node(0, node0, node0, node1, 38, (-2223));
      Node node3 = node2.removeFirstChild();
      node1.isIn();
      node3.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 2498, 2498);
      node0.getAncestors();
      node0.isIn();
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 1589;
      Node node0 = new Node(1589, (Node[]) null);
      // Undeclared exception!
      try { 
        node0.isNoSideEffectsCall();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = new Node(54, (Node[]) null);
      node0.getInputId();
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = new Node((-3429), 2796, 2796);
      Node node1 = new Node((-3429), node0, node0, node0, node0);
      node1.setJSType((JSType) null);
      node1.setSideEffectFlags((-478));
      node1.isString();
      String string0 = "*aSu@>IaID+Q";
      node0.putProp(node1.MAX_COLUMN_NUMBER, string0);
      // Undeclared exception!
      try { 
        node1.isSyntheticBlock();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -3429
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = new Node(37);
      node0.setSideEffectFlags(37);
      node0.isGetElem();
      node0.setString("Q4-");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = new Node(1239);
      node0.setSideEffectFlags(1239);
      // Undeclared exception!
      try { 
        node0.isGetElem();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1239
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newString(0, "Node tree inequality:\nTree1:\n");
      int int0 = 10;
      Node node1 = new Node(0, node0, node0, node0, 0, 10);
      node1.replaceChild(node0, node0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      // Undeclared exception!
      try { 
        node2.checkTreeTypeAwareEqualsImpl(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = Node.newNumber((-557.0));
      Node node1 = Node.newString("#");
      node0.replaceChild(node1, node1);
      node0.hasChildren();
      // Undeclared exception!
      try { 
        node0.isDelProp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = Node.newString((String) null);
      node0.detachChildren();
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newString("missing prop: ", 85, 1011);
      Node node1 = node0.cloneTree();
      node1.mayMutateArguments();
      node1.getIntProp(0);
      node0.isAssignAdd();
      node0.isTypeOf();
      node0.isIf();
      Node.newNumber(0.0);
      Node node2 = Node.newString(49, "missing prop: ");
      node1.getSourceOffset();
      node0.isTypeOf();
      node2.isEquivalentToTyped(node0);
      node2.setType(0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(126);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.valueOf();
      node1.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = new Node(113, 1758, 1758);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(46);
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newString("no a trAn(Node");
      Node node1 = node0.cloneTree();
      node1.isEmpty();
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newString(1164, "j");
      node0.isEquivalentTo(node0);
      node0.isTypeOf();
      node0.isIf();
      Node node1 = Node.newNumber((double) 48);
      Node node2 = Node.newString(32, ">");
      node2.getSourceOffset();
      node2.isTypeOf();
      Node node3 = new Node((-644), node1);
      node3.isEquivalentToTyped(node2);
      node2.setType(318);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(123);
      node_SideEffectFlags0.setMutatesThis();
      node2.setString("P");
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = new Node(69);
      Node node1 = Node.newString(1, "mpS");
      node0.isEquivalentToTyped(node1);
      Node node2 = new Node((-1331), node0, node0, node0, 2, 12);
      node2.setDouble(1.0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = new Node(113, 1758, 1758);
      node0.isAnd();
      node0.getSourceOffset();
      node0.getSideEffectFlags();
      node0.isCatch();
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node0.isTypeOf();
      node0.isIf();
      Node.newNumber(1392.4);
      Node.newString("Object#Element");
      int int0 = Node.QUOTED_PROP;
      node0.isNot();
      node0.setString("Object#Element");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-443));
      node0.isLabelName();
      node0.isAssignAdd();
      node0.isDec();
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newString("'+");
      node0.mayMutateArguments();
      node0.isIf();
      Node node1 = Node.newString(53, "'+");
      node1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = new Node(37);
      node0.setSideEffectFlags(37);
      node0.isDefaultCase();
      node0.getQualifiedName();
      node0.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newString("buwkMu]0");
      Node node1 = Node.newString(49, "buwkMu]0", 4095, 30);
      Node node2 = new Node(56, node1, node1, node0, 85, 46);
      Node node3 = new Node(38, node2, node2);
      node3.cloneTree();
      node2.hasChildren();
      node3.isDelProp();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = Node.COLUMN_BITS;
      Node node0 = Node.newString(12, "Uh~)->k{\"jM9");
      Node node1 = new Node(51, node0, node0, node0);
      node0.copyInformationFromForTree(node1);
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node.extractLineno((-1576));
      Node node0 = Node.newNumber((double) (-1576), 1488, (-1115));
      int int0 = 1085;
      node0.setSourceEncodedPosition(1488);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.replaceChild(node1, node1);
      node0.setCharno(int0);
      node0.getProp(int0);
      // Undeclared exception!
      try { 
        node0.cloneTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newString("ASSIGN_URSH");
      node0.detachChildren();
      Node.newString(57, "ASSIGN_URSH", 51, 56);
      Node node1 = Node.newString(46, "ASSIGN_URSH", 32, 57);
      node1.getChildBefore(node0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber((double) 29, 52, 56);
      Node node2 = node0.useSourceInfoFromForTree(node0);
      Object object0 = new Object();
      node0.isName();
      node0.isTrue();
      node0.clonePropsFrom(node1);
      Node node3 = Node.newNumber(0.0);
      Node node4 = new Node(42, node0, node1, node0, node3);
      node1.isQualifiedName();
      node1.detachFromParent();
      node4.isCast();
      Node.NodeMismatch node_NodeMismatch0 = node3.checkTreeTypeAwareEqualsImpl(node4);
      node0.checkTreeEqualsImpl(node2);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        node_NodeMismatch0.equals(locale_Category0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.setIsSyntheticBlock(false);
      node0.hasChildren();
      node0.isLabelName();
      node0.isAssignAdd();
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newNumber((-3422.8359796159807));
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newString("no a trAn(Node");
      node0.hasChildren();
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("com.google.javascript.rhino.JSDocInfo$NamePosition");
      nodeArray0[0] = node0;
      Node node1 = new Node(110, nodeArray0, 49, 2);
      node1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 86;
      Node node0 = new Node(86, (Node[]) null, 86, 86);
      SimpleErrorReporter simpleErrorReporter0 = null;
      try {
        simpleErrorReporter0 = new SimpleErrorReporter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(189, (Node[]) null, 189, 43);
      node0.isFor();
      Node node1 = node0.cloneTree();
      // Undeclared exception!
      try { 
        node1.isAssign();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = Node.newString("lxQ&jke[9LW", 0, 32);
      node0.toStringTree();
      Node node1 = new Node(32, node0, node0, node0);
      node0.isOnlyModifiesThisCall();
      Node node2 = new Node((-229), node1);
      node2.type = 8;
      Node node3 = Node.newNumber((double) 46, 1306, (-756));
      node3.getIntProp(41);
      node0.setCharno(43);
      node0.getAncestor((-3836));
      node0.getSourceFileName();
      node2.getAncestors();
      node1.isCall();
      node0.isEmpty();
      int int0 = 306654252;
      node1.removeProp(int0);
      int int1 = 1102;
      // Undeclared exception!
      try { 
        node0.isFromExterns();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newString(">");
      node0.detachChildren();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-7), (-7), (-7));
      node0.isNew();
      node0.hasChildren();
      node0.getAncestor((-7));
      // Undeclared exception!
      try { 
        node0.isTrue();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newString("buwkMu]0");
      node0.getDouble();
      // Undeclared exception!
      try { 
        node0.isOptionalArg();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING buwkMu]0 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1232);
      Node node1 = Node.newString(48, "");
      Node node2 = Node.newString(0, "NZ'=rTiXt\"n3Ie&Dbq");
      Node node3 = new Node(1232, node0, node1, node0, node1, 117, 52);
      node3.mayMutateGlobalStateOrThrow();
      InputId inputId0 = new InputId("");
      Node node4 = Node.newString(946, "NZ'=rTiXt\"n3Ie&Dbq");
      Node node5 = new Node(4469, node0, node3, node2);
      node4.addChildBefore(node3, node5);
      node1.isGetProp();
      node3.setInputId(inputId0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = node0.useSourceInfoFromForTree(node0);
      node1.setCharno(57);
      node1.getSideEffectFlags();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString(113, "missing prop: ", 1011, 113);
      node0.getIntProp(39);
      node0.setIsSyntheticBlock(false);
      node0.hasChildren();
      Node node1 = node0.getAncestor(0);
      node1.putIntProp((-2626), 31);
      node0.isAssignAdd();
      node0.isDec();
      node0.isScript();
      node1.getChildCount();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      Node node0 = Node.newNumber((-1578.0744634), 9, 54);
      Node node1 = new Node(46, node0, node0);
      node0.useSourceInfoFromForTree(node1);
      node1.isExprResult();
      node1.isNew();
      node1.toStringTree();
      node0.getChildBefore(node1);
      double double0 = 392.644303;
      int int0 = (-788);
      int int1 = 1349;
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newString(">");
      node0.detachChildren();
      Node node1 = new Node(544, node0, node0, node0, 0, 2);
      node0.getString();
      Node node2 = node1.getLastChild();
      node2.addChildrenToFront(node0);
      node2.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = node0.cloneNode();
      node0.setLineno(42);
      node1.addChildrenToFront(node0);
      // Undeclared exception!
      try { 
        node1.addChildToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "<\"";
      Node node0 = Node.newString("<\"");
      String string1 = "Bad type annotation. Unknown type ";
      Node.newString("Bad type annotation. Unknown type ");
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newString(116, "com.google.common.collect.ImmutableList$SubList");
      node0.detachChildren();
      node0.isEmpty();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newString("/\"+u[q6,l+Bz#1S");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node1 = Node.newString(12, "/\"+u[q6,l+Bz#1S");
      nodeArray0[3] = node1;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      Node node2 = new Node(127, nodeArray0);
      node0.removeChildAfter(node2);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node[] nodeArray1 = new Node[2];
      Node node0 = new Node(102, nodeArray1, 2931, 30);
      node0.mayMutateGlobalStateOrThrow();
      node0.getAncestors();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(114, "mssing rop: ");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = new Node(1175, nodeArray0, 53, (-2595));
      nodeArray0[0].isEmpty();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList");
      Node[] nodeArray0 = new Node[5];
      Node node1 = Node.newNumber((double) 8, 12, (-1142));
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      Node node2 = new Node(54, nodeArray0, 0, (-1746));
      nodeArray0[3].isEmpty();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = Node.POST_FLAG;
      Node node0 = Node.newNumber(0.0);
      node0.isBlock();
      node0.isDefaultCase();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      Node node1 = new Node(12, nodeArray0);
      // Undeclared exception!
      try { 
        node1.getString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(43);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.valueOf();
      node0.isDec();
      Node node1 = node0.cloneTree();
      node1.addChildrenAfter(node0, node0);
      // Undeclared exception!
      try { 
        node1.setSourceEncodedPositionForTree(node0.FLAG_THIS_UNMODIFIED);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newString("'7I3{y*_n9,-F1wl=2X");
      node0.detachChildren();
      node0.setLineno(42);
      node0.addChildAfter(node0, node0);
      // Undeclared exception!
      try { 
        node0.isQualifiedName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1477, nodeArray0);
      node0.isQuotedString();
      node0.isIn();
      Node node1 = Node.newNumber((double) 36);
      Node node2 = node0.srcref(node1);
      node2.removeChildren();
      node2.getIndexOfChild(node1);
      node2.isLabelName();
      node2.getType();
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = Node.newString(">");
      node0.detachChildren();
      Node node1 = new Node(544, node0, node0, node0, 0, 2);
      node0.getString();
      node0.isDec();
      Node node2 = node0.cloneTree();
      node2.addChildrenAfter(node0, node0);
      node1.setSourceEncodedPositionForTree(node2.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 35;
      Node node0 = Node.newString(111, "hu);dS?)B", 35, 35);
      Node node1 = null;
      node0.replaceChildAfter((Node) null, (Node) null);
      int int1 = (-2641);
      int int2 = (-501);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(0, node0, node0, node0);
      nodeArray0[0] = node1;
      Node node2 = Node.newString(2201, "undefined", 2, 43);
      nodeArray0[1] = node2;
      Node node3 = Node.newString("undefined");
      nodeArray0[2] = node3;
      Node node4 = new Node(49, nodeArray0, 4095, 0);
      node4.isNoSideEffectsCall();
      node3.getFirstChild();
      node0.getDirectives();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = Node.newString(40, "N@0Rth<E", (-816), 1104);
      node0.isNoSideEffectsCall();
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = new Node(113, 1758, 1758);
      node0.isAnd();
      node0.wasEmptyNode();
      node0.isCatch();
      node0.isEmpty();
      node0.isBreak();
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.hasChildren();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Object#Element", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.wasEmptyNode();
      String string0 = "";
      jSTypeRegistry0.registerPropertyOnType("", (JSType) null);
      Node node1 = Node.newString(string0, node0.FLAG_ARGUMENTS_UNMODIFIED, node0.REFLECTED_OBJECT);
      // Undeclared exception!
      try { 
        node0.isEquivalentTo(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.UnionTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("no\"p a trAn(Node");
      Node node1 = Node.newString(39, "no\"p a trAn(Node");
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = new Node(37);
      node0.setSideEffectFlags(37);
      node0.isAdd();
      node0.getSourceFileName();
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = new Node(37);
      Node node1 = Node.newString(38, (String) null, 15, 16);
      node1.isQualifiedName();
      node0.cloneTree();
      // Undeclared exception!
      try { 
        node0.hasChildren();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 21;
      Node node0 = Node.newString(0, (String) null, 0, 21);
      int int1 = (-1169);
      Node node1 = null;
      try {
        node1 = new Node(int0, node0, node0, node0, node0, node0.FLAG_ARGUMENTS_UNMODIFIED, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = new Node(9, (Node) null, (Node) null);
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newString(113, "should never be called", 1011, 113);
      node0.getIntProp(2);
      node0.isOptionalArg();
      Node node1 = new Node(46, node0, node0, node0);
      Node node2 = new Node(51, node1, node0, node0);
      node1.hasChildren();
      node1.getNext();
      // Undeclared exception!
      try { 
        node0.isWith();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = Node.newString("unexpected prop id ", (-1601), (-2910));
      Node node1 = new Node(29, node0, node0, node0, node0);
      Node node2 = new Node((-1460), node1, node0, node1);
      node0.isEquivalentTo(node2);
      int int0 = 47;
      Node node3 = new Node(int0, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node3, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = Node.newString("no a trAn(Node");
      Node node1 = new Node(53, node0, node0, node0, 57, 40);
      Node node2 = new Node(37, node0, node1, node0);
      // Undeclared exception!
      try { 
        node2.isEquivalentTo(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.getQualifiedName();
      node0.isDefaultCase();
      node0.isGetElem();
      node0.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = Node.newNumber(1392.4);
      int int0 = Node.QUOTED_PROP;
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = new Node(37);
      node0.isGetElem();
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      Node node0 = Node.newString("0fg`/m5", 906, (-3769));
      node0.getQualifiedName();
      node0.getJsDocBuilderForNode();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(114, "mssing rop: ");
      node0.isNot();
      node0.isFunction();
      node0.isDec();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      node0.mayMutateArguments();
      node0.isIf();
      Node node1 = Node.newString(43, (String) null);
      node1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newString("no a trAn(Node");
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      Node node0 = Node.newString("0fg`/m5", 906, (-3769));
      node0.getQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("0fg`/m5");
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = new Node(37);
      node0.setOptionalArg(true);
      node0.setSideEffectFlags(37);
      node0.isDefaultCase();
      node0.getQualifiedName();
      node0.mayMutateArguments();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((double) 0);
      Node node1 = new Node(4095, node0, node0);
      node1.isEquivalentToShallow(node0);
      node1.removeChild(node0);
      node0.hasMoreThanOneChild();
      node0.getDirectives();
      node0.addSuppression("b(8Fe[;");
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newString("missing prop: ", 85, 1011);
      Node node1 = new Node(1011, node0, node0, node0, node0);
      node1.mayMutateArguments();
      node1.getIntProp(10);
      node0.isAssignAdd();
      node0.isTypeOf();
      node0.isIf();
      Node node2 = Node.newNumber(0.0);
      Node.newString(49, "missing prop: ");
      int int0 = Node.QUOTED_PROP;
      node0.getQualifiedName();
      node1.isDefaultCase();
      node2.isGetElem();
      node1.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(0, node0, node0, node0);
      nodeArray0[0] = node1;
      Node node2 = Node.newString(2201, "undefined", 2, 43);
      nodeArray0[1] = node2;
      Node.newString("undefined");
      node1.addChildToFront(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setMutatesGlobalState();
      node1.setSideEffectFlags(node_SideEffectFlags0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString(33, ">;!XI}C");
      Node node1 = new Node(1543, node0, node0, node0, 43, 39);
      node0.addChildToFront(node1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = Node.newString(1249, "com.google.common.collect.ImmutableBiMap", (-473), (-4266));
      node0.isAdd();
      node0.isAssignAdd();
      Node node1 = new Node(34, node0, node0, node0, 119, (-3512));
      Node node2 = new Node(12, node0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber((double) 29, 52, 56);
      Node node2 = new Node(8, node0, node1);
      Node.newString("}F*Qp&<:~h>w={$P");
      node2.addChildToFront(node0);
      int int0 = 93;
      Node node3 = null;
      try {
        node3 = new Node(int0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node(113);
      node0.isGetterDef();
      node0.isNull();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(46);
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.common.base.Predicates$NotPredicate", 0, 0);
      Node node1 = Node.newString("o#I*VAf!e]o4h)arK", 49, (-3387));
      Node node2 = new Node(0, node0, node0, node1, 38, (-2223));
      Node node3 = node2.removeFirstChild();
      node1.isIn();
      node3.isNull();
      node2.setSourceEncodedPositionForTree(55);
      Node node4 = Node.newString("o#I*VAf!e]o4h)arK", (-118), 52);
      node3.isEquivalentToTyped(node4);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(0, node0, node0, node0);
      nodeArray0[0] = node1;
      Node node2 = Node.newString(2201, "undefined", 2, 43);
      nodeArray0[1] = node2;
      Node node3 = Node.newString("undefined");
      node0.isOnlyModifiesArgumentsCall();
      nodeArray0[2] = node3;
      Node node4 = new Node(49, nodeArray0, 4095, 0);
      node4.isNoSideEffectsCall();
      node3.getFirstChild();
      node0.getDirectives();
      node2.isSyntheticBlock();
      node0.setChangeTime(42);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.mayMutateArguments();
      node0.isIf();
      Node node1 = new Node(16, node0, 2, 47);
      node1.isOnlyModifiesArgumentsCall();
      node1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = Node.newString(113, "missing prop: ");
      node0.setChangeTime(113);
      node0.isExprResult();
      node0.isParamList();
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(114, "missing prop: ", 114, 137);
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.setIsSyntheticBlock(false);
      node0.hasChildren();
      Node node1 = new Node(12, node0, node0);
      node0.isExprResult();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = Node.newString("x|(-6;]%;Otwwr", 0, 47);
      node0.getSourceFileName();
      node0.isParamList();
      node0.putIntProp(0, 2);
      Node node1 = new Node(50, node0, node0, node0, 53, 53);
      node0.getAncestors();
      Node node2 = new Node(16, node0, node0, node1, node0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber((double) 29, 52, 56);
      Node node2 = new Node(8, node0, node1);
      Node node3 = new Node(53, node2, node2, node1, node1, 38, 2);
      // Undeclared exception!
      try { 
        node3.isExprResult();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = new Node(880);
      node0.getBooleanProp(33);
      Node node1 = new Node(9, node0, node0, (-253), 12);
      node1.isUnscopedQualifiedName();
      node0.getProp(880);
      Node node2 = new Node(33, node1, node0, node0, 54, 39);
      node2.isVarArgs();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node2);
      node1.replaceChild(node2, node2);
      // Undeclared exception!
      try { 
        node0.isCatch();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newNumber((double) 15);
      node0.siblings();
      node0.putIntProp(15, 15);
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = 8;
      Node node0 = new Node(8, 8, 8);
      node0.getJSDocInfo();
      String string0 = "g_*\"pa_V8->98Oc3";
      node0.isOnlyModifiesArgumentsCall();
      node0.addSuppression("g_*\"pa_V8->98Oc3");
      node0.isString();
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.useSourceInfoFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 0, 0);
      node0.isString();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      int int0 = Node.STATIC_SOURCE_FILE;
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(110, node0, node0, 40, 55);
      Node node2 = Node.newNumber((double) 57, 52, 2405);
      Node node3 = Node.newString(40, " is not a string node", 16, 40);
      node2.toStringTree();
      node3.setCharno(12);
      node0.isEquivalentToTyped(node1);
      node1.isNull();
      node3.isString();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int int0 = 113;
      Node node0 = Node.newString(113, "missing prop: ");
      node0.isParamList();
      node0.useSourceInfoFrom((Node) null);
      node0.setLineno(int0);
      // Undeclared exception!
      try { 
        node0.isNE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = Node.newString(144, "missing prop: ", 1011, 144);
      node0.getIntProp(71);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.setSourceEncodedPositionForTree(0);
      node0.mayMutateGlobalStateOrThrow();
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = new Node(37);
      node0.setSideEffectFlags(37);
      node0.isAdd();
      node0.isInc();
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      Node node0 = Node.newString("0fg`/m5");
      node0.getQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("0fg`/m5");
      node0.isInc();
      node0.isUnscopedQualifiedName();
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = Node.newNumber(2899.619732, 0, 0);
      node0.getDouble();
      node0.isVarArgs();
      node0.setLength(0);
      node0.getDirectives();
      int int0 = 35;
      node0.isEquivalentTo((Node) null, true, false, false);
      int int1 = 1812;
      Node node1 = new Node(node0.STATIC_SOURCE_FILE, node0, node0, int0, int1);
      node1.getString();
      int int2 = 8;
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node0.isTypeOf();
      node0.isIf();
      node0.isDefaultCase();
      node0.isSyntheticBlock();
      node0.isComma();
      node0.isEquivalentTo((Node) null, false, false, false);
      Node node1 = Node.newString(node0.REFLECTED_OBJECT, jSTypeRegistry0.OBJECT_INDEX_TEMPLATE);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      // Undeclared exception!
      try { 
        node0.getType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newString("lxQ&jke[9LW", 0, 32);
      String string0 = node0.toStringTree();
      Node node1 = new Node(32, node0, node0, node0);
      node0.isOnlyModifiesThisCall();
      Node node2 = new Node((-229), node1);
      node2.type = 8;
      node0.setStaticSourceFile((StaticSourceFile) null);
      node1.wasEmptyNode();
      JSType jSType0 = null;
      Node node3 = new Node(12288, node2, node0);
      node2.replaceChildAfter(node0, node3);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.registerPropertyOnType(string0, jSType0);
      String string1 = "input_id";
      // Undeclared exception!
      try { 
        Node.newString(string1, node3.REFLECTED_OBJECT, node0.SIDE_EFFECTS_FLAGS_MASK);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newString("buwkMu]0");
      Node node1 = Node.newString(49, "buwkMu]0", 4095, 30);
      Node node2 = new Node(38, node0, node0);
      node2.cloneTree();
      node1.hasChildren();
      node2.isDelProp();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(43);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags3.valueOf();
      Node node1 = new Node(38, node0, node0, node0, 55, 85);
      node1.isDec();
      node1.cloneTree();
      node0.addChildrenAfter(node1, node1);
      int int0 = 115;
      node1.setSourceEncodedPositionForTree(int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0);
      node0.getChangeTime();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(43);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags0.valueOf();
      node0.isDec();
      Node node1 = node0.cloneTree();
      node1.addChildrenAfter(node0, node0);
      // Undeclared exception!
      try { 
        node1.setSourceEncodedPositionForTree(node0.FLAG_ARGUMENTS_UNMODIFIED);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = new Node(54, 13, 54);
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.isOnlyModifiesArgumentsCall();
      node0.addSuppression("");
      node0.isString();
      Node node1 = null;
      Node node2 = node0.useSourceInfoFrom((Node) null);
      node2.addChildToFront(node1);
      int int0 = 626;
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.JSDocInfo$NamePosition");
      Node node1 = new Node(0, node0, 1817, 12);
      node1.setLineno(48);
      node1.getStaticSourceFile();
      Node node2 = node1.useSourceInfoFromForTree((Node) null);
      node0.isExprResult();
      node2.isNew();
      node0.setSideEffectFlags(node1.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node.extractCharno(3122);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = new Node(113, 1758, 1758);
      node0.isAnd();
      node0.setLineno(113);
      node0.isNE();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("", 42, 42);
      node0.toStringTree();
      Node node1 = new Node(0, node0, node0, node0);
      node1.isOnlyModifiesThisCall();
      Node node2 = new Node(2, node1);
      Node node3 = Node.newNumber((-1995.3034918756555), 915, 51);
      node1.getIntProp(49);
      node1.setCharno(47);
      node0.getAncestor(39);
      node2.getSourceFileName();
      Node node4 = Node.newString(15, "|RIaD", (-1981), 43);
      node4.getAncestors();
      node2.isCall();
      node3.isEmpty();
      node3.removeProp(37);
      node2.isFromExterns();
      Node.newString(40, "|RIaD");
      node3.isEquivalentToTyped(node1);
      node4.isName();
      node3.replaceChild(node1, node2);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newNumber((-557.0));
      node0.isOptionalArg();
      node0.isOnlyModifiesThisCall();
      node0.isFromExterns();
      node0.isSwitch();
      node0.isDec();
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node0.getString();
      // Undeclared exception!
      try { 
        node_SideEffectFlags1.setReturnsTainted();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 0.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node(12, node0, node0);
      node1.isString();
      node0.isEquivalentTo(node1);
      Node node2 = new Node(42, node1);
      node2.isOptionalArg();
      node0.toString(true, false, false);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = new Node(113, 40, 2887);
      node0.isAnd();
      node0.isName();
      node0.getAncestor(2887);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(33);
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-7), 0, (-7));
      node0.isNew();
      node0.hasChildren();
      Node node1 = node0.getAncestor(0);
      node1.isTrue();
      node1.mayMutateGlobalStateOrThrow();
      node0.isQuotedString();
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = new Node(113, 1758, 1758);
      node0.isAnd();
      node0.isName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(46);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber((double) 29, 52, 56);
      node0.useSourceInfoFromForTree(node0);
      node0.isFromExterns();
      node1.isUnscopedQualifiedName();
      Object object0 = new Object();
      node0.isName();
      node0.isTrue();
      Node node2 = Node.newNumber(0.0);
      Node node3 = new Node(42, node0, node1, node0, node2);
      node1.isQualifiedName();
      node3.getChangeTime();
      node1.toString();
      node0.checkTreeTypeAwareEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(113, "missCing prop: ", 1011, 113);
      node0.getIntProp(39);
      node0.getInputId();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("0gk`/m5", "missCing prop: ", 3740, 49);
      int int0 = Node.COLUMN_BITS;
      Node node1 = Node.newString(38, "missCing prop: ", 16, 1073741824);
      node1.isName();
      node0.putBooleanProp(102, false);
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = ">";
      Node node0 = Node.newString(">");
      Node node1 = null;
      Node node2 = new Node((-3000), 741, 121);
      Node node3 = node0.useSourceInfoFrom(node2);
      node3.addChildToFront(node0);
      node2.getExistingIntProp(751619276);
      node2.getIntProp(node3.DIRECTIVES);
      node3.getDouble();
      node0.isScript();
      int int0 = 1760;
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = new Node(51, 51, 51);
      node0.isNew();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.getExistingIntProp(51);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newString(">");
      node0.detachChildren();
      Node node1 = new Node(544, node0, node0, node0, 0, 2);
      node0.getString();
      Node.mergeLineCharNo(31, 57);
      node0.isQualifiedName();
      node0.setString(">");
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = Node.newString("Y");
      node0.getBooleanProp(57);
      node0.detachChildren();
      node0.isQualifiedName();
      node0.setString("Y");
      node0.isExprResult();
      Node node1 = new Node(47, node0, node0, node0);
      node0.hasChild(node1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber((double) 29, 52, 56);
      Node node2 = new Node(8, node0, node1);
      Node node3 = node2.useSourceInfoFromForTree(node0);
      node3.isExprResult();
      node0.isNew();
      node2.setSideEffectFlags(57);
      // Undeclared exception!
      try { 
        node1.isDelProp();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 8
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      Node node0 = Node.newString("0fg`/m5", 906, (-3769));
      node0.getQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("0fg`/m5");
      node0.getDirectives();
      node0.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = Node.newString(85, "missing prop: ", 1011, 85);
      Node node1 = node0.cloneTree();
      node1.mayMutateArguments();
      node1.getIntProp(31);
      node0.setIsSyntheticBlock(false);
      node1.hasChildren();
      node0.isAssignAdd();
      node1.isDelProp();
      node1.getNext();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[2];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      jSTypeArray0[0] = jSType0;
      JSType jSType1 = modificationVisitor0.caseUnknownType();
      jSTypeArray0[1] = jSType1;
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.setString((String) null);
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(1852, "com.google.javascript.rhino.Node$AbstractPropListItem", 1852, 1852);
      node0.getIntProp(1852);
      node0.isFor();
      Node node1 = new Node(38, node0, node0, node0, node0);
      node0.copyInformationFromForTree(node1);
      node0.isHook();
      node0.isInc();
      node1.setString("com.google.javascript.rhino.Node$AbstractPropListItem");
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1232);
      Node node1 = Node.newString(48, "");
      node1.getStaticSourceFile();
      node0.isSyntheticBlock();
      node0.isVar();
      node1.addSuppression("");
      Node node2 = Node.newString("");
      node1.setStaticSourceFile((StaticSourceFile) null);
      node2.copyInformationFromForTree(node0);
      node0.getStaticSourceFile();
      Node node3 = new Node(42, node2, node2, 38, 1076);
      node3.isInc();
      node2.getLastChild();
      node3.addChildrenToFront((Node) null);
      int int0 = 53;
      int int1 = 130;
      int int2 = 0;
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      node0.isSyntheticBlock();
      node0.isVar();
      node0.addSuppression("P9bD4wkq)Ju{5");
      Node node1 = Node.newNumber((double) 1);
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.getStaticSourceFile();
      Node node3 = new Node((-1486), node0, node2, 1, (-1639));
      node0.isInc();
      Node node4 = node3.getLastChild();
      node4.getAncestors();
      node2.addChildrenToFront(node3);
      Node node5 = new Node((-1751), node4, node4, node0, node0, 1945, 49);
      node5.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber((double) 29, 52, 56);
      node1.isUnscopedQualifiedName();
      Object object0 = new Object();
      node0.isName();
      Node node2 = new Node(42, node0, node1, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getAssociatedNode();
      node2.addChildrenToFront((Node) null);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = ">";
      Node node0 = Node.newString(">");
      node0.getBooleanProp(544);
      node0.detachChildren();
      Node node1 = new Node(544, node0, node0, node0, 0, 2);
      node0.getString();
      Node.mergeLineCharNo(4095, 972);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.addChildAfter(node0, node0);
      node0.isQualifiedName();
      node0.setString(string0);
      // Undeclared exception!
      try { 
        node1.getChangeTime();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = ">";
      Node node0 = Node.newString(">");
      node0.getBooleanProp(544);
      node0.detachChildren();
      Node node1 = new Node(544, node0, node0, node0, 0, 2);
      Node.mergeLineCharNo(4095, 32);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.addChildAfter(node0, node0);
      node0.isQualifiedName();
      // Undeclared exception!
      try { 
        node0.setString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = Node.newNumber((-4321.798767941566));
      Node node1 = new Node((-2488));
      node0.addChildrenToBack(node1);
      node1.isFor();
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      Node node1 = Node.newString(36, "prototype", 2521, 2);
      Node node2 = node0.cloneTree();
      node1.isAssign();
      node2.isUnscopedQualifiedName();
      node0.isScript();
      node2.hasOneChild();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.hasOneChild();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Object#Element", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.wasEmptyNode();
      String string0 = "";
      JSType jSType0 = null;
      Node node1 = new Node(306654289, node0, node0);
      node0.replaceChildAfter(node1, node1);
      jSTypeRegistry0.registerPropertyOnType(string0, jSType0);
      // Undeclared exception!
      try { 
        Node.newString(string0, node0.FLAG_ARGUMENTS_UNMODIFIED, node0.REFLECTED_OBJECT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node.newString("buwkMu]0");
      Node.newString(43, "prototype", 40, 8233);
      Node node0 = Node.newString(4095, "prototype");
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = Node.newNumber(402.8644206946486);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags5.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags6.areAllFlagsSet();
      Node node1 = Node.newString("a`");
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags4.clearSideEffectFlags();
      Node.newString("IZ1|YVyDnSNsV", (-1984), 40);
      node0.getQualifiedName();
      Node.newString(15, "0fg`/m5", 16384, 87855567);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("");
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newString("buwkMu]0");
      Node node1 = new Node(1, node0, node0, node0, node0);
      Node node2 = new Node(56, node1, node1, node0, 85, 46);
      node2.isQualifiedName();
      Node node3 = new Node(node0.SYNTHETIC_BLOCK_PROP, node2, node2);
      // Undeclared exception!
      try { 
        node3.cloneTree();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      int int0 = 31;
      int int1 = 39;
      Node node0 = new Node((-2700));
      Node node1 = new Node(39, node0, node0, node0, node0, 555, 43);
      Node node2 = new Node(39, node1, node1, node0);
      Node node3 = new Node(int1, node2, node1, node1.STATIC_SOURCE_FILE, node0.INCRDECR_PROP);
      Node node4 = new Node(int0, node3, node1, node1, node2, node2.FLAG_GLOBAL_STATE_UNMODIFIED, node1.INPUT_ID);
      // Undeclared exception!
      try { 
        node4.checkTreeEquals(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = Node.newNumber(402.8644206946486);
      node0.detachChildren();
      Node node1 = new Node(77, node0, node0, node0, 16, 1);
      node0.getString();
      boolean boolean0 = false;
      JSDocInfo jSDocInfo0 = new JSDocInfo(boolean0);
      // Undeclared exception!
      try { 
        jSDocInfo0.getAssociatedNode();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 402.8644206946486 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node0 = Node.newNumber((double) (-3330));
      node0.getInputId();
      node0.setInputId((InputId) null);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = Node.newString(2263, "missing prop: ", 1011, 2263);
      node0.getInputId();
      node0.isAnd();
      node0.getSourceOffset();
      node0.isCatch();
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = "'7I3{y*_n9,-F1wl=2X";
      Node node0 = Node.newString("'7I3{y*_n9,-F1wl=2X");
      Node node1 = Node.newString("'7I3{y*_n9,-F1wl=2X");
      node0.addChildToBack(node1);
      node0.detachChildren();
      node0.setLineno(42);
      // Undeclared exception!
      try { 
        node0.addChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.setReturnsTainted();
      Node node0 = Node.newString("^VQc0 !FOXxR9y", (-563), 85);
      node0.getQualifiedName();
      Node node1 = new Node(1800, node0, node0, node0, node0);
      node1.isScript();
      node1.detachChildren();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node(0);
      node0.getDouble();
      // Undeclared exception!
      try { 
        node0.isVarArgs();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, (-170));
      node0.getDouble();
      node0.isVarArgs();
      node0.isOptionalArg();
      node0.setLength((-170));
      Node node1 = new Node(105, node0, node0, 1270, (-2900));
      node0.getString();
      int int0 = 40;
      node1.getExistingIntProp(int0);
      node1.replaceChildAfter(node0, node0);
      Node node2 = node0.getLastChild();
      node2.addChildrenToFront(node1);
      // Undeclared exception!
      try { 
        node0.srcrefTree(node2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 0.0 [length: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = Node.newNumber(765.04379471257, 31, 32);
      node0.getDouble();
      node0.isVarArgs();
      node0.isOptionalArg();
      node0.setLength(544);
      Node node1 = new Node(39, node0, node0, 188, 33);
      node1.getString();
      int int0 = (-780);
      node0.getExistingIntProp(int0);
      String string0 = "wHl@V1NwkS/DxwDd,";
      int int1 = 4;
      Node node2 = Node.newString(string0, int1, node0.COLUMN_MASK);
      // Undeclared exception!
      try { 
        node2.isDec();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = Node.newString(85, "missing prop: ", 1011, 85);
      Node node1 = node0.cloneTree();
      node1.mayMutateArguments();
      node1.getIntProp(31);
      node0.setIsSyntheticBlock(false);
      node0.children();
      node1.hasChildren();
      node0.isAssignAdd();
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = Node.newString("Gg&!vX#7[o");
      node0.mayMutateArguments();
      node0.setIsSyntheticBlock(true);
      node0.children();
      node0.hasChildren();
      node0.setDouble(38);
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING Gg&!vX#7[o [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.areAllFlagsSet();
      Node node0 = Node.newString("a`");
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags5.clearSideEffectFlags();
      Node node1 = Node.newString("0fg`/m5", 52, 1044);
      node0.getQualifiedName();
      Node node2 = Node.newString(2, "The existing child node of the parent should not be null.", 149, 1957);
      node2.isDefaultCase();
      node2.isGetElem();
      node1.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = new Node(113, 1758, 1758);
      node0.isAnd();
      node0.cloneTree();
      node0.hasChildren();
      Node node1 = Node.newString((String) null, 49, 15);
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = new Node(880);
      node0.getBooleanProp(33);
      Node node1 = new Node(9, node0, node0, (-253), 12);
      node1.isUnscopedQualifiedName();
      node0.getProp(880);
      node0.setCharno(42);
      node0.isName();
      node1.isBreak();
      node0.getAncestor(132);
      Node node2 = new Node(33, node1, node0, node0, 54, 39);
      node2.isVarArgs();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node2);
      node1.replaceChild(node2, node2);
      node0.isCatch();
      JSDocInfo jSDocInfo0 = null;
      try {
        jSDocInfo0 = new JSDocInfo();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.JSDocInfo$NamePosition");
      node0.setLineno(48);
      node0.getStaticSourceFile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags4.valueOf();
      Node node1 = Node.newNumber((double) 2);
      node1.isQualifiedName();
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = new Node(880);
      node0.getBooleanProp(33);
      Node node1 = new Node(9, node0, node0, (-253), 12);
      node1.isUnscopedQualifiedName();
      node1.setIsSyntheticBlock(false);
      node1.hasChildren();
      Node node2 = new Node(51, node1, node0);
      node1.isExprResult();
      node0.getLastSibling();
      node0.isBreak();
      node0.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = Node.newString("no a trAn(Node");
      Node node1 = new Node(2);
      node0.addChildrenToBack(node1);
      node1.putIntProp(43, (-635));
      node0.hasChildren();
      node1.isDelProp();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.hasChildren();
      Node node1 = new Node(12, node0, node0);
      node1.setOptionalArg(true);
      node0.isExprResult();
      node0.getLastSibling();
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = new Node(16773120);
      int int0 = Node.POST_FLAG;
      node0.isBlock();
      node0.isDefaultCase();
      node0.getString();
      // Undeclared exception!
      try { 
        node0.isWith();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 16773120
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int int0 = 544;
      Node node0 = new Node(544);
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 544
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((-31.003670652), 110, 110);
      node0.isDec();
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      node0.isEquivalentToTyped(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(39);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node0.isAnd();
      node0.isCatch();
      node0.isEmpty();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isEquivalentTo(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isFunction();
      node0.isCast();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      node0.isSyntheticBlock();
      node0.isEquivalentToShallow(node0);
      node0.addSuppression("P9bD4wkq)Ju{5");
      Node node1 = Node.newNumber((double) 52);
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.getStaticSourceFile();
      Node node3 = new Node((-1486), node0, node2, 1, (-1639));
      node0.isInc();
      Node node4 = node3.getLastChild();
      node4.getAncestors();
      node2.addChildrenToFront(node3);
      Node node5 = new Node((-1751), node4, node4, node0, node0, 1945, 49);
      node5.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = Node.newNumber((double) 85);
      Node node1 = new Node(394, node0, node0, node0, node0);
      node1.isSwitch();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
      Node node2 = new Node(42, nodeArray0, 30, 1023);
      node1.addChildAfter(node2, nodeArray0[1]);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = new Node(8, 8, 8);
      node0.getJSDocInfo();
      node0.addSuppression("g_*\"pa_V8->98Oc3");
      Node node1 = new Node(31, node0, node0, node0);
      Node node2 = Node.newString(153, "String node not created with Node.newString", 50, 36);
      Node node3 = Node.newString("g_*\"pa_V8->98Oc3");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node3;
      nodeArray0[4] = node0;
      nodeArray0[5] = node1;
      nodeArray0[6] = node2;
      nodeArray0[7] = node3;
      Node node4 = new Node(2449, nodeArray0, 53, 31);
      node4.isNoSideEffectsCall();
      nodeArray0[4].getFirstChild();
      nodeArray0[3].getDirectives();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isCall();
      Node node1 = Node.newString("com.google.javascript.rhino.Node$AbstractPropListItem", 2781, 50);
      node1.detachChildren();
      Node node2 = new Node((-2507), node0, node0, node0, 2910, 4095);
      Node node3 = new Node(57, node1, node2, 49, (-2507));
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.Node$AbstractPropListItem");
      node3.isInc();
      node1.isUnscopedQualifiedName();
      node0.isArrayLit();
      node3.hasChild(node1);
      node2.isExprResult();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber((double) 29, 52, 56);
      Node node2 = node0.useSourceInfoFromForTree(node0);
      node1.isUnscopedQualifiedName();
      Object object0 = new Object();
      node0.isName();
      Node node3 = new Node(30, node2, node1);
      node2.getLineno();
      node2.isSetterDef();
      node3.hasChild(node2);
      node2.isOr();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.common.base.Predicates$NotPredicate", 0, 0);
      Node node1 = Node.newString("o#I*VAf!e]o4h)arK", 49, (-3387));
      Node node2 = new Node(0, node0, node0, node1, 38, (-2223));
      node0.isUnscopedQualifiedName();
      node0.isArrayLit();
      node0.hasChild(node1);
      node1.isExprResult();
      node2.isCatch();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = Node.newString(2968, "#c6v[Q>.dE'b", 2968, 39);
      node0.isTrue();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node0.setSideEffectFlags(node_SideEffectFlags4);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.areAllFlagsSet();
      Node node0 = Node.newString("a`");
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags5.clearSideEffectFlags();
      Node node1 = Node.newString("a`", 52, 1044);
      node0.getQualifiedName();
      node1.isObjectLit();
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = Node.newString(85, "o./AwBn{deq(", (-3038), (-3038));
      Node node1 = node0.cloneTree();
      node1.mayMutateArguments();
      node1.getIntProp(8);
      node0.setVarArgs(true);
      node1.setIsSyntheticBlock(true);
      node0.children();
      node1.hasChildren();
      node0.setDouble(1.0);
      node1.isAssignAdd();
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = Node.newString("Gg&!vX#7[o");
      node0.mayMutateArguments();
      node0.setVarArgs(true);
      node0.setIsSyntheticBlock(true);
      node0.children();
      node0.hasChildren();
      node0.setDouble(38);
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING Gg&!vX#7[o [var_args_name: com.google.javascript.rhino.Node$IntPropListItem@0000000002] [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node(1, node0, node0);
      node1.setDouble(1.0);
      node1.setLineno(node0.INPUT_ID);
      // Undeclared exception!
      try { 
        node1.isString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = Node.newString(1249, "bDdyk j.XGU?'", (-473), (-4266));
      node0.isAdd();
      node0.isAssignAdd();
      Node node1 = new Node(34, node0, node0, node0, 119, (-3512));
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = new Node(51, 51, 51);
      node0.isAdd();
      node0.isHook();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = Node.newNumber(3910.33013);
      Node node1 = Node.newNumber(0.0, 31, 29);
      Node node2 = new Node((-1842), node1, node1);
      Node node3 = node2.useSourceInfoFromForTree(node0);
      node0.isExprResult();
      node3.isNew();
      Node node4 = new Node(4095, node1);
      int int0 = 93;
      node4.setSideEffectFlags(int0);
      // Undeclared exception!
      try { 
        node3.isDelProp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSType[] jSTypeArray0 = new JSType[6];
      Node node0 = Node.newString((-172), "", 1044, 42);
      Node node1 = new Node((-172), node0, node0, 40, 17);
      node1.getJSType();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = Node.newString("\"1{C.a.}G;' ");
      Node node1 = Node.newString(46, "\"1{C.a.}G;' ", 48, 665);
      Node node2 = node1.cloneTree();
      node0.hasChildren();
      node2.isFalse();
      node2.getJSType();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = Node.newString("buwkMu]0");
      Node node1 = Node.newString(49, "buwkMu]0", 4095, 30);
      Node node2 = new Node(56, node1, node1, node0, 85, 46);
      node2.replaceChildAfter(node0, node1);
      Node node3 = new Node(node0.SYNTHETIC_BLOCK_PROP, node2, node2);
      node3.cloneTree();
      // Undeclared exception!
      try { 
        node2.hasChildren();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      Node node1 = Node.newNumber((-1.0), (-1266), (-194));
      node0.hasOneChild();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      node1.setStaticSourceFile(simpleSourceFile0);
      node0.wasEmptyNode();
      String string0 = "";
      JSType jSType0 = null;
      Node node2 = new Node(57, node0, node1);
      node2.replaceChildAfter(node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.registerPropertyOnType(string0, jSType0);
      String string1 = "";
      int int0 = 39;
      int int1 = 30;
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = Node.newString(544, "");
      node0.getStaticSourceFile();
      node0.isSyntheticBlock();
      node0.isVar();
      node0.addSuppression("7R9)T\"r_VYm^v");
      Node node1 = Node.newString("7R9)T\"r_VYm^v");
      node1.setStaticSourceFile((StaticSourceFile) null);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node2 = new Node(88, nodeArray0, 2133, 29);
      Node node3 = node2.copyInformationFromForTree(node1);
      Node node4 = new Node(2);
      node4.getStaticSourceFile();
      Node node5 = new Node(1151, node1, node4, 33, 2338);
      node4.isInc();
      Node node6 = node0.getLastChild();
      node4.addChildrenToFront(nodeArray0[0]);
      int int0 = (-2070);
      int int1 = 122;
      Node node7 = new Node(int0, node2, node6, node6, nodeArray0[0], int1, node2.IS_NAMESPACE);
      Node node8 = new Node(node2.COLUMN_BITS, node4.LAST_PROP, node3.POST_FLAG);
      // Undeclared exception!
      try { 
        node8.useSourceInfoIfMissingFrom(nodeArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-111);
      Node node0 = Node.newString(86, "b=~`K4", (int) (byte) (-111), (-998));
      Node node1 = new Node(36, node0);
      node1.copyInformationFromForTree(node0);
      node1.replaceChildAfter(node0, node0);
      Node.extractLineno(node1.ORIGINALNAME_PROP);
      node0.setLineno(node1.NO_SIDE_EFFECTS);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.areAllFlagsSet();
      Node node0 = Node.newString("a`");
      node_SideEffectFlags5.setMutatesArguments();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags5.clearSideEffectFlags();
      Node node1 = Node.newString("a`", 52, 1044);
      node0.getQualifiedName();
      node1.isObjectLit();
      node0.toStringTree();
      node0.getChildBefore(node1);
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = new Node(37);
      node0.isGetElem();
      node0.getAncestors();
      node0.toString(false, false, false);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.JSDocInfo$NamePosition");
      node0.setLineno(48);
      node0.getStaticSourceFile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags(42);
      node_SideEffectFlags0.setMutatesThis();
      node0.setString("P");
      node0.getChangeTime();
      node0.isOnlyModifiesArgumentsCall();
      node0.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = Node.newString("no a trAn(5yNode");
      node0.isQuotedString();
      node0.hasMoreThanOneChild();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = Node.newString(544, "com.google.common.collect.Lists$RandomAccessListWrapper", 1, (-789));
      node0.setOptionalArg(false);
      node0.removeChildren();
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isCall();
      Node node1 = Node.newString("com.google.javascript.rhino.Node$AbstractPropListItem", 2781, 50);
      node1.detachChildren();
      Node node2 = new Node((-2507), node0, node0, node0, 2910, 4095);
      Node node3 = new Node(57, node1, node2, 49, (-2507));
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.Node$AbstractPropListItem");
      node3.isInc();
      node1.isUnscopedQualifiedName();
      Node node4 = node2.detachFromParent();
      Node node5 = new Node(1, node4, node1, node0);
      node3.isEquivalentTo(node2);
      node0.isOptionalArg();
      node1.isDec();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber((double) 29, 52, 56);
      Node node2 = new Node(8, node0, node1);
      Node node3 = node2.useSourceInfoFromForTree(node0);
      node3.removeChild(node1);
      node2.isNoSideEffectsCall();
      node3.isWith();
      node3.isCase();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-4321.798767941566));
      Node node1 = new Node((-3036));
      node1.addChildrenToBack(node0);
      node0.addChildToFront(node1);
      Node node2 = Node.newString("e}?'=jd@,_z-BX", 46, 2673);
      Node node3 = node1.detachFromParent();
      node0.isFromExterns();
      node0.setType((-1));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node3.isHook();
      node2.isInc();
      node1.setString("e}?'=jd@,_z-BX");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isAssignAdd();
      Node node1 = Node.newString("Object#Key", 42, 57);
      node1.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("", 42, 42);
      node0.toStringTree();
      Node node1 = new Node(0, node0, node0, node0);
      node1.isOnlyModifiesThisCall();
      Node node2 = new Node(2, node1);
      Node node3 = Node.newNumber((-1995.3034918756555), 915, 51);
      node1.getIntProp(49);
      node1.setCharno(47);
      node0.getAncestor(39);
      node2.getSourceFileName();
      Node node4 = Node.newString(15, "|RIaD", (-1981), 43);
      node4.getAncestors();
      node2.isCall();
      node3.isRegExp();
      Node node5 = Node.newString(37, (String) null);
      node3.addChildrenAfter(node5, node5);
      int int0 = (-2622);
      node3.setSourceEncodedPositionForTree(int0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = new Node(104, 104, 104);
      node0.mayMutateArguments();
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.getExistingIntProp(104);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = Node.newString("a{K^ 5");
      node0.isSyntheticBlock();
      node0.isVar();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setThrows();
      Node node1 = Node.newString("a{K^ 5", 2073, 43);
      node1.getQualifiedName();
      Node node2 = new Node(47, node0, node0, node0, node0);
      node2.isScript();
      node2.isRegExp();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = "missing prop: ";
      Node node0 = Node.newString(113, "missing prop: ", 1011, 113);
      Node node1 = new Node(1011, node0, node0, node0, 1, 30);
      Node node2 = new Node((-4), node1, node0, node0, node1);
      Node node3 = node1.copyInformationFrom(node2);
      node1.isAnd();
      node3.isInc();
      // Undeclared exception!
      try { 
        node3.setString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node.newNumber((double) 1232);
      Node node0 = Node.newNumber((double) 2, 47, (-2883));
      node0.getDouble();
      node0.isVarArgs();
      node0.isOptionalArg();
      node0.setLength(1);
      Node node1 = new Node(12, node0, node0, 57, 46);
      node1.getString();
      int int0 = 96;
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // EQ 57 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = Node.newString("I*3Mn\"MmA{b $~", (-473), (-473));
      Node node1 = Node.newString("t+vSWAL`Ngr$WxJw");
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isAdd();
      node0.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = Node.newString(33, " PC#9@udOuBH}", 33, (-1486));
      Node node1 = Node.newNumber(0.0, 86, 98);
      Node node2 = new Node(3159, node0, node1);
      node1.getStaticSourceFile();
      node2.isRegExp();
      node0.useSourceInfoIfMissingFromForTree(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[5];
      JSTypeRegistry jSTypeRegistry1 = null;
      TemplateType templateType0 = null;
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of((TemplateType) null);
      ImmutableList<JSType> immutableList1 = ImmutableList.of((JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0);
      int int0 = 94;
      int int1 = 53;
      ImmutableList<JSType> immutableList2 = immutableList1.subList(int0, int1);
      TemplateTypeMap templateTypeMap0 = jSTypeRegistry0.createTemplateTypeMap(immutableList0, immutableList2);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry1, templateTypeMap0);
      FunctionType functionType0 = null;
      // Undeclared exception!
      try { 
        templateTypeMapReplacer0.caseFunctionType(functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = Node.newNumber((double) 15);
      node0.putIntProp(0, 2134);
      Node.newString("t`edX.@9;#<", (-2596), 42);
      Node node1 = new Node(48, node0, node0);
      node1.isThrow();
      node1.isUnscopedQualifiedName();
      Node node2 = Node.newString("second new child has existing parent");
      node1.useSourceInfoIfMissingFromForTree(node2);
      node1.isAdd();
      node2.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = Node.newString("no a trAn(Node");
      node0.removeFirstChild();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = Node.newNumber((-1398.2959246));
      String string0 = "";
      Node node1 = Node.newString(31, "");
      node1.removeFirstChild();
      Node node2 = Node.newNumber(0.7, 47, 54);
      node2.isFromExterns();
      node0.removeChild(node1);
      Node node3 = node0.srcref(node1);
      node3.setString(string0);
      // Undeclared exception!
      try { 
        node3.getSideEffectFlags();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("com.google.common.collect.ImmutableList$SubList");
      Node node1 = new Node(32, node0, node0);
      node0.removeChild(node1);
      // Undeclared exception!
      try { 
        node0.isCase();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = Node.newString("; .3A5YNp%nG}rt#[");
      node0.getSourceOffset();
      Node node1 = Node.newNumber((double) 40, (-1008), 39);
      node0.isStringKey();
      node0.mayMutateArguments();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node1.setSideEffectFlags(node_SideEffectFlags4);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 0, 0);
      node0.isNew();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, (-170));
      Node node1 = Node.newString(12, " is not a string node", 18, (-2039));
      node1.isAdd();
      node1.getFirstChild();
      node0.isHook();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("", 42, 42);
      node0.toStringTree();
      Node node1 = new Node(0, node0, node0, node0);
      node1.isOnlyModifiesThisCall();
      Node node2 = new Node(2, node1);
      Node node3 = Node.newString((-64), ",W|rKH");
      node1.useSourceInfoFromForTree(node3);
      node3.isExprResult();
      node0.isNew();
      node0.setSideEffectFlags(92);
      node0.isDelProp();
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = Node.newString(33, " C#9@uuBH}", 33, (-1487));
      Node node1 = Node.newNumber(0.0, 86, 98);
      Node node2 = new Node(3159, node0, node1);
      node2.checkTreeEqualsImpl(node0);
      node1.getStaticSourceFile();
      node2.isRegExp();
      node0.useSourceInfoIfMissingFromForTree(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[5];
      ImmutableList.of((TemplateType) null);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      Node node1 = Node.newString(36, "prototype", 2521, 2);
      node0.cloneTree();
      node1.isAssign();
      int int0 = Node.COLUMN_BITS;
      node1.hasChildren();
      node1.isDelProp();
      node1.getNext();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(110, node0, node0, 40, 55);
      node0.getIntProp(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isOnlyModifiesThisCall();
      Node node2 = new Node(1, node0, 524, 174);
      node2.isGetElem();
      node2.isSwitch();
      node1.isFor();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(307, "", 38, 38);
      Node node1 = Node.newNumber(0.0, 50, 4095);
      Node node2 = node1.cloneTree();
      node0.mayMutateArguments();
      node2.getIntProp(51);
      node0.setVarArgs(true);
      node1.setIsSyntheticBlock(true);
      node2.children();
      node2.hasChildren();
      node2.setDouble(1.2);
      node0.isAssignAdd();
      node2.isDec();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 2521, 2521);
      node0.getDouble();
      node0.getAncestors();
      node0.setSourceEncodedPosition(2521);
      node0.hasMoreThanOneChild();
      node0.setDouble(1.0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = new Node(544, (-1959), (-1959));
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[2];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseNoObjectType();
      JSType jSType0 = modificationVisitor0.caseNoType();
      jSTypeArray0[0] = jSType0;
      JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_TYPE;
      jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSType jSType1 = modificationVisitor0.caseUnknownType();
      jSTypeArray0[1] = jSType1;
      Node node0 = Node.newString("");
      Node node1 = new Node((-2050), node0, node0, 1, 29);
      node0.getString();
      node0.getExistingIntProp(39);
      node1.isDec();
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      Node node1 = Node.newString(36, "NO_OBJECT_TYPE", 2521, 2);
      node0.isLocalResultCall();
      Node node2 = node0.cloneTree();
      node2.useSourceInfoIfMissingFrom(node1);
      node2.mayMutateGlobalStateOrThrow();
      node1.isAssign();
      int int0 = Node.COLUMN_BITS;
      node1.hasChildren();
      node1.isDelProp();
      node1.getNext();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = Node.newString(">");
      node0.getBooleanProp(544);
      node0.detachChildren();
      Node node1 = new Node(57);
      Node node2 = new Node(741, node0, node0, node1, 57, 51);
      int int0 = Node.SYNTHETIC_BLOCK_PROP;
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node1.addChildAfter(node2, node3);
      node2.isQualifiedName();
      node2.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      Node node1 = Node.newString(36, "prototype", 2521, 2);
      Node node2 = node0.cloneTree();
      Node node3 = Node.newString("prototype", 2, 1);
      node0.isUnscopedQualifiedName();
      node3.getProp(100);
      node0.setCharno(845);
      node1.isName();
      node2.isBreak();
      Node node4 = new Node((-662), node3, node0, node2, node3);
      node1.isQualifiedName();
      node4.setString("NO_OBJECT_TYPE");
      node3.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = Node.newString("no a trAn(Node");
      Node node1 = new Node((-685), node0, node0, node0, 57, 40);
      node1.setString("h4a2kU#h@_'");
      node1.isEquivalentToTyped(node0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.mayMutateArguments();
      node0.isIf();
      Node node1 = Node.newString(53, " ");
      node1.srcrefTree(node0);
      node1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1232);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(56);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      Node node1 = new Node(2564, node0, node0, node0, 1, (-4171));
      Node node2 = new Node(31, node1, node1, 57, 38);
      node1.srcrefTree((Node) null);
      node1.getString();
      node2.getLastChild();
      double double0 = 2489.00295440188;
      // Undeclared exception!
      try { 
        Node.newNumber(double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      node0.srcrefTree((Node) null);
      int int0 = (-199);
      int int1 = Integer.MIN_VALUE;
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = Node.newString(31, "8'8U");
      Node node1 = new Node(85, node0, node0, node0, 4, 112);
      node1.addChildToFront(node0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.common.base.Predicates$NotPredicate", 0, 0);
      Node node1 = Node.newString("o#I*VAf!e]o4h)arK", 49, (-3387));
      Node node2 = Node.newString("com.google.common.base.Predicates$NotPredicate", (-1486), 31);
      node0.getQualifiedName();
      node2.isObjectLit();
      node0.toStringTree();
      Node node3 = node0.getChildBefore(node1);
      node3.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 43, 0);
      node0.setQuotedString();
      node0.isAdd();
      node0.isHook();
      // Undeclared exception!
      try { 
        node0.isInc();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = Node.newString("missing prop: ");
      Node node1 = new Node(52, node0, node0, (Node) null, node0, 52, 2653);
      node0.isTrue();
      Node node2 = new Node(node1.SLASH_V, node0.SIDE_EFFECTS_FLAGS_MASK, node0.FREE_CALL);
      int int0 = (-2571);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber((double) 29, 52, 56);
      Node node2 = new Node(8, node0, node1);
      Node node3 = node2.useSourceInfoFromForTree(node0);
      node3.isExprResult();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      node2.toString();
      JSTypeRegistry jSTypeRegistry0 = null;
      try {
        jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 8
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = new Node(2034, 2034, 21);
      node0.toString();
      boolean boolean0 = true;
      JSDocInfo jSDocInfo0 = new JSDocInfo(boolean0);
      // Undeclared exception!
      try { 
        jSDocInfo0.getAssociatedNode();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2034
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = new Node(37);
      node0.setSideEffectFlags(37);
      node0.isGetElem();
      node0.isTrue();
      Node node1 = new Node(46);
      node0.isBlock();
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = Node.newString("bIm,;_~|3L.M#=kKR", 1011, 0);
      Node node1 = new Node(2064, node0, node0, node0, node0);
      node1.mayMutateArguments();
      node1.isEquivalentToShallow(node0);
      node0.getIntProp(2428);
      node0.isAssignAdd();
      Node node2 = new Node((-2909));
      node2.isTypeOf();
      node1.isTrue();
      Node node3 = Node.newNumber((-1.0));
      node2.getDouble();
      node3.getQualifiedName();
      int int0 = Node.QUOTED_PROP;
      node2.getQualifiedName();
      node3.isDefaultCase();
      node2.isGetElem();
      node2.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = Node.newString(85, "o./AwBn{deq(", (-3038), (-3038));
      Node node1 = node0.cloneTree();
      node1.wasEmptyNode();
      node1.mayMutateArguments();
      node0.isQuotedString();
      node1.getIntProp(8);
      node1.setIsSyntheticBlock(true);
      node0.children();
      node1.hasChildren();
      node0.isIn();
      node1.isNull();
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.common.base.Predicates$NotPredicate", 0, 0);
      String string0 = "o#I*VAf!e]o4h)arK";
      Node node1 = Node.newString("o#I*VAf!e]o4h)arK", 49, (-3387));
      Node node2 = new Node(0, node0, node0, node1, 38, (-2223));
      Node node3 = node2.removeFirstChild();
      node3.setDouble(43);
      node0.isAssignAdd();
      node0.isDec();
      node1.isWith();
      // Undeclared exception!
      try { 
        node0.isIn();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = Node.newString("hw0H@X1");
      node0.setLineno(1817);
      node0.getStaticSourceFile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.valueOf();
      Node node1 = Node.newNumber((double) 37);
      node1.isQualifiedName();
      Node node2 = Node.newString(2108, "hw0H@X1");
      node2.isSyntheticBlock();
      node1.isCast();
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = new Node(27);
      node0.isReturn();
      node0.isDefaultCase();
      node0.detachChildren();
      node0.isGetElem();
      node0.isContinue();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber((double) 29, 52, 56);
      Node node2 = new Node(8, node0, node1);
      Node node3 = node2.useSourceInfoFromForTree(node0);
      node3.removeChild(node1);
      node3.isExprResult();
      node0.isNew();
      node2.setSideEffectFlags(57);
      // Undeclared exception!
      try { 
        node1.isDelProp();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 8
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isCall();
      Node node1 = Node.newString("com.google.javascript.rhino.Node$AbstractPropListItem", 2781, 50);
      node1.detachChildren();
      Node node2 = new Node((-2507), node0, node0, node0, 2910, 4095);
      Node node3 = new Node(57, node1, node2, 49, (-2507));
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.Node$AbstractPropListItem");
      node2.getDirectives();
      node1.isUnscopedQualifiedName();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node4 = new Node(42, nodeArray0, 36, (-3279));
      node3.getFirstChild();
      node1.getDirectives();
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(27, node0, node0, node0);
      nodeArray0[0] = node1;
      Node node2 = Node.newString(2201, "undefined", 2, 43);
      nodeArray0[1] = node2;
      Node.newString("undefined");
      node2.isArrayLit();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) null);
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node3.hasChild(node2);
      node0.isExprResult();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = ">";
      Node node0 = Node.newString(">");
      node0.getBooleanProp(544);
      node0.detachChildren();
      Node node1 = new Node(544, node0, node0, node0, 0, 2);
      Node.mergeLineCharNo(4095, 32);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.useSourceInfoIfMissingFrom(node2);
      node2.addChildAfter(node0, node0);
      node0.isQualifiedName();
      // Undeclared exception!
      try { 
        node0.setString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      Node node0 = new Node(13);
      Node node1 = node0.cloneTree();
      Node node2 = Node.newString("", 23, 474);
      node0.isUnscopedQualifiedName();
      node1.getProp(62);
      node2.setCharno(53);
      node0.isName();
      node0.isBreak();
      Node node3 = new Node(2, node2, node0, node1, node0);
      node3.isQualifiedName();
      node1.setString("");
      node3.getChangeTime();
      node0.toString();
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber((double) 29, 52, 56);
      Node node2 = new Node(46, node1, node1, node1, node1);
      node2.mayMutateArguments();
      node0.getIntProp((-705));
      node1.isAssignAdd();
      Node node3 = Node.newString("(}UCYmq_.pj");
      node3.isTypeOf();
      node1.isIf();
      Node.newNumber((double) 47);
      Node node4 = Node.newString(2048, "");
      int int0 = Node.QUOTED_PROP;
      node3.getQualifiedName();
      node4.getProp(300);
      node4.isDefaultCase();
      node3.isGetElem();
      node2.mayMutateArguments();
      node4.getType();
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node node0 = Node.newString("bIm,;_~|3L.M#=kKR", 1011, 0);
      Node node1 = new Node(2064, node0, node0, node0, node0);
      node1.mayMutateArguments();
      node1.isEquivalentToShallow(node0);
      node0.getIntProp(2428);
      node0.isAssignAdd();
      Node node2 = new Node((-2909));
      node2.isTypeOf();
      node1.isTrue();
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      node2.isReturn();
      node1.replaceChildAfter(node2, node2);
      node0.getLength();
      node2.isObjectLit();
      int int0 = 228;
      Node.extractLineno(int0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber((double) 29, 52, 56);
      Node node2 = new Node(8, node0, node1);
      Node node3 = node2.useSourceInfoFromForTree(node0);
      node3.removeChild(node1);
      node2.isNoSideEffectsCall();
      node0.isNew();
      node1.isDelProp();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node3);
      node_AncestorIterable0.iterator();
      node1.getLineno();
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node node0 = Node.newNumber(399.7645046606, 27, 27);
      node0.isReturn();
      node0.isDefaultCase();
      node0.getQualifiedName();
      node0.isGetElem();
      node0.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = new Node(113, 1758, 1758);
      Node node1 = new Node(4);
      node1.isReturn();
      node1.isDefaultCase();
      node0.detachChildren();
      Node node2 = new Node(113, node0, node0, node1, 119, 57);
      node2.isGetElem();
      node2.isContinue();
      node1.isCast();
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = "FUNCTION_INSTANCE_TYPE";
      int int0 = 15;
      Node node0 = Node.newNumber((double) 15);
      node0.putIntProp(15, 15);
      Node node1 = new Node(15, node0);
      Node node2 = new Node(15, node0, node1);
      // Undeclared exception!
      try { 
        node2.isSetterDef();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(0, node0, node0, node0);
      nodeArray0[0] = node1;
      String string0 = "undefined";
      Node node2 = Node.newString(2201, "undefined", 2, 43);
      nodeArray0[1] = node2;
      Node node3 = Node.newString("undefined");
      node1.addChildBefore(node2, node1);
      node1.setString(string0);
      node3.isOr();
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = new Node(113);
      int int0 = Node.POST_FLAG;
      node0.isBlock();
      node0.addChildBefore(node0, node0);
      double double0 = (-469.9822416);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString(132, "H`.[G", 132, 132);
      node0.mayMutateArguments();
      Node node1 = node0.clonePropsFrom((Node) null);
      node1.isParamList();
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, (-170));
      node0.isReturn();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType.toMaybeTemplateType((JSType) null);
      ObjectType objectType0 = ObjectType.cast((JSType) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("-V7Qi76AGtsg#q:", node0, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      Node node1 = enumElementType0.getPropertyNode(objectType0.EMPTY_TYPE_COMPONENT);
      node0.replaceChildAfter(node1, node1);
      // Undeclared exception!
      try { 
        node0.getLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      node0.isSyntheticBlock();
      node0.isVar();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(39);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node1 = Node.newString("a`");
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      Node node2 = Node.newString("NO_OBJECT_TYPE", 52, 4095);
      node2.getQualifiedName();
      Node node3 = Node.newString(57, "ASSIGN_LSH");
      node3.isObjectLit();
      node1.toStringTree();
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      Node node1 = new Node(37, node0, node0, node0, node0, 15, 53);
      node0.isTrue();
      node0.getIntProp(2);
      node0.isAnd();
      node0.isThis();
      node1.checkTreeEquals(node0);
      node1.hasChildren();
      node1.isOr();
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = Node.newNumber(399.7645046606, 27, 27);
      node0.isReturn();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSType.toMaybeTemplateType((JSType) null);
      ObjectType.cast((JSType) null);
      Node node1 = new Node((-559));
      node1.isObjectLit();
      Node.extractLineno(1);
      node1.getExistingIntProp(153);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(110, node0, node0, 40, 55);
      Node node2 = Node.newNumber((double) 57, 52, 57);
      node2.toStringTree();
      node1.getChildBefore(node2);
      node0.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 0, 29);
      Node node1 = new Node((-3982), node0, node0);
      Node node2 = Node.newString(1, "");
      node0.useSourceInfoFromForTree(node2);
      node1.removeChild(node2);
      node1.isExprResult();
      node2.isNew();
      node1.setSideEffectFlags(node0.MAX_COLUMN_NUMBER);
      // Undeclared exception!
      try { 
        node2.isDelProp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 0, 0);
      Node node1 = new Node((-3982), node0, node0);
      Node node2 = Node.newString(1, "");
      node1.removeChild(node2);
      node1.isExprResult();
      node2.isNew();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node0.MAX_COLUMN_NUMBER);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node node0 = new Node(130);
      int int0 = Node.SLASH_V;
      Node node1 = new Node(130, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.mayMutateArguments();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.newString("+B{'");
      node1.isSyntheticBlock();
      Node node2 = new Node(0, (-3493), 50);
      node1.addChildBefore(node2, node0);
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node node0 = Node.newString("; .3A5YNp%nG}rt#[");
      node0.getSourceOffset();
      Node node1 = Node.newNumber((double) 40, (-1008), 39);
      node0.isStringKey();
      node0.mayMutateArguments();
      node0.isEquivalentToShallow(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node2 = new Node((-974), node1);
      Node.newString("com.google.common.collect.ImmutableList$SubList");
      node2.addChildBefore(node1, node1);
      String string0 = null;
      node1.setString(string0);
      node1.isOr();
      String string1 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile(string1, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = Node.newString(136, "; .3A5YNp%nG}rt#[", 1011, 136);
      node0.getIntProp(64);
      node0.isOptionalArg();
      Node node1 = new Node(2, 36, 1);
      Node node2 = new Node(51, node1, node0, node0);
      node2.addChildBefore(node0, node1);
      node1.hasChildren();
      Node node3 = node1.getNext();
      node0.isWith();
      // Undeclared exception!
      try { 
        node3.isCase();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = new Node((-1634));
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Node node0 = Node.newString("missing prop: ", 85, 1011);
      Node node1 = new Node(1011, node0, node0, node0, node0);
      node1.mayMutateArguments();
      node1.getIntProp(10);
      node0.isAssignAdd();
      node0.isTypeOf();
      node0.isIf();
      Node node2 = Node.newNumber(0.0);
      Node node3 = Node.newString(49, "missing prop: ");
      node3.getStaticSourceFile();
      node3.setStaticSourceFile((StaticSourceFile) null);
      int int0 = Node.QUOTED_PROP;
      node0.getQualifiedName();
      node1.isDefaultCase();
      node2.isGetElem();
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Node node0 = Node.newString(2263, "missing prop: ", 1011, 2263);
      node0.getInputId();
      node0.checkTreeEqualsImpl(node0);
      node0.setType(115);
      node0.checkTreeTypeAwareEqualsImpl(node0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      node0.putProp(4088, locale_Category0);
      Node node1 = new Node(49, node0, node0, node0);
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber((double) 29, 52, 56);
      Node node2 = new Node(8, node0, node1);
      node2.useSourceInfoFromForTree(node0);
      Node node3 = Node.newString("qsl[~$=10>S%K!7&-Z", 37, 4);
      node1.isUnscopedQualifiedName();
      Object object0 = new Object();
      node2.setCharno(53);
      node2.isName();
      node2.isTrue();
      Node node4 = Node.newNumber(0.0);
      Node node5 = new Node(42, node0, node1, node0, node4);
      node1.isQualifiedName();
      String string0 = "F>MI2PF|l `=s";
      node3.setString(string0);
      node5.getChangeTime();
      // Undeclared exception!
      try { 
        node2.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.JSDocInfo$NamePosition");
      node0.setLineno(48);
      node0.getStaticSourceFile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setThrows();
      Node node1 = new Node(4095, node0, node0, (-824), 48);
      node_SideEffectFlags2.setMutatesArguments();
      node0.useSourceInfoFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags4.valueOf();
      Node node2 = Node.newNumber((double) 2);
      node2.isQualifiedName();
      node0.isOr();
      node2.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isWith();
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      Node node0 = Node.newNumber((-1578.0744634), 9, 54);
      Node node1 = new Node(46, node0, node0);
      node_SideEffectFlags1.setMutatesArguments();
      node1.isSyntheticBlock();
      node_SideEffectFlags1.valueOf();
      Node.newNumber((double) 52);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      node0.putProp((-2226), templateType0);
      Node node2 = new Node((-705), 43, 30);
      node2.isQualifiedName();
      node0.setSourceEncodedPositionForTree(253);
      Node node3 = Node.newString(1173, "-:z8");
      node0.isSyntheticBlock();
      node1.isCast();
      Node.NodeMismatch node_NodeMismatch0 = node3.checkTreeTypeAwareEqualsImpl(node0);
      node_NodeMismatch0.equals(node_SideEffectFlags1);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node node0 = Node.newString(113, "");
      node0.isParamList();
      node0.setLineno(101);
      node0.isNE();
      node0.isContinue();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals(node0);
      node0.setSideEffectFlags(101);
      node0.getNext();
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber(406.0, (-2723), 32);
      Node node2 = new Node(4095, node0, node1, node1, node1, 0, 284);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node2.isFromExterns();
      node3.isBlock();
      Object object0 = new Object();
      node3.isName();
      node0.isTrue();
      node0.checkTreeTypeAwareEqualsImpl(node3);
      Node node4 = new Node(52);
      node2.isBlock();
      Node.extractLineno(15);
      node1.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newString("b&NJ^E.F]K5S", 3465, 122);
      node0.getQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("0fg`/m5");
      node_FileLevelJsDocBuilder0.append((String) null);
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      node0.isSyntheticBlock();
      node0.isVar();
      node0.addSuppression("P9bD4wkq)Ju{5");
      node0.getIntProp(51);
      node0.isAssignAdd();
      node0.isTypeOf();
      node0.isIf();
      Node node1 = Node.newNumber((double) 2);
      Node node2 = Node.newString((-1241), "sq>");
      int int0 = Node.QUOTED_PROP;
      node1.getQualifiedName();
      node2.isDefaultCase();
      node2.mayMutateArguments();
      node2.isDo();
      Node.newString((String) null, 1542, 4095);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 27, 27);
      node0.isDefaultCase();
      node0.isObjectLit();
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node node0 = Node.newString(309, "BJ?B$I_@I");
      node0.isUnscopedQualifiedName();
      node0.siblings();
      node0.isGetProp();
      node0.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber((double) 29, 52, 56);
      node1.isUnscopedQualifiedName();
      Object object0 = new Object();
      node0.isName();
      Node node2 = new Node(42, node0, node1, node0, node0);
      node1.isQualifiedName();
      int int0 = Node.QUOTED_PROP;
      node1.toString();
      node2.removeChildAfter(node1);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber((double) 29, 52, 56);
      Node node2 = node0.useSourceInfoFromForTree(node0);
      node1.isUnscopedQualifiedName();
      Object object0 = new Object();
      node0.isName();
      node0.isTrue();
      Node node3 = Node.newNumber(0.0);
      Node node4 = new Node(42, node0, node1, node0, node3);
      node1.isQualifiedName();
      node4.getChangeTime();
      node1.toString();
      node4.removeChildAfter(node2);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Node node0 = Node.newString(113, "missing prop: ");
      Node node1 = new Node(311, node0, node0, node0, node0);
      node1.removeChildAfter(node0);
      node0.addChildrenAfter(node1, node1);
      node0.isExprResult();
      // Undeclared exception!
      try { 
        node0.isParamList();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      Node node1 = Node.newString(36, "prototype", 2521, 2);
      Node node2 = node0.cloneTree();
      node1.isAssign();
      node1.isQualifiedName();
      node2.getChangeTime();
      node0.toString();
      node1.removeChildAfter(node0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[2];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      jSTypeArray0[0] = jSType0;
      JSType jSType1 = modificationVisitor0.caseUnknownType();
      jSTypeArray0[1] = jSType1;
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      String string0 = null;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("inferred", node0, jSTypeArray0[0]);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      modificationVisitor0.caseNoType();
      enumElementType0.getPropertyNode("Not declared as a type name");
      node0.isEquivalentToShallow((Node) null);
      node0.setString(string0);
      // Undeclared exception!
      try { 
        node0.mayMutateArguments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 43, 0);
      String string0 = " is not a string node";
      MockFile mockFile0 = new MockFile("QMi", "QMi");
      File file0 = MockFile.createTempFile(" is not a string node", "", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.ITALY;
      Object object0 = new Object();
      String string1 = "&`fjjkE1Qgtt}lU";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) string0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, string1, objectArray0);
      node0.appendStringTree(printWriter0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node node0 = Node.newNumber((-1578.0744634), 9, 54);
      Node node1 = new Node(8, node0, node0, node0, node0, 30, 8);
      node0.useSourceInfoFromForTree(node1);
      node1.isExprResult();
      node1.isNew();
      node1.isDelProp();
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Node.extractCharno(2781);
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)26;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString("", 83, 1770);
      Node node1 = new Node(18, node0, node0, node0, node0);
      Node node2 = Node.newString((-1857), "\n\nTree2:\n", 55, (-2054));
      Node node3 = new Node(18, node1, node2);
      node3.isDelProp();
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = null;
      jSTypeArray0[1] = null;
      jSTypeArray0[2] = null;
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = node0.cloneNode();
      node0.isEmpty();
      node0.isName();
      node0.checkTreeEquals(node1);
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Node node0 = Node.newString("; .3A5YNp%nG}rt#[");
      node0.getSourceOffset();
      node0.isVar();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-3410));
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.areAllFlagsSet();
      node0.getProp(486);
      node0.setCharno((-3410));
      node0.isName();
      node0.isBreak();
      Node node1 = new Node((-270), node0, node0, node0, node0);
      node0.isQualifiedName();
      node0.setString("");
      Node node2 = Node.newString(51, "", (-2942), 21);
      node0.getChangeTime();
      node2.toString();
      Node node3 = Node.newString(86, "IN ", 3793, 51);
      node3.isFunction();
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.JSDocInfo$NamePosition");
      node0.setLineno(48);
      node0.getStaticSourceFile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setThrows();
      Node node1 = new Node(4095, node0, node0, (-824), 48);
      node_SideEffectFlags2.setMutatesArguments();
      node0.useSourceInfoFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags4.valueOf();
      Node node2 = Node.newNumber((double) 2);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node2);
      Node node3 = Node.newString(57, "com.google.javascript.rhino.JSDocInfo$NamePosition");
      Node.AncestorIterable node_AncestorIterable1 = new Node.AncestorIterable(node3);
      node_AncestorIterable1.iterator();
      node1.getLineno();
      node1.toString();
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags2.clearAllFlags();
      node0.removeChild((Node) null);
      node0.isNoSideEffectsCall();
      // Undeclared exception!
      try { 
        node0.isNew();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-111);
      byteArray0[7] = (byte)78;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString(131072, "b=~`K4", (-1503), 42);
      node0.isTrue();
      Node node1 = new Node(38, node0, node0, node0, node0);
      node1.isQualifiedName();
      node1.isUnscopedQualifiedName();
      node1.isInc();
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Node node0 = new Node(51, 51, 51);
      Node node1 = Node.newNumber((double) 57, 4095, 0);
      node0.isAdd();
      node1.isHook();
      node1.hasChildren();
      node1.setDouble(2);
      node0.toString();
      node1.removeChildAfter(node0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      node0.isSyntheticBlock();
      node0.isVar();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(39);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.areAllFlagsSet();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.valueOf();
      Node node1 = new Node(52, node0, node0, node0, 3147, 53);
      node1.isDec();
      Node node2 = node1.cloneTree();
      node1.addChildrenAfter(node2, node0);
      Node node3 = new Node(43, node2, 16, 38);
      node3.isQualifiedName();
      int int0 = (-194);
      node3.setSourceEncodedPositionForTree(int0);
      // Undeclared exception!
      try { 
        node1.mayMutateGlobalStateOrThrow();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Node node0 = Node.newNumber((double) 15);
      node0.putIntProp(0, 2134);
      Node node1 = Node.newString("t`edX.@9;#<", (-2596), 42);
      Node node2 = new Node(48, node0, node0);
      node2.isThrow();
      node2.addChildrenAfter(node1, node0);
      node2.isEmpty();
      node2.isWith();
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Node node0 = Node.newString((-4266), "ko> n,1^ <3[7y]SIh", (-4266), (-507));
      node0.isAdd();
      node0.isAssignAdd();
      Node node1 = new Node(40, node0, node0, node0, 5133, (-1815));
      node0.clonePropsFrom(node1);
      node0.isBreak();
      node1.getCharno();
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node0 = Node.newString("", 42, 42);
      Node node1 = new Node(0, node0, node0, node0);
      node1.isOnlyModifiesThisCall();
      Node node2 = new Node(2, node1);
      Node node3 = Node.newNumber((-1995.3034918756555), 915, 51);
      node1.getIntProp(49);
      node1.setCharno(47);
      node0.getAncestor(39);
      node2.getSourceFileName();
      Node node4 = Node.newString("");
      node4.getAncestors();
      node0.isName();
      node4.srcrefTree(node1);
      node3.isEmpty();
      node3.removeProp(37);
      node2.isFromExterns();
      node4.isQualifiedName();
      int int0 = Node.SIDE_EFFECT_FLAGS;
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(110, node0, node0, 40, 55);
      Node node2 = Node.newNumber((double) 57, 52, 57);
      Node node3 = node1.removeChildren();
      node0.getIndexOfChild(node3);
      node3.isLabelName();
      node2.getType();
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isCall();
      Node node1 = Node.newString("com.google.javascript.rhino.Node$AbstractPropListItem", 2781, 50);
      node1.detachChildren();
      Node node2 = new Node((-2507), node0, node0, node0, 2910, 4095);
      Node node3 = new Node(57, node1, node2, 49, (-2507));
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.Node$AbstractPropListItem");
      node3.isInc();
      node1.isUnscopedQualifiedName();
      node1.children();
      node0.isArrayLit();
      node3.hasChild(node1);
      node1.mayMutateArguments();
      node3.removeChildren();
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, (-170));
      Node node1 = new Node(4095, node0, node0, node0, 1172, 33);
      node1.isDec();
      Node node2 = node1.cloneTree();
      node0.addChildrenAfter(node1, node2);
      node2.setSourceEncodedPositionForTree(node0.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " !00H1v|Tc*$<N\".=_f");
      Node node0 = Node.newString((-2317), "ENTyk2%");
      node0.getSourceFileName();
      node0.isParamList();
      Node node1 = new Node(52, node0, 37, 8);
      Node node2 = new Node(55, node1, 36, 12);
      node1.getChangeTime();
      node1.setSideEffectFlags(12);
      Node.newNumber((double) node0.DIRECTIVES);
      Node node3 = node1.copyInformationFromForTree(node2);
      node3.isOnlyModifiesArgumentsCall();
      // Undeclared exception!
      try { 
        node3.replaceChild(node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got INSTANCEOF
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Node node0 = Node.newString(113, "missing prop: ");
      node0.isExprResult();
      node0.isParamList();
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.clearAllFlags();
      Node node0 = Node.newNumber((-1578.0744634), (-3499), (-4096));
      Node node1 = new Node(85, node0, node0);
      node1.useSourceInfoFromForTree(node0);
      node1.isExprResult();
      node1.isNew();
      node1.isDelProp();
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber((double) 29, 52, 56);
      node1.isParamList();
      Object object0 = new Object();
      node0.isName();
      Node node2 = new Node(42, node0, node1, node0, node0);
      node1.isEquivalentTo(node0, false, false, false);
      Node node3 = new Node(36);
      node2.removeChild(node0);
      Node.extractCharno(2147479552);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Node node0 = Node.newString(2263, "missing prop: ", 1011, 2263);
      node0.getInputId();
      node0.checkTreeEqualsImpl(node0);
      Node node1 = node0.cloneTree();
      node0.hasChildren();
      node1.isDelProp();
      node0.isLabelName();
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newNumber((double) 15);
      node0.putIntProp(15, 15);
      Node node1 = Node.newString("Object#Key", 1, 1);
      Node node2 = new Node(15, node0, node1);
      node2.isSetterDef();
      node0.isUnscopedQualifiedName();
      Node.newString("Object#Element");
      node0.useSourceInfoIfMissingFromForTree(node2);
      node2.isAdd();
      node2.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Node node0 = Node.newString(147, "missing prop: ");
      node0.getType();
      node0.isSetterDef();
      node0.isFor();
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Node node0 = Node.newString("d&L8wY", 2910, 3521);
      node0.setLength(3521);
      node0.getChangeTime();
      node0.children();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.getObjectElementKey();
      Node node1 = Node.newString(0, "Named type with empty name component", 56, 50);
      node1.siblings();
      node1.mayMutateGlobalStateOrThrow();
      node0.setOptionalArg(true);
      node0.removeChildren();
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Node node0 = Node.newNumber((-0.5128949077679876), 0, (-170));
      node0.getDouble();
      node0.isVarArgs();
      Node node1 = Node.newNumber((double) 16, 2541, 52);
      Node node2 = Node.newString(46, "incrdecr", 30, (-3361));
      Node node3 = new Node(0, node0, node2);
      node0.useSourceInfoFromForTree(node1);
      Node node4 = Node.newString(51, "incrdecr");
      node4.isExprResult();
      node3.isNew();
      node3.isDelProp();
      node0.putProp(32, "incrdecr");
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Node node0 = Node.newString(29, ";");
      node0.isGetProp();
      Node node1 = Node.newString(";", 46, 50);
      Node node2 = node0.useSourceInfoFrom(node1);
      node1.setSourceFileForTesting(";");
      node2.isFromExterns();
      node0.isNot();
      Node[] nodeArray0 = new Node[0];
      Node node3 = new Node(51, nodeArray0);
      node3.isEquivalentToTyped(node2);
      node1.isFalse();
      node3.isLabelName();
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte) (-28);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node.newString(544, "com.google.common.collect.Lists$RandomAccessListWrapper", 1, (-789));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      Node node0 = Node.newString("0gk`/m5", 32, 544);
      node0.getQualifiedName();
      node0.isScript();
      node0.setSourceFileForTesting((String) null);
      Node node1 = new Node(56, node0, node0, node0);
      node1.isRegExp();
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Node node0 = new Node(37);
      node0.setSideEffectFlags(37);
      node0.isDefaultCase();
      node0.getQualifiedName();
      Node node1 = new Node((-1), 1319, 1545);
      node0.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, (-7), 0);
      node0.isNew();
      node0.hasChildren();
      node0.isTrue();
      node0.mayMutateGlobalStateOrThrow();
      node0.isQuotedString();
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.getChildAtIndex(108);
      String string0 = "Smeu:";
      String string1 = "com.google.javascript.rhino.Node$AncestorIterable$1";
      String string2 = "";
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Node node0 = Node.newString(30, "0gk`/m5");
      node0.children();
      node0.isQuotedString();
      Node node1 = new Node((-2089), node0);
      Node node2 = node0.getChildAtIndex(50);
      node0.getLength();
      node2.getAncestors();
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Node node0 = Node.newNumber((-557.0));
      node0.isOptionalArg();
      node0.setLength(33);
      node0.isHook();
      node0.isThrow();
      node0.toString();
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(0, node0, node0, node0);
      nodeArray0[0] = node1;
      Node node2 = new Node(38);
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node1);
      node3.isAdd();
      node1.isInstanceOf();
      node3.getExistingIntProp(1866);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      node0.isSyntheticBlock();
      node0.isVar();
      Node node1 = Node.newString(30, "NO_OBJECT_TYPE", 37, 37);
      Node node2 = node1.cloneTree();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      simpleErrorReporter0.error("is_dispatcher", "Object#Key", 154, 57);
      node3.isAssign();
      int int0 = Node.COLUMN_BITS;
      node1.hasChildren();
      node3.isDelProp();
      node0.getNext();
      node0.isWith();
      node2.isCase();
      node3.isFalse();
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Node node0 = Node.newString("buwkMu]0");
      Node node1 = Node.newString(36, "prototype", 2521, 2);
      node0.cloneTree();
      node1.hasChildren();
      node0.isTry();
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setReturnsTainted();
      Node node1 = Node.newString("com.google.javascript.rhino.Node$AbstractPropListItem");
      node1.getQualifiedName();
      node0.isInc();
      node1.isAdd();
      node1.isArrayLit();
      node1.isTry();
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Node node0 = Node.newNumber((-2483.1179), (-403), (-194));
      node0.hasOneChild();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.wasEmptyNode();
      Node node1 = new Node(51, node0, node0);
      node1.replaceChildAfter(node0, node0);
      String string0 = "|JBZ61/9c";
      int int0 = (-2054);
      int int1 = 817;
      Node node2 = Node.newString(string0, int0, int1);
      int int2 = 4;
      Node node3 = null;
      try {
        node3 = new Node(int2, node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      Node node0 = new Node((-959), 43, 35);
      Node node1 = new Node(35, node0, node0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      Node.NodeMismatch node_NodeMismatch1 = node0.checkTreeEqualsImpl(node1);
      node_NodeMismatch1.equals(node_NodeMismatch0);
      node1.getStaticSourceFile();
      node_NodeMismatch0.equals(node_SideEffectFlags4);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Node node0 = Node.newString("2");
      node0.isVar();
      Node node1 = new Node(57, node0, node0, 57, 101);
      node1.getIntProp(592);
      node0.isAssignAdd();
      node1.isTypeOf();
      Node node2 = Node.newNumber((double) 31);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      node0.putProp(32, templateType0);
      Node node3 = new Node(15, 57, 52);
      node0.isQualifiedName();
      node3.setSourceEncodedPositionForTree(38);
      Node node4 = Node.newString(2197, "Unknown class name");
      node3.isCast();
      Node.NodeMismatch node_NodeMismatch0 = node4.checkTreeTypeAwareEqualsImpl(node2);
      Node.NodeMismatch node_NodeMismatch1 = node2.checkTreeEqualsImpl(node1);
      node_NodeMismatch1.equals(node_NodeMismatch0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Node node0 = Node.newString("2");
      node0.isSyntheticBlock();
      node0.isVar();
      node0.addSuppression("I");
      Node node1 = new Node(57, node0, node0, 57, 101);
      node1.getIntProp(592);
      node0.isAssignAdd();
      node1.isTypeOf();
      node1.isIf();
      Node node2 = Node.newNumber((double) 31);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      node0.putProp(32, templateType0);
      Node node3 = new Node(15, 57, 85);
      Node node4 = new Node(4, 29, 1609);
      node4.isQualifiedName();
      node3.setSourceEncodedPositionForTree((-244));
      Node node5 = Node.newString(2197, "Unknown class name");
      node4.isCast();
      Node.NodeMismatch node_NodeMismatch0 = node5.checkTreeTypeAwareEqualsImpl(node4);
      Node.NodeMismatch node_NodeMismatch1 = node2.checkTreeEqualsImpl(node1);
      node_NodeMismatch1.equals(node_NodeMismatch0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[9];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString(" 8dZ");
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNoType();
      EnumType enumType0 = jSTypeRegistry1.createEnumType("Object#Key", node0, jSType0);
      jSTypeArray0[0] = (JSType) enumType0;
      jSTypeRegistry0.getType("");
      jSTypeArray0[1] = null;
      JSType jSType1 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[2] = jSType1;
      JSType jSType2 = modificationVisitor0.caseNumberType();
      jSTypeArray0[3] = jSType2;
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType3 = modificationVisitor0.caseStringType();
      JSType jSType4 = modificationVisitor0.caseNullType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSTypeArray0[0], jSType3, jSType2, jSType3, jSTypeArray0[2], jSType3, jSType4, jSType2, jSType4);
      FunctionType functionType0 = jSTypeRegistry2.createFunctionTypeWithVarArgs(jSTypeArray0[2], (List<JSType>) immutableList0);
      jSTypeArray0[4] = (JSType) functionType0;
      TemplateType templateType0 = jSTypeRegistry1.getObjectElementKey();
      jSTypeArray0[5] = (JSType) templateType0;
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getOwnerFunction();
      jSTypeArray0[6] = (JSType) null;
      JSType jSType5 = modificationVisitor0.caseFunctionType(functionType0);
      jSTypeArray0[7] = jSType5;
      ObjectType objectType0 = enumType0.getImplicitPrototype();
      jSTypeArray0[8] = (JSType) objectType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node2 = new Node(1609, node1, node0, node0, node1, 2035, (-3357));
      Node node3 = new Node(1609, node2, node0, node1);
      node3.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node((-3036));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry1.getObjectElementKey();
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) templateType0, jSTypeArray0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType1 = modificationVisitor0.caseStringType();
      JSType jSType2 = modificationVisitor0.caseNullType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType1, jSType2, jSType0, jSType0, jSType2, jSType2, jSType0, jSType2, jSType1);
      FunctionType functionType0 = jSTypeRegistry2.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) immutableList0);
      jSTypeRegistry2.getObjectElementKey();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getOwnerFunction();
      modificationVisitor0.caseFunctionType(functionType0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString(1666, "ZKx", 1275, 116);
      node0.getIntProp(3471);
      node0.setIsSyntheticBlock(true);
      node0.hasChildren();
      node0.isDefaultCase();
      node0.isSyntheticBlock();
      node0.isComma();
      node0.getType();
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newNumber((double) 15);
      node0.putIntProp(8, 15);
      Node node1 = Node.newString("Object#Key", 1, 1);
      Node node2 = new Node(15, node0, node1);
      node2.isSetterDef();
      node0.isUnscopedQualifiedName();
      node0.useSourceInfoIfMissingFromForTree(node2);
      node2.isAdd();
      node2.isVar();
      node2.children();
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(133, (Node) null, node0, 55, 55);
      Node node2 = Node.newNumber((double) node0.REFLECTED_OBJECT, node1.LENGTH, node0.LAST_PROP);
      node2.toStringTree();
      // Undeclared exception!
      try { 
        node1.getChildBefore(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber((double) 29, 52, 56);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1916));
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.areAllFlagsSet();
      node0.getProp(4);
      node1.isInstanceOf();
      node1.isBreak();
      node0.isQualifiedName();
      Node.newNumber(3189.24977362, 43, 2);
      node0.setString("");
      String string0 = "side_effect_flags";
      int int0 = (-1458);
      Node node2 = Node.newString(node0.FREE_CALL, string0, node1.LAST_PROP, int0);
      node1.getChangeTime();
      node2.toString();
      int int1 = 16384;
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Node node0 = Node.newString("ASSIGN_URSH");
      node0.detachChildren();
      node0.isInstanceOf();
      node0.isDelProp();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Node node0 = Node.newString(544, "incrdecr", 1, (-789));
      PriorityQueue<Node> priorityQueue0 = new PriorityQueue<Node>();
      node0.mayMutateGlobalStateOrThrow();
      node0.setOptionalArg(false);
      node0.isEmpty();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(110, node0, node0, 40, 55);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)37;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.addChildrenToBack(node1);
      node1.addChildToFront(node0);
      String string0 = "e}?'=jd@,_z-BX";
      int int0 = 1558;
      int int1 = (-753);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Node.newString("\"1{C.a.}G;' ");
      Node node0 = Node.newString(46, "\"1{C.a.}G;' ", 48, 665);
      Node node1 = node0.cloneTree();
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Node node0 = new Node(37);
      node0.setSideEffectFlags(37);
      node0.isGetElem();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Node node0 = Node.newNumber((double) 15);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)59;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.putIntProp(0, 2134);
      Node.newString("t`edX.@9;#<", (-2596), 42);
      Node node1 = new Node(48, node0, node0);
      node1.isThrow();
      node1.isUnscopedQualifiedName();
      Node node2 = Node.newString("second new child has existing parent", 12, 54);
      node1.useSourceInfoIfMissingFromForTree(node2);
      node1.isAdd();
      node2.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(110, node0, node0, 40, 55);
      Node node2 = Node.newNumber((double) 57, 52, 2405);
      Node.newString(40, " is not a string node", 16, 40);
      node2.toStringTree();
      Node node3 = node1.getChildBefore(node2);
      node3.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Node node0 = Node.newString("no a trAn(Node");
      Node node1 = new Node((-685), node0, node0, node0, 57, 40);
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Node node0 = new Node(2498, 2498, 2498);
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Node node0 = Node.newNumber((-3170.68019218));
      node0.isEquivalentTo(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node0.isFunction();
      node0.isHook();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber((double) 29, 52, 56);
      Node node2 = node0.useSourceInfoFromForTree(node0);
      node1.isUnscopedQualifiedName();
      Object object0 = new Object();
      node0.isName();
      node0.isTrue();
      Node node3 = Node.newNumber(0.0);
      Node node4 = new Node(42, node0, node1, node0, node3);
      node1.isQualifiedName();
      Node.newString((-2088), "^#u?yX:p@!PP.O");
      node4.isCast();
      Node.NodeMismatch node_NodeMismatch0 = node3.checkTreeTypeAwareEqualsImpl(node4);
      node0.checkTreeEqualsImpl(node2);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      node_NodeMismatch0.equals(locale_Category0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, (-170));
      Node node1 = new Node(37);
      node1.isBlock();
      Node.extractLineno(57);
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Node node0 = new Node(2034, 2034, 33);
      Object object0 = new Object();
      Node node1 = new Node(2034, node0, node0, node0, 63, 15);
      node1.isEquivalentTo(node0, false, false, false);
      node1.isLabel();
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node.extractLineno(4);
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Node.extractCharno((-1047));
      String string1 = "3n+kAk";
      Node node0 = Node.newString("3n+kAk");
      Node node1 = new Node(36, 50, 30);
      Node node2 = node0.srcrefTree(node1);
      int int0 = 3;
      node0.appendStringTree((Appendable) null);
      Node.newString(string0, int0, node0.FREE_CALL);
      node2.removeProp(node1.IS_NAMESPACE);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      // Undeclared exception!
      try { 
        node1.isFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getBooleanProp(57);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setAllFlags();
      node_SideEffectFlags6.setMutatesArguments();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node_SideEffectFlags6.areAllFlagsSet();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.valueOf();
      Node node1 = new Node(43, node0, node0, node0, (-1336), 4095);
      node1.isDec();
      Node node2 = node0.cloneTree();
      node1.addChildrenAfter(node2, node0);
      Node node3 = Node.newString("", 52, 27);
      node2.isQualifiedName();
      node3.addSuppression(" [");
      node1.setSourceEncodedPositionForTree(51);
      node2.mayMutateGlobalStateOrThrow();
      node3.isLabel();
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Node node0 = Node.newString(116, "com.google.common.collect.ImmutableList$SubList");
      node0.detachChildren();
      node0.isUnscopedQualifiedName();
      node0.isEmpty();
      node0.isDelProp();
      Node node1 = Node.newString("com.google.common.collect.ImmutableList$SubList", 57, 43);
      node1.isLabel();
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      node0.isSyntheticBlock();
      node0.isVar();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.detachChildren();
      Node node1 = new Node((-906), node0, node0, node0, 21, 2526);
      Node.mergeLineCharNo(98, (-906));
      Node node2 = node0.useSourceInfoFromForTree(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("NO_OBJECT_TYPE", true);
      node1.setStaticSourceFile(simpleSourceFile0);
      int int0 = Node.QUOTED_PROP;
      node2.getQualifiedName();
      node1.isDefaultCase();
      node0.isUnscopedQualifiedName();
      node0.isGetElem();
      node2.isFor();
      Node.newString(43, (String) null, 2086, 4096);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.setIsSyntheticBlock(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.clearAllFlags();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
      node_SideEffectFlags2.setReturnsTainted();
      node0.setSideEffectFlags(node_SideEffectFlags2);
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Node node0 = Node.newString(85, "missing prop: ", 85, 85);
      Node node1 = node0.cloneTree();
      node1.mayMutateArguments();
      node1.setIsSyntheticBlock(true);
      node1.removeProp(39);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.srcref(node1);
      node0.hasChildren();
      node0.isLabelName();
      node1.isAssignAdd();
      node1.isDec();
      int int0 = Node.FLAG_NO_THROWS;
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Node node0 = Node.newString(85, "missing prop: ", 1011, 85);
      Node node1 = node0.cloneTree();
      node1.mayMutateArguments();
      node1.getIntProp(31);
      node0.setIsSyntheticBlock(false);
      node1.hasChildren();
      node0.isAssignAdd();
      node0.isDec();
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, (-170));
      node0.getDouble();
      node0.isVarArgs();
      node0.isOptionalArg();
      node0.setLength((-170));
      Node node1 = new Node(123);
      node1.isObjectLit();
      Node.extractLineno(43);
      node1.getExistingIntProp(29);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Node node0 = Node.newString("buwkMu]0");
      Node.newString(36, "prototype", 2521, 2);
      Node node1 = node0.cloneTree();
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl((Node) null);
      Node.NodeMismatch node_NodeMismatch1 = node0.checkTreeEqualsImpl(node1);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      node_NodeMismatch0.equals(node_NodeMismatch1);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Node node0 = Node.newNumber((-921.218152815963));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)77;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.getIntProp(8192);
      node0.isAnd();
      node0.isSyntheticBlock();
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.isAnd();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Node node0 = new Node(101, 1758, 1758);
      node0.isAnd();
      node0.isSetterDef();
      node0.isEmpty();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Node node0 = Node.newString(1852, "com.google.javascript.rhino.Node$AbstractPropListItem", 1852, 1852);
      node0.getIntProp(1852);
      node0.isCatch();
      Node node1 = node0.cloneNode();
      node0.copyInformationFromForTree(node1);
      node0.isOptionalArg();
      node0.isNot();
      node0.isUnscopedQualifiedName();
      node0.isScript();
      node0.hasOneChild();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Node node0 = new Node(113, 1758, 1758);
      node0.isOptionalArg();
      node0.isQualifiedName();
      node0.isUnscopedQualifiedName();
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Node node0 = Node.newString("; .3A5YNp%nG}rt#[");
      node0.getSourceOffset();
      node0.isVar();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-3410));
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.areAllFlagsSet();
      node0.getProp(51);
      node0.setCharno((-3410));
      node0.isName();
      node0.isBreak();
      Node node1 = new Node((-270), node0, node0, node0, node0);
      node0.isQualifiedName();
      node0.setString("");
      Node node2 = Node.newString(51, "", (-2942), 21);
      node0.getChangeTime();
      node2.toString();
      Node node3 = Node.newString(86, "IN ", 3793, 51);
      node3.isFunction();
      Node node4 = node0.cloneNode();
      node2.getNext();
      node3.isFor();
      node3.setWasEmptyNode(false);
      node4.getChildAtIndex((-2596));
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-4321.798767941566));
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = new Node((-3036));
      node1.addChildrenToBack(node0);
      node0.addChildToFront(node1);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = new Node(54, 36, 522);
      boolean boolean1 = false;
      node2.setWasEmptyNode(false);
      Node node3 = node2.cloneNode();
      node3.setLineno(52);
      node2.addChildrenToFront(node0);
      node2.isEquivalentTo(node1, boolean1, boolean0, boolean0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Node node0 = Node.newNumber((-13.393708785555821));
      node0.setIsSyntheticBlock(true);
      node0.getChildAtIndex((-490));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = Node.newString("+B{'");
      node_SideEffectFlags0.setMutatesThis();
      node1.isSyntheticBlock();
      node0.addChildBefore(node1, (Node) null);
      node_SideEffectFlags0.setThrows();
      node0.getChildBefore(node1);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      jSDocInfo0.setWizaction(false);
      Node node0 = new Node(2, (Node) null, (Node) null, (Node) null);
      // Undeclared exception!
      try { 
        node0.getSourceFileName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Node node0 = Node.newString("; .3A5YNp%nG}rt#[");
      int int0 = Node.SYNTHETIC_BLOCK_PROP;
      node0.isVar();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-3410));
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.areAllFlagsSet();
      node0.getProp(51);
      node0.setCharno((-3410));
      node0.isDo();
      node0.isBreak();
      Node node1 = new Node((-270), node0, node0, node0, node0);
      node0.isQualifiedName();
      node0.setString("?");
      Node node2 = Node.newString(51, "", (-2942), 21);
      node0.getChangeTime();
      node2.toString();
      Node node3 = Node.newString(86, "IN ", 3793, 51);
      node0.isEquivalentTo(node3, false, false, false);
      node0.cloneNode();
      node2.getNext();
      node3.isFor();
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node.newNumber((double) 29, 52, 56);
      node0.useSourceInfoFromForTree(node0);
      node0.isFromExterns();
      node0.isBlock();
      Object object0 = new Object();
      node0.isName();
      node0.isTrue();
      Node node1 = new Node(54);
      node1.isBlock();
      Node.extractLineno(40);
      node0.isName();
      node1.getChildCount();
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(1852, "com.google.javascript.rhino.Node$AbstractPropListItem", 1852, 1852);
      node0.getIntProp(1852);
      node0.isFor();
      Node node1 = node0.cloneNode();
      node0.copyInformationFromForTree(node1);
      node0.isHook();
      node0.isInc();
      node1.setString("com.google.javascript.rhino.Node$AbstractPropListItem");
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      int int0 = 1677;
      int int1 = 55;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mSl");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(402);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getInputId();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.putProp(64, node0);
      node1.removeChildAfter(node0);
      Node node2 = new Node(int1, node0, node0);
      int int2 = 63;
      File file0 = null;
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Object object0 = new Object();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = null;
      jSTypeArray0[1] = null;
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = node0.cloneNode();
      node1.copyInformationFromForTree(node0);
      node0.isHook();
      node0.isEquivalentToShallow(node1);
      node1.isInc();
      node1.isWhile();
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      Node node0 = Node.newString("Object#Key");
      Node node1 = node0.cloneNode();
      node0.isOr();
      node0.setLineno(42);
      node1.isInc();
      node1.isWhile();
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Node node0 = new Node(113);
      node0.getIntProp(39);
      node0.setIsSyntheticBlock(false);
      node0.hasChildren();
      node0.isDefaultCase();
      node0.isSyntheticBlock();
      node0.isComma();
      Node.newString(114, "missing prop: ");
      node0.getType();
      node0.isInc();
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node0.isTypeOf();
      node0.isIf();
      Node node1 = new Node(16, node0, node0, node0, (-152), 512);
      Node.mergeLineCharNo(57, 51);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.addChildAfter(node0, node1);
      node2.isQualifiedName();
      // Undeclared exception!
      try { 
        node2.srcrefTree(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getBooleanProp(57);
      node0.detachChildren();
      Node node1 = Node.newNumber((double) 50);
      Node node2 = Node.newString(153, "Type names cannot contain template annotations.");
      int int0 = Node.QUOTED_PROP;
      node1.getQualifiedName();
      node2.isDefaultCase();
      node1.isGetElem();
      node2.isOr();
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Node node0 = Node.newString("Y");
      node0.getBooleanProp(57);
      node0.detachChildren();
      node0.isDefaultCase();
      node0.isSyntheticBlock();
      node0.isComma();
      Node node1 = Node.newString(4, "Y");
      node1.getSideEffectFlags();
      node1.isCatch();
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getBooleanProp(57);
      node0.detachChildren();
      Node node1 = new Node(544, node0, node0, node0, 0, 2);
      Node.mergeLineCharNo(4095, 32);
      node1.useSourceInfoFromForTree(node0);
      node1.useSourceInfoIfMissingFromForTree(node0);
      node1.isAdd();
      node1.isInstanceOf();
      JSType[] jSTypeArray0 = new JSType[3];
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Node node0 = Node.newString("; .3A5YNp%nG}rt#[");
      node0.getSourceOffset();
      Node node1 = new Node(4095, node0, node0, node0, node0, 1, 38);
      node0.isStringKey();
      node0.mayMutateArguments();
      node0.isEquivalentToShallow(node1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "':";
      stringArray0[1] = "; .3A5YNp%nG}rt#[";
      stringArray0[2] = "(p?'5rA3LP";
      stringArray0[3] = "Gwz>";
      ImmutableList<String> immutableList0 = ImmutableList.of("lFeC|K)-q F|XG>", "(p?'5rA3LP", "%{l3iIll|#~", "Gwz>", "com.google.common.collect.ImmutableMap", "(p?'5rA3LP", "':", "com.google.common.collect.ImmutableMap", "zND=|5s~e[&wG", "':", "(p?'5rA3LP", "':", stringArray0);
      Stack<JSType> stack0 = new Stack<JSType>();
      stack0.retainAll(immutableList0);
      node0.isExprResult();
      node1.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Node node0 = Node.newNumber(2758.7575248638);
      Node node1 = Node.newNumber((double) (-2723), 4, 8233);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.isBlock();
      Object object0 = new Object();
      node1.isName();
      node0.isTrue();
      node1.checkTreeTypeAwareEqualsImpl(node2);
      Node node3 = new Node(29);
      node3.isBlock();
      Node.extractLineno(102);
      node1.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      Node node1 = new Node((-2323));
      node1.addChildrenToBack(node0);
      node0.putIntProp((-3826), 161);
      node1.hasChildren();
      Node node2 = new Node(1, node1, node1, node1, node0);
      node2.isDelProp();
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber((double) 29, 52, 56);
      Node node2 = new Node(8, node0, node1);
      Node node3 = node2.useSourceInfoFromForTree(node0);
      node1.isBreak();
      int int0 = 50;
      Node node4 = new Node(52, 1087, 4);
      int int1 = 8;
      Node node5 = new Node(550);
      Node node6 = new Node(53, node4, node5, node3, node0);
      Node node7 = new Node(int1, node6, node0.INCRDECR_PROP, node2.MAX_COLUMN_NUMBER);
      Node node8 = new Node(int0, node4, node4, node2, node7);
      // Undeclared exception!
      try { 
        node0.isQualifiedName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node0.isTypeOf();
      node0.isIf();
      Node node1 = Node.newNumber(1392.4);
      Node node2 = Node.newString(38, "Object#Key");
      int int0 = Node.QUOTED_PROP;
      node0.getQualifiedName();
      node2.isDefaultCase();
      node1.isGetElem();
      node1.isOr();
      node0.isDefaultCase();
      node2.isFalse();
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-4321.798767941566));
      Node node1 = new Node((-3036));
      node1.addChildrenToBack(node0);
      node0.addChildToFront(node1);
      Node node2 = Node.newString("e}?'=jd@,_z-BX", (-321), 2673);
      Node node3 = node1.detachFromParent();
      node0.isFromExterns();
      node0.setType((-1));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node3.isHook();
      node2.isInc();
      node1.setString("e}?'=jd@,_z-BX");
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(31);
      byte[] byteArray0 = new byte[1];
      node1.copyInformationFromForTree(node0);
      byteArray0[0] = (byte)81;
      node0.addChildrenToBack(node1);
      node1.addChildToFront(node0);
      Node node2 = Node.newString("e}?'=jd@,_z-BX", 1558, (-753));
      Node node3 = node0.detachFromParent();
      node0.isFromExterns();
      node3.setType(47);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(56);
      node3.isHook();
      node3.isInc();
      node3.setString("e}?'=jd@,_z-BX");
      node1.getAncestor(node2.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Node node0 = Node.newString("Y");
      node0.getBooleanProp(57);
      node0.detachChildren();
      node0.isQualifiedName();
      node0.setString("Y");
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node0.isTypeOf();
      node0.isIf();
      Node node1 = Node.newNumber(1392.4);
      Node node2 = Node.newString(38, "Object#Key");
      int int0 = Node.QUOTED_PROP;
      node0.getQualifiedName();
      node2.isDefaultCase();
      node1.isGetElem();
      node1.isOr();
      Node node3 = new Node(1, node0, node1, node2, 1494, 0);
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = null;
      jSTypeArray0[1] = null;
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = node0.cloneNode();
      node0.isQualifiedName();
      node1.setSourceEncodedPositionForTree(50);
      Node node2 = Node.newString((-2992), "<invalid>");
      node2.isCast();
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.checkTreeEqualsImpl(node0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) null, jSTypeArray0[1]);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node_NodeMismatch0.equals(node3);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Node node0 = new Node(51, 51, 51);
      Node node1 = Node.newNumber(0.0);
      node0.useSourceInfoFrom(node1);
      Node node2 = Node.newNumber((double) 57, 4095, 0);
      node0.isAdd();
      node2.isHook();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      node2.isInc();
      node2.setString("m_p.xjA#4LP6'Xh0! ");
      node2.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Node node0 = new Node((-152), 16, 16);
      Node node1 = Node.newString("BITAND", 873, (-3403));
      Node node2 = Node.newString("com.google.common.collect.ImmutableSet", (-160), 16);
      Node node3 = new Node((-1900), node2);
      node0.useSourceInfoIfMissingFromForTree(node3);
      Node node4 = Node.newString("P;>N");
      node4.isAdd();
      node1.isInstanceOf();
      node0.getType();
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Node node0 = Node.newString(120, "N5o5?1p,v&Y,Y 9G");
      node0.getType();
      node0.isSetterDef();
      node0.isFor();
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.setIsSyntheticBlock(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
      node0.isThis();
      node0.isLabelName();
      node0.isDefaultCase();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node0.setSideEffectFlags(node_SideEffectFlags2);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("com.google.common.collect.ImmutableList$SubList");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.getDouble();
      node0.isAnd();
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags(node0.FREE_CALL);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING com.google.common.collect.ImmutableList$SubList [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isCall();
      String string0 = "com.google.javascript.rhino.Node$AbstractPropListItem";
      Node node1 = Node.newString("com.google.javascript.rhino.Node$AbstractPropListItem", 2781, 50);
      node1.detachChildren();
      Node node2 = new Node(57, node1, node0, 49, (-2507));
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.Node$AbstractPropListItem");
      String string1 = node1.toString();
      Node node3 = new Node(53);
      MockPrintStream mockPrintStream0 = new MockPrintStream(string1);
      Locale locale0 = Locale.GERMANY;
      String string2 = "";
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format(locale0, string2, objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      PrintStream printStream1 = mockPrintStream1.append((CharSequence) string0);
      node3.appendStringTree(printStream1);
      Node node4 = new Node(node0.IS_DISPATCHER, node3, node1, node2, node1, node1.SIDE_EFFECTS_ALL, node1.OPT_ARG_NAME);
      node2.removeChildAfter(node4);
      // Undeclared exception!
      try { 
        node0.getLineno();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 53
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      node0.isSyntheticBlock();
      node0.isVar();
      Node node1 = Node.newString(30, "NO_OBJECT_TYPE", 37, 37);
      Node node2 = node1.cloneTree();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      simpleErrorReporter0.error("is_dispatcher", "Object#Key", 154, 57);
      node3.isAssign();
      int int0 = Node.COLUMN_BITS;
      Node node4 = new Node(2);
      node4.cloneNode();
      node1.isHook();
      node0.isEquivalentToShallow(node3);
      node0.getChildBefore(node4);
      String string0 = "CharMatcher.DIGIT";
      Node node5 = Node.newString(string0);
      node5.isInc();
      // Undeclared exception!
      try { 
        node2.isWhile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Node node0 = Node.newNumber((-921.218152815963));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)77;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.getIntProp(8192);
      node0.isAnd();
      node0.isGetElem();
      node0.mayMutateArguments();
      node0.isSwitch();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isCall();
      Node node1 = Node.newString("");
      node1.getQualifiedName();
      node0.isInc();
      Node node2 = Node.newNumber((double) 55, 1924, 115);
      node2.getLineno();
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Node node0 = Node.newString(113, "missing prop: ");
      node0.isParamList();
      node0.setLineno(113);
      node0.isNE();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isCall();
      Node node1 = Node.newString("com.google.javascript.rhino.Node$AbstractPropListItem", 2781, 50);
      node1.detachChildren();
      Node node2 = new Node(57, node1, node0, 49, (-2507));
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.Node$AbstractPropListItem");
      node0.isExprResult();
      node2.getChildCount();
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      node0.isSyntheticBlock();
      node0.isVar();
      Node node1 = Node.newString(30, "NO_OBJECT_TYPE", 37, 37);
      Node node2 = node1.cloneTree();
      node2.checkTreeEquals(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      simpleErrorReporter0.error("is_dispatcher", "Object#Key", 154, 57);
      node3.isAssign();
      int int0 = Node.COLUMN_BITS;
      Node.newString("Object#Element", 12, 4096);
      Node node4 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node4.isQualifiedName();
      node3.addSuppression("NO_OBJECT_TYPE");
      node3.setSourceEncodedPositionForTree(426);
      node1.mayMutateGlobalStateOrThrow();
      node3.isLabel();
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 1738, (-170));
      node0.isName();
      node0.isTrue();
      Node node1 = new Node((-1154));
      node0.getQualifiedName();
      node1.isDefaultCase();
      node1.isSyntheticBlock();
      node1.isComma();
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      HashSet<TemplatizedType> hashSet0 = new HashSet<TemplatizedType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) hashSet0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Node node0 = new Node(3600, 56, 3600);
      node0.setSideEffectFlags((Node.SideEffectFlags) null);
      int int0 = 36;
      Node node1 = new Node(int0, node0, node0, node0, node0);
      int int1 = 54;
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("");
      node0.getBooleanProp(57);
      Node node1 = new Node((-1560), 2521, 1);
      Node node2 = new Node(4096, 52, 46);
      node2.isQualifiedName();
      node0.setSourceEncodedPositionForTree(8);
      Node node3 = Node.newString((-666), "");
      node2.getInputId();
      Node node4 = new Node(2063, (-514), (-2027));
      node4.isCast();
      Node node5 = new Node(57);
      Node.NodeMismatch node_NodeMismatch0 = node4.checkTreeTypeAwareEqualsImpl(node3);
      node0.checkTreeEqualsImpl(node4);
      Node node6 = new Node(16, node1, node3);
      node2.getStaticSourceFile();
      node6.setStaticSourceFile((StaticSourceFile) null);
      Node node7 = new Node(1658, node3, node1, node0, node4);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      String string1 = "Should not happen\n";
      boolean boolean1 = true;
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile(string1, boolean1);
      node_NodeMismatch0.equals(simpleSourceFile1);
      node0.isBreak();
      node4.isCall();
      node3.isStringKey();
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Node node0 = Node.newString(85, "missing prop: ", 1011, 85);
      Node node1 = node0.cloneTree();
      node1.mayMutateArguments();
      node1.putProp(52, node0);
      Node node2 = new Node(37, node0, node1, node0, (-3), 31);
      Node.mergeLineCharNo(536870912, 117);
      node0.useSourceInfoFromForTree(node1);
      Node node3 = Node.newString("gZyC@7a@", 1126, 2147483645);
      node3.addChildAfter(node1, node2);
      node3.isQualifiedName();
      String string0 = "@pS5";
      node1.setString(string0);
      node2.isExprResult();
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Node node0 = new Node(37);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      node0.isNE();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.setSideEffectFlags(37);
      node0.isGetElem();
      node0.setString("Q4-");
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Node node0 = new Node(37);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      node0.isNE();
      node0.isQualifiedName();
      node0.getChangeTime();
      node0.toString();
      node0.removeChildAfter((Node) null);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber((double) 29, 52, 56);
      node0.isFromExterns();
      node0.isBlock();
      Object object0 = new Object();
      node0.isName();
      node0.isTrue();
      Node node2 = new Node(54);
      node2.isBlock();
      Node.extractLineno(40);
      node0.isName();
      node1.putBooleanProp(51, false);
      node1.isDebugger();
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Node node0 = Node.newString(113, "BCobGajGej\"+YI");
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      node0.isSyntheticBlock();
      node0.isVar();
      Node node1 = Node.newString(30, "NO_OBJECT_TYPE", 37, 37);
      Node node2 = node1.cloneTree();
      JSType[] jSTypeArray0 = new JSType[0];
      int int0 = Node.COLUMN_BITS;
      node1.mayMutateGlobalStateOrThrow();
      node2.addChildToBack(node0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("LG/|#K7CgZi/|970$CZ");
      node0.getBooleanProp(2475);
      node0.detachChildren();
      int int0 = 0;
      Node node1 = new Node(40, node0, node0, node0, 1, 111);
      Node.mergeLineCharNo(36, 42);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.addChildAfter(node0, node0);
      Node node3 = Node.newNumber((double) node0.CHANGE_TIME);
      node3.isQualifiedName();
      int int1 = (-1047);
      int int2 = 1964;
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString(113, "missing prop: ", 1011, 113);
      node0.getIntProp(39);
      node0.setIsSyntheticBlock(false);
      node0.hasChildren();
      node0.isDefaultCase();
      node0.isSyntheticBlock();
      node0.isComma();
      node0.getType();
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$AncestorIterable", 1198, (-2246));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node2 = new Node(2134, node0, node0, node1, 32, 38);
      node2.putIntProp((-2813), 302);
      Node node3 = Node.newString("com.google.common.base.Preconditions", 47, 1791);
      Node node4 = new Node(1, node3, node3);
      node1.isThrow();
      node4.isUnscopedQualifiedName();
      Node.newString("]qDY!8");
      Node node5 = node4.useSourceInfoIfMissingFromForTree(node2);
      node5.isFor();
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Node node0 = Node.newNumber(399.765, 27, 27);
      node0.isReturn();
      node0.isDefaultCase();
      node0.getQualifiedName();
      Node node1 = node0.cloneTree();
      node1.removeFirstChild();
      node1.addChildBefore(node0, (Node) null);
      Node node2 = new Node(node1.FLAG_THIS_UNMODIFIED, node1);
      // Undeclared exception!
      try { 
        node2.hasChildren();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.newString(2, "NO_OBJECT_TYPE");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node(44, node0);
      Node node2 = Node.newString("NO_OBJECT_TYPE");
      node0.isUnscopedQualifiedName();
      node2.addChildBefore(node0, (Node) null);
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setReturnsTainted();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>((-1125));
      jSTypeRegistry0.createInterfaceType("", (Node) null, (ImmutableList<TemplateType>) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) arrayDeque0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = Node.newString("JW_{");
      Node node2 = new Node((-2813), node0, node1, node1, node0, 54, 4);
      Node node3 = node2.cloneTree();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Not declared as a type name";
      stringArray0[1] = "z x()JT;wL15Crx[_";
      node1.isEquivalentToTyped(node2);
      node2.setWasEmptyNode(true);
      stringArray0[2] = "";
      ImmutableList.copyOf(stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node2.getStaticSourceFile();
      node2.removeFirstChild();
      node0.isBreak();
      node3.isOnlyModifiesArgumentsCall();
      node3.isBreak();
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.JSDocInfo$NamePosition");
      node0.setLineno(48);
      node0.getStaticSourceFile();
      Node node1 = Node.newString("com.google.javascript.rhino.JSDocInfo$NamePosition", 49, (-1294));
      Node node2 = Node.newString(4194304, "duplicate child", 35, 38);
      node0.isUnscopedQualifiedName();
      node2.addChildToFront(node1);
      node2.isName();
      node1.removeProp((-66));
      node2.isCase();
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString(113, "IixgwT67", (-1870), (-1870));
      node0.getIntProp(2);
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node(30, node0, node0);
      node0.isEquivalentToShallow(node1);
      node0.hasChildren();
      node0.isFunction();
      node0.isSyntheticBlock();
      node0.isComma();
      node0.getType();
      node0.getSideEffectFlags();
      node0.getSourcePosition();
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Node node0 = new Node((-152), 16, 16);
      Node node1 = Node.newString("");
      Node.extractLineno(115);
      node0.isName();
      Node node2 = new Node(12, node0, node1, node0, (-1772), 57);
      node2.putBooleanProp((-843), true);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Node node0 = Node.newString("2");
      node0.isSyntheticBlock();
      node0.isVar();
      Node node1 = new Node(57, node0, node0, 57, 101);
      node1.getIntProp(592);
      node0.isAssignAdd();
      node1.isTypeOf();
      Node node2 = Node.newNumber((double) 31);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      node0.putProp(32, templateType0);
      Node node3 = new Node(15, 57, 52);
      Node node4 = new Node(4, 49, 1609);
      node4.isQualifiedName();
      node3.setSourceEncodedPositionForTree(38);
      Node node5 = Node.newString(2197, "Unknown class name");
      node4.isCast();
      Node.NodeMismatch node_NodeMismatch0 = node5.checkTreeTypeAwareEqualsImpl(node4);
      Node.NodeMismatch node_NodeMismatch1 = node2.checkTreeEqualsImpl(node1);
      node_NodeMismatch1.equals(node_NodeMismatch0);
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node0.isTypeOf();
      node0.isIf();
      node0.isLocalResultCall();
      Node.newNumber(1392.4);
      Node node1 = Node.newString(4095, "Object#Element", 46, 48);
      Node node2 = node0.cloneTree();
      node1.hasChildren();
      node0.isDelProp();
      node2.isCall();
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Node node0 = Node.newString("2");
      node0.isSyntheticBlock();
      node0.isVar();
      Node node1 = new Node(57, node0, node0, 57, 101);
      node1.getIntProp(592);
      node0.isAssignAdd();
      node1.isTypeOf();
      Node node2 = Node.newNumber((double) 31);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.getObjectIndexKey();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      Node node3 = new Node(46, node2, node1, node1, node1, (-631), 8);
      node3.isThis();
      node2.isLabelName();
      node0.isDefaultCase();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node3.setSideEffectFlags(node_SideEffectFlags1);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      Node node1 = Node.newString(36, "prototype", 2521, 2);
      node0.isTrue();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      simpleErrorReporter0.error("NO_OBJECT_TYPE", "", 54, 57);
      int int0 = Node.COLUMN_BITS;
      Node node2 = new Node(57, 4, 154);
      Node node3 = new Node(152, node1, node0, node2);
      node3.hasChildren();
      node2.getNext();
      node3.isWith();
      node1.isCase();
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = null;
      jSTypeArray0[1] = null;
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = node0.cloneNode();
      node0.checkTreeEquals(node1);
      node0.srcref((Node) null);
      node0.isHook();
      // Undeclared exception!
      try { 
        node1.isInc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setReturnsTainted();
      Node node1 = Node.newString("");
      node1.getQualifiedName();
      node0.isInc();
      node1.isGetElem();
      Node node2 = new Node(108, node0, node1, node1);
      node2.setString((String) null);
      int int0 = (-187);
      Node.extractLineno(int0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Node node0 = Node.newString("; .3A5YNp%nG}rt#[");
      node0.getSourceOffset();
      node0.getChangeTime();
      node0.isVar();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-3410));
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.areAllFlagsSet();
      node0.getProp(51);
      node0.setCharno((-3410));
      node0.isName();
      node0.isBreak();
      node0.isQualifiedName();
      node0.setString("");
      Iterator<JSType> iterator0 = (Iterator<JSType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(1, node0, 39, 48);
      node1.isGetProp();
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(110, node0, node0, 40, 55);
      Node node2 = Node.newNumber((double) 57, 52, 2405);
      node2.getChangeTime();
      Node.newString(40, " is not a string node", 16, 40);
      node2.setIsSyntheticBlock(true);
      node2.toStringTree();
      Node node3 = node1.getChildBefore(node2);
      node3.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Node node0 = new Node(115, (-1731), (-1731));
      node0.isAnd();
      node0.getAncestors();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.detachFromParent();
      node0.getLength();
      int int0 = 36;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = null;
      try {
        jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Node node0 = new Node(102, (Node) null);
      node0.getLength();
      int int0 = (-223);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newNumber((double) 15);
      node0.putIntProp(15, 15);
      Node node1 = Node.newString("Object#Key", 1, 1);
      Node node2 = new Node(15, node0, node1);
      node2.isSetterDef();
      node0.isUnscopedQualifiedName();
      Node node3 = Node.newString("Object#Element");
      node0.useSourceInfoIfMissingFromForTree(node2);
      node0.toString();
      node3.removeChildAfter(node0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Node node0 = new Node(37);
      node0.setSideEffectFlags(37);
      node0.isGetElem();
      node0.clonePropsFrom((Node) null);
      String string0 = "Q4-";
      // Undeclared exception!
      try { 
        node0.setString(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.isVarArgs();
      node0.isOptionalArg();
      Node node1 = new Node(132, node0, node0, (-2507), 14);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("");
      Node node2 = node1.removeFirstChild();
      node2.isEquivalentToTyped(node1);
      node2.isNull();
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.clearAllFlags();
      Node node0 = Node.newNumber((-1591.5908702488737), (-3499), (-4096));
      node0.isName();
      node0.isTrue();
      Node node1 = new Node(31, node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = new Node(103);
      node1.srcrefTree(node2);
      node1.isBlock();
      Node.extractLineno(1270);
      node1.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      String string0 = "NO_OBJECT_TYPE";
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      node0.isSyntheticBlock();
      node0.isVar();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = Node.newString("0gk`/m5", 2526, 166);
      node1.checkTreeEqualsImpl(node0);
      Node node2 = new Node(42, node1, node1);
      Node node3 = new Node(4, node2, node0, node2, node2, 4835, (-1432));
      Node node4 = new Node((-659), node3, node2, node2, node3);
      node1.checkTreeTypeAwareEqualsImpl(node4);
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      node4.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Node node0 = Node.newString("com.googHe.javascript.dhino.JSDocIfo$NamePosition");
      node0.getStaticSourceFile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      Node node1 = Node.newString("com.google.common.collecq.ImmutableList$SubList", 2750, (-1468));
      node1.isWith();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.checkTreeEqualsImpl(node0);
      node1.getLastSibling();
      Node.newString(1, "com.googHe.javascript.dhino.JSDocIfo$NamePosition");
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.clearAllFlags();
      Node.newNumber((-1578.0744634), (-3499), (-4096));
      Node node0 = Node.newString("'^hr[`pDNEn,N2.W", 16, 2829);
      node0.isQualifiedName();
      node0.setSourceEncodedPositionForTree(16);
      node0.isAnd();
      node0.getJSDocInfo();
      Node node1 = new Node(155, node0, node0, node0, node0, (-2967), 47);
      node1.isDo();
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Node node0 = Node.newNumber((double) 15);
      node0.putIntProp(0, 2134);
      Node node1 = Node.newString("t`edX.@9;#<", (-2596), 42);
      Node node2 = new Node(48, node0, node0);
      node2.isThrow();
      node2.addChildrenAfter(node1, node0);
      Node node3 = Node.newString("", 46, 37);
      node3.isQualifiedName();
      node1.setSourceEncodedPositionForTree(101);
      Node node4 = Node.newString(4095, "I'k", 2, 48);
      Node node5 = new Node(4, node2, node3);
      node5.isEquivalentTo(node0, true, true, true);
      Node node6 = new Node(36, node2, node4, node1);
      node6.cloneNode();
      node5.isFor();
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Node node0 = Node.newString(85, "missing prop: ", 85, 85);
      Node node1 = Node.newNumber((double) 37, (-3499), 1);
      Node node2 = new Node(30, node0, 1772, 46);
      Node node3 = node2.useSourceInfoFromForTree(node0);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node3;
      nodeArray0[1] = node0;
      Node node4 = new Node(98, node2, node2, node0);
      nodeArray0[2] = node4;
      nodeArray0[3] = node2;
      nodeArray0[4] = node1;
      nodeArray0[5] = node1;
      nodeArray0[6] = node1;
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(0, node0, node0, node0);
      nodeArray0[0] = node1;
      Node node2 = Node.newString(2201, "undefined", 2, 43);
      nodeArray0[1] = node2;
      node0.isThrow();
      node2.isUnscopedQualifiedName();
      Node node3 = Node.newString("second new childhas existing parent");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node4 = Node.newString("undefined", 30, 29);
      node1.useSourceInfoIfMissingFromForTree(node4);
      node3.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Node node0 = Node.newString(85, "missing prop: ", 85, 85);
      Node node1 = node0.cloneTree();
      node1.mayMutateArguments();
      node1.setIsSyntheticBlock(true);
      node1.removeProp(39);
      node0.hasChildren();
      node0.isLabelName();
      Node node2 = Node.newString(42, "missing prop: ");
      node2.isCast();
      Node[] nodeArray0 = new Node[0];
      Node node3 = new Node(4965, nodeArray0, 29, 40);
      node3.checkTreeTypeAwareEqualsImpl(node2);
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node3);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getBaseType();
      jSDocInfo0.declareThrows((JSTypeExpression) null);
      node2.setJSDocInfo(jSDocInfo0);
      node_NodeMismatch0.equals((Object) null);
      node3.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Node node0 = Node.newString("buwkMu]0");
      Node node1 = Node.newString(43, "buwkMu]0", 40, 43);
      node1.clonePropsFrom(node0);
      int int0 = Node.DECR_FLAG;
      node0.isCatch();
      node0.isDo();
      node1.isVoid();
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      node0.isSyntheticBlock();
      node0.isEquivalentToShallow(node0);
      node0.addSuppression("P9bD4wkq)Ju{5");
      Node node1 = Node.newNumber((double) 52);
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.getStaticSourceFile();
      Node node3 = new Node((-1486), node0, node2, 1, (-1639));
      node1.toString();
      node0.isInc();
      node1.isVoid();
      Node node4 = new Node(16, node2, node0, node3, node1, 40, 48);
      node4.getAncestors();
      node2.addChildrenToFront(node3);
      int int0 = (-1751);
      int int1 = 1945;
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber((double) 29, 52, 56);
      Node node2 = new Node(8, node0, node1);
      Node node3 = node2.useSourceInfoFromForTree(node0);
      node3.removeChild(node1);
      node2.isNoSideEffectsCall();
      node0.isNew();
      node1.isDelProp();
      node1.checkTreeEquals((Node) null);
      node1.hasChildren();
      // Undeclared exception!
      try { 
        node2.isTry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      node0.setIsSyntheticBlock(true);
      node0.hasChildren();
      node0.isDo();
      node0.isVoid();
      Node node1 = new Node(4, node0, node0, node0, node0, (-1794), 57);
      node0.getAncestors();
      Node node2 = new Node(46, 47, 30);
      node2.getLength();
      node2.addChildrenToFront(node1);
      node1.isEquivalentToTyped(node2);
      node1.isArrayLit();
      node2.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Node node0 = Node.newString("#G>.xM((VRg!{P!+kU");
      Node node1 = Node.newString(32, "", 4, 304);
      node1.getDirectives();
      node0.isTrue();
      Node node2 = new Node(4381, node1, node1, node0, node0);
      node2.isQualifiedName();
      node1.setCharno(12);
      node2.isNot();
      node2.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Node node0 = Node.newString("YKC!`Hc57WC9");
      int int0 = Node.FLAG_ARGUMENTS_UNMODIFIED;
      node0.isVar();
      node0.getProp(51);
      node0.isDo();
      node0.isBreak();
      Node node1 = new Node(2, node0, node0);
      node0.isQualifiedName();
      node0.setString("?");
      Node node2 = Node.newString(51, "", (-2942), 21);
      node2.toString();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      Node node3 = Node.newString(86, "IN ", 3793, 51);
      node1.hasOneChild();
      node0.cloneNode();
      node3.isFor();
      node1.setString("0gk`/m5");
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.isWhile();
      node0.isNoSideEffectsCall();
      Node node1 = new Node(132, node0, node0, (-2509), 14);
      node1.isLocalResultCall();
      node0.getJsDocBuilderForNode();
      Node node2 = Node.newString("0gk`/m5");
      node2.putIntProp(55, 50);
      node0.isAssignAdd();
      node2.isDec();
      node1.isScript();
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, (-170));
      node0.getDouble();
      node0.isVarArgs();
      node0.isOptionalArg();
      node0.setLength((-170));
      Node node1 = new Node(105, node0, node0, 1270, (-2900));
      node1.getString();
      int int0 = 40;
      node1.getExistingIntProp(int0);
      node1.replaceChildAfter(node0, node0);
      Node node2 = node0.getLastChild();
      node2.addChildrenToFront(node1);
      // Undeclared exception!
      try { 
        node0.srcrefTree(node2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FUNCTION <invalid> is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, (-170));
      node0.getDouble();
      node0.isVarArgs();
      node0.isOptionalArg();
      node0.setLength((-170));
      Node node1 = new Node(105, node0, node0, 30, (-2900));
      node1.getString();
      int int0 = 40;
      node1.getExistingIntProp(int0);
      node0.isHook();
      node0.isInc();
      // Undeclared exception!
      try { 
        node1.isArrayLit();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FUNCTION <invalid> is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Node node0 = Node.newString(85, "missing prop: ", 85, 85);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = node0.cloneTree();
      Node node2 = node0.cloneTree();
      node2.mayMutateArguments();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node node3 = node2.removeChildren();
      node0.setIsSyntheticBlock(true);
      Node node4 = Node.newNumber((double) 43);
      node4.children();
      node2.isEquivalentTo(node0, false, true, false);
      node4.isEmpty();
      node0.isInc();
      node1.setDouble(2066.574523638621);
      node3.srcref(node4);
      node1.isAssignAdd();
      node4.isSwitch();
      node3.isWith();
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(135, "miing prop:", 1011, 135);
      int int0 = Node.LENGTH;
      node0.setIsSyntheticBlock(false);
      node0.hasChildren();
      Node node1 = new Node(38, node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isExprResult();
      node1.isName();
      node1.isDelProp();
      node1.isLabel();
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(137, "missing prop: ", 1011, 137);
      int int0 = Node.LENGTH;
      node0.setIsSyntheticBlock(false);
      node0.hasChildren();
      Node node1 = Node.newNumber(1.0, 37, 310);
      Node node2 = new Node(40, node1, node0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.isExprResult();
      node3.isNew();
      node1.isDelProp();
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Node node0 = Node.newNumber(399.7645046606, 27, 27);
      node0.setLength(27);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isHook();
      node0.wasEmptyNode();
      Node node1 = new Node(37, node0, node0, node0, (-546), 8);
      node1.isDelProp();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.toString();
      node1.getAncestors();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl((Node) null);
      node_NodeMismatch0.equals(node1);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Node node0 = Node.newString("2");
      node0.isVar();
      Node node1 = new Node(57, node0, node0, 57, 101);
      node1.getIntProp(592);
      node0.isAssignAdd();
      node1.isTypeOf();
      Node.newNumber((double) 31);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      node0.putProp(32, templateType0);
      Node node2 = new Node(15, 57, 52);
      Node node3 = new Node(4, 49, 1609);
      node3.isQualifiedName();
      node2.setSourceEncodedPositionForTree(38);
      Node node4 = Node.newString(2197, "Unknown class name");
      node3.isCast();
      node4.checkTreeTypeAwareEqualsImpl(node3);
      node4.isSetterDef();
      node2.hasChild(node1);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(536870912, "", 536870912, 153);
      node0.setLineno(536870912);
      node0.addChildAfter((Node) null, (Node) null);
      node0.isQualifiedName();
      node0.siblings();
      String string1 = "com.google.javascript.rhino.JSDocInfo$NamePosition";
      // Undeclared exception!
      try { 
        node0.setString(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = new Node(16, node0, 29, 38);
      node1.getChildAtIndex(52);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      int int0 = 38;
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "IixgwT67";
      Node node0 = Node.newString(113, "IixgwT67", (-1870), (-1870));
      int int0 = Node.IS_DISPATCHER;
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node(30, node0, node0);
      node0.isEquivalentToShallow(node1);
      node0.hasChildren();
      node0.isFunction();
      node0.isSyntheticBlock();
      node0.setString("The new child node already has a parent.");
      node1.isAdd();
      node1.isInstanceOf();
      node1.mayMutateGlobalStateOrThrow();
      Node node2 = node0.srcrefTree(node1);
      node1.addChildrenAfter(node2, node2);
      int int1 = 2211;
      Node.newString(int1, string0);
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Node node0 = new Node(2034, 2034, 21);
      node0.getProp(1257);
      Node node1 = new Node(2034, node0, node0, node0, 63, 15);
      node1.getNext();
      node1.isDebugger();
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Node node0 = Node.newString("NOlOBJECT_TYPE");
      node0.isSyntheticBlock();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<TemplateType> stack0 = new Stack<TemplateType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) stack0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node2 = new Node(4541, node0, node1, node1, node1);
      node0.isEquivalentToShallow(node2);
      node1.addSuppression("NOlOBJECT_TYPE");
      Node node3 = Node.newNumber((double) 16);
      node2.copyInformationFromForTree(node0);
      node0.getStaticSourceFile();
      Node node4 = new Node(4095, node2, node0, 4095, 55);
      node4.toString();
      // Undeclared exception!
      try { 
        node3.isInc();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.clearAllFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<TemplateType> arrayList0 = new ArrayList<TemplateType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) arrayList0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isTrue();
      node0.isSyntheticBlock();
      node0.isComma();
      Node node1 = Node.newString(10, "Object#Element");
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node1.setString("com.google.common.base.Joiner$2");
      node0.isAdd();
      node1.isInstanceOf();
      node1.mayMutateGlobalStateOrThrow();
      Node node2 = node0.srcrefTree(node1);
      node2.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newString(47, "`M%x;", 1444, 101);
      node0.isTrue();
      Node node2 = new Node(9, node0, node0, node0, 1304, 981);
      node2.getIntProp(57);
      node0.isAnd();
      node0.isNot();
      node1.setString((String) null);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newNumber((double) 15);
      node0.putIntProp(15, 15);
      Node node1 = Node.newString("Object#Key", 1, 1);
      Node node2 = new Node(15, node0, node1);
      node2.setIsSyntheticBlock(false);
      node2.isSetterDef();
      node0.isUnscopedQualifiedName();
      Node.newString("Object#Element");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.useSourceInfoIfMissingFromForTree(node2);
      node1.setString((String) null);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Node node0 = Node.newString("GT");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = Node.newString("GT", 1280, 52);
      node1.getDirectives();
      node0.useSourceInfoIfMissingFromForTree(node1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      node0.getCharno();
      node0.getSourceFileName();
      node1.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node.extractLineno(1545);
      Node node0 = Node.newNumber(29.0);
      node0.toStringTree();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(4095, nodeArray0, 1, 48);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NUMBER 29.0\n");
      Node node2 = node1.clonePropsFrom(node0);
      node2.useSourceInfoIfMissingFrom(node1);
      Node node3 = node0.useSourceInfoIfMissingFrom(node1);
      node2.mayMutateGlobalStateOrThrow();
      Node node4 = Node.newString("'?twR3wb$");
      Node.NodeMismatch node_NodeMismatch0 = node4.checkTreeTypeAwareEqualsImpl(node3);
      Locale.Category locale_Category0 = Locale.Category.valueOf("'?twR3wb$");
      node_NodeMismatch0.equals(locale_Category0);
      node2.isObjectLit();
      Node node5 = node2.copyInformationFrom(node0);
      // Undeclared exception!
      try { 
        node5.useSourceInfoFrom(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.Category.'?twR3\\wb$
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString((-1013), "; .3A5YNp%nG}rt#[", (-1013), (-1013));
      Node node1 = null;
      node0.useSourceInfoIfMissingFromForTree((Node) null);
      node0.getChildBefore(node1);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Node node0 = Node.newNumber(399.7645046606, 27, 27);
      node0.setLength(27);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isHook();
      node0.wasEmptyNode();
      Node node1 = new Node(37, node0, node0, node0, (-546), 8);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.hasOneChild();
      Node node2 = node1.cloneNode();
      Node node3 = new Node(2, node0, node1, node0);
      String string0 = "=`O";
      node3.setString(string0);
      node2.getParent();
      // Undeclared exception!
      try { 
        node3.wasEmptyNode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 0, 0);
      Node node1 = new Node(30, node0, 32, (-3982));
      Node node2 = Node.newString(1, "");
      node1.isExprResult();
      node2.isNew();
      node1.setSideEffectFlags(4095);
      node2.isDelProp();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node2);
      node_AncestorIterable0.iterator();
      node2.getLineno();
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Node node0 = Node.newNumber(1465.0);
      Node node1 = new Node(154, node0, node0, 24, 48);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.common.collect.ImmutableList$SubList");
      Node node2 = node1.useSourceInfoFrom(node0);
      Node node3 = Node.newNumber((double) 50, 12, 4);
      node1.addChildToBack(node0);
      node1.children();
      node1.getAncestors();
      int int0 = 919;
      node3.checkTreeEqualsImpl(node2);
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Node node0 = new Node(113);
      node0.getIntProp(39);
      Node node1 = Node.newNumber((-893.082115), 31, 12);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.isBlock();
      Object object0 = new Object();
      node1.isName();
      node2.isTrue();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      Node node3 = new Node((-1614));
      node1.isBlock();
      Node.extractLineno(0);
      node3.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(110, node0, node0, 40, 55);
      Node node2 = Node.newNumber((double) 57, 52, 2405);
      Node node3 = Node.newNumber((double) 38, 8199, 53);
      Node node4 = new Node(4095, node2, node1);
      Node node5 = node1.useSourceInfoFromForTree(node4);
      node5.isExprResult();
      node3.isNew();
      node4.isDelProp();
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Node node0 = new Node(113, 1784, 1784);
      node0.isWhile();
      node0.isName();
      int int0 = Node.DIRECT_EVAL;
      int int1 = Node.POST_FLAG;
      node0.isExprResult();
      Node node1 = new Node(42, node0, node0, node0, 2, 30);
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Node node0 = Node.newString("buwkMu]0");
      Node node1 = new Node(15);
      Node node2 = new Node(48, node0, node0, node1, (-2001), (-928));
      node1.replaceChild(node2, node0);
      boolean boolean0 = true;
      node1.setIsSyntheticBlock(boolean0);
      node2.removeProp(node0.VAR_ARGS_NAME);
      // Undeclared exception!
      try { 
        node0.isLabelName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Node node0 = Node.newString("Y");
      node0.getBooleanProp(57);
      node0.isIf();
      Node node1 = Node.newString(37, "(N&D");
      node0.setQuotedString();
      node1.isEmpty();
      node0.isNumber();
      node1.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(137, "missing prop: ", 1011, 137);
      int int0 = Node.LENGTH;
      node0.setIsSyntheticBlock(false);
      node0.hasChildren();
      node0.setChangeTime(1011);
      node0.isOnlyModifiesArgumentsCall();
      node0.isTrue();
      node0.isSyntheticBlock();
      node0.isComma();
      Node node1 = Node.newString(111, "missing prop: ");
      node0.isName();
      node0.setQuotedString();
      node1.putBooleanProp(52, true);
      node0.isDebugger();
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-4321.798767941566));
      Node node1 = new Node((-3036));
      node1.addChildrenToBack(node0);
      node0.addChildToFront(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry1.getObjectElementKey();
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) templateType0, jSTypeArray0);
      node1.clonePropsFrom(node0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType1 = modificationVisitor0.caseStringType();
      JSType jSType2 = modificationVisitor0.caseNullType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType1, jSType2, jSType0, jSType0, jSType2, jSType2, jSType0, jSType2, jSType1);
      FunctionType functionType0 = jSTypeRegistry2.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) immutableList0);
      jSTypeRegistry2.getObjectElementKey();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node1, functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getOwnerFunction();
      modificationVisitor0.caseFunctionType(functionType0);
      jSTypeRegistry0.createEnumType("Not declared as a constructor", node1, enumType0);
      Node node2 = new Node(1621, node0, node1, node0, node1, (-1504), 57);
      node2.getSourcePosition();
      Node node3 = new Node(node0.SIDE_EFFECT_FLAGS, node1, node0, node2, node1, jSType2.NOT_ENUMDECL, node0.LENGTH);
      node0.removeChildAfter(node3);
      // Undeclared exception!
      try { 
        node1.useSourceInfoIfMissingFrom(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Node node0 = new Node(113);
      node0.copyInformationFromForTree((Node) null);
      node0.getIntProp(node0.EMPTY_BLOCK);
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(113, "missing prop: ", 1011, 113);
      node0.getIntProp(39);
      Node node1 = new Node(49, node0, node0, node0, node0);
      node0.isQualifiedName();
      node0.isUnscopedQualifiedName();
      Node node2 = Node.newString(30, "missing prop: ", (-1957), 1434);
      Node node3 = new Node(1458, node2);
      Node node4 = node3.copyInformationFrom(node0);
      Node.newString("Xaq!(HrI");
      node0.useSourceInfoIfMissingFromForTree(node2);
      node4.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      Node node0 = Node.newString("YKC!`Hc57WC9");
      int int0 = Node.FLAG_ARGUMENTS_UNMODIFIED;
      node0.isVar();
      node0.getProp(51);
      node0.isDo();
      node0.isBreak();
      Node node1 = new Node(2, node0, node0);
      node0.isQualifiedName();
      node0.setString("?");
      Node node2 = Node.newString(51, "", (-2942), 21);
      node0.getChangeTime();
      node2.toString();
      Node node3 = Node.newString(86, "IN ", 3793, 51);
      node1.isQualifiedName();
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node3);
      node3.checkTreeEqualsImpl(node2);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("YKC!`Hc57WC9", false);
      node_NodeMismatch0.equals(simpleSourceFile0);
      node1.getLastSibling();
      node3.removeFirstChild();
      node1.isNot();
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = null;
      jSTypeArray0[1] = null;
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = node0.cloneNode();
      node0.srcref(node1);
      node0.isHook();
      node1.isInc();
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Node node0 = new Node(113);
      node0.getIntProp(39);
      node0.setIsSyntheticBlock(false);
      node0.hasChildren();
      node0.isDefaultCase();
      node0.isSyntheticBlock();
      node0.isComma();
      Node node1 = Node.newString(121, "missing prop: ");
      node0.getType();
      Node node2 = node0.cloneNode();
      node1.isFor();
      node1.getStaticSourceFile();
      node2.getIntProp(44);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber((double) 29, 52, 56);
      Node node2 = node0.useSourceInfoFromForTree(node0);
      node1.isUnscopedQualifiedName();
      Object object0 = new Object();
      node0.isName();
      Node node3 = Node.newNumber((double) 4095);
      Node node4 = new Node(42, node0, node1, node0, node3);
      node1.isQualifiedName();
      node4.srcrefTree(node0);
      node4.getChangeTime();
      node1.toString();
      node4.removeChildAfter(node2);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Node node0 = new Node(113, 1758, 1758);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isAnd();
      Node node1 = Node.newString(38, "q=SuQ%VpK", 8, 15);
      Node node2 = node0.cloneTree();
      node2.hasChildren();
      node1.isDelProp();
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newNumber((double) 137);
      node0.isHook();
      node0.wasEmptyNode();
      Node node1 = new Node(189, node0, node0, node0, 57, 31);
      Node node2 = Node.newNumber((double) 46, 2888, (-298));
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node0.hasOneChild();
      Node node3 = node1.cloneNode();
      Node node4 = new Node(114, node3, node2, node2);
      node4.setString("missing prop: ");
      node1.getParent();
      node2.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.JSDocInfo$NamePosition");
      node0.getStaticSourceFile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node1 = Node.newString("com.google.common.collect.ImmutableList$SubList", 2746, (-1468));
      node1.isBlock();
      node0.isName();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = new Node(64, 4, 38);
      node2.putProp(39, (Object) null);
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      node0.getSideEffectFlags();
      node2.isCatch();
      node1.isNew();
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      Node node0 = Node.newNumber((double) 15);
      node0.putIntProp(0, 2134);
      Node node1 = Node.newString("t`edX.@9;#<", (-2596), 42);
      Node node2 = new Node(48, node0, node0);
      node2.isThrow();
      node2.addChildrenAfter(node1, node0);
      Node node3 = Node.newString("", 46, 37);
      node3.isQualifiedName();
      Node.newString(4, "is_constant_name");
      node2.getType();
      node3.isInc();
      Node node4 = Node.newNumber(1.0, 46, (-1403));
      node4.isWhile();
      node2.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Node node0 = new Node(113);
      node0.getIntProp(39);
      node0.hasChildren();
      node0.isDefaultCase();
      Node node1 = new Node(57, node0, node0, node0, node0, 4095, 36);
      node1.getAncestors();
      Node node2 = new Node(1, 49, 47);
      node1.addChildrenToFront(node2);
      node1.isEquivalentToTyped(node2);
      Node node3 = new Node(29, node2, node2);
      // Undeclared exception!
      try { 
        node3.isArrayLit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(137, "missing prop: ", 1011, 137);
      node0.getIntProp(39);
      node0.setIsSyntheticBlock(false);
      node0.hasChildren();
      node0.isDefaultCase();
      node0.isSyntheticBlock();
      node0.getAncestors();
      Node node1 = new Node(202313, 98, (-1264));
      Node node2 = new Node(57, node1, node1, node1, 113, 122);
      node2.addChildrenToFront(node0);
      Node node3 = Node.newString(46, "missing prop: ");
      node3.isEquivalentToTyped(node1);
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString(113, "missing prop: ", 1011, 113);
      node0.getIntProp(39);
      node0.setIsSyntheticBlock(false);
      node0.hasChildren();
      Node node1 = node0.getAncestor(0);
      node1.isTrue();
      node1.isFunction();
      node1.isHook();
      node0.setString("@iS/x.P>_");
      node0.isEquivalentToTyped(node1);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.JSDocInfo$NamePosition");
      InputId inputId0 = new InputId("com.google.javascript.rhino.JSDocInfo$NamePosition");
      node0.setInputId(inputId0);
      node0.getStaticSourceFile();
      node0.setDouble(1688.0);
      node0.isDec();
      // Undeclared exception!
      try { 
        node0.isContinue();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING com.google.javascript.rhino.JSDocInfo$NamePosition [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.isUnscopedQualifiedName();
      node0.isQualifiedName();
      Node node1 = Node.newString(53, "m4)&K{P]", 57, 7);
      Node node2 = new Node(1064, 57, 766);
      Node node3 = node2.cloneTree();
      node3.hasChildren();
      node2.isTry();
      node1.isFalse();
      node2.getChildBefore(node1);
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber(406.0, (-2723), 32);
      Node node2 = node0.useSourceInfoFromForTree(node0);
      node2.isBlock();
      Object object0 = new Object();
      node0.isName();
      node0.isTrue();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      Node node3 = new Node(52);
      node0.siblings();
      node1.isBlock();
      Node.extractLineno(15);
      node1.mayMutateGlobalStateOrThrow();
      node3.copyInformationFrom(node2);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      Node node0 = Node.newNumber(399.7645046606, 27, 27);
      node0.setLength(27);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isHook();
      node0.wasEmptyNode();
      Node node1 = new Node(37, node0, node0, node0, 536870912, 8);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.hasOneChild();
      node1.cloneNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node3 = new Node((-722), node2, node0, node1, node2);
      node3.hasChildren();
      node1.setDouble(node3.FLAG_GLOBAL_STATE_UNMODIFIED);
      node2.isAssignAdd();
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node4.isDec();
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString("*\u0006");
      node0.setQuotedString();
      Node node1 = new Node((-1519), node0, node0, node0, node0, 12, 365);
      node1.getQualifiedName();
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-4321.798767941566));
      Node node1 = new Node((-3036));
      node1.addChildrenToBack(node0);
      node0.addChildToFront(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      node1.hasChildren();
      node0.isDefaultCase();
      node0.isSyntheticBlock();
      node1.isComma();
      node1.getType();
      node1.isWhile();
      node1.isParamList();
      node0.getAncestor(53);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      Node node0 = Node.newString("buwkMu]0");
      Node node1 = Node.newString(36, "prototype", 2521, 2);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node2 = node0.cloneTree();
      node1.hasChildren();
      node1.isCast();
      Node node3 = new Node(1, node2, node2, node0, 52, 31);
      Node.NodeMismatch node_NodeMismatch0 = node3.checkTreeTypeAwareEqualsImpl(node1);
      node1.checkTreeEqualsImpl(node3);
      InputId inputId0 = new InputId("function (");
      inputId0.toString();
      node_NodeMismatch0.equals(inputId0);
      node3.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Node node0 = Node.newString("com.googHe.javascript.dhino.JSDocIfo$NamePosition");
      node0.getStaticSourceFile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      Node node1 = Node.newString("com.google.common.collect.ImmutableList$SubList", 2746, (-1468));
      node1.isBlock();
      node0.isName();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = new Node(85);
      node2.isBlock();
      node1.isEquivalentTo(node2, true, false, false);
      Node node3 = new Node(11, node2, node1, node2);
      node2.cloneNode();
      Node node4 = Node.newNumber((-3212.59603896857));
      node4.isFor();
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      Node node0 = new Node(113);
      node0.getIntProp(4993);
      node0.setIsSyntheticBlock(false);
      node0.hasChildren();
      node0.isDefaultCase();
      node0.isSyntheticBlock();
      node0.isComma();
      Node node1 = Node.newString(1244, "buwkMu]0");
      node0.getType();
      node0.isInc();
      node1.isWhile();
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(137, "missing prop: ", 1011, 137);
      int int0 = Node.LENGTH;
      node0.mayMutateArguments();
      Node node1 = new Node(1498, node0, node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.replaceChildAfter(node2, node2);
      node1.isFromExterns();
      node0.addChildBefore(node2, node2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      // Undeclared exception!
      try { 
        node2.getChildBefore(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      Node node0 = Node.newString("; .3A5YNp%nG}rt#[");
      node0.getSourceOffset();
      node0.getChangeTime();
      node0.isVar();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-3410));
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.areAllFlagsSet();
      node0.getProp(51);
      node0.setCharno((-3410));
      Node node1 = new Node(465, node0, node0, node0, node0);
      node1.isQualifiedName();
      node0.getChangeTime();
      node0.toString();
      node1.removeChildAfter(node0);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      Node node0 = new Node(37);
      node0.isAssignAdd();
      node0.isTypeOf();
      Node node1 = Node.newNumber((double) 53);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      jSTypeRegistry0.getObjectIndexKey();
      node0.getProp(37);
      node1.putProp(79, (Object) null);
      Node node2 = new Node(10, 10, 36);
      Node node3 = new Node(446, 449, 2);
      node0.isQualifiedName();
      node3.setSourceEncodedPositionForTree(38);
      Node node4 = Node.newString(20, "Object#Key");
      node3.isCast();
      node4.checkTreeTypeAwareEqualsImpl(node0);
      Node.NodeMismatch node_NodeMismatch0 = node4.checkTreeEqualsImpl(node2);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node_NodeMismatch0.equals(jSDocInfo0);
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      Node node0 = new Node(113);
      node0.getIntProp(39);
      node0.setIsSyntheticBlock(false);
      node0.hasChildren();
      node0.isDefaultCase();
      node0.isSyntheticBlock();
      node0.isComma();
      Node node1 = new Node(64, node0, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isExprResult();
      node1.isNew();
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Node node0 = new Node(113, 1758, 1758);
      node0.putIntProp(1758, 113);
      Node node1 = Node.newString("RP", 32, 38);
      Node node2 = new Node(1728, node1, node0);
      node0.isSetterDef();
      node2.isUnscopedQualifiedName();
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node1);
      node3.isAdd();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      Node node0 = new Node(113);
      node0.getIntProp(39);
      node0.setIsSyntheticBlock(false);
      node0.hasChildren();
      node0.isDefaultCase();
      node0.isSyntheticBlock();
      node0.isComma();
      Node node1 = Node.newString(114, "missing prop: ");
      node0.getType();
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      node_NodeMismatch0.equals("missing prop: ");
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte)78;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString(131072, "b=~`K4", (-1491), 42);
      node0.isTrue();
      Node node1 = new Node(38, node0, node0, node0, node0);
      node1.isQualifiedName();
      node1.isUnscopedQualifiedName();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.isComma();
      node1.getQualifiedName();
      node1.isAdd();
      node1.isNew();
      Node node2 = new Node(node1.JSDOC_INFO_PROP, node1.FLAG_NO_THROWS, node1.FLAG_LOCAL_RESULTS);
      node2.getType();
      node2.setQuotedString();
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o./AwBn{deq(");
      Node node0 = Node.newString(85, "o./AwBn{deq(", (-3038), (-3038));
      Node node1 = node0.cloneTree();
      node1.mayMutateArguments();
      node1.getIntProp(8);
      node0.setVarArgs(true);
      node0.isDefaultCase();
      node1.isSyntheticBlock();
      node1.isComma();
      Node node2 = Node.newString(1002, "; .3A5YNp%nG}rt#[");
      node0.getType();
      node2.getSideEffectFlags();
      node1.isCatch();
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      Node node0 = Node.newString("; .3A5YNp%nG}rt#[");
      int int0 = Node.SLASH_V;
      Node node1 = new Node(4095, node0, node0, node0, node0, 1, 38);
      node0.isStringKey();
      node0.mayMutateArguments();
      node0.isEquivalentToShallow(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node2 = new Node(37);
      Node.newString(37, "0gk`/m5", 30, 16356);
      node2.cloneTree();
      node2.isInc();
      node2.isDebugger();
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "not a StringNode");
      Node node0 = Node.newString((-1105), "{6+&[1~w\"cp7.h");
      node0.isNE();
      node0.mayMutateArguments();
      Node node1 = new Node(4, node0, node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      Node node3 = new Node(4095, (Node[]) null, 3518, 42);
      node2.replaceChildAfter(node0, node3);
      node3.isFromExterns();
      int int0 = (-1123);
      Node node4 = new Node(node2.FLAG_LOCAL_RESULTS, node1, int0, node1.FLAG_THIS_UNMODIFIED);
      node4.addChildBefore(node2, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      Node node0 = new Node(130);
      node0.getSideEffectFlags();
      Node node1 = new Node(130, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      node1.isInstanceOf();
      node1.isIf();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)109;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node3 = Node.newString("NO_OBJECT_TYPE", 1702, 8);
      Node node4 = node1.useSourceInfoIfMissingFrom(node3);
      node4.removeProp(1643);
      node3.getJSType();
      node2.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xm\"u+&LIGX|U}");
      Node node0 = Node.newString(137, "missing prop: ", 1011, 137);
      int int0 = Node.LENGTH;
      node0.putProp(86, (Object) null);
      Node node1 = new Node(928, 12, 52);
      Node node2 = new Node(32, 56, 15);
      node2.isQualifiedName();
      node2.setSourceEncodedPositionForTree(35);
      Node node3 = Node.newString(4095, "missing prop: ");
      node3.isCast();
      Node.NodeMismatch node_NodeMismatch0 = node3.checkTreeTypeAwareEqualsImpl(node2);
      node3.checkTreeEqualsImpl(node0);
      Node.NodeMismatch node_NodeMismatch1 = node3.checkTreeEqualsImpl(node2);
      node_NodeMismatch1.equals(node_NodeMismatch0);
      node1.getLastSibling();
      Node.newString(54, "_Olu@sL}imc`.A#O");
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(87, "missing prop: ", 1011, 87);
      node0.getIntProp(64);
      node0.isOnlyModifiesThisCall();
      Node node1 = new Node(2, 1642, 1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node2 = new Node(51, node1, node0, node0);
      node2.srcrefTree(node0);
      node1.hasChildren();
      Node node3 = node1.getNext();
      node3.isCatch();
      node1.isIn();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(137, "missing prop: ", 1011, 137);
      int int0 = Node.LENGTH;
      node0.setIsSyntheticBlock(false);
      node0.hasChildren();
      node0.isOnlyModifiesArgumentsCall();
      node0.isTrue();
      node0.isSyntheticBlock();
      node0.isComma();
      Node node1 = new Node(64, node0, 15, 152);
      node0.addChildToBack(node1);
      Node node2 = Node.newString(111, "missing prop: ");
      node0.isSwitch();
      node0.isContinue();
      node2.isCast();
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      Node node0 = Node.newString(85, "Gg&!vX7[o", (-3038), (-3038));
      Node node1 = new Node(49, node0, node0, node0, 2, 49);
      node1.mayMutateArguments();
      node0.setVarArgs(true);
      node1.setIsSyntheticBlock(true);
      node0.children();
      node1.hasChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      node1.getChildBefore(node0);
      Node.newString(1, "Gg&!vX7[o");
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Node node0 = new Node(130);
      node0.getSideEffectFlags();
      Node node1 = new Node(130, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.mayMutateArguments();
      node1.isIf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.newString("+B{'");
      node1.isSyntheticBlock();
      Node node2 = new Node(0, (-3493), 50);
      node1.addChildBefore(node2, node0);
      node0.setDouble(37);
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      Node node0 = new Node(113);
      int int0 = Node.QUOTED_PROP;
      node0.setIsSyntheticBlock(false);
      node0.isVarArgs();
      node0.isDo();
      node0.isVoid();
      Node node1 = new Node(77, node0, node0, node0, node0, 31, 4095);
      node1.srcrefTree(node0);
      node0.getAncestors();
      Node node2 = new Node(57, 16, 57);
      node0.addChildrenToFront(node1);
      node0.isEquivalentToTyped(node1);
      node2.isArrayLit();
      node2.hasChild(node0);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      Node node0 = Node.newNumber((double) 15);
      node0.putIntProp(15, 2134);
      Node node1 = Node.newString("t`edX.@9;#<", (-2596), 42);
      Node node2 = new Node(45, node0, node0);
      node2.isThrow();
      node2.addChildrenAfter(node1, node0);
      Node node3 = Node.newString("", 46, 37);
      node3.isQualifiedName();
      node1.setSourceEncodedPositionForTree(101);
      Node node4 = Node.newString(4095, " : ", 2, 45);
      Node node5 = new Node(4, node2, node3);
      node2.useSourceInfoIfMissingFrom(node1);
      node5.isEquivalentTo(node0, false, true, true);
      Node node6 = new Node(36, node2, node4, node1);
      node5.isQualifiedName();
      node2.isDo();
      node6.cloneNode();
      node5.isFor();
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      Node node0 = Node.newString(51, "com.google.common.collect.EmptyImmutableBiMap", 51, 2);
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node((-2485), node0, node0, 48, 112);
      node0.copyInformationFrom(node1);
      Node node2 = null;
      node0.addChildToBack((Node) null);
      node0.isNew();
      node1.checkTreeEquals(node2);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xm\"u+&LIGX|U}");
      Node node0 = Node.newString(137, "missing prop: ", 1011, 137);
      int int0 = Node.LENGTH;
      Node node1 = new Node(928, 12, 52);
      Node node2 = new Node(32, 56, 15);
      node2.isQualifiedName();
      node1.setSourceEncodedPositionForTree(48);
      Node node3 = Node.newString(4095, "missing prop: ");
      node3.setQuotedString();
      node3.isCast();
      Node.NodeMismatch node_NodeMismatch0 = node3.checkTreeTypeAwareEqualsImpl(node2);
      node3.checkTreeEqualsImpl(node0);
      Node.NodeMismatch node_NodeMismatch1 = node3.checkTreeEqualsImpl(node2);
      node_NodeMismatch1.equals(node_NodeMismatch0);
      node1.getLastSibling();
      Node.newString(54, "_Olu@sL}imc`.A#O");
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      Node node0 = Node.newNumber((double) 125, 1561, 1561);
      node0.isVarArgs();
      Node node1 = new Node(125, node0, node0, node0, 16, 15);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.isOptionalArg();
      node1.srcref(node0);
      Node node2 = Node.newNumber((double) 125);
      node2.getSideEffectFlags();
      node2.isSetterDef();
      node1.hasChild(node0);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      Node node0 = new Node(113);
      node0.getIntProp(39);
      node0.hasChildren();
      node0.isDefaultCase();
      node0.isSyntheticBlock();
      node0.isComma();
      Node node1 = new Node(31, node0);
      node0.getSideEffectFlags();
      node0.isCatch();
      node0.srcref(node1);
      node1.isIf();
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), (-1877), 33);
      node0.hasOneChild();
      Node node1 = null;
      node0.addChildToFront((Node) null);
      node0.addChildrenAfter(node1, node1);
      node0.getLastChild();
      // Undeclared exception!
      try { 
        node0.getLastSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      Node node0 = new Node(130);
      node0.getSideEffectFlags();
      Node node1 = new Node(130, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.isAnd();
      Node node2 = Node.newString((-2584), "q=SuQ%VpK", 1080, 51);
      node0.cloneTree();
      node2.hasChildren();
      node2.isDelProp();
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags4.setReturnsTainted();
      Node node1 = Node.newString(42, "com.google.javascript.rhino.JSDocInfo$NamePosition", 2, 243);
      node1.getQualifiedName();
      Node node2 = new Node(39, 54, 15);
      Node node3 = new Node(2073, node0, node2, node2, node2);
      node1.isScript();
      node0.detachChildren();
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(137, "missing prop: ", 1011, 137);
      node0.getIntProp(39);
      node0.isDo();
      node0.isVoid();
      Node node1 = new Node(1437, node0, node0, node0, node0, 36, 1431);
      node1.getAncestors();
      Node node2 = new Node(29, 5219, 16);
      node1.getLength();
      node0.addChildrenToFront(node2);
      Node node3 = new Node(1137);
      node3.isEquivalentToTyped(node0);
      node1.isArrayLit();
      node3.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(77, "missing prop: ", 1011, 77);
      node0.getIntProp(130);
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node(697);
      node1.hasChildren();
      node0.isDefaultCase();
      node0.isSyntheticBlock();
      node0.isComma();
      Node node2 = Node.newString(147, "missing prop: ");
      node1.getType();
      Node node3 = node1.srcref(node0);
      node3.getSideEffectFlags();
      node2.isSetterDef();
      Node node4 = new Node(39, node1);
      node4.hasChild(node0);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(137, "missing prop: ", 1011, 137);
      int int0 = Node.LENGTH;
      node0.getIntProp(137);
      node0.isOnlyModifiesThisCall();
      node0.isGetElem();
      node0.isThis();
      node0.isSwitch();
      node0.mayMutateArguments();
      node0.getChildAtIndex(0);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.mayMutateArguments();
      node0.isIf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = Node.newString("uw");
      node0.getIntProp(37);
      node1.isNot();
      node1.isFunction();
      node1.isDec();
      node1.isScript();
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString(113, "missing prop: ");
      node0.isQualifiedName();
      node0.setString("0gk`/m5");
      Node node1 = new Node(55, node0, node0, 2, 12);
      node1.isExprResult();
      node0.isParamList();
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 2498, 2498);
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(3385);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) stringBuffer0);
      node0.appendStringTree(charBuffer1);
      node0.getAncestors();
      node0.hasMoreThanOneChild();
      String string0 = "0gk`/m5";
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      Node node0 = new Node(113);
      node0.getIntProp(39);
      node0.setIsSyntheticBlock(false);
      node0.hasChildren();
      node0.isDo();
      node0.isVoid();
      Node node1 = new Node(77, node0, node0, node0, node0, 31, 4095);
      node0.getAncestors();
      Node node2 = new Node(57, 16, 57);
      node0.addChildrenToFront(node1);
      node0.isEquivalentToTyped(node1);
      node2.isArrayLit();
      node1.isTry();
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      Node node0 = new Node(15);
      node0.putIntProp(15, 4095);
      Node node1 = Node.newString("t`edX.@9;#<", (-2596), 42);
      Node node2 = new Node(45, node0, node0);
      node1.isOnlyModifiesArgumentsCall();
      node2.addChildrenAfter(node1, node0);
      Node node3 = Node.newString("", 46, 37);
      node3.isQualifiedName();
      node1.setSourceEncodedPositionForTree(101);
      Node node4 = Node.newString(4095, "I'k", 2, 45);
      node4.addChildrenToFront(node3);
      node3.isEquivalentToTyped(node1);
      Node[] nodeArray0 = new Node[0];
      Node node5 = new Node(40, nodeArray0, 51, (-187));
      node5.isArrayLit();
      node2.hasOneChild();
      node2.isOptionalArg();
      node2.isAnd();
      node5.getChildCount();
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      Node node0 = new Node(113);
      node0.getIntProp(39);
      node0.setIsSyntheticBlock(false);
      node0.hasChildren();
      node0.isDo();
      node0.isVoid();
      node0.siblings();
      Node node1 = new Node(77, node0, node0, node0, node0, 31, 4095);
      node0.getAncestors();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isAdd();
      node2.isInstanceOf();
      node2.getExistingIntProp(77);
      int int0 = 0;
      Node.newNumber((double) node2.FLAG_NO_THROWS, int0, node1.FLAG_LOCAL_RESULTS);
      // Undeclared exception!
      try { 
        node0.getJsDocBuilderForNode();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 77
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      Node node0 = new Node(113);
      node0.getIntProp(39);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = Node.newString("Object#Key");
      Node node2 = node0.cloneTree();
      node0.hasChildren();
      node2.isDelProp();
      node0.isAdd();
      node1.isCall();
      node2.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(155, "miing prop:", 1011, 155);
      int int0 = Node.LENGTH;
      node0.setIsSyntheticBlock(false);
      node0.hasChildren();
      node0.isOnlyModifiesArgumentsCall();
      node0.isCast();
      node0.isComma();
      Node.newString(109, "miing prop:");
      node0.isName();
      node0.mayMutateArguments();
      Node.extractCharno(37);
      node0.getIntProp(3067);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)1;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags((byte)40);
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags3.setReturnsTainted();
      Node node0 = new Node(131072, 118, 123);
      Node node1 = new Node(148, node0, node0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node0);
      Node node2 = new Node(127, node1, node1, 39, 105);
      Node.NodeMismatch node_NodeMismatch1 = node1.checkTreeEqualsImpl(node2);
      node0.checkTreeEqualsImpl(node1);
      node_NodeMismatch1.equals(node2);
      Node node3 = node1.getLastSibling();
      node2.setLineno(47);
      Node node4 = Node.newString("b=~`K4", 176159, 6);
      node3.addChildrenToFront(node4);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      Node node0 = Node.newString("ASSIGN_URSH");
      node0.detachChildren();
      Node node1 = Node.newString(57, "ASSIGN_URSH", 51, 56);
      PriorityQueue<Node> priorityQueue0 = new PriorityQueue<Node>(4);
      node0.setString("ASSIGN_URSH");
      node0.getNext();
      node1.isWith();
      node1.isFromExterns();
      node1.isCase();
      node1.useSourceInfoIfMissingFrom((Node) null);
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((double) (-984), (-984), (-984));
      nodeArray0[0] = node0;
      node0.getSideEffectFlags();
      Node node1 = Node.newNumber((-1630.418));
      nodeArray0[1] = node1;
      node0.isNoSideEffectsCall();
      Node node2 = new Node((-984), nodeArray0);
      node2.isUnscopedQualifiedName();
      node2.isBlock();
      node1.getIndexOfChild(node2);
      node1.isSetterDef();
      node2.isFunction();
      node2.getSourcePosition();
      node2.removeChildren();
      node2.isCall();
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Node node0 = new Node(2034, 2034, 21);
      node0.getProp(1257);
      Node node1 = new Node(2034, node0, node0, node0, 63, 15);
      node1.isEquivalentTo(node0, false, false, true);
      Node node2 = new Node(39, 50, 2);
      Node node3 = new Node(115, node1, node0, 50, 112);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      node0.mayMutateArguments();
      node0.isIf();
      Node node1 = Node.newString(53, " ");
      node1.isEmpty();
      node0.isNumber();
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.isIf();
      Node node1 = Node.newString(30, "(N&D");
      node0.isEmpty();
      node1.isNumber();
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      Node node0 = new Node((-506), 8, 8);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{/MKDv_");
      Node node1 = Node.newString(15, "Q5*Es0");
      Node node2 = Node.newString("fJ5DKQo", (-404), 29);
      node0.getChangeTime();
      Node node3 = Node.newString("com.google.common.collect.ImmutableList$SubList");
      Node node4 = Node.newString("com.google.common.collect.ImmutableList$SubList");
      Node node5 = node0.useSourceInfoFrom(node3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node5.setType(52);
      node5.getLength();
      node0.getInputId();
      node4.srcref(node2);
      node0.getJsDocBuilderForNode();
      node2.isEmpty();
      node1.isIn();
      node3.isStringKey();
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      Node node0 = Node.newString(144, "missing prop: ", 1011, 144);
      node0.getIntProp(71);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isAssign();
      node0.setSourceEncodedPositionForTree(0);
      node0.mayMutateGlobalStateOrThrow();
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 2498, 2498);
      node0.addChildrenAfter((Node) null, (Node) null);
      node0.getAncestors();
      node0.hasMoreThanOneChild();
      // Undeclared exception!
      try { 
        node0.siblings();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      String string0 = "missing prop: ";
      Node node0 = new Node(113);
      node0.getIntProp(39);
      node0.isGetProp();
      Node node1 = Node.newString("missing prop: ", 43, 43);
      Node node2 = node0.useSourceInfoFrom(node1);
      node0.replaceChildAfter(node2, node1);
      node0.isFromExterns();
      // Undeclared exception!
      try { 
        node2.isHook();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node((-3036));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry1.getObjectElementKey();
      modificationVisitor0.caseNoObjectType();
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) templateType0, jSTypeArray0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType1 = modificationVisitor0.caseStringType();
      JSType jSType2 = modificationVisitor0.caseNullType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType1, jSType2, jSType0, jSType0, jSType2, jSType2, jSType0, jSType2, jSType1);
      FunctionType functionType0 = jSTypeRegistry2.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) immutableList0);
      jSTypeRegistry2.getObjectElementKey();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getOwnerFunction();
      modificationVisitor0.caseFunctionType(functionType0);
      node0.isNumber();
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(2263, "missing prop: ", 536870912, 536870912);
      int int0 = Node.NO_SIDE_EFFECTS;
      node0.setIsSyntheticBlock(true);
      Node node1 = new Node(0, 26, 5076);
      Node node2 = new Node((-1245), node1, node1);
      node0.useSourceInfoFromForTree(node1);
      node0.isGetterDef();
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      Node node0 = new Node(130);
      int int0 = Node.SLASH_V;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      node0.setOptionalArg(false);
      Node node1 = Node.newString(4, "synthetic", (-1367), 96);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.setCharno((-780));
      node0.isFromExterns();
      node0.siblings();
      node0.isObjectLit();
      node2.toString();
      node0.addChildrenToFront(node2);
      node1.getProp(1);
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(137, "missing prop: ", 1011, 137);
      int int0 = Node.LENGTH;
      node0.setIsSyntheticBlock(false);
      node0.hasChildren();
      Node node1 = Node.newString(37, "missing prop: ", 42, 29);
      Node node2 = new Node(40, node1, node0);
      node1.useSourceInfoFromForTree(node2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-3005));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags5.setThrows();
      node1.setSideEffectFlags(node_SideEffectFlags1);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1477, nodeArray0);
      node0.isQuotedString();
      node0.isIn();
      Node node1 = Node.newNumber((double) 36);
      Node node2 = node0.srcref(node0);
      node2.removeChildren();
      node2.getIndexOfChild(node1);
      node2.isLabelName();
      node2.getType();
      node2.removeChildAfter(node0);
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      Node node0 = new Node(64);
      Node node1 = new Node(64, node0, node0, node0);
      Node node2 = Node.newString("0gk`/m5", 372, 48);
      Node node3 = Node.newString("com.google.common.collecq.ImmutableList$SubList", 1653, 4095);
      node3.isThrow();
      node0.isWith();
      node2.checkTreeTypeAwareEqualsImpl(node3);
      node3.checkTreeEqualsImpl(node1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mssing rop: ");
      node0.getLastSibling();
      Node node4 = Node.newString(0, "Recorded bad position information\nstart-char: ");
      node4.getExistingIntProp(15);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      Node node0 = new Node(113, 1758, 1758);
      Node node1 = Node.newString(1758, "com.google.common.collect.ImmutableList$Builder");
      node0.copyInformationFrom(node1);
      node0.isAnd();
      node0.isInc();
      node0.setString("appendable");
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      Node node0 = new Node(113, 1758, 1758);
      node0.isAnd();
      node0.isName();
      int int0 = Node.DIRECT_EVAL;
      int int1 = Node.COLUMN_MASK;
      node0.isExprResult();
      node0.isLabel();
      node0.isDelProp();
      node0.isEquivalentTo(node0, false, false, false);
      Node node1 = new Node((-2195));
      node0.removeChild(node1);
      Node.extractCharno(node1.NO_SIDE_EFFECTS);
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      Node node0 = Node.newString("TYPEOF", 1788, 48);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TYPEOF");
      Node node1 = Node.newString("I*3Mn\"MmA{b $~");
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.isAdd();
      node2.getFirstChild();
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      node0.isEquivalentToTyped(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      node0.copyInformationFrom((Node) null);
      node0.isAnd();
      node0.isInc();
      String string0 = "nob8nX!";
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      node0.isSyntheticBlock();
      node0.isVar();
      Node node1 = Node.newString(30, "NO_OBJECT_TYPE", 37, 37);
      node0.copyInformationFromForTree(node1);
      node1.cloneTree();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.isAssign();
      int int0 = Node.COLUMN_BITS;
      node1.hasChildren();
      node2.isDelProp();
      node1.isInc();
      node2.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      Node node0 = new Node(130);
      int int0 = Node.SLASH_V;
      Node node1 = new Node(130, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.mayMutateArguments();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node2 = Node.newString("+B{'");
      node1.isSyntheticBlock();
      Node node3 = new Node(0, (-3493), 50);
      node2.isLabelName();
      node3.getType();
      node1.isAssign();
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      String string0 = "STRUCT";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString(45, "STRUCT", (-1512), 130);
      node0.isLocalResultCall();
      node0.getBooleanProp(2147483645);
      Node node1 = new Node(48, node0, node0);
      node0.addChildrenToFront(node1);
      node1.setChangeTime((-1654));
      Node node2 = node1.detachFromParent();
      node2.getBooleanProp(338);
      node2.srcrefTree(node0);
      node1.getIntProp(4095);
      node0.isDefaultCase();
      node1.isWith();
      Node node3 = Node.newNumber((double) 52);
      node2.getJsDocBuilderForNode();
      node2.isThis();
      node3.setVarArgs(false);
      Node node4 = node3.useSourceInfoIfMissingFromForTree(node0);
      node4.addSuppression("STRUCT");
      node4.getChangeTime();
      node3.putIntProp(130, 29);
      node1.isIn();
      node3.mayMutateGlobalStateOrThrow();
      node2.addChildrenToFront(node0);
      node2.setString(string0);
      node3.srcref(node2);
      node3.getFirstChild();
      node4.isFor();
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newNumber(29.0, 2263, 2263);
      node0.setDouble((byte)70);
      Node node1 = new Node(42);
      Node node2 = node1.cloneNode();
      node2.cloneNode();
      node0.checkTreeEquals(node1);
      int int0 = 30;
      node1.detachFromParent();
      node0.setSideEffectFlags(int0);
      node1.isDec();
      boolean boolean0 = node0.wasEmptyNode();
      boolean boolean1 = false;
      FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean0);
      boolean boolean2 = false;
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      Node node0 = new Node(2034, 2034, 21);
      node0.setIsSyntheticBlock(false);
      node0.hasChildren();
      Node node1 = Node.newNumber(46.0);
      Node node2 = Node.newString(38, "U", 50, 42);
      Node node3 = new Node(16, node2, node0);
      Node node4 = node2.useSourceInfoFromForTree(node3);
      node4.setSourceEncodedPosition(53);
      Node node5 = Node.newString("U");
      node5.isExprResult();
      node2.isName();
      node3.isDelProp();
      node4.isLabel();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      node1.addChildrenAfter(node3, (Node) null);
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      Node node0 = Node.newString("com.googHe.javascript.dhino.JSDocIfo$NamePosition");
      node0.getStaticSourceFile();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = Node.newString(1720, "Me}n=-", 0, 2887);
      node1.isTrue();
      Node node2 = new Node(27, node0, node1, node0, node1);
      node2.isQualifiedName();
      node1.isUnscopedQualifiedName();
      node1.siblings();
      node1.putIntProp(0, 45);
      node1.isEquivalentTo(node0, false, false, true);
      node2.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(115, "miing prop:", (-303), 15);
      Node node2 = new Node(32, node1, node0, node0, node0, 29, 36);
      node2.cloneTree();
      node1.hasChildren();
      Node node3 = new Node(38, node2);
      node3.isFalse();
      node1.getLineno();
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      Node node1 = new Node(36, node0, node0, node0);
      Node node2 = Node.newString("t`edX.@9;#<", 117, 0);
      Node node3 = Node.newString("[lrG6KMY*f<X!U4@^/G");
      Node node4 = node1.cloneTree();
      Node node5 = new Node(4095, node4, node4, 65535, (-1512));
      Node node6 = node4.srcref(node5);
      node3.hasChildren();
      node3.isDelProp();
      node2.isLabelName();
      node0.getType();
      node6.getParent();
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(137, "", 137, 137);
      int int0 = Node.NO_SIDE_EFFECTS;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      node0.putProp(15, "");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
      node0.detachChildren();
      node0.isDec();
      node0.getIntProp(15);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      Node node0 = new Node(113);
      node0.getIntProp(39);
      node0.setIsSyntheticBlock(false);
      node0.hasChildren();
      node0.isDo();
      node0.isVoid();
      Node node1 = new Node(77, node0, node0, node0, node0, 31, 4095);
      node0.getAncestors();
      Node node2 = new Node(57, 16, 57);
      node0.addChildrenToFront(node1);
      node0.isEquivalentToTyped(node1);
      node2.isArrayLit();
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node((-3036));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry1.getObjectElementKey();
      templateType0.dereference();
      modificationVisitor0.caseNoObjectType();
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) templateType0, jSTypeArray0);
      modificationVisitor0.caseNumberType();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node0.isHook();
      node0.isInc();
      node1.setString("a`");
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      int int0 = Node.VAR_ARGS_NAME;
      node0.setIsSyntheticBlock(false);
      Node node1 = new Node(12, 918, 57);
      Node node2 = new Node(4, node0, node0);
      Node node3 = node2.useSourceInfoFromForTree(node1);
      node3.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString(45, "STRUCT", (-1512), 129);
      node0.isLocalResultCall();
      node0.getBooleanProp((-2147483630));
      Node node1 = new Node(48, node0, node0);
      node0.addChildrenToFront(node1);
      node1.setChangeTime((-1654));
      Node node2 = node1.detachFromParent();
      node2.getBooleanProp(338);
      node2.srcrefTree(node0);
      node1.getIntProp(4095);
      node0.isDefaultCase();
      node2.isEquivalentTo(node1);
      node2.isDelProp();
      node2.isVar();
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      String string0 = "STRUCT";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString(45, "STRUCT", (-1512), 130);
      node0.isLocalResultCall();
      node0.getBooleanProp((-2147483630));
      Node node1 = new Node(48, node0, node0);
      node0.addChildrenToFront(node1);
      node1.setChangeTime((-1654));
      Node node2 = node1.detachFromParent();
      node2.getBooleanProp(338);
      node2.srcrefTree(node0);
      node1.getIntProp(4095);
      node0.isDefaultCase();
      node2.isEquivalentTo(node1);
      node1.isWith();
      Node node3 = Node.newNumber((double) 52);
      node2.getJsDocBuilderForNode();
      node2.isThis();
      node3.setVarArgs(false);
      Node node4 = node3.useSourceInfoIfMissingFromForTree(node0);
      node4.addSuppression("STRUCT");
      node4.getChangeTime();
      node3.putIntProp(130, 29);
      node1.isIn();
      node3.mayMutateGlobalStateOrThrow();
      node2.addChildrenToFront(node0);
      node3.isAnd();
      node2.setString(string0);
      node3.srcref(node2);
      node4.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node((-3036));
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = new Node(0, node0, node0, node0, 5760, (-2306));
      node1.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = Node.newNumber((double) 29, 52, 56);
      node1.isUnscopedQualifiedName();
      node1.isTrue();
      Node node2 = new Node(4095, node0, node0, node1, node0);
      node1.isQualifiedName();
      node0.isUnscopedQualifiedName();
      node0.isNot();
      node0.isNumber();
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      Node node0 = new Node(113);
      node0.getIntProp(39);
      node0.setIsSyntheticBlock(false);
      node0.hasChildren();
      node0.isDo();
      Node node1 = new Node(77, node0, node0, node0, node0, 31, 4095);
      node0.getAncestors();
      Node node2 = new Node(57, 16, 57);
      node0.addChildrenToFront(node1);
      node0.isEquivalentToTyped(node1);
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      Node node1 = new Node(16, node0, node0, node0, node0, 4095, 4);
      node0.setChangeTime(2);
      Node node2 = node0.detachFromParent();
      node1.getBooleanProp(256);
      node0.setSourceEncodedPositionForTree(56);
      Node node3 = node2.srcrefTree(node0);
      node3.getIntProp(39);
      node1.isDefaultCase();
      node0.isWith();
      Node node4 = Node.newNumber((double) 0);
      node3.getJsDocBuilderForNode();
      node3.isThis();
      node2.setVarArgs(true);
      Node node5 = node1.useSourceInfoIfMissingFromForTree(node0);
      node4.addSuppression((String) null);
      node4.getChangeTime();
      Node node6 = new Node(100, node2);
      node6.putIntProp(8, 54);
      node3.isIn();
      node5.mayMutateGlobalStateOrThrow();
      node1.isInc();
      node6.setString((String) null);
      node1.isDefaultCase();
      node4.addChildrenToFront(node2);
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      Node node0 = Node.newNumber((double) 112, (-1905), 52);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      jSTypeArray0[0] = jSType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node2 = new Node((-1905), node0, node0, node1, 0, 49);
      node2.isObjectLit();
      node1.toStringTree();
      node2.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      Node node0 = Node.newString(147, "missing prop: ");
      Node node1 = new Node(4, node0, node0);
      node0.addChildrenToFront(node1);
      node0.setChangeTime(1762);
      Node node2 = node0.detachFromParent();
      node1.getBooleanProp(54);
      Node node3 = node0.srcrefTree(node2);
      Node node4 = node3.removeChildren();
      node1.getIntProp(338);
      node3.isDefaultCase();
      node2.isEquivalentTo(node1);
      node2.isDelProp();
      node2.isVar();
      node0.isUnscopedQualifiedName();
      node4.isFunction();
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      Node node0 = Node.newNumber(1700.04, 327, (-7));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      JSType[] jSTypeArray0 = new JSType[8];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      JSType jSType1 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[6] = jSType1;
      jSTypeArray0[7] = jSType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node2 = new Node(31, node1, node1, node1, 30, 153);
      JSType[] jSTypeArray1 = new JSType[4];
      jSTypeArray1[0] = jSType0;
      jSTypeArray1[1] = jSType0;
      jSTypeArray1[2] = jSType0;
      jSTypeArray1[3] = jSType0;
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray1);
      Node node4 = new Node(46, node0, node3, 29, 42);
      node1.isFalse();
      node4.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      Node node0 = Node.newNumber((double) 15);
      node0.putIntProp((-1), 2134);
      node0.getProp((-1));
      node0.toString();
      boolean boolean0 = true;
      JSDocInfo jSDocInfo0 = null;
      try {
        jSDocInfo0 = new JSDocInfo(boolean0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$IntPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, (-170));
      node0.getDouble();
      node0.isVarArgs();
      node0.setLength((-170));
      Node node1 = new Node(105, node0, node0, 30, (-2900));
      node1.isGetElem();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.useSourceInfoIfMissingFromForTree(node0);
      node2.isCatch();
      node0.getType();
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      Node node0 = new Node(51, 51, 51);
      Node node1 = Node.newNumber((double) 57, 4095, 0);
      node1.checkTreeEqualsImpl(node0);
      node1.setType(51);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      node0.putProp((-618), locale_Category0);
      Node node2 = new Node(12, node0, node1, node1);
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      Node node0 = new Node(113);
      node0.getIntProp(39);
      node0.setIsSyntheticBlock(false);
      node0.hasChildren();
      node0.isDo();
      node0.isVoid();
      Node node1 = new Node(77, node0, node0, node0, node0, 31, 4095);
      node0.getAncestors();
      Node node2 = new Node(57, 16, 57);
      node0.addChildrenToFront(node1);
      node0.isEquivalentToTyped((Node) null);
      node2.isArrayLit();
      String string0 = "NO_OBJECT_TYPE";
      Node node3 = Node.newString(string0);
      node3.addChildrenToFront(node2);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      node0.mayMutateArguments();
      node0.isIf();
      Node node1 = node0.cloneTree();
      node0.hasChildren();
      node1.isDelProp();
      node1.isIf();
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      node0.isVar();
      Node node1 = Node.newString(35, "R&@QU3<\"m9[d~]&");
      node0.detachChildren();
      node1.isUnscopedQualifiedName();
      Node node2 = new Node(57, node0, node1, node1, node1);
      node2.isQualifiedName();
      node2.isEmpty();
      node1.isDelProp();
      node0.isVar();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      Node node0 = new Node(124);
      node0.isVar();
      Node.newString(124, "+1|mr.Mhu.KhPP!");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node1 = Node.newString("b@|P 1");
      node0.cloneTree();
      node1.hasChildren();
      Node node2 = new Node(54, node0, 50, (-1759));
      node2.isDelProp();
      node2.isLabelName();
      node1.getType();
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      Node node0 = new Node(113);
      int int0 = Node.POST_FLAG;
      Node node1 = Node.newString(36, "'L8C\"^|[)", 1048576, 85);
      node0.getIntProp(1);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      node0.isHook();
      node1.isInc();
      node2.isDelProp();
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      Node node0 = Node.newString(137, "missing prop: ", 137, 137);
      node0.hasChildren();
      Node node1 = new Node(40, node0, node0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.isExprResult();
      node0.isName();
      node0.isDelProp();
      node0.isLabel();
      node2.getParent();
  }
}
