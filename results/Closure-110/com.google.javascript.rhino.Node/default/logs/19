* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 16256
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 1234375865
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:29:40.292 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:29:47.039 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:33:01.139 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 10:39:37.819 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 605s and 553 generations, 233060 statements, best individual has fitness: 2860.0
* Minimizing test suite
[MASTER] 10:41:08.036 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 92%
* Total number of goals: 853
* Number of covered goals: 789
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 86%
* Total number of goals: 714
* Number of covered goals: 612
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 103
* Number of covered goals: 103
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 530
* Number of covered goals: 468
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 49%
* Total number of goals: 4536
* Number of covered goals: 2214
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 211
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 80%
* Total number of goals: 714
* Number of covered goals: 574
* Generated 1025 tests with total length 10036
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:42:25.708 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7835166666666666% of time used, but only 89/1025 tests minimized), falling back to using all assertions
[MASTER] 10:42:38.952 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 19%
* Compiling and checking tests
[MASTER] 10:42:51.457 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 12 seconds more than allowed.
[MASTER] 10:43:03.503 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_188_1628160183314/com/google/javascript/rhino/Node_188_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_188_1628160183314/com/google/javascript/rhino/Node_188_tmp__ESTest_scaffolding.java]]
[MASTER] 10:43:03.503 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:03.503 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:43:03.506 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 232
[MASTER] 10:43:03.508 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_188_1628160183314/com/google/javascript/rhino/Node_188_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:43:03 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import java.util.Stack;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_188_tmp__ESTest extends Node_188_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber((double) 48, 48, 48);
22:       assertFalse(node0.isDelProp());
23:       assertFalse(node0.isEmpty());
24:       assertFalse(node0.isGetterDef());
25:       assertFalse(node0.isFor());
26:       assertFalse(node0.isIf());
27:       assertFalse(node0.isArrayLit());
28:       assertFalse(node0.isIn());
29:       assertFalse(node0.isNE());
30:       assertFalse(node0.isTrue());
31:       assertFalse(node0.isDebugger());
32:       assertFalse(node0.isDefaultCase());
33:       assertFalse(node0.isInc());
34:       assertFalse(node0.isSwitch());
35:       assertEquals(48, node0.getCharno());
36:       assertFalse(node0.isFunction());
37:       assertEquals(0, node0.getChildCount());
38:       assertFalse(node0.isName());
39:       assertFalse(node0.isFalse());
40:       assertFalse(node0.isCall());
41:       assertFalse(node0.isGetProp());
42:       assertFalse(node0.isBreak());
43:       assertFalse(node0.isAdd());
44:       assertFalse(node0.isObjectLit());
45:       assertFalse(node0.isNull());
46:       assertFalse(node0.isNot());
47:       assertFalse(node0.isString());
48:       assertFalse(node0.isWhile());
49:       assertFalse(node0.isExprResult());
50:       assertFalse(node0.isVoid());
51:       assertFalse(node0.isReturn());
52:       assertTrue(node0.isNumber());
53:       assertFalse(node0.isComma());
54:       assertFalse(node0.isTypeOf());
55:       assertFalse(node0.hasChildren());
56:       assertFalse(node0.isDec());
57:       assertFalse(node0.isAssign());
58:       assertFalse(node0.isLabelName());
59:       assertFalse(node0.isCast());
60:       assertFalse(node0.isGetElem());
61:       assertFalse(node0.hasOneChild());
62:       assertFalse(node0.isOr());
63:       assertFalse(node0.isDo());
64:       assertFalse(node0.isAnd());
65:       assertFalse(node0.isContinue());
66:       assertFalse(node0.isNew());
67:       assertFalse(node0.isAssignAdd());
68:       assertFalse(node0.isVar());
69:       assertFalse(node0.isLabel());
70:       assertFalse(node0.isThrow());
71:       assertFalse(node0.isStringKey());
72:       assertFalse(node0.isSetterDef());
73:       assertFalse(node0.isParamList());
74:       assertEquals(39, node0.getType());
75:       assertFalse(node0.isWith());
76:       assertFalse(node0.isCatch());
77:       assertFalse(node0.isScript());
78:       assertEquals(48, node0.getLineno());
79:       assertFalse(node0.isCase());
80:       assertFalse(node0.isBlock());
81:       assertFalse(node0.isTry());
82:       assertFalse(node0.isInstanceOf());
83:       assertEquals(196656, node0.getSourcePosition());
84:       assertFalse(node0.isThis());
85:       assertFalse(node0.hasMoreThanOneChild());
86:       assertFalse(node0.isRegExp());
87:       assertFalse(node0.isHook());
88:       assertNotNull(node0);
89:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
90:       assertEquals(53, Node.INPUT_ID);
91:       assertEquals(43, Node.IS_CONSTANT_NAME);
92:       assertEquals(47, Node.IS_DISPATCHER);
93:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
94:       assertEquals(4095, Node.COLUMN_MASK);
95:       assertEquals(2, Node.POST_FLAG);
96:       assertEquals(48, Node.DIRECTIVES);
97:       assertEquals(37, Node.OPT_ARG_NAME);
98:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
99:       assertEquals(39, Node.EMPTY_BLOCK);
100:       assertEquals(56, Node.CHANGE_TIME);
101:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
102:       assertEquals(55, Node.INFERRED_FUNCTION);
103:       assertEquals(29, Node.JSDOC_INFO_PROP);
104:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
105:       assertEquals(57, Node.REFLECTED_OBJECT);
106:       assertEquals(36, Node.QUOTED_PROP);
107:       assertEquals(52, Node.LENGTH);
108:       assertEquals(8, Node.FLAG_NO_THROWS);
109:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
110:       assertEquals(54, Node.SLASH_V);
111:       assertEquals(15, Node.NO_SIDE_EFFECTS);
112:       assertEquals(57, Node.LAST_PROP);
113:       assertEquals(49, Node.DIRECT_EVAL);
114:       assertEquals(40, Node.ORIGINALNAME_PROP);
115:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
116:       assertEquals(12, Node.COLUMN_BITS);
117:       assertEquals(30, Node.VAR_ARGS_NAME);
118:       assertEquals(46, Node.IS_NAMESPACE);
119:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
120:       assertEquals(32, Node.INCRDECR_PROP);
121:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
122:       assertEquals(1, Node.DECR_FLAG);
123:       assertEquals(51, Node.STATIC_SOURCE_FILE);
124:       assertEquals(50, Node.FREE_CALL);
125:       
126:       boolean boolean0 = node0.isWhile();
127:       assertFalse(node0.isDelProp());
128:       assertFalse(node0.isEmpty());
129:       assertFalse(node0.isGetterDef());
130:       assertFalse(node0.isFor());
131:       assertFalse(node0.isIf());
132:       assertFalse(node0.isArrayLit());
133:       assertFalse(node0.isIn());
134:       assertFalse(node0.isNE());
135:       assertFalse(node0.isTrue());
136:       assertFalse(node0.isDebugger());
137:       assertFalse(node0.isDefaultCase());
138:       assertFalse(node0.isInc());
139:       assertFalse(node0.isSwitch());
140:       assertEquals(48, node0.getCharno());
141:       assertFalse(node0.isFunction());
142:       assertEquals(0, node0.getChildCount());
143:       assertFalse(node0.isName());
144:       assertFalse(node0.isFalse());
145:       assertFalse(node0.isCall());
146:       assertFalse(node0.isGetProp());
147:       assertFalse(node0.isBreak());
148:       assertFalse(node0.isAdd());
149:       assertFalse(node0.isObjectLit());
150:       assertFalse(node0.isNull());
151:       assertFalse(node0.isNot());
152:       assertFalse(node0.isString());
153:       assertFalse(node0.isWhile());
154:       assertFalse(node0.isExprResult());
155:       assertFalse(node0.isVoid());
156:       assertFalse(node0.isReturn());
157:       assertTrue(node0.isNumber());
158:       assertFalse(node0.isComma());
159:       assertFalse(node0.isTypeOf());
160:       assertFalse(node0.hasChildren());
161:       assertFalse(node0.isDec());
162:       assertFalse(node0.isAssign());
163:       assertFalse(node0.isLabelName());
164:       assertFalse(node0.isCast());
165:       assertFalse(node0.isGetElem());
166:       assertFalse(node0.hasOneChild());
167:       assertFalse(node0.isOr());
168:       assertFalse(node0.isDo());
169:       assertFalse(node0.isAnd());
170:       assertFalse(node0.isContinue());
171:       assertFalse(node0.isNew());
172:       assertFalse(node0.isAssignAdd());
173:       assertFalse(node0.isVar());
174:       assertFalse(node0.isLabel());
175:       assertFalse(node0.isThrow());
176:       assertFalse(node0.isStringKey());
177:       assertFalse(node0.isSetterDef());
178:       assertFalse(node0.isParamList());
179:       assertEquals(39, node0.getType());
180:       assertFalse(node0.isWith());
181:       assertFalse(node0.isCatch());
182:       assertFalse(node0.isScript());
183:       assertEquals(48, node0.getLineno());
184:       assertFalse(node0.isCase());
185:       assertFalse(node0.isBlock());
186:       assertFalse(node0.isTry());
187:       assertFalse(node0.isInstanceOf());
188:       assertEquals(196656, node0.getSourcePosition());
189:       assertFalse(node0.isThis());
190:       assertFalse(node0.hasMoreThanOneChild());
191:       assertFalse(node0.isRegExp());
192:       assertFalse(node0.isHook());
193:       assertFalse(boolean0);
194:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
195:       assertEquals(53, Node.INPUT_ID);
196:       assertEquals(43, Node.IS_CONSTANT_NAME);
197:       assertEquals(47, Node.IS_DISPATCHER);
198:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
199:       assertEquals(4095, Node.COLUMN_MASK);
200:       assertEquals(2, Node.POST_FLAG);
201:       assertEquals(48, Node.DIRECTIVES);
202:       assertEquals(37, Node.OPT_ARG_NAME);
203:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
204:       assertEquals(39, Node.EMPTY_BLOCK);
205:       assertEquals(56, Node.CHANGE_TIME);
206:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
207:       assertEquals(55, Node.INFERRED_FUNCTION);
208:       assertEquals(29, Node.JSDOC_INFO_PROP);
209:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
210:       assertEquals(57, Node.REFLECTED_OBJECT);
211:       assertEquals(36, Node.QUOTED_PROP);
212:       assertEquals(52, Node.LENGTH);
213:       assertEquals(8, Node.FLAG_NO_THROWS);
214:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
215:       assertEquals(54, Node.SLASH_V);
216:       assertEquals(15, Node.NO_SIDE_EFFECTS);
217:       assertEquals(57, Node.LAST_PROP);
218:       assertEquals(49, Node.DIRECT_EVAL);
219:       assertEquals(40, Node.ORIGINALNAME_PROP);
220:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
221:       assertEquals(12, Node.COLUMN_BITS);
222:       assertEquals(30, Node.VAR_ARGS_NAME);
223:       assertEquals(46, Node.IS_NAMESPACE);
224:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
225:       assertEquals(32, Node.INCRDECR_PROP);
226:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
227:       assertEquals(1, Node.DECR_FLAG);
228:       assertEquals(51, Node.STATIC_SOURCE_FILE);
229:       assertEquals(50, Node.FREE_CALL);
230:       
231:       Iterable<Node> iterable0 = new Stack<Node>();
232:       assertFalse(iterable0.contains(node0));
233:       assertNotNull(iterable0);
234:       
235:       boolean boolean1 = node0.isUnscopedQualifiedName();
236:       assertFalse(node0.isDelProp());
237:       assertFalse(node0.isEmpty());
238:       assertFalse(node0.isGetterDef());
239:       assertFalse(node0.isFor());
240:       assertFalse(node0.isIf());
241:       assertFalse(node0.isArrayLit());
242:       assertFalse(node0.isIn());
243:       assertFalse(node0.isNE());
244:       assertFalse(node0.isTrue());
245:       assertFalse(node0.isDebugger());
246:       assertFalse(node0.isDefaultCase());
247:       assertFalse(node0.isInc());
248:       assertFalse(node0.isSwitch());
249:       assertEquals(48, node0.getCharno());
250:       assertFalse(node0.isFunction());
251:       assertEquals(0, node0.getChildCount());
252:       assertFalse(node0.isName());
253:       assertFalse(node0.isFalse());
254:       assertFalse(node0.isCall());
255:       assertFalse(node0.isGetProp());
256:       assertFalse(node0.isBreak());
257:       assertFalse(node0.isAdd());
258:       assertFalse(node0.isObjectLit());
259:       assertFalse(node0.isNull());
260:       assertFalse(node0.isNot());
261:       assertFalse(node0.isString());
262:       assertFalse(node0.isWhile());
263:       assertFalse(node0.isExprResult());
264:       assertFalse(node0.isVoid());
265:       assertFalse(node0.isReturn());
266:       assertTrue(node0.isNumber());
267:       assertFalse(node0.isComma());
268:       assertFalse(node0.isTypeOf());
269:       assertFalse(node0.hasChildren());
270:       assertFalse(node0.isDec());
271:       assertFalse(node0.isAssign());
272:       assertFalse(node0.isLabelName());
273:       assertFalse(node0.isCast());
274:       assertFalse(node0.isGetElem());
275:       assertFalse(node0.hasOneChild());
276:       assertFalse(node0.isOr());
277:       assertFalse(node0.isDo());
278:       assertFalse(node0.isAnd());
279:       assertFalse(node0.isContinue());
280:       assertFalse(node0.isNew());
281:       assertFalse(node0.isAssignAdd());
282:       assertFalse(node0.isVar());
283:       assertFalse(node0.isLabel());
284:       assertFalse(node0.isThrow());
285:       assertFalse(node0.isStringKey());
286:       assertFalse(node0.isSetterDef());
287:       assertFalse(node0.isParamList());
288:       assertEquals(39, node0.getType());
289:       assertFalse(node0.isWith());
290:       assertFalse(node0.isCatch());
291:       assertFalse(node0.isScript());
292:       assertEquals(48, node0.getLineno());
293:       assertFalse(node0.isCase());
294:       assertFalse(node0.isBlock());
295:       assertFalse(node0.isTry());
296:       assertFalse(node0.isInstanceOf());
297:       assertEquals(196656, node0.getSourcePosition());
298:       assertFalse(node0.isThis());
299:       assertFalse(node0.hasMoreThanOneChild());
300:       assertFalse(node0.isRegExp());
301:       assertFalse(node0.isHook());
302:       assertTrue(boolean1 == boolean0);
303:       assertFalse(boolean1);
304:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
305:       assertEquals(53, Node.INPUT_ID);
306:       assertEquals(43, Node.IS_CONSTANT_NAME);
307:       assertEquals(47, Node.IS_DISPATCHER);
308:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
309:       assertEquals(4095, Node.COLUMN_MASK);
310:       assertEquals(2, Node.POST_FLAG);
311:       assertEquals(48, Node.DIRECTIVES);
312:       assertEquals(37, Node.OPT_ARG_NAME);
313:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
314:       assertEquals(39, Node.EMPTY_BLOCK);
315:       assertEquals(56, Node.CHANGE_TIME);
316:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
317:       assertEquals(55, Node.INFERRED_FUNCTION);
318:       assertEquals(29, Node.JSDOC_INFO_PROP);
319:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
320:       assertEquals(57, Node.REFLECTED_OBJECT);
321:       assertEquals(36, Node.QUOTED_PROP);
322:       assertEquals(52, Node.LENGTH);
323:       assertEquals(8, Node.FLAG_NO_THROWS);
324:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
325:       assertEquals(54, Node.SLASH_V);
326:       assertEquals(15, Node.NO_SIDE_EFFECTS);
327:       assertEquals(57, Node.LAST_PROP);
328:       assertEquals(49, Node.DIRECT_EVAL);
329:       assertEquals(40, Node.ORIGINALNAME_PROP);
330:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
331:       assertEquals(12, Node.COLUMN_BITS);
332:       assertEquals(30, Node.VAR_ARGS_NAME);
333:       assertEquals(46, Node.IS_NAMESPACE);
334:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
335:       assertEquals(32, Node.INCRDECR_PROP);
336:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
337:       assertEquals(1, Node.DECR_FLAG);
338:       assertEquals(51, Node.STATIC_SOURCE_FILE);
339:       assertEquals(50, Node.FREE_CALL);
340:       
341:       Node node1 = Node.newNumber((-94.27));
342:       assertNotSame(node1, node0);
343:       assertFalse(node1.isContinue());
344:       assertFalse(node1.hasMoreThanOneChild());
345:       assertFalse(node1.isDo());
346:       assertEquals((-1), node1.getLineno());
347:       assertEquals((-1), node1.getSourcePosition());
348:       assertFalse(node1.isOr());
349:       assertFalse(node1.hasOneChild());
350:       assertFalse(node1.isName());
351:       assertFalse(node1.isExprResult());
352:       assertFalse(node1.isGetElem());
353:       assertFalse(node1.isCall());
354:       assertFalse(node1.isTypeOf());
355:       assertFalse(node1.isDec());
356:       assertFalse(node1.isWith());
357:       assertFalse(node1.isAssign());
358:       assertEquals(39, node1.getType());
359:       assertFalse(node1.isWhile());
360:       assertFalse(node1.hasChildren());
361:       assertFalse(node1.isReturn());
362:       assertFalse(node1.isBlock());
363:       assertFalse(node1.isCatch());
364:       assertFalse(node1.isInstanceOf());
365:       assertFalse(node1.isAnd());
366:       assertFalse(node1.isObjectLit());
367:       assertFalse(node1.isGetProp());
368:       assertFalse(node1.isSetterDef());
369:       assertFalse(node1.isNot());
370:       assertFalse(node1.isDebugger());
371:       assertFalse(node1.isCast());
372:       assertFalse(node1.isFalse());
373:       assertFalse(node1.isInc());
374:       assertFalse(node1.isFunction());
375:       assertFalse(node1.isThrow());
376:       assertFalse(node1.isIn());
377:       assertFalse(node1.isString());
378:       assertTrue(node1.isNumber());
379:       assertFalse(node1.isCase());
380:       assertFalse(node1.isNE());
381:       assertFalse(node1.isDelProp());
382:       assertFalse(node1.isGetterDef());
383:       assertFalse(node1.isIf());
384:       assertFalse(node1.isSwitch());
385:       assertEquals((-1), node1.getCharno());
386:       assertFalse(node1.isTry());
387:       assertFalse(node1.isBreak());
388:       assertFalse(node1.isRegExp());
389:       assertFalse(node1.isComma());
390:       assertFalse(node1.isFor());
391:       assertFalse(node1.isHook());
392:       assertFalse(node1.isThis());
393:       assertEquals(0, node1.getChildCount());
394:       assertFalse(node1.isNull());
395:       assertFalse(node1.isScript());
396:       assertFalse(node1.isParamList());
397:       assertFalse(node1.isVoid());
398:       assertFalse(node1.isStringKey());
399:       assertFalse(node1.isTrue());
400:       assertFalse(node1.isVar());
401:       assertFalse(node1.isArrayLit());
402:       assertFalse(node1.isEmpty());
403:       assertFalse(node1.isAdd());
404:       assertFalse(node1.isLabelName());
405:       assertFalse(node1.isNew());
406:       assertFalse(node1.isDefaultCase());
407:       assertFalse(node1.isLabel());
408:       assertFalse(node1.isAssignAdd());
409:       assertFalse(node1.equals((Object)node0));
410:       assertNotNull(node1);
411:       assertEquals(47, Node.IS_DISPATCHER);
412:       assertEquals(29, Node.JSDOC_INFO_PROP);
413:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
414:       assertEquals(56, Node.CHANGE_TIME);
415:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
416:       assertEquals(37, Node.OPT_ARG_NAME);
417:       assertEquals(32, Node.INCRDECR_PROP);
418:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
419:       assertEquals(12, Node.COLUMN_BITS);
420:       assertEquals(2, Node.POST_FLAG);
421:       assertEquals(30, Node.VAR_ARGS_NAME);
422:       assertEquals(43, Node.IS_CONSTANT_NAME);
423:       assertEquals(1, Node.DECR_FLAG);
424:       assertEquals(46, Node.IS_NAMESPACE);
425:       assertEquals(54, Node.SLASH_V);
426:       assertEquals(50, Node.FREE_CALL);
427:       assertEquals(51, Node.STATIC_SOURCE_FILE);
428:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
429:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
430:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
431:       assertEquals(48, Node.DIRECTIVES);
432:       assertEquals(40, Node.ORIGINALNAME_PROP);
433:       assertEquals(39, Node.EMPTY_BLOCK);
434:       assertEquals(4095, Node.COLUMN_MASK);
435:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
436:       assertEquals(57, Node.LAST_PROP);
437:       assertEquals(15, Node.NO_SIDE_EFFECTS);
438:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
439:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
440:       assertEquals(53, Node.INPUT_ID);
441:       assertEquals(49, Node.DIRECT_EVAL);
442:       assertEquals(52, Node.LENGTH);
443:       assertEquals(57, Node.REFLECTED_OBJECT);
444:       assertEquals(55, Node.INFERRED_FUNCTION);
445:       assertEquals(8, Node.FLAG_NO_THROWS);
446:       assertEquals(36, Node.QUOTED_PROP);
447:       
448:       boolean boolean2 = node1.isEquivalentTo(node0);
449:       assertNotSame(node0, node1);
450:       assertNotSame(node1, node0);
451:       assertFalse(node0.isDelProp());
452:       assertFalse(node0.isEmpty());
453:       assertFalse(node0.isGetterDef());
454:       assertFalse(node0.isFor());
455:       assertFalse(node0.isIf());
456:       assertFalse(node0.isArrayLit());
457:       assertFalse(node0.isIn());
458:       assertFalse(node0.isNE());
459:       assertFalse(node0.isTrue());
460:       assertFalse(node0.isDebugger());
461:       assertFalse(node0.isDefaultCase());
462:       assertFalse(node0.isInc());
463:       assertFalse(node0.isSwitch());
464:       assertEquals(48, node0.getCharno());
465:       assertFalse(node0.isFunction());
466:       assertEquals(0, node0.getChildCount());
467:       assertFalse(node0.isName());
468:       assertFalse(node0.isFalse());
469:       assertFalse(node0.isCall());
470:       assertFalse(node0.isGetProp());
471:       assertFalse(node0.isBreak());
472:       assertFalse(node0.isAdd());
473:       assertFalse(node0.isObjectLit());
474:       assertFalse(node0.isNull());
475:       assertFalse(node0.isNot());
476:       assertFalse(node0.isString());
477:       assertFalse(node0.isWhile());
478:       assertFalse(node0.isExprResult());
479:       assertFalse(node0.isVoid());
480:       assertFalse(node0.isReturn());
481:       assertTrue(node0.isNumber());
482:       assertFalse(node0.isComma());
483:       assertFalse(node0.isTypeOf());
484:       assertFalse(node0.hasChildren());
485:       assertFalse(node0.isDec());
486:       assertFalse(node0.isAssign());
487:       assertFalse(node0.isLabelName());
488:       assertFalse(node0.isCast());
489:       assertFalse(node0.isGetElem());
490:       assertFalse(node0.hasOneChild());
491:       assertFalse(node0.isOr());
492:       assertFalse(node0.isDo());
493:       assertFalse(node0.isAnd());
494:       assertFalse(node0.isContinue());
495:       assertFalse(node0.isNew());
496:       assertFalse(node0.isAssignAdd());
497:       assertFalse(node0.isVar());
498:       assertFalse(node0.isLabel());
499:       assertFalse(node0.isThrow());
500:       assertFalse(node0.isStringKey());
501:       assertFalse(node0.isSetterDef());
502:       assertFalse(node0.isParamList());
503:       assertEquals(39, node0.getType());
504:       assertFalse(node0.isWith());
505:       assertFalse(node0.isCatch());
506:       assertFalse(node0.isScript());
507:       assertEquals(48, node0.getLineno());
508:       assertFalse(node0.isCase());
509:       assertFalse(node0.isBlock());
510:       assertFalse(node0.isTry());
511:       assertFalse(node0.isInstanceOf());
512:       assertEquals(196656, node0.getSourcePosition());
513:       assertFalse(node0.isThis());
514:       assertFalse(node0.hasMoreThanOneChild());
515:       assertFalse(node0.isRegExp());
516:       assertFalse(node0.isHook());
517:       assertFalse(node1.isContinue());
518:       assertFalse(node1.hasMoreThanOneChild());
519:       assertFalse(node1.isDo());
520:       assertEquals((-1), node1.getLineno());
521:       assertEquals((-1), node1.getSourcePosition());
522:       assertFalse(node1.isOr());
523:       assertFalse(node1.hasOneChild());
524:       assertFalse(node1.isName());
525:       assertFalse(node1.isExprResult());
526:       assertFalse(node1.isGetElem());
527:       assertFalse(node1.isCall());
528:       assertFalse(node1.isTypeOf());
529:       assertFalse(node1.isDec());
530:       assertFalse(node1.isWith());
531:       assertFalse(node1.isAssign());
532:       assertEquals(39, node1.getType());
533:       assertFalse(node1.isWhile());
534:       assertFalse(node1.hasChildren());
535:       assertFalse(node1.isReturn());
536:       assertFalse(node1.isBlock());
537:       assertFalse(node1.isCatch());
538:       assertFalse(node1.isInstanceOf());
539:       assertFalse(node1.isAnd());
540:       assertFalse(node1.isObjectLit());
541:       assertFalse(node1.isGetProp());
542:       assertFalse(node1.isSetterDef());
543:       assertFalse(node1.isNot());
544:       assertFalse(node1.isDebugger());
545:       assertFalse(node1.isCast());
546:       assertFalse(node1.isFalse());
547:       assertFalse(node1.isInc());
548:       assertFalse(node1.isFunction());
549:       assertFalse(node1.isThrow());
550:       assertFalse(node1.isIn());
551:       assertFalse(node1.isString());
552:       assertTrue(node1.isNumber());
553:       assertFalse(node1.isCase());
554:       assertFalse(node1.isNE());
555:       assertFalse(node1.isDelProp());
556:       assertFalse(node1.isGetterDef());
557:       assertFalse(node1.isIf());
558:       assertFalse(node1.isSwitch());
559:       assertEquals((-1), node1.getCharno());
560:       assertFalse(node1.isTry());
561:       assertFalse(node1.isBreak());
562:       assertFalse(node1.isRegExp());
563:       assertFalse(node1.isComma());
564:       assertFalse(node1.isFor());
565:       assertFalse(node1.isHook());
566:       assertFalse(node1.isThis());
567:       assertEquals(0, node1.getChildCount());
568:       assertFalse(node1.isNull());
569:       assertFalse(node1.isScript());
570:       assertFalse(node1.isParamList());
571:       assertFalse(node1.isVoid());
572:       assertFalse(node1.isStringKey());
573:       assertFalse(node1.isTrue());
574:       assertFalse(node1.isVar());
575:       assertFalse(node1.isArrayLit());
576:       assertFalse(node1.isEmpty());
577:       assertFalse(node1.isAdd());
578:       assertFalse(node1.isLabelName());
579:       assertFalse(node1.isNew());
580:       assertFalse(node1.isDefaultCase());
581:       assertFalse(node1.isLabel());
582:       assertFalse(node1.isAssignAdd());
583:       assertFalse(node0.equals((Object)node1));
584:       assertFalse(node1.equals((Object)node0));
585:       assertTrue(boolean2 == boolean1);
586:       assertTrue(boolean2 == boolean0);
587:       assertFalse(boolean2);
588:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
589:       assertEquals(53, Node.INPUT_ID);
590:       assertEquals(43, Node.IS_CONSTANT_NAME);
591:       assertEquals(47, Node.IS_DISPATCHER);
592:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
593:       assertEquals(4095, Node.COLUMN_MASK);
594:       assertEquals(2, Node.POST_FLAG);
595:       assertEquals(48, Node.DIRECTIVES);
596:       assertEquals(37, Node.OPT_ARG_NAME);
597:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
598:       assertEquals(39, Node.EMPTY_BLOCK);
599:       assertEquals(56, Node.CHANGE_TIME);
600:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
601:       assertEquals(55, Node.INFERRED_FUNCTION);
602:       assertEquals(29, Node.JSDOC_INFO_PROP);
603:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
604:       assertEquals(57, Node.REFLECTED_OBJECT);
605:       assertEquals(36, Node.QUOTED_PROP);
606:       assertEquals(52, Node.LENGTH);
607:       assertEquals(8, Node.FLAG_NO_THROWS);
608:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
609:       assertEquals(54, Node.SLASH_V);
610:       assertEquals(15, Node.NO_SIDE_EFFECTS);
611:       assertEquals(57, Node.LAST_PROP);
612:       assertEquals(49, Node.DIRECT_EVAL);
613:       assertEquals(40, Node.ORIGINALNAME_PROP);
614:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
615:       assertEquals(12, Node.COLUMN_BITS);
616:       assertEquals(30, Node.VAR_ARGS_NAME);
617:       assertEquals(46, Node.IS_NAMESPACE);
618:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
619:       assertEquals(32, Node.INCRDECR_PROP);
620:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
621:       assertEquals(1, Node.DECR_FLAG);
622:       assertEquals(51, Node.STATIC_SOURCE_FILE);
623:       assertEquals(50, Node.FREE_CALL);
624:       assertEquals(47, Node.IS_DISPATCHER);
625:       assertEquals(29, Node.JSDOC_INFO_PROP);
626:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
627:       assertEquals(56, Node.CHANGE_TIME);
628:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
629:       assertEquals(37, Node.OPT_ARG_NAME);
630:       assertEquals(32, Node.INCRDECR_PROP);
631:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
632:       assertEquals(12, Node.COLUMN_BITS);
633:       assertEquals(2, Node.POST_FLAG);
634:       assertEquals(30, Node.VAR_ARGS_NAME);
635:       assertEquals(43, Node.IS_CONSTANT_NAME);
636:       assertEquals(1, Node.DECR_FLAG);
637:       assertEquals(46, Node.IS_NAMESPACE);
638:       assertEquals(54, Node.SLASH_V);
639:       assertEquals(50, Node.FREE_CALL);
640:       assertEquals(51, Node.STATIC_SOURCE_FILE);
641:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
642:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
643:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
644:       assertEquals(48, Node.DIRECTIVES);
645:       assertEquals(40, Node.ORIGINALNAME_PROP);
646:       assertEquals(39, Node.EMPTY_BLOCK);
647:       assertEquals(4095, Node.COLUMN_MASK);
648:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
649:       assertEquals(57, Node.LAST_PROP);
650:       assertEquals(15, Node.NO_SIDE_EFFECTS);
651:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
652:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
653:       assertEquals(53, Node.INPUT_ID);
654:       assertEquals(49, Node.DIRECT_EVAL);
655:       assertEquals(52, Node.LENGTH);
656:       assertEquals(57, Node.REFLECTED_OBJECT);
657:       assertEquals(55, Node.INFERRED_FUNCTION);
658:       assertEquals(8, Node.FLAG_NO_THROWS);
659:       assertEquals(36, Node.QUOTED_PROP);
660:       
661:       boolean boolean3 = node1.isNoSideEffectsCall();
662:       assertNotSame(node1, node0);
663:       assertFalse(node1.isContinue());
664:       assertFalse(node1.hasMoreThanOneChild());
665:       assertFalse(node1.isDo());
666:       assertEquals((-1), node1.getLineno());
667:       assertEquals((-1), node1.getSourcePosition());
668:       assertFalse(node1.isOr());
669:       assertFalse(node1.hasOneChild());
670:       assertFalse(node1.isName());
671:       assertFalse(node1.isExprResult());
672:       assertFalse(node1.isGetElem());
673:       assertFalse(node1.isCall());
674:       assertFalse(node1.isTypeOf());
675:       assertFalse(node1.isDec());
676:       assertFalse(node1.isWith());
677:       assertFalse(node1.isAssign());
678:       assertEquals(39, node1.getType());
679:       assertFalse(node1.isWhile());
680:       assertFalse(node1.hasChildren());
681:       assertFalse(node1.isReturn());
682:       assertFalse(node1.isBlock());
683:       assertFalse(node1.isCatch());
684:       assertFalse(node1.isInstanceOf());
685:       assertFalse(node1.isAnd());
686:       assertFalse(node1.isObjectLit());
687:       assertFalse(node1.isGetProp());
688:       assertFalse(node1.isSetterDef());
689:       assertFalse(node1.isNot());
690:       assertFalse(node1.isDebugger());
691:       assertFalse(node1.isCast());
692:       assertFalse(node1.isFalse());
693:       assertFalse(node1.isInc());
694:       assertFalse(node1.isFunction());
695:       assertFalse(node1.isThrow());
696:       assertFalse(node1.isIn());
697:       assertFalse(node1.isString());
698:       assertTrue(node1.isNumber());
699:       assertFalse(node1.isCase());
700:       assertFalse(node1.isNE());
701:       assertFalse(node1.isDelProp());
702:       assertFalse(node1.isGetterDef());
703:       assertFalse(node1.isIf());
704:       assertFalse(node1.isSwitch());
705:       assertEquals((-1), node1.getCharno());
706:       assertFalse(node1.isTry());
707:       assertFalse(node1.isBreak());
708:       assertFalse(node1.isRegExp());
709:       assertFalse(node1.isComma());
710:       assertFalse(node1.isFor());
711:       assertFalse(node1.isHook());
712:       assertFalse(node1.isThis());
713:       assertEquals(0, node1.getChildCount());
714:       assertFalse(node1.isNull());
715:       assertFalse(node1.isScript());
716:       assertFalse(node1.isParamList());
717:       assertFalse(node1.isVoid());
718:       assertFalse(node1.isStringKey());
719:       assertFalse(node1.isTrue());
720:       assertFalse(node1.isVar());
721:       assertFalse(node1.isArrayLit());
722:       assertFalse(node1.isEmpty());
723:       assertFalse(node1.isAdd());
724:       assertFalse(node1.isLabelName());
725:       assertFalse(node1.isNew());
726:       assertFalse(node1.isDefaultCase());
727:       assertFalse(node1.isLabel());
728:       assertFalse(node1.isAssignAdd());
729:       assertFalse(node1.equals((Object)node0));
730:       assertTrue(boolean3 == boolean1);
731:       assertTrue(boolean3 == boolean0);
732:       assertTrue(boolean3 == boolean2);
733:       assertFalse(boolean3);
734:       assertEquals(47, Node.IS_DISPATCHER);
735:       assertEquals(29, Node.JSDOC_INFO_PROP);
736:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
737:       assertEquals(56, Node.CHANGE_TIME);
738:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
739:       assertEquals(37, Node.OPT_ARG_NAME);
740:       assertEquals(32, Node.INCRDECR_PROP);
741:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
742:       assertEquals(12, Node.COLUMN_BITS);
743:       assertEquals(2, Node.POST_FLAG);
744:       assertEquals(30, Node.VAR_ARGS_NAME);
745:       assertEquals(43, Node.IS_CONSTANT_NAME);
746:       assertEquals(1, Node.DECR_FLAG);
747:       assertEquals(46, Node.IS_NAMESPACE);
748:       assertEquals(54, Node.SLASH_V);
749:       assertEquals(50, Node.FREE_CALL);
750:       assertEquals(51, Node.STATIC_SOURCE_FILE);
751:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
752:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
753:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
754:       assertEquals(48, Node.DIRECTIVES);
755:       assertEquals(40, Node.ORIGINALNAME_PROP);
756:       assertEquals(39, Node.EMPTY_BLOCK);
757:       assertEquals(4095, Node.COLUMN_MASK);
758:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
759:       assertEquals(57, Node.LAST_PROP);
760:       assertEquals(15, Node.NO_SIDE_EFFECTS);
761:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
762:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
763:       assertEquals(53, Node.INPUT_ID);
764:       assertEquals(49, Node.DIRECT_EVAL);
765:       assertEquals(52, Node.LENGTH);
766:       assertEquals(57, Node.REFLECTED_OBJECT);
767:       assertEquals(55, Node.INFERRED_FUNCTION);
768:       assertEquals(8, Node.FLAG_NO_THROWS);
769:       assertEquals(36, Node.QUOTED_PROP);
770:       
771:       boolean boolean4 = node1.isContinue();
772:       assertNotSame(node1, node0);
773:       assertFalse(node1.isContinue());
774:       assertFalse(node1.hasMoreThanOneChild());
775:       assertFalse(node1.isDo());
776:       assertEquals((-1), node1.getLineno());
777:       assertEquals((-1), node1.getSourcePosition());
778:       assertFalse(node1.isOr());
779:       assertFalse(node1.hasOneChild());
780:       assertFalse(node1.isName());
781:       assertFalse(node1.isExprResult());
782:       assertFalse(node1.isGetElem());
783:       assertFalse(node1.isCall());
784:       assertFalse(node1.isTypeOf());
785:       assertFalse(node1.isDec());
786:       assertFalse(node1.isWith());
787:       assertFalse(node1.isAssign());
788:       assertEquals(39, node1.getType());
789:       assertFalse(node1.isWhile());
790:       assertFalse(node1.hasChildren());
791:       assertFalse(node1.isReturn());
792:       assertFalse(node1.isBlock());
793:       assertFalse(node1.isCatch());
794:       assertFalse(node1.isInstanceOf());
795:       assertFalse(node1.isAnd());
796:       assertFalse(node1.isObjectLit());
797:       assertFalse(node1.isGetProp());
798:       assertFalse(node1.isSetterDef());
799:       assertFalse(node1.isNot());
800:       assertFalse(node1.isDebugger());
801:       assertFalse(node1.isCast());
802:       assertFalse(node1.isFalse());
803:       assertFalse(node1.isInc());
804:       assertFalse(node1.isFunction());
805:       assertFalse(node1.isThrow());
806:       assertFalse(node1.isIn());
807:       assertFalse(node1.isString());
808:       assertTrue(node1.isNumber());
809:       assertFalse(node1.isCase());
810:       assertFalse(node1.isNE());
811:       assertFalse(node1.isDelProp());
812:       assertFalse(node1.isGetterDef());
813:       assertFalse(node1.isIf());
814:       assertFalse(node1.isSwitch());
815:       assertEquals((-1), node1.getCharno());
816:       assertFalse(node1.isTry());
817:       assertFalse(node1.isBreak());
818:       assertFalse(node1.isRegExp());
819:       assertFalse(node1.isComma());
820:       assertFalse(node1.isFor());
821:       assertFalse(node1.isHook());
822:       assertFalse(node1.isThis());
823:       assertEquals(0, node1.getChildCount());
824:       assertFalse(node1.isNull());
825:       assertFalse(node1.isScript());
826:       assertFalse(node1.isParamList());
827:       assertFalse(node1.isVoid());
828:       assertFalse(node1.isStringKey());
829:       assertFalse(node1.isTrue());
830:       assertFalse(node1.isVar());
831:       assertFalse(node1.isArrayLit());
832:       assertFalse(node1.isEmpty());
833:       assertFalse(node1.isAdd());
834:       assertFalse(node1.isLabelName());
835:       assertFalse(node1.isNew());
836:       assertFalse(node1.isDefaultCase());
837:       assertFalse(node1.isLabel());
838:       assertFalse(node1.isAssignAdd());
839:       assertFalse(node1.equals((Object)node0));
840:       assertTrue(boolean4 == boolean0);
841:       assertTrue(boolean4 == boolean2);
842:       assertTrue(boolean4 == boolean1);
843:       assertTrue(boolean4 == boolean3);
844:       assertFalse(boolean4);
845:       assertEquals(47, Node.IS_DISPATCHER);
846:       assertEquals(29, Node.JSDOC_INFO_PROP);
847:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
848:       assertEquals(56, Node.CHANGE_TIME);
849:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
850:       assertEquals(37, Node.OPT_ARG_NAME);
851:       assertEquals(32, Node.INCRDECR_PROP);
852:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
853:       assertEquals(12, Node.COLUMN_BITS);
854:       assertEquals(2, Node.POST_FLAG);
855:       assertEquals(30, Node.VAR_ARGS_NAME);
856:       assertEquals(43, Node.IS_CONSTANT_NAME);
857:       assertEquals(1, Node.DECR_FLAG);
858:       assertEquals(46, Node.IS_NAMESPACE);
859:       assertEquals(54, Node.SLASH_V);
860:       assertEquals(50, Node.FREE_CALL);
861:       assertEquals(51, Node.STATIC_SOURCE_FILE);
862:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
863:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
864:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
865:       assertEquals(48, Node.DIRECTIVES);
866:       assertEquals(40, Node.ORIGINALNAME_PROP);
867:       assertEquals(39, Node.EMPTY_BLOCK);
868:       assertEquals(4095, Node.COLUMN_MASK);
869:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
870:       assertEquals(57, Node.LAST_PROP);
871:       assertEquals(15, Node.NO_SIDE_EFFECTS);
872:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
873:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
874:       assertEquals(53, Node.INPUT_ID);
875:       assertEquals(49, Node.DIRECT_EVAL);
876:       assertEquals(52, Node.LENGTH);
877:       assertEquals(57, Node.REFLECTED_OBJECT);
878:       assertEquals(55, Node.INFERRED_FUNCTION);
879:       assertEquals(8, Node.FLAG_NO_THROWS);
880:       assertEquals(36, Node.QUOTED_PROP);
881:       
882:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1925));
883:       assertEquals((-1925), node_SideEffectFlags0.valueOf());
884:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
885:       assertNotNull(node_SideEffectFlags0);
886:       
887:       boolean boolean5 = node1.isWhile();
888:       assertNotSame(node1, node0);
889:       assertFalse(node1.isContinue());
890:       assertFalse(node1.hasMoreThanOneChild());
891:       assertFalse(node1.isDo());
892:       assertEquals((-1), node1.getLineno());
893:       assertEquals((-1), node1.getSourcePosition());
894:       assertFalse(node1.isOr());
895:       assertFalse(node1.hasOneChild());
896:       assertFalse(node1.isName());
897:       assertFalse(node1.isExprResult());
898:       assertFalse(node1.isGetElem());
899:       assertFalse(node1.isCall());
900:       assertFalse(node1.isTypeOf());
901:       assertFalse(node1.isDec());
902:       assertFalse(node1.isWith());
903:       assertFalse(node1.isAssign());
904:       assertEquals(39, node1.getType());
905:       assertFalse(node1.isWhile());
906:       assertFalse(node1.hasChildren());
907:       assertFalse(node1.isReturn());
908:       assertFalse(node1.isBlock());
909:       assertFalse(node1.isCatch());
910:       assertFalse(node1.isInstanceOf());
911:       assertFalse(node1.isAnd());
912:       assertFalse(node1.isObjectLit());
913:       assertFalse(node1.isGetProp());
914:       assertFalse(node1.isSetterDef());
915:       assertFalse(node1.isNot());
916:       assertFalse(node1.isDebugger());
917:       assertFalse(node1.isCast());
918:       assertFalse(node1.isFalse());
919:       assertFalse(node1.isInc());
920:       assertFalse(node1.isFunction());
921:       assertFalse(node1.isThrow());
922:       assertFalse(node1.isIn());
923:       assertFalse(node1.isString());
924:       assertTrue(node1.isNumber());
925:       assertFalse(node1.isCase());
926:       assertFalse(node1.isNE());
927:       assertFalse(node1.isDelProp());
928:       assertFalse(node1.isGetterDef());
929:       assertFalse(node1.isIf());
930:       assertFalse(node1.isSwitch());
931:       assertEquals((-1), node1.getCharno());
932:       assertFalse(node1.isTry());
933:       assertFalse(node1.isBreak());
934:       assertFalse(node1.isRegExp());
935:       assertFalse(node1.isComma());
936:       assertFalse(node1.isFor());
937:       assertFalse(node1.isHook());
938:       assertFalse(node1.isThis());
939:       assertEquals(0, node1.getChildCount());
940:       assertFalse(node1.isNull());
941:       assertFalse(node1.isScript());
942:       assertFalse(node1.isParamList());
943:       assertFalse(node1.isVoid());
944:       assertFalse(node1.isStringKey());
945:       assertFalse(node1.isTrue());
946:       assertFalse(node1.isVar());
947:       assertFalse(node1.isArrayLit());
948:       assertFalse(node1.isEmpty());
949:       assertFalse(node1.isAdd());
950:       assertFalse(node1.isLabelName());
951:       assertFalse(node1.isNew());
952:       assertFalse(node1.isDefaultCase());
953:       assertFalse(node1.isLabel());
954:       assertFalse(node1.isAssignAdd());
955:       assertFalse(node1.equals((Object)node0));
956:       assertTrue(boolean5 == boolean0);
957:       assertTrue(boolean5 == boolean1);
958:       assertTrue(boolean5 == boolean3);
959:       assertTrue(boolean5 == boolean2);
960:       assertTrue(boolean5 == boolean4);
961:       assertFalse(boolean5);
962:       assertEquals(47, Node.IS_DISPATCHER);
963:       assertEquals(29, Node.JSDOC_INFO_PROP);
964:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
965:       assertEquals(56, Node.CHANGE_TIME);
966:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
967:       assertEquals(37, Node.OPT_ARG_NAME);
968:       assertEquals(32, Node.INCRDECR_PROP);
969:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
970:       assertEquals(12, Node.COLUMN_BITS);
971:       assertEquals(2, Node.POST_FLAG);
972:       assertEquals(30, Node.VAR_ARGS_NAME);
973:       assertEquals(43, Node.IS_CONSTANT_NAME);
974:       assertEquals(1, Node.DECR_FLAG);
975:       assertEquals(46, Node.IS_NAMESPACE);
976:       assertEquals(54, Node.SLASH_V);
977:       assertEquals(50, Node.FREE_CALL);
978:       assertEquals(51, Node.STATIC_SOURCE_FILE);
979:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
980:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
981:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
982:       assertEquals(48, Node.DIRECTIVES);
983:       assertEquals(40, Node.ORIGINALNAME_PROP);
984:       assertEquals(39, Node.EMPTY_BLOCK);
985:       assertEquals(4095, Node.COLUMN_MASK);
986:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
987:       assertEquals(57, Node.LAST_PROP);
988:       assertEquals(15, Node.NO_SIDE_EFFECTS);
989:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
990:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
991:       assertEquals(53, Node.INPUT_ID);
992:       assertEquals(49, Node.DIRECT_EVAL);
993:       assertEquals(52, Node.LENGTH);
994:       assertEquals(57, Node.REFLECTED_OBJECT);
995:       assertEquals(55, Node.INFERRED_FUNCTION);
996:       assertEquals(8, Node.FLAG_NO_THROWS);
997:       assertEquals(36, Node.QUOTED_PROP);
998:       
999:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
1000:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1001:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1002:       assertEquals((-1925), node_SideEffectFlags0.valueOf());
1003:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1004:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1005:       assertEquals((-1925), node_SideEffectFlags1.valueOf());
1006:       assertNotNull(node_SideEffectFlags1);
1007:       
1008:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
1009:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1010:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1011:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1012:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1013:       assertEquals((-1925), node_SideEffectFlags0.valueOf());
1014:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1015:       assertEquals((-1925), node_SideEffectFlags2.valueOf());
1016:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1017:       assertNotNull(node_SideEffectFlags2);
1018:       
1019:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setThrows();
1020:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1021:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1022:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1023:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1024:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1025:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1026:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1027:       assertEquals((-1933), node_SideEffectFlags0.valueOf());
1028:       assertEquals((-1933), node_SideEffectFlags3.valueOf());
1029:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
1030:       assertNotNull(node_SideEffectFlags3);
1031:       
1032:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
1033:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1034:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1035:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1036:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1037:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1038:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1039:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1040:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1041:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1042:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1043:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1044:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1045:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1046:       assertEquals((-1936), node_SideEffectFlags0.valueOf());
1047:       assertEquals((-1936), node_SideEffectFlags3.valueOf());
1048:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
1049:       assertEquals((-1936), node_SideEffectFlags4.valueOf());
1050:       assertFalse(node_SideEffectFlags4.areAllFlagsSet());
1051:       assertNotNull(node_SideEffectFlags4);
1052:       
1053:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setReturnsTainted();
1054:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1055:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1056:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1057:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1058:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1059:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1060:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1061:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1062:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1063:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1064:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
1065:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
1066:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
1067:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
1068:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
1069:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1070:       assertEquals((-1952), node_SideEffectFlags0.valueOf());
1071:       assertEquals((-1952), node_SideEffectFlags3.valueOf());
1072:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
1073:       assertFalse(node_SideEffectFlags5.areAllFlagsSet());
1074:       assertEquals((-1952), node_SideEffectFlags5.valueOf());
1075:       assertNotNull(node_SideEffectFlags5);
1076:       
1077:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.setReturnsTainted();
1078:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1079:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1080:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1081:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1082:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1083:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1084:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
1085:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
1086:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
1087:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
1088:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
1089:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
1090:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1091:       assertEquals((-1952), node_SideEffectFlags0.valueOf());
1092:       assertEquals((-1952), node_SideEffectFlags6.valueOf());
1093:       assertFalse(node_SideEffectFlags6.areAllFlagsSet());
1094:       assertNotNull(node_SideEffectFlags6);
1095:       
1096:       int int0 = node_SideEffectFlags6.valueOf();
1097:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1098:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1099:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1100:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1101:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1102:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1103:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
1104:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
1105:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
1106:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
1107:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
1108:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
1109:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1110:       assertEquals((-1952), node_SideEffectFlags0.valueOf());
1111:       assertEquals((-1952), node_SideEffectFlags6.valueOf());
1112:       assertFalse(node_SideEffectFlags6.areAllFlagsSet());
1113:       assertEquals((-1952), int0);
1114:       
1115:       boolean boolean6 = node0.isAssignAdd();
1116:       assertNotSame(node0, node1);
1117:       assertFalse(node0.isDelProp());
1118:       assertFalse(node0.isEmpty());
1119:       assertFalse(node0.isGetterDef());
1120:       assertFalse(node0.isFor());
1121:       assertFalse(node0.isIf());
1122:       assertFalse(node0.isArrayLit());
1123:       assertFalse(node0.isIn());
1124:       assertFalse(node0.isNE());
1125:       assertFalse(node0.isTrue());
1126:       assertFalse(node0.isDebugger());
1127:       assertFalse(node0.isDefaultCase());
1128:       assertFalse(node0.isInc());
1129:       assertFalse(node0.isSwitch());
1130:       assertEquals(48, node0.getCharno());
1131:       assertFalse(node0.isFunction());
1132:       assertEquals(0, node0.getChildCount());
1133:       assertFalse(node0.isName());
1134:       assertFalse(node0.isFalse());
1135:       assertFalse(node0.isCall());
1136:       assertFalse(node0.isGetProp());
1137:       assertFalse(node0.isBreak());
1138:       assertFalse(node0.isAdd());
1139:       assertFalse(node0.isObjectLit());
1140:       assertFalse(node0.isNull());
1141:       assertFalse(node0.isNot());
1142:       assertFalse(node0.isString());
1143:       assertFalse(node0.isWhile());
1144:       assertFalse(node0.isExprResult());
1145:       assertFalse(node0.isVoid());
1146:       assertFalse(node0.isReturn());
1147:       assertTrue(node0.isNumber());
1148:       assertFalse(node0.isComma());
1149:       assertFalse(node0.isTypeOf());
1150:       assertFalse(node0.hasChildren());
1151:       assertFalse(node0.isDec());
1152:       assertFalse(node0.isAssign());
1153:       assertFalse(node0.isLabelName());
1154:       assertFalse(node0.isCast());
1155:       assertFalse(node0.isGetElem());
1156:       assertFalse(node0.hasOneChild());
1157:       assertFalse(node0.isOr());
1158:       assertFalse(node0.isDo());
1159:       assertFalse(node0.isAnd());
1160:       assertFalse(node0.isContinue());
1161:       assertFalse(node0.isNew());
1162:       assertFalse(node0.isAssignAdd());
1163:       assertFalse(node0.isVar());
1164:       assertFalse(node0.isLabel());
1165:       assertFalse(node0.isThrow());
1166:       assertFalse(node0.isStringKey());
1167:       assertFalse(node0.isSetterDef());
1168:       assertFalse(node0.isParamList());
1169:       assertEquals(39, node0.getType());
1170:       assertFalse(node0.isWith());
1171:       assertFalse(node0.isCatch());
1172:       assertFalse(node0.isScript());
1173:       assertEquals(48, node0.getLineno());
1174:       assertFalse(node0.isCase());
1175:       assertFalse(node0.isBlock());
1176:       assertFalse(node0.isTry());
1177:       assertFalse(node0.isInstanceOf());
1178:       assertEquals(196656, node0.getSourcePosition());
1179:       assertFalse(node0.isThis());
1180:       assertFalse(node0.hasMoreThanOneChild());
1181:       assertFalse(node0.isRegExp());
1182:       assertFalse(node0.isHook());
1183:       assertFalse(node0.equals((Object)node1));
1184:       assertTrue(boolean6 == boolean2);
1185:       assertTrue(boolean6 == boolean1);
1186:       assertTrue(boolean6 == boolean5);
1187:       assertTrue(boolean6 == boolean0);
1188:       assertTrue(boolean6 == boolean3);
1189:       assertTrue(boolean6 == boolean4);
1190:       assertFalse(boolean6);
1191:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1192:       assertEquals(53, Node.INPUT_ID);
1193:       assertEquals(43, Node.IS_CONSTANT_NAME);
1194:       assertEquals(47, Node.IS_DISPATCHER);
1195:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1196:       assertEquals(4095, Node.COLUMN_MASK);
1197:       assertEquals(2, Node.POST_FLAG);
1198:       assertEquals(48, Node.DIRECTIVES);
1199:       assertEquals(37, Node.OPT_ARG_NAME);
1200:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1201:       assertEquals(39, Node.EMPTY_BLOCK);
1202:       assertEquals(56, Node.CHANGE_TIME);
1203:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1204:       assertEquals(55, Node.INFERRED_FUNCTION);
1205:       assertEquals(29, Node.JSDOC_INFO_PROP);
1206:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1207:       assertEquals(57, Node.REFLECTED_OBJECT);
1208:       assertEquals(36, Node.QUOTED_PROP);
1209:       assertEquals(52, Node.LENGTH);
1210:       assertEquals(8, Node.FLAG_NO_THROWS);
1211:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1212:       assertEquals(54, Node.SLASH_V);
1213:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1214:       assertEquals(57, Node.LAST_PROP);
1215:       assertEquals(49, Node.DIRECT_EVAL);
1216:       assertEquals(40, Node.ORIGINALNAME_PROP);
1217:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1218:       assertEquals(12, Node.COLUMN_BITS);
1219:       assertEquals(30, Node.VAR_ARGS_NAME);
1220:       assertEquals(46, Node.IS_NAMESPACE);
1221:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1222:       assertEquals(32, Node.INCRDECR_PROP);
1223:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1224:       assertEquals(1, Node.DECR_FLAG);
1225:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1226:       assertEquals(50, Node.FREE_CALL);
1227:       
1228:       boolean boolean7 = node0.hasChildren();
1229:       assertNotSame(node0, node1);
1230:       assertFalse(node0.isDelProp());
1231:       assertFalse(node0.isEmpty());
1232:       assertFalse(node0.isGetterDef());
1233:       assertFalse(node0.isFor());
1234:       assertFalse(node0.isIf());
1235:       assertFalse(node0.isArrayLit());
1236:       assertFalse(node0.isIn());
1237:       assertFalse(node0.isNE());
1238:       assertFalse(node0.isTrue());
1239:       assertFalse(node0.isDebugger());
1240:       assertFalse(node0.isDefaultCase());
1241:       assertFalse(node0.isInc());
1242:       assertFalse(node0.isSwitch());
1243:       assertEquals(48, node0.getCharno());
1244:       assertFalse(node0.isFunction());
1245:       assertEquals(0, node0.getChildCount());
1246:       assertFalse(node0.isName());
1247:       assertFalse(node0.isFalse());
1248:       assertFalse(node0.isCall());
1249:       assertFalse(node0.isGetProp());
1250:       assertFalse(node0.isBreak());
1251:       assertFalse(node0.isAdd());
1252:       assertFalse(node0.isObjectLit());
1253:       assertFalse(node0.isNull());
1254:       assertFalse(node0.isNot());
1255:       assertFalse(node0.isString());
1256:       assertFalse(node0.isWhile());
1257:       assertFalse(node0.isExprResult());
1258:       assertFalse(node0.isVoid());
1259:       assertFalse(node0.isReturn());
1260:       assertTrue(node0.isNumber());
1261:       assertFalse(node0.isComma());
1262:       assertFalse(node0.isTypeOf());
1263:       assertFalse(node0.hasChildren());
1264:       assertFalse(node0.isDec());
1265:       assertFalse(node0.isAssign());
1266:       assertFalse(node0.isLabelName());
1267:       assertFalse(node0.isCast());
1268:       assertFalse(node0.isGetElem());
1269:       assertFalse(node0.hasOneChild());
1270:       assertFalse(node0.isOr());
1271:       assertFalse(node0.isDo());
1272:       assertFalse(node0.isAnd());
1273:       assertFalse(node0.isContinue());
1274:       assertFalse(node0.isNew());
1275:       assertFalse(node0.isAssignAdd());
1276:       assertFalse(node0.isVar());
1277:       assertFalse(node0.isLabel());
1278:       assertFalse(node0.isThrow());
1279:       assertFalse(node0.isStringKey());
1280:       assertFalse(node0.isSetterDef());
1281:       assertFalse(node0.isParamList());
1282:       assertEquals(39, node0.getType());
1283:       assertFalse(node0.isWith());
1284:       assertFalse(node0.isCatch());
1285:       assertFalse(node0.isScript());
1286:       assertEquals(48, node0.getLineno());
1287:       assertFalse(node0.isCase());
1288:       assertFalse(node0.isBlock());
1289:       assertFalse(node0.isTry());
1290:       assertFalse(node0.isInstanceOf());
1291:       assertEquals(196656, node0.getSourcePosition());
1292:       assertFalse(node0.isThis());
1293:       assertFalse(node0.hasMoreThanOneChild());
1294:       assertFalse(node0.isRegExp());
1295:       assertFalse(node0.isHook());
1296:       assertFalse(node0.equals((Object)node1));
1297:       assertTrue(boolean7 == boolean2);
1298:       assertTrue(boolean7 == boolean4);
1299:       assertTrue(boolean7 == boolean6);
1300:       assertTrue(boolean7 == boolean3);
1301:       assertTrue(boolean7 == boolean5);
1302:       assertTrue(boolean7 == boolean1);
1303:       assertTrue(boolean7 == boolean0);
1304:       assertFalse(boolean7);
1305:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1306:       assertEquals(53, Node.INPUT_ID);
1307:       assertEquals(43, Node.IS_CONSTANT_NAME);
1308:       assertEquals(47, Node.IS_DISPATCHER);
1309:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1310:       assertEquals(4095, Node.COLUMN_MASK);
1311:       assertEquals(2, Node.POST_FLAG);
1312:       assertEquals(48, Node.DIRECTIVES);
1313:       assertEquals(37, Node.OPT_ARG_NAME);
1314:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1315:       assertEquals(39, Node.EMPTY_BLOCK);
1316:       assertEquals(56, Node.CHANGE_TIME);
1317:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1318:       assertEquals(55, Node.INFERRED_FUNCTION);
1319:       assertEquals(29, Node.JSDOC_INFO_PROP);
1320:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1321:       assertEquals(57, Node.REFLECTED_OBJECT);
1322:       assertEquals(36, Node.QUOTED_PROP);
1323:       assertEquals(52, Node.LENGTH);
1324:       assertEquals(8, Node.FLAG_NO_THROWS);
1325:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1326:       assertEquals(54, Node.SLASH_V);
1327:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1328:       assertEquals(57, Node.LAST_PROP);
1329:       assertEquals(49, Node.DIRECT_EVAL);
1330:       assertEquals(40, Node.ORIGINALNAME_PROP);
1331:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1332:       assertEquals(12, Node.COLUMN_BITS);
1333:       assertEquals(30, Node.VAR_ARGS_NAME);
1334:       assertEquals(46, Node.IS_NAMESPACE);
1335:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1336:       assertEquals(32, Node.INCRDECR_PROP);
1337:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1338:       assertEquals(1, Node.DECR_FLAG);
1339:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1340:       assertEquals(50, Node.FREE_CALL);
1341:       
1342:       Node node2 = Node.newNumber((-661.017698), 225, 43);
1343:       assertNotSame(node2, node0);
1344:       assertNotSame(node2, node1);
1345:       assertFalse(node2.isNE());
1346:       assertFalse(node2.isIn());
1347:       assertFalse(node2.isGetterDef());
1348:       assertFalse(node2.isEmpty());
1349:       assertFalse(node2.isFor());
1350:       assertTrue(node2.isNumber());
1351:       assertFalse(node2.isCase());
1352:       assertFalse(node2.isTry());
1353:       assertFalse(node2.isSwitch());
1354:       assertFalse(node2.isDebugger());
1355:       assertFalse(node2.isString());
1356:       assertFalse(node2.isFunction());
1357:       assertFalse(node2.isArrayLit());
1358:       assertFalse(node2.isSetterDef());
1359:       assertFalse(node2.isThis());
1360:       assertFalse(node2.isParamList());
1361:       assertFalse(node2.isFalse());
1362:       assertFalse(node2.isHook());
1363:       assertFalse(node2.isThrow());
1364:       assertFalse(node2.isInc());
1365:       assertFalse(node2.isBlock());
1366:       assertEquals(39, node2.getType());
1367:       assertFalse(node2.isWith());
1368:       assertFalse(node2.isRegExp());
1369:       assertFalse(node2.isCatch());
1370:       assertFalse(node2.hasMoreThanOneChild());
1371:       assertFalse(node2.isInstanceOf());
1372:       assertFalse(node2.isIf());
1373:       assertFalse(node2.hasChildren());
1374:       assertFalse(node2.isOr());
1375:       assertFalse(node2.isReturn());
1376:       assertFalse(node2.isAssign());
1377:       assertFalse(node2.isLabel());
1378:       assertFalse(node2.isDec());
1379:       assertFalse(node2.isTypeOf());
1380:       assertFalse(node2.isAssignAdd());
1381:       assertFalse(node2.isDo());
1382:       assertFalse(node2.isWhile());
1383:       assertFalse(node2.hasOneChild());
1384:       assertFalse(node2.isScript());
1385:       assertFalse(node2.isNot());
1386:       assertFalse(node2.isObjectLit());
1387:       assertFalse(node2.isCast());
1388:       assertFalse(node2.isAnd());
1389:       assertFalse(node2.isContinue());
1390:       assertFalse(node2.isStringKey());
1391:       assertFalse(node2.isLabelName());
1392:       assertFalse(node2.isComma());
1393:       assertEquals(921643, node2.getSourcePosition());
1394:       assertFalse(node2.isGetProp());
1395:       assertFalse(node2.isBreak());
1396:       assertEquals(225, node2.getLineno());
1397:       assertFalse(node2.isNull());
1398:       assertEquals(43, node2.getCharno());
1399:       assertEquals(0, node2.getChildCount());
1400:       assertFalse(node2.isVar());
1401:       assertFalse(node2.isNew());
1402:       assertFalse(node2.isDefaultCase());
1403:       assertFalse(node2.isExprResult());
1404:       assertFalse(node2.isTrue());
1405:       assertFalse(node2.isAdd());
1406:       assertFalse(node2.isGetElem());
1407:       assertFalse(node2.isCall());
1408:       assertFalse(node2.isVoid());
1409:       assertFalse(node2.isDelProp());
1410:       assertFalse(node2.isName());
1411:       assertFalse(node2.equals((Object)node0));
1412:       assertFalse(node2.equals((Object)node1));
1413:       assertNotNull(node2);
1414:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1415:       assertEquals(29, Node.JSDOC_INFO_PROP);
1416:       assertEquals(53, Node.INPUT_ID);
1417:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1418:       assertEquals(56, Node.CHANGE_TIME);
1419:       assertEquals(37, Node.OPT_ARG_NAME);
1420:       assertEquals(36, Node.QUOTED_PROP);
1421:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1422:       assertEquals(43, Node.IS_CONSTANT_NAME);
1423:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1424:       assertEquals(55, Node.INFERRED_FUNCTION);
1425:       assertEquals(8, Node.FLAG_NO_THROWS);
1426:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1427:       assertEquals(57, Node.LAST_PROP);
1428:       assertEquals(47, Node.IS_DISPATCHER);
1429:       assertEquals(2, Node.POST_FLAG);
1430:       assertEquals(30, Node.VAR_ARGS_NAME);
1431:       assertEquals(39, Node.EMPTY_BLOCK);
1432:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1433:       assertEquals(57, Node.REFLECTED_OBJECT);
1434:       assertEquals(40, Node.ORIGINALNAME_PROP);
1435:       assertEquals(50, Node.FREE_CALL);
1436:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1437:       assertEquals(52, Node.LENGTH);
1438:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1439:       assertEquals(48, Node.DIRECTIVES);
1440:       assertEquals(49, Node.DIRECT_EVAL);
1441:       assertEquals(54, Node.SLASH_V);
1442:       assertEquals(12, Node.COLUMN_BITS);
1443:       assertEquals(32, Node.INCRDECR_PROP);
1444:       assertEquals(46, Node.IS_NAMESPACE);
1445:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1446:       assertEquals(4095, Node.COLUMN_MASK);
1447:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1448:       assertEquals(1, Node.DECR_FLAG);
1449:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1450:   }
1451: }
RegularFileObject[/tmp/EvoSuite_188_1628160183314/com/google/javascript/rhino/Node_188_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:43:03 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_188_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_188_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
71:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.VoidType",
121:       "com.google.common.base.Joiner",
122:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
123:       "com.google.common.collect.AbstractListMultimap",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.javascript.rhino.jstype.ProxyObjectType",
128:       "com.google.common.collect.Sets$SetView",
129:       "com.google.common.collect.RegularImmutableAsList",
130:       "com.google.javascript.rhino.jstype.TemplateType",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.javascript.rhino.JSDocInfo$1",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
206:       "com.google.common.collect.Iterators$1",
207:       "com.google.common.collect.Iterators$2",
208:       "com.google.javascript.rhino.jstype.NamespaceType",
209:       "com.google.common.collect.Iterators$3",
210:       "com.google.common.collect.Sets",
211:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
212:       "com.google.javascript.rhino.Node$ObjectPropListItem",
213:       "com.google.common.collect.Lists$StringAsImmutableList",
214:       "com.google.common.collect.Lists$2",
215:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
216:       "com.google.common.collect.ImmutableList$Builder",
217:       "com.google.common.collect.Lists$1",
218:       "com.google.javascript.rhino.jstype.StaticReference",
219:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
220:       "com.google.common.collect.Multiset",
221:       "com.google.common.collect.AbstractMultimap",
222:       "com.google.common.collect.Multimap",
223:       "com.google.common.collect.Iterators",
224:       "com.google.common.collect.Maps$ImprovedAbstractMap",
225:       "com.google.common.collect.ImmutableBiMap",
226:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
228:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
229:       "com.google.common.collect.ImmutableList",
230:       "com.google.common.collect.SingletonImmutableBiMap",
231:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
232:       "com.google.javascript.rhino.jstype.StringType",
233:       "com.google.javascript.rhino.Node$AbstractPropListItem",
234:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
235:       "com.google.javascript.rhino.jstype.TemplatizedType",
236:       "com.google.javascript.rhino.jstype.Visitor",
237:       "com.google.javascript.rhino.jstype.NoResolvedType",
238:       "com.google.javascript.rhino.jstype.JSTypeNative",
239:       "com.google.javascript.rhino.jstype.AllType",
240:       "com.google.common.collect.Maps",
241:       "com.google.common.collect.SetMultimap",
242:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
243:       "com.google.common.collect.Maps$EntryTransformer",
244:       "com.google.javascript.rhino.JSTypeExpression",
245:       "com.google.common.collect.Iterators$MergingIterator"
246:     );
247:   } 
248: 
249:   private static void resetClasses() {
250:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_188_tmp__ESTest_scaffolding.class.getClassLoader()); 
251: 
252:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
253:       "com.google.javascript.rhino.Node",
254:       "com.google.javascript.rhino.Node$NumberNode",
255:       "com.google.javascript.rhino.Node$StringNode",
256:       "com.google.javascript.rhino.Node$AbstractPropListItem",
257:       "com.google.javascript.rhino.Node$ObjectPropListItem",
258:       "com.google.javascript.rhino.Node$IntPropListItem",
259:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
260:       "com.google.javascript.rhino.Node$AncestorIterable",
261:       "com.google.javascript.rhino.Node$NodeMismatch",
262:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
263:       "com.google.javascript.rhino.Node$SideEffectFlags",
264:       "com.google.javascript.rhino.Token",
265:       "com.google.common.base.Preconditions",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.InputId",
337:       "com.google.javascript.rhino.JSDocInfo",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.base.Objects",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
342:       "com.google.common.collect.Sets",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
350:       "com.google.common.collect.Iterables",
351:       "com.google.common.collect.AbstractIndexedListIterator",
352:       "com.google.common.collect.Iterators$11",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.common.collect.Iterators$12",
357:       "com.google.javascript.rhino.JSTypeExpression",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
359:       "com.google.javascript.rhino.jstype.TemplatizedType",
360:       "com.google.javascript.rhino.jstype.NamedType",
361:       "com.google.javascript.rhino.jstype.TernaryValue",
362:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
365:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.ImmutableList$1",
369:       "com.google.common.collect.Platform",
370:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
371:     );
372:   }
373: }

[MASTER] 10:43:03.549 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((double) 48, 48, 48);
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(48, node0.getCharno());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertEquals(48, node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertEquals(196656, node0.getSourcePosition());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertNotNull(node0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

boolean boolean0 = node0.isWhile();
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(48, node0.getCharno());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertEquals(48, node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertEquals(196656, node0.getSourcePosition());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(boolean0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

Iterable<Node> iterable0 = new Stack<Node>();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);

boolean boolean1 = node0.isUnscopedQualifiedName();
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(48, node0.getCharno());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertEquals(48, node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertEquals(196656, node0.getSourcePosition());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

Node node1 = Node.newNumber((-94.27));
assertNotSame(node1, node0);
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertTrue(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isComma());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isStringKey());
assertFalse(node1.isTrue());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

boolean boolean2 = node1.isEquivalentTo(node0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(48, node0.getCharno());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertEquals(48, node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertEquals(196656, node0.getSourcePosition());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertTrue(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isComma());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isStringKey());
assertFalse(node1.isTrue());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

boolean boolean3 = node1.isNoSideEffectsCall();
assertNotSame(node1, node0);
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertTrue(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isComma());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isStringKey());
assertFalse(node1.isTrue());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

boolean boolean4 = node1.isContinue();
assertNotSame(node1, node0);
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertTrue(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isComma());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isStringKey());
assertFalse(node1.isTrue());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.equals((Object)node0));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertFalse(boolean4);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1925));
assertEquals((-1925), node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

boolean boolean5 = node1.isWhile();
assertNotSame(node1, node0);
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertTrue(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isComma());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isStringKey());
assertFalse(node1.isTrue());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.equals((Object)node0));
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean4);
assertFalse(boolean5);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertEquals((-1925), node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals((-1925), node_SideEffectFlags1.valueOf());
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertEquals((-1925), node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals((-1925), node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals((-1933), node_SideEffectFlags0.valueOf());
assertEquals((-1933), node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertNotNull(node_SideEffectFlags3);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals((-1936), node_SideEffectFlags0.valueOf());
assertEquals((-1936), node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals((-1936), node_SideEffectFlags4.valueOf());
assertFalse(node_SideEffectFlags4.areAllFlagsSet());
assertNotNull(node_SideEffectFlags4);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setReturnsTainted();
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals((-1952), node_SideEffectFlags0.valueOf());
assertEquals((-1952), node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertFalse(node_SideEffectFlags5.areAllFlagsSet());
assertEquals((-1952), node_SideEffectFlags5.valueOf());
assertNotNull(node_SideEffectFlags5);

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.setReturnsTainted();
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals((-1952), node_SideEffectFlags0.valueOf());
assertEquals((-1952), node_SideEffectFlags6.valueOf());
assertFalse(node_SideEffectFlags6.areAllFlagsSet());
assertNotNull(node_SideEffectFlags6);

int int0 = node_SideEffectFlags6.valueOf();
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals((-1952), node_SideEffectFlags0.valueOf());
assertEquals((-1952), node_SideEffectFlags6.valueOf());
assertFalse(node_SideEffectFlags6.areAllFlagsSet());
assertEquals((-1952), int0);

boolean boolean6 = node0.isAssignAdd();
assertNotSame(node0, node1);
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(48, node0.getCharno());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertEquals(48, node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertEquals(196656, node0.getSourcePosition());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.equals((Object)node1));
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean4);
assertFalse(boolean6);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

boolean boolean7 = node0.hasChildren();
assertNotSame(node0, node1);
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(48, node0.getCharno());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertEquals(48, node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertEquals(196656, node0.getSourcePosition());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.equals((Object)node1));
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean0);
assertFalse(boolean7);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

Node node2 = Node.newNumber((-661.017698), 225, 43);
assertNotSame(node2, node0);
assertNotSame(node2, node1);
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertTrue(node2.isNumber());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isSwitch());
assertFalse(node2.isDebugger());
assertFalse(node2.isString());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isBlock());
assertEquals(39, node2.getType());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIf());
assertFalse(node2.hasChildren());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isLabel());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isComma());
assertEquals(921643, node2.getSourcePosition());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertEquals(225, node2.getLineno());
assertFalse(node2.isNull());
assertEquals(43, node2.getCharno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isAdd());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);


[MASTER] 10:43:35.221 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:35.626 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:35.958 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:36.199 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:36.466 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:36.681 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:36.905 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:37.131 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:37.311 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:37.508 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:37.686 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:37.898 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:38.137 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:38.359 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:38.575 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:38.853 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:39.065 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:39.257 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:39.450 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:40.728 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:40.908 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:41.084 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:41.310 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:41.505 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:41.699 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:41.899 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:42.094 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:42.325 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:42.552 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:42.746 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:42.967 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:43.176 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:43.368 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:43.566 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:43.767 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:44.059 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:44.320 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:44.525 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:44.713 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:44.931 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:45.124 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:45.311 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:45.492 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:45.714 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:45.918 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:46.129 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:46.379 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:46.594 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:46.792 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:46.990 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:47.176 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:47.396 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:47.574 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:47.750 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:47.937 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:48.410 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:48.602 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/19
* Done!

* Computation finished
