* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 19833
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3552106059
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 09:35:16.919 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 09:35:17.469 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 09:35:18.338 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;
[MASTER] 09:35:18.338 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;
[MASTER] 09:35:20.878 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.jstype.TemplateTypeMapReplacer due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 09:36:19.586 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 604s and 700 generations, 275327 statements, best individual has fitness: 2686.0
* Minimizing test suite
[MASTER] 09:46:45.344 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 803
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 714
* Number of covered goals: 638
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 101
* Number of covered goals: 101
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 530
* Number of covered goals: 479
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 51%
* Total number of goals: 4536
* Number of covered goals: 2310
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 84%
* Total number of goals: 714
* Number of covered goals: 600
* Generated 1219 tests with total length 11685
* Resulting test suite's coverage: 79% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 09:48:07.406 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6823166666666667% of time used, but only 87/1219 tests minimized), falling back to using all assertions
[MASTER] 09:48:26.595 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 19%
* Compiling and checking tests
[MASTER] 09:48:41.284 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 14 seconds more than allowed.
[MASTER] 09:48:43.881 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_90_1628156923657/com/google/javascript/rhino/Node_90_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_90_1628156923657/com/google/javascript/rhino/Node_90_tmp__ESTest_scaffolding.java]]
[MASTER] 09:48:43.881 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:48:43.881 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:48:43.886 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1138
[MASTER] 09:48:43.888 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_90_1628156923657/com/google/javascript/rhino/Node_90_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:48:43 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_90_tmp__ESTest extends Node_90_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber((-1.0));
22:       assertFalse(node0.isSetterDef());
23:       assertEquals(0, node0.getChildCount());
24:       assertFalse(node0.isCatch());
25:       assertFalse(node0.isStringKey());
26:       assertFalse(node0.isCall());
27:       assertFalse(node0.isName());
28:       assertFalse(node0.isNull());
29:       assertFalse(node0.isParamList());
30:       assertFalse(node0.isTrue());
31:       assertFalse(node0.isAdd());
32:       assertFalse(node0.isFunction());
33:       assertFalse(node0.isNew());
34:       assertFalse(node0.isDo());
35:       assertFalse(node0.isDefaultCase());
36:       assertFalse(node0.isAssignAdd());
37:       assertFalse(node0.isVar());
38:       assertFalse(node0.isLabel());
39:       assertEquals((-1), node0.getLineno());
40:       assertFalse(node0.isIn());
41:       assertFalse(node0.isGetterDef());
42:       assertFalse(node0.hasMoreThanOneChild());
43:       assertFalse(node0.isLabelName());
44:       assertFalse(node0.isArrayLit());
45:       assertFalse(node0.isIf());
46:       assertFalse(node0.isSwitch());
47:       assertFalse(node0.isNE());
48:       assertFalse(node0.isBlock());
49:       assertFalse(node0.isTry());
50:       assertEquals((-1), node0.getCharno());
51:       assertFalse(node0.isScript());
52:       assertFalse(node0.isRegExp());
53:       assertFalse(node0.isWith());
54:       assertFalse(node0.isFor());
55:       assertEquals(39, node0.getType());
56:       assertFalse(node0.isCase());
57:       assertFalse(node0.isHook());
58:       assertFalse(node0.hasOneChild());
59:       assertFalse(node0.isGetProp());
60:       assertFalse(node0.isThis());
61:       assertFalse(node0.isComma());
62:       assertFalse(node0.isBreak());
63:       assertFalse(node0.isInstanceOf());
64:       assertFalse(node0.isObjectLit());
65:       assertFalse(node0.isNot());
66:       assertFalse(node0.isAnd());
67:       assertFalse(node0.isInc());
68:       assertFalse(node0.isCast());
69:       assertFalse(node0.isThrow());
70:       assertFalse(node0.isFalse());
71:       assertFalse(node0.isOr());
72:       assertTrue(node0.isNumber());
73:       assertEquals((-1), node0.getSourcePosition());
74:       assertFalse(node0.isDec());
75:       assertFalse(node0.isTypeOf());
76:       assertFalse(node0.isEmpty());
77:       assertFalse(node0.isContinue());
78:       assertFalse(node0.isGetElem());
79:       assertFalse(node0.isDelProp());
80:       assertFalse(node0.isVoid());
81:       assertFalse(node0.isExprResult());
82:       assertFalse(node0.isDebugger());
83:       assertFalse(node0.isString());
84:       assertFalse(node0.isAssign());
85:       assertFalse(node0.hasChildren());
86:       assertFalse(node0.isReturn());
87:       assertFalse(node0.isWhile());
88:       assertNotNull(node0);
89:       assertEquals(52, Node.LENGTH);
90:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
91:       assertEquals(54, Node.SLASH_V);
92:       assertEquals(57, Node.REFLECTED_OBJECT);
93:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
94:       assertEquals(30, Node.VAR_ARGS_NAME);
95:       assertEquals(49, Node.DIRECT_EVAL);
96:       assertEquals(48, Node.DIRECTIVES);
97:       assertEquals(40, Node.ORIGINALNAME_PROP);
98:       assertEquals(51, Node.STATIC_SOURCE_FILE);
99:       assertEquals(4095, Node.COLUMN_MASK);
100:       assertEquals(32, Node.INCRDECR_PROP);
101:       assertEquals(12, Node.COLUMN_BITS);
102:       assertEquals(46, Node.IS_NAMESPACE);
103:       assertEquals(50, Node.FREE_CALL);
104:       assertEquals(1, Node.DECR_FLAG);
105:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
106:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
107:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
108:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
109:       assertEquals(56, Node.CHANGE_TIME);
110:       assertEquals(47, Node.IS_DISPATCHER);
111:       assertEquals(43, Node.IS_CONSTANT_NAME);
112:       assertEquals(2, Node.POST_FLAG);
113:       assertEquals(37, Node.OPT_ARG_NAME);
114:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
115:       assertEquals(15, Node.NO_SIDE_EFFECTS);
116:       assertEquals(57, Node.LAST_PROP);
117:       assertEquals(36, Node.QUOTED_PROP);
118:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
119:       assertEquals(8, Node.FLAG_NO_THROWS);
120:       assertEquals(55, Node.INFERRED_FUNCTION);
121:       assertEquals(39, Node.EMPTY_BLOCK);
122:       assertEquals(29, Node.JSDOC_INFO_PROP);
123:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
124:       assertEquals(53, Node.INPUT_ID);
125:       
126:       boolean boolean0 = node0.isOnlyModifiesThisCall();
127:       assertFalse(boolean0);
128:       assertFalse(node0.isSetterDef());
129:       assertEquals(0, node0.getChildCount());
130:       assertFalse(node0.isCatch());
131:       assertFalse(node0.isStringKey());
132:       assertFalse(node0.isCall());
133:       assertFalse(node0.isName());
134:       assertFalse(node0.isNull());
135:       assertFalse(node0.isParamList());
136:       assertFalse(node0.isTrue());
137:       assertFalse(node0.isAdd());
138:       assertFalse(node0.isFunction());
139:       assertFalse(node0.isNew());
140:       assertFalse(node0.isDo());
141:       assertFalse(node0.isDefaultCase());
142:       assertFalse(node0.isAssignAdd());
143:       assertFalse(node0.isVar());
144:       assertFalse(node0.isLabel());
145:       assertEquals((-1), node0.getLineno());
146:       assertFalse(node0.isIn());
147:       assertFalse(node0.isGetterDef());
148:       assertFalse(node0.hasMoreThanOneChild());
149:       assertFalse(node0.isLabelName());
150:       assertFalse(node0.isArrayLit());
151:       assertFalse(node0.isIf());
152:       assertFalse(node0.isSwitch());
153:       assertFalse(node0.isNE());
154:       assertFalse(node0.isBlock());
155:       assertFalse(node0.isTry());
156:       assertEquals((-1), node0.getCharno());
157:       assertFalse(node0.isScript());
158:       assertFalse(node0.isRegExp());
159:       assertFalse(node0.isWith());
160:       assertFalse(node0.isFor());
161:       assertEquals(39, node0.getType());
162:       assertFalse(node0.isCase());
163:       assertFalse(node0.isHook());
164:       assertFalse(node0.hasOneChild());
165:       assertFalse(node0.isGetProp());
166:       assertFalse(node0.isThis());
167:       assertFalse(node0.isComma());
168:       assertFalse(node0.isBreak());
169:       assertFalse(node0.isInstanceOf());
170:       assertFalse(node0.isObjectLit());
171:       assertFalse(node0.isNot());
172:       assertFalse(node0.isAnd());
173:       assertFalse(node0.isInc());
174:       assertFalse(node0.isCast());
175:       assertFalse(node0.isThrow());
176:       assertFalse(node0.isFalse());
177:       assertFalse(node0.isOr());
178:       assertTrue(node0.isNumber());
179:       assertEquals((-1), node0.getSourcePosition());
180:       assertFalse(node0.isDec());
181:       assertFalse(node0.isTypeOf());
182:       assertFalse(node0.isEmpty());
183:       assertFalse(node0.isContinue());
184:       assertFalse(node0.isGetElem());
185:       assertFalse(node0.isDelProp());
186:       assertFalse(node0.isVoid());
187:       assertFalse(node0.isExprResult());
188:       assertFalse(node0.isDebugger());
189:       assertFalse(node0.isString());
190:       assertFalse(node0.isAssign());
191:       assertFalse(node0.hasChildren());
192:       assertFalse(node0.isReturn());
193:       assertFalse(node0.isWhile());
194:       assertEquals(52, Node.LENGTH);
195:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
196:       assertEquals(54, Node.SLASH_V);
197:       assertEquals(57, Node.REFLECTED_OBJECT);
198:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
199:       assertEquals(30, Node.VAR_ARGS_NAME);
200:       assertEquals(49, Node.DIRECT_EVAL);
201:       assertEquals(48, Node.DIRECTIVES);
202:       assertEquals(40, Node.ORIGINALNAME_PROP);
203:       assertEquals(51, Node.STATIC_SOURCE_FILE);
204:       assertEquals(4095, Node.COLUMN_MASK);
205:       assertEquals(32, Node.INCRDECR_PROP);
206:       assertEquals(12, Node.COLUMN_BITS);
207:       assertEquals(46, Node.IS_NAMESPACE);
208:       assertEquals(50, Node.FREE_CALL);
209:       assertEquals(1, Node.DECR_FLAG);
210:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
211:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
212:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
213:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
214:       assertEquals(56, Node.CHANGE_TIME);
215:       assertEquals(47, Node.IS_DISPATCHER);
216:       assertEquals(43, Node.IS_CONSTANT_NAME);
217:       assertEquals(2, Node.POST_FLAG);
218:       assertEquals(37, Node.OPT_ARG_NAME);
219:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
220:       assertEquals(15, Node.NO_SIDE_EFFECTS);
221:       assertEquals(57, Node.LAST_PROP);
222:       assertEquals(36, Node.QUOTED_PROP);
223:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
224:       assertEquals(8, Node.FLAG_NO_THROWS);
225:       assertEquals(55, Node.INFERRED_FUNCTION);
226:       assertEquals(39, Node.EMPTY_BLOCK);
227:       assertEquals(29, Node.JSDOC_INFO_PROP);
228:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
229:       assertEquals(53, Node.INPUT_ID);
230:       
231:       Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
232:       assertFalse(node0.isSetterDef());
233:       assertEquals(0, node0.getChildCount());
234:       assertFalse(node0.isCatch());
235:       assertFalse(node0.isStringKey());
236:       assertFalse(node0.isCall());
237:       assertFalse(node0.isName());
238:       assertFalse(node0.isNull());
239:       assertFalse(node0.isParamList());
240:       assertFalse(node0.isTrue());
241:       assertFalse(node0.isAdd());
242:       assertFalse(node0.isFunction());
243:       assertFalse(node0.isNew());
244:       assertFalse(node0.isDo());
245:       assertFalse(node0.isDefaultCase());
246:       assertFalse(node0.isAssignAdd());
247:       assertFalse(node0.isVar());
248:       assertFalse(node0.isLabel());
249:       assertEquals((-1), node0.getLineno());
250:       assertFalse(node0.isIn());
251:       assertFalse(node0.isGetterDef());
252:       assertFalse(node0.hasMoreThanOneChild());
253:       assertFalse(node0.isLabelName());
254:       assertFalse(node0.isArrayLit());
255:       assertFalse(node0.isIf());
256:       assertFalse(node0.isSwitch());
257:       assertFalse(node0.isNE());
258:       assertFalse(node0.isBlock());
259:       assertFalse(node0.isTry());
260:       assertEquals((-1), node0.getCharno());
261:       assertFalse(node0.isScript());
262:       assertFalse(node0.isRegExp());
263:       assertFalse(node0.isWith());
264:       assertFalse(node0.isFor());
265:       assertEquals(39, node0.getType());
266:       assertFalse(node0.isCase());
267:       assertFalse(node0.isHook());
268:       assertFalse(node0.hasOneChild());
269:       assertFalse(node0.isGetProp());
270:       assertFalse(node0.isThis());
271:       assertFalse(node0.isComma());
272:       assertFalse(node0.isBreak());
273:       assertFalse(node0.isInstanceOf());
274:       assertFalse(node0.isObjectLit());
275:       assertFalse(node0.isNot());
276:       assertFalse(node0.isAnd());
277:       assertFalse(node0.isInc());
278:       assertFalse(node0.isCast());
279:       assertFalse(node0.isThrow());
280:       assertFalse(node0.isFalse());
281:       assertFalse(node0.isOr());
282:       assertTrue(node0.isNumber());
283:       assertEquals((-1), node0.getSourcePosition());
284:       assertFalse(node0.isDec());
285:       assertFalse(node0.isTypeOf());
286:       assertFalse(node0.isEmpty());
287:       assertFalse(node0.isContinue());
288:       assertFalse(node0.isGetElem());
289:       assertFalse(node0.isDelProp());
290:       assertFalse(node0.isVoid());
291:       assertFalse(node0.isExprResult());
292:       assertFalse(node0.isDebugger());
293:       assertFalse(node0.isString());
294:       assertFalse(node0.isAssign());
295:       assertFalse(node0.hasChildren());
296:       assertFalse(node0.isReturn());
297:       assertFalse(node0.isWhile());
298:       assertNotNull(node_AncestorIterable0);
299:       assertEquals(52, Node.LENGTH);
300:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
301:       assertEquals(54, Node.SLASH_V);
302:       assertEquals(57, Node.REFLECTED_OBJECT);
303:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
304:       assertEquals(30, Node.VAR_ARGS_NAME);
305:       assertEquals(49, Node.DIRECT_EVAL);
306:       assertEquals(48, Node.DIRECTIVES);
307:       assertEquals(40, Node.ORIGINALNAME_PROP);
308:       assertEquals(51, Node.STATIC_SOURCE_FILE);
309:       assertEquals(4095, Node.COLUMN_MASK);
310:       assertEquals(32, Node.INCRDECR_PROP);
311:       assertEquals(12, Node.COLUMN_BITS);
312:       assertEquals(46, Node.IS_NAMESPACE);
313:       assertEquals(50, Node.FREE_CALL);
314:       assertEquals(1, Node.DECR_FLAG);
315:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
316:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
317:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
318:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
319:       assertEquals(56, Node.CHANGE_TIME);
320:       assertEquals(47, Node.IS_DISPATCHER);
321:       assertEquals(43, Node.IS_CONSTANT_NAME);
322:       assertEquals(2, Node.POST_FLAG);
323:       assertEquals(37, Node.OPT_ARG_NAME);
324:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
325:       assertEquals(15, Node.NO_SIDE_EFFECTS);
326:       assertEquals(57, Node.LAST_PROP);
327:       assertEquals(36, Node.QUOTED_PROP);
328:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
329:       assertEquals(8, Node.FLAG_NO_THROWS);
330:       assertEquals(55, Node.INFERRED_FUNCTION);
331:       assertEquals(39, Node.EMPTY_BLOCK);
332:       assertEquals(29, Node.JSDOC_INFO_PROP);
333:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
334:       assertEquals(53, Node.INPUT_ID);
335:       
336:       Node node1 = new Node(56, node0, 0, 64);
337:       assertFalse(node1.equals((Object)node0));
338:       assertFalse(node0.isSetterDef());
339:       assertEquals(0, node0.getChildCount());
340:       assertFalse(node0.isCatch());
341:       assertFalse(node0.isStringKey());
342:       assertFalse(node0.isCall());
343:       assertFalse(node0.isName());
344:       assertFalse(node0.isNull());
345:       assertFalse(node0.isParamList());
346:       assertFalse(node0.isTrue());
347:       assertFalse(node0.isAdd());
348:       assertFalse(node0.isFunction());
349:       assertFalse(node0.isNew());
350:       assertFalse(node0.isDo());
351:       assertFalse(node0.isDefaultCase());
352:       assertFalse(node0.isAssignAdd());
353:       assertFalse(node0.isVar());
354:       assertFalse(node0.isLabel());
355:       assertEquals((-1), node0.getLineno());
356:       assertFalse(node0.isIn());
357:       assertFalse(node0.isGetterDef());
358:       assertFalse(node0.hasMoreThanOneChild());
359:       assertFalse(node0.isLabelName());
360:       assertFalse(node0.isArrayLit());
361:       assertFalse(node0.isIf());
362:       assertFalse(node0.isSwitch());
363:       assertFalse(node0.isNE());
364:       assertFalse(node0.isBlock());
365:       assertFalse(node0.isTry());
366:       assertEquals((-1), node0.getCharno());
367:       assertFalse(node0.isScript());
368:       assertFalse(node0.isRegExp());
369:       assertFalse(node0.isWith());
370:       assertFalse(node0.isFor());
371:       assertEquals(39, node0.getType());
372:       assertFalse(node0.isCase());
373:       assertFalse(node0.isHook());
374:       assertFalse(node0.hasOneChild());
375:       assertFalse(node0.isGetProp());
376:       assertFalse(node0.isThis());
377:       assertFalse(node0.isComma());
378:       assertFalse(node0.isBreak());
379:       assertFalse(node0.isInstanceOf());
380:       assertFalse(node0.isObjectLit());
381:       assertFalse(node0.isNot());
382:       assertFalse(node0.isAnd());
383:       assertFalse(node0.isInc());
384:       assertFalse(node0.isCast());
385:       assertFalse(node0.isThrow());
386:       assertFalse(node0.isFalse());
387:       assertFalse(node0.isOr());
388:       assertTrue(node0.isNumber());
389:       assertEquals((-1), node0.getSourcePosition());
390:       assertFalse(node0.isDec());
391:       assertFalse(node0.isTypeOf());
392:       assertFalse(node0.isEmpty());
393:       assertFalse(node0.isContinue());
394:       assertFalse(node0.isGetElem());
395:       assertFalse(node0.isDelProp());
396:       assertFalse(node0.isVoid());
397:       assertFalse(node0.isExprResult());
398:       assertFalse(node0.isDebugger());
399:       assertFalse(node0.isString());
400:       assertFalse(node0.isAssign());
401:       assertFalse(node0.hasChildren());
402:       assertFalse(node0.isReturn());
403:       assertFalse(node0.isWhile());
404:       assertFalse(node1.isIf());
405:       assertFalse(node1.isEmpty());
406:       assertFalse(node1.isNE());
407:       assertTrue(node1.hasOneChild());
408:       assertFalse(node1.isFor());
409:       assertFalse(node1.isGetterDef());
410:       assertFalse(node1.isIn());
411:       assertEquals(1, node1.getChildCount());
412:       assertFalse(node1.isCase());
413:       assertFalse(node1.isTry());
414:       assertFalse(node1.isDefaultCase());
415:       assertFalse(node1.isString());
416:       assertFalse(node1.isDebugger());
417:       assertFalse(node1.isFunction());
418:       assertFalse(node1.isArrayLit());
419:       assertEquals(0, node1.getLineno());
420:       assertFalse(node1.isParamList());
421:       assertFalse(node1.isSwitch());
422:       assertFalse(node1.isBreak());
423:       assertFalse(node1.isNull());
424:       assertFalse(node1.isComma());
425:       assertFalse(node1.isVar());
426:       assertFalse(node1.isAdd());
427:       assertFalse(node1.isGetProp());
428:       assertFalse(node1.isNew());
429:       assertFalse(node1.isWhile());
430:       assertEquals(64, node1.getCharno());
431:       assertFalse(node1.isExprResult());
432:       assertFalse(node1.isTrue());
433:       assertFalse(node1.isCall());
434:       assertFalse(node1.isVoid());
435:       assertFalse(node1.isDelProp());
436:       assertFalse(node1.isName());
437:       assertFalse(node1.isDec());
438:       assertFalse(node1.isNumber());
439:       assertFalse(node1.isGetElem());
440:       assertFalse(node1.isAssign());
441:       assertFalse(node1.isOr());
442:       assertFalse(node1.isTypeOf());
443:       assertFalse(node1.isLabel());
444:       assertFalse(node1.isReturn());
445:       assertFalse(node1.isAssignAdd());
446:       assertFalse(node1.isDo());
447:       assertFalse(node1.isScript());
448:       assertFalse(node1.isContinue());
449:       assertFalse(node1.isNot());
450:       assertFalse(node1.isObjectLit());
451:       assertFalse(node1.isCast());
452:       assertFalse(node1.isStringKey());
453:       assertFalse(node1.isAnd());
454:       assertFalse(node1.isLabelName());
455:       assertEquals(64, node1.getSourcePosition());
456:       assertFalse(node1.isSetterDef());
457:       assertFalse(node1.isThis());
458:       assertEquals(56, node1.getType());
459:       assertFalse(node1.isFalse());
460:       assertFalse(node1.isHook());
461:       assertFalse(node1.isBlock());
462:       assertFalse(node1.isThrow());
463:       assertFalse(node1.isInc());
464:       assertFalse(node1.isWith());
465:       assertFalse(node1.hasMoreThanOneChild());
466:       assertFalse(node1.isRegExp());
467:       assertFalse(node1.isInstanceOf());
468:       assertFalse(node1.isCatch());
469:       assertTrue(node1.hasChildren());
470:       assertNotNull(node1);
471:       assertEquals(52, Node.LENGTH);
472:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
473:       assertEquals(54, Node.SLASH_V);
474:       assertEquals(57, Node.REFLECTED_OBJECT);
475:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
476:       assertEquals(30, Node.VAR_ARGS_NAME);
477:       assertEquals(49, Node.DIRECT_EVAL);
478:       assertEquals(48, Node.DIRECTIVES);
479:       assertEquals(40, Node.ORIGINALNAME_PROP);
480:       assertEquals(51, Node.STATIC_SOURCE_FILE);
481:       assertEquals(4095, Node.COLUMN_MASK);
482:       assertEquals(32, Node.INCRDECR_PROP);
483:       assertEquals(12, Node.COLUMN_BITS);
484:       assertEquals(46, Node.IS_NAMESPACE);
485:       assertEquals(50, Node.FREE_CALL);
486:       assertEquals(1, Node.DECR_FLAG);
487:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
488:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
489:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
490:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
491:       assertEquals(56, Node.CHANGE_TIME);
492:       assertEquals(47, Node.IS_DISPATCHER);
493:       assertEquals(43, Node.IS_CONSTANT_NAME);
494:       assertEquals(2, Node.POST_FLAG);
495:       assertEquals(37, Node.OPT_ARG_NAME);
496:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
497:       assertEquals(15, Node.NO_SIDE_EFFECTS);
498:       assertEquals(57, Node.LAST_PROP);
499:       assertEquals(36, Node.QUOTED_PROP);
500:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
501:       assertEquals(8, Node.FLAG_NO_THROWS);
502:       assertEquals(55, Node.INFERRED_FUNCTION);
503:       assertEquals(39, Node.EMPTY_BLOCK);
504:       assertEquals(29, Node.JSDOC_INFO_PROP);
505:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
506:       assertEquals(53, Node.INPUT_ID);
507:       assertEquals(53, Node.INPUT_ID);
508:       assertEquals(36, Node.QUOTED_PROP);
509:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
510:       assertEquals(43, Node.IS_CONSTANT_NAME);
511:       assertEquals(29, Node.JSDOC_INFO_PROP);
512:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
513:       assertEquals(55, Node.INFERRED_FUNCTION);
514:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
515:       assertEquals(48, Node.DIRECTIVES);
516:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
517:       assertEquals(37, Node.OPT_ARG_NAME);
518:       assertEquals(56, Node.CHANGE_TIME);
519:       assertEquals(12, Node.COLUMN_BITS);
520:       assertEquals(32, Node.INCRDECR_PROP);
521:       assertEquals(49, Node.DIRECT_EVAL);
522:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
523:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
524:       assertEquals(4095, Node.COLUMN_MASK);
525:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
526:       assertEquals(54, Node.SLASH_V);
527:       assertEquals(57, Node.LAST_PROP);
528:       assertEquals(57, Node.REFLECTED_OBJECT);
529:       assertEquals(1, Node.DECR_FLAG);
530:       assertEquals(50, Node.FREE_CALL);
531:       assertEquals(51, Node.STATIC_SOURCE_FILE);
532:       assertEquals(15, Node.NO_SIDE_EFFECTS);
533:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
534:       assertEquals(52, Node.LENGTH);
535:       assertEquals(8, Node.FLAG_NO_THROWS);
536:       assertEquals(2, Node.POST_FLAG);
537:       assertEquals(39, Node.EMPTY_BLOCK);
538:       assertEquals(47, Node.IS_DISPATCHER);
539:       assertEquals(46, Node.IS_NAMESPACE);
540:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
541:       assertEquals(40, Node.ORIGINALNAME_PROP);
542:       assertEquals(30, Node.VAR_ARGS_NAME);
543:       
544:       Node node2 = node0.useSourceInfoFromForTree(node1);
545:       assertFalse(node0.equals((Object)node1));
546:       assertFalse(node1.equals((Object)node0));
547:       assertFalse(node2.equals((Object)node1));
548:       assertEquals(0, node0.getLineno());
549:       assertFalse(node0.isSetterDef());
550:       assertEquals(0, node0.getChildCount());
551:       assertFalse(node0.isCatch());
552:       assertFalse(node0.isStringKey());
553:       assertFalse(node0.isCall());
554:       assertFalse(node0.isName());
555:       assertFalse(node0.isNull());
556:       assertFalse(node0.isParamList());
557:       assertFalse(node0.isTrue());
558:       assertFalse(node0.isAdd());
559:       assertFalse(node0.isFunction());
560:       assertEquals(64, node0.getCharno());
561:       assertFalse(node0.isNew());
562:       assertFalse(node0.isDo());
563:       assertFalse(node0.isDefaultCase());
564:       assertFalse(node0.isAssignAdd());
565:       assertFalse(node0.isVar());
566:       assertFalse(node0.isLabel());
567:       assertFalse(node0.isIn());
568:       assertFalse(node0.isGetterDef());
569:       assertFalse(node0.hasMoreThanOneChild());
570:       assertFalse(node0.isLabelName());
571:       assertFalse(node0.isArrayLit());
572:       assertFalse(node0.isIf());
573:       assertFalse(node0.isSwitch());
574:       assertFalse(node0.isNE());
575:       assertFalse(node0.isBlock());
576:       assertFalse(node0.isTry());
577:       assertFalse(node0.isScript());
578:       assertFalse(node0.isRegExp());
579:       assertFalse(node0.isWith());
580:       assertFalse(node0.isFor());
581:       assertEquals(39, node0.getType());
582:       assertFalse(node0.isCase());
583:       assertFalse(node0.isHook());
584:       assertFalse(node0.hasOneChild());
585:       assertFalse(node0.isGetProp());
586:       assertFalse(node0.isThis());
587:       assertFalse(node0.isComma());
588:       assertFalse(node0.isBreak());
589:       assertFalse(node0.isInstanceOf());
590:       assertFalse(node0.isObjectLit());
591:       assertFalse(node0.isNot());
592:       assertEquals(64, node0.getSourcePosition());
593:       assertFalse(node0.isAnd());
594:       assertFalse(node0.isInc());
595:       assertFalse(node0.isCast());
596:       assertFalse(node0.isThrow());
597:       assertFalse(node0.isFalse());
598:       assertFalse(node0.isOr());
599:       assertTrue(node0.isNumber());
600:       assertFalse(node0.isDec());
601:       assertFalse(node0.isTypeOf());
602:       assertFalse(node0.isEmpty());
603:       assertFalse(node0.isContinue());
604:       assertFalse(node0.isGetElem());
605:       assertFalse(node0.isDelProp());
606:       assertFalse(node0.isVoid());
607:       assertFalse(node0.isExprResult());
608:       assertFalse(node0.isDebugger());
609:       assertFalse(node0.isString());
610:       assertFalse(node0.isAssign());
611:       assertFalse(node0.hasChildren());
612:       assertFalse(node0.isReturn());
613:       assertFalse(node0.isWhile());
614:       assertFalse(node1.isIf());
615:       assertFalse(node1.isEmpty());
616:       assertFalse(node1.isNE());
617:       assertTrue(node1.hasOneChild());
618:       assertFalse(node1.isFor());
619:       assertFalse(node1.isGetterDef());
620:       assertFalse(node1.isIn());
621:       assertEquals(1, node1.getChildCount());
622:       assertFalse(node1.isCase());
623:       assertFalse(node1.isTry());
624:       assertFalse(node1.isDefaultCase());
625:       assertFalse(node1.isString());
626:       assertFalse(node1.isDebugger());
627:       assertFalse(node1.isFunction());
628:       assertFalse(node1.isArrayLit());
629:       assertEquals(0, node1.getLineno());
630:       assertFalse(node1.isParamList());
631:       assertFalse(node1.isSwitch());
632:       assertFalse(node1.isBreak());
633:       assertFalse(node1.isNull());
634:       assertFalse(node1.isComma());
635:       assertFalse(node1.isVar());
636:       assertFalse(node1.isAdd());
637:       assertFalse(node1.isGetProp());
638:       assertFalse(node1.isNew());
639:       assertFalse(node1.isWhile());
640:       assertEquals(64, node1.getCharno());
641:       assertFalse(node1.isExprResult());
642:       assertFalse(node1.isTrue());
643:       assertFalse(node1.isCall());
644:       assertFalse(node1.isVoid());
645:       assertFalse(node1.isDelProp());
646:       assertFalse(node1.isName());
647:       assertFalse(node1.isDec());
648:       assertFalse(node1.isNumber());
649:       assertFalse(node1.isGetElem());
650:       assertFalse(node1.isAssign());
651:       assertFalse(node1.isOr());
652:       assertFalse(node1.isTypeOf());
653:       assertFalse(node1.isLabel());
654:       assertFalse(node1.isReturn());
655:       assertFalse(node1.isAssignAdd());
656:       assertFalse(node1.isDo());
657:       assertFalse(node1.isScript());
658:       assertFalse(node1.isContinue());
659:       assertFalse(node1.isNot());
660:       assertFalse(node1.isObjectLit());
661:       assertFalse(node1.isCast());
662:       assertFalse(node1.isStringKey());
663:       assertFalse(node1.isAnd());
664:       assertFalse(node1.isLabelName());
665:       assertEquals(64, node1.getSourcePosition());
666:       assertFalse(node1.isSetterDef());
667:       assertFalse(node1.isThis());
668:       assertEquals(56, node1.getType());
669:       assertFalse(node1.isFalse());
670:       assertFalse(node1.isHook());
671:       assertFalse(node1.isBlock());
672:       assertFalse(node1.isThrow());
673:       assertFalse(node1.isInc());
674:       assertFalse(node1.isWith());
675:       assertFalse(node1.hasMoreThanOneChild());
676:       assertFalse(node1.isRegExp());
677:       assertFalse(node1.isInstanceOf());
678:       assertFalse(node1.isCatch());
679:       assertTrue(node1.hasChildren());
680:       assertFalse(node2.isNE());
681:       assertFalse(node2.isIf());
682:       assertTrue(node2.isNumber());
683:       assertFalse(node2.isDelProp());
684:       assertFalse(node2.isCase());
685:       assertFalse(node2.isEmpty());
686:       assertFalse(node2.isIn());
687:       assertFalse(node2.isString());
688:       assertFalse(node2.isGetterDef());
689:       assertEquals(64, node2.getCharno());
690:       assertFalse(node2.isTrue());
691:       assertFalse(node2.isVoid());
692:       assertFalse(node2.isTry());
693:       assertFalse(node2.isCatch());
694:       assertFalse(node2.isFor());
695:       assertFalse(node2.isHook());
696:       assertFalse(node2.isComma());
697:       assertFalse(node2.isRegExp());
698:       assertFalse(node2.isParamList());
699:       assertFalse(node2.isThis());
700:       assertFalse(node2.isNull());
701:       assertFalse(node2.isBreak());
702:       assertFalse(node2.isName());
703:       assertFalse(node2.isStringKey());
704:       assertFalse(node2.isNew());
705:       assertFalse(node2.isAdd());
706:       assertFalse(node2.isDefaultCase());
707:       assertFalse(node2.isArrayLit());
708:       assertFalse(node2.isSwitch());
709:       assertFalse(node2.isDo());
710:       assertFalse(node2.isVar());
711:       assertEquals(0, node2.getChildCount());
712:       assertFalse(node2.isLabel());
713:       assertFalse(node2.isAssignAdd());
714:       assertFalse(node2.isReturn());
715:       assertFalse(node2.isLabelName());
716:       assertFalse(node2.isOr());
717:       assertFalse(node2.isScript());
718:       assertFalse(node2.isExprResult());
719:       assertFalse(node2.isBlock());
720:       assertFalse(node2.hasOneChild());
721:       assertFalse(node2.isWhile());
722:       assertFalse(node2.isGetElem());
723:       assertEquals(39, node2.getType());
724:       assertFalse(node2.isCall());
725:       assertFalse(node2.isInstanceOf());
726:       assertFalse(node2.isDec());
727:       assertFalse(node2.hasChildren());
728:       assertFalse(node2.isWith());
729:       assertFalse(node2.isAssign());
730:       assertFalse(node2.hasMoreThanOneChild());
731:       assertFalse(node2.isTypeOf());
732:       assertFalse(node2.isGetProp());
733:       assertEquals(0, node2.getLineno());
734:       assertFalse(node2.isSetterDef());
735:       assertFalse(node2.isAnd());
736:       assertEquals(64, node2.getSourcePosition());
737:       assertFalse(node2.isObjectLit());
738:       assertFalse(node2.isNot());
739:       assertFalse(node2.isDebugger());
740:       assertFalse(node2.isInc());
741:       assertFalse(node2.isThrow());
742:       assertFalse(node2.isFalse());
743:       assertFalse(node2.isContinue());
744:       assertFalse(node2.isCast());
745:       assertFalse(node2.isFunction());
746:       assertNotNull(node2);
747:       assertSame(node0, node2);
748:       assertSame(node2, node0);
749:       assertEquals(52, Node.LENGTH);
750:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
751:       assertEquals(54, Node.SLASH_V);
752:       assertEquals(57, Node.REFLECTED_OBJECT);
753:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
754:       assertEquals(30, Node.VAR_ARGS_NAME);
755:       assertEquals(49, Node.DIRECT_EVAL);
756:       assertEquals(48, Node.DIRECTIVES);
757:       assertEquals(40, Node.ORIGINALNAME_PROP);
758:       assertEquals(51, Node.STATIC_SOURCE_FILE);
759:       assertEquals(4095, Node.COLUMN_MASK);
760:       assertEquals(32, Node.INCRDECR_PROP);
761:       assertEquals(12, Node.COLUMN_BITS);
762:       assertEquals(46, Node.IS_NAMESPACE);
763:       assertEquals(50, Node.FREE_CALL);
764:       assertEquals(1, Node.DECR_FLAG);
765:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
766:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
767:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
768:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
769:       assertEquals(56, Node.CHANGE_TIME);
770:       assertEquals(47, Node.IS_DISPATCHER);
771:       assertEquals(43, Node.IS_CONSTANT_NAME);
772:       assertEquals(2, Node.POST_FLAG);
773:       assertEquals(37, Node.OPT_ARG_NAME);
774:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
775:       assertEquals(15, Node.NO_SIDE_EFFECTS);
776:       assertEquals(57, Node.LAST_PROP);
777:       assertEquals(36, Node.QUOTED_PROP);
778:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
779:       assertEquals(8, Node.FLAG_NO_THROWS);
780:       assertEquals(55, Node.INFERRED_FUNCTION);
781:       assertEquals(39, Node.EMPTY_BLOCK);
782:       assertEquals(29, Node.JSDOC_INFO_PROP);
783:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
784:       assertEquals(53, Node.INPUT_ID);
785:       assertEquals(53, Node.INPUT_ID);
786:       assertEquals(36, Node.QUOTED_PROP);
787:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
788:       assertEquals(43, Node.IS_CONSTANT_NAME);
789:       assertEquals(29, Node.JSDOC_INFO_PROP);
790:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
791:       assertEquals(55, Node.INFERRED_FUNCTION);
792:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
793:       assertEquals(48, Node.DIRECTIVES);
794:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
795:       assertEquals(37, Node.OPT_ARG_NAME);
796:       assertEquals(56, Node.CHANGE_TIME);
797:       assertEquals(12, Node.COLUMN_BITS);
798:       assertEquals(32, Node.INCRDECR_PROP);
799:       assertEquals(49, Node.DIRECT_EVAL);
800:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
801:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
802:       assertEquals(4095, Node.COLUMN_MASK);
803:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
804:       assertEquals(54, Node.SLASH_V);
805:       assertEquals(57, Node.LAST_PROP);
806:       assertEquals(57, Node.REFLECTED_OBJECT);
807:       assertEquals(1, Node.DECR_FLAG);
808:       assertEquals(50, Node.FREE_CALL);
809:       assertEquals(51, Node.STATIC_SOURCE_FILE);
810:       assertEquals(15, Node.NO_SIDE_EFFECTS);
811:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
812:       assertEquals(52, Node.LENGTH);
813:       assertEquals(8, Node.FLAG_NO_THROWS);
814:       assertEquals(2, Node.POST_FLAG);
815:       assertEquals(39, Node.EMPTY_BLOCK);
816:       assertEquals(47, Node.IS_DISPATCHER);
817:       assertEquals(46, Node.IS_NAMESPACE);
818:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
819:       assertEquals(40, Node.ORIGINALNAME_PROP);
820:       assertEquals(30, Node.VAR_ARGS_NAME);
821:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
822:       assertEquals(29, Node.JSDOC_INFO_PROP);
823:       assertEquals(53, Node.INPUT_ID);
824:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
825:       assertEquals(43, Node.IS_CONSTANT_NAME);
826:       assertEquals(56, Node.CHANGE_TIME);
827:       assertEquals(37, Node.OPT_ARG_NAME);
828:       assertEquals(36, Node.QUOTED_PROP);
829:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
830:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
831:       assertEquals(55, Node.INFERRED_FUNCTION);
832:       assertEquals(8, Node.FLAG_NO_THROWS);
833:       assertEquals(15, Node.NO_SIDE_EFFECTS);
834:       assertEquals(57, Node.LAST_PROP);
835:       assertEquals(47, Node.IS_DISPATCHER);
836:       assertEquals(2, Node.POST_FLAG);
837:       assertEquals(30, Node.VAR_ARGS_NAME);
838:       assertEquals(39, Node.EMPTY_BLOCK);
839:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
840:       assertEquals(57, Node.REFLECTED_OBJECT);
841:       assertEquals(40, Node.ORIGINALNAME_PROP);
842:       assertEquals(50, Node.FREE_CALL);
843:       assertEquals(52, Node.LENGTH);
844:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
845:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
846:       assertEquals(48, Node.DIRECTIVES);
847:       assertEquals(49, Node.DIRECT_EVAL);
848:       assertEquals(54, Node.SLASH_V);
849:       assertEquals(51, Node.STATIC_SOURCE_FILE);
850:       assertEquals(12, Node.COLUMN_BITS);
851:       assertEquals(32, Node.INCRDECR_PROP);
852:       assertEquals(46, Node.IS_NAMESPACE);
853:       assertEquals(4095, Node.COLUMN_MASK);
854:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
855:       assertEquals(1, Node.DECR_FLAG);
856:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
857:       
858:       node1.setLineno(48);
859:       assertFalse(node0.equals((Object)node1));
860:       assertFalse(node1.equals((Object)node2));
861:       assertFalse(node1.equals((Object)node0));
862:       assertEquals(0, node0.getLineno());
863:       assertFalse(node0.isSetterDef());
864:       assertEquals(0, node0.getChildCount());
865:       assertFalse(node0.isCatch());
866:       assertFalse(node0.isStringKey());
867:       assertFalse(node0.isCall());
868:       assertFalse(node0.isName());
869:       assertFalse(node0.isNull());
870:       assertFalse(node0.isParamList());
871:       assertFalse(node0.isTrue());
872:       assertFalse(node0.isAdd());
873:       assertFalse(node0.isFunction());
874:       assertEquals(64, node0.getCharno());
875:       assertFalse(node0.isNew());
876:       assertFalse(node0.isDo());
877:       assertFalse(node0.isDefaultCase());
878:       assertFalse(node0.isAssignAdd());
879:       assertFalse(node0.isVar());
880:       assertFalse(node0.isLabel());
881:       assertFalse(node0.isIn());
882:       assertFalse(node0.isGetterDef());
883:       assertFalse(node0.hasMoreThanOneChild());
884:       assertFalse(node0.isLabelName());
885:       assertFalse(node0.isArrayLit());
886:       assertFalse(node0.isIf());
887:       assertFalse(node0.isSwitch());
888:       assertFalse(node0.isNE());
889:       assertFalse(node0.isBlock());
890:       assertFalse(node0.isTry());
891:       assertFalse(node0.isScript());
892:       assertFalse(node0.isRegExp());
893:       assertFalse(node0.isWith());
894:       assertFalse(node0.isFor());
895:       assertEquals(39, node0.getType());
896:       assertFalse(node0.isCase());
897:       assertFalse(node0.isHook());
898:       assertFalse(node0.hasOneChild());
899:       assertFalse(node0.isGetProp());
900:       assertFalse(node0.isThis());
901:       assertFalse(node0.isComma());
902:       assertFalse(node0.isBreak());
903:       assertFalse(node0.isInstanceOf());
904:       assertFalse(node0.isObjectLit());
905:       assertFalse(node0.isNot());
906:       assertEquals(64, node0.getSourcePosition());
907:       assertFalse(node0.isAnd());
908:       assertFalse(node0.isInc());
909:       assertFalse(node0.isCast());
910:       assertFalse(node0.isThrow());
911:       assertFalse(node0.isFalse());
912:       assertFalse(node0.isOr());
913:       assertTrue(node0.isNumber());
914:       assertFalse(node0.isDec());
915:       assertFalse(node0.isTypeOf());
916:       assertFalse(node0.isEmpty());
917:       assertFalse(node0.isContinue());
918:       assertFalse(node0.isGetElem());
919:       assertFalse(node0.isDelProp());
920:       assertFalse(node0.isVoid());
921:       assertFalse(node0.isExprResult());
922:       assertFalse(node0.isDebugger());
923:       assertFalse(node0.isString());
924:       assertFalse(node0.isAssign());
925:       assertFalse(node0.hasChildren());
926:       assertFalse(node0.isReturn());
927:       assertFalse(node0.isWhile());
928:       assertFalse(node1.isIf());
929:       assertFalse(node1.isEmpty());
930:       assertFalse(node1.isNE());
931:       assertTrue(node1.hasOneChild());
932:       assertFalse(node1.isFor());
933:       assertFalse(node1.isGetterDef());
934:       assertFalse(node1.isIn());
935:       assertEquals(1, node1.getChildCount());
936:       assertFalse(node1.isCase());
937:       assertFalse(node1.isTry());
938:       assertFalse(node1.isDefaultCase());
939:       assertFalse(node1.isString());
940:       assertFalse(node1.isDebugger());
941:       assertFalse(node1.isFunction());
942:       assertFalse(node1.isArrayLit());
943:       assertFalse(node1.isParamList());
944:       assertFalse(node1.isSwitch());
945:       assertFalse(node1.isBreak());
946:       assertFalse(node1.isNull());
947:       assertFalse(node1.isComma());
948:       assertFalse(node1.isVar());
949:       assertFalse(node1.isAdd());
950:       assertFalse(node1.isGetProp());
951:       assertFalse(node1.isNew());
952:       assertFalse(node1.isWhile());
953:       assertEquals(64, node1.getCharno());
954:       assertFalse(node1.isExprResult());
955:       assertFalse(node1.isTrue());
956:       assertFalse(node1.isCall());
957:       assertFalse(node1.isVoid());
958:       assertFalse(node1.isDelProp());
959:       assertFalse(node1.isName());
960:       assertFalse(node1.isDec());
961:       assertFalse(node1.isNumber());
962:       assertFalse(node1.isGetElem());
963:       assertFalse(node1.isAssign());
964:       assertFalse(node1.isOr());
965:       assertFalse(node1.isTypeOf());
966:       assertEquals(48, node1.getLineno());
967:       assertFalse(node1.isLabel());
968:       assertFalse(node1.isReturn());
969:       assertFalse(node1.isAssignAdd());
970:       assertFalse(node1.isDo());
971:       assertFalse(node1.isScript());
972:       assertFalse(node1.isContinue());
973:       assertFalse(node1.isNot());
974:       assertFalse(node1.isObjectLit());
975:       assertFalse(node1.isCast());
976:       assertFalse(node1.isStringKey());
977:       assertFalse(node1.isAnd());
978:       assertEquals(196672, node1.getSourcePosition());
979:       assertFalse(node1.isLabelName());
980:       assertFalse(node1.isSetterDef());
981:       assertFalse(node1.isThis());
982:       assertEquals(56, node1.getType());
983:       assertFalse(node1.isFalse());
984:       assertFalse(node1.isHook());
985:       assertFalse(node1.isBlock());
986:       assertFalse(node1.isThrow());
987:       assertFalse(node1.isInc());
988:       assertFalse(node1.isWith());
989:       assertFalse(node1.hasMoreThanOneChild());
990:       assertFalse(node1.isRegExp());
991:       assertFalse(node1.isInstanceOf());
992:       assertFalse(node1.isCatch());
993:       assertTrue(node1.hasChildren());
994:       assertSame(node0, node2);
995:       assertEquals(52, Node.LENGTH);
996:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
997:       assertEquals(54, Node.SLASH_V);
998:       assertEquals(57, Node.REFLECTED_OBJECT);
999:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1000:       assertEquals(30, Node.VAR_ARGS_NAME);
1001:       assertEquals(49, Node.DIRECT_EVAL);
1002:       assertEquals(48, Node.DIRECTIVES);
1003:       assertEquals(40, Node.ORIGINALNAME_PROP);
1004:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1005:       assertEquals(4095, Node.COLUMN_MASK);
1006:       assertEquals(32, Node.INCRDECR_PROP);
1007:       assertEquals(12, Node.COLUMN_BITS);
1008:       assertEquals(46, Node.IS_NAMESPACE);
1009:       assertEquals(50, Node.FREE_CALL);
1010:       assertEquals(1, Node.DECR_FLAG);
1011:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1012:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1013:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1014:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1015:       assertEquals(56, Node.CHANGE_TIME);
1016:       assertEquals(47, Node.IS_DISPATCHER);
1017:       assertEquals(43, Node.IS_CONSTANT_NAME);
1018:       assertEquals(2, Node.POST_FLAG);
1019:       assertEquals(37, Node.OPT_ARG_NAME);
1020:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1021:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1022:       assertEquals(57, Node.LAST_PROP);
1023:       assertEquals(36, Node.QUOTED_PROP);
1024:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1025:       assertEquals(8, Node.FLAG_NO_THROWS);
1026:       assertEquals(55, Node.INFERRED_FUNCTION);
1027:       assertEquals(39, Node.EMPTY_BLOCK);
1028:       assertEquals(29, Node.JSDOC_INFO_PROP);
1029:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1030:       assertEquals(53, Node.INPUT_ID);
1031:       assertEquals(53, Node.INPUT_ID);
1032:       assertEquals(36, Node.QUOTED_PROP);
1033:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1034:       assertEquals(43, Node.IS_CONSTANT_NAME);
1035:       assertEquals(29, Node.JSDOC_INFO_PROP);
1036:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1037:       assertEquals(55, Node.INFERRED_FUNCTION);
1038:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1039:       assertEquals(48, Node.DIRECTIVES);
1040:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1041:       assertEquals(37, Node.OPT_ARG_NAME);
1042:       assertEquals(56, Node.CHANGE_TIME);
1043:       assertEquals(12, Node.COLUMN_BITS);
1044:       assertEquals(32, Node.INCRDECR_PROP);
1045:       assertEquals(49, Node.DIRECT_EVAL);
1046:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1047:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1048:       assertEquals(4095, Node.COLUMN_MASK);
1049:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1050:       assertEquals(54, Node.SLASH_V);
1051:       assertEquals(57, Node.LAST_PROP);
1052:       assertEquals(57, Node.REFLECTED_OBJECT);
1053:       assertEquals(1, Node.DECR_FLAG);
1054:       assertEquals(50, Node.FREE_CALL);
1055:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1056:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1057:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1058:       assertEquals(52, Node.LENGTH);
1059:       assertEquals(8, Node.FLAG_NO_THROWS);
1060:       assertEquals(2, Node.POST_FLAG);
1061:       assertEquals(39, Node.EMPTY_BLOCK);
1062:       assertEquals(47, Node.IS_DISPATCHER);
1063:       assertEquals(46, Node.IS_NAMESPACE);
1064:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1065:       assertEquals(40, Node.ORIGINALNAME_PROP);
1066:       assertEquals(30, Node.VAR_ARGS_NAME);
1067:       
1068:       Iterable<Node> iterable0 = node0.children();
1069:       assertFalse(node0.equals((Object)node1));
1070:       assertEquals(0, node0.getLineno());
1071:       assertFalse(node0.isSetterDef());
1072:       assertEquals(0, node0.getChildCount());
1073:       assertFalse(node0.isCatch());
1074:       assertFalse(node0.isStringKey());
1075:       assertFalse(node0.isCall());
1076:       assertFalse(node0.isName());
1077:       assertFalse(node0.isNull());
1078:       assertFalse(node0.isParamList());
1079:       assertFalse(node0.isTrue());
1080:       assertFalse(node0.isAdd());
1081:       assertFalse(node0.isFunction());
1082:       assertEquals(64, node0.getCharno());
1083:       assertFalse(node0.isNew());
1084:       assertFalse(node0.isDo());
1085:       assertFalse(node0.isDefaultCase());
1086:       assertFalse(node0.isAssignAdd());
1087:       assertFalse(node0.isVar());
1088:       assertFalse(node0.isLabel());
1089:       assertFalse(node0.isIn());
1090:       assertFalse(node0.isGetterDef());
1091:       assertFalse(node0.hasMoreThanOneChild());
1092:       assertFalse(node0.isLabelName());
1093:       assertFalse(node0.isArrayLit());
1094:       assertFalse(node0.isIf());
1095:       assertFalse(node0.isSwitch());
1096:       assertFalse(node0.isNE());
1097:       assertFalse(node0.isBlock());
1098:       assertFalse(node0.isTry());
1099:       assertFalse(node0.isScript());
1100:       assertFalse(node0.isRegExp());
1101:       assertFalse(node0.isWith());
1102:       assertFalse(node0.isFor());
1103:       assertEquals(39, node0.getType());
1104:       assertFalse(node0.isCase());
1105:       assertFalse(node0.isHook());
1106:       assertFalse(node0.hasOneChild());
1107:       assertFalse(node0.isGetProp());
1108:       assertFalse(node0.isThis());
1109:       assertFalse(node0.isComma());
1110:       assertFalse(node0.isBreak());
1111:       assertFalse(node0.isInstanceOf());
1112:       assertFalse(node0.isObjectLit());
1113:       assertFalse(node0.isNot());
1114:       assertEquals(64, node0.getSourcePosition());
1115:       assertFalse(node0.isAnd());
1116:       assertFalse(node0.isInc());
1117:       assertFalse(node0.isCast());
1118:       assertFalse(node0.isThrow());
1119:       assertFalse(node0.isFalse());
1120:       assertFalse(node0.isOr());
1121:       assertTrue(node0.isNumber());
1122:       assertFalse(node0.isDec());
1123:       assertFalse(node0.isTypeOf());
1124:       assertFalse(node0.isEmpty());
1125:       assertFalse(node0.isContinue());
1126:       assertFalse(node0.isGetElem());
1127:       assertFalse(node0.isDelProp());
1128:       assertFalse(node0.isVoid());
1129:       assertFalse(node0.isExprResult());
1130:       assertFalse(node0.isDebugger());
1131:       assertFalse(node0.isString());
1132:       assertFalse(node0.isAssign());
1133:       assertFalse(node0.hasChildren());
1134:       assertFalse(node0.isReturn());
1135:       assertFalse(node0.isWhile());
1136:       assertNotNull(iterable0);
1137:       assertSame(node0, node2);
1138:       assertFalse(iterable0.contains(node2));
1139:       assertEquals(52, Node.LENGTH);
1140:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1141:       assertEquals(54, Node.SLASH_V);
1142:       assertEquals(57, Node.REFLECTED_OBJECT);
1143:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1144:       assertEquals(30, Node.VAR_ARGS_NAME);
1145:       assertEquals(49, Node.DIRECT_EVAL);
1146:       assertEquals(48, Node.DIRECTIVES);
1147:       assertEquals(40, Node.ORIGINALNAME_PROP);
1148:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1149:       assertEquals(4095, Node.COLUMN_MASK);
1150:       assertEquals(32, Node.INCRDECR_PROP);
1151:       assertEquals(12, Node.COLUMN_BITS);
1152:       assertEquals(46, Node.IS_NAMESPACE);
1153:       assertEquals(50, Node.FREE_CALL);
1154:       assertEquals(1, Node.DECR_FLAG);
1155:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1156:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1157:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1158:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1159:       assertEquals(56, Node.CHANGE_TIME);
1160:       assertEquals(47, Node.IS_DISPATCHER);
1161:       assertEquals(43, Node.IS_CONSTANT_NAME);
1162:       assertEquals(2, Node.POST_FLAG);
1163:       assertEquals(37, Node.OPT_ARG_NAME);
1164:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1165:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1166:       assertEquals(57, Node.LAST_PROP);
1167:       assertEquals(36, Node.QUOTED_PROP);
1168:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1169:       assertEquals(8, Node.FLAG_NO_THROWS);
1170:       assertEquals(55, Node.INFERRED_FUNCTION);
1171:       assertEquals(39, Node.EMPTY_BLOCK);
1172:       assertEquals(29, Node.JSDOC_INFO_PROP);
1173:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1174:       assertEquals(53, Node.INPUT_ID);
1175:       
1176:       // Undeclared exception!
1177:       try { 
1178:         node2.addChildrenToFront(node0);
1179:         fail("Expecting exception: IllegalArgumentException");
1180:       
1181:       } catch(IllegalArgumentException e) {
1182:          //
1183:          // no message in exception (getMessage() returned null)
1184:          //
1185:          verifyException("com.google.common.base.Preconditions", e);
1186:       }
1187:   }
1188: }
RegularFileObject[/tmp/EvoSuite_90_1628156923657/com/google/javascript/rhino/Node_90_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:48:43 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_90_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_90_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_90_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.common.base.Preconditions",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.SimpleErrorReporter",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.JSDocInfo",
339:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
344:       "com.google.common.collect.AbstractIndexedListIterator",
345:       "com.google.common.collect.Iterators$11",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.Node$AncestorIterable$1",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.JSTypeExpression",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.jstype.TemplatizedType",
354:       "com.google.common.collect.AbstractMultimap$Values",
355:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
356:       "com.google.common.collect.AbstractMapBasedMultimap$1",
357:       "com.google.common.collect.Multimaps$Entries",
358:       "com.google.common.collect.AbstractMultimap$Entries",
359:       "com.google.common.collect.AbstractMapBasedMultimap$2",
360:       "com.google.common.collect.Iterables",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
366:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
367:       "com.google.javascript.rhino.jstype.JSType$2",
368:       "com.google.javascript.rhino.jstype.JSType$TypePair",
369:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
370:       "com.google.javascript.rhino.JSDocInfo$Marker",
371:       "com.google.common.collect.Iterators$12",
372:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
373:       "com.google.javascript.rhino.JSDocInfo$Visibility"
374:     );
375:   }
376: }

[MASTER] 09:48:43.934 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((-1.0));
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertEquals(39, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertNotNull(node0);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);

boolean boolean0 = node0.isOnlyModifiesThisCall();
assertFalse(boolean0);
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertEquals(39, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);

Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertEquals(39, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertNotNull(node_AncestorIterable0);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);

Node node1 = new Node(56, node0, 0, 64);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertEquals(39, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getLineno());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertEquals(64, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isScript());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertEquals(64, node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertEquals(56, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertNotNull(node1);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);

Node node2 = node0.useSourceInfoFromForTree(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(0, node0.getLineno());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertEquals(64, node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertEquals(39, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(64, node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getLineno());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertEquals(64, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isScript());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertEquals(64, node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertEquals(56, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertTrue(node2.isNumber());
assertFalse(node2.isDelProp());
assertFalse(node2.isCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertEquals(64, node2.getCharno());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isCatch());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertFalse(node2.isRegExp());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isDo());
assertFalse(node2.isVar());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isLabelName());
assertFalse(node2.isOr());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isBlock());
assertFalse(node2.hasOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isGetElem());
assertEquals(39, node2.getType());
assertFalse(node2.isCall());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isWith());
assertFalse(node2.isAssign());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isGetProp());
assertEquals(0, node2.getLineno());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAnd());
assertEquals(64, node2.getSourcePosition());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertNotNull(node2);
assertSame(node0, node2);
assertSame(node2, node0);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

node1.setLineno(48);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(0, node0.getLineno());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertEquals(64, node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertEquals(39, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(64, node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertEquals(64, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertEquals(48, node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isScript());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertEquals(196672, node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertEquals(56, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertSame(node0, node2);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertEquals(0, node0.getLineno());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertEquals(64, node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertEquals(39, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(64, node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertNotNull(iterable0);
assertSame(node0, node2);
assertFalse(iterable0.contains(node2));
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);

node2.addChildrenToFront(node0);

[MASTER] 09:48:44.291 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_98_1628156924272/com/google/javascript/rhino/Node_98_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_98_1628156924272/com/google/javascript/rhino/Node_98_tmp__ESTest_scaffolding.java]]
[MASTER] 09:48:44.291 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:48:44.291 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:48:44.291 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 193
[MASTER] 09:48:44.292 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_98_1628156924272/com/google/javascript/rhino/Node_98_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:48:44 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_98_tmp__ESTest extends Node_98_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(123, 123, 123);
21:       assertFalse(node0.isArrayLit());
22:       assertFalse(node0.isDebugger());
23:       assertFalse(node0.isGetterDef());
24:       assertFalse(node0.isFunction());
25:       assertFalse(node0.isRegExp());
26:       assertFalse(node0.isDefaultCase());
27:       assertFalse(node0.isEmpty());
28:       assertFalse(node0.isFor());
29:       assertFalse(node0.isTry());
30:       assertEquals(0, node0.getChildCount());
31:       assertFalse(node0.isStringKey());
32:       assertFalse(node0.isParamList());
33:       assertFalse(node0.isSwitch());
34:       assertEquals(123, node0.getType());
35:       assertFalse(node0.isHook());
36:       assertEquals(123, node0.getCharno());
37:       assertFalse(node0.isBlock());
38:       assertFalse(node0.isFalse());
39:       assertEquals(503931, node0.getSourcePosition());
40:       assertFalse(node0.isSetterDef());
41:       assertFalse(node0.isThis());
42:       assertFalse(node0.isInc());
43:       assertFalse(node0.isThrow());
44:       assertFalse(node0.isCase());
45:       assertFalse(node0.isInstanceOf());
46:       assertFalse(node0.isIn());
47:       assertFalse(node0.isCatch());
48:       assertFalse(node0.isWith());
49:       assertFalse(node0.hasMoreThanOneChild());
50:       assertFalse(node0.isIf());
51:       assertFalse(node0.isNE());
52:       assertEquals(123, node0.getLineno());
53:       assertFalse(node0.hasOneChild());
54:       assertFalse(node0.isCast());
55:       assertFalse(node0.isAssign());
56:       assertFalse(node0.isDec());
57:       assertFalse(node0.isNumber());
58:       assertFalse(node0.hasChildren());
59:       assertFalse(node0.isScript());
60:       assertFalse(node0.isAssignAdd());
61:       assertFalse(node0.isLabel());
62:       assertFalse(node0.isContinue());
63:       assertFalse(node0.isNot());
64:       assertFalse(node0.isObjectLit());
65:       assertFalse(node0.isAnd());
66:       assertFalse(node0.isLabelName());
67:       assertFalse(node0.isVar());
68:       assertFalse(node0.isAdd());
69:       assertFalse(node0.isCall());
70:       assertFalse(node0.isString());
71:       assertFalse(node0.isWhile());
72:       assertFalse(node0.isGetProp());
73:       assertFalse(node0.isNew());
74:       assertFalse(node0.isDo());
75:       assertFalse(node0.isReturn());
76:       assertFalse(node0.isComma());
77:       assertFalse(node0.isOr());
78:       assertFalse(node0.isTypeOf());
79:       assertFalse(node0.isBreak());
80:       assertFalse(node0.isExprResult());
81:       assertFalse(node0.isTrue());
82:       assertFalse(node0.isGetElem());
83:       assertFalse(node0.isNull());
84:       assertFalse(node0.isVoid());
85:       assertFalse(node0.isDelProp());
86:       assertFalse(node0.isName());
87:       assertNotNull(node0);
88:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
89:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
90:       assertEquals(43, Node.IS_CONSTANT_NAME);
91:       assertEquals(53, Node.INPUT_ID);
92:       assertEquals(39, Node.EMPTY_BLOCK);
93:       assertEquals(36, Node.QUOTED_PROP);
94:       assertEquals(55, Node.INFERRED_FUNCTION);
95:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
96:       assertEquals(8, Node.FLAG_NO_THROWS);
97:       assertEquals(56, Node.CHANGE_TIME);
98:       assertEquals(57, Node.REFLECTED_OBJECT);
99:       assertEquals(48, Node.DIRECTIVES);
100:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
101:       assertEquals(37, Node.OPT_ARG_NAME);
102:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
103:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
104:       assertEquals(4095, Node.COLUMN_MASK);
105:       assertEquals(1, Node.DECR_FLAG);
106:       assertEquals(30, Node.VAR_ARGS_NAME);
107:       assertEquals(49, Node.DIRECT_EVAL);
108:       assertEquals(51, Node.STATIC_SOURCE_FILE);
109:       assertEquals(57, Node.LAST_PROP);
110:       assertEquals(12, Node.COLUMN_BITS);
111:       assertEquals(32, Node.INCRDECR_PROP);
112:       assertEquals(46, Node.IS_NAMESPACE);
113:       assertEquals(54, Node.SLASH_V);
114:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
115:       assertEquals(15, Node.NO_SIDE_EFFECTS);
116:       assertEquals(52, Node.LENGTH);
117:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
118:       assertEquals(40, Node.ORIGINALNAME_PROP);
119:       assertEquals(29, Node.JSDOC_INFO_PROP);
120:       assertEquals(50, Node.FREE_CALL);
121:       assertEquals(47, Node.IS_DISPATCHER);
122:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
123:       assertEquals(2, Node.POST_FLAG);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(node0.isArrayLit());
127:       assertFalse(node0.isDebugger());
128:       assertFalse(node0.isGetterDef());
129:       assertFalse(node0.isFunction());
130:       assertFalse(node0.isRegExp());
131:       assertFalse(node0.isDefaultCase());
132:       assertFalse(node0.isEmpty());
133:       assertFalse(node0.isFor());
134:       assertFalse(node0.isTry());
135:       assertEquals(0, node0.getChildCount());
136:       assertFalse(node0.isStringKey());
137:       assertFalse(node0.isParamList());
138:       assertFalse(node0.isSwitch());
139:       assertEquals(123, node0.getType());
140:       assertFalse(node0.isHook());
141:       assertEquals(123, node0.getCharno());
142:       assertFalse(node0.isBlock());
143:       assertFalse(node0.isFalse());
144:       assertEquals(503931, node0.getSourcePosition());
145:       assertFalse(node0.isSetterDef());
146:       assertFalse(node0.isThis());
147:       assertFalse(node0.isInc());
148:       assertFalse(node0.isThrow());
149:       assertFalse(node0.isCase());
150:       assertFalse(node0.isInstanceOf());
151:       assertFalse(node0.isIn());
152:       assertFalse(node0.isCatch());
153:       assertFalse(node0.isWith());
154:       assertFalse(node0.hasMoreThanOneChild());
155:       assertFalse(node0.isIf());
156:       assertFalse(node0.isNE());
157:       assertEquals(123, node0.getLineno());
158:       assertFalse(node0.hasOneChild());
159:       assertFalse(node0.isCast());
160:       assertFalse(node0.isAssign());
161:       assertFalse(node0.isDec());
162:       assertFalse(node0.isNumber());
163:       assertFalse(node0.hasChildren());
164:       assertFalse(node0.isScript());
165:       assertFalse(node0.isAssignAdd());
166:       assertFalse(node0.isLabel());
167:       assertFalse(node0.isContinue());
168:       assertFalse(node0.isNot());
169:       assertFalse(node0.isObjectLit());
170:       assertFalse(node0.isAnd());
171:       assertFalse(node0.isLabelName());
172:       assertFalse(node0.isVar());
173:       assertFalse(node0.isAdd());
174:       assertFalse(node0.isCall());
175:       assertFalse(node0.isString());
176:       assertFalse(node0.isWhile());
177:       assertFalse(node0.isGetProp());
178:       assertFalse(node0.isNew());
179:       assertFalse(node0.isDo());
180:       assertFalse(node0.isReturn());
181:       assertFalse(node0.isComma());
182:       assertFalse(node0.isOr());
183:       assertFalse(node0.isTypeOf());
184:       assertFalse(node0.isBreak());
185:       assertFalse(node0.isExprResult());
186:       assertFalse(node0.isTrue());
187:       assertFalse(node0.isGetElem());
188:       assertFalse(node0.isNull());
189:       assertFalse(node0.isVoid());
190:       assertFalse(node0.isDelProp());
191:       assertFalse(node0.isName());
192:       assertNotNull(iterable0);
193:       assertFalse(iterable0.contains(node0));
194:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
195:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
196:       assertEquals(43, Node.IS_CONSTANT_NAME);
197:       assertEquals(53, Node.INPUT_ID);
198:       assertEquals(39, Node.EMPTY_BLOCK);
199:       assertEquals(36, Node.QUOTED_PROP);
200:       assertEquals(55, Node.INFERRED_FUNCTION);
201:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
202:       assertEquals(8, Node.FLAG_NO_THROWS);
203:       assertEquals(56, Node.CHANGE_TIME);
204:       assertEquals(57, Node.REFLECTED_OBJECT);
205:       assertEquals(48, Node.DIRECTIVES);
206:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
207:       assertEquals(37, Node.OPT_ARG_NAME);
208:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
209:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
210:       assertEquals(4095, Node.COLUMN_MASK);
211:       assertEquals(1, Node.DECR_FLAG);
212:       assertEquals(30, Node.VAR_ARGS_NAME);
213:       assertEquals(49, Node.DIRECT_EVAL);
214:       assertEquals(51, Node.STATIC_SOURCE_FILE);
215:       assertEquals(57, Node.LAST_PROP);
216:       assertEquals(12, Node.COLUMN_BITS);
217:       assertEquals(32, Node.INCRDECR_PROP);
218:       assertEquals(46, Node.IS_NAMESPACE);
219:       assertEquals(54, Node.SLASH_V);
220:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
221:       assertEquals(15, Node.NO_SIDE_EFFECTS);
222:       assertEquals(52, Node.LENGTH);
223:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
224:       assertEquals(40, Node.ORIGINALNAME_PROP);
225:       assertEquals(29, Node.JSDOC_INFO_PROP);
226:       assertEquals(50, Node.FREE_CALL);
227:       assertEquals(47, Node.IS_DISPATCHER);
228:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
229:       assertEquals(2, Node.POST_FLAG);
230:   }
231: }
RegularFileObject[/tmp/EvoSuite_98_1628156924272/com/google/javascript/rhino/Node_98_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:48:44 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_98_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_98_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_98_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.common.base.Preconditions",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.SimpleErrorReporter",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.JSDocInfo",
339:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
344:       "com.google.common.collect.AbstractIndexedListIterator",
345:       "com.google.common.collect.Iterators$11",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.Node$AncestorIterable$1",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.JSTypeExpression",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.jstype.TemplatizedType",
354:       "com.google.common.collect.AbstractMultimap$Values",
355:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
356:       "com.google.common.collect.AbstractMapBasedMultimap$1",
357:       "com.google.common.collect.Multimaps$Entries",
358:       "com.google.common.collect.AbstractMultimap$Entries",
359:       "com.google.common.collect.AbstractMapBasedMultimap$2",
360:       "com.google.common.collect.Iterables",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
366:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
367:       "com.google.javascript.rhino.jstype.JSType$2",
368:       "com.google.javascript.rhino.jstype.JSType$TypePair",
369:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
370:       "com.google.javascript.rhino.JSDocInfo$Marker",
371:       "com.google.common.collect.Iterators$12",
372:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
373:       "com.google.javascript.rhino.JSDocInfo$Visibility"
374:     );
375:   }
376: }

[MASTER] 09:48:44.293 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(123, 123, 123);
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals(123, node0.getType());
assertFalse(node0.isHook());
assertEquals(123, node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isFalse());
assertEquals(503931, node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(123, node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertNotNull(node0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals(123, node0.getType());
assertFalse(node0.isHook());
assertEquals(123, node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isFalse());
assertEquals(503931, node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(123, node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);


* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/1
* Done!

* Computation finished
