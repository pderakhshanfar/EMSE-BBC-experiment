* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 5444
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2607935944
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 09:45:30.614 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 09:45:32.312 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 09:45:32.312 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 09:45:32.399 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: root-Branch in context: com.google.javascript.rhino.Node:getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 09:45:33.378 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true
[MASTER] 09:45:33.438 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true
[MASTER] 09:45:33.468 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.putBooleanProp(IZ)V: I5 Branch 109 IFEQ L852 - true in context: com.google.javascript.rhino.Node:putBooleanProp(IZ)V
[MASTER] 09:45:33.486 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 5397: com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z:1533 - ReplaceComparisonOperator == -> -2
[MASTER] 09:45:34.549 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: root-Branch in context: com.google.javascript.rhino.Node:getNext()Lcom/google/javascript/rhino/Node;
[MASTER] 09:45:34.674 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;
[MASTER] 09:45:34.675 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;
[MASTER] 09:45:57.370 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 604s and 769 generations, 295483 statements, best individual has fitness: 2627.0
* Minimizing test suite
[MASTER] 09:56:59.720 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 806
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 90%
* Total number of goals: 714
* Number of covered goals: 640
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 104
* Number of covered goals: 104
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 530
* Number of covered goals: 479
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 52%
* Total number of goals: 4536
* Number of covered goals: 2366
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 84%
* Total number of goals: 714
* Number of covered goals: 599
* Generated 1226 tests with total length 11349
* Resulting test suite's coverage: 79% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 09:58:13.572 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6719333333333334% of time used, but only 80/1226 tests minimized), falling back to using all assertions
[MASTER] 09:58:33.316 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 19%
* Compiling and checking tests
[MASTER] 09:58:46.509 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 13 seconds more than allowed.
[MASTER] 09:59:00.343 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_260_1628157540307/com/google/javascript/rhino/Node_260_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_260_1628157540307/com/google/javascript/rhino/Node_260_tmp__ESTest_scaffolding.java]]
[MASTER] 09:59:00.343 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:00.343 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:00.346 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 229
[MASTER] 09:59:00.347 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_260_1628157540307/com/google/javascript/rhino/Node_260_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:59:00 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_260_tmp__ESTest extends Node_260_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("    ", 512, 0);
21:       assertFalse(node0.isIn());
22:       assertFalse(node0.isGetterDef());
23:       assertFalse(node0.isNE());
24:       assertEquals(2097152, node0.getSourcePosition());
25:       assertFalse(node0.isDelProp());
26:       assertFalse(node0.isIf());
27:       assertFalse(node0.isArrayLit());
28:       assertFalse(node0.isVoid());
29:       assertFalse(node0.isFunction());
30:       assertFalse(node0.isTrue());
31:       assertEquals(40, node0.getType());
32:       assertFalse(node0.isEmpty());
33:       assertFalse(node0.isThrow());
34:       assertFalse(node0.isDefaultCase());
35:       assertFalse(node0.isInc());
36:       assertFalse(node0.isParamList());
37:       assertEquals(0, node0.getChildCount());
38:       assertFalse(node0.isThis());
39:       assertFalse(node0.isStringKey());
40:       assertFalse(node0.isWith());
41:       assertFalse(node0.isInstanceOf());
42:       assertFalse(node0.isCatch());
43:       assertTrue(node0.isString());
44:       assertFalse(node0.isBlock());
45:       assertFalse(node0.isTry());
46:       assertFalse(node0.isSwitch());
47:       assertFalse(node0.isRegExp());
48:       assertFalse(node0.isHook());
49:       assertFalse(node0.isCase());
50:       assertFalse(node0.isFor());
51:       assertFalse(node0.hasOneChild());
52:       assertFalse(node0.isScript());
53:       assertFalse(node0.isOr());
54:       assertFalse(node0.isAssignAdd());
55:       assertFalse(node0.isDec());
56:       assertFalse(node0.isTypeOf());
57:       assertFalse(node0.isNumber());
58:       assertFalse(node0.isReturn());
59:       assertFalse(node0.isLabel());
60:       assertFalse(node0.hasChildren());
61:       assertFalse(node0.isGetElem());
62:       assertFalse(node0.isAssign());
63:       assertFalse(node0.isLabelName());
64:       assertFalse(node0.hasMoreThanOneChild());
65:       assertFalse(node0.isContinue());
66:       assertFalse(node0.isCast());
67:       assertFalse(node0.isAdd());
68:       assertFalse(node0.isNew());
69:       assertFalse(node0.isVar());
70:       assertEquals(0, node0.getCharno());
71:       assertFalse(node0.isDo());
72:       assertFalse(node0.isSetterDef());
73:       assertFalse(node0.isNull());
74:       assertFalse(node0.isComma());
75:       assertFalse(node0.isFalse());
76:       assertFalse(node0.isName());
77:       assertFalse(node0.isAnd());
78:       assertFalse(node0.isCall());
79:       assertFalse(node0.isExprResult());
80:       assertEquals(512, node0.getLineno());
81:       assertFalse(node0.isBreak());
82:       assertFalse(node0.isDebugger());
83:       assertFalse(node0.isNot());
84:       assertFalse(node0.isObjectLit());
85:       assertFalse(node0.isWhile());
86:       assertFalse(node0.isGetProp());
87:       assertEquals(52, Node.LENGTH);
88:       assertEquals(57, Node.REFLECTED_OBJECT);
89:       assertEquals(40, Node.ORIGINALNAME_PROP);
90:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
91:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
92:       assertEquals(49, Node.DIRECT_EVAL);
93:       assertEquals(50, Node.FREE_CALL);
94:       assertEquals(54, Node.SLASH_V);
95:       assertEquals(32, Node.INCRDECR_PROP);
96:       assertEquals(46, Node.IS_NAMESPACE);
97:       assertEquals(51, Node.STATIC_SOURCE_FILE);
98:       assertEquals(48, Node.DIRECTIVES);
99:       assertEquals(37, Node.OPT_ARG_NAME);
100:       assertEquals(4095, Node.COLUMN_MASK);
101:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
102:       assertEquals(1, Node.DECR_FLAG);
103:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
104:       assertEquals(12, Node.COLUMN_BITS);
105:       assertEquals(29, Node.JSDOC_INFO_PROP);
106:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
107:       assertEquals(53, Node.INPUT_ID);
108:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
109:       assertEquals(36, Node.QUOTED_PROP);
110:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
111:       assertEquals(43, Node.IS_CONSTANT_NAME);
112:       assertEquals(56, Node.CHANGE_TIME);
113:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
114:       assertEquals(8, Node.FLAG_NO_THROWS);
115:       assertEquals(39, Node.EMPTY_BLOCK);
116:       assertEquals(55, Node.INFERRED_FUNCTION);
117:       assertEquals(15, Node.NO_SIDE_EFFECTS);
118:       assertEquals(57, Node.LAST_PROP);
119:       assertEquals(47, Node.IS_DISPATCHER);
120:       assertEquals(2, Node.POST_FLAG);
121:       assertEquals(30, Node.VAR_ARGS_NAME);
122:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
123:       assertNotNull(node0);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(node0.isIn());
127:       assertFalse(node0.isGetterDef());
128:       assertFalse(node0.isNE());
129:       assertEquals(2097152, node0.getSourcePosition());
130:       assertFalse(node0.isDelProp());
131:       assertFalse(node0.isIf());
132:       assertFalse(node0.isArrayLit());
133:       assertFalse(node0.isVoid());
134:       assertFalse(node0.isFunction());
135:       assertFalse(node0.isTrue());
136:       assertEquals(40, node0.getType());
137:       assertFalse(node0.isEmpty());
138:       assertFalse(node0.isThrow());
139:       assertFalse(node0.isDefaultCase());
140:       assertFalse(node0.isInc());
141:       assertFalse(node0.isParamList());
142:       assertEquals(0, node0.getChildCount());
143:       assertFalse(node0.isThis());
144:       assertFalse(node0.isStringKey());
145:       assertFalse(node0.isWith());
146:       assertFalse(node0.isInstanceOf());
147:       assertFalse(node0.isCatch());
148:       assertTrue(node0.isString());
149:       assertFalse(node0.isBlock());
150:       assertFalse(node0.isTry());
151:       assertFalse(node0.isSwitch());
152:       assertFalse(node0.isRegExp());
153:       assertFalse(node0.isHook());
154:       assertFalse(node0.isCase());
155:       assertFalse(node0.isFor());
156:       assertFalse(node0.hasOneChild());
157:       assertFalse(node0.isScript());
158:       assertFalse(node0.isOr());
159:       assertFalse(node0.isAssignAdd());
160:       assertFalse(node0.isDec());
161:       assertFalse(node0.isTypeOf());
162:       assertFalse(node0.isNumber());
163:       assertFalse(node0.isReturn());
164:       assertFalse(node0.isLabel());
165:       assertFalse(node0.hasChildren());
166:       assertFalse(node0.isGetElem());
167:       assertFalse(node0.isAssign());
168:       assertFalse(node0.isLabelName());
169:       assertFalse(node0.hasMoreThanOneChild());
170:       assertFalse(node0.isContinue());
171:       assertFalse(node0.isCast());
172:       assertFalse(node0.isAdd());
173:       assertFalse(node0.isNew());
174:       assertFalse(node0.isVar());
175:       assertEquals(0, node0.getCharno());
176:       assertFalse(node0.isDo());
177:       assertFalse(node0.isSetterDef());
178:       assertFalse(node0.isNull());
179:       assertFalse(node0.isComma());
180:       assertFalse(node0.isFalse());
181:       assertFalse(node0.isName());
182:       assertFalse(node0.isAnd());
183:       assertFalse(node0.isCall());
184:       assertFalse(node0.isExprResult());
185:       assertEquals(512, node0.getLineno());
186:       assertFalse(node0.isBreak());
187:       assertFalse(node0.isDebugger());
188:       assertFalse(node0.isNot());
189:       assertFalse(node0.isObjectLit());
190:       assertFalse(node0.isWhile());
191:       assertFalse(node0.isGetProp());
192:       assertEquals(52, Node.LENGTH);
193:       assertEquals(57, Node.REFLECTED_OBJECT);
194:       assertEquals(40, Node.ORIGINALNAME_PROP);
195:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
196:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
197:       assertEquals(49, Node.DIRECT_EVAL);
198:       assertEquals(50, Node.FREE_CALL);
199:       assertEquals(54, Node.SLASH_V);
200:       assertEquals(32, Node.INCRDECR_PROP);
201:       assertEquals(46, Node.IS_NAMESPACE);
202:       assertEquals(51, Node.STATIC_SOURCE_FILE);
203:       assertEquals(48, Node.DIRECTIVES);
204:       assertEquals(37, Node.OPT_ARG_NAME);
205:       assertEquals(4095, Node.COLUMN_MASK);
206:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
207:       assertEquals(1, Node.DECR_FLAG);
208:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
209:       assertEquals(12, Node.COLUMN_BITS);
210:       assertEquals(29, Node.JSDOC_INFO_PROP);
211:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
212:       assertEquals(53, Node.INPUT_ID);
213:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
214:       assertEquals(36, Node.QUOTED_PROP);
215:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
216:       assertEquals(43, Node.IS_CONSTANT_NAME);
217:       assertEquals(56, Node.CHANGE_TIME);
218:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
219:       assertEquals(8, Node.FLAG_NO_THROWS);
220:       assertEquals(39, Node.EMPTY_BLOCK);
221:       assertEquals(55, Node.INFERRED_FUNCTION);
222:       assertEquals(15, Node.NO_SIDE_EFFECTS);
223:       assertEquals(57, Node.LAST_PROP);
224:       assertEquals(47, Node.IS_DISPATCHER);
225:       assertEquals(2, Node.POST_FLAG);
226:       assertEquals(30, Node.VAR_ARGS_NAME);
227:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
228:       assertNotNull(iterable0);
229:       assertFalse(iterable0.contains(node0));
230:       
231:       Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
232:       assertFalse(node0.isIn());
233:       assertFalse(node0.isGetterDef());
234:       assertFalse(node0.isNE());
235:       assertEquals(2097152, node0.getSourcePosition());
236:       assertFalse(node0.isDelProp());
237:       assertFalse(node0.isIf());
238:       assertFalse(node0.isArrayLit());
239:       assertFalse(node0.isVoid());
240:       assertFalse(node0.isFunction());
241:       assertFalse(node0.isTrue());
242:       assertEquals(40, node0.getType());
243:       assertFalse(node0.isEmpty());
244:       assertFalse(node0.isThrow());
245:       assertFalse(node0.isDefaultCase());
246:       assertFalse(node0.isInc());
247:       assertFalse(node0.isParamList());
248:       assertEquals(0, node0.getChildCount());
249:       assertFalse(node0.isThis());
250:       assertFalse(node0.isStringKey());
251:       assertFalse(node0.isWith());
252:       assertFalse(node0.isInstanceOf());
253:       assertFalse(node0.isCatch());
254:       assertTrue(node0.isString());
255:       assertFalse(node0.isBlock());
256:       assertFalse(node0.isTry());
257:       assertFalse(node0.isSwitch());
258:       assertFalse(node0.isRegExp());
259:       assertFalse(node0.isHook());
260:       assertFalse(node0.isCase());
261:       assertFalse(node0.isFor());
262:       assertFalse(node0.hasOneChild());
263:       assertFalse(node0.isScript());
264:       assertFalse(node0.isOr());
265:       assertFalse(node0.isAssignAdd());
266:       assertFalse(node0.isDec());
267:       assertFalse(node0.isTypeOf());
268:       assertFalse(node0.isNumber());
269:       assertFalse(node0.isReturn());
270:       assertFalse(node0.isLabel());
271:       assertFalse(node0.hasChildren());
272:       assertFalse(node0.isGetElem());
273:       assertFalse(node0.isAssign());
274:       assertFalse(node0.isLabelName());
275:       assertFalse(node0.hasMoreThanOneChild());
276:       assertFalse(node0.isContinue());
277:       assertFalse(node0.isCast());
278:       assertFalse(node0.isAdd());
279:       assertFalse(node0.isNew());
280:       assertFalse(node0.isVar());
281:       assertEquals(0, node0.getCharno());
282:       assertFalse(node0.isDo());
283:       assertFalse(node0.isSetterDef());
284:       assertFalse(node0.isNull());
285:       assertFalse(node0.isComma());
286:       assertFalse(node0.isFalse());
287:       assertFalse(node0.isName());
288:       assertFalse(node0.isAnd());
289:       assertFalse(node0.isCall());
290:       assertFalse(node0.isExprResult());
291:       assertEquals(512, node0.getLineno());
292:       assertFalse(node0.isBreak());
293:       assertFalse(node0.isDebugger());
294:       assertFalse(node0.isNot());
295:       assertFalse(node0.isObjectLit());
296:       assertFalse(node0.isWhile());
297:       assertFalse(node0.isGetProp());
298:       assertEquals(52, Node.LENGTH);
299:       assertEquals(57, Node.REFLECTED_OBJECT);
300:       assertEquals(40, Node.ORIGINALNAME_PROP);
301:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
302:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
303:       assertEquals(49, Node.DIRECT_EVAL);
304:       assertEquals(50, Node.FREE_CALL);
305:       assertEquals(54, Node.SLASH_V);
306:       assertEquals(32, Node.INCRDECR_PROP);
307:       assertEquals(46, Node.IS_NAMESPACE);
308:       assertEquals(51, Node.STATIC_SOURCE_FILE);
309:       assertEquals(48, Node.DIRECTIVES);
310:       assertEquals(37, Node.OPT_ARG_NAME);
311:       assertEquals(4095, Node.COLUMN_MASK);
312:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
313:       assertEquals(1, Node.DECR_FLAG);
314:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
315:       assertEquals(12, Node.COLUMN_BITS);
316:       assertEquals(29, Node.JSDOC_INFO_PROP);
317:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
318:       assertEquals(53, Node.INPUT_ID);
319:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
320:       assertEquals(36, Node.QUOTED_PROP);
321:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
322:       assertEquals(43, Node.IS_CONSTANT_NAME);
323:       assertEquals(56, Node.CHANGE_TIME);
324:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
325:       assertEquals(8, Node.FLAG_NO_THROWS);
326:       assertEquals(39, Node.EMPTY_BLOCK);
327:       assertEquals(55, Node.INFERRED_FUNCTION);
328:       assertEquals(15, Node.NO_SIDE_EFFECTS);
329:       assertEquals(57, Node.LAST_PROP);
330:       assertEquals(47, Node.IS_DISPATCHER);
331:       assertEquals(2, Node.POST_FLAG);
332:       assertEquals(30, Node.VAR_ARGS_NAME);
333:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
334:       assertNotNull(node_AncestorIterable0);
335:       
336:       boolean boolean0 = node0.isNumber();
337:       assertFalse(node0.isIn());
338:       assertFalse(node0.isGetterDef());
339:       assertFalse(node0.isNE());
340:       assertEquals(2097152, node0.getSourcePosition());
341:       assertFalse(node0.isDelProp());
342:       assertFalse(node0.isIf());
343:       assertFalse(node0.isArrayLit());
344:       assertFalse(node0.isVoid());
345:       assertFalse(node0.isFunction());
346:       assertFalse(node0.isTrue());
347:       assertEquals(40, node0.getType());
348:       assertFalse(node0.isEmpty());
349:       assertFalse(node0.isThrow());
350:       assertFalse(node0.isDefaultCase());
351:       assertFalse(node0.isInc());
352:       assertFalse(node0.isParamList());
353:       assertEquals(0, node0.getChildCount());
354:       assertFalse(node0.isThis());
355:       assertFalse(node0.isStringKey());
356:       assertFalse(node0.isWith());
357:       assertFalse(node0.isInstanceOf());
358:       assertFalse(node0.isCatch());
359:       assertTrue(node0.isString());
360:       assertFalse(node0.isBlock());
361:       assertFalse(node0.isTry());
362:       assertFalse(node0.isSwitch());
363:       assertFalse(node0.isRegExp());
364:       assertFalse(node0.isHook());
365:       assertFalse(node0.isCase());
366:       assertFalse(node0.isFor());
367:       assertFalse(node0.hasOneChild());
368:       assertFalse(node0.isScript());
369:       assertFalse(node0.isOr());
370:       assertFalse(node0.isAssignAdd());
371:       assertFalse(node0.isDec());
372:       assertFalse(node0.isTypeOf());
373:       assertFalse(node0.isNumber());
374:       assertFalse(node0.isReturn());
375:       assertFalse(node0.isLabel());
376:       assertFalse(node0.hasChildren());
377:       assertFalse(node0.isGetElem());
378:       assertFalse(node0.isAssign());
379:       assertFalse(node0.isLabelName());
380:       assertFalse(node0.hasMoreThanOneChild());
381:       assertFalse(node0.isContinue());
382:       assertFalse(node0.isCast());
383:       assertFalse(node0.isAdd());
384:       assertFalse(node0.isNew());
385:       assertFalse(node0.isVar());
386:       assertEquals(0, node0.getCharno());
387:       assertFalse(node0.isDo());
388:       assertFalse(node0.isSetterDef());
389:       assertFalse(node0.isNull());
390:       assertFalse(node0.isComma());
391:       assertFalse(node0.isFalse());
392:       assertFalse(node0.isName());
393:       assertFalse(node0.isAnd());
394:       assertFalse(node0.isCall());
395:       assertFalse(node0.isExprResult());
396:       assertEquals(512, node0.getLineno());
397:       assertFalse(node0.isBreak());
398:       assertFalse(node0.isDebugger());
399:       assertFalse(node0.isNot());
400:       assertFalse(node0.isObjectLit());
401:       assertFalse(node0.isWhile());
402:       assertFalse(node0.isGetProp());
403:       assertEquals(52, Node.LENGTH);
404:       assertEquals(57, Node.REFLECTED_OBJECT);
405:       assertEquals(40, Node.ORIGINALNAME_PROP);
406:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
407:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
408:       assertEquals(49, Node.DIRECT_EVAL);
409:       assertEquals(50, Node.FREE_CALL);
410:       assertEquals(54, Node.SLASH_V);
411:       assertEquals(32, Node.INCRDECR_PROP);
412:       assertEquals(46, Node.IS_NAMESPACE);
413:       assertEquals(51, Node.STATIC_SOURCE_FILE);
414:       assertEquals(48, Node.DIRECTIVES);
415:       assertEquals(37, Node.OPT_ARG_NAME);
416:       assertEquals(4095, Node.COLUMN_MASK);
417:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
418:       assertEquals(1, Node.DECR_FLAG);
419:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
420:       assertEquals(12, Node.COLUMN_BITS);
421:       assertEquals(29, Node.JSDOC_INFO_PROP);
422:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
423:       assertEquals(53, Node.INPUT_ID);
424:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
425:       assertEquals(36, Node.QUOTED_PROP);
426:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
427:       assertEquals(43, Node.IS_CONSTANT_NAME);
428:       assertEquals(56, Node.CHANGE_TIME);
429:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
430:       assertEquals(8, Node.FLAG_NO_THROWS);
431:       assertEquals(39, Node.EMPTY_BLOCK);
432:       assertEquals(55, Node.INFERRED_FUNCTION);
433:       assertEquals(15, Node.NO_SIDE_EFFECTS);
434:       assertEquals(57, Node.LAST_PROP);
435:       assertEquals(47, Node.IS_DISPATCHER);
436:       assertEquals(2, Node.POST_FLAG);
437:       assertEquals(30, Node.VAR_ARGS_NAME);
438:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
439:       assertFalse(boolean0);
440:       
441:       boolean boolean1 = node0.isLabel();
442:       assertFalse(node0.isIn());
443:       assertFalse(node0.isGetterDef());
444:       assertFalse(node0.isNE());
445:       assertEquals(2097152, node0.getSourcePosition());
446:       assertFalse(node0.isDelProp());
447:       assertFalse(node0.isIf());
448:       assertFalse(node0.isArrayLit());
449:       assertFalse(node0.isVoid());
450:       assertFalse(node0.isFunction());
451:       assertFalse(node0.isTrue());
452:       assertEquals(40, node0.getType());
453:       assertFalse(node0.isEmpty());
454:       assertFalse(node0.isThrow());
455:       assertFalse(node0.isDefaultCase());
456:       assertFalse(node0.isInc());
457:       assertFalse(node0.isParamList());
458:       assertEquals(0, node0.getChildCount());
459:       assertFalse(node0.isThis());
460:       assertFalse(node0.isStringKey());
461:       assertFalse(node0.isWith());
462:       assertFalse(node0.isInstanceOf());
463:       assertFalse(node0.isCatch());
464:       assertTrue(node0.isString());
465:       assertFalse(node0.isBlock());
466:       assertFalse(node0.isTry());
467:       assertFalse(node0.isSwitch());
468:       assertFalse(node0.isRegExp());
469:       assertFalse(node0.isHook());
470:       assertFalse(node0.isCase());
471:       assertFalse(node0.isFor());
472:       assertFalse(node0.hasOneChild());
473:       assertFalse(node0.isScript());
474:       assertFalse(node0.isOr());
475:       assertFalse(node0.isAssignAdd());
476:       assertFalse(node0.isDec());
477:       assertFalse(node0.isTypeOf());
478:       assertFalse(node0.isNumber());
479:       assertFalse(node0.isReturn());
480:       assertFalse(node0.isLabel());
481:       assertFalse(node0.hasChildren());
482:       assertFalse(node0.isGetElem());
483:       assertFalse(node0.isAssign());
484:       assertFalse(node0.isLabelName());
485:       assertFalse(node0.hasMoreThanOneChild());
486:       assertFalse(node0.isContinue());
487:       assertFalse(node0.isCast());
488:       assertFalse(node0.isAdd());
489:       assertFalse(node0.isNew());
490:       assertFalse(node0.isVar());
491:       assertEquals(0, node0.getCharno());
492:       assertFalse(node0.isDo());
493:       assertFalse(node0.isSetterDef());
494:       assertFalse(node0.isNull());
495:       assertFalse(node0.isComma());
496:       assertFalse(node0.isFalse());
497:       assertFalse(node0.isName());
498:       assertFalse(node0.isAnd());
499:       assertFalse(node0.isCall());
500:       assertFalse(node0.isExprResult());
501:       assertEquals(512, node0.getLineno());
502:       assertFalse(node0.isBreak());
503:       assertFalse(node0.isDebugger());
504:       assertFalse(node0.isNot());
505:       assertFalse(node0.isObjectLit());
506:       assertFalse(node0.isWhile());
507:       assertFalse(node0.isGetProp());
508:       assertEquals(52, Node.LENGTH);
509:       assertEquals(57, Node.REFLECTED_OBJECT);
510:       assertEquals(40, Node.ORIGINALNAME_PROP);
511:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
512:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
513:       assertEquals(49, Node.DIRECT_EVAL);
514:       assertEquals(50, Node.FREE_CALL);
515:       assertEquals(54, Node.SLASH_V);
516:       assertEquals(32, Node.INCRDECR_PROP);
517:       assertEquals(46, Node.IS_NAMESPACE);
518:       assertEquals(51, Node.STATIC_SOURCE_FILE);
519:       assertEquals(48, Node.DIRECTIVES);
520:       assertEquals(37, Node.OPT_ARG_NAME);
521:       assertEquals(4095, Node.COLUMN_MASK);
522:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
523:       assertEquals(1, Node.DECR_FLAG);
524:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
525:       assertEquals(12, Node.COLUMN_BITS);
526:       assertEquals(29, Node.JSDOC_INFO_PROP);
527:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
528:       assertEquals(53, Node.INPUT_ID);
529:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
530:       assertEquals(36, Node.QUOTED_PROP);
531:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
532:       assertEquals(43, Node.IS_CONSTANT_NAME);
533:       assertEquals(56, Node.CHANGE_TIME);
534:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
535:       assertEquals(8, Node.FLAG_NO_THROWS);
536:       assertEquals(39, Node.EMPTY_BLOCK);
537:       assertEquals(55, Node.INFERRED_FUNCTION);
538:       assertEquals(15, Node.NO_SIDE_EFFECTS);
539:       assertEquals(57, Node.LAST_PROP);
540:       assertEquals(47, Node.IS_DISPATCHER);
541:       assertEquals(2, Node.POST_FLAG);
542:       assertEquals(30, Node.VAR_ARGS_NAME);
543:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
544:       assertFalse(boolean1);
545:       assertTrue(boolean1 == boolean0);
546:   }
547: }
RegularFileObject[/tmp/EvoSuite_260_1628157540307/com/google/javascript/rhino/Node_260_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:59:00 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_260_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_260_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_260_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
299:       "com.google.javascript.rhino.jstype.JSType$1",
300:       "com.google.javascript.rhino.jstype.JSType",
301:       "com.google.javascript.rhino.jstype.ObjectType",
302:       "com.google.javascript.rhino.jstype.ProxyObjectType",
303:       "com.google.javascript.rhino.jstype.TemplateType",
304:       "com.google.javascript.rhino.jstype.ValueType",
305:       "com.google.javascript.rhino.jstype.BooleanType",
306:       "com.google.javascript.rhino.jstype.NullType",
307:       "com.google.javascript.rhino.jstype.NumberType",
308:       "com.google.javascript.rhino.jstype.StringType",
309:       "com.google.javascript.rhino.jstype.UnknownType",
310:       "com.google.javascript.rhino.jstype.VoidType",
311:       "com.google.javascript.rhino.jstype.AllType",
312:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableBiMap",
315:       "com.google.common.collect.EmptyImmutableBiMap",
316:       "com.google.javascript.rhino.jstype.PropertyMap$1",
317:       "com.google.javascript.rhino.jstype.PropertyMap",
318:       "com.google.javascript.rhino.jstype.FunctionType",
319:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.jstype.TemplatizedType",
341:       "com.google.javascript.rhino.JSDocInfo",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.common.collect.Sets",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.JSDocInfo$Visibility",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.common.collect.Iterables",
355:       "com.google.javascript.rhino.Node$AncestorIterable$1",
356:       "com.google.javascript.rhino.InputId",
357:       "com.google.common.collect.AbstractIndexedListIterator",
358:       "com.google.common.collect.Iterators$11",
359:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
360:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
361:       "com.google.javascript.rhino.JSDocInfo$Marker",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.javascript.rhino.jstype.NamedType",
364:       "com.google.common.collect.Platform",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
368:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.JSTypeExpression",
372:       "com.google.common.collect.Iterators$12",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
374:     );
375:   }
376: }

[MASTER] 09:59:00.355 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("    ", 512, 0);
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertEquals(2097152, node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertEquals(0, node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertEquals(512, node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertEquals(2097152, node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertEquals(0, node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertEquals(512, node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));

Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertEquals(2097152, node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertEquals(0, node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertEquals(512, node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotNull(node_AncestorIterable0);

boolean boolean0 = node0.isNumber();
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertEquals(2097152, node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertEquals(0, node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertEquals(512, node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(boolean0);

boolean boolean1 = node0.isLabel();
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertEquals(2097152, node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertEquals(0, node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertEquals(512, node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);


[MASTER] 09:59:00.381 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_261_1628157540356/com/google/javascript/rhino/Node_261_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_261_1628157540356/com/google/javascript/rhino/Node_261_tmp__ESTest_scaffolding.java]]
[MASTER] 09:59:00.381 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:00.381 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:00.382 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 334
[MASTER] 09:59:00.383 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_261_1628157540356/com/google/javascript/rhino/Node_261_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:59:00 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_261_tmp__ESTest extends Node_261_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(114);
21:       assertEquals((-1), node0.getCharno());
22:       assertTrue(node0.isDo());
23:       assertFalse(node0.isSwitch());
24:       assertFalse(node0.isHook());
25:       assertFalse(node0.isThrow());
26:       assertFalse(node0.isFalse());
27:       assertFalse(node0.isBreak());
28:       assertFalse(node0.isIf());
29:       assertFalse(node0.isNE());
30:       assertFalse(node0.isIn());
31:       assertFalse(node0.isInc());
32:       assertFalse(node0.isEmpty());
33:       assertFalse(node0.isDebugger());
34:       assertFalse(node0.isFunction());
35:       assertFalse(node0.isVoid());
36:       assertFalse(node0.isTrue());
37:       assertFalse(node0.isGetElem());
38:       assertFalse(node0.isAnd());
39:       assertFalse(node0.isAssign());
40:       assertFalse(node0.isDelProp());
41:       assertFalse(node0.isCast());
42:       assertFalse(node0.isExprResult());
43:       assertFalse(node0.isGetProp());
44:       assertFalse(node0.isComma());
45:       assertFalse(node0.isTypeOf());
46:       assertEquals((-1), node0.getSourcePosition());
47:       assertFalse(node0.isDec());
48:       assertFalse(node0.hasChildren());
49:       assertFalse(node0.isReturn());
50:       assertFalse(node0.isNot());
51:       assertFalse(node0.isObjectLit());
52:       assertFalse(node0.isString());
53:       assertFalse(node0.isBlock());
54:       assertFalse(node0.isNew());
55:       assertFalse(node0.isWhile());
56:       assertFalse(node0.isVar());
57:       assertFalse(node0.isStringKey());
58:       assertFalse(node0.isName());
59:       assertFalse(node0.isContinue());
60:       assertFalse(node0.hasMoreThanOneChild());
61:       assertFalse(node0.isCall());
62:       assertFalse(node0.isLabel());
63:       assertFalse(node0.isAssignAdd());
64:       assertEquals((-1), node0.getLineno());
65:       assertEquals(0, node0.getChildCount());
66:       assertFalse(node0.isOr());
67:       assertFalse(node0.isNull());
68:       assertFalse(node0.isSetterDef());
69:       assertEquals(114, node0.getType());
70:       assertFalse(node0.isAdd());
71:       assertFalse(node0.isRegExp());
72:       assertFalse(node0.isTry());
73:       assertFalse(node0.isDefaultCase());
74:       assertFalse(node0.isWith());
75:       assertFalse(node0.isLabelName());
76:       assertFalse(node0.isInstanceOf());
77:       assertFalse(node0.isArrayLit());
78:       assertFalse(node0.isCatch());
79:       assertFalse(node0.isParamList());
80:       assertFalse(node0.isThis());
81:       assertFalse(node0.isFor());
82:       assertFalse(node0.isCase());
83:       assertFalse(node0.isGetterDef());
84:       assertFalse(node0.hasOneChild());
85:       assertFalse(node0.isNumber());
86:       assertFalse(node0.isScript());
87:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
88:       assertEquals(55, Node.INFERRED_FUNCTION);
89:       assertEquals(4095, Node.COLUMN_MASK);
90:       assertEquals(8, Node.FLAG_NO_THROWS);
91:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
92:       assertEquals(50, Node.FREE_CALL);
93:       assertEquals(36, Node.QUOTED_PROP);
94:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
95:       assertEquals(48, Node.DIRECTIVES);
96:       assertEquals(43, Node.IS_CONSTANT_NAME);
97:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
98:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
99:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
100:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
101:       assertEquals(1, Node.DECR_FLAG);
102:       assertEquals(32, Node.INCRDECR_PROP);
103:       assertEquals(46, Node.IS_NAMESPACE);
104:       assertEquals(51, Node.STATIC_SOURCE_FILE);
105:       assertEquals(12, Node.COLUMN_BITS);
106:       assertEquals(2, Node.POST_FLAG);
107:       assertEquals(49, Node.DIRECT_EVAL);
108:       assertEquals(37, Node.OPT_ARG_NAME);
109:       assertEquals(54, Node.SLASH_V);
110:       assertEquals(56, Node.CHANGE_TIME);
111:       assertEquals(53, Node.INPUT_ID);
112:       assertEquals(57, Node.REFLECTED_OBJECT);
113:       assertEquals(40, Node.ORIGINALNAME_PROP);
114:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
115:       assertEquals(52, Node.LENGTH);
116:       assertEquals(29, Node.JSDOC_INFO_PROP);
117:       assertEquals(30, Node.VAR_ARGS_NAME);
118:       assertEquals(15, Node.NO_SIDE_EFFECTS);
119:       assertEquals(39, Node.EMPTY_BLOCK);
120:       assertEquals(47, Node.IS_DISPATCHER);
121:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
122:       assertEquals(57, Node.LAST_PROP);
123:       assertNotNull(node0);
124:       
125:       boolean boolean0 = node0.isFor();
126:       assertEquals((-1), node0.getCharno());
127:       assertTrue(node0.isDo());
128:       assertFalse(node0.isSwitch());
129:       assertFalse(node0.isHook());
130:       assertFalse(node0.isThrow());
131:       assertFalse(node0.isFalse());
132:       assertFalse(node0.isBreak());
133:       assertFalse(node0.isIf());
134:       assertFalse(node0.isNE());
135:       assertFalse(node0.isIn());
136:       assertFalse(node0.isInc());
137:       assertFalse(node0.isEmpty());
138:       assertFalse(node0.isDebugger());
139:       assertFalse(node0.isFunction());
140:       assertFalse(node0.isVoid());
141:       assertFalse(node0.isTrue());
142:       assertFalse(node0.isGetElem());
143:       assertFalse(node0.isAnd());
144:       assertFalse(node0.isAssign());
145:       assertFalse(node0.isDelProp());
146:       assertFalse(node0.isCast());
147:       assertFalse(node0.isExprResult());
148:       assertFalse(node0.isGetProp());
149:       assertFalse(node0.isComma());
150:       assertFalse(node0.isTypeOf());
151:       assertEquals((-1), node0.getSourcePosition());
152:       assertFalse(node0.isDec());
153:       assertFalse(node0.hasChildren());
154:       assertFalse(node0.isReturn());
155:       assertFalse(node0.isNot());
156:       assertFalse(node0.isObjectLit());
157:       assertFalse(node0.isString());
158:       assertFalse(node0.isBlock());
159:       assertFalse(node0.isNew());
160:       assertFalse(node0.isWhile());
161:       assertFalse(node0.isVar());
162:       assertFalse(node0.isStringKey());
163:       assertFalse(node0.isName());
164:       assertFalse(node0.isContinue());
165:       assertFalse(node0.hasMoreThanOneChild());
166:       assertFalse(node0.isCall());
167:       assertFalse(node0.isLabel());
168:       assertFalse(node0.isAssignAdd());
169:       assertEquals((-1), node0.getLineno());
170:       assertEquals(0, node0.getChildCount());
171:       assertFalse(node0.isOr());
172:       assertFalse(node0.isNull());
173:       assertFalse(node0.isSetterDef());
174:       assertEquals(114, node0.getType());
175:       assertFalse(node0.isAdd());
176:       assertFalse(node0.isRegExp());
177:       assertFalse(node0.isTry());
178:       assertFalse(node0.isDefaultCase());
179:       assertFalse(node0.isWith());
180:       assertFalse(node0.isLabelName());
181:       assertFalse(node0.isInstanceOf());
182:       assertFalse(node0.isArrayLit());
183:       assertFalse(node0.isCatch());
184:       assertFalse(node0.isParamList());
185:       assertFalse(node0.isThis());
186:       assertFalse(node0.isFor());
187:       assertFalse(node0.isCase());
188:       assertFalse(node0.isGetterDef());
189:       assertFalse(node0.hasOneChild());
190:       assertFalse(node0.isNumber());
191:       assertFalse(node0.isScript());
192:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
193:       assertEquals(55, Node.INFERRED_FUNCTION);
194:       assertEquals(4095, Node.COLUMN_MASK);
195:       assertEquals(8, Node.FLAG_NO_THROWS);
196:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
197:       assertEquals(50, Node.FREE_CALL);
198:       assertEquals(36, Node.QUOTED_PROP);
199:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
200:       assertEquals(48, Node.DIRECTIVES);
201:       assertEquals(43, Node.IS_CONSTANT_NAME);
202:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
203:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
204:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
205:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
206:       assertEquals(1, Node.DECR_FLAG);
207:       assertEquals(32, Node.INCRDECR_PROP);
208:       assertEquals(46, Node.IS_NAMESPACE);
209:       assertEquals(51, Node.STATIC_SOURCE_FILE);
210:       assertEquals(12, Node.COLUMN_BITS);
211:       assertEquals(2, Node.POST_FLAG);
212:       assertEquals(49, Node.DIRECT_EVAL);
213:       assertEquals(37, Node.OPT_ARG_NAME);
214:       assertEquals(54, Node.SLASH_V);
215:       assertEquals(56, Node.CHANGE_TIME);
216:       assertEquals(53, Node.INPUT_ID);
217:       assertEquals(57, Node.REFLECTED_OBJECT);
218:       assertEquals(40, Node.ORIGINALNAME_PROP);
219:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
220:       assertEquals(52, Node.LENGTH);
221:       assertEquals(29, Node.JSDOC_INFO_PROP);
222:       assertEquals(30, Node.VAR_ARGS_NAME);
223:       assertEquals(15, Node.NO_SIDE_EFFECTS);
224:       assertEquals(39, Node.EMPTY_BLOCK);
225:       assertEquals(47, Node.IS_DISPATCHER);
226:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
227:       assertEquals(57, Node.LAST_PROP);
228:       assertFalse(boolean0);
229:       
230:       Iterable<Node> iterable0 = node0.children();
231:       assertEquals((-1), node0.getCharno());
232:       assertTrue(node0.isDo());
233:       assertFalse(node0.isSwitch());
234:       assertFalse(node0.isHook());
235:       assertFalse(node0.isThrow());
236:       assertFalse(node0.isFalse());
237:       assertFalse(node0.isBreak());
238:       assertFalse(node0.isIf());
239:       assertFalse(node0.isNE());
240:       assertFalse(node0.isIn());
241:       assertFalse(node0.isInc());
242:       assertFalse(node0.isEmpty());
243:       assertFalse(node0.isDebugger());
244:       assertFalse(node0.isFunction());
245:       assertFalse(node0.isVoid());
246:       assertFalse(node0.isTrue());
247:       assertFalse(node0.isGetElem());
248:       assertFalse(node0.isAnd());
249:       assertFalse(node0.isAssign());
250:       assertFalse(node0.isDelProp());
251:       assertFalse(node0.isCast());
252:       assertFalse(node0.isExprResult());
253:       assertFalse(node0.isGetProp());
254:       assertFalse(node0.isComma());
255:       assertFalse(node0.isTypeOf());
256:       assertEquals((-1), node0.getSourcePosition());
257:       assertFalse(node0.isDec());
258:       assertFalse(node0.hasChildren());
259:       assertFalse(node0.isReturn());
260:       assertFalse(node0.isNot());
261:       assertFalse(node0.isObjectLit());
262:       assertFalse(node0.isString());
263:       assertFalse(node0.isBlock());
264:       assertFalse(node0.isNew());
265:       assertFalse(node0.isWhile());
266:       assertFalse(node0.isVar());
267:       assertFalse(node0.isStringKey());
268:       assertFalse(node0.isName());
269:       assertFalse(node0.isContinue());
270:       assertFalse(node0.hasMoreThanOneChild());
271:       assertFalse(node0.isCall());
272:       assertFalse(node0.isLabel());
273:       assertFalse(node0.isAssignAdd());
274:       assertEquals((-1), node0.getLineno());
275:       assertEquals(0, node0.getChildCount());
276:       assertFalse(node0.isOr());
277:       assertFalse(node0.isNull());
278:       assertFalse(node0.isSetterDef());
279:       assertEquals(114, node0.getType());
280:       assertFalse(node0.isAdd());
281:       assertFalse(node0.isRegExp());
282:       assertFalse(node0.isTry());
283:       assertFalse(node0.isDefaultCase());
284:       assertFalse(node0.isWith());
285:       assertFalse(node0.isLabelName());
286:       assertFalse(node0.isInstanceOf());
287:       assertFalse(node0.isArrayLit());
288:       assertFalse(node0.isCatch());
289:       assertFalse(node0.isParamList());
290:       assertFalse(node0.isThis());
291:       assertFalse(node0.isFor());
292:       assertFalse(node0.isCase());
293:       assertFalse(node0.isGetterDef());
294:       assertFalse(node0.hasOneChild());
295:       assertFalse(node0.isNumber());
296:       assertFalse(node0.isScript());
297:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
298:       assertEquals(55, Node.INFERRED_FUNCTION);
299:       assertEquals(4095, Node.COLUMN_MASK);
300:       assertEquals(8, Node.FLAG_NO_THROWS);
301:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
302:       assertEquals(50, Node.FREE_CALL);
303:       assertEquals(36, Node.QUOTED_PROP);
304:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
305:       assertEquals(48, Node.DIRECTIVES);
306:       assertEquals(43, Node.IS_CONSTANT_NAME);
307:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
308:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
309:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
310:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
311:       assertEquals(1, Node.DECR_FLAG);
312:       assertEquals(32, Node.INCRDECR_PROP);
313:       assertEquals(46, Node.IS_NAMESPACE);
314:       assertEquals(51, Node.STATIC_SOURCE_FILE);
315:       assertEquals(12, Node.COLUMN_BITS);
316:       assertEquals(2, Node.POST_FLAG);
317:       assertEquals(49, Node.DIRECT_EVAL);
318:       assertEquals(37, Node.OPT_ARG_NAME);
319:       assertEquals(54, Node.SLASH_V);
320:       assertEquals(56, Node.CHANGE_TIME);
321:       assertEquals(53, Node.INPUT_ID);
322:       assertEquals(57, Node.REFLECTED_OBJECT);
323:       assertEquals(40, Node.ORIGINALNAME_PROP);
324:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
325:       assertEquals(52, Node.LENGTH);
326:       assertEquals(29, Node.JSDOC_INFO_PROP);
327:       assertEquals(30, Node.VAR_ARGS_NAME);
328:       assertEquals(15, Node.NO_SIDE_EFFECTS);
329:       assertEquals(39, Node.EMPTY_BLOCK);
330:       assertEquals(47, Node.IS_DISPATCHER);
331:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
332:       assertEquals(57, Node.LAST_PROP);
333:       assertNotNull(iterable0);
334:       assertFalse(iterable0.contains(node0));
335:   }
336: }
RegularFileObject[/tmp/EvoSuite_261_1628157540356/com/google/javascript/rhino/Node_261_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:59:00 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_261_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_261_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_261_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
299:       "com.google.javascript.rhino.jstype.JSType$1",
300:       "com.google.javascript.rhino.jstype.JSType",
301:       "com.google.javascript.rhino.jstype.ObjectType",
302:       "com.google.javascript.rhino.jstype.ProxyObjectType",
303:       "com.google.javascript.rhino.jstype.TemplateType",
304:       "com.google.javascript.rhino.jstype.ValueType",
305:       "com.google.javascript.rhino.jstype.BooleanType",
306:       "com.google.javascript.rhino.jstype.NullType",
307:       "com.google.javascript.rhino.jstype.NumberType",
308:       "com.google.javascript.rhino.jstype.StringType",
309:       "com.google.javascript.rhino.jstype.UnknownType",
310:       "com.google.javascript.rhino.jstype.VoidType",
311:       "com.google.javascript.rhino.jstype.AllType",
312:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableBiMap",
315:       "com.google.common.collect.EmptyImmutableBiMap",
316:       "com.google.javascript.rhino.jstype.PropertyMap$1",
317:       "com.google.javascript.rhino.jstype.PropertyMap",
318:       "com.google.javascript.rhino.jstype.FunctionType",
319:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.jstype.TemplatizedType",
341:       "com.google.javascript.rhino.JSDocInfo",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.common.collect.Sets",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.JSDocInfo$Visibility",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.common.collect.Iterables",
355:       "com.google.javascript.rhino.Node$AncestorIterable$1",
356:       "com.google.javascript.rhino.InputId",
357:       "com.google.common.collect.AbstractIndexedListIterator",
358:       "com.google.common.collect.Iterators$11",
359:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
360:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
361:       "com.google.javascript.rhino.JSDocInfo$Marker",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.javascript.rhino.jstype.NamedType",
364:       "com.google.common.collect.Platform",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
368:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.JSTypeExpression",
372:       "com.google.common.collect.Iterators$12",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
374:     );
375:   }
376: }

[MASTER] 09:59:00.386 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(114);
assertEquals((-1), node0.getCharno());
assertTrue(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(114, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertNotNull(node0);

boolean boolean0 = node0.isFor();
assertEquals((-1), node0.getCharno());
assertTrue(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(114, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertFalse(boolean0);

Iterable<Node> iterable0 = node0.children();
assertEquals((-1), node0.getCharno());
assertTrue(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(114, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));


[MASTER] 09:59:42.833 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:43.278 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:43.488 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:43.703 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/4
* Done!

* Computation finished
