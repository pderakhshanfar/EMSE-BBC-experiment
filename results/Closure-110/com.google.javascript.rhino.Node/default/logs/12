* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 19228
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 1030077925
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:08:28.854 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1920: com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;:566 - ReplaceComparisonOperator <= -> <
[MASTER] 10:08:28.866 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;
[MASTER] 10:08:30.132 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:08:32.625 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:09:41.451 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 10:10:03.020 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 604s and 733 generations, 312328 statements, best individual has fitness: 2558.0
* Minimizing test suite
[MASTER] 10:19:55.102 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 798
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 714
* Number of covered goals: 639
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 108
* Number of covered goals: 108
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 530
* Number of covered goals: 480
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 54%
* Total number of goals: 4536
* Number of covered goals: 2439
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 211
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 84%
* Total number of goals: 714
* Number of covered goals: 603
* Generated 1264 tests with total length 12701
* Resulting test suite's coverage: 79% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:21:24.686 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6754166666666667% of time used, but only 67/1264 tests minimized), falling back to using all assertions
[MASTER] 10:21:44.488 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 14%
* Compiling and checking tests
[MASTER] 10:21:58.319 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 14 seconds more than allowed.
[MASTER] 10:22:04.319 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_113_1628158924122/com/google/javascript/rhino/Node_113_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_113_1628158924122/com/google/javascript/rhino/Node_113_tmp__ESTest_scaffolding.java]]
[MASTER] 10:22:04.319 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:22:04.319 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:22:04.322 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 978
[MASTER] 10:22:04.324 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_113_1628158924122/com/google/javascript/rhino/Node_113_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:22:04 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.FunctionType;
14: import com.google.javascript.rhino.jstype.JSType;
15: import com.google.javascript.rhino.jstype.JSTypeRegistry;
16: import com.google.javascript.rhino.jstype.ObjectType;
17: import com.google.javascript.rhino.jstype.TemplateType;
18: import java.util.List;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class Node_113_tmp__ESTest extends Node_113_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       Node node0 = Node.newString("", 0, 0);
29:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
30:       assertEquals(54, Node.SLASH_V);
31:       assertEquals(57, Node.REFLECTED_OBJECT);
32:       assertEquals(52, Node.LENGTH);
33:       assertEquals(30, Node.VAR_ARGS_NAME);
34:       assertEquals(40, Node.ORIGINALNAME_PROP);
35:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
36:       assertEquals(48, Node.DIRECTIVES);
37:       assertEquals(49, Node.DIRECT_EVAL);
38:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
39:       assertEquals(39, Node.EMPTY_BLOCK);
40:       assertEquals(47, Node.IS_DISPATCHER);
41:       assertEquals(8, Node.FLAG_NO_THROWS);
42:       assertEquals(2, Node.POST_FLAG);
43:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
44:       assertEquals(55, Node.INFERRED_FUNCTION);
45:       assertEquals(29, Node.JSDOC_INFO_PROP);
46:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
47:       assertEquals(15, Node.NO_SIDE_EFFECTS);
48:       assertEquals(57, Node.LAST_PROP);
49:       assertEquals(53, Node.INPUT_ID);
50:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
51:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
52:       assertEquals(36, Node.QUOTED_PROP);
53:       assertEquals(43, Node.IS_CONSTANT_NAME);
54:       assertEquals(56, Node.CHANGE_TIME);
55:       assertEquals(37, Node.OPT_ARG_NAME);
56:       assertEquals(46, Node.IS_NAMESPACE);
57:       assertEquals(51, Node.STATIC_SOURCE_FILE);
58:       assertEquals(4095, Node.COLUMN_MASK);
59:       assertEquals(50, Node.FREE_CALL);
60:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
61:       assertEquals(1, Node.DECR_FLAG);
62:       assertEquals(12, Node.COLUMN_BITS);
63:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
64:       assertEquals(32, Node.INCRDECR_PROP);
65:       assertFalse(node0.isSetterDef());
66:       assertFalse(node0.isNull());
67:       assertFalse(node0.isParamList());
68:       assertEquals(0, node0.getLineno());
69:       assertFalse(node0.isName());
70:       assertFalse(node0.isVar());
71:       assertFalse(node0.isCatch());
72:       assertFalse(node0.isCall());
73:       assertEquals(40, node0.getType());
74:       assertFalse(node0.isBlock());
75:       assertEquals(0, node0.getChildCount());
76:       assertFalse(node0.isRegExp());
77:       assertFalse(node0.isTrue());
78:       assertFalse(node0.isDefaultCase());
79:       assertFalse(node0.isDo());
80:       assertFalse(node0.isAdd());
81:       assertFalse(node0.isVoid());
82:       assertFalse(node0.isNew());
83:       assertFalse(node0.isOr());
84:       assertEquals(0, node0.getSourcePosition());
85:       assertFalse(node0.isNE());
86:       assertFalse(node0.isNumber());
87:       assertFalse(node0.isIf());
88:       assertFalse(node0.isEmpty());
89:       assertFalse(node0.isAssignAdd());
90:       assertFalse(node0.isLabelName());
91:       assertFalse(node0.hasMoreThanOneChild());
92:       assertFalse(node0.isLabel());
93:       assertFalse(node0.isFor());
94:       assertFalse(node0.isSwitch());
95:       assertFalse(node0.isScript());
96:       assertFalse(node0.isTry());
97:       assertTrue(node0.isString());
98:       assertFalse(node0.isCase());
99:       assertFalse(node0.isArrayLit());
100:       assertFalse(node0.hasOneChild());
101:       assertFalse(node0.isStringKey());
102:       assertFalse(node0.isGetterDef());
103:       assertFalse(node0.isThis());
104:       assertFalse(node0.isGetProp());
105:       assertFalse(node0.isBreak());
106:       assertFalse(node0.isHook());
107:       assertFalse(node0.isThrow());
108:       assertFalse(node0.isFalse());
109:       assertFalse(node0.isInstanceOf());
110:       assertFalse(node0.isWith());
111:       assertFalse(node0.isComma());
112:       assertFalse(node0.isInc());
113:       assertFalse(node0.isExprResult());
114:       assertEquals(0, node0.getCharno());
115:       assertFalse(node0.isIn());
116:       assertFalse(node0.isTypeOf());
117:       assertFalse(node0.isDelProp());
118:       assertFalse(node0.isGetElem());
119:       assertFalse(node0.isCast());
120:       assertFalse(node0.isContinue());
121:       assertFalse(node0.isAssign());
122:       assertFalse(node0.isReturn());
123:       assertFalse(node0.hasChildren());
124:       assertFalse(node0.isDec());
125:       assertFalse(node0.isFunction());
126:       assertFalse(node0.isWhile());
127:       assertFalse(node0.isObjectLit());
128:       assertFalse(node0.isAnd());
129:       assertFalse(node0.isNot());
130:       assertFalse(node0.isDebugger());
131:       assertNotNull(node0);
132:       
133:       boolean boolean0 = node0.getBooleanProp(0);
134:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
135:       assertEquals(54, Node.SLASH_V);
136:       assertEquals(57, Node.REFLECTED_OBJECT);
137:       assertEquals(52, Node.LENGTH);
138:       assertEquals(30, Node.VAR_ARGS_NAME);
139:       assertEquals(40, Node.ORIGINALNAME_PROP);
140:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
141:       assertEquals(48, Node.DIRECTIVES);
142:       assertEquals(49, Node.DIRECT_EVAL);
143:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
144:       assertEquals(39, Node.EMPTY_BLOCK);
145:       assertEquals(47, Node.IS_DISPATCHER);
146:       assertEquals(8, Node.FLAG_NO_THROWS);
147:       assertEquals(2, Node.POST_FLAG);
148:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
149:       assertEquals(55, Node.INFERRED_FUNCTION);
150:       assertEquals(29, Node.JSDOC_INFO_PROP);
151:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
152:       assertEquals(15, Node.NO_SIDE_EFFECTS);
153:       assertEquals(57, Node.LAST_PROP);
154:       assertEquals(53, Node.INPUT_ID);
155:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
156:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
157:       assertEquals(36, Node.QUOTED_PROP);
158:       assertEquals(43, Node.IS_CONSTANT_NAME);
159:       assertEquals(56, Node.CHANGE_TIME);
160:       assertEquals(37, Node.OPT_ARG_NAME);
161:       assertEquals(46, Node.IS_NAMESPACE);
162:       assertEquals(51, Node.STATIC_SOURCE_FILE);
163:       assertEquals(4095, Node.COLUMN_MASK);
164:       assertEquals(50, Node.FREE_CALL);
165:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
166:       assertEquals(1, Node.DECR_FLAG);
167:       assertEquals(12, Node.COLUMN_BITS);
168:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
169:       assertEquals(32, Node.INCRDECR_PROP);
170:       assertFalse(node0.isSetterDef());
171:       assertFalse(node0.isNull());
172:       assertFalse(node0.isParamList());
173:       assertEquals(0, node0.getLineno());
174:       assertFalse(node0.isName());
175:       assertFalse(node0.isVar());
176:       assertFalse(node0.isCatch());
177:       assertFalse(node0.isCall());
178:       assertEquals(40, node0.getType());
179:       assertFalse(node0.isBlock());
180:       assertEquals(0, node0.getChildCount());
181:       assertFalse(node0.isRegExp());
182:       assertFalse(node0.isTrue());
183:       assertFalse(node0.isDefaultCase());
184:       assertFalse(node0.isDo());
185:       assertFalse(node0.isAdd());
186:       assertFalse(node0.isVoid());
187:       assertFalse(node0.isNew());
188:       assertFalse(node0.isOr());
189:       assertEquals(0, node0.getSourcePosition());
190:       assertFalse(node0.isNE());
191:       assertFalse(node0.isNumber());
192:       assertFalse(node0.isIf());
193:       assertFalse(node0.isEmpty());
194:       assertFalse(node0.isAssignAdd());
195:       assertFalse(node0.isLabelName());
196:       assertFalse(node0.hasMoreThanOneChild());
197:       assertFalse(node0.isLabel());
198:       assertFalse(node0.isFor());
199:       assertFalse(node0.isSwitch());
200:       assertFalse(node0.isScript());
201:       assertFalse(node0.isTry());
202:       assertTrue(node0.isString());
203:       assertFalse(node0.isCase());
204:       assertFalse(node0.isArrayLit());
205:       assertFalse(node0.hasOneChild());
206:       assertFalse(node0.isStringKey());
207:       assertFalse(node0.isGetterDef());
208:       assertFalse(node0.isThis());
209:       assertFalse(node0.isGetProp());
210:       assertFalse(node0.isBreak());
211:       assertFalse(node0.isHook());
212:       assertFalse(node0.isThrow());
213:       assertFalse(node0.isFalse());
214:       assertFalse(node0.isInstanceOf());
215:       assertFalse(node0.isWith());
216:       assertFalse(node0.isComma());
217:       assertFalse(node0.isInc());
218:       assertFalse(node0.isExprResult());
219:       assertEquals(0, node0.getCharno());
220:       assertFalse(node0.isIn());
221:       assertFalse(node0.isTypeOf());
222:       assertFalse(node0.isDelProp());
223:       assertFalse(node0.isGetElem());
224:       assertFalse(node0.isCast());
225:       assertFalse(node0.isContinue());
226:       assertFalse(node0.isAssign());
227:       assertFalse(node0.isReturn());
228:       assertFalse(node0.hasChildren());
229:       assertFalse(node0.isDec());
230:       assertFalse(node0.isFunction());
231:       assertFalse(node0.isWhile());
232:       assertFalse(node0.isObjectLit());
233:       assertFalse(node0.isAnd());
234:       assertFalse(node0.isNot());
235:       assertFalse(node0.isDebugger());
236:       assertFalse(boolean0);
237:       
238:       boolean boolean1 = false;
239:       String string0 = node0.toString(false, false, false);
240:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
241:       assertEquals(54, Node.SLASH_V);
242:       assertEquals(57, Node.REFLECTED_OBJECT);
243:       assertEquals(52, Node.LENGTH);
244:       assertEquals(30, Node.VAR_ARGS_NAME);
245:       assertEquals(40, Node.ORIGINALNAME_PROP);
246:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
247:       assertEquals(48, Node.DIRECTIVES);
248:       assertEquals(49, Node.DIRECT_EVAL);
249:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
250:       assertEquals(39, Node.EMPTY_BLOCK);
251:       assertEquals(47, Node.IS_DISPATCHER);
252:       assertEquals(8, Node.FLAG_NO_THROWS);
253:       assertEquals(2, Node.POST_FLAG);
254:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
255:       assertEquals(55, Node.INFERRED_FUNCTION);
256:       assertEquals(29, Node.JSDOC_INFO_PROP);
257:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
258:       assertEquals(15, Node.NO_SIDE_EFFECTS);
259:       assertEquals(57, Node.LAST_PROP);
260:       assertEquals(53, Node.INPUT_ID);
261:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
262:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
263:       assertEquals(36, Node.QUOTED_PROP);
264:       assertEquals(43, Node.IS_CONSTANT_NAME);
265:       assertEquals(56, Node.CHANGE_TIME);
266:       assertEquals(37, Node.OPT_ARG_NAME);
267:       assertEquals(46, Node.IS_NAMESPACE);
268:       assertEquals(51, Node.STATIC_SOURCE_FILE);
269:       assertEquals(4095, Node.COLUMN_MASK);
270:       assertEquals(50, Node.FREE_CALL);
271:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
272:       assertEquals(1, Node.DECR_FLAG);
273:       assertEquals(12, Node.COLUMN_BITS);
274:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
275:       assertEquals(32, Node.INCRDECR_PROP);
276:       assertFalse(node0.isSetterDef());
277:       assertFalse(node0.isNull());
278:       assertFalse(node0.isParamList());
279:       assertEquals(0, node0.getLineno());
280:       assertFalse(node0.isName());
281:       assertFalse(node0.isVar());
282:       assertFalse(node0.isCatch());
283:       assertFalse(node0.isCall());
284:       assertEquals(40, node0.getType());
285:       assertFalse(node0.isBlock());
286:       assertEquals(0, node0.getChildCount());
287:       assertFalse(node0.isRegExp());
288:       assertFalse(node0.isTrue());
289:       assertFalse(node0.isDefaultCase());
290:       assertFalse(node0.isDo());
291:       assertFalse(node0.isAdd());
292:       assertFalse(node0.isVoid());
293:       assertFalse(node0.isNew());
294:       assertFalse(node0.isOr());
295:       assertEquals(0, node0.getSourcePosition());
296:       assertFalse(node0.isNE());
297:       assertFalse(node0.isNumber());
298:       assertFalse(node0.isIf());
299:       assertFalse(node0.isEmpty());
300:       assertFalse(node0.isAssignAdd());
301:       assertFalse(node0.isLabelName());
302:       assertFalse(node0.hasMoreThanOneChild());
303:       assertFalse(node0.isLabel());
304:       assertFalse(node0.isFor());
305:       assertFalse(node0.isSwitch());
306:       assertFalse(node0.isScript());
307:       assertFalse(node0.isTry());
308:       assertTrue(node0.isString());
309:       assertFalse(node0.isCase());
310:       assertFalse(node0.isArrayLit());
311:       assertFalse(node0.hasOneChild());
312:       assertFalse(node0.isStringKey());
313:       assertFalse(node0.isGetterDef());
314:       assertFalse(node0.isThis());
315:       assertFalse(node0.isGetProp());
316:       assertFalse(node0.isBreak());
317:       assertFalse(node0.isHook());
318:       assertFalse(node0.isThrow());
319:       assertFalse(node0.isFalse());
320:       assertFalse(node0.isInstanceOf());
321:       assertFalse(node0.isWith());
322:       assertFalse(node0.isComma());
323:       assertFalse(node0.isInc());
324:       assertFalse(node0.isExprResult());
325:       assertEquals(0, node0.getCharno());
326:       assertFalse(node0.isIn());
327:       assertFalse(node0.isTypeOf());
328:       assertFalse(node0.isDelProp());
329:       assertFalse(node0.isGetElem());
330:       assertFalse(node0.isCast());
331:       assertFalse(node0.isContinue());
332:       assertFalse(node0.isAssign());
333:       assertFalse(node0.isReturn());
334:       assertFalse(node0.hasChildren());
335:       assertFalse(node0.isDec());
336:       assertFalse(node0.isFunction());
337:       assertFalse(node0.isWhile());
338:       assertFalse(node0.isObjectLit());
339:       assertFalse(node0.isAnd());
340:       assertFalse(node0.isNot());
341:       assertFalse(node0.isDebugger());
342:       assertEquals("STRING ", string0);
343:       assertNotNull(string0);
344:       
345:       Node node1 = node0.getAncestor(0);
346:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
347:       assertEquals(54, Node.SLASH_V);
348:       assertEquals(57, Node.REFLECTED_OBJECT);
349:       assertEquals(52, Node.LENGTH);
350:       assertEquals(30, Node.VAR_ARGS_NAME);
351:       assertEquals(40, Node.ORIGINALNAME_PROP);
352:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
353:       assertEquals(48, Node.DIRECTIVES);
354:       assertEquals(49, Node.DIRECT_EVAL);
355:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
356:       assertEquals(39, Node.EMPTY_BLOCK);
357:       assertEquals(47, Node.IS_DISPATCHER);
358:       assertEquals(8, Node.FLAG_NO_THROWS);
359:       assertEquals(2, Node.POST_FLAG);
360:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
361:       assertEquals(55, Node.INFERRED_FUNCTION);
362:       assertEquals(29, Node.JSDOC_INFO_PROP);
363:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
364:       assertEquals(15, Node.NO_SIDE_EFFECTS);
365:       assertEquals(57, Node.LAST_PROP);
366:       assertEquals(53, Node.INPUT_ID);
367:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
368:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
369:       assertEquals(36, Node.QUOTED_PROP);
370:       assertEquals(43, Node.IS_CONSTANT_NAME);
371:       assertEquals(56, Node.CHANGE_TIME);
372:       assertEquals(37, Node.OPT_ARG_NAME);
373:       assertEquals(46, Node.IS_NAMESPACE);
374:       assertEquals(51, Node.STATIC_SOURCE_FILE);
375:       assertEquals(4095, Node.COLUMN_MASK);
376:       assertEquals(50, Node.FREE_CALL);
377:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
378:       assertEquals(1, Node.DECR_FLAG);
379:       assertEquals(12, Node.COLUMN_BITS);
380:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
381:       assertEquals(32, Node.INCRDECR_PROP);
382:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
383:       assertEquals(53, Node.INPUT_ID);
384:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
385:       assertEquals(47, Node.IS_DISPATCHER);
386:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
387:       assertEquals(29, Node.JSDOC_INFO_PROP);
388:       assertEquals(32, Node.INCRDECR_PROP);
389:       assertEquals(55, Node.INFERRED_FUNCTION);
390:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
391:       assertEquals(12, Node.COLUMN_BITS);
392:       assertEquals(4095, Node.COLUMN_MASK);
393:       assertEquals(8, Node.FLAG_NO_THROWS);
394:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
395:       assertEquals(56, Node.CHANGE_TIME);
396:       assertEquals(36, Node.QUOTED_PROP);
397:       assertEquals(48, Node.DIRECTIVES);
398:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
399:       assertEquals(37, Node.OPT_ARG_NAME);
400:       assertEquals(49, Node.DIRECT_EVAL);
401:       assertEquals(40, Node.ORIGINALNAME_PROP);
402:       assertEquals(57, Node.REFLECTED_OBJECT);
403:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
404:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
405:       assertEquals(52, Node.LENGTH);
406:       assertEquals(50, Node.FREE_CALL);
407:       assertEquals(15, Node.NO_SIDE_EFFECTS);
408:       assertEquals(57, Node.LAST_PROP);
409:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
410:       assertEquals(39, Node.EMPTY_BLOCK);
411:       assertEquals(1, Node.DECR_FLAG);
412:       assertEquals(46, Node.IS_NAMESPACE);
413:       assertEquals(51, Node.STATIC_SOURCE_FILE);
414:       assertEquals(2, Node.POST_FLAG);
415:       assertEquals(30, Node.VAR_ARGS_NAME);
416:       assertEquals(43, Node.IS_CONSTANT_NAME);
417:       assertEquals(54, Node.SLASH_V);
418:       assertFalse(node0.isSetterDef());
419:       assertFalse(node0.isNull());
420:       assertFalse(node0.isParamList());
421:       assertEquals(0, node0.getLineno());
422:       assertFalse(node0.isName());
423:       assertFalse(node0.isVar());
424:       assertFalse(node0.isCatch());
425:       assertFalse(node0.isCall());
426:       assertEquals(40, node0.getType());
427:       assertFalse(node0.isBlock());
428:       assertEquals(0, node0.getChildCount());
429:       assertFalse(node0.isRegExp());
430:       assertFalse(node0.isTrue());
431:       assertFalse(node0.isDefaultCase());
432:       assertFalse(node0.isDo());
433:       assertFalse(node0.isAdd());
434:       assertFalse(node0.isVoid());
435:       assertFalse(node0.isNew());
436:       assertFalse(node0.isOr());
437:       assertEquals(0, node0.getSourcePosition());
438:       assertFalse(node0.isNE());
439:       assertFalse(node0.isNumber());
440:       assertFalse(node0.isIf());
441:       assertFalse(node0.isEmpty());
442:       assertFalse(node0.isAssignAdd());
443:       assertFalse(node0.isLabelName());
444:       assertFalse(node0.hasMoreThanOneChild());
445:       assertFalse(node0.isLabel());
446:       assertFalse(node0.isFor());
447:       assertFalse(node0.isSwitch());
448:       assertFalse(node0.isScript());
449:       assertFalse(node0.isTry());
450:       assertTrue(node0.isString());
451:       assertFalse(node0.isCase());
452:       assertFalse(node0.isArrayLit());
453:       assertFalse(node0.hasOneChild());
454:       assertFalse(node0.isStringKey());
455:       assertFalse(node0.isGetterDef());
456:       assertFalse(node0.isThis());
457:       assertFalse(node0.isGetProp());
458:       assertFalse(node0.isBreak());
459:       assertFalse(node0.isHook());
460:       assertFalse(node0.isThrow());
461:       assertFalse(node0.isFalse());
462:       assertFalse(node0.isInstanceOf());
463:       assertFalse(node0.isWith());
464:       assertFalse(node0.isComma());
465:       assertFalse(node0.isInc());
466:       assertFalse(node0.isExprResult());
467:       assertEquals(0, node0.getCharno());
468:       assertFalse(node0.isIn());
469:       assertFalse(node0.isTypeOf());
470:       assertFalse(node0.isDelProp());
471:       assertFalse(node0.isGetElem());
472:       assertFalse(node0.isCast());
473:       assertFalse(node0.isContinue());
474:       assertFalse(node0.isAssign());
475:       assertFalse(node0.isReturn());
476:       assertFalse(node0.hasChildren());
477:       assertFalse(node0.isDec());
478:       assertFalse(node0.isFunction());
479:       assertFalse(node0.isWhile());
480:       assertFalse(node0.isObjectLit());
481:       assertFalse(node0.isAnd());
482:       assertFalse(node0.isNot());
483:       assertFalse(node0.isDebugger());
484:       assertFalse(node1.isNE());
485:       assertFalse(node1.isIf());
486:       assertFalse(node1.isDelProp());
487:       assertFalse(node1.isCase());
488:       assertFalse(node1.isEmpty());
489:       assertFalse(node1.isIn());
490:       assertFalse(node1.isGetterDef());
491:       assertFalse(node1.isTry());
492:       assertFalse(node1.isTrue());
493:       assertFalse(node1.isVoid());
494:       assertFalse(node1.isFor());
495:       assertFalse(node1.isCatch());
496:       assertFalse(node1.isRegExp());
497:       assertFalse(node1.isHook());
498:       assertFalse(node1.isThis());
499:       assertFalse(node1.isComma());
500:       assertEquals(0, node1.getLineno());
501:       assertFalse(node1.isGetProp());
502:       assertFalse(node1.isInstanceOf());
503:       assertFalse(node1.isSetterDef());
504:       assertFalse(node1.isAnd());
505:       assertEquals(0, node1.getCharno());
506:       assertFalse(node1.isObjectLit());
507:       assertFalse(node1.isDebugger());
508:       assertFalse(node1.isNot());
509:       assertFalse(node1.isInc());
510:       assertEquals(40, node1.getType());
511:       assertFalse(node1.isFalse());
512:       assertFalse(node1.isContinue());
513:       assertFalse(node1.isThrow());
514:       assertFalse(node1.isCast());
515:       assertFalse(node1.isFunction());
516:       assertFalse(node1.isLabel());
517:       assertFalse(node1.isReturn());
518:       assertFalse(node1.isAssignAdd());
519:       assertFalse(node1.isLabelName());
520:       assertFalse(node1.isNumber());
521:       assertFalse(node1.isOr());
522:       assertTrue(node1.isString());
523:       assertFalse(node1.isBlock());
524:       assertFalse(node1.isExprResult());
525:       assertFalse(node1.isScript());
526:       assertFalse(node1.hasOneChild());
527:       assertFalse(node1.isWith());
528:       assertFalse(node1.isGetElem());
529:       assertFalse(node1.isCall());
530:       assertFalse(node1.isWhile());
531:       assertFalse(node1.isTypeOf());
532:       assertFalse(node1.hasChildren());
533:       assertFalse(node1.hasMoreThanOneChild());
534:       assertFalse(node1.isDec());
535:       assertFalse(node1.isAssign());
536:       assertFalse(node1.isParamList());
537:       assertFalse(node1.isBreak());
538:       assertFalse(node1.isName());
539:       assertFalse(node1.isStringKey());
540:       assertFalse(node1.isNull());
541:       assertEquals(0, node1.getSourcePosition());
542:       assertFalse(node1.isAdd());
543:       assertFalse(node1.isNew());
544:       assertFalse(node1.isArrayLit());
545:       assertFalse(node1.isDefaultCase());
546:       assertFalse(node1.isSwitch());
547:       assertFalse(node1.isDo());
548:       assertFalse(node1.isVar());
549:       assertEquals(0, node1.getChildCount());
550:       assertSame(node0, node1);
551:       assertSame(node1, node0);
552:       assertNotNull(node1);
553:       
554:       boolean boolean2 = node1.getBooleanProp(1562);
555:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
556:       assertEquals(54, Node.SLASH_V);
557:       assertEquals(57, Node.REFLECTED_OBJECT);
558:       assertEquals(52, Node.LENGTH);
559:       assertEquals(30, Node.VAR_ARGS_NAME);
560:       assertEquals(40, Node.ORIGINALNAME_PROP);
561:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
562:       assertEquals(48, Node.DIRECTIVES);
563:       assertEquals(49, Node.DIRECT_EVAL);
564:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
565:       assertEquals(39, Node.EMPTY_BLOCK);
566:       assertEquals(47, Node.IS_DISPATCHER);
567:       assertEquals(8, Node.FLAG_NO_THROWS);
568:       assertEquals(2, Node.POST_FLAG);
569:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
570:       assertEquals(55, Node.INFERRED_FUNCTION);
571:       assertEquals(29, Node.JSDOC_INFO_PROP);
572:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
573:       assertEquals(15, Node.NO_SIDE_EFFECTS);
574:       assertEquals(57, Node.LAST_PROP);
575:       assertEquals(53, Node.INPUT_ID);
576:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
577:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
578:       assertEquals(36, Node.QUOTED_PROP);
579:       assertEquals(43, Node.IS_CONSTANT_NAME);
580:       assertEquals(56, Node.CHANGE_TIME);
581:       assertEquals(37, Node.OPT_ARG_NAME);
582:       assertEquals(46, Node.IS_NAMESPACE);
583:       assertEquals(51, Node.STATIC_SOURCE_FILE);
584:       assertEquals(4095, Node.COLUMN_MASK);
585:       assertEquals(50, Node.FREE_CALL);
586:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
587:       assertEquals(1, Node.DECR_FLAG);
588:       assertEquals(12, Node.COLUMN_BITS);
589:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
590:       assertEquals(32, Node.INCRDECR_PROP);
591:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
592:       assertEquals(53, Node.INPUT_ID);
593:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
594:       assertEquals(47, Node.IS_DISPATCHER);
595:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
596:       assertEquals(29, Node.JSDOC_INFO_PROP);
597:       assertEquals(32, Node.INCRDECR_PROP);
598:       assertEquals(55, Node.INFERRED_FUNCTION);
599:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
600:       assertEquals(12, Node.COLUMN_BITS);
601:       assertEquals(4095, Node.COLUMN_MASK);
602:       assertEquals(8, Node.FLAG_NO_THROWS);
603:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
604:       assertEquals(56, Node.CHANGE_TIME);
605:       assertEquals(36, Node.QUOTED_PROP);
606:       assertEquals(48, Node.DIRECTIVES);
607:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
608:       assertEquals(37, Node.OPT_ARG_NAME);
609:       assertEquals(49, Node.DIRECT_EVAL);
610:       assertEquals(40, Node.ORIGINALNAME_PROP);
611:       assertEquals(57, Node.REFLECTED_OBJECT);
612:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
613:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
614:       assertEquals(52, Node.LENGTH);
615:       assertEquals(50, Node.FREE_CALL);
616:       assertEquals(15, Node.NO_SIDE_EFFECTS);
617:       assertEquals(57, Node.LAST_PROP);
618:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
619:       assertEquals(39, Node.EMPTY_BLOCK);
620:       assertEquals(1, Node.DECR_FLAG);
621:       assertEquals(46, Node.IS_NAMESPACE);
622:       assertEquals(51, Node.STATIC_SOURCE_FILE);
623:       assertEquals(2, Node.POST_FLAG);
624:       assertEquals(30, Node.VAR_ARGS_NAME);
625:       assertEquals(43, Node.IS_CONSTANT_NAME);
626:       assertEquals(54, Node.SLASH_V);
627:       assertFalse(node0.isSetterDef());
628:       assertFalse(node0.isNull());
629:       assertFalse(node0.isParamList());
630:       assertEquals(0, node0.getLineno());
631:       assertFalse(node0.isName());
632:       assertFalse(node0.isVar());
633:       assertFalse(node0.isCatch());
634:       assertFalse(node0.isCall());
635:       assertEquals(40, node0.getType());
636:       assertFalse(node0.isBlock());
637:       assertEquals(0, node0.getChildCount());
638:       assertFalse(node0.isRegExp());
639:       assertFalse(node0.isTrue());
640:       assertFalse(node0.isDefaultCase());
641:       assertFalse(node0.isDo());
642:       assertFalse(node0.isAdd());
643:       assertFalse(node0.isVoid());
644:       assertFalse(node0.isNew());
645:       assertFalse(node0.isOr());
646:       assertEquals(0, node0.getSourcePosition());
647:       assertFalse(node0.isNE());
648:       assertFalse(node0.isNumber());
649:       assertFalse(node0.isIf());
650:       assertFalse(node0.isEmpty());
651:       assertFalse(node0.isAssignAdd());
652:       assertFalse(node0.isLabelName());
653:       assertFalse(node0.hasMoreThanOneChild());
654:       assertFalse(node0.isLabel());
655:       assertFalse(node0.isFor());
656:       assertFalse(node0.isSwitch());
657:       assertFalse(node0.isScript());
658:       assertFalse(node0.isTry());
659:       assertTrue(node0.isString());
660:       assertFalse(node0.isCase());
661:       assertFalse(node0.isArrayLit());
662:       assertFalse(node0.hasOneChild());
663:       assertFalse(node0.isStringKey());
664:       assertFalse(node0.isGetterDef());
665:       assertFalse(node0.isThis());
666:       assertFalse(node0.isGetProp());
667:       assertFalse(node0.isBreak());
668:       assertFalse(node0.isHook());
669:       assertFalse(node0.isThrow());
670:       assertFalse(node0.isFalse());
671:       assertFalse(node0.isInstanceOf());
672:       assertFalse(node0.isWith());
673:       assertFalse(node0.isComma());
674:       assertFalse(node0.isInc());
675:       assertFalse(node0.isExprResult());
676:       assertEquals(0, node0.getCharno());
677:       assertFalse(node0.isIn());
678:       assertFalse(node0.isTypeOf());
679:       assertFalse(node0.isDelProp());
680:       assertFalse(node0.isGetElem());
681:       assertFalse(node0.isCast());
682:       assertFalse(node0.isContinue());
683:       assertFalse(node0.isAssign());
684:       assertFalse(node0.isReturn());
685:       assertFalse(node0.hasChildren());
686:       assertFalse(node0.isDec());
687:       assertFalse(node0.isFunction());
688:       assertFalse(node0.isWhile());
689:       assertFalse(node0.isObjectLit());
690:       assertFalse(node0.isAnd());
691:       assertFalse(node0.isNot());
692:       assertFalse(node0.isDebugger());
693:       assertFalse(node1.isNE());
694:       assertFalse(node1.isIf());
695:       assertFalse(node1.isDelProp());
696:       assertFalse(node1.isCase());
697:       assertFalse(node1.isEmpty());
698:       assertFalse(node1.isIn());
699:       assertFalse(node1.isGetterDef());
700:       assertFalse(node1.isTry());
701:       assertFalse(node1.isTrue());
702:       assertFalse(node1.isVoid());
703:       assertFalse(node1.isFor());
704:       assertFalse(node1.isCatch());
705:       assertFalse(node1.isRegExp());
706:       assertFalse(node1.isHook());
707:       assertFalse(node1.isThis());
708:       assertFalse(node1.isComma());
709:       assertEquals(0, node1.getLineno());
710:       assertFalse(node1.isGetProp());
711:       assertFalse(node1.isInstanceOf());
712:       assertFalse(node1.isSetterDef());
713:       assertFalse(node1.isAnd());
714:       assertEquals(0, node1.getCharno());
715:       assertFalse(node1.isObjectLit());
716:       assertFalse(node1.isDebugger());
717:       assertFalse(node1.isNot());
718:       assertFalse(node1.isInc());
719:       assertEquals(40, node1.getType());
720:       assertFalse(node1.isFalse());
721:       assertFalse(node1.isContinue());
722:       assertFalse(node1.isThrow());
723:       assertFalse(node1.isCast());
724:       assertFalse(node1.isFunction());
725:       assertFalse(node1.isLabel());
726:       assertFalse(node1.isReturn());
727:       assertFalse(node1.isAssignAdd());
728:       assertFalse(node1.isLabelName());
729:       assertFalse(node1.isNumber());
730:       assertFalse(node1.isOr());
731:       assertTrue(node1.isString());
732:       assertFalse(node1.isBlock());
733:       assertFalse(node1.isExprResult());
734:       assertFalse(node1.isScript());
735:       assertFalse(node1.hasOneChild());
736:       assertFalse(node1.isWith());
737:       assertFalse(node1.isGetElem());
738:       assertFalse(node1.isCall());
739:       assertFalse(node1.isWhile());
740:       assertFalse(node1.isTypeOf());
741:       assertFalse(node1.hasChildren());
742:       assertFalse(node1.hasMoreThanOneChild());
743:       assertFalse(node1.isDec());
744:       assertFalse(node1.isAssign());
745:       assertFalse(node1.isParamList());
746:       assertFalse(node1.isBreak());
747:       assertFalse(node1.isName());
748:       assertFalse(node1.isStringKey());
749:       assertFalse(node1.isNull());
750:       assertEquals(0, node1.getSourcePosition());
751:       assertFalse(node1.isAdd());
752:       assertFalse(node1.isNew());
753:       assertFalse(node1.isArrayLit());
754:       assertFalse(node1.isDefaultCase());
755:       assertFalse(node1.isSwitch());
756:       assertFalse(node1.isDo());
757:       assertFalse(node1.isVar());
758:       assertEquals(0, node1.getChildCount());
759:       assertSame(node0, node1);
760:       assertSame(node1, node0);
761:       assertTrue(boolean2 == boolean0);
762:       assertTrue(boolean2 == boolean1);
763:       assertFalse(boolean2);
764:       
765:       String string1 = node0.getString();
766:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
767:       assertEquals(54, Node.SLASH_V);
768:       assertEquals(57, Node.REFLECTED_OBJECT);
769:       assertEquals(52, Node.LENGTH);
770:       assertEquals(30, Node.VAR_ARGS_NAME);
771:       assertEquals(40, Node.ORIGINALNAME_PROP);
772:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
773:       assertEquals(48, Node.DIRECTIVES);
774:       assertEquals(49, Node.DIRECT_EVAL);
775:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
776:       assertEquals(39, Node.EMPTY_BLOCK);
777:       assertEquals(47, Node.IS_DISPATCHER);
778:       assertEquals(8, Node.FLAG_NO_THROWS);
779:       assertEquals(2, Node.POST_FLAG);
780:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
781:       assertEquals(55, Node.INFERRED_FUNCTION);
782:       assertEquals(29, Node.JSDOC_INFO_PROP);
783:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
784:       assertEquals(15, Node.NO_SIDE_EFFECTS);
785:       assertEquals(57, Node.LAST_PROP);
786:       assertEquals(53, Node.INPUT_ID);
787:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
788:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
789:       assertEquals(36, Node.QUOTED_PROP);
790:       assertEquals(43, Node.IS_CONSTANT_NAME);
791:       assertEquals(56, Node.CHANGE_TIME);
792:       assertEquals(37, Node.OPT_ARG_NAME);
793:       assertEquals(46, Node.IS_NAMESPACE);
794:       assertEquals(51, Node.STATIC_SOURCE_FILE);
795:       assertEquals(4095, Node.COLUMN_MASK);
796:       assertEquals(50, Node.FREE_CALL);
797:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
798:       assertEquals(1, Node.DECR_FLAG);
799:       assertEquals(12, Node.COLUMN_BITS);
800:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
801:       assertEquals(32, Node.INCRDECR_PROP);
802:       assertFalse(node0.isSetterDef());
803:       assertFalse(node0.isNull());
804:       assertFalse(node0.isParamList());
805:       assertEquals(0, node0.getLineno());
806:       assertFalse(node0.isName());
807:       assertFalse(node0.isVar());
808:       assertFalse(node0.isCatch());
809:       assertFalse(node0.isCall());
810:       assertEquals(40, node0.getType());
811:       assertFalse(node0.isBlock());
812:       assertEquals(0, node0.getChildCount());
813:       assertFalse(node0.isRegExp());
814:       assertFalse(node0.isTrue());
815:       assertFalse(node0.isDefaultCase());
816:       assertFalse(node0.isDo());
817:       assertFalse(node0.isAdd());
818:       assertFalse(node0.isVoid());
819:       assertFalse(node0.isNew());
820:       assertFalse(node0.isOr());
821:       assertEquals(0, node0.getSourcePosition());
822:       assertFalse(node0.isNE());
823:       assertFalse(node0.isNumber());
824:       assertFalse(node0.isIf());
825:       assertFalse(node0.isEmpty());
826:       assertFalse(node0.isAssignAdd());
827:       assertFalse(node0.isLabelName());
828:       assertFalse(node0.hasMoreThanOneChild());
829:       assertFalse(node0.isLabel());
830:       assertFalse(node0.isFor());
831:       assertFalse(node0.isSwitch());
832:       assertFalse(node0.isScript());
833:       assertFalse(node0.isTry());
834:       assertTrue(node0.isString());
835:       assertFalse(node0.isCase());
836:       assertFalse(node0.isArrayLit());
837:       assertFalse(node0.hasOneChild());
838:       assertFalse(node0.isStringKey());
839:       assertFalse(node0.isGetterDef());
840:       assertFalse(node0.isThis());
841:       assertFalse(node0.isGetProp());
842:       assertFalse(node0.isBreak());
843:       assertFalse(node0.isHook());
844:       assertFalse(node0.isThrow());
845:       assertFalse(node0.isFalse());
846:       assertFalse(node0.isInstanceOf());
847:       assertFalse(node0.isWith());
848:       assertFalse(node0.isComma());
849:       assertFalse(node0.isInc());
850:       assertFalse(node0.isExprResult());
851:       assertEquals(0, node0.getCharno());
852:       assertFalse(node0.isIn());
853:       assertFalse(node0.isTypeOf());
854:       assertFalse(node0.isDelProp());
855:       assertFalse(node0.isGetElem());
856:       assertFalse(node0.isCast());
857:       assertFalse(node0.isContinue());
858:       assertFalse(node0.isAssign());
859:       assertFalse(node0.isReturn());
860:       assertFalse(node0.hasChildren());
861:       assertFalse(node0.isDec());
862:       assertFalse(node0.isFunction());
863:       assertFalse(node0.isWhile());
864:       assertFalse(node0.isObjectLit());
865:       assertFalse(node0.isAnd());
866:       assertFalse(node0.isNot());
867:       assertFalse(node0.isDebugger());
868:       assertSame(node0, node1);
869:       assertFalse(string1.equals((Object)string0));
870:       assertEquals("", string1);
871:       assertNotNull(string1);
872:       
873:       Iterable<Node> iterable0 = node0.children();
874:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
875:       assertEquals(54, Node.SLASH_V);
876:       assertEquals(57, Node.REFLECTED_OBJECT);
877:       assertEquals(52, Node.LENGTH);
878:       assertEquals(30, Node.VAR_ARGS_NAME);
879:       assertEquals(40, Node.ORIGINALNAME_PROP);
880:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
881:       assertEquals(48, Node.DIRECTIVES);
882:       assertEquals(49, Node.DIRECT_EVAL);
883:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
884:       assertEquals(39, Node.EMPTY_BLOCK);
885:       assertEquals(47, Node.IS_DISPATCHER);
886:       assertEquals(8, Node.FLAG_NO_THROWS);
887:       assertEquals(2, Node.POST_FLAG);
888:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
889:       assertEquals(55, Node.INFERRED_FUNCTION);
890:       assertEquals(29, Node.JSDOC_INFO_PROP);
891:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
892:       assertEquals(15, Node.NO_SIDE_EFFECTS);
893:       assertEquals(57, Node.LAST_PROP);
894:       assertEquals(53, Node.INPUT_ID);
895:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
896:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
897:       assertEquals(36, Node.QUOTED_PROP);
898:       assertEquals(43, Node.IS_CONSTANT_NAME);
899:       assertEquals(56, Node.CHANGE_TIME);
900:       assertEquals(37, Node.OPT_ARG_NAME);
901:       assertEquals(46, Node.IS_NAMESPACE);
902:       assertEquals(51, Node.STATIC_SOURCE_FILE);
903:       assertEquals(4095, Node.COLUMN_MASK);
904:       assertEquals(50, Node.FREE_CALL);
905:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
906:       assertEquals(1, Node.DECR_FLAG);
907:       assertEquals(12, Node.COLUMN_BITS);
908:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
909:       assertEquals(32, Node.INCRDECR_PROP);
910:       assertFalse(node0.isSetterDef());
911:       assertFalse(node0.isNull());
912:       assertFalse(node0.isParamList());
913:       assertEquals(0, node0.getLineno());
914:       assertFalse(node0.isName());
915:       assertFalse(node0.isVar());
916:       assertFalse(node0.isCatch());
917:       assertFalse(node0.isCall());
918:       assertEquals(40, node0.getType());
919:       assertFalse(node0.isBlock());
920:       assertEquals(0, node0.getChildCount());
921:       assertFalse(node0.isRegExp());
922:       assertFalse(node0.isTrue());
923:       assertFalse(node0.isDefaultCase());
924:       assertFalse(node0.isDo());
925:       assertFalse(node0.isAdd());
926:       assertFalse(node0.isVoid());
927:       assertFalse(node0.isNew());
928:       assertFalse(node0.isOr());
929:       assertEquals(0, node0.getSourcePosition());
930:       assertFalse(node0.isNE());
931:       assertFalse(node0.isNumber());
932:       assertFalse(node0.isIf());
933:       assertFalse(node0.isEmpty());
934:       assertFalse(node0.isAssignAdd());
935:       assertFalse(node0.isLabelName());
936:       assertFalse(node0.hasMoreThanOneChild());
937:       assertFalse(node0.isLabel());
938:       assertFalse(node0.isFor());
939:       assertFalse(node0.isSwitch());
940:       assertFalse(node0.isScript());
941:       assertFalse(node0.isTry());
942:       assertTrue(node0.isString());
943:       assertFalse(node0.isCase());
944:       assertFalse(node0.isArrayLit());
945:       assertFalse(node0.hasOneChild());
946:       assertFalse(node0.isStringKey());
947:       assertFalse(node0.isGetterDef());
948:       assertFalse(node0.isThis());
949:       assertFalse(node0.isGetProp());
950:       assertFalse(node0.isBreak());
951:       assertFalse(node0.isHook());
952:       assertFalse(node0.isThrow());
953:       assertFalse(node0.isFalse());
954:       assertFalse(node0.isInstanceOf());
955:       assertFalse(node0.isWith());
956:       assertFalse(node0.isComma());
957:       assertFalse(node0.isInc());
958:       assertFalse(node0.isExprResult());
959:       assertEquals(0, node0.getCharno());
960:       assertFalse(node0.isIn());
961:       assertFalse(node0.isTypeOf());
962:       assertFalse(node0.isDelProp());
963:       assertFalse(node0.isGetElem());
964:       assertFalse(node0.isCast());
965:       assertFalse(node0.isContinue());
966:       assertFalse(node0.isAssign());
967:       assertFalse(node0.isReturn());
968:       assertFalse(node0.hasChildren());
969:       assertFalse(node0.isDec());
970:       assertFalse(node0.isFunction());
971:       assertFalse(node0.isWhile());
972:       assertFalse(node0.isObjectLit());
973:       assertFalse(node0.isAnd());
974:       assertFalse(node0.isNot());
975:       assertFalse(node0.isDebugger());
976:       assertSame(node0, node1);
977:       assertNotNull(iterable0);
978:       assertFalse(iterable0.contains(node1));
979:       
980:       Node node2 = node1.removeFirstChild();
981:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
982:       assertEquals(54, Node.SLASH_V);
983:       assertEquals(57, Node.REFLECTED_OBJECT);
984:       assertEquals(52, Node.LENGTH);
985:       assertEquals(30, Node.VAR_ARGS_NAME);
986:       assertEquals(40, Node.ORIGINALNAME_PROP);
987:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
988:       assertEquals(48, Node.DIRECTIVES);
989:       assertEquals(49, Node.DIRECT_EVAL);
990:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
991:       assertEquals(39, Node.EMPTY_BLOCK);
992:       assertEquals(47, Node.IS_DISPATCHER);
993:       assertEquals(8, Node.FLAG_NO_THROWS);
994:       assertEquals(2, Node.POST_FLAG);
995:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
996:       assertEquals(55, Node.INFERRED_FUNCTION);
997:       assertEquals(29, Node.JSDOC_INFO_PROP);
998:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
999:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1000:       assertEquals(57, Node.LAST_PROP);
1001:       assertEquals(53, Node.INPUT_ID);
1002:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1003:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1004:       assertEquals(36, Node.QUOTED_PROP);
1005:       assertEquals(43, Node.IS_CONSTANT_NAME);
1006:       assertEquals(56, Node.CHANGE_TIME);
1007:       assertEquals(37, Node.OPT_ARG_NAME);
1008:       assertEquals(46, Node.IS_NAMESPACE);
1009:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1010:       assertEquals(4095, Node.COLUMN_MASK);
1011:       assertEquals(50, Node.FREE_CALL);
1012:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1013:       assertEquals(1, Node.DECR_FLAG);
1014:       assertEquals(12, Node.COLUMN_BITS);
1015:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1016:       assertEquals(32, Node.INCRDECR_PROP);
1017:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1018:       assertEquals(53, Node.INPUT_ID);
1019:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1020:       assertEquals(47, Node.IS_DISPATCHER);
1021:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1022:       assertEquals(29, Node.JSDOC_INFO_PROP);
1023:       assertEquals(32, Node.INCRDECR_PROP);
1024:       assertEquals(55, Node.INFERRED_FUNCTION);
1025:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1026:       assertEquals(12, Node.COLUMN_BITS);
1027:       assertEquals(4095, Node.COLUMN_MASK);
1028:       assertEquals(8, Node.FLAG_NO_THROWS);
1029:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1030:       assertEquals(56, Node.CHANGE_TIME);
1031:       assertEquals(36, Node.QUOTED_PROP);
1032:       assertEquals(48, Node.DIRECTIVES);
1033:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1034:       assertEquals(37, Node.OPT_ARG_NAME);
1035:       assertEquals(49, Node.DIRECT_EVAL);
1036:       assertEquals(40, Node.ORIGINALNAME_PROP);
1037:       assertEquals(57, Node.REFLECTED_OBJECT);
1038:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1039:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1040:       assertEquals(52, Node.LENGTH);
1041:       assertEquals(50, Node.FREE_CALL);
1042:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1043:       assertEquals(57, Node.LAST_PROP);
1044:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1045:       assertEquals(39, Node.EMPTY_BLOCK);
1046:       assertEquals(1, Node.DECR_FLAG);
1047:       assertEquals(46, Node.IS_NAMESPACE);
1048:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1049:       assertEquals(2, Node.POST_FLAG);
1050:       assertEquals(30, Node.VAR_ARGS_NAME);
1051:       assertEquals(43, Node.IS_CONSTANT_NAME);
1052:       assertEquals(54, Node.SLASH_V);
1053:       assertFalse(node0.isSetterDef());
1054:       assertFalse(node0.isNull());
1055:       assertFalse(node0.isParamList());
1056:       assertEquals(0, node0.getLineno());
1057:       assertFalse(node0.isName());
1058:       assertFalse(node0.isVar());
1059:       assertFalse(node0.isCatch());
1060:       assertFalse(node0.isCall());
1061:       assertEquals(40, node0.getType());
1062:       assertFalse(node0.isBlock());
1063:       assertEquals(0, node0.getChildCount());
1064:       assertFalse(node0.isRegExp());
1065:       assertFalse(node0.isTrue());
1066:       assertFalse(node0.isDefaultCase());
1067:       assertFalse(node0.isDo());
1068:       assertFalse(node0.isAdd());
1069:       assertFalse(node0.isVoid());
1070:       assertFalse(node0.isNew());
1071:       assertFalse(node0.isOr());
1072:       assertEquals(0, node0.getSourcePosition());
1073:       assertFalse(node0.isNE());
1074:       assertFalse(node0.isNumber());
1075:       assertFalse(node0.isIf());
1076:       assertFalse(node0.isEmpty());
1077:       assertFalse(node0.isAssignAdd());
1078:       assertFalse(node0.isLabelName());
1079:       assertFalse(node0.hasMoreThanOneChild());
1080:       assertFalse(node0.isLabel());
1081:       assertFalse(node0.isFor());
1082:       assertFalse(node0.isSwitch());
1083:       assertFalse(node0.isScript());
1084:       assertFalse(node0.isTry());
1085:       assertTrue(node0.isString());
1086:       assertFalse(node0.isCase());
1087:       assertFalse(node0.isArrayLit());
1088:       assertFalse(node0.hasOneChild());
1089:       assertFalse(node0.isStringKey());
1090:       assertFalse(node0.isGetterDef());
1091:       assertFalse(node0.isThis());
1092:       assertFalse(node0.isGetProp());
1093:       assertFalse(node0.isBreak());
1094:       assertFalse(node0.isHook());
1095:       assertFalse(node0.isThrow());
1096:       assertFalse(node0.isFalse());
1097:       assertFalse(node0.isInstanceOf());
1098:       assertFalse(node0.isWith());
1099:       assertFalse(node0.isComma());
1100:       assertFalse(node0.isInc());
1101:       assertFalse(node0.isExprResult());
1102:       assertEquals(0, node0.getCharno());
1103:       assertFalse(node0.isIn());
1104:       assertFalse(node0.isTypeOf());
1105:       assertFalse(node0.isDelProp());
1106:       assertFalse(node0.isGetElem());
1107:       assertFalse(node0.isCast());
1108:       assertFalse(node0.isContinue());
1109:       assertFalse(node0.isAssign());
1110:       assertFalse(node0.isReturn());
1111:       assertFalse(node0.hasChildren());
1112:       assertFalse(node0.isDec());
1113:       assertFalse(node0.isFunction());
1114:       assertFalse(node0.isWhile());
1115:       assertFalse(node0.isObjectLit());
1116:       assertFalse(node0.isAnd());
1117:       assertFalse(node0.isNot());
1118:       assertFalse(node0.isDebugger());
1119:       assertFalse(node1.isNE());
1120:       assertFalse(node1.isIf());
1121:       assertFalse(node1.isDelProp());
1122:       assertFalse(node1.isCase());
1123:       assertFalse(node1.isEmpty());
1124:       assertFalse(node1.isIn());
1125:       assertFalse(node1.isGetterDef());
1126:       assertFalse(node1.isTry());
1127:       assertFalse(node1.isTrue());
1128:       assertFalse(node1.isVoid());
1129:       assertFalse(node1.isFor());
1130:       assertFalse(node1.isCatch());
1131:       assertFalse(node1.isRegExp());
1132:       assertFalse(node1.isHook());
1133:       assertFalse(node1.isThis());
1134:       assertFalse(node1.isComma());
1135:       assertEquals(0, node1.getLineno());
1136:       assertFalse(node1.isGetProp());
1137:       assertFalse(node1.isInstanceOf());
1138:       assertFalse(node1.isSetterDef());
1139:       assertFalse(node1.isAnd());
1140:       assertEquals(0, node1.getCharno());
1141:       assertFalse(node1.isObjectLit());
1142:       assertFalse(node1.isDebugger());
1143:       assertFalse(node1.isNot());
1144:       assertFalse(node1.isInc());
1145:       assertEquals(40, node1.getType());
1146:       assertFalse(node1.isFalse());
1147:       assertFalse(node1.isContinue());
1148:       assertFalse(node1.isThrow());
1149:       assertFalse(node1.isCast());
1150:       assertFalse(node1.isFunction());
1151:       assertFalse(node1.isLabel());
1152:       assertFalse(node1.isReturn());
1153:       assertFalse(node1.isAssignAdd());
1154:       assertFalse(node1.isLabelName());
1155:       assertFalse(node1.isNumber());
1156:       assertFalse(node1.isOr());
1157:       assertTrue(node1.isString());
1158:       assertFalse(node1.isBlock());
1159:       assertFalse(node1.isExprResult());
1160:       assertFalse(node1.isScript());
1161:       assertFalse(node1.hasOneChild());
1162:       assertFalse(node1.isWith());
1163:       assertFalse(node1.isGetElem());
1164:       assertFalse(node1.isCall());
1165:       assertFalse(node1.isWhile());
1166:       assertFalse(node1.isTypeOf());
1167:       assertFalse(node1.hasChildren());
1168:       assertFalse(node1.hasMoreThanOneChild());
1169:       assertFalse(node1.isDec());
1170:       assertFalse(node1.isAssign());
1171:       assertFalse(node1.isParamList());
1172:       assertFalse(node1.isBreak());
1173:       assertFalse(node1.isName());
1174:       assertFalse(node1.isStringKey());
1175:       assertFalse(node1.isNull());
1176:       assertEquals(0, node1.getSourcePosition());
1177:       assertFalse(node1.isAdd());
1178:       assertFalse(node1.isNew());
1179:       assertFalse(node1.isArrayLit());
1180:       assertFalse(node1.isDefaultCase());
1181:       assertFalse(node1.isSwitch());
1182:       assertFalse(node1.isDo());
1183:       assertFalse(node1.isVar());
1184:       assertEquals(0, node1.getChildCount());
1185:       assertSame(node0, node1);
1186:       assertSame(node1, node0);
1187:       assertNull(node2);
1188:       
1189:       int int0 = node1.getLength();
1190:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1191:       assertEquals(54, Node.SLASH_V);
1192:       assertEquals(57, Node.REFLECTED_OBJECT);
1193:       assertEquals(52, Node.LENGTH);
1194:       assertEquals(30, Node.VAR_ARGS_NAME);
1195:       assertEquals(40, Node.ORIGINALNAME_PROP);
1196:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1197:       assertEquals(48, Node.DIRECTIVES);
1198:       assertEquals(49, Node.DIRECT_EVAL);
1199:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1200:       assertEquals(39, Node.EMPTY_BLOCK);
1201:       assertEquals(47, Node.IS_DISPATCHER);
1202:       assertEquals(8, Node.FLAG_NO_THROWS);
1203:       assertEquals(2, Node.POST_FLAG);
1204:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1205:       assertEquals(55, Node.INFERRED_FUNCTION);
1206:       assertEquals(29, Node.JSDOC_INFO_PROP);
1207:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1208:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1209:       assertEquals(57, Node.LAST_PROP);
1210:       assertEquals(53, Node.INPUT_ID);
1211:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1212:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1213:       assertEquals(36, Node.QUOTED_PROP);
1214:       assertEquals(43, Node.IS_CONSTANT_NAME);
1215:       assertEquals(56, Node.CHANGE_TIME);
1216:       assertEquals(37, Node.OPT_ARG_NAME);
1217:       assertEquals(46, Node.IS_NAMESPACE);
1218:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1219:       assertEquals(4095, Node.COLUMN_MASK);
1220:       assertEquals(50, Node.FREE_CALL);
1221:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1222:       assertEquals(1, Node.DECR_FLAG);
1223:       assertEquals(12, Node.COLUMN_BITS);
1224:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1225:       assertEquals(32, Node.INCRDECR_PROP);
1226:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1227:       assertEquals(53, Node.INPUT_ID);
1228:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1229:       assertEquals(47, Node.IS_DISPATCHER);
1230:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1231:       assertEquals(29, Node.JSDOC_INFO_PROP);
1232:       assertEquals(32, Node.INCRDECR_PROP);
1233:       assertEquals(55, Node.INFERRED_FUNCTION);
1234:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1235:       assertEquals(12, Node.COLUMN_BITS);
1236:       assertEquals(4095, Node.COLUMN_MASK);
1237:       assertEquals(8, Node.FLAG_NO_THROWS);
1238:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1239:       assertEquals(56, Node.CHANGE_TIME);
1240:       assertEquals(36, Node.QUOTED_PROP);
1241:       assertEquals(48, Node.DIRECTIVES);
1242:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1243:       assertEquals(37, Node.OPT_ARG_NAME);
1244:       assertEquals(49, Node.DIRECT_EVAL);
1245:       assertEquals(40, Node.ORIGINALNAME_PROP);
1246:       assertEquals(57, Node.REFLECTED_OBJECT);
1247:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1248:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1249:       assertEquals(52, Node.LENGTH);
1250:       assertEquals(50, Node.FREE_CALL);
1251:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1252:       assertEquals(57, Node.LAST_PROP);
1253:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1254:       assertEquals(39, Node.EMPTY_BLOCK);
1255:       assertEquals(1, Node.DECR_FLAG);
1256:       assertEquals(46, Node.IS_NAMESPACE);
1257:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1258:       assertEquals(2, Node.POST_FLAG);
1259:       assertEquals(30, Node.VAR_ARGS_NAME);
1260:       assertEquals(43, Node.IS_CONSTANT_NAME);
1261:       assertEquals(54, Node.SLASH_V);
1262:       assertFalse(node0.isSetterDef());
1263:       assertFalse(node0.isNull());
1264:       assertFalse(node0.isParamList());
1265:       assertEquals(0, node0.getLineno());
1266:       assertFalse(node0.isName());
1267:       assertFalse(node0.isVar());
1268:       assertFalse(node0.isCatch());
1269:       assertFalse(node0.isCall());
1270:       assertEquals(40, node0.getType());
1271:       assertFalse(node0.isBlock());
1272:       assertEquals(0, node0.getChildCount());
1273:       assertFalse(node0.isRegExp());
1274:       assertFalse(node0.isTrue());
1275:       assertFalse(node0.isDefaultCase());
1276:       assertFalse(node0.isDo());
1277:       assertFalse(node0.isAdd());
1278:       assertFalse(node0.isVoid());
1279:       assertFalse(node0.isNew());
1280:       assertFalse(node0.isOr());
1281:       assertEquals(0, node0.getSourcePosition());
1282:       assertFalse(node0.isNE());
1283:       assertFalse(node0.isNumber());
1284:       assertFalse(node0.isIf());
1285:       assertFalse(node0.isEmpty());
1286:       assertFalse(node0.isAssignAdd());
1287:       assertFalse(node0.isLabelName());
1288:       assertFalse(node0.hasMoreThanOneChild());
1289:       assertFalse(node0.isLabel());
1290:       assertFalse(node0.isFor());
1291:       assertFalse(node0.isSwitch());
1292:       assertFalse(node0.isScript());
1293:       assertFalse(node0.isTry());
1294:       assertTrue(node0.isString());
1295:       assertFalse(node0.isCase());
1296:       assertFalse(node0.isArrayLit());
1297:       assertFalse(node0.hasOneChild());
1298:       assertFalse(node0.isStringKey());
1299:       assertFalse(node0.isGetterDef());
1300:       assertFalse(node0.isThis());
1301:       assertFalse(node0.isGetProp());
1302:       assertFalse(node0.isBreak());
1303:       assertFalse(node0.isHook());
1304:       assertFalse(node0.isThrow());
1305:       assertFalse(node0.isFalse());
1306:       assertFalse(node0.isInstanceOf());
1307:       assertFalse(node0.isWith());
1308:       assertFalse(node0.isComma());
1309:       assertFalse(node0.isInc());
1310:       assertFalse(node0.isExprResult());
1311:       assertEquals(0, node0.getCharno());
1312:       assertFalse(node0.isIn());
1313:       assertFalse(node0.isTypeOf());
1314:       assertFalse(node0.isDelProp());
1315:       assertFalse(node0.isGetElem());
1316:       assertFalse(node0.isCast());
1317:       assertFalse(node0.isContinue());
1318:       assertFalse(node0.isAssign());
1319:       assertFalse(node0.isReturn());
1320:       assertFalse(node0.hasChildren());
1321:       assertFalse(node0.isDec());
1322:       assertFalse(node0.isFunction());
1323:       assertFalse(node0.isWhile());
1324:       assertFalse(node0.isObjectLit());
1325:       assertFalse(node0.isAnd());
1326:       assertFalse(node0.isNot());
1327:       assertFalse(node0.isDebugger());
1328:       assertFalse(node1.isNE());
1329:       assertFalse(node1.isIf());
1330:       assertFalse(node1.isDelProp());
1331:       assertFalse(node1.isCase());
1332:       assertFalse(node1.isEmpty());
1333:       assertFalse(node1.isIn());
1334:       assertFalse(node1.isGetterDef());
1335:       assertFalse(node1.isTry());
1336:       assertFalse(node1.isTrue());
1337:       assertFalse(node1.isVoid());
1338:       assertFalse(node1.isFor());
1339:       assertFalse(node1.isCatch());
1340:       assertFalse(node1.isRegExp());
1341:       assertFalse(node1.isHook());
1342:       assertFalse(node1.isThis());
1343:       assertFalse(node1.isComma());
1344:       assertEquals(0, node1.getLineno());
1345:       assertFalse(node1.isGetProp());
1346:       assertFalse(node1.isInstanceOf());
1347:       assertFalse(node1.isSetterDef());
1348:       assertFalse(node1.isAnd());
1349:       assertEquals(0, node1.getCharno());
1350:       assertFalse(node1.isObjectLit());
1351:       assertFalse(node1.isDebugger());
1352:       assertFalse(node1.isNot());
1353:       assertFalse(node1.isInc());
1354:       assertEquals(40, node1.getType());
1355:       assertFalse(node1.isFalse());
1356:       assertFalse(node1.isContinue());
1357:       assertFalse(node1.isThrow());
1358:       assertFalse(node1.isCast());
1359:       assertFalse(node1.isFunction());
1360:       assertFalse(node1.isLabel());
1361:       assertFalse(node1.isReturn());
1362:       assertFalse(node1.isAssignAdd());
1363:       assertFalse(node1.isLabelName());
1364:       assertFalse(node1.isNumber());
1365:       assertFalse(node1.isOr());
1366:       assertTrue(node1.isString());
1367:       assertFalse(node1.isBlock());
1368:       assertFalse(node1.isExprResult());
1369:       assertFalse(node1.isScript());
1370:       assertFalse(node1.hasOneChild());
1371:       assertFalse(node1.isWith());
1372:       assertFalse(node1.isGetElem());
1373:       assertFalse(node1.isCall());
1374:       assertFalse(node1.isWhile());
1375:       assertFalse(node1.isTypeOf());
1376:       assertFalse(node1.hasChildren());
1377:       assertFalse(node1.hasMoreThanOneChild());
1378:       assertFalse(node1.isDec());
1379:       assertFalse(node1.isAssign());
1380:       assertFalse(node1.isParamList());
1381:       assertFalse(node1.isBreak());
1382:       assertFalse(node1.isName());
1383:       assertFalse(node1.isStringKey());
1384:       assertFalse(node1.isNull());
1385:       assertEquals(0, node1.getSourcePosition());
1386:       assertFalse(node1.isAdd());
1387:       assertFalse(node1.isNew());
1388:       assertFalse(node1.isArrayLit());
1389:       assertFalse(node1.isDefaultCase());
1390:       assertFalse(node1.isSwitch());
1391:       assertFalse(node1.isDo());
1392:       assertFalse(node1.isVar());
1393:       assertEquals(0, node1.getChildCount());
1394:       assertSame(node0, node1);
1395:       assertSame(node1, node0);
1396:       assertEquals(0, int0);
1397:       
1398:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
1399:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1400:       assertEquals(0, node_SideEffectFlags0.valueOf());
1401:       assertNotNull(node_SideEffectFlags0);
1402:       
1403:       boolean boolean3 = node0.isNoSideEffectsCall();
1404:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1405:       assertEquals(54, Node.SLASH_V);
1406:       assertEquals(57, Node.REFLECTED_OBJECT);
1407:       assertEquals(52, Node.LENGTH);
1408:       assertEquals(30, Node.VAR_ARGS_NAME);
1409:       assertEquals(40, Node.ORIGINALNAME_PROP);
1410:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1411:       assertEquals(48, Node.DIRECTIVES);
1412:       assertEquals(49, Node.DIRECT_EVAL);
1413:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1414:       assertEquals(39, Node.EMPTY_BLOCK);
1415:       assertEquals(47, Node.IS_DISPATCHER);
1416:       assertEquals(8, Node.FLAG_NO_THROWS);
1417:       assertEquals(2, Node.POST_FLAG);
1418:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1419:       assertEquals(55, Node.INFERRED_FUNCTION);
1420:       assertEquals(29, Node.JSDOC_INFO_PROP);
1421:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1422:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1423:       assertEquals(57, Node.LAST_PROP);
1424:       assertEquals(53, Node.INPUT_ID);
1425:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1426:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1427:       assertEquals(36, Node.QUOTED_PROP);
1428:       assertEquals(43, Node.IS_CONSTANT_NAME);
1429:       assertEquals(56, Node.CHANGE_TIME);
1430:       assertEquals(37, Node.OPT_ARG_NAME);
1431:       assertEquals(46, Node.IS_NAMESPACE);
1432:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1433:       assertEquals(4095, Node.COLUMN_MASK);
1434:       assertEquals(50, Node.FREE_CALL);
1435:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1436:       assertEquals(1, Node.DECR_FLAG);
1437:       assertEquals(12, Node.COLUMN_BITS);
1438:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1439:       assertEquals(32, Node.INCRDECR_PROP);
1440:       assertFalse(node0.isSetterDef());
1441:       assertFalse(node0.isNull());
1442:       assertFalse(node0.isParamList());
1443:       assertEquals(0, node0.getLineno());
1444:       assertFalse(node0.isName());
1445:       assertFalse(node0.isVar());
1446:       assertFalse(node0.isCatch());
1447:       assertFalse(node0.isCall());
1448:       assertEquals(40, node0.getType());
1449:       assertFalse(node0.isBlock());
1450:       assertEquals(0, node0.getChildCount());
1451:       assertFalse(node0.isRegExp());
1452:       assertFalse(node0.isTrue());
1453:       assertFalse(node0.isDefaultCase());
1454:       assertFalse(node0.isDo());
1455:       assertFalse(node0.isAdd());
1456:       assertFalse(node0.isVoid());
1457:       assertFalse(node0.isNew());
1458:       assertFalse(node0.isOr());
1459:       assertEquals(0, node0.getSourcePosition());
1460:       assertFalse(node0.isNE());
1461:       assertFalse(node0.isNumber());
1462:       assertFalse(node0.isIf());
1463:       assertFalse(node0.isEmpty());
1464:       assertFalse(node0.isAssignAdd());
1465:       assertFalse(node0.isLabelName());
1466:       assertFalse(node0.hasMoreThanOneChild());
1467:       assertFalse(node0.isLabel());
1468:       assertFalse(node0.isFor());
1469:       assertFalse(node0.isSwitch());
1470:       assertFalse(node0.isScript());
1471:       assertFalse(node0.isTry());
1472:       assertTrue(node0.isString());
1473:       assertFalse(node0.isCase());
1474:       assertFalse(node0.isArrayLit());
1475:       assertFalse(node0.hasOneChild());
1476:       assertFalse(node0.isStringKey());
1477:       assertFalse(node0.isGetterDef());
1478:       assertFalse(node0.isThis());
1479:       assertFalse(node0.isGetProp());
1480:       assertFalse(node0.isBreak());
1481:       assertFalse(node0.isHook());
1482:       assertFalse(node0.isThrow());
1483:       assertFalse(node0.isFalse());
1484:       assertFalse(node0.isInstanceOf());
1485:       assertFalse(node0.isWith());
1486:       assertFalse(node0.isComma());
1487:       assertFalse(node0.isInc());
1488:       assertFalse(node0.isExprResult());
1489:       assertEquals(0, node0.getCharno());
1490:       assertFalse(node0.isIn());
1491:       assertFalse(node0.isTypeOf());
1492:       assertFalse(node0.isDelProp());
1493:       assertFalse(node0.isGetElem());
1494:       assertFalse(node0.isCast());
1495:       assertFalse(node0.isContinue());
1496:       assertFalse(node0.isAssign());
1497:       assertFalse(node0.isReturn());
1498:       assertFalse(node0.hasChildren());
1499:       assertFalse(node0.isDec());
1500:       assertFalse(node0.isFunction());
1501:       assertFalse(node0.isWhile());
1502:       assertFalse(node0.isObjectLit());
1503:       assertFalse(node0.isAnd());
1504:       assertFalse(node0.isNot());
1505:       assertFalse(node0.isDebugger());
1506:       assertSame(node0, node1);
1507:       assertTrue(boolean3 == boolean1);
1508:       assertTrue(boolean3 == boolean2);
1509:       assertTrue(boolean3 == boolean0);
1510:       assertFalse(boolean3);
1511:       
1512:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
1513:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1514:       assertEquals(0, node_SideEffectFlags0.valueOf());
1515:       assertEquals(0, node_SideEffectFlags1.valueOf());
1516:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1517:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1518:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1519:       assertNotNull(node_SideEffectFlags1);
1520:       
1521:       boolean boolean4 = node0.isName();
1522:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1523:       assertEquals(54, Node.SLASH_V);
1524:       assertEquals(57, Node.REFLECTED_OBJECT);
1525:       assertEquals(52, Node.LENGTH);
1526:       assertEquals(30, Node.VAR_ARGS_NAME);
1527:       assertEquals(40, Node.ORIGINALNAME_PROP);
1528:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1529:       assertEquals(48, Node.DIRECTIVES);
1530:       assertEquals(49, Node.DIRECT_EVAL);
1531:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1532:       assertEquals(39, Node.EMPTY_BLOCK);
1533:       assertEquals(47, Node.IS_DISPATCHER);
1534:       assertEquals(8, Node.FLAG_NO_THROWS);
1535:       assertEquals(2, Node.POST_FLAG);
1536:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1537:       assertEquals(55, Node.INFERRED_FUNCTION);
1538:       assertEquals(29, Node.JSDOC_INFO_PROP);
1539:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1540:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1541:       assertEquals(57, Node.LAST_PROP);
1542:       assertEquals(53, Node.INPUT_ID);
1543:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1544:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1545:       assertEquals(36, Node.QUOTED_PROP);
1546:       assertEquals(43, Node.IS_CONSTANT_NAME);
1547:       assertEquals(56, Node.CHANGE_TIME);
1548:       assertEquals(37, Node.OPT_ARG_NAME);
1549:       assertEquals(46, Node.IS_NAMESPACE);
1550:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1551:       assertEquals(4095, Node.COLUMN_MASK);
1552:       assertEquals(50, Node.FREE_CALL);
1553:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1554:       assertEquals(1, Node.DECR_FLAG);
1555:       assertEquals(12, Node.COLUMN_BITS);
1556:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1557:       assertEquals(32, Node.INCRDECR_PROP);
1558:       assertFalse(node0.isSetterDef());
1559:       assertFalse(node0.isNull());
1560:       assertFalse(node0.isParamList());
1561:       assertEquals(0, node0.getLineno());
1562:       assertFalse(node0.isName());
1563:       assertFalse(node0.isVar());
1564:       assertFalse(node0.isCatch());
1565:       assertFalse(node0.isCall());
1566:       assertEquals(40, node0.getType());
1567:       assertFalse(node0.isBlock());
1568:       assertEquals(0, node0.getChildCount());
1569:       assertFalse(node0.isRegExp());
1570:       assertFalse(node0.isTrue());
1571:       assertFalse(node0.isDefaultCase());
1572:       assertFalse(node0.isDo());
1573:       assertFalse(node0.isAdd());
1574:       assertFalse(node0.isVoid());
1575:       assertFalse(node0.isNew());
1576:       assertFalse(node0.isOr());
1577:       assertEquals(0, node0.getSourcePosition());
1578:       assertFalse(node0.isNE());
1579:       assertFalse(node0.isNumber());
1580:       assertFalse(node0.isIf());
1581:       assertFalse(node0.isEmpty());
1582:       assertFalse(node0.isAssignAdd());
1583:       assertFalse(node0.isLabelName());
1584:       assertFalse(node0.hasMoreThanOneChild());
1585:       assertFalse(node0.isLabel());
1586:       assertFalse(node0.isFor());
1587:       assertFalse(node0.isSwitch());
1588:       assertFalse(node0.isScript());
1589:       assertFalse(node0.isTry());
1590:       assertTrue(node0.isString());
1591:       assertFalse(node0.isCase());
1592:       assertFalse(node0.isArrayLit());
1593:       assertFalse(node0.hasOneChild());
1594:       assertFalse(node0.isStringKey());
1595:       assertFalse(node0.isGetterDef());
1596:       assertFalse(node0.isThis());
1597:       assertFalse(node0.isGetProp());
1598:       assertFalse(node0.isBreak());
1599:       assertFalse(node0.isHook());
1600:       assertFalse(node0.isThrow());
1601:       assertFalse(node0.isFalse());
1602:       assertFalse(node0.isInstanceOf());
1603:       assertFalse(node0.isWith());
1604:       assertFalse(node0.isComma());
1605:       assertFalse(node0.isInc());
1606:       assertFalse(node0.isExprResult());
1607:       assertEquals(0, node0.getCharno());
1608:       assertFalse(node0.isIn());
1609:       assertFalse(node0.isTypeOf());
1610:       assertFalse(node0.isDelProp());
1611:       assertFalse(node0.isGetElem());
1612:       assertFalse(node0.isCast());
1613:       assertFalse(node0.isContinue());
1614:       assertFalse(node0.isAssign());
1615:       assertFalse(node0.isReturn());
1616:       assertFalse(node0.hasChildren());
1617:       assertFalse(node0.isDec());
1618:       assertFalse(node0.isFunction());
1619:       assertFalse(node0.isWhile());
1620:       assertFalse(node0.isObjectLit());
1621:       assertFalse(node0.isAnd());
1622:       assertFalse(node0.isNot());
1623:       assertFalse(node0.isDebugger());
1624:       assertSame(node0, node1);
1625:       assertTrue(boolean4 == boolean3);
1626:       assertTrue(boolean4 == boolean1);
1627:       assertTrue(boolean4 == boolean0);
1628:       assertTrue(boolean4 == boolean2);
1629:       assertFalse(boolean4);
1630:       
1631:       try { 
1632:         node1.getDouble();
1633:         fail("Expecting exception: UnsupportedOperationException");
1634:       
1635:       } catch(UnsupportedOperationException e) {
1636:          //
1637:          // STRING  0 is not a number node
1638:          //
1639:          verifyException("com.google.javascript.rhino.Node", e);
1640:       }
1641:   }
1642: }
RegularFileObject[/tmp/EvoSuite_113_1628158924122/com/google/javascript/rhino/Node_113_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:22:04 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_113_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_113_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.common.collect.AbstractMapBasedMultimap$1",
120:       "com.google.common.collect.AbstractMapBasedMultimap$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.common.collect.AbstractMultimap$Values",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMultimap$Entries",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.Multimaps$Entries",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_113_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
267:       "com.google.javascript.rhino.SimpleErrorReporter",
268:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
269:       "com.google.common.base.Joiner",
270:       "com.google.common.base.Preconditions",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.jstype.ArrowType",
322:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
323:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
324:       "com.google.javascript.rhino.jstype.InstanceObjectType",
325:       "com.google.javascript.rhino.jstype.Property",
326:       "com.google.common.collect.Lists",
327:       "com.google.javascript.rhino.jstype.NoObjectType",
328:       "com.google.javascript.rhino.jstype.NoType",
329:       "com.google.javascript.rhino.jstype.NoResolvedType",
330:       "com.google.common.collect.SingletonImmutableList",
331:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
332:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
333:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
334:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
335:       "com.google.javascript.rhino.jstype.UnionType",
336:       "com.google.javascript.rhino.jstype.FunctionBuilder",
337:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.AbstractMultimap$Values",
341:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
342:       "com.google.common.collect.AbstractMapBasedMultimap$1",
343:       "com.google.common.collect.Multimaps$Entries",
344:       "com.google.common.collect.AbstractMultimap$Entries",
345:       "com.google.common.collect.AbstractMapBasedMultimap$2",
346:       "com.google.javascript.rhino.JSDocInfo",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.base.Objects",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
351:       "com.google.common.collect.Sets",
352:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
353:       "com.google.javascript.rhino.InputId",
354:       "com.google.common.collect.AbstractIndexedListIterator",
355:       "com.google.common.collect.Iterators$11",
356:       "com.google.common.collect.Iterables",
357:       "com.google.common.collect.Iterators$12",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.javascript.rhino.jstype.NamedType",
363:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
364:       "com.google.common.collect.Platform",
365:       "com.google.javascript.rhino.jstype.JSType$TypePair"
366:     );
367:   }
368: }

[MASTER] 10:22:04.415 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("", 0, 0);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertNotNull(node0);

boolean boolean0 = node0.getBooleanProp(0);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(boolean0);

boolean boolean1 = false;
String string0 = node0.toString(false, false, false);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals("STRING ", string0);
assertNotNull(string0);

Node node1 = node0.getAncestor(0);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertEquals(0, node1.getLineno());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertEquals(0, node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isInc());
assertEquals(40, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertEquals(0, node1.getSourcePosition());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertSame(node0, node1);
assertSame(node1, node0);
assertNotNull(node1);

boolean boolean2 = node1.getBooleanProp(1562);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertEquals(0, node1.getLineno());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertEquals(0, node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isInc());
assertEquals(40, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertEquals(0, node1.getSourcePosition());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertSame(node0, node1);
assertSame(node1, node0);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);

String string1 = node0.getString();
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertSame(node0, node1);
assertFalse(string1.equals((Object)string0));
assertEquals("", string1);
assertNotNull(string1);

Iterable<Node> iterable0 = node0.children();
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertSame(node0, node1);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node1));

Node node2 = node1.removeFirstChild();
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertEquals(0, node1.getLineno());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertEquals(0, node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isInc());
assertEquals(40, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertEquals(0, node1.getSourcePosition());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertSame(node0, node1);
assertSame(node1, node0);
assertNull(node2);

int int0 = node1.getLength();
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertEquals(0, node1.getLineno());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertEquals(0, node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isInc());
assertEquals(40, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertEquals(0, node1.getSourcePosition());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertSame(node0, node1);
assertSame(node1, node0);
assertEquals(0, int0);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

boolean boolean3 = node0.isNoSideEffectsCall();
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertSame(node0, node1);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(boolean3);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);

boolean boolean4 = node0.isName();
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertSame(node0, node1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertFalse(boolean4);

node1.getDouble();

[MASTER] 10:22:04.992 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_120_1628158924975/com/google/javascript/rhino/Node_120_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_120_1628158924975/com/google/javascript/rhino/Node_120_tmp__ESTest_scaffolding.java]]
[MASTER] 10:22:04.992 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:22:04.992 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:22:04.992 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 229
[MASTER] 10:22:04.993 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_120_1628158924975/com/google/javascript/rhino/Node_120_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:22:04 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_120_tmp__ESTest extends Node_120_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(40, 40, 40);
21:       assertEquals(4095, Node.COLUMN_MASK);
22:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
23:       assertEquals(8, Node.FLAG_NO_THROWS);
24:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
25:       assertEquals(50, Node.FREE_CALL);
26:       assertEquals(55, Node.INFERRED_FUNCTION);
27:       assertEquals(39, Node.EMPTY_BLOCK);
28:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
29:       assertEquals(54, Node.SLASH_V);
30:       assertEquals(30, Node.VAR_ARGS_NAME);
31:       assertEquals(43, Node.IS_CONSTANT_NAME);
32:       assertEquals(40, Node.ORIGINALNAME_PROP);
33:       assertEquals(32, Node.INCRDECR_PROP);
34:       assertEquals(46, Node.IS_NAMESPACE);
35:       assertEquals(2, Node.POST_FLAG);
36:       assertEquals(12, Node.COLUMN_BITS);
37:       assertEquals(47, Node.IS_DISPATCHER);
38:       assertEquals(51, Node.STATIC_SOURCE_FILE);
39:       assertEquals(29, Node.JSDOC_INFO_PROP);
40:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
41:       assertEquals(57, Node.LAST_PROP);
42:       assertEquals(15, Node.NO_SIDE_EFFECTS);
43:       assertEquals(1, Node.DECR_FLAG);
44:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
45:       assertEquals(52, Node.LENGTH);
46:       assertEquals(53, Node.INPUT_ID);
47:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
48:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
49:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
50:       assertEquals(57, Node.REFLECTED_OBJECT);
51:       assertEquals(36, Node.QUOTED_PROP);
52:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
53:       assertEquals(49, Node.DIRECT_EVAL);
54:       assertEquals(56, Node.CHANGE_TIME);
55:       assertEquals(48, Node.DIRECTIVES);
56:       assertEquals(37, Node.OPT_ARG_NAME);
57:       assertFalse(node0.isDebugger());
58:       assertFalse(node0.isVoid());
59:       assertFalse(node0.isRegExp());
60:       assertFalse(node0.isTry());
61:       assertFalse(node0.isFunction());
62:       assertFalse(node0.isArrayLit());
63:       assertEquals(163880, node0.getSourcePosition());
64:       assertFalse(node0.isIf());
65:       assertFalse(node0.isGetterDef());
66:       assertFalse(node0.isNE());
67:       assertFalse(node0.isTrue());
68:       assertFalse(node0.isParamList());
69:       assertFalse(node0.isIn());
70:       assertFalse(node0.isEmpty());
71:       assertFalse(node0.isSetterDef());
72:       assertEquals(40, node0.getCharno());
73:       assertEquals(0, node0.getChildCount());
74:       assertFalse(node0.isDefaultCase());
75:       assertFalse(node0.isVar());
76:       assertEquals(40, node0.getType());
77:       assertFalse(node0.isNew());
78:       assertFalse(node0.isAdd());
79:       assertFalse(node0.isCall());
80:       assertFalse(node0.isName());
81:       assertFalse(node0.isNull());
82:       assertFalse(node0.isGetProp());
83:       assertFalse(node0.isComma());
84:       assertFalse(node0.isTypeOf());
85:       assertFalse(node0.isBreak());
86:       assertFalse(node0.isDelProp());
87:       assertFalse(node0.isGetElem());
88:       assertFalse(node0.isAssign());
89:       assertFalse(node0.hasChildren());
90:       assertFalse(node0.isDec());
91:       assertFalse(node0.isWhile());
92:       assertFalse(node0.isReturn());
93:       assertFalse(node0.isExprResult());
94:       assertFalse(node0.hasOneChild());
95:       assertFalse(node0.isCast());
96:       assertFalse(node0.isScript());
97:       assertFalse(node0.isAnd());
98:       assertFalse(node0.isObjectLit());
99:       assertFalse(node0.isNot());
100:       assertFalse(node0.isLabelName());
101:       assertFalse(node0.isOr());
102:       assertFalse(node0.isAssignAdd());
103:       assertFalse(node0.isThrow());
104:       assertFalse(node0.isContinue());
105:       assertFalse(node0.isDo());
106:       assertFalse(node0.isFalse());
107:       assertFalse(node0.isLabel());
108:       assertTrue(node0.isString());
109:       assertFalse(node0.isSwitch());
110:       assertFalse(node0.isInc());
111:       assertFalse(node0.isStringKey());
112:       assertFalse(node0.isNumber());
113:       assertFalse(node0.isInstanceOf());
114:       assertFalse(node0.isCase());
115:       assertFalse(node0.isCatch());
116:       assertFalse(node0.isWith());
117:       assertFalse(node0.hasMoreThanOneChild());
118:       assertFalse(node0.isFor());
119:       assertEquals(40, node0.getLineno());
120:       assertFalse(node0.isHook());
121:       assertFalse(node0.isThis());
122:       assertFalse(node0.isBlock());
123:       assertNotNull(node0);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertEquals(4095, Node.COLUMN_MASK);
127:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
128:       assertEquals(8, Node.FLAG_NO_THROWS);
129:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
130:       assertEquals(50, Node.FREE_CALL);
131:       assertEquals(55, Node.INFERRED_FUNCTION);
132:       assertEquals(39, Node.EMPTY_BLOCK);
133:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
134:       assertEquals(54, Node.SLASH_V);
135:       assertEquals(30, Node.VAR_ARGS_NAME);
136:       assertEquals(43, Node.IS_CONSTANT_NAME);
137:       assertEquals(40, Node.ORIGINALNAME_PROP);
138:       assertEquals(32, Node.INCRDECR_PROP);
139:       assertEquals(46, Node.IS_NAMESPACE);
140:       assertEquals(2, Node.POST_FLAG);
141:       assertEquals(12, Node.COLUMN_BITS);
142:       assertEquals(47, Node.IS_DISPATCHER);
143:       assertEquals(51, Node.STATIC_SOURCE_FILE);
144:       assertEquals(29, Node.JSDOC_INFO_PROP);
145:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
146:       assertEquals(57, Node.LAST_PROP);
147:       assertEquals(15, Node.NO_SIDE_EFFECTS);
148:       assertEquals(1, Node.DECR_FLAG);
149:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
150:       assertEquals(52, Node.LENGTH);
151:       assertEquals(53, Node.INPUT_ID);
152:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
153:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
154:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
155:       assertEquals(57, Node.REFLECTED_OBJECT);
156:       assertEquals(36, Node.QUOTED_PROP);
157:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
158:       assertEquals(49, Node.DIRECT_EVAL);
159:       assertEquals(56, Node.CHANGE_TIME);
160:       assertEquals(48, Node.DIRECTIVES);
161:       assertEquals(37, Node.OPT_ARG_NAME);
162:       assertFalse(node0.isDebugger());
163:       assertFalse(node0.isVoid());
164:       assertFalse(node0.isRegExp());
165:       assertFalse(node0.isTry());
166:       assertFalse(node0.isFunction());
167:       assertFalse(node0.isArrayLit());
168:       assertEquals(163880, node0.getSourcePosition());
169:       assertFalse(node0.isIf());
170:       assertFalse(node0.isGetterDef());
171:       assertFalse(node0.isNE());
172:       assertFalse(node0.isTrue());
173:       assertFalse(node0.isParamList());
174:       assertFalse(node0.isIn());
175:       assertFalse(node0.isEmpty());
176:       assertFalse(node0.isSetterDef());
177:       assertEquals(40, node0.getCharno());
178:       assertEquals(0, node0.getChildCount());
179:       assertFalse(node0.isDefaultCase());
180:       assertFalse(node0.isVar());
181:       assertEquals(40, node0.getType());
182:       assertFalse(node0.isNew());
183:       assertFalse(node0.isAdd());
184:       assertFalse(node0.isCall());
185:       assertFalse(node0.isName());
186:       assertFalse(node0.isNull());
187:       assertFalse(node0.isGetProp());
188:       assertFalse(node0.isComma());
189:       assertFalse(node0.isTypeOf());
190:       assertFalse(node0.isBreak());
191:       assertFalse(node0.isDelProp());
192:       assertFalse(node0.isGetElem());
193:       assertFalse(node0.isAssign());
194:       assertFalse(node0.hasChildren());
195:       assertFalse(node0.isDec());
196:       assertFalse(node0.isWhile());
197:       assertFalse(node0.isReturn());
198:       assertFalse(node0.isExprResult());
199:       assertFalse(node0.hasOneChild());
200:       assertFalse(node0.isCast());
201:       assertFalse(node0.isScript());
202:       assertFalse(node0.isAnd());
203:       assertFalse(node0.isObjectLit());
204:       assertFalse(node0.isNot());
205:       assertFalse(node0.isLabelName());
206:       assertFalse(node0.isOr());
207:       assertFalse(node0.isAssignAdd());
208:       assertFalse(node0.isThrow());
209:       assertFalse(node0.isContinue());
210:       assertFalse(node0.isDo());
211:       assertFalse(node0.isFalse());
212:       assertFalse(node0.isLabel());
213:       assertTrue(node0.isString());
214:       assertFalse(node0.isSwitch());
215:       assertFalse(node0.isInc());
216:       assertFalse(node0.isStringKey());
217:       assertFalse(node0.isNumber());
218:       assertFalse(node0.isInstanceOf());
219:       assertFalse(node0.isCase());
220:       assertFalse(node0.isCatch());
221:       assertFalse(node0.isWith());
222:       assertFalse(node0.hasMoreThanOneChild());
223:       assertFalse(node0.isFor());
224:       assertEquals(40, node0.getLineno());
225:       assertFalse(node0.isHook());
226:       assertFalse(node0.isThis());
227:       assertFalse(node0.isBlock());
228:       assertNotNull(iterable0);
229:       assertFalse(iterable0.contains(node0));
230:   }
231: }
RegularFileObject[/tmp/EvoSuite_120_1628158924975/com/google/javascript/rhino/Node_120_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:22:04 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_120_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_120_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.common.collect.AbstractMapBasedMultimap$1",
120:       "com.google.common.collect.AbstractMapBasedMultimap$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.common.collect.AbstractMultimap$Values",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMultimap$Entries",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.Multimaps$Entries",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_120_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
267:       "com.google.javascript.rhino.SimpleErrorReporter",
268:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
269:       "com.google.common.base.Joiner",
270:       "com.google.common.base.Preconditions",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.jstype.ArrowType",
322:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
323:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
324:       "com.google.javascript.rhino.jstype.InstanceObjectType",
325:       "com.google.javascript.rhino.jstype.Property",
326:       "com.google.common.collect.Lists",
327:       "com.google.javascript.rhino.jstype.NoObjectType",
328:       "com.google.javascript.rhino.jstype.NoType",
329:       "com.google.javascript.rhino.jstype.NoResolvedType",
330:       "com.google.common.collect.SingletonImmutableList",
331:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
332:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
333:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
334:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
335:       "com.google.javascript.rhino.jstype.UnionType",
336:       "com.google.javascript.rhino.jstype.FunctionBuilder",
337:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.AbstractMultimap$Values",
341:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
342:       "com.google.common.collect.AbstractMapBasedMultimap$1",
343:       "com.google.common.collect.Multimaps$Entries",
344:       "com.google.common.collect.AbstractMultimap$Entries",
345:       "com.google.common.collect.AbstractMapBasedMultimap$2",
346:       "com.google.javascript.rhino.JSDocInfo",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.base.Objects",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
351:       "com.google.common.collect.Sets",
352:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
353:       "com.google.javascript.rhino.InputId",
354:       "com.google.common.collect.AbstractIndexedListIterator",
355:       "com.google.common.collect.Iterators$11",
356:       "com.google.common.collect.Iterables",
357:       "com.google.common.collect.Iterators$12",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.javascript.rhino.jstype.NamedType",
363:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
364:       "com.google.common.collect.Platform",
365:       "com.google.javascript.rhino.jstype.JSType$TypePair"
366:     );
367:   }
368: }

[MASTER] 10:22:04.995 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(40, 40, 40);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertEquals(163880, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isFalse());
assertFalse(node0.isLabel());
assertTrue(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertEquals(40, node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertEquals(163880, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isFalse());
assertFalse(node0.isLabel());
assertTrue(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertEquals(40, node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));


[MASTER] 10:22:09.124 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_175_1628158929080/com/google/javascript/rhino/Node_175_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_175_1628158929080/com/google/javascript/rhino/Node_175_tmp__ESTest_scaffolding.java]]
[MASTER] 10:22:09.124 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:22:09.124 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:22:09.125 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 350
[MASTER] 10:22:09.125 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_175_1628158929080/com/google/javascript/rhino/Node_175_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:22:09 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_175_tmp__ESTest extends Node_175_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString("");
23:       assertEquals(53, Node.INPUT_ID);
24:       assertEquals(43, Node.IS_CONSTANT_NAME);
25:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
26:       assertEquals(47, Node.IS_DISPATCHER);
27:       assertEquals(2, Node.POST_FLAG);
28:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
29:       assertEquals(4095, Node.COLUMN_MASK);
30:       assertEquals(37, Node.OPT_ARG_NAME);
31:       assertEquals(39, Node.EMPTY_BLOCK);
32:       assertEquals(56, Node.CHANGE_TIME);
33:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
34:       assertEquals(48, Node.DIRECTIVES);
35:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
36:       assertEquals(29, Node.JSDOC_INFO_PROP);
37:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
38:       assertEquals(15, Node.NO_SIDE_EFFECTS);
39:       assertEquals(55, Node.INFERRED_FUNCTION);
40:       assertEquals(36, Node.QUOTED_PROP);
41:       assertEquals(52, Node.LENGTH);
42:       assertEquals(8, Node.FLAG_NO_THROWS);
43:       assertEquals(54, Node.SLASH_V);
44:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
45:       assertEquals(57, Node.REFLECTED_OBJECT);
46:       assertEquals(57, Node.LAST_PROP);
47:       assertEquals(49, Node.DIRECT_EVAL);
48:       assertEquals(30, Node.VAR_ARGS_NAME);
49:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
50:       assertEquals(40, Node.ORIGINALNAME_PROP);
51:       assertEquals(46, Node.IS_NAMESPACE);
52:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
53:       assertEquals(12, Node.COLUMN_BITS);
54:       assertEquals(32, Node.INCRDECR_PROP);
55:       assertEquals(50, Node.FREE_CALL);
56:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
57:       assertEquals(1, Node.DECR_FLAG);
58:       assertEquals(51, Node.STATIC_SOURCE_FILE);
59:       assertFalse(node0.isNE());
60:       assertFalse(node0.isIn());
61:       assertFalse(node0.isGetterDef());
62:       assertFalse(node0.isFor());
63:       assertFalse(node0.isEmpty());
64:       assertFalse(node0.isCase());
65:       assertFalse(node0.isTry());
66:       assertFalse(node0.isInc());
67:       assertFalse(node0.isTrue());
68:       assertFalse(node0.isRegExp());
69:       assertFalse(node0.isCatch());
70:       assertFalse(node0.isDelProp());
71:       assertFalse(node0.isBreak());
72:       assertFalse(node0.isIf());
73:       assertFalse(node0.isVoid());
74:       assertFalse(node0.isThis());
75:       assertFalse(node0.isParamList());
76:       assertFalse(node0.isNull());
77:       assertEquals(0, node0.getChildCount());
78:       assertFalse(node0.isHook());
79:       assertFalse(node0.isVar());
80:       assertFalse(node0.isDefaultCase());
81:       assertTrue(node0.isString());
82:       assertFalse(node0.isNew());
83:       assertEquals((-1), node0.getCharno());
84:       assertFalse(node0.isSwitch());
85:       assertFalse(node0.isScript());
86:       assertFalse(node0.isStringKey());
87:       assertFalse(node0.isArrayLit());
88:       assertFalse(node0.isLabelName());
89:       assertFalse(node0.isReturn());
90:       assertFalse(node0.hasChildren());
91:       assertFalse(node0.isLabel());
92:       assertFalse(node0.isTypeOf());
93:       assertEquals((-1), node0.getSourcePosition());
94:       assertFalse(node0.isNumber());
95:       assertFalse(node0.isDec());
96:       assertFalse(node0.isAssign());
97:       assertFalse(node0.isOr());
98:       assertFalse(node0.isWhile());
99:       assertFalse(node0.isAssignAdd());
100:       assertFalse(node0.hasOneChild());
101:       assertFalse(node0.isDo());
102:       assertFalse(node0.isExprResult());
103:       assertFalse(node0.isBlock());
104:       assertFalse(node0.isAdd());
105:       assertFalse(node0.isWith());
106:       assertFalse(node0.isCall());
107:       assertFalse(node0.hasMoreThanOneChild());
108:       assertFalse(node0.isInstanceOf());
109:       assertFalse(node0.isGetElem());
110:       assertEquals((-1), node0.getLineno());
111:       assertFalse(node0.isName());
112:       assertFalse(node0.isComma());
113:       assertFalse(node0.isSetterDef());
114:       assertFalse(node0.isGetProp());
115:       assertFalse(node0.isFalse());
116:       assertFalse(node0.isObjectLit());
117:       assertEquals(40, node0.getType());
118:       assertFalse(node0.isThrow());
119:       assertFalse(node0.isFunction());
120:       assertFalse(node0.isDebugger());
121:       assertFalse(node0.isNot());
122:       assertFalse(node0.isAnd());
123:       assertFalse(node0.isContinue());
124:       assertFalse(node0.isCast());
125:       assertNotNull(node0);
126:       
127:       InputId inputId0 = node0.getInputId();
128:       assertEquals(53, Node.INPUT_ID);
129:       assertEquals(43, Node.IS_CONSTANT_NAME);
130:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
131:       assertEquals(47, Node.IS_DISPATCHER);
132:       assertEquals(2, Node.POST_FLAG);
133:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
134:       assertEquals(4095, Node.COLUMN_MASK);
135:       assertEquals(37, Node.OPT_ARG_NAME);
136:       assertEquals(39, Node.EMPTY_BLOCK);
137:       assertEquals(56, Node.CHANGE_TIME);
138:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
139:       assertEquals(48, Node.DIRECTIVES);
140:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
141:       assertEquals(29, Node.JSDOC_INFO_PROP);
142:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
143:       assertEquals(15, Node.NO_SIDE_EFFECTS);
144:       assertEquals(55, Node.INFERRED_FUNCTION);
145:       assertEquals(36, Node.QUOTED_PROP);
146:       assertEquals(52, Node.LENGTH);
147:       assertEquals(8, Node.FLAG_NO_THROWS);
148:       assertEquals(54, Node.SLASH_V);
149:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
150:       assertEquals(57, Node.REFLECTED_OBJECT);
151:       assertEquals(57, Node.LAST_PROP);
152:       assertEquals(49, Node.DIRECT_EVAL);
153:       assertEquals(30, Node.VAR_ARGS_NAME);
154:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
155:       assertEquals(40, Node.ORIGINALNAME_PROP);
156:       assertEquals(46, Node.IS_NAMESPACE);
157:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
158:       assertEquals(12, Node.COLUMN_BITS);
159:       assertEquals(32, Node.INCRDECR_PROP);
160:       assertEquals(50, Node.FREE_CALL);
161:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
162:       assertEquals(1, Node.DECR_FLAG);
163:       assertEquals(51, Node.STATIC_SOURCE_FILE);
164:       assertFalse(node0.isNE());
165:       assertFalse(node0.isIn());
166:       assertFalse(node0.isGetterDef());
167:       assertFalse(node0.isFor());
168:       assertFalse(node0.isEmpty());
169:       assertFalse(node0.isCase());
170:       assertFalse(node0.isTry());
171:       assertFalse(node0.isInc());
172:       assertFalse(node0.isTrue());
173:       assertFalse(node0.isRegExp());
174:       assertFalse(node0.isCatch());
175:       assertFalse(node0.isDelProp());
176:       assertFalse(node0.isBreak());
177:       assertFalse(node0.isIf());
178:       assertFalse(node0.isVoid());
179:       assertFalse(node0.isThis());
180:       assertFalse(node0.isParamList());
181:       assertFalse(node0.isNull());
182:       assertEquals(0, node0.getChildCount());
183:       assertFalse(node0.isHook());
184:       assertFalse(node0.isVar());
185:       assertFalse(node0.isDefaultCase());
186:       assertTrue(node0.isString());
187:       assertFalse(node0.isNew());
188:       assertEquals((-1), node0.getCharno());
189:       assertFalse(node0.isSwitch());
190:       assertFalse(node0.isScript());
191:       assertFalse(node0.isStringKey());
192:       assertFalse(node0.isArrayLit());
193:       assertFalse(node0.isLabelName());
194:       assertFalse(node0.isReturn());
195:       assertFalse(node0.hasChildren());
196:       assertFalse(node0.isLabel());
197:       assertFalse(node0.isTypeOf());
198:       assertEquals((-1), node0.getSourcePosition());
199:       assertFalse(node0.isNumber());
200:       assertFalse(node0.isDec());
201:       assertFalse(node0.isAssign());
202:       assertFalse(node0.isOr());
203:       assertFalse(node0.isWhile());
204:       assertFalse(node0.isAssignAdd());
205:       assertFalse(node0.hasOneChild());
206:       assertFalse(node0.isDo());
207:       assertFalse(node0.isExprResult());
208:       assertFalse(node0.isBlock());
209:       assertFalse(node0.isAdd());
210:       assertFalse(node0.isWith());
211:       assertFalse(node0.isCall());
212:       assertFalse(node0.hasMoreThanOneChild());
213:       assertFalse(node0.isInstanceOf());
214:       assertFalse(node0.isGetElem());
215:       assertEquals((-1), node0.getLineno());
216:       assertFalse(node0.isName());
217:       assertFalse(node0.isComma());
218:       assertFalse(node0.isSetterDef());
219:       assertFalse(node0.isGetProp());
220:       assertFalse(node0.isFalse());
221:       assertFalse(node0.isObjectLit());
222:       assertEquals(40, node0.getType());
223:       assertFalse(node0.isThrow());
224:       assertFalse(node0.isFunction());
225:       assertFalse(node0.isDebugger());
226:       assertFalse(node0.isNot());
227:       assertFalse(node0.isAnd());
228:       assertFalse(node0.isContinue());
229:       assertFalse(node0.isCast());
230:       assertNull(inputId0);
231:       
232:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
233:       assertEquals(0, node_SideEffectFlags0.valueOf());
234:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
235:       assertNotNull(node_SideEffectFlags0);
236:       
237:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
238:       assertEquals(0, node_SideEffectFlags0.valueOf());
239:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
240:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
241:       assertEquals(0, node_SideEffectFlags1.valueOf());
242:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
243:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
244:       assertNotNull(node_SideEffectFlags1);
245:       
246:       Iterable<Node> iterable0 = node0.children();
247:       assertEquals(53, Node.INPUT_ID);
248:       assertEquals(43, Node.IS_CONSTANT_NAME);
249:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
250:       assertEquals(47, Node.IS_DISPATCHER);
251:       assertEquals(2, Node.POST_FLAG);
252:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
253:       assertEquals(4095, Node.COLUMN_MASK);
254:       assertEquals(37, Node.OPT_ARG_NAME);
255:       assertEquals(39, Node.EMPTY_BLOCK);
256:       assertEquals(56, Node.CHANGE_TIME);
257:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
258:       assertEquals(48, Node.DIRECTIVES);
259:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
260:       assertEquals(29, Node.JSDOC_INFO_PROP);
261:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
262:       assertEquals(15, Node.NO_SIDE_EFFECTS);
263:       assertEquals(55, Node.INFERRED_FUNCTION);
264:       assertEquals(36, Node.QUOTED_PROP);
265:       assertEquals(52, Node.LENGTH);
266:       assertEquals(8, Node.FLAG_NO_THROWS);
267:       assertEquals(54, Node.SLASH_V);
268:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
269:       assertEquals(57, Node.REFLECTED_OBJECT);
270:       assertEquals(57, Node.LAST_PROP);
271:       assertEquals(49, Node.DIRECT_EVAL);
272:       assertEquals(30, Node.VAR_ARGS_NAME);
273:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
274:       assertEquals(40, Node.ORIGINALNAME_PROP);
275:       assertEquals(46, Node.IS_NAMESPACE);
276:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
277:       assertEquals(12, Node.COLUMN_BITS);
278:       assertEquals(32, Node.INCRDECR_PROP);
279:       assertEquals(50, Node.FREE_CALL);
280:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
281:       assertEquals(1, Node.DECR_FLAG);
282:       assertEquals(51, Node.STATIC_SOURCE_FILE);
283:       assertFalse(node0.isNE());
284:       assertFalse(node0.isIn());
285:       assertFalse(node0.isGetterDef());
286:       assertFalse(node0.isFor());
287:       assertFalse(node0.isEmpty());
288:       assertFalse(node0.isCase());
289:       assertFalse(node0.isTry());
290:       assertFalse(node0.isInc());
291:       assertFalse(node0.isTrue());
292:       assertFalse(node0.isRegExp());
293:       assertFalse(node0.isCatch());
294:       assertFalse(node0.isDelProp());
295:       assertFalse(node0.isBreak());
296:       assertFalse(node0.isIf());
297:       assertFalse(node0.isVoid());
298:       assertFalse(node0.isThis());
299:       assertFalse(node0.isParamList());
300:       assertFalse(node0.isNull());
301:       assertEquals(0, node0.getChildCount());
302:       assertFalse(node0.isHook());
303:       assertFalse(node0.isVar());
304:       assertFalse(node0.isDefaultCase());
305:       assertTrue(node0.isString());
306:       assertFalse(node0.isNew());
307:       assertEquals((-1), node0.getCharno());
308:       assertFalse(node0.isSwitch());
309:       assertFalse(node0.isScript());
310:       assertFalse(node0.isStringKey());
311:       assertFalse(node0.isArrayLit());
312:       assertFalse(node0.isLabelName());
313:       assertFalse(node0.isReturn());
314:       assertFalse(node0.hasChildren());
315:       assertFalse(node0.isLabel());
316:       assertFalse(node0.isTypeOf());
317:       assertEquals((-1), node0.getSourcePosition());
318:       assertFalse(node0.isNumber());
319:       assertFalse(node0.isDec());
320:       assertFalse(node0.isAssign());
321:       assertFalse(node0.isOr());
322:       assertFalse(node0.isWhile());
323:       assertFalse(node0.isAssignAdd());
324:       assertFalse(node0.hasOneChild());
325:       assertFalse(node0.isDo());
326:       assertFalse(node0.isExprResult());
327:       assertFalse(node0.isBlock());
328:       assertFalse(node0.isAdd());
329:       assertFalse(node0.isWith());
330:       assertFalse(node0.isCall());
331:       assertFalse(node0.hasMoreThanOneChild());
332:       assertFalse(node0.isInstanceOf());
333:       assertFalse(node0.isGetElem());
334:       assertEquals((-1), node0.getLineno());
335:       assertFalse(node0.isName());
336:       assertFalse(node0.isComma());
337:       assertFalse(node0.isSetterDef());
338:       assertFalse(node0.isGetProp());
339:       assertFalse(node0.isFalse());
340:       assertFalse(node0.isObjectLit());
341:       assertEquals(40, node0.getType());
342:       assertFalse(node0.isThrow());
343:       assertFalse(node0.isFunction());
344:       assertFalse(node0.isDebugger());
345:       assertFalse(node0.isNot());
346:       assertFalse(node0.isAnd());
347:       assertFalse(node0.isContinue());
348:       assertFalse(node0.isCast());
349:       assertNotNull(iterable0);
350:       assertFalse(iterable0.contains(node0));
351:       
352:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
353:       assertEquals(0, node_SideEffectFlags0.valueOf());
354:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
355:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
356:       assertEquals(0, node_SideEffectFlags1.valueOf());
357:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
358:       assertEquals(0, node_SideEffectFlags2.valueOf());
359:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
360:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
361:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
362:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
363:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
364:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
365:       assertNotNull(node_SideEffectFlags2);
366:       
367:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
368:       assertEquals(0, node_SideEffectFlags0.valueOf());
369:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
370:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
371:       assertEquals(0, node_SideEffectFlags1.valueOf());
372:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
373:       assertEquals(0, node_SideEffectFlags2.valueOf());
374:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
375:       assertEquals(0, node_SideEffectFlags3.valueOf());
376:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
377:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
378:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
379:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
380:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
381:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
382:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
383:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
384:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
385:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
386:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
387:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
388:       assertNotNull(node_SideEffectFlags3);
389:       
390:       Node node1 = node0.getAncestor(0);
391:       assertEquals(53, Node.INPUT_ID);
392:       assertEquals(43, Node.IS_CONSTANT_NAME);
393:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
394:       assertEquals(47, Node.IS_DISPATCHER);
395:       assertEquals(2, Node.POST_FLAG);
396:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
397:       assertEquals(4095, Node.COLUMN_MASK);
398:       assertEquals(37, Node.OPT_ARG_NAME);
399:       assertEquals(39, Node.EMPTY_BLOCK);
400:       assertEquals(56, Node.CHANGE_TIME);
401:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
402:       assertEquals(48, Node.DIRECTIVES);
403:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
404:       assertEquals(29, Node.JSDOC_INFO_PROP);
405:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
406:       assertEquals(15, Node.NO_SIDE_EFFECTS);
407:       assertEquals(55, Node.INFERRED_FUNCTION);
408:       assertEquals(36, Node.QUOTED_PROP);
409:       assertEquals(52, Node.LENGTH);
410:       assertEquals(8, Node.FLAG_NO_THROWS);
411:       assertEquals(54, Node.SLASH_V);
412:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
413:       assertEquals(57, Node.REFLECTED_OBJECT);
414:       assertEquals(57, Node.LAST_PROP);
415:       assertEquals(49, Node.DIRECT_EVAL);
416:       assertEquals(30, Node.VAR_ARGS_NAME);
417:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
418:       assertEquals(40, Node.ORIGINALNAME_PROP);
419:       assertEquals(46, Node.IS_NAMESPACE);
420:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
421:       assertEquals(12, Node.COLUMN_BITS);
422:       assertEquals(32, Node.INCRDECR_PROP);
423:       assertEquals(50, Node.FREE_CALL);
424:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
425:       assertEquals(1, Node.DECR_FLAG);
426:       assertEquals(51, Node.STATIC_SOURCE_FILE);
427:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
428:       assertEquals(8, Node.FLAG_NO_THROWS);
429:       assertEquals(39, Node.EMPTY_BLOCK);
430:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
431:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
432:       assertEquals(50, Node.FREE_CALL);
433:       assertEquals(55, Node.INFERRED_FUNCTION);
434:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
435:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
436:       assertEquals(36, Node.QUOTED_PROP);
437:       assertEquals(15, Node.NO_SIDE_EFFECTS);
438:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
439:       assertEquals(53, Node.INPUT_ID);
440:       assertEquals(52, Node.LENGTH);
441:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
442:       assertEquals(4095, Node.COLUMN_MASK);
443:       assertEquals(57, Node.REFLECTED_OBJECT);
444:       assertEquals(49, Node.DIRECT_EVAL);
445:       assertEquals(48, Node.DIRECTIVES);
446:       assertEquals(2, Node.POST_FLAG);
447:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
448:       assertEquals(37, Node.OPT_ARG_NAME);
449:       assertEquals(56, Node.CHANGE_TIME);
450:       assertEquals(47, Node.IS_DISPATCHER);
451:       assertEquals(29, Node.JSDOC_INFO_PROP);
452:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
453:       assertEquals(12, Node.COLUMN_BITS);
454:       assertEquals(57, Node.LAST_PROP);
455:       assertEquals(1, Node.DECR_FLAG);
456:       assertEquals(32, Node.INCRDECR_PROP);
457:       assertEquals(43, Node.IS_CONSTANT_NAME);
458:       assertEquals(54, Node.SLASH_V);
459:       assertEquals(30, Node.VAR_ARGS_NAME);
460:       assertEquals(51, Node.STATIC_SOURCE_FILE);
461:       assertEquals(46, Node.IS_NAMESPACE);
462:       assertEquals(40, Node.ORIGINALNAME_PROP);
463:       assertFalse(node0.isNE());
464:       assertFalse(node0.isIn());
465:       assertFalse(node0.isGetterDef());
466:       assertFalse(node0.isFor());
467:       assertFalse(node0.isEmpty());
468:       assertFalse(node0.isCase());
469:       assertFalse(node0.isTry());
470:       assertFalse(node0.isInc());
471:       assertFalse(node0.isTrue());
472:       assertFalse(node0.isRegExp());
473:       assertFalse(node0.isCatch());
474:       assertFalse(node0.isDelProp());
475:       assertFalse(node0.isBreak());
476:       assertFalse(node0.isIf());
477:       assertFalse(node0.isVoid());
478:       assertFalse(node0.isThis());
479:       assertFalse(node0.isParamList());
480:       assertFalse(node0.isNull());
481:       assertEquals(0, node0.getChildCount());
482:       assertFalse(node0.isHook());
483:       assertFalse(node0.isVar());
484:       assertFalse(node0.isDefaultCase());
485:       assertTrue(node0.isString());
486:       assertFalse(node0.isNew());
487:       assertEquals((-1), node0.getCharno());
488:       assertFalse(node0.isSwitch());
489:       assertFalse(node0.isScript());
490:       assertFalse(node0.isStringKey());
491:       assertFalse(node0.isArrayLit());
492:       assertFalse(node0.isLabelName());
493:       assertFalse(node0.isReturn());
494:       assertFalse(node0.hasChildren());
495:       assertFalse(node0.isLabel());
496:       assertFalse(node0.isTypeOf());
497:       assertEquals((-1), node0.getSourcePosition());
498:       assertFalse(node0.isNumber());
499:       assertFalse(node0.isDec());
500:       assertFalse(node0.isAssign());
501:       assertFalse(node0.isOr());
502:       assertFalse(node0.isWhile());
503:       assertFalse(node0.isAssignAdd());
504:       assertFalse(node0.hasOneChild());
505:       assertFalse(node0.isDo());
506:       assertFalse(node0.isExprResult());
507:       assertFalse(node0.isBlock());
508:       assertFalse(node0.isAdd());
509:       assertFalse(node0.isWith());
510:       assertFalse(node0.isCall());
511:       assertFalse(node0.hasMoreThanOneChild());
512:       assertFalse(node0.isInstanceOf());
513:       assertFalse(node0.isGetElem());
514:       assertEquals((-1), node0.getLineno());
515:       assertFalse(node0.isName());
516:       assertFalse(node0.isComma());
517:       assertFalse(node0.isSetterDef());
518:       assertFalse(node0.isGetProp());
519:       assertFalse(node0.isFalse());
520:       assertFalse(node0.isObjectLit());
521:       assertEquals(40, node0.getType());
522:       assertFalse(node0.isThrow());
523:       assertFalse(node0.isFunction());
524:       assertFalse(node0.isDebugger());
525:       assertFalse(node0.isNot());
526:       assertFalse(node0.isAnd());
527:       assertFalse(node0.isContinue());
528:       assertFalse(node0.isCast());
529:       assertFalse(node1.isWith());
530:       assertFalse(node1.isScript());
531:       assertFalse(node1.isExprResult());
532:       assertFalse(node1.isAnd());
533:       assertFalse(node1.isObjectLit());
534:       assertFalse(node1.isNot());
535:       assertFalse(node1.isBreak());
536:       assertFalse(node1.hasChildren());
537:       assertFalse(node1.isNumber());
538:       assertFalse(node1.isGetProp());
539:       assertFalse(node1.isGetElem());
540:       assertFalse(node1.hasOneChild());
541:       assertEquals((-1), node1.getLineno());
542:       assertFalse(node1.isHook());
543:       assertFalse(node1.isReturn());
544:       assertFalse(node1.isInstanceOf());
545:       assertFalse(node1.isThis());
546:       assertFalse(node1.hasMoreThanOneChild());
547:       assertFalse(node1.isTypeOf());
548:       assertFalse(node1.isComma());
549:       assertFalse(node1.isDec());
550:       assertFalse(node1.isAssign());
551:       assertFalse(node1.isWhile());
552:       assertFalse(node1.isInc());
553:       assertFalse(node1.isIn());
554:       assertEquals((-1), node1.getSourcePosition());
555:       assertFalse(node1.isThrow());
556:       assertFalse(node1.isSetterDef());
557:       assertFalse(node1.isCast());
558:       assertFalse(node1.isContinue());
559:       assertFalse(node1.isFalse());
560:       assertFalse(node1.isFunction());
561:       assertFalse(node1.isDefaultCase());
562:       assertEquals(40, node1.getType());
563:       assertFalse(node1.isVoid());
564:       assertFalse(node1.isTry());
565:       assertFalse(node1.isDebugger());
566:       assertFalse(node1.isTrue());
567:       assertFalse(node1.isDelProp());
568:       assertFalse(node1.isGetterDef());
569:       assertFalse(node1.isIf());
570:       assertFalse(node1.isNull());
571:       assertFalse(node1.isFor());
572:       assertFalse(node1.isNE());
573:       assertFalse(node1.isCall());
574:       assertFalse(node1.isName());
575:       assertFalse(node1.isBlock());
576:       assertFalse(node1.isCatch());
577:       assertFalse(node1.isRegExp());
578:       assertFalse(node1.isSwitch());
579:       assertFalse(node1.isCase());
580:       assertTrue(node1.isString());
581:       assertFalse(node1.isNew());
582:       assertFalse(node1.isDo());
583:       assertFalse(node1.isAdd());
584:       assertEquals((-1), node1.getCharno());
585:       assertFalse(node1.isOr());
586:       assertFalse(node1.isEmpty());
587:       assertFalse(node1.isStringKey());
588:       assertFalse(node1.isParamList());
589:       assertFalse(node1.isArrayLit());
590:       assertFalse(node1.isLabelName());
591:       assertFalse(node1.isAssignAdd());
592:       assertFalse(node1.isVar());
593:       assertFalse(node1.isLabel());
594:       assertEquals(0, node1.getChildCount());
595:       assertSame(node0, node1);
596:       assertSame(node1, node0);
597:       assertNotNull(node1);
598:       
599:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
600:       assertEquals(0, node_SideEffectFlags0.valueOf());
601:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
602:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
603:       assertEquals(0, node_SideEffectFlags1.valueOf());
604:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
605:       assertEquals(0, node_SideEffectFlags2.valueOf());
606:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
607:       assertEquals(0, node_SideEffectFlags3.valueOf());
608:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
609:       assertEquals(0, node_SideEffectFlags4.valueOf());
610:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
611:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
612:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
613:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
614:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
615:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
616:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
617:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
618:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
619:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
620:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
621:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
622:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
623:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
624:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
625:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
626:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
627:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
628:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
629:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
630:       assertNotNull(node_SideEffectFlags4);
631:       
632:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesThis();
633:       assertEquals(0, node_SideEffectFlags0.valueOf());
634:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
635:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
636:       assertEquals(0, node_SideEffectFlags1.valueOf());
637:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
638:       assertEquals(0, node_SideEffectFlags2.valueOf());
639:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
640:       assertEquals(0, node_SideEffectFlags3.valueOf());
641:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
642:       assertEquals(0, node_SideEffectFlags5.valueOf());
643:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
644:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
645:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
646:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
647:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
648:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
649:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
650:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
651:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
652:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
653:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
654:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
655:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
656:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
657:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
658:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
659:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
660:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
661:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
662:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
663:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
664:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
665:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
666:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
667:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
668:       assertNotNull(node_SideEffectFlags5);
669:       
670:       // Undeclared exception!
671:       try { 
672:         node0.setSideEffectFlags(node_SideEffectFlags3);
673:         fail("Expecting exception: IllegalArgumentException");
674:       
675:       } catch(IllegalArgumentException e) {
676:          //
677:          // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
678:          //
679:          verifyException("com.google.common.base.Preconditions", e);
680:       }
681:   }
682: }
RegularFileObject[/tmp/EvoSuite_175_1628158929080/com/google/javascript/rhino/Node_175_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:22:09 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_175_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_175_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.common.collect.AbstractMapBasedMultimap$1",
120:       "com.google.common.collect.AbstractMapBasedMultimap$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.common.collect.AbstractMultimap$Values",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMultimap$Entries",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.Multimaps$Entries",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_175_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
267:       "com.google.javascript.rhino.SimpleErrorReporter",
268:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
269:       "com.google.common.base.Joiner",
270:       "com.google.common.base.Preconditions",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.jstype.ArrowType",
322:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
323:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
324:       "com.google.javascript.rhino.jstype.InstanceObjectType",
325:       "com.google.javascript.rhino.jstype.Property",
326:       "com.google.common.collect.Lists",
327:       "com.google.javascript.rhino.jstype.NoObjectType",
328:       "com.google.javascript.rhino.jstype.NoType",
329:       "com.google.javascript.rhino.jstype.NoResolvedType",
330:       "com.google.common.collect.SingletonImmutableList",
331:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
332:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
333:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
334:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
335:       "com.google.javascript.rhino.jstype.UnionType",
336:       "com.google.javascript.rhino.jstype.FunctionBuilder",
337:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.AbstractMultimap$Values",
341:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
342:       "com.google.common.collect.AbstractMapBasedMultimap$1",
343:       "com.google.common.collect.Multimaps$Entries",
344:       "com.google.common.collect.AbstractMultimap$Entries",
345:       "com.google.common.collect.AbstractMapBasedMultimap$2",
346:       "com.google.javascript.rhino.JSDocInfo",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.base.Objects",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
351:       "com.google.common.collect.Sets",
352:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
353:       "com.google.javascript.rhino.InputId",
354:       "com.google.common.collect.AbstractIndexedListIterator",
355:       "com.google.common.collect.Iterators$11",
356:       "com.google.common.collect.Iterables",
357:       "com.google.common.collect.Iterators$12",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.javascript.rhino.jstype.NamedType",
363:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
364:       "com.google.common.collect.Platform",
365:       "com.google.javascript.rhino.jstype.JSType$TypePair"
366:     );
367:   }
368: }

[MASTER] 10:22:09.136 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isInc());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isWith());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertNotNull(node0);

InputId inputId0 = node0.getInputId();
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isInc());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isWith());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertNull(inputId0);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);

Iterable<Node> iterable0 = node0.children();
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isInc());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isWith());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags3);

Node node1 = node0.getAncestor(0);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isInc());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isWith());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isHook());
assertFalse(node1.isReturn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertEquals(40, node1.getType());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertTrue(node1.isString());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertSame(node0, node1);
assertSame(node1, node0);
assertNotNull(node1);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertNotNull(node_SideEffectFlags4);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesThis();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags5);

node0.setSideEffectFlags(node_SideEffectFlags3);

[MASTER] 10:22:09.445 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_184_1628158929410/com/google/javascript/rhino/Node_184_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_184_1628158929410/com/google/javascript/rhino/Node_184_tmp__ESTest_scaffolding.java]]
[MASTER] 10:22:09.445 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:22:09.445 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:22:09.445 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 351
[MASTER] 10:22:09.446 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_184_1628158929410/com/google/javascript/rhino/Node_184_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:22:09 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.JSDocInfo;
13: import com.google.javascript.rhino.Node;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_184_tmp__ESTest extends Node_184_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = Node.newString("");
24:       assertEquals(49, Node.DIRECT_EVAL);
25:       assertEquals(30, Node.VAR_ARGS_NAME);
26:       assertEquals(1, Node.DECR_FLAG);
27:       assertEquals(57, Node.LAST_PROP);
28:       assertEquals(15, Node.NO_SIDE_EFFECTS);
29:       assertEquals(32, Node.INCRDECR_PROP);
30:       assertEquals(2, Node.POST_FLAG);
31:       assertEquals(12, Node.COLUMN_BITS);
32:       assertEquals(47, Node.IS_DISPATCHER);
33:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
34:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
35:       assertEquals(29, Node.JSDOC_INFO_PROP);
36:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
37:       assertEquals(37, Node.OPT_ARG_NAME);
38:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
39:       assertEquals(39, Node.EMPTY_BLOCK);
40:       assertEquals(53, Node.INPUT_ID);
41:       assertEquals(48, Node.DIRECTIVES);
42:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
43:       assertEquals(52, Node.LENGTH);
44:       assertEquals(8, Node.FLAG_NO_THROWS);
45:       assertEquals(36, Node.QUOTED_PROP);
46:       assertEquals(56, Node.CHANGE_TIME);
47:       assertEquals(57, Node.REFLECTED_OBJECT);
48:       assertEquals(4095, Node.COLUMN_MASK);
49:       assertEquals(55, Node.INFERRED_FUNCTION);
50:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
51:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
52:       assertEquals(50, Node.FREE_CALL);
53:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
54:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
55:       assertEquals(40, Node.ORIGINALNAME_PROP);
56:       assertEquals(43, Node.IS_CONSTANT_NAME);
57:       assertEquals(51, Node.STATIC_SOURCE_FILE);
58:       assertEquals(46, Node.IS_NAMESPACE);
59:       assertEquals(54, Node.SLASH_V);
60:       assertFalse(node0.isFalse());
61:       assertFalse(node0.isHook());
62:       assertFalse(node0.isThrow());
63:       assertFalse(node0.isInc());
64:       assertFalse(node0.isGetProp());
65:       assertEquals((-1), node0.getCharno());
66:       assertFalse(node0.isCase());
67:       assertFalse(node0.isComma());
68:       assertFalse(node0.isThis());
69:       assertFalse(node0.isExprResult());
70:       assertFalse(node0.isDelProp());
71:       assertFalse(node0.isWith());
72:       assertFalse(node0.isBreak());
73:       assertFalse(node0.isInstanceOf());
74:       assertFalse(node0.isAssign());
75:       assertFalse(node0.isIf());
76:       assertFalse(node0.hasChildren());
77:       assertFalse(node0.isNE());
78:       assertFalse(node0.isDebugger());
79:       assertEquals((-1), node0.getSourcePosition());
80:       assertFalse(node0.isIn());
81:       assertFalse(node0.isAnd());
82:       assertFalse(node0.isContinue());
83:       assertFalse(node0.isNot());
84:       assertFalse(node0.isObjectLit());
85:       assertEquals(40, node0.getType());
86:       assertFalse(node0.isFunction());
87:       assertFalse(node0.isCast());
88:       assertFalse(node0.isCall());
89:       assertFalse(node0.isName());
90:       assertFalse(node0.isStringKey());
91:       assertFalse(node0.isBlock());
92:       assertFalse(node0.isNull());
93:       assertFalse(node0.isVar());
94:       assertFalse(node0.isSetterDef());
95:       assertTrue(node0.isString());
96:       assertFalse(node0.isNew());
97:       assertFalse(node0.isAdd());
98:       assertFalse(node0.isCatch());
99:       assertFalse(node0.hasMoreThanOneChild());
100:       assertFalse(node0.isWhile());
101:       assertFalse(node0.isReturn());
102:       assertFalse(node0.isDec());
103:       assertFalse(node0.isTypeOf());
104:       assertFalse(node0.isRegExp());
105:       assertFalse(node0.isVoid());
106:       assertEquals((-1), node0.getLineno());
107:       assertFalse(node0.isGetElem());
108:       assertFalse(node0.isArrayLit());
109:       assertFalse(node0.hasOneChild());
110:       assertFalse(node0.isLabelName());
111:       assertFalse(node0.isFor());
112:       assertFalse(node0.isTrue());
113:       assertFalse(node0.isNumber());
114:       assertFalse(node0.isOr());
115:       assertFalse(node0.isGetterDef());
116:       assertFalse(node0.isTry());
117:       assertFalse(node0.isEmpty());
118:       assertFalse(node0.isScript());
119:       assertEquals(0, node0.getChildCount());
120:       assertFalse(node0.isDo());
121:       assertFalse(node0.isAssignAdd());
122:       assertFalse(node0.isDefaultCase());
123:       assertFalse(node0.isLabel());
124:       assertFalse(node0.isParamList());
125:       assertFalse(node0.isSwitch());
126:       assertNotNull(node0);
127:       
128:       InputId inputId0 = node0.getInputId();
129:       assertEquals(49, Node.DIRECT_EVAL);
130:       assertEquals(30, Node.VAR_ARGS_NAME);
131:       assertEquals(1, Node.DECR_FLAG);
132:       assertEquals(57, Node.LAST_PROP);
133:       assertEquals(15, Node.NO_SIDE_EFFECTS);
134:       assertEquals(32, Node.INCRDECR_PROP);
135:       assertEquals(2, Node.POST_FLAG);
136:       assertEquals(12, Node.COLUMN_BITS);
137:       assertEquals(47, Node.IS_DISPATCHER);
138:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
139:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
140:       assertEquals(29, Node.JSDOC_INFO_PROP);
141:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
142:       assertEquals(37, Node.OPT_ARG_NAME);
143:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
144:       assertEquals(39, Node.EMPTY_BLOCK);
145:       assertEquals(53, Node.INPUT_ID);
146:       assertEquals(48, Node.DIRECTIVES);
147:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
148:       assertEquals(52, Node.LENGTH);
149:       assertEquals(8, Node.FLAG_NO_THROWS);
150:       assertEquals(36, Node.QUOTED_PROP);
151:       assertEquals(56, Node.CHANGE_TIME);
152:       assertEquals(57, Node.REFLECTED_OBJECT);
153:       assertEquals(4095, Node.COLUMN_MASK);
154:       assertEquals(55, Node.INFERRED_FUNCTION);
155:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
156:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
157:       assertEquals(50, Node.FREE_CALL);
158:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
159:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
160:       assertEquals(40, Node.ORIGINALNAME_PROP);
161:       assertEquals(43, Node.IS_CONSTANT_NAME);
162:       assertEquals(51, Node.STATIC_SOURCE_FILE);
163:       assertEquals(46, Node.IS_NAMESPACE);
164:       assertEquals(54, Node.SLASH_V);
165:       assertFalse(node0.isFalse());
166:       assertFalse(node0.isHook());
167:       assertFalse(node0.isThrow());
168:       assertFalse(node0.isInc());
169:       assertFalse(node0.isGetProp());
170:       assertEquals((-1), node0.getCharno());
171:       assertFalse(node0.isCase());
172:       assertFalse(node0.isComma());
173:       assertFalse(node0.isThis());
174:       assertFalse(node0.isExprResult());
175:       assertFalse(node0.isDelProp());
176:       assertFalse(node0.isWith());
177:       assertFalse(node0.isBreak());
178:       assertFalse(node0.isInstanceOf());
179:       assertFalse(node0.isAssign());
180:       assertFalse(node0.isIf());
181:       assertFalse(node0.hasChildren());
182:       assertFalse(node0.isNE());
183:       assertFalse(node0.isDebugger());
184:       assertEquals((-1), node0.getSourcePosition());
185:       assertFalse(node0.isIn());
186:       assertFalse(node0.isAnd());
187:       assertFalse(node0.isContinue());
188:       assertFalse(node0.isNot());
189:       assertFalse(node0.isObjectLit());
190:       assertEquals(40, node0.getType());
191:       assertFalse(node0.isFunction());
192:       assertFalse(node0.isCast());
193:       assertFalse(node0.isCall());
194:       assertFalse(node0.isName());
195:       assertFalse(node0.isStringKey());
196:       assertFalse(node0.isBlock());
197:       assertFalse(node0.isNull());
198:       assertFalse(node0.isVar());
199:       assertFalse(node0.isSetterDef());
200:       assertTrue(node0.isString());
201:       assertFalse(node0.isNew());
202:       assertFalse(node0.isAdd());
203:       assertFalse(node0.isCatch());
204:       assertFalse(node0.hasMoreThanOneChild());
205:       assertFalse(node0.isWhile());
206:       assertFalse(node0.isReturn());
207:       assertFalse(node0.isDec());
208:       assertFalse(node0.isTypeOf());
209:       assertFalse(node0.isRegExp());
210:       assertFalse(node0.isVoid());
211:       assertEquals((-1), node0.getLineno());
212:       assertFalse(node0.isGetElem());
213:       assertFalse(node0.isArrayLit());
214:       assertFalse(node0.hasOneChild());
215:       assertFalse(node0.isLabelName());
216:       assertFalse(node0.isFor());
217:       assertFalse(node0.isTrue());
218:       assertFalse(node0.isNumber());
219:       assertFalse(node0.isOr());
220:       assertFalse(node0.isGetterDef());
221:       assertFalse(node0.isTry());
222:       assertFalse(node0.isEmpty());
223:       assertFalse(node0.isScript());
224:       assertEquals(0, node0.getChildCount());
225:       assertFalse(node0.isDo());
226:       assertFalse(node0.isAssignAdd());
227:       assertFalse(node0.isDefaultCase());
228:       assertFalse(node0.isLabel());
229:       assertFalse(node0.isParamList());
230:       assertFalse(node0.isSwitch());
231:       assertNull(inputId0);
232:       
233:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
234:       assertEquals(0, node_SideEffectFlags0.valueOf());
235:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
236:       assertNotNull(node_SideEffectFlags0);
237:       
238:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
239:       assertEquals(0, node_SideEffectFlags0.valueOf());
240:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
241:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
242:       assertEquals(0, node_SideEffectFlags1.valueOf());
243:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
244:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
245:       assertNotNull(node_SideEffectFlags1);
246:       
247:       Iterable<Node> iterable0 = node0.children();
248:       assertEquals(49, Node.DIRECT_EVAL);
249:       assertEquals(30, Node.VAR_ARGS_NAME);
250:       assertEquals(1, Node.DECR_FLAG);
251:       assertEquals(57, Node.LAST_PROP);
252:       assertEquals(15, Node.NO_SIDE_EFFECTS);
253:       assertEquals(32, Node.INCRDECR_PROP);
254:       assertEquals(2, Node.POST_FLAG);
255:       assertEquals(12, Node.COLUMN_BITS);
256:       assertEquals(47, Node.IS_DISPATCHER);
257:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
258:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
259:       assertEquals(29, Node.JSDOC_INFO_PROP);
260:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
261:       assertEquals(37, Node.OPT_ARG_NAME);
262:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
263:       assertEquals(39, Node.EMPTY_BLOCK);
264:       assertEquals(53, Node.INPUT_ID);
265:       assertEquals(48, Node.DIRECTIVES);
266:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
267:       assertEquals(52, Node.LENGTH);
268:       assertEquals(8, Node.FLAG_NO_THROWS);
269:       assertEquals(36, Node.QUOTED_PROP);
270:       assertEquals(56, Node.CHANGE_TIME);
271:       assertEquals(57, Node.REFLECTED_OBJECT);
272:       assertEquals(4095, Node.COLUMN_MASK);
273:       assertEquals(55, Node.INFERRED_FUNCTION);
274:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
275:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
276:       assertEquals(50, Node.FREE_CALL);
277:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
278:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
279:       assertEquals(40, Node.ORIGINALNAME_PROP);
280:       assertEquals(43, Node.IS_CONSTANT_NAME);
281:       assertEquals(51, Node.STATIC_SOURCE_FILE);
282:       assertEquals(46, Node.IS_NAMESPACE);
283:       assertEquals(54, Node.SLASH_V);
284:       assertFalse(node0.isFalse());
285:       assertFalse(node0.isHook());
286:       assertFalse(node0.isThrow());
287:       assertFalse(node0.isInc());
288:       assertFalse(node0.isGetProp());
289:       assertEquals((-1), node0.getCharno());
290:       assertFalse(node0.isCase());
291:       assertFalse(node0.isComma());
292:       assertFalse(node0.isThis());
293:       assertFalse(node0.isExprResult());
294:       assertFalse(node0.isDelProp());
295:       assertFalse(node0.isWith());
296:       assertFalse(node0.isBreak());
297:       assertFalse(node0.isInstanceOf());
298:       assertFalse(node0.isAssign());
299:       assertFalse(node0.isIf());
300:       assertFalse(node0.hasChildren());
301:       assertFalse(node0.isNE());
302:       assertFalse(node0.isDebugger());
303:       assertEquals((-1), node0.getSourcePosition());
304:       assertFalse(node0.isIn());
305:       assertFalse(node0.isAnd());
306:       assertFalse(node0.isContinue());
307:       assertFalse(node0.isNot());
308:       assertFalse(node0.isObjectLit());
309:       assertEquals(40, node0.getType());
310:       assertFalse(node0.isFunction());
311:       assertFalse(node0.isCast());
312:       assertFalse(node0.isCall());
313:       assertFalse(node0.isName());
314:       assertFalse(node0.isStringKey());
315:       assertFalse(node0.isBlock());
316:       assertFalse(node0.isNull());
317:       assertFalse(node0.isVar());
318:       assertFalse(node0.isSetterDef());
319:       assertTrue(node0.isString());
320:       assertFalse(node0.isNew());
321:       assertFalse(node0.isAdd());
322:       assertFalse(node0.isCatch());
323:       assertFalse(node0.hasMoreThanOneChild());
324:       assertFalse(node0.isWhile());
325:       assertFalse(node0.isReturn());
326:       assertFalse(node0.isDec());
327:       assertFalse(node0.isTypeOf());
328:       assertFalse(node0.isRegExp());
329:       assertFalse(node0.isVoid());
330:       assertEquals((-1), node0.getLineno());
331:       assertFalse(node0.isGetElem());
332:       assertFalse(node0.isArrayLit());
333:       assertFalse(node0.hasOneChild());
334:       assertFalse(node0.isLabelName());
335:       assertFalse(node0.isFor());
336:       assertFalse(node0.isTrue());
337:       assertFalse(node0.isNumber());
338:       assertFalse(node0.isOr());
339:       assertFalse(node0.isGetterDef());
340:       assertFalse(node0.isTry());
341:       assertFalse(node0.isEmpty());
342:       assertFalse(node0.isScript());
343:       assertEquals(0, node0.getChildCount());
344:       assertFalse(node0.isDo());
345:       assertFalse(node0.isAssignAdd());
346:       assertFalse(node0.isDefaultCase());
347:       assertFalse(node0.isLabel());
348:       assertFalse(node0.isParamList());
349:       assertFalse(node0.isSwitch());
350:       assertNotNull(iterable0);
351:       assertFalse(iterable0.contains(node0));
352:       
353:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
354:       assertEquals(0, node_SideEffectFlags0.valueOf());
355:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
356:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
357:       assertEquals(0, node_SideEffectFlags1.valueOf());
358:       assertEquals(0, node_SideEffectFlags2.valueOf());
359:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
360:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
361:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
362:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
363:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
364:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
365:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
366:       assertNotNull(node_SideEffectFlags2);
367:       
368:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
369:       assertEquals(0, node_SideEffectFlags0.valueOf());
370:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
371:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
372:       assertEquals(0, node_SideEffectFlags1.valueOf());
373:       assertEquals(0, node_SideEffectFlags2.valueOf());
374:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
375:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
376:       assertEquals(0, node_SideEffectFlags3.valueOf());
377:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
378:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
379:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
380:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
381:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
382:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
383:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
384:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
385:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
386:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
387:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
388:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
389:       assertNotNull(node_SideEffectFlags3);
390:       
391:       Node node1 = node0.getAncestor(0);
392:       assertEquals(49, Node.DIRECT_EVAL);
393:       assertEquals(30, Node.VAR_ARGS_NAME);
394:       assertEquals(1, Node.DECR_FLAG);
395:       assertEquals(57, Node.LAST_PROP);
396:       assertEquals(15, Node.NO_SIDE_EFFECTS);
397:       assertEquals(32, Node.INCRDECR_PROP);
398:       assertEquals(2, Node.POST_FLAG);
399:       assertEquals(12, Node.COLUMN_BITS);
400:       assertEquals(47, Node.IS_DISPATCHER);
401:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
402:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
403:       assertEquals(29, Node.JSDOC_INFO_PROP);
404:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
405:       assertEquals(37, Node.OPT_ARG_NAME);
406:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
407:       assertEquals(39, Node.EMPTY_BLOCK);
408:       assertEquals(53, Node.INPUT_ID);
409:       assertEquals(48, Node.DIRECTIVES);
410:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
411:       assertEquals(52, Node.LENGTH);
412:       assertEquals(8, Node.FLAG_NO_THROWS);
413:       assertEquals(36, Node.QUOTED_PROP);
414:       assertEquals(56, Node.CHANGE_TIME);
415:       assertEquals(57, Node.REFLECTED_OBJECT);
416:       assertEquals(4095, Node.COLUMN_MASK);
417:       assertEquals(55, Node.INFERRED_FUNCTION);
418:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
419:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
420:       assertEquals(50, Node.FREE_CALL);
421:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
422:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
423:       assertEquals(40, Node.ORIGINALNAME_PROP);
424:       assertEquals(43, Node.IS_CONSTANT_NAME);
425:       assertEquals(51, Node.STATIC_SOURCE_FILE);
426:       assertEquals(46, Node.IS_NAMESPACE);
427:       assertEquals(54, Node.SLASH_V);
428:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
429:       assertEquals(8, Node.FLAG_NO_THROWS);
430:       assertEquals(39, Node.EMPTY_BLOCK);
431:       assertEquals(55, Node.INFERRED_FUNCTION);
432:       assertEquals(4095, Node.COLUMN_MASK);
433:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
434:       assertEquals(50, Node.FREE_CALL);
435:       assertEquals(36, Node.QUOTED_PROP);
436:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
437:       assertEquals(48, Node.DIRECTIVES);
438:       assertEquals(43, Node.IS_CONSTANT_NAME);
439:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
440:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
441:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
442:       assertEquals(1, Node.DECR_FLAG);
443:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
444:       assertEquals(12, Node.COLUMN_BITS);
445:       assertEquals(32, Node.INCRDECR_PROP);
446:       assertEquals(46, Node.IS_NAMESPACE);
447:       assertEquals(51, Node.STATIC_SOURCE_FILE);
448:       assertEquals(49, Node.DIRECT_EVAL);
449:       assertEquals(37, Node.OPT_ARG_NAME);
450:       assertEquals(54, Node.SLASH_V);
451:       assertEquals(56, Node.CHANGE_TIME);
452:       assertEquals(52, Node.LENGTH);
453:       assertEquals(57, Node.REFLECTED_OBJECT);
454:       assertEquals(40, Node.ORIGINALNAME_PROP);
455:       assertEquals(53, Node.INPUT_ID);
456:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
457:       assertEquals(29, Node.JSDOC_INFO_PROP);
458:       assertEquals(57, Node.LAST_PROP);
459:       assertEquals(47, Node.IS_DISPATCHER);
460:       assertEquals(15, Node.NO_SIDE_EFFECTS);
461:       assertEquals(2, Node.POST_FLAG);
462:       assertEquals(30, Node.VAR_ARGS_NAME);
463:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
464:       assertFalse(node0.isFalse());
465:       assertFalse(node0.isHook());
466:       assertFalse(node0.isThrow());
467:       assertFalse(node0.isInc());
468:       assertFalse(node0.isGetProp());
469:       assertEquals((-1), node0.getCharno());
470:       assertFalse(node0.isCase());
471:       assertFalse(node0.isComma());
472:       assertFalse(node0.isThis());
473:       assertFalse(node0.isExprResult());
474:       assertFalse(node0.isDelProp());
475:       assertFalse(node0.isWith());
476:       assertFalse(node0.isBreak());
477:       assertFalse(node0.isInstanceOf());
478:       assertFalse(node0.isAssign());
479:       assertFalse(node0.isIf());
480:       assertFalse(node0.hasChildren());
481:       assertFalse(node0.isNE());
482:       assertFalse(node0.isDebugger());
483:       assertEquals((-1), node0.getSourcePosition());
484:       assertFalse(node0.isIn());
485:       assertFalse(node0.isAnd());
486:       assertFalse(node0.isContinue());
487:       assertFalse(node0.isNot());
488:       assertFalse(node0.isObjectLit());
489:       assertEquals(40, node0.getType());
490:       assertFalse(node0.isFunction());
491:       assertFalse(node0.isCast());
492:       assertFalse(node0.isCall());
493:       assertFalse(node0.isName());
494:       assertFalse(node0.isStringKey());
495:       assertFalse(node0.isBlock());
496:       assertFalse(node0.isNull());
497:       assertFalse(node0.isVar());
498:       assertFalse(node0.isSetterDef());
499:       assertTrue(node0.isString());
500:       assertFalse(node0.isNew());
501:       assertFalse(node0.isAdd());
502:       assertFalse(node0.isCatch());
503:       assertFalse(node0.hasMoreThanOneChild());
504:       assertFalse(node0.isWhile());
505:       assertFalse(node0.isReturn());
506:       assertFalse(node0.isDec());
507:       assertFalse(node0.isTypeOf());
508:       assertFalse(node0.isRegExp());
509:       assertFalse(node0.isVoid());
510:       assertEquals((-1), node0.getLineno());
511:       assertFalse(node0.isGetElem());
512:       assertFalse(node0.isArrayLit());
513:       assertFalse(node0.hasOneChild());
514:       assertFalse(node0.isLabelName());
515:       assertFalse(node0.isFor());
516:       assertFalse(node0.isTrue());
517:       assertFalse(node0.isNumber());
518:       assertFalse(node0.isOr());
519:       assertFalse(node0.isGetterDef());
520:       assertFalse(node0.isTry());
521:       assertFalse(node0.isEmpty());
522:       assertFalse(node0.isScript());
523:       assertEquals(0, node0.getChildCount());
524:       assertFalse(node0.isDo());
525:       assertFalse(node0.isAssignAdd());
526:       assertFalse(node0.isDefaultCase());
527:       assertFalse(node0.isLabel());
528:       assertFalse(node0.isParamList());
529:       assertFalse(node0.isSwitch());
530:       assertFalse(node1.isVoid());
531:       assertFalse(node1.isTry());
532:       assertFalse(node1.isDebugger());
533:       assertFalse(node1.isTrue());
534:       assertFalse(node1.isArrayLit());
535:       assertFalse(node1.isDefaultCase());
536:       assertEquals(40, node1.getType());
537:       assertFalse(node1.isFor());
538:       assertFalse(node1.isRegExp());
539:       assertEquals(0, node1.getChildCount());
540:       assertFalse(node1.isCatch());
541:       assertFalse(node1.isFunction());
542:       assertFalse(node1.isParamList());
543:       assertFalse(node1.isCase());
544:       assertFalse(node1.isStringKey());
545:       assertFalse(node1.isGetterDef());
546:       assertFalse(node1.isAdd());
547:       assertFalse(node1.isNew());
548:       assertEquals((-1), node1.getCharno());
549:       assertFalse(node1.isVar());
550:       assertFalse(node1.isWhile());
551:       assertFalse(node1.isSwitch());
552:       assertFalse(node1.isName());
553:       assertFalse(node1.isCall());
554:       assertFalse(node1.isBreak());
555:       assertFalse(node1.isOr());
556:       assertFalse(node1.isLabel());
557:       assertFalse(node1.isNull());
558:       assertFalse(node1.isDelProp());
559:       assertFalse(node1.isAssignAdd());
560:       assertFalse(node1.isDo());
561:       assertFalse(node1.isEmpty());
562:       assertFalse(node1.isExprResult());
563:       assertFalse(node1.hasOneChild());
564:       assertFalse(node1.isGetElem());
565:       assertFalse(node1.isAssign());
566:       assertFalse(node1.isLabelName());
567:       assertFalse(node1.hasChildren());
568:       assertFalse(node1.isTypeOf());
569:       assertFalse(node1.isInstanceOf());
570:       assertFalse(node1.isCast());
571:       assertFalse(node1.isDec());
572:       assertFalse(node1.isWith());
573:       assertFalse(node1.isComma());
574:       assertFalse(node1.isThis());
575:       assertFalse(node1.isReturn());
576:       assertFalse(node1.isGetProp());
577:       assertFalse(node1.isAnd());
578:       assertFalse(node1.isNot());
579:       assertEquals((-1), node1.getSourcePosition());
580:       assertFalse(node1.isScript());
581:       assertFalse(node1.isObjectLit());
582:       assertFalse(node1.isNumber());
583:       assertTrue(node1.isString());
584:       assertFalse(node1.isBlock());
585:       assertFalse(node1.isInc());
586:       assertFalse(node1.isHook());
587:       assertFalse(node1.isThrow());
588:       assertFalse(node1.isContinue());
589:       assertFalse(node1.isFalse());
590:       assertFalse(node1.hasMoreThanOneChild());
591:       assertEquals((-1), node1.getLineno());
592:       assertFalse(node1.isSetterDef());
593:       assertFalse(node1.isNE());
594:       assertFalse(node1.isIf());
595:       assertFalse(node1.isIn());
596:       assertSame(node0, node1);
597:       assertSame(node1, node0);
598:       assertNotNull(node1);
599:       
600:       // Undeclared exception!
601:       try { 
602:         node0.replaceChildAfter(node1, node1);
603:         fail("Expecting exception: IllegalArgumentException");
604:       
605:       } catch(IllegalArgumentException e) {
606:          //
607:          // prev is not a child of this node.
608:          //
609:          verifyException("com.google.common.base.Preconditions", e);
610:       }
611:   }
612: }
RegularFileObject[/tmp/EvoSuite_184_1628158929410/com/google/javascript/rhino/Node_184_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:22:09 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_184_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_184_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.common.collect.AbstractMapBasedMultimap$1",
120:       "com.google.common.collect.AbstractMapBasedMultimap$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.common.collect.AbstractMultimap$Values",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMultimap$Entries",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.Multimaps$Entries",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_184_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
267:       "com.google.javascript.rhino.SimpleErrorReporter",
268:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
269:       "com.google.common.base.Joiner",
270:       "com.google.common.base.Preconditions",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.jstype.ArrowType",
322:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
323:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
324:       "com.google.javascript.rhino.jstype.InstanceObjectType",
325:       "com.google.javascript.rhino.jstype.Property",
326:       "com.google.common.collect.Lists",
327:       "com.google.javascript.rhino.jstype.NoObjectType",
328:       "com.google.javascript.rhino.jstype.NoType",
329:       "com.google.javascript.rhino.jstype.NoResolvedType",
330:       "com.google.common.collect.SingletonImmutableList",
331:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
332:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
333:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
334:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
335:       "com.google.javascript.rhino.jstype.UnionType",
336:       "com.google.javascript.rhino.jstype.FunctionBuilder",
337:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.AbstractMultimap$Values",
341:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
342:       "com.google.common.collect.AbstractMapBasedMultimap$1",
343:       "com.google.common.collect.Multimaps$Entries",
344:       "com.google.common.collect.AbstractMultimap$Entries",
345:       "com.google.common.collect.AbstractMapBasedMultimap$2",
346:       "com.google.javascript.rhino.JSDocInfo",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.base.Objects",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
351:       "com.google.common.collect.Sets",
352:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
353:       "com.google.javascript.rhino.InputId",
354:       "com.google.common.collect.AbstractIndexedListIterator",
355:       "com.google.common.collect.Iterators$11",
356:       "com.google.common.collect.Iterables",
357:       "com.google.common.collect.Iterators$12",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.javascript.rhino.jstype.NamedType",
363:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
364:       "com.google.common.collect.Platform",
365:       "com.google.javascript.rhino.jstype.JSType$TypePair"
366:     );
367:   }
368: }

[MASTER] 10:22:09.454 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAssign());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertNotNull(node0);

InputId inputId0 = node0.getInputId();
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAssign());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertNull(inputId0);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);

Iterable<Node> iterable0 = node0.children();
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAssign());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags3);

Node node1 = node0.getAncestor(0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAssign());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertEquals(40, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isSwitch());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNumber());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isIn());
assertSame(node0, node1);
assertSame(node1, node0);
assertNotNull(node1);

node0.replaceChildAfter(node1, node1);

[MASTER] 10:22:12.199 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_219_1628158931989/com/google/javascript/rhino/Node_219_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_219_1628158931989/com/google/javascript/rhino/Node_219_tmp__ESTest_scaffolding.java]]
[MASTER] 10:22:12.199 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:22:12.199 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:22:12.199 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 335
[MASTER] 10:22:12.200 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_219_1628158931989/com/google/javascript/rhino/Node_219_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:22:11 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.InputId;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_219_tmp__ESTest extends Node_219_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("");
22:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
23:       assertEquals(43, Node.IS_CONSTANT_NAME);
24:       assertEquals(8, Node.FLAG_NO_THROWS);
25:       assertEquals(39, Node.EMPTY_BLOCK);
26:       assertEquals(53, Node.INPUT_ID);
27:       assertEquals(36, Node.QUOTED_PROP);
28:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
29:       assertEquals(55, Node.INFERRED_FUNCTION);
30:       assertEquals(57, Node.REFLECTED_OBJECT);
31:       assertEquals(56, Node.CHANGE_TIME);
32:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
33:       assertEquals(37, Node.OPT_ARG_NAME);
34:       assertEquals(48, Node.DIRECTIVES);
35:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
36:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
37:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
38:       assertEquals(4095, Node.COLUMN_MASK);
39:       assertEquals(49, Node.DIRECT_EVAL);
40:       assertEquals(30, Node.VAR_ARGS_NAME);
41:       assertEquals(51, Node.STATIC_SOURCE_FILE);
42:       assertEquals(1, Node.DECR_FLAG);
43:       assertEquals(57, Node.LAST_PROP);
44:       assertEquals(32, Node.INCRDECR_PROP);
45:       assertEquals(46, Node.IS_NAMESPACE);
46:       assertEquals(12, Node.COLUMN_BITS);
47:       assertEquals(54, Node.SLASH_V);
48:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
49:       assertEquals(52, Node.LENGTH);
50:       assertEquals(15, Node.NO_SIDE_EFFECTS);
51:       assertEquals(29, Node.JSDOC_INFO_PROP);
52:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
53:       assertEquals(40, Node.ORIGINALNAME_PROP);
54:       assertEquals(50, Node.FREE_CALL);
55:       assertEquals(47, Node.IS_DISPATCHER);
56:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
57:       assertEquals(2, Node.POST_FLAG);
58:       assertFalse(node0.hasOneChild());
59:       assertFalse(node0.isCast());
60:       assertFalse(node0.isGetElem());
61:       assertFalse(node0.isAssign());
62:       assertEquals((-1), node0.getSourcePosition());
63:       assertFalse(node0.isNumber());
64:       assertFalse(node0.isExprResult());
65:       assertFalse(node0.isLabelName());
66:       assertFalse(node0.isAnd());
67:       assertFalse(node0.isInstanceOf());
68:       assertFalse(node0.isReturn());
69:       assertEquals((-1), node0.getLineno());
70:       assertFalse(node0.isNot());
71:       assertFalse(node0.isObjectLit());
72:       assertFalse(node0.isWith());
73:       assertFalse(node0.hasMoreThanOneChild());
74:       assertFalse(node0.isDec());
75:       assertFalse(node0.isTypeOf());
76:       assertFalse(node0.isScript());
77:       assertFalse(node0.isComma());
78:       assertFalse(node0.isThis());
79:       assertFalse(node0.isGetProp());
80:       assertFalse(node0.hasChildren());
81:       assertTrue(node0.isString());
82:       assertFalse(node0.isBlock());
83:       assertFalse(node0.isWhile());
84:       assertFalse(node0.isVar());
85:       assertFalse(node0.isCall());
86:       assertFalse(node0.isAdd());
87:       assertFalse(node0.isNull());
88:       assertFalse(node0.isBreak());
89:       assertEquals((-1), node0.getCharno());
90:       assertFalse(node0.isStringKey());
91:       assertFalse(node0.isName());
92:       assertFalse(node0.isParamList());
93:       assertFalse(node0.isSwitch());
94:       assertEquals(0, node0.getChildCount());
95:       assertFalse(node0.isLabel());
96:       assertFalse(node0.isOr());
97:       assertFalse(node0.isNew());
98:       assertFalse(node0.isDo());
99:       assertFalse(node0.isAssignAdd());
100:       assertFalse(node0.isDefaultCase());
101:       assertFalse(node0.isArrayLit());
102:       assertFalse(node0.isEmpty());
103:       assertFalse(node0.isFunction());
104:       assertFalse(node0.isNE());
105:       assertFalse(node0.isDelProp());
106:       assertFalse(node0.isGetterDef());
107:       assertFalse(node0.isDebugger());
108:       assertFalse(node0.isTrue());
109:       assertFalse(node0.isVoid());
110:       assertFalse(node0.isIf());
111:       assertFalse(node0.isCatch());
112:       assertFalse(node0.isRegExp());
113:       assertFalse(node0.isCase());
114:       assertFalse(node0.isFor());
115:       assertFalse(node0.isTry());
116:       assertFalse(node0.isHook());
117:       assertFalse(node0.isFalse());
118:       assertFalse(node0.isIn());
119:       assertFalse(node0.isContinue());
120:       assertFalse(node0.isInc());
121:       assertFalse(node0.isSetterDef());
122:       assertEquals(40, node0.getType());
123:       assertFalse(node0.isThrow());
124:       assertNotNull(node0);
125:       
126:       InputId inputId0 = node0.getInputId();
127:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
128:       assertEquals(43, Node.IS_CONSTANT_NAME);
129:       assertEquals(8, Node.FLAG_NO_THROWS);
130:       assertEquals(39, Node.EMPTY_BLOCK);
131:       assertEquals(53, Node.INPUT_ID);
132:       assertEquals(36, Node.QUOTED_PROP);
133:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
134:       assertEquals(55, Node.INFERRED_FUNCTION);
135:       assertEquals(57, Node.REFLECTED_OBJECT);
136:       assertEquals(56, Node.CHANGE_TIME);
137:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
138:       assertEquals(37, Node.OPT_ARG_NAME);
139:       assertEquals(48, Node.DIRECTIVES);
140:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
141:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
142:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
143:       assertEquals(4095, Node.COLUMN_MASK);
144:       assertEquals(49, Node.DIRECT_EVAL);
145:       assertEquals(30, Node.VAR_ARGS_NAME);
146:       assertEquals(51, Node.STATIC_SOURCE_FILE);
147:       assertEquals(1, Node.DECR_FLAG);
148:       assertEquals(57, Node.LAST_PROP);
149:       assertEquals(32, Node.INCRDECR_PROP);
150:       assertEquals(46, Node.IS_NAMESPACE);
151:       assertEquals(12, Node.COLUMN_BITS);
152:       assertEquals(54, Node.SLASH_V);
153:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
154:       assertEquals(52, Node.LENGTH);
155:       assertEquals(15, Node.NO_SIDE_EFFECTS);
156:       assertEquals(29, Node.JSDOC_INFO_PROP);
157:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
158:       assertEquals(40, Node.ORIGINALNAME_PROP);
159:       assertEquals(50, Node.FREE_CALL);
160:       assertEquals(47, Node.IS_DISPATCHER);
161:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
162:       assertEquals(2, Node.POST_FLAG);
163:       assertFalse(node0.hasOneChild());
164:       assertFalse(node0.isCast());
165:       assertFalse(node0.isGetElem());
166:       assertFalse(node0.isAssign());
167:       assertEquals((-1), node0.getSourcePosition());
168:       assertFalse(node0.isNumber());
169:       assertFalse(node0.isExprResult());
170:       assertFalse(node0.isLabelName());
171:       assertFalse(node0.isAnd());
172:       assertFalse(node0.isInstanceOf());
173:       assertFalse(node0.isReturn());
174:       assertEquals((-1), node0.getLineno());
175:       assertFalse(node0.isNot());
176:       assertFalse(node0.isObjectLit());
177:       assertFalse(node0.isWith());
178:       assertFalse(node0.hasMoreThanOneChild());
179:       assertFalse(node0.isDec());
180:       assertFalse(node0.isTypeOf());
181:       assertFalse(node0.isScript());
182:       assertFalse(node0.isComma());
183:       assertFalse(node0.isThis());
184:       assertFalse(node0.isGetProp());
185:       assertFalse(node0.hasChildren());
186:       assertTrue(node0.isString());
187:       assertFalse(node0.isBlock());
188:       assertFalse(node0.isWhile());
189:       assertFalse(node0.isVar());
190:       assertFalse(node0.isCall());
191:       assertFalse(node0.isAdd());
192:       assertFalse(node0.isNull());
193:       assertFalse(node0.isBreak());
194:       assertEquals((-1), node0.getCharno());
195:       assertFalse(node0.isStringKey());
196:       assertFalse(node0.isName());
197:       assertFalse(node0.isParamList());
198:       assertFalse(node0.isSwitch());
199:       assertEquals(0, node0.getChildCount());
200:       assertFalse(node0.isLabel());
201:       assertFalse(node0.isOr());
202:       assertFalse(node0.isNew());
203:       assertFalse(node0.isDo());
204:       assertFalse(node0.isAssignAdd());
205:       assertFalse(node0.isDefaultCase());
206:       assertFalse(node0.isArrayLit());
207:       assertFalse(node0.isEmpty());
208:       assertFalse(node0.isFunction());
209:       assertFalse(node0.isNE());
210:       assertFalse(node0.isDelProp());
211:       assertFalse(node0.isGetterDef());
212:       assertFalse(node0.isDebugger());
213:       assertFalse(node0.isTrue());
214:       assertFalse(node0.isVoid());
215:       assertFalse(node0.isIf());
216:       assertFalse(node0.isCatch());
217:       assertFalse(node0.isRegExp());
218:       assertFalse(node0.isCase());
219:       assertFalse(node0.isFor());
220:       assertFalse(node0.isTry());
221:       assertFalse(node0.isHook());
222:       assertFalse(node0.isFalse());
223:       assertFalse(node0.isIn());
224:       assertFalse(node0.isContinue());
225:       assertFalse(node0.isInc());
226:       assertFalse(node0.isSetterDef());
227:       assertEquals(40, node0.getType());
228:       assertFalse(node0.isThrow());
229:       assertNull(inputId0);
230:       
231:       Iterable<Node> iterable0 = node0.children();
232:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
233:       assertEquals(43, Node.IS_CONSTANT_NAME);
234:       assertEquals(8, Node.FLAG_NO_THROWS);
235:       assertEquals(39, Node.EMPTY_BLOCK);
236:       assertEquals(53, Node.INPUT_ID);
237:       assertEquals(36, Node.QUOTED_PROP);
238:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
239:       assertEquals(55, Node.INFERRED_FUNCTION);
240:       assertEquals(57, Node.REFLECTED_OBJECT);
241:       assertEquals(56, Node.CHANGE_TIME);
242:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
243:       assertEquals(37, Node.OPT_ARG_NAME);
244:       assertEquals(48, Node.DIRECTIVES);
245:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
246:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
247:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
248:       assertEquals(4095, Node.COLUMN_MASK);
249:       assertEquals(49, Node.DIRECT_EVAL);
250:       assertEquals(30, Node.VAR_ARGS_NAME);
251:       assertEquals(51, Node.STATIC_SOURCE_FILE);
252:       assertEquals(1, Node.DECR_FLAG);
253:       assertEquals(57, Node.LAST_PROP);
254:       assertEquals(32, Node.INCRDECR_PROP);
255:       assertEquals(46, Node.IS_NAMESPACE);
256:       assertEquals(12, Node.COLUMN_BITS);
257:       assertEquals(54, Node.SLASH_V);
258:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
259:       assertEquals(52, Node.LENGTH);
260:       assertEquals(15, Node.NO_SIDE_EFFECTS);
261:       assertEquals(29, Node.JSDOC_INFO_PROP);
262:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
263:       assertEquals(40, Node.ORIGINALNAME_PROP);
264:       assertEquals(50, Node.FREE_CALL);
265:       assertEquals(47, Node.IS_DISPATCHER);
266:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
267:       assertEquals(2, Node.POST_FLAG);
268:       assertFalse(node0.hasOneChild());
269:       assertFalse(node0.isCast());
270:       assertFalse(node0.isGetElem());
271:       assertFalse(node0.isAssign());
272:       assertEquals((-1), node0.getSourcePosition());
273:       assertFalse(node0.isNumber());
274:       assertFalse(node0.isExprResult());
275:       assertFalse(node0.isLabelName());
276:       assertFalse(node0.isAnd());
277:       assertFalse(node0.isInstanceOf());
278:       assertFalse(node0.isReturn());
279:       assertEquals((-1), node0.getLineno());
280:       assertFalse(node0.isNot());
281:       assertFalse(node0.isObjectLit());
282:       assertFalse(node0.isWith());
283:       assertFalse(node0.hasMoreThanOneChild());
284:       assertFalse(node0.isDec());
285:       assertFalse(node0.isTypeOf());
286:       assertFalse(node0.isScript());
287:       assertFalse(node0.isComma());
288:       assertFalse(node0.isThis());
289:       assertFalse(node0.isGetProp());
290:       assertFalse(node0.hasChildren());
291:       assertTrue(node0.isString());
292:       assertFalse(node0.isBlock());
293:       assertFalse(node0.isWhile());
294:       assertFalse(node0.isVar());
295:       assertFalse(node0.isCall());
296:       assertFalse(node0.isAdd());
297:       assertFalse(node0.isNull());
298:       assertFalse(node0.isBreak());
299:       assertEquals((-1), node0.getCharno());
300:       assertFalse(node0.isStringKey());
301:       assertFalse(node0.isName());
302:       assertFalse(node0.isParamList());
303:       assertFalse(node0.isSwitch());
304:       assertEquals(0, node0.getChildCount());
305:       assertFalse(node0.isLabel());
306:       assertFalse(node0.isOr());
307:       assertFalse(node0.isNew());
308:       assertFalse(node0.isDo());
309:       assertFalse(node0.isAssignAdd());
310:       assertFalse(node0.isDefaultCase());
311:       assertFalse(node0.isArrayLit());
312:       assertFalse(node0.isEmpty());
313:       assertFalse(node0.isFunction());
314:       assertFalse(node0.isNE());
315:       assertFalse(node0.isDelProp());
316:       assertFalse(node0.isGetterDef());
317:       assertFalse(node0.isDebugger());
318:       assertFalse(node0.isTrue());
319:       assertFalse(node0.isVoid());
320:       assertFalse(node0.isIf());
321:       assertFalse(node0.isCatch());
322:       assertFalse(node0.isRegExp());
323:       assertFalse(node0.isCase());
324:       assertFalse(node0.isFor());
325:       assertFalse(node0.isTry());
326:       assertFalse(node0.isHook());
327:       assertFalse(node0.isFalse());
328:       assertFalse(node0.isIn());
329:       assertFalse(node0.isContinue());
330:       assertFalse(node0.isInc());
331:       assertFalse(node0.isSetterDef());
332:       assertEquals(40, node0.getType());
333:       assertFalse(node0.isThrow());
334:       assertNotNull(iterable0);
335:       assertFalse(iterable0.contains(node0));
336:       
337:       Node node1 = node0.getAncestor(0);
338:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
339:       assertEquals(43, Node.IS_CONSTANT_NAME);
340:       assertEquals(8, Node.FLAG_NO_THROWS);
341:       assertEquals(39, Node.EMPTY_BLOCK);
342:       assertEquals(53, Node.INPUT_ID);
343:       assertEquals(36, Node.QUOTED_PROP);
344:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
345:       assertEquals(55, Node.INFERRED_FUNCTION);
346:       assertEquals(57, Node.REFLECTED_OBJECT);
347:       assertEquals(56, Node.CHANGE_TIME);
348:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
349:       assertEquals(37, Node.OPT_ARG_NAME);
350:       assertEquals(48, Node.DIRECTIVES);
351:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
352:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
353:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
354:       assertEquals(4095, Node.COLUMN_MASK);
355:       assertEquals(49, Node.DIRECT_EVAL);
356:       assertEquals(30, Node.VAR_ARGS_NAME);
357:       assertEquals(51, Node.STATIC_SOURCE_FILE);
358:       assertEquals(1, Node.DECR_FLAG);
359:       assertEquals(57, Node.LAST_PROP);
360:       assertEquals(32, Node.INCRDECR_PROP);
361:       assertEquals(46, Node.IS_NAMESPACE);
362:       assertEquals(12, Node.COLUMN_BITS);
363:       assertEquals(54, Node.SLASH_V);
364:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
365:       assertEquals(52, Node.LENGTH);
366:       assertEquals(15, Node.NO_SIDE_EFFECTS);
367:       assertEquals(29, Node.JSDOC_INFO_PROP);
368:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
369:       assertEquals(40, Node.ORIGINALNAME_PROP);
370:       assertEquals(50, Node.FREE_CALL);
371:       assertEquals(47, Node.IS_DISPATCHER);
372:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
373:       assertEquals(2, Node.POST_FLAG);
374:       assertEquals(49, Node.DIRECT_EVAL);
375:       assertEquals(30, Node.VAR_ARGS_NAME);
376:       assertEquals(51, Node.STATIC_SOURCE_FILE);
377:       assertEquals(1, Node.DECR_FLAG);
378:       assertEquals(32, Node.INCRDECR_PROP);
379:       assertEquals(46, Node.IS_NAMESPACE);
380:       assertEquals(57, Node.LAST_PROP);
381:       assertEquals(12, Node.COLUMN_BITS);
382:       assertEquals(37, Node.OPT_ARG_NAME);
383:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
384:       assertEquals(2, Node.POST_FLAG);
385:       assertEquals(47, Node.IS_DISPATCHER);
386:       assertEquals(57, Node.REFLECTED_OBJECT);
387:       assertEquals(56, Node.CHANGE_TIME);
388:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
389:       assertEquals(8, Node.FLAG_NO_THROWS);
390:       assertEquals(39, Node.EMPTY_BLOCK);
391:       assertEquals(36, Node.QUOTED_PROP);
392:       assertEquals(52, Node.LENGTH);
393:       assertEquals(15, Node.NO_SIDE_EFFECTS);
394:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
395:       assertEquals(29, Node.JSDOC_INFO_PROP);
396:       assertEquals(53, Node.INPUT_ID);
397:       assertEquals(55, Node.INFERRED_FUNCTION);
398:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
399:       assertEquals(43, Node.IS_CONSTANT_NAME);
400:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
401:       assertEquals(48, Node.DIRECTIVES);
402:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
403:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
404:       assertEquals(4095, Node.COLUMN_MASK);
405:       assertEquals(40, Node.ORIGINALNAME_PROP);
406:       assertEquals(50, Node.FREE_CALL);
407:       assertEquals(54, Node.SLASH_V);
408:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
409:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
410:       assertFalse(node0.hasOneChild());
411:       assertFalse(node0.isCast());
412:       assertFalse(node0.isGetElem());
413:       assertFalse(node0.isAssign());
414:       assertEquals((-1), node0.getSourcePosition());
415:       assertFalse(node0.isNumber());
416:       assertFalse(node0.isExprResult());
417:       assertFalse(node0.isLabelName());
418:       assertFalse(node0.isAnd());
419:       assertFalse(node0.isInstanceOf());
420:       assertFalse(node0.isReturn());
421:       assertEquals((-1), node0.getLineno());
422:       assertFalse(node0.isNot());
423:       assertFalse(node0.isObjectLit());
424:       assertFalse(node0.isWith());
425:       assertFalse(node0.hasMoreThanOneChild());
426:       assertFalse(node0.isDec());
427:       assertFalse(node0.isTypeOf());
428:       assertFalse(node0.isScript());
429:       assertFalse(node0.isComma());
430:       assertFalse(node0.isThis());
431:       assertFalse(node0.isGetProp());
432:       assertFalse(node0.hasChildren());
433:       assertTrue(node0.isString());
434:       assertFalse(node0.isBlock());
435:       assertFalse(node0.isWhile());
436:       assertFalse(node0.isVar());
437:       assertFalse(node0.isCall());
438:       assertFalse(node0.isAdd());
439:       assertFalse(node0.isNull());
440:       assertFalse(node0.isBreak());
441:       assertEquals((-1), node0.getCharno());
442:       assertFalse(node0.isStringKey());
443:       assertFalse(node0.isName());
444:       assertFalse(node0.isParamList());
445:       assertFalse(node0.isSwitch());
446:       assertEquals(0, node0.getChildCount());
447:       assertFalse(node0.isLabel());
448:       assertFalse(node0.isOr());
449:       assertFalse(node0.isNew());
450:       assertFalse(node0.isDo());
451:       assertFalse(node0.isAssignAdd());
452:       assertFalse(node0.isDefaultCase());
453:       assertFalse(node0.isArrayLit());
454:       assertFalse(node0.isEmpty());
455:       assertFalse(node0.isFunction());
456:       assertFalse(node0.isNE());
457:       assertFalse(node0.isDelProp());
458:       assertFalse(node0.isGetterDef());
459:       assertFalse(node0.isDebugger());
460:       assertFalse(node0.isTrue());
461:       assertFalse(node0.isVoid());
462:       assertFalse(node0.isIf());
463:       assertFalse(node0.isCatch());
464:       assertFalse(node0.isRegExp());
465:       assertFalse(node0.isCase());
466:       assertFalse(node0.isFor());
467:       assertFalse(node0.isTry());
468:       assertFalse(node0.isHook());
469:       assertFalse(node0.isFalse());
470:       assertFalse(node0.isIn());
471:       assertFalse(node0.isContinue());
472:       assertFalse(node0.isInc());
473:       assertFalse(node0.isSetterDef());
474:       assertEquals(40, node0.getType());
475:       assertFalse(node0.isThrow());
476:       assertFalse(node1.isHook());
477:       assertFalse(node1.isFalse());
478:       assertFalse(node1.isComma());
479:       assertFalse(node1.isThis());
480:       assertFalse(node1.isInc());
481:       assertFalse(node1.isGetProp());
482:       assertFalse(node1.isCase());
483:       assertFalse(node1.isThrow());
484:       assertFalse(node1.isInstanceOf());
485:       assertFalse(node1.isWith());
486:       assertFalse(node1.isIn());
487:       assertFalse(node1.isNE());
488:       assertFalse(node1.isDelProp());
489:       assertFalse(node1.isExprResult());
490:       assertFalse(node1.isBreak());
491:       assertFalse(node1.isIf());
492:       assertFalse(node1.isCast());
493:       assertFalse(node1.isGetElem());
494:       assertFalse(node1.isAssign());
495:       assertFalse(node1.isFunction());
496:       assertFalse(node1.isDec());
497:       assertFalse(node1.isTypeOf());
498:       assertFalse(node1.hasChildren());
499:       assertEquals(40, node1.getType());
500:       assertFalse(node1.isNot());
501:       assertFalse(node1.isObjectLit());
502:       assertFalse(node1.isContinue());
503:       assertEquals((-1), node1.getSourcePosition());
504:       assertFalse(node1.isDebugger());
505:       assertFalse(node1.isAnd());
506:       assertFalse(node1.isVar());
507:       assertFalse(node1.isCall());
508:       assertFalse(node1.isAdd());
509:       assertFalse(node1.isSetterDef());
510:       assertTrue(node1.isString());
511:       assertFalse(node1.isBlock());
512:       assertFalse(node1.isNew());
513:       assertFalse(node1.isDo());
514:       assertFalse(node1.isWhile());
515:       assertFalse(node1.isReturn());
516:       assertEquals((-1), node1.getLineno());
517:       assertFalse(node1.isOr());
518:       assertFalse(node1.isCatch());
519:       assertFalse(node1.hasMoreThanOneChild());
520:       assertFalse(node1.isNull());
521:       assertFalse(node1.isTrue());
522:       assertFalse(node1.isName());
523:       assertFalse(node1.isVoid());
524:       assertFalse(node1.hasOneChild());
525:       assertFalse(node1.isArrayLit());
526:       assertFalse(node1.isEmpty());
527:       assertFalse(node1.isRegExp());
528:       assertFalse(node1.isScript());
529:       assertFalse(node1.isFor());
530:       assertFalse(node1.isTry());
531:       assertFalse(node1.isAssignAdd());
532:       assertFalse(node1.isDefaultCase());
533:       assertEquals(0, node1.getChildCount());
534:       assertFalse(node1.isLabel());
535:       assertFalse(node1.isNumber());
536:       assertFalse(node1.isGetterDef());
537:       assertEquals((-1), node1.getCharno());
538:       assertFalse(node1.isStringKey());
539:       assertFalse(node1.isLabelName());
540:       assertFalse(node1.isParamList());
541:       assertFalse(node1.isSwitch());
542:       assertSame(node0, node1);
543:       assertSame(node1, node0);
544:       assertNotNull(node1);
545:       
546:       boolean boolean0 = node0.isName();
547:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
548:       assertEquals(43, Node.IS_CONSTANT_NAME);
549:       assertEquals(8, Node.FLAG_NO_THROWS);
550:       assertEquals(39, Node.EMPTY_BLOCK);
551:       assertEquals(53, Node.INPUT_ID);
552:       assertEquals(36, Node.QUOTED_PROP);
553:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
554:       assertEquals(55, Node.INFERRED_FUNCTION);
555:       assertEquals(57, Node.REFLECTED_OBJECT);
556:       assertEquals(56, Node.CHANGE_TIME);
557:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
558:       assertEquals(37, Node.OPT_ARG_NAME);
559:       assertEquals(48, Node.DIRECTIVES);
560:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
561:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
562:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
563:       assertEquals(4095, Node.COLUMN_MASK);
564:       assertEquals(49, Node.DIRECT_EVAL);
565:       assertEquals(30, Node.VAR_ARGS_NAME);
566:       assertEquals(51, Node.STATIC_SOURCE_FILE);
567:       assertEquals(1, Node.DECR_FLAG);
568:       assertEquals(57, Node.LAST_PROP);
569:       assertEquals(32, Node.INCRDECR_PROP);
570:       assertEquals(46, Node.IS_NAMESPACE);
571:       assertEquals(12, Node.COLUMN_BITS);
572:       assertEquals(54, Node.SLASH_V);
573:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
574:       assertEquals(52, Node.LENGTH);
575:       assertEquals(15, Node.NO_SIDE_EFFECTS);
576:       assertEquals(29, Node.JSDOC_INFO_PROP);
577:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
578:       assertEquals(40, Node.ORIGINALNAME_PROP);
579:       assertEquals(50, Node.FREE_CALL);
580:       assertEquals(47, Node.IS_DISPATCHER);
581:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
582:       assertEquals(2, Node.POST_FLAG);
583:       assertFalse(node0.hasOneChild());
584:       assertFalse(node0.isCast());
585:       assertFalse(node0.isGetElem());
586:       assertFalse(node0.isAssign());
587:       assertEquals((-1), node0.getSourcePosition());
588:       assertFalse(node0.isNumber());
589:       assertFalse(node0.isExprResult());
590:       assertFalse(node0.isLabelName());
591:       assertFalse(node0.isAnd());
592:       assertFalse(node0.isInstanceOf());
593:       assertFalse(node0.isReturn());
594:       assertEquals((-1), node0.getLineno());
595:       assertFalse(node0.isNot());
596:       assertFalse(node0.isObjectLit());
597:       assertFalse(node0.isWith());
598:       assertFalse(node0.hasMoreThanOneChild());
599:       assertFalse(node0.isDec());
600:       assertFalse(node0.isTypeOf());
601:       assertFalse(node0.isScript());
602:       assertFalse(node0.isComma());
603:       assertFalse(node0.isThis());
604:       assertFalse(node0.isGetProp());
605:       assertFalse(node0.hasChildren());
606:       assertTrue(node0.isString());
607:       assertFalse(node0.isBlock());
608:       assertFalse(node0.isWhile());
609:       assertFalse(node0.isVar());
610:       assertFalse(node0.isCall());
611:       assertFalse(node0.isAdd());
612:       assertFalse(node0.isNull());
613:       assertFalse(node0.isBreak());
614:       assertEquals((-1), node0.getCharno());
615:       assertFalse(node0.isStringKey());
616:       assertFalse(node0.isName());
617:       assertFalse(node0.isParamList());
618:       assertFalse(node0.isSwitch());
619:       assertEquals(0, node0.getChildCount());
620:       assertFalse(node0.isLabel());
621:       assertFalse(node0.isOr());
622:       assertFalse(node0.isNew());
623:       assertFalse(node0.isDo());
624:       assertFalse(node0.isAssignAdd());
625:       assertFalse(node0.isDefaultCase());
626:       assertFalse(node0.isArrayLit());
627:       assertFalse(node0.isEmpty());
628:       assertFalse(node0.isFunction());
629:       assertFalse(node0.isNE());
630:       assertFalse(node0.isDelProp());
631:       assertFalse(node0.isGetterDef());
632:       assertFalse(node0.isDebugger());
633:       assertFalse(node0.isTrue());
634:       assertFalse(node0.isVoid());
635:       assertFalse(node0.isIf());
636:       assertFalse(node0.isCatch());
637:       assertFalse(node0.isRegExp());
638:       assertFalse(node0.isCase());
639:       assertFalse(node0.isFor());
640:       assertFalse(node0.isTry());
641:       assertFalse(node0.isHook());
642:       assertFalse(node0.isFalse());
643:       assertFalse(node0.isIn());
644:       assertFalse(node0.isContinue());
645:       assertFalse(node0.isInc());
646:       assertFalse(node0.isSetterDef());
647:       assertEquals(40, node0.getType());
648:       assertFalse(node0.isThrow());
649:       assertSame(node0, node1);
650:       assertFalse(boolean0);
651:       
652:       node0.setCharno(3300);
653:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
654:       assertEquals(43, Node.IS_CONSTANT_NAME);
655:       assertEquals(8, Node.FLAG_NO_THROWS);
656:       assertEquals(39, Node.EMPTY_BLOCK);
657:       assertEquals(53, Node.INPUT_ID);
658:       assertEquals(36, Node.QUOTED_PROP);
659:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
660:       assertEquals(55, Node.INFERRED_FUNCTION);
661:       assertEquals(57, Node.REFLECTED_OBJECT);
662:       assertEquals(56, Node.CHANGE_TIME);
663:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
664:       assertEquals(37, Node.OPT_ARG_NAME);
665:       assertEquals(48, Node.DIRECTIVES);
666:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
667:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
668:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
669:       assertEquals(4095, Node.COLUMN_MASK);
670:       assertEquals(49, Node.DIRECT_EVAL);
671:       assertEquals(30, Node.VAR_ARGS_NAME);
672:       assertEquals(51, Node.STATIC_SOURCE_FILE);
673:       assertEquals(1, Node.DECR_FLAG);
674:       assertEquals(57, Node.LAST_PROP);
675:       assertEquals(32, Node.INCRDECR_PROP);
676:       assertEquals(46, Node.IS_NAMESPACE);
677:       assertEquals(12, Node.COLUMN_BITS);
678:       assertEquals(54, Node.SLASH_V);
679:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
680:       assertEquals(52, Node.LENGTH);
681:       assertEquals(15, Node.NO_SIDE_EFFECTS);
682:       assertEquals(29, Node.JSDOC_INFO_PROP);
683:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
684:       assertEquals(40, Node.ORIGINALNAME_PROP);
685:       assertEquals(50, Node.FREE_CALL);
686:       assertEquals(47, Node.IS_DISPATCHER);
687:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
688:       assertEquals(2, Node.POST_FLAG);
689:       assertFalse(node0.hasOneChild());
690:       assertFalse(node0.isCast());
691:       assertFalse(node0.isGetElem());
692:       assertFalse(node0.isAssign());
693:       assertEquals((-1), node0.getSourcePosition());
694:       assertFalse(node0.isNumber());
695:       assertFalse(node0.isExprResult());
696:       assertFalse(node0.isLabelName());
697:       assertFalse(node0.isAnd());
698:       assertFalse(node0.isInstanceOf());
699:       assertFalse(node0.isReturn());
700:       assertEquals((-1), node0.getLineno());
701:       assertFalse(node0.isNot());
702:       assertFalse(node0.isObjectLit());
703:       assertFalse(node0.isWith());
704:       assertFalse(node0.hasMoreThanOneChild());
705:       assertFalse(node0.isDec());
706:       assertFalse(node0.isTypeOf());
707:       assertFalse(node0.isScript());
708:       assertFalse(node0.isComma());
709:       assertFalse(node0.isThis());
710:       assertFalse(node0.isGetProp());
711:       assertFalse(node0.hasChildren());
712:       assertTrue(node0.isString());
713:       assertFalse(node0.isBlock());
714:       assertFalse(node0.isWhile());
715:       assertFalse(node0.isVar());
716:       assertFalse(node0.isCall());
717:       assertFalse(node0.isAdd());
718:       assertFalse(node0.isNull());
719:       assertFalse(node0.isBreak());
720:       assertEquals((-1), node0.getCharno());
721:       assertFalse(node0.isStringKey());
722:       assertFalse(node0.isName());
723:       assertFalse(node0.isParamList());
724:       assertFalse(node0.isSwitch());
725:       assertEquals(0, node0.getChildCount());
726:       assertFalse(node0.isLabel());
727:       assertFalse(node0.isOr());
728:       assertFalse(node0.isNew());
729:       assertFalse(node0.isDo());
730:       assertFalse(node0.isAssignAdd());
731:       assertFalse(node0.isDefaultCase());
732:       assertFalse(node0.isArrayLit());
733:       assertFalse(node0.isEmpty());
734:       assertFalse(node0.isFunction());
735:       assertFalse(node0.isNE());
736:       assertFalse(node0.isDelProp());
737:       assertFalse(node0.isGetterDef());
738:       assertFalse(node0.isDebugger());
739:       assertFalse(node0.isTrue());
740:       assertFalse(node0.isVoid());
741:       assertFalse(node0.isIf());
742:       assertFalse(node0.isCatch());
743:       assertFalse(node0.isRegExp());
744:       assertFalse(node0.isCase());
745:       assertFalse(node0.isFor());
746:       assertFalse(node0.isTry());
747:       assertFalse(node0.isHook());
748:       assertFalse(node0.isFalse());
749:       assertFalse(node0.isIn());
750:       assertFalse(node0.isContinue());
751:       assertFalse(node0.isInc());
752:       assertFalse(node0.isSetterDef());
753:       assertEquals(40, node0.getType());
754:       assertFalse(node0.isThrow());
755:       assertSame(node0, node1);
756:       
757:       boolean boolean1 = node1.isDelProp();
758:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
759:       assertEquals(43, Node.IS_CONSTANT_NAME);
760:       assertEquals(8, Node.FLAG_NO_THROWS);
761:       assertEquals(39, Node.EMPTY_BLOCK);
762:       assertEquals(53, Node.INPUT_ID);
763:       assertEquals(36, Node.QUOTED_PROP);
764:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
765:       assertEquals(55, Node.INFERRED_FUNCTION);
766:       assertEquals(57, Node.REFLECTED_OBJECT);
767:       assertEquals(56, Node.CHANGE_TIME);
768:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
769:       assertEquals(37, Node.OPT_ARG_NAME);
770:       assertEquals(48, Node.DIRECTIVES);
771:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
772:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
773:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
774:       assertEquals(4095, Node.COLUMN_MASK);
775:       assertEquals(49, Node.DIRECT_EVAL);
776:       assertEquals(30, Node.VAR_ARGS_NAME);
777:       assertEquals(51, Node.STATIC_SOURCE_FILE);
778:       assertEquals(1, Node.DECR_FLAG);
779:       assertEquals(57, Node.LAST_PROP);
780:       assertEquals(32, Node.INCRDECR_PROP);
781:       assertEquals(46, Node.IS_NAMESPACE);
782:       assertEquals(12, Node.COLUMN_BITS);
783:       assertEquals(54, Node.SLASH_V);
784:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
785:       assertEquals(52, Node.LENGTH);
786:       assertEquals(15, Node.NO_SIDE_EFFECTS);
787:       assertEquals(29, Node.JSDOC_INFO_PROP);
788:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
789:       assertEquals(40, Node.ORIGINALNAME_PROP);
790:       assertEquals(50, Node.FREE_CALL);
791:       assertEquals(47, Node.IS_DISPATCHER);
792:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
793:       assertEquals(2, Node.POST_FLAG);
794:       assertEquals(49, Node.DIRECT_EVAL);
795:       assertEquals(30, Node.VAR_ARGS_NAME);
796:       assertEquals(51, Node.STATIC_SOURCE_FILE);
797:       assertEquals(1, Node.DECR_FLAG);
798:       assertEquals(32, Node.INCRDECR_PROP);
799:       assertEquals(46, Node.IS_NAMESPACE);
800:       assertEquals(57, Node.LAST_PROP);
801:       assertEquals(12, Node.COLUMN_BITS);
802:       assertEquals(37, Node.OPT_ARG_NAME);
803:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
804:       assertEquals(2, Node.POST_FLAG);
805:       assertEquals(47, Node.IS_DISPATCHER);
806:       assertEquals(57, Node.REFLECTED_OBJECT);
807:       assertEquals(56, Node.CHANGE_TIME);
808:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
809:       assertEquals(8, Node.FLAG_NO_THROWS);
810:       assertEquals(39, Node.EMPTY_BLOCK);
811:       assertEquals(36, Node.QUOTED_PROP);
812:       assertEquals(52, Node.LENGTH);
813:       assertEquals(15, Node.NO_SIDE_EFFECTS);
814:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
815:       assertEquals(29, Node.JSDOC_INFO_PROP);
816:       assertEquals(53, Node.INPUT_ID);
817:       assertEquals(55, Node.INFERRED_FUNCTION);
818:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
819:       assertEquals(43, Node.IS_CONSTANT_NAME);
820:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
821:       assertEquals(48, Node.DIRECTIVES);
822:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
823:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
824:       assertEquals(4095, Node.COLUMN_MASK);
825:       assertEquals(40, Node.ORIGINALNAME_PROP);
826:       assertEquals(50, Node.FREE_CALL);
827:       assertEquals(54, Node.SLASH_V);
828:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
829:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
830:       assertFalse(node0.hasOneChild());
831:       assertFalse(node0.isCast());
832:       assertFalse(node0.isGetElem());
833:       assertFalse(node0.isAssign());
834:       assertEquals((-1), node0.getSourcePosition());
835:       assertFalse(node0.isNumber());
836:       assertFalse(node0.isExprResult());
837:       assertFalse(node0.isLabelName());
838:       assertFalse(node0.isAnd());
839:       assertFalse(node0.isInstanceOf());
840:       assertFalse(node0.isReturn());
841:       assertEquals((-1), node0.getLineno());
842:       assertFalse(node0.isNot());
843:       assertFalse(node0.isObjectLit());
844:       assertFalse(node0.isWith());
845:       assertFalse(node0.hasMoreThanOneChild());
846:       assertFalse(node0.isDec());
847:       assertFalse(node0.isTypeOf());
848:       assertFalse(node0.isScript());
849:       assertFalse(node0.isComma());
850:       assertFalse(node0.isThis());
851:       assertFalse(node0.isGetProp());
852:       assertFalse(node0.hasChildren());
853:       assertTrue(node0.isString());
854:       assertFalse(node0.isBlock());
855:       assertFalse(node0.isWhile());
856:       assertFalse(node0.isVar());
857:       assertFalse(node0.isCall());
858:       assertFalse(node0.isAdd());
859:       assertFalse(node0.isNull());
860:       assertFalse(node0.isBreak());
861:       assertEquals((-1), node0.getCharno());
862:       assertFalse(node0.isStringKey());
863:       assertFalse(node0.isName());
864:       assertFalse(node0.isParamList());
865:       assertFalse(node0.isSwitch());
866:       assertEquals(0, node0.getChildCount());
867:       assertFalse(node0.isLabel());
868:       assertFalse(node0.isOr());
869:       assertFalse(node0.isNew());
870:       assertFalse(node0.isDo());
871:       assertFalse(node0.isAssignAdd());
872:       assertFalse(node0.isDefaultCase());
873:       assertFalse(node0.isArrayLit());
874:       assertFalse(node0.isEmpty());
875:       assertFalse(node0.isFunction());
876:       assertFalse(node0.isNE());
877:       assertFalse(node0.isDelProp());
878:       assertFalse(node0.isGetterDef());
879:       assertFalse(node0.isDebugger());
880:       assertFalse(node0.isTrue());
881:       assertFalse(node0.isVoid());
882:       assertFalse(node0.isIf());
883:       assertFalse(node0.isCatch());
884:       assertFalse(node0.isRegExp());
885:       assertFalse(node0.isCase());
886:       assertFalse(node0.isFor());
887:       assertFalse(node0.isTry());
888:       assertFalse(node0.isHook());
889:       assertFalse(node0.isFalse());
890:       assertFalse(node0.isIn());
891:       assertFalse(node0.isContinue());
892:       assertFalse(node0.isInc());
893:       assertFalse(node0.isSetterDef());
894:       assertEquals(40, node0.getType());
895:       assertFalse(node0.isThrow());
896:       assertFalse(node1.isHook());
897:       assertFalse(node1.isFalse());
898:       assertFalse(node1.isComma());
899:       assertFalse(node1.isThis());
900:       assertFalse(node1.isInc());
901:       assertFalse(node1.isGetProp());
902:       assertFalse(node1.isCase());
903:       assertFalse(node1.isThrow());
904:       assertFalse(node1.isInstanceOf());
905:       assertFalse(node1.isWith());
906:       assertFalse(node1.isIn());
907:       assertFalse(node1.isNE());
908:       assertFalse(node1.isDelProp());
909:       assertFalse(node1.isExprResult());
910:       assertFalse(node1.isBreak());
911:       assertFalse(node1.isIf());
912:       assertFalse(node1.isCast());
913:       assertFalse(node1.isGetElem());
914:       assertFalse(node1.isAssign());
915:       assertFalse(node1.isFunction());
916:       assertFalse(node1.isDec());
917:       assertFalse(node1.isTypeOf());
918:       assertFalse(node1.hasChildren());
919:       assertEquals(40, node1.getType());
920:       assertFalse(node1.isNot());
921:       assertFalse(node1.isObjectLit());
922:       assertFalse(node1.isContinue());
923:       assertEquals((-1), node1.getSourcePosition());
924:       assertFalse(node1.isDebugger());
925:       assertFalse(node1.isAnd());
926:       assertFalse(node1.isVar());
927:       assertFalse(node1.isCall());
928:       assertFalse(node1.isAdd());
929:       assertFalse(node1.isSetterDef());
930:       assertTrue(node1.isString());
931:       assertFalse(node1.isBlock());
932:       assertFalse(node1.isNew());
933:       assertFalse(node1.isDo());
934:       assertFalse(node1.isWhile());
935:       assertFalse(node1.isReturn());
936:       assertEquals((-1), node1.getLineno());
937:       assertFalse(node1.isOr());
938:       assertFalse(node1.isCatch());
939:       assertFalse(node1.hasMoreThanOneChild());
940:       assertFalse(node1.isNull());
941:       assertFalse(node1.isTrue());
942:       assertFalse(node1.isName());
943:       assertFalse(node1.isVoid());
944:       assertFalse(node1.hasOneChild());
945:       assertFalse(node1.isArrayLit());
946:       assertFalse(node1.isEmpty());
947:       assertFalse(node1.isRegExp());
948:       assertFalse(node1.isScript());
949:       assertFalse(node1.isFor());
950:       assertFalse(node1.isTry());
951:       assertFalse(node1.isAssignAdd());
952:       assertFalse(node1.isDefaultCase());
953:       assertEquals(0, node1.getChildCount());
954:       assertFalse(node1.isLabel());
955:       assertFalse(node1.isNumber());
956:       assertFalse(node1.isGetterDef());
957:       assertEquals((-1), node1.getCharno());
958:       assertFalse(node1.isStringKey());
959:       assertFalse(node1.isLabelName());
960:       assertFalse(node1.isParamList());
961:       assertFalse(node1.isSwitch());
962:       assertSame(node0, node1);
963:       assertSame(node1, node0);
964:       assertTrue(boolean1 == boolean0);
965:       assertFalse(boolean1);
966:       
967:       boolean boolean2 = node0.isCast();
968:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
969:       assertEquals(43, Node.IS_CONSTANT_NAME);
970:       assertEquals(8, Node.FLAG_NO_THROWS);
971:       assertEquals(39, Node.EMPTY_BLOCK);
972:       assertEquals(53, Node.INPUT_ID);
973:       assertEquals(36, Node.QUOTED_PROP);
974:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
975:       assertEquals(55, Node.INFERRED_FUNCTION);
976:       assertEquals(57, Node.REFLECTED_OBJECT);
977:       assertEquals(56, Node.CHANGE_TIME);
978:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
979:       assertEquals(37, Node.OPT_ARG_NAME);
980:       assertEquals(48, Node.DIRECTIVES);
981:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
982:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
983:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
984:       assertEquals(4095, Node.COLUMN_MASK);
985:       assertEquals(49, Node.DIRECT_EVAL);
986:       assertEquals(30, Node.VAR_ARGS_NAME);
987:       assertEquals(51, Node.STATIC_SOURCE_FILE);
988:       assertEquals(1, Node.DECR_FLAG);
989:       assertEquals(57, Node.LAST_PROP);
990:       assertEquals(32, Node.INCRDECR_PROP);
991:       assertEquals(46, Node.IS_NAMESPACE);
992:       assertEquals(12, Node.COLUMN_BITS);
993:       assertEquals(54, Node.SLASH_V);
994:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
995:       assertEquals(52, Node.LENGTH);
996:       assertEquals(15, Node.NO_SIDE_EFFECTS);
997:       assertEquals(29, Node.JSDOC_INFO_PROP);
998:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
999:       assertEquals(40, Node.ORIGINALNAME_PROP);
1000:       assertEquals(50, Node.FREE_CALL);
1001:       assertEquals(47, Node.IS_DISPATCHER);
1002:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1003:       assertEquals(2, Node.POST_FLAG);
1004:       assertFalse(node0.hasOneChild());
1005:       assertFalse(node0.isCast());
1006:       assertFalse(node0.isGetElem());
1007:       assertFalse(node0.isAssign());
1008:       assertEquals((-1), node0.getSourcePosition());
1009:       assertFalse(node0.isNumber());
1010:       assertFalse(node0.isExprResult());
1011:       assertFalse(node0.isLabelName());
1012:       assertFalse(node0.isAnd());
1013:       assertFalse(node0.isInstanceOf());
1014:       assertFalse(node0.isReturn());
1015:       assertEquals((-1), node0.getLineno());
1016:       assertFalse(node0.isNot());
1017:       assertFalse(node0.isObjectLit());
1018:       assertFalse(node0.isWith());
1019:       assertFalse(node0.hasMoreThanOneChild());
1020:       assertFalse(node0.isDec());
1021:       assertFalse(node0.isTypeOf());
1022:       assertFalse(node0.isScript());
1023:       assertFalse(node0.isComma());
1024:       assertFalse(node0.isThis());
1025:       assertFalse(node0.isGetProp());
1026:       assertFalse(node0.hasChildren());
1027:       assertTrue(node0.isString());
1028:       assertFalse(node0.isBlock());
1029:       assertFalse(node0.isWhile());
1030:       assertFalse(node0.isVar());
1031:       assertFalse(node0.isCall());
1032:       assertFalse(node0.isAdd());
1033:       assertFalse(node0.isNull());
1034:       assertFalse(node0.isBreak());
1035:       assertEquals((-1), node0.getCharno());
1036:       assertFalse(node0.isStringKey());
1037:       assertFalse(node0.isName());
1038:       assertFalse(node0.isParamList());
1039:       assertFalse(node0.isSwitch());
1040:       assertEquals(0, node0.getChildCount());
1041:       assertFalse(node0.isLabel());
1042:       assertFalse(node0.isOr());
1043:       assertFalse(node0.isNew());
1044:       assertFalse(node0.isDo());
1045:       assertFalse(node0.isAssignAdd());
1046:       assertFalse(node0.isDefaultCase());
1047:       assertFalse(node0.isArrayLit());
1048:       assertFalse(node0.isEmpty());
1049:       assertFalse(node0.isFunction());
1050:       assertFalse(node0.isNE());
1051:       assertFalse(node0.isDelProp());
1052:       assertFalse(node0.isGetterDef());
1053:       assertFalse(node0.isDebugger());
1054:       assertFalse(node0.isTrue());
1055:       assertFalse(node0.isVoid());
1056:       assertFalse(node0.isIf());
1057:       assertFalse(node0.isCatch());
1058:       assertFalse(node0.isRegExp());
1059:       assertFalse(node0.isCase());
1060:       assertFalse(node0.isFor());
1061:       assertFalse(node0.isTry());
1062:       assertFalse(node0.isHook());
1063:       assertFalse(node0.isFalse());
1064:       assertFalse(node0.isIn());
1065:       assertFalse(node0.isContinue());
1066:       assertFalse(node0.isInc());
1067:       assertFalse(node0.isSetterDef());
1068:       assertEquals(40, node0.getType());
1069:       assertFalse(node0.isThrow());
1070:       assertSame(node0, node1);
1071:       assertTrue(boolean2 == boolean1);
1072:       assertTrue(boolean2 == boolean0);
1073:       assertFalse(boolean2);
1074:       
1075:       boolean boolean3 = node1.isIf();
1076:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1077:       assertEquals(43, Node.IS_CONSTANT_NAME);
1078:       assertEquals(8, Node.FLAG_NO_THROWS);
1079:       assertEquals(39, Node.EMPTY_BLOCK);
1080:       assertEquals(53, Node.INPUT_ID);
1081:       assertEquals(36, Node.QUOTED_PROP);
1082:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1083:       assertEquals(55, Node.INFERRED_FUNCTION);
1084:       assertEquals(57, Node.REFLECTED_OBJECT);
1085:       assertEquals(56, Node.CHANGE_TIME);
1086:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1087:       assertEquals(37, Node.OPT_ARG_NAME);
1088:       assertEquals(48, Node.DIRECTIVES);
1089:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1090:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1091:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1092:       assertEquals(4095, Node.COLUMN_MASK);
1093:       assertEquals(49, Node.DIRECT_EVAL);
1094:       assertEquals(30, Node.VAR_ARGS_NAME);
1095:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1096:       assertEquals(1, Node.DECR_FLAG);
1097:       assertEquals(57, Node.LAST_PROP);
1098:       assertEquals(32, Node.INCRDECR_PROP);
1099:       assertEquals(46, Node.IS_NAMESPACE);
1100:       assertEquals(12, Node.COLUMN_BITS);
1101:       assertEquals(54, Node.SLASH_V);
1102:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1103:       assertEquals(52, Node.LENGTH);
1104:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1105:       assertEquals(29, Node.JSDOC_INFO_PROP);
1106:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1107:       assertEquals(40, Node.ORIGINALNAME_PROP);
1108:       assertEquals(50, Node.FREE_CALL);
1109:       assertEquals(47, Node.IS_DISPATCHER);
1110:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1111:       assertEquals(2, Node.POST_FLAG);
1112:       assertEquals(49, Node.DIRECT_EVAL);
1113:       assertEquals(30, Node.VAR_ARGS_NAME);
1114:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1115:       assertEquals(1, Node.DECR_FLAG);
1116:       assertEquals(32, Node.INCRDECR_PROP);
1117:       assertEquals(46, Node.IS_NAMESPACE);
1118:       assertEquals(57, Node.LAST_PROP);
1119:       assertEquals(12, Node.COLUMN_BITS);
1120:       assertEquals(37, Node.OPT_ARG_NAME);
1121:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1122:       assertEquals(2, Node.POST_FLAG);
1123:       assertEquals(47, Node.IS_DISPATCHER);
1124:       assertEquals(57, Node.REFLECTED_OBJECT);
1125:       assertEquals(56, Node.CHANGE_TIME);
1126:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1127:       assertEquals(8, Node.FLAG_NO_THROWS);
1128:       assertEquals(39, Node.EMPTY_BLOCK);
1129:       assertEquals(36, Node.QUOTED_PROP);
1130:       assertEquals(52, Node.LENGTH);
1131:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1132:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1133:       assertEquals(29, Node.JSDOC_INFO_PROP);
1134:       assertEquals(53, Node.INPUT_ID);
1135:       assertEquals(55, Node.INFERRED_FUNCTION);
1136:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1137:       assertEquals(43, Node.IS_CONSTANT_NAME);
1138:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1139:       assertEquals(48, Node.DIRECTIVES);
1140:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1141:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1142:       assertEquals(4095, Node.COLUMN_MASK);
1143:       assertEquals(40, Node.ORIGINALNAME_PROP);
1144:       assertEquals(50, Node.FREE_CALL);
1145:       assertEquals(54, Node.SLASH_V);
1146:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1147:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1148:       assertFalse(node0.hasOneChild());
1149:       assertFalse(node0.isCast());
1150:       assertFalse(node0.isGetElem());
1151:       assertFalse(node0.isAssign());
1152:       assertEquals((-1), node0.getSourcePosition());
1153:       assertFalse(node0.isNumber());
1154:       assertFalse(node0.isExprResult());
1155:       assertFalse(node0.isLabelName());
1156:       assertFalse(node0.isAnd());
1157:       assertFalse(node0.isInstanceOf());
1158:       assertFalse(node0.isReturn());
1159:       assertEquals((-1), node0.getLineno());
1160:       assertFalse(node0.isNot());
1161:       assertFalse(node0.isObjectLit());
1162:       assertFalse(node0.isWith());
1163:       assertFalse(node0.hasMoreThanOneChild());
1164:       assertFalse(node0.isDec());
1165:       assertFalse(node0.isTypeOf());
1166:       assertFalse(node0.isScript());
1167:       assertFalse(node0.isComma());
1168:       assertFalse(node0.isThis());
1169:       assertFalse(node0.isGetProp());
1170:       assertFalse(node0.hasChildren());
1171:       assertTrue(node0.isString());
1172:       assertFalse(node0.isBlock());
1173:       assertFalse(node0.isWhile());
1174:       assertFalse(node0.isVar());
1175:       assertFalse(node0.isCall());
1176:       assertFalse(node0.isAdd());
1177:       assertFalse(node0.isNull());
1178:       assertFalse(node0.isBreak());
1179:       assertEquals((-1), node0.getCharno());
1180:       assertFalse(node0.isStringKey());
1181:       assertFalse(node0.isName());
1182:       assertFalse(node0.isParamList());
1183:       assertFalse(node0.isSwitch());
1184:       assertEquals(0, node0.getChildCount());
1185:       assertFalse(node0.isLabel());
1186:       assertFalse(node0.isOr());
1187:       assertFalse(node0.isNew());
1188:       assertFalse(node0.isDo());
1189:       assertFalse(node0.isAssignAdd());
1190:       assertFalse(node0.isDefaultCase());
1191:       assertFalse(node0.isArrayLit());
1192:       assertFalse(node0.isEmpty());
1193:       assertFalse(node0.isFunction());
1194:       assertFalse(node0.isNE());
1195:       assertFalse(node0.isDelProp());
1196:       assertFalse(node0.isGetterDef());
1197:       assertFalse(node0.isDebugger());
1198:       assertFalse(node0.isTrue());
1199:       assertFalse(node0.isVoid());
1200:       assertFalse(node0.isIf());
1201:       assertFalse(node0.isCatch());
1202:       assertFalse(node0.isRegExp());
1203:       assertFalse(node0.isCase());
1204:       assertFalse(node0.isFor());
1205:       assertFalse(node0.isTry());
1206:       assertFalse(node0.isHook());
1207:       assertFalse(node0.isFalse());
1208:       assertFalse(node0.isIn());
1209:       assertFalse(node0.isContinue());
1210:       assertFalse(node0.isInc());
1211:       assertFalse(node0.isSetterDef());
1212:       assertEquals(40, node0.getType());
1213:       assertFalse(node0.isThrow());
1214:       assertFalse(node1.isHook());
1215:       assertFalse(node1.isFalse());
1216:       assertFalse(node1.isComma());
1217:       assertFalse(node1.isThis());
1218:       assertFalse(node1.isInc());
1219:       assertFalse(node1.isGetProp());
1220:       assertFalse(node1.isCase());
1221:       assertFalse(node1.isThrow());
1222:       assertFalse(node1.isInstanceOf());
1223:       assertFalse(node1.isWith());
1224:       assertFalse(node1.isIn());
1225:       assertFalse(node1.isNE());
1226:       assertFalse(node1.isDelProp());
1227:       assertFalse(node1.isExprResult());
1228:       assertFalse(node1.isBreak());
1229:       assertFalse(node1.isIf());
1230:       assertFalse(node1.isCast());
1231:       assertFalse(node1.isGetElem());
1232:       assertFalse(node1.isAssign());
1233:       assertFalse(node1.isFunction());
1234:       assertFalse(node1.isDec());
1235:       assertFalse(node1.isTypeOf());
1236:       assertFalse(node1.hasChildren());
1237:       assertEquals(40, node1.getType());
1238:       assertFalse(node1.isNot());
1239:       assertFalse(node1.isObjectLit());
1240:       assertFalse(node1.isContinue());
1241:       assertEquals((-1), node1.getSourcePosition());
1242:       assertFalse(node1.isDebugger());
1243:       assertFalse(node1.isAnd());
1244:       assertFalse(node1.isVar());
1245:       assertFalse(node1.isCall());
1246:       assertFalse(node1.isAdd());
1247:       assertFalse(node1.isSetterDef());
1248:       assertTrue(node1.isString());
1249:       assertFalse(node1.isBlock());
1250:       assertFalse(node1.isNew());
1251:       assertFalse(node1.isDo());
1252:       assertFalse(node1.isWhile());
1253:       assertFalse(node1.isReturn());
1254:       assertEquals((-1), node1.getLineno());
1255:       assertFalse(node1.isOr());
1256:       assertFalse(node1.isCatch());
1257:       assertFalse(node1.hasMoreThanOneChild());
1258:       assertFalse(node1.isNull());
1259:       assertFalse(node1.isTrue());
1260:       assertFalse(node1.isName());
1261:       assertFalse(node1.isVoid());
1262:       assertFalse(node1.hasOneChild());
1263:       assertFalse(node1.isArrayLit());
1264:       assertFalse(node1.isEmpty());
1265:       assertFalse(node1.isRegExp());
1266:       assertFalse(node1.isScript());
1267:       assertFalse(node1.isFor());
1268:       assertFalse(node1.isTry());
1269:       assertFalse(node1.isAssignAdd());
1270:       assertFalse(node1.isDefaultCase());
1271:       assertEquals(0, node1.getChildCount());
1272:       assertFalse(node1.isLabel());
1273:       assertFalse(node1.isNumber());
1274:       assertFalse(node1.isGetterDef());
1275:       assertEquals((-1), node1.getCharno());
1276:       assertFalse(node1.isStringKey());
1277:       assertFalse(node1.isLabelName());
1278:       assertFalse(node1.isParamList());
1279:       assertFalse(node1.isSwitch());
1280:       assertSame(node0, node1);
1281:       assertSame(node1, node0);
1282:       assertTrue(boolean3 == boolean0);
1283:       assertTrue(boolean3 == boolean2);
1284:       assertTrue(boolean3 == boolean1);
1285:       assertFalse(boolean3);
1286:       
1287:       boolean boolean4 = node1.isBlock();
1288:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1289:       assertEquals(43, Node.IS_CONSTANT_NAME);
1290:       assertEquals(8, Node.FLAG_NO_THROWS);
1291:       assertEquals(39, Node.EMPTY_BLOCK);
1292:       assertEquals(53, Node.INPUT_ID);
1293:       assertEquals(36, Node.QUOTED_PROP);
1294:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1295:       assertEquals(55, Node.INFERRED_FUNCTION);
1296:       assertEquals(57, Node.REFLECTED_OBJECT);
1297:       assertEquals(56, Node.CHANGE_TIME);
1298:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1299:       assertEquals(37, Node.OPT_ARG_NAME);
1300:       assertEquals(48, Node.DIRECTIVES);
1301:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1302:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1303:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1304:       assertEquals(4095, Node.COLUMN_MASK);
1305:       assertEquals(49, Node.DIRECT_EVAL);
1306:       assertEquals(30, Node.VAR_ARGS_NAME);
1307:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1308:       assertEquals(1, Node.DECR_FLAG);
1309:       assertEquals(57, Node.LAST_PROP);
1310:       assertEquals(32, Node.INCRDECR_PROP);
1311:       assertEquals(46, Node.IS_NAMESPACE);
1312:       assertEquals(12, Node.COLUMN_BITS);
1313:       assertEquals(54, Node.SLASH_V);
1314:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1315:       assertEquals(52, Node.LENGTH);
1316:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1317:       assertEquals(29, Node.JSDOC_INFO_PROP);
1318:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1319:       assertEquals(40, Node.ORIGINALNAME_PROP);
1320:       assertEquals(50, Node.FREE_CALL);
1321:       assertEquals(47, Node.IS_DISPATCHER);
1322:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1323:       assertEquals(2, Node.POST_FLAG);
1324:       assertEquals(49, Node.DIRECT_EVAL);
1325:       assertEquals(30, Node.VAR_ARGS_NAME);
1326:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1327:       assertEquals(1, Node.DECR_FLAG);
1328:       assertEquals(32, Node.INCRDECR_PROP);
1329:       assertEquals(46, Node.IS_NAMESPACE);
1330:       assertEquals(57, Node.LAST_PROP);
1331:       assertEquals(12, Node.COLUMN_BITS);
1332:       assertEquals(37, Node.OPT_ARG_NAME);
1333:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1334:       assertEquals(2, Node.POST_FLAG);
1335:       assertEquals(47, Node.IS_DISPATCHER);
1336:       assertEquals(57, Node.REFLECTED_OBJECT);
1337:       assertEquals(56, Node.CHANGE_TIME);
1338:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1339:       assertEquals(8, Node.FLAG_NO_THROWS);
1340:       assertEquals(39, Node.EMPTY_BLOCK);
1341:       assertEquals(36, Node.QUOTED_PROP);
1342:       assertEquals(52, Node.LENGTH);
1343:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1344:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1345:       assertEquals(29, Node.JSDOC_INFO_PROP);
1346:       assertEquals(53, Node.INPUT_ID);
1347:       assertEquals(55, Node.INFERRED_FUNCTION);
1348:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1349:       assertEquals(43, Node.IS_CONSTANT_NAME);
1350:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1351:       assertEquals(48, Node.DIRECTIVES);
1352:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1353:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1354:       assertEquals(4095, Node.COLUMN_MASK);
1355:       assertEquals(40, Node.ORIGINALNAME_PROP);
1356:       assertEquals(50, Node.FREE_CALL);
1357:       assertEquals(54, Node.SLASH_V);
1358:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1359:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1360:       assertFalse(node0.hasOneChild());
1361:       assertFalse(node0.isCast());
1362:       assertFalse(node0.isGetElem());
1363:       assertFalse(node0.isAssign());
1364:       assertEquals((-1), node0.getSourcePosition());
1365:       assertFalse(node0.isNumber());
1366:       assertFalse(node0.isExprResult());
1367:       assertFalse(node0.isLabelName());
1368:       assertFalse(node0.isAnd());
1369:       assertFalse(node0.isInstanceOf());
1370:       assertFalse(node0.isReturn());
1371:       assertEquals((-1), node0.getLineno());
1372:       assertFalse(node0.isNot());
1373:       assertFalse(node0.isObjectLit());
1374:       assertFalse(node0.isWith());
1375:       assertFalse(node0.hasMoreThanOneChild());
1376:       assertFalse(node0.isDec());
1377:       assertFalse(node0.isTypeOf());
1378:       assertFalse(node0.isScript());
1379:       assertFalse(node0.isComma());
1380:       assertFalse(node0.isThis());
1381:       assertFalse(node0.isGetProp());
1382:       assertFalse(node0.hasChildren());
1383:       assertTrue(node0.isString());
1384:       assertFalse(node0.isBlock());
1385:       assertFalse(node0.isWhile());
1386:       assertFalse(node0.isVar());
1387:       assertFalse(node0.isCall());
1388:       assertFalse(node0.isAdd());
1389:       assertFalse(node0.isNull());
1390:       assertFalse(node0.isBreak());
1391:       assertEquals((-1), node0.getCharno());
1392:       assertFalse(node0.isStringKey());
1393:       assertFalse(node0.isName());
1394:       assertFalse(node0.isParamList());
1395:       assertFalse(node0.isSwitch());
1396:       assertEquals(0, node0.getChildCount());
1397:       assertFalse(node0.isLabel());
1398:       assertFalse(node0.isOr());
1399:       assertFalse(node0.isNew());
1400:       assertFalse(node0.isDo());
1401:       assertFalse(node0.isAssignAdd());
1402:       assertFalse(node0.isDefaultCase());
1403:       assertFalse(node0.isArrayLit());
1404:       assertFalse(node0.isEmpty());
1405:       assertFalse(node0.isFunction());
1406:       assertFalse(node0.isNE());
1407:       assertFalse(node0.isDelProp());
1408:       assertFalse(node0.isGetterDef());
1409:       assertFalse(node0.isDebugger());
1410:       assertFalse(node0.isTrue());
1411:       assertFalse(node0.isVoid());
1412:       assertFalse(node0.isIf());
1413:       assertFalse(node0.isCatch());
1414:       assertFalse(node0.isRegExp());
1415:       assertFalse(node0.isCase());
1416:       assertFalse(node0.isFor());
1417:       assertFalse(node0.isTry());
1418:       assertFalse(node0.isHook());
1419:       assertFalse(node0.isFalse());
1420:       assertFalse(node0.isIn());
1421:       assertFalse(node0.isContinue());
1422:       assertFalse(node0.isInc());
1423:       assertFalse(node0.isSetterDef());
1424:       assertEquals(40, node0.getType());
1425:       assertFalse(node0.isThrow());
1426:       assertFalse(node1.isHook());
1427:       assertFalse(node1.isFalse());
1428:       assertFalse(node1.isComma());
1429:       assertFalse(node1.isThis());
1430:       assertFalse(node1.isInc());
1431:       assertFalse(node1.isGetProp());
1432:       assertFalse(node1.isCase());
1433:       assertFalse(node1.isThrow());
1434:       assertFalse(node1.isInstanceOf());
1435:       assertFalse(node1.isWith());
1436:       assertFalse(node1.isIn());
1437:       assertFalse(node1.isNE());
1438:       assertFalse(node1.isDelProp());
1439:       assertFalse(node1.isExprResult());
1440:       assertFalse(node1.isBreak());
1441:       assertFalse(node1.isIf());
1442:       assertFalse(node1.isCast());
1443:       assertFalse(node1.isGetElem());
1444:       assertFalse(node1.isAssign());
1445:       assertFalse(node1.isFunction());
1446:       assertFalse(node1.isDec());
1447:       assertFalse(node1.isTypeOf());
1448:       assertFalse(node1.hasChildren());
1449:       assertEquals(40, node1.getType());
1450:       assertFalse(node1.isNot());
1451:       assertFalse(node1.isObjectLit());
1452:       assertFalse(node1.isContinue());
1453:       assertEquals((-1), node1.getSourcePosition());
1454:       assertFalse(node1.isDebugger());
1455:       assertFalse(node1.isAnd());
1456:       assertFalse(node1.isVar());
1457:       assertFalse(node1.isCall());
1458:       assertFalse(node1.isAdd());
1459:       assertFalse(node1.isSetterDef());
1460:       assertTrue(node1.isString());
1461:       assertFalse(node1.isBlock());
1462:       assertFalse(node1.isNew());
1463:       assertFalse(node1.isDo());
1464:       assertFalse(node1.isWhile());
1465:       assertFalse(node1.isReturn());
1466:       assertEquals((-1), node1.getLineno());
1467:       assertFalse(node1.isOr());
1468:       assertFalse(node1.isCatch());
1469:       assertFalse(node1.hasMoreThanOneChild());
1470:       assertFalse(node1.isNull());
1471:       assertFalse(node1.isTrue());
1472:       assertFalse(node1.isName());
1473:       assertFalse(node1.isVoid());
1474:       assertFalse(node1.hasOneChild());
1475:       assertFalse(node1.isArrayLit());
1476:       assertFalse(node1.isEmpty());
1477:       assertFalse(node1.isRegExp());
1478:       assertFalse(node1.isScript());
1479:       assertFalse(node1.isFor());
1480:       assertFalse(node1.isTry());
1481:       assertFalse(node1.isAssignAdd());
1482:       assertFalse(node1.isDefaultCase());
1483:       assertEquals(0, node1.getChildCount());
1484:       assertFalse(node1.isLabel());
1485:       assertFalse(node1.isNumber());
1486:       assertFalse(node1.isGetterDef());
1487:       assertEquals((-1), node1.getCharno());
1488:       assertFalse(node1.isStringKey());
1489:       assertFalse(node1.isLabelName());
1490:       assertFalse(node1.isParamList());
1491:       assertFalse(node1.isSwitch());
1492:       assertSame(node0, node1);
1493:       assertSame(node1, node0);
1494:       assertTrue(boolean4 == boolean1);
1495:       assertTrue(boolean4 == boolean2);
1496:       assertTrue(boolean4 == boolean0);
1497:       assertTrue(boolean4 == boolean3);
1498:       assertFalse(boolean4);
1499:       
1500:       boolean boolean5 = node1.isFunction();
1501:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1502:       assertEquals(43, Node.IS_CONSTANT_NAME);
1503:       assertEquals(8, Node.FLAG_NO_THROWS);
1504:       assertEquals(39, Node.EMPTY_BLOCK);
1505:       assertEquals(53, Node.INPUT_ID);
1506:       assertEquals(36, Node.QUOTED_PROP);
1507:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1508:       assertEquals(55, Node.INFERRED_FUNCTION);
1509:       assertEquals(57, Node.REFLECTED_OBJECT);
1510:       assertEquals(56, Node.CHANGE_TIME);
1511:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1512:       assertEquals(37, Node.OPT_ARG_NAME);
1513:       assertEquals(48, Node.DIRECTIVES);
1514:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1515:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1516:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1517:       assertEquals(4095, Node.COLUMN_MASK);
1518:       assertEquals(49, Node.DIRECT_EVAL);
1519:       assertEquals(30, Node.VAR_ARGS_NAME);
1520:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1521:       assertEquals(1, Node.DECR_FLAG);
1522:       assertEquals(57, Node.LAST_PROP);
1523:       assertEquals(32, Node.INCRDECR_PROP);
1524:       assertEquals(46, Node.IS_NAMESPACE);
1525:       assertEquals(12, Node.COLUMN_BITS);
1526:       assertEquals(54, Node.SLASH_V);
1527:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1528:       assertEquals(52, Node.LENGTH);
1529:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1530:       assertEquals(29, Node.JSDOC_INFO_PROP);
1531:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1532:       assertEquals(40, Node.ORIGINALNAME_PROP);
1533:       assertEquals(50, Node.FREE_CALL);
1534:       assertEquals(47, Node.IS_DISPATCHER);
1535:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1536:       assertEquals(2, Node.POST_FLAG);
1537:       assertEquals(49, Node.DIRECT_EVAL);
1538:       assertEquals(30, Node.VAR_ARGS_NAME);
1539:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1540:       assertEquals(1, Node.DECR_FLAG);
1541:       assertEquals(32, Node.INCRDECR_PROP);
1542:       assertEquals(46, Node.IS_NAMESPACE);
1543:       assertEquals(57, Node.LAST_PROP);
1544:       assertEquals(12, Node.COLUMN_BITS);
1545:       assertEquals(37, Node.OPT_ARG_NAME);
1546:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1547:       assertEquals(2, Node.POST_FLAG);
1548:       assertEquals(47, Node.IS_DISPATCHER);
1549:       assertEquals(57, Node.REFLECTED_OBJECT);
1550:       assertEquals(56, Node.CHANGE_TIME);
1551:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1552:       assertEquals(8, Node.FLAG_NO_THROWS);
1553:       assertEquals(39, Node.EMPTY_BLOCK);
1554:       assertEquals(36, Node.QUOTED_PROP);
1555:       assertEquals(52, Node.LENGTH);
1556:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1557:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1558:       assertEquals(29, Node.JSDOC_INFO_PROP);
1559:       assertEquals(53, Node.INPUT_ID);
1560:       assertEquals(55, Node.INFERRED_FUNCTION);
1561:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1562:       assertEquals(43, Node.IS_CONSTANT_NAME);
1563:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1564:       assertEquals(48, Node.DIRECTIVES);
1565:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1566:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1567:       assertEquals(4095, Node.COLUMN_MASK);
1568:       assertEquals(40, Node.ORIGINALNAME_PROP);
1569:       assertEquals(50, Node.FREE_CALL);
1570:       assertEquals(54, Node.SLASH_V);
1571:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1572:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1573:       assertFalse(node0.hasOneChild());
1574:       assertFalse(node0.isCast());
1575:       assertFalse(node0.isGetElem());
1576:       assertFalse(node0.isAssign());
1577:       assertEquals((-1), node0.getSourcePosition());
1578:       assertFalse(node0.isNumber());
1579:       assertFalse(node0.isExprResult());
1580:       assertFalse(node0.isLabelName());
1581:       assertFalse(node0.isAnd());
1582:       assertFalse(node0.isInstanceOf());
1583:       assertFalse(node0.isReturn());
1584:       assertEquals((-1), node0.getLineno());
1585:       assertFalse(node0.isNot());
1586:       assertFalse(node0.isObjectLit());
1587:       assertFalse(node0.isWith());
1588:       assertFalse(node0.hasMoreThanOneChild());
1589:       assertFalse(node0.isDec());
1590:       assertFalse(node0.isTypeOf());
1591:       assertFalse(node0.isScript());
1592:       assertFalse(node0.isComma());
1593:       assertFalse(node0.isThis());
1594:       assertFalse(node0.isGetProp());
1595:       assertFalse(node0.hasChildren());
1596:       assertTrue(node0.isString());
1597:       assertFalse(node0.isBlock());
1598:       assertFalse(node0.isWhile());
1599:       assertFalse(node0.isVar());
1600:       assertFalse(node0.isCall());
1601:       assertFalse(node0.isAdd());
1602:       assertFalse(node0.isNull());
1603:       assertFalse(node0.isBreak());
1604:       assertEquals((-1), node0.getCharno());
1605:       assertFalse(node0.isStringKey());
1606:       assertFalse(node0.isName());
1607:       assertFalse(node0.isParamList());
1608:       assertFalse(node0.isSwitch());
1609:       assertEquals(0, node0.getChildCount());
1610:       assertFalse(node0.isLabel());
1611:       assertFalse(node0.isOr());
1612:       assertFalse(node0.isNew());
1613:       assertFalse(node0.isDo());
1614:       assertFalse(node0.isAssignAdd());
1615:       assertFalse(node0.isDefaultCase());
1616:       assertFalse(node0.isArrayLit());
1617:       assertFalse(node0.isEmpty());
1618:       assertFalse(node0.isFunction());
1619:       assertFalse(node0.isNE());
1620:       assertFalse(node0.isDelProp());
1621:       assertFalse(node0.isGetterDef());
1622:       assertFalse(node0.isDebugger());
1623:       assertFalse(node0.isTrue());
1624:       assertFalse(node0.isVoid());
1625:       assertFalse(node0.isIf());
1626:       assertFalse(node0.isCatch());
1627:       assertFalse(node0.isRegExp());
1628:       assertFalse(node0.isCase());
1629:       assertFalse(node0.isFor());
1630:       assertFalse(node0.isTry());
1631:       assertFalse(node0.isHook());
1632:       assertFalse(node0.isFalse());
1633:       assertFalse(node0.isIn());
1634:       assertFalse(node0.isContinue());
1635:       assertFalse(node0.isInc());
1636:       assertFalse(node0.isSetterDef());
1637:       assertEquals(40, node0.getType());
1638:       assertFalse(node0.isThrow());
1639:       assertFalse(node1.isHook());
1640:       assertFalse(node1.isFalse());
1641:       assertFalse(node1.isComma());
1642:       assertFalse(node1.isThis());
1643:       assertFalse(node1.isInc());
1644:       assertFalse(node1.isGetProp());
1645:       assertFalse(node1.isCase());
1646:       assertFalse(node1.isThrow());
1647:       assertFalse(node1.isInstanceOf());
1648:       assertFalse(node1.isWith());
1649:       assertFalse(node1.isIn());
1650:       assertFalse(node1.isNE());
1651:       assertFalse(node1.isDelProp());
1652:       assertFalse(node1.isExprResult());
1653:       assertFalse(node1.isBreak());
1654:       assertFalse(node1.isIf());
1655:       assertFalse(node1.isCast());
1656:       assertFalse(node1.isGetElem());
1657:       assertFalse(node1.isAssign());
1658:       assertFalse(node1.isFunction());
1659:       assertFalse(node1.isDec());
1660:       assertFalse(node1.isTypeOf());
1661:       assertFalse(node1.hasChildren());
1662:       assertEquals(40, node1.getType());
1663:       assertFalse(node1.isNot());
1664:       assertFalse(node1.isObjectLit());
1665:       assertFalse(node1.isContinue());
1666:       assertEquals((-1), node1.getSourcePosition());
1667:       assertFalse(node1.isDebugger());
1668:       assertFalse(node1.isAnd());
1669:       assertFalse(node1.isVar());
1670:       assertFalse(node1.isCall());
1671:       assertFalse(node1.isAdd());
1672:       assertFalse(node1.isSetterDef());
1673:       assertTrue(node1.isString());
1674:       assertFalse(node1.isBlock());
1675:       assertFalse(node1.isNew());
1676:       assertFalse(node1.isDo());
1677:       assertFalse(node1.isWhile());
1678:       assertFalse(node1.isReturn());
1679:       assertEquals((-1), node1.getLineno());
1680:       assertFalse(node1.isOr());
1681:       assertFalse(node1.isCatch());
1682:       assertFalse(node1.hasMoreThanOneChild());
1683:       assertFalse(node1.isNull());
1684:       assertFalse(node1.isTrue());
1685:       assertFalse(node1.isName());
1686:       assertFalse(node1.isVoid());
1687:       assertFalse(node1.hasOneChild());
1688:       assertFalse(node1.isArrayLit());
1689:       assertFalse(node1.isEmpty());
1690:       assertFalse(node1.isRegExp());
1691:       assertFalse(node1.isScript());
1692:       assertFalse(node1.isFor());
1693:       assertFalse(node1.isTry());
1694:       assertFalse(node1.isAssignAdd());
1695:       assertFalse(node1.isDefaultCase());
1696:       assertEquals(0, node1.getChildCount());
1697:       assertFalse(node1.isLabel());
1698:       assertFalse(node1.isNumber());
1699:       assertFalse(node1.isGetterDef());
1700:       assertEquals((-1), node1.getCharno());
1701:       assertFalse(node1.isStringKey());
1702:       assertFalse(node1.isLabelName());
1703:       assertFalse(node1.isParamList());
1704:       assertFalse(node1.isSwitch());
1705:       assertSame(node0, node1);
1706:       assertSame(node1, node0);
1707:       assertTrue(boolean5 == boolean4);
1708:       assertTrue(boolean5 == boolean1);
1709:       assertTrue(boolean5 == boolean0);
1710:       assertTrue(boolean5 == boolean2);
1711:       assertTrue(boolean5 == boolean3);
1712:       assertFalse(boolean5);
1713:   }
1714: }
RegularFileObject[/tmp/EvoSuite_219_1628158931989/com/google/javascript/rhino/Node_219_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:22:12 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_219_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_219_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.common.collect.AbstractMapBasedMultimap$1",
120:       "com.google.common.collect.AbstractMapBasedMultimap$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.common.collect.AbstractMultimap$Values",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMultimap$Entries",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.Multimaps$Entries",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_219_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
267:       "com.google.javascript.rhino.SimpleErrorReporter",
268:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
269:       "com.google.common.base.Joiner",
270:       "com.google.common.base.Preconditions",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.jstype.ArrowType",
322:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
323:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
324:       "com.google.javascript.rhino.jstype.InstanceObjectType",
325:       "com.google.javascript.rhino.jstype.Property",
326:       "com.google.common.collect.Lists",
327:       "com.google.javascript.rhino.jstype.NoObjectType",
328:       "com.google.javascript.rhino.jstype.NoType",
329:       "com.google.javascript.rhino.jstype.NoResolvedType",
330:       "com.google.common.collect.SingletonImmutableList",
331:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
332:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
333:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
334:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
335:       "com.google.javascript.rhino.jstype.UnionType",
336:       "com.google.javascript.rhino.jstype.FunctionBuilder",
337:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.AbstractMultimap$Values",
341:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
342:       "com.google.common.collect.AbstractMapBasedMultimap$1",
343:       "com.google.common.collect.Multimaps$Entries",
344:       "com.google.common.collect.AbstractMultimap$Entries",
345:       "com.google.common.collect.AbstractMapBasedMultimap$2",
346:       "com.google.javascript.rhino.JSDocInfo",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.base.Objects",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
351:       "com.google.common.collect.Sets",
352:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
353:       "com.google.javascript.rhino.InputId",
354:       "com.google.common.collect.AbstractIndexedListIterator",
355:       "com.google.common.collect.Iterators$11",
356:       "com.google.common.collect.Iterables",
357:       "com.google.common.collect.Iterators$12",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.javascript.rhino.jstype.NamedType",
363:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
364:       "com.google.common.collect.Platform",
365:       "com.google.javascript.rhino.jstype.JSType$TypePair"
366:     );
367:   }
368: }

[MASTER] 10:22:12.337 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertNotNull(node0);

InputId inputId0 = node0.getInputId();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertNull(inputId0);

Iterable<Node> iterable0 = node0.children();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));

Node node1 = node0.getAncestor(0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isFunction());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertEquals(40, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertSame(node0, node1);
assertSame(node1, node0);
assertNotNull(node1);

boolean boolean0 = node0.isName();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertSame(node0, node1);
assertFalse(boolean0);

node0.setCharno(3300);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertSame(node0, node1);

boolean boolean1 = node1.isDelProp();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isFunction());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertEquals(40, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertSame(node0, node1);
assertSame(node1, node0);
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

boolean boolean2 = node0.isCast();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertSame(node0, node1);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);

boolean boolean3 = node1.isIf();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isFunction());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertEquals(40, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertSame(node0, node1);
assertSame(node1, node0);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(boolean3);

boolean boolean4 = node1.isBlock();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isFunction());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertEquals(40, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertSame(node0, node1);
assertSame(node1, node0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertFalse(boolean4);

boolean boolean5 = node1.isFunction();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isFunction());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertEquals(40, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertSame(node0, node1);
assertSame(node1, node0);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean3);
assertFalse(boolean5);


[MASTER] 10:22:30.114 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_400_1628158949940/com/google/javascript/rhino/Node_400_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_400_1628158949940/com/google/javascript/rhino/Node_400_tmp__ESTest_scaffolding.java]]
[MASTER] 10:22:30.114 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:22:30.114 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:22:30.114 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 352
[MASTER] 10:22:30.115 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_400_1628158949940/com/google/javascript/rhino/Node_400_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:22:29 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_400_tmp__ESTest extends Node_400_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = new Node(0);
23:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
24:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
25:       assertEquals(53, Node.INPUT_ID);
26:       assertEquals(29, Node.JSDOC_INFO_PROP);
27:       assertEquals(43, Node.IS_CONSTANT_NAME);
28:       assertEquals(56, Node.CHANGE_TIME);
29:       assertEquals(36, Node.QUOTED_PROP);
30:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
31:       assertEquals(46, Node.IS_NAMESPACE);
32:       assertEquals(55, Node.INFERRED_FUNCTION);
33:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
34:       assertEquals(39, Node.EMPTY_BLOCK);
35:       assertEquals(47, Node.IS_DISPATCHER);
36:       assertEquals(2, Node.POST_FLAG);
37:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
38:       assertEquals(57, Node.LAST_PROP);
39:       assertEquals(30, Node.VAR_ARGS_NAME);
40:       assertEquals(57, Node.REFLECTED_OBJECT);
41:       assertEquals(52, Node.LENGTH);
42:       assertEquals(40, Node.ORIGINALNAME_PROP);
43:       assertEquals(15, Node.NO_SIDE_EFFECTS);
44:       assertEquals(8, Node.FLAG_NO_THROWS);
45:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
46:       assertEquals(50, Node.FREE_CALL);
47:       assertEquals(54, Node.SLASH_V);
48:       assertEquals(51, Node.STATIC_SOURCE_FILE);
49:       assertEquals(12, Node.COLUMN_BITS);
50:       assertEquals(32, Node.INCRDECR_PROP);
51:       assertEquals(4095, Node.COLUMN_MASK);
52:       assertEquals(1, Node.DECR_FLAG);
53:       assertEquals(48, Node.DIRECTIVES);
54:       assertEquals(49, Node.DIRECT_EVAL);
55:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
56:       assertEquals(37, Node.OPT_ARG_NAME);
57:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
58:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
59:       assertFalse(node0.isOr());
60:       assertFalse(node0.isAssignAdd());
61:       assertFalse(node0.isLabel());
62:       assertEquals((-1), node0.getLineno());
63:       assertFalse(node0.isDec());
64:       assertEquals((-1), node0.getSourcePosition());
65:       assertFalse(node0.hasChildren());
66:       assertFalse(node0.isReturn());
67:       assertFalse(node0.isAssign());
68:       assertFalse(node0.isLabelName());
69:       assertFalse(node0.isContinue());
70:       assertFalse(node0.isTypeOf());
71:       assertFalse(node0.isCast());
72:       assertFalse(node0.hasMoreThanOneChild());
73:       assertFalse(node0.isGetElem());
74:       assertFalse(node0.isAdd());
75:       assertFalse(node0.isNew());
76:       assertFalse(node0.isVar());
77:       assertFalse(node0.isDo());
78:       assertFalse(node0.isSetterDef());
79:       assertEquals(0, node0.getChildCount());
80:       assertFalse(node0.isParamList());
81:       assertFalse(node0.isThis());
82:       assertFalse(node0.isWith());
83:       assertFalse(node0.isStringKey());
84:       assertFalse(node0.isRegExp());
85:       assertFalse(node0.isCatch());
86:       assertFalse(node0.isInstanceOf());
87:       assertFalse(node0.isTry());
88:       assertFalse(node0.isSwitch());
89:       assertEquals((-1), node0.getCharno());
90:       assertFalse(node0.isHook());
91:       assertFalse(node0.isBlock());
92:       assertFalse(node0.isFor());
93:       assertFalse(node0.isCase());
94:       assertFalse(node0.isGetterDef());
95:       assertFalse(node0.isNumber());
96:       assertFalse(node0.isScript());
97:       assertFalse(node0.hasOneChild());
98:       assertFalse(node0.isIn());
99:       assertFalse(node0.isNE());
100:       assertFalse(node0.isIf());
101:       assertFalse(node0.isDelProp());
102:       assertFalse(node0.isArrayLit());
103:       assertEquals(0, node0.getType());
104:       assertFalse(node0.isVoid());
105:       assertFalse(node0.isFunction());
106:       assertFalse(node0.isThrow());
107:       assertFalse(node0.isTrue());
108:       assertFalse(node0.isEmpty());
109:       assertFalse(node0.isDefaultCase());
110:       assertFalse(node0.isInc());
111:       assertFalse(node0.isComma());
112:       assertFalse(node0.isNull());
113:       assertFalse(node0.isAnd());
114:       assertFalse(node0.isFalse());
115:       assertFalse(node0.isName());
116:       assertFalse(node0.isBreak());
117:       assertFalse(node0.isExprResult());
118:       assertFalse(node0.isCall());
119:       assertFalse(node0.isDebugger());
120:       assertFalse(node0.isNot());
121:       assertFalse(node0.isString());
122:       assertFalse(node0.isWhile());
123:       assertFalse(node0.isObjectLit());
124:       assertFalse(node0.isGetProp());
125:       assertNotNull(node0);
126:       
127:       Node node1 = Node.newNumber((double) 42);
128:       assertEquals(1, Node.DECR_FLAG);
129:       assertEquals(30, Node.VAR_ARGS_NAME);
130:       assertEquals(49, Node.DIRECT_EVAL);
131:       assertEquals(51, Node.STATIC_SOURCE_FILE);
132:       assertEquals(57, Node.LAST_PROP);
133:       assertEquals(12, Node.COLUMN_BITS);
134:       assertEquals(46, Node.IS_NAMESPACE);
135:       assertEquals(54, Node.SLASH_V);
136:       assertEquals(52, Node.LENGTH);
137:       assertEquals(32, Node.INCRDECR_PROP);
138:       assertEquals(15, Node.NO_SIDE_EFFECTS);
139:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
140:       assertEquals(29, Node.JSDOC_INFO_PROP);
141:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
142:       assertEquals(56, Node.CHANGE_TIME);
143:       assertEquals(57, Node.REFLECTED_OBJECT);
144:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
145:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
146:       assertEquals(37, Node.OPT_ARG_NAME);
147:       assertEquals(48, Node.DIRECTIVES);
148:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
149:       assertEquals(4095, Node.COLUMN_MASK);
150:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
151:       assertEquals(43, Node.IS_CONSTANT_NAME);
152:       assertEquals(36, Node.QUOTED_PROP);
153:       assertEquals(8, Node.FLAG_NO_THROWS);
154:       assertEquals(55, Node.INFERRED_FUNCTION);
155:       assertEquals(39, Node.EMPTY_BLOCK);
156:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
157:       assertEquals(53, Node.INPUT_ID);
158:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
159:       assertEquals(50, Node.FREE_CALL);
160:       assertEquals(47, Node.IS_DISPATCHER);
161:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
162:       assertEquals(2, Node.POST_FLAG);
163:       assertEquals(40, Node.ORIGINALNAME_PROP);
164:       assertFalse(node1.isVar());
165:       assertFalse(node1.isCall());
166:       assertFalse(node1.isAdd());
167:       assertFalse(node1.isNull());
168:       assertFalse(node1.isName());
169:       assertFalse(node1.isStringKey());
170:       assertFalse(node1.isParamList());
171:       assertFalse(node1.hasMoreThanOneChild());
172:       assertFalse(node1.isCatch());
173:       assertEquals((-1), node1.getLineno());
174:       assertFalse(node1.isTypeOf());
175:       assertFalse(node1.isRegExp());
176:       assertFalse(node1.hasChildren());
177:       assertFalse(node1.isDec());
178:       assertEquals(39, node1.getType());
179:       assertFalse(node1.isTry());
180:       assertFalse(node1.isBlock());
181:       assertFalse(node1.isReturn());
182:       assertFalse(node1.isWhile());
183:       assertFalse(node1.isArrayLit());
184:       assertFalse(node1.hasOneChild());
185:       assertFalse(node1.isAssign());
186:       assertFalse(node1.isEmpty());
187:       assertFalse(node1.isGetElem());
188:       assertFalse(node1.isExprResult());
189:       assertFalse(node1.isTrue());
190:       assertFalse(node1.isDelProp());
191:       assertFalse(node1.isVoid());
192:       assertFalse(node1.isGetterDef());
193:       assertFalse(node1.isLabelName());
194:       assertEquals(0, node1.getChildCount());
195:       assertFalse(node1.isOr());
196:       assertFalse(node1.isNew());
197:       assertFalse(node1.isDo());
198:       assertFalse(node1.isAssignAdd());
199:       assertFalse(node1.isLabel());
200:       assertFalse(node1.isDefaultCase());
201:       assertFalse(node1.isHook());
202:       assertFalse(node1.isFalse());
203:       assertFalse(node1.isSwitch());
204:       assertFalse(node1.isBreak());
205:       assertEquals((-1), node1.getCharno());
206:       assertFalse(node1.isObjectLit());
207:       assertFalse(node1.isCase());
208:       assertTrue(node1.isNumber());
209:       assertFalse(node1.isWith());
210:       assertFalse(node1.isNot());
211:       assertFalse(node1.isInstanceOf());
212:       assertFalse(node1.isString());
213:       assertFalse(node1.isScript());
214:       assertFalse(node1.isThis());
215:       assertFalse(node1.isGetProp());
216:       assertFalse(node1.isComma());
217:       assertFalse(node1.isFor());
218:       assertFalse(node1.isCast());
219:       assertFalse(node1.isNE());
220:       assertEquals((-1), node1.getSourcePosition());
221:       assertFalse(node1.isDebugger());
222:       assertFalse(node1.isIf());
223:       assertFalse(node1.isAnd());
224:       assertFalse(node1.isIn());
225:       assertFalse(node1.isContinue());
226:       assertFalse(node1.isInc());
227:       assertFalse(node1.isFunction());
228:       assertFalse(node1.isSetterDef());
229:       assertFalse(node1.isThrow());
230:       assertFalse(node1.equals((Object)node0));
231:       assertNotNull(node1);
232:       
233:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
234:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
235:       assertEquals(0, node_SideEffectFlags0.valueOf());
236:       assertNotNull(node_SideEffectFlags0);
237:       
238:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
239:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
240:       assertEquals(0, node_SideEffectFlags0.valueOf());
241:       assertEquals(0, node_SideEffectFlags1.valueOf());
242:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
243:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
244:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
245:       assertNotNull(node_SideEffectFlags1);
246:       
247:       Iterable<Node> iterable0 = node1.children();
248:       assertEquals(1, Node.DECR_FLAG);
249:       assertEquals(30, Node.VAR_ARGS_NAME);
250:       assertEquals(49, Node.DIRECT_EVAL);
251:       assertEquals(51, Node.STATIC_SOURCE_FILE);
252:       assertEquals(57, Node.LAST_PROP);
253:       assertEquals(12, Node.COLUMN_BITS);
254:       assertEquals(46, Node.IS_NAMESPACE);
255:       assertEquals(54, Node.SLASH_V);
256:       assertEquals(52, Node.LENGTH);
257:       assertEquals(32, Node.INCRDECR_PROP);
258:       assertEquals(15, Node.NO_SIDE_EFFECTS);
259:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
260:       assertEquals(29, Node.JSDOC_INFO_PROP);
261:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
262:       assertEquals(56, Node.CHANGE_TIME);
263:       assertEquals(57, Node.REFLECTED_OBJECT);
264:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
265:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
266:       assertEquals(37, Node.OPT_ARG_NAME);
267:       assertEquals(48, Node.DIRECTIVES);
268:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
269:       assertEquals(4095, Node.COLUMN_MASK);
270:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
271:       assertEquals(43, Node.IS_CONSTANT_NAME);
272:       assertEquals(36, Node.QUOTED_PROP);
273:       assertEquals(8, Node.FLAG_NO_THROWS);
274:       assertEquals(55, Node.INFERRED_FUNCTION);
275:       assertEquals(39, Node.EMPTY_BLOCK);
276:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
277:       assertEquals(53, Node.INPUT_ID);
278:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
279:       assertEquals(50, Node.FREE_CALL);
280:       assertEquals(47, Node.IS_DISPATCHER);
281:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
282:       assertEquals(2, Node.POST_FLAG);
283:       assertEquals(40, Node.ORIGINALNAME_PROP);
284:       assertFalse(node1.isVar());
285:       assertFalse(node1.isCall());
286:       assertFalse(node1.isAdd());
287:       assertFalse(node1.isNull());
288:       assertFalse(node1.isName());
289:       assertFalse(node1.isStringKey());
290:       assertFalse(node1.isParamList());
291:       assertFalse(node1.hasMoreThanOneChild());
292:       assertFalse(node1.isCatch());
293:       assertEquals((-1), node1.getLineno());
294:       assertFalse(node1.isTypeOf());
295:       assertFalse(node1.isRegExp());
296:       assertFalse(node1.hasChildren());
297:       assertFalse(node1.isDec());
298:       assertEquals(39, node1.getType());
299:       assertFalse(node1.isTry());
300:       assertFalse(node1.isBlock());
301:       assertFalse(node1.isReturn());
302:       assertFalse(node1.isWhile());
303:       assertFalse(node1.isArrayLit());
304:       assertFalse(node1.hasOneChild());
305:       assertFalse(node1.isAssign());
306:       assertFalse(node1.isEmpty());
307:       assertFalse(node1.isGetElem());
308:       assertFalse(node1.isExprResult());
309:       assertFalse(node1.isTrue());
310:       assertFalse(node1.isDelProp());
311:       assertFalse(node1.isVoid());
312:       assertFalse(node1.isGetterDef());
313:       assertFalse(node1.isLabelName());
314:       assertEquals(0, node1.getChildCount());
315:       assertFalse(node1.isOr());
316:       assertFalse(node1.isNew());
317:       assertFalse(node1.isDo());
318:       assertFalse(node1.isAssignAdd());
319:       assertFalse(node1.isLabel());
320:       assertFalse(node1.isDefaultCase());
321:       assertFalse(node1.isHook());
322:       assertFalse(node1.isFalse());
323:       assertFalse(node1.isSwitch());
324:       assertFalse(node1.isBreak());
325:       assertEquals((-1), node1.getCharno());
326:       assertFalse(node1.isObjectLit());
327:       assertFalse(node1.isCase());
328:       assertTrue(node1.isNumber());
329:       assertFalse(node1.isWith());
330:       assertFalse(node1.isNot());
331:       assertFalse(node1.isInstanceOf());
332:       assertFalse(node1.isString());
333:       assertFalse(node1.isScript());
334:       assertFalse(node1.isThis());
335:       assertFalse(node1.isGetProp());
336:       assertFalse(node1.isComma());
337:       assertFalse(node1.isFor());
338:       assertFalse(node1.isCast());
339:       assertFalse(node1.isNE());
340:       assertEquals((-1), node1.getSourcePosition());
341:       assertFalse(node1.isDebugger());
342:       assertFalse(node1.isIf());
343:       assertFalse(node1.isAnd());
344:       assertFalse(node1.isIn());
345:       assertFalse(node1.isContinue());
346:       assertFalse(node1.isInc());
347:       assertFalse(node1.isFunction());
348:       assertFalse(node1.isSetterDef());
349:       assertFalse(node1.isThrow());
350:       assertFalse(node1.equals((Object)node0));
351:       assertNotNull(iterable0);
352:       assertFalse(iterable0.contains(node0));
353:       
354:       Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
355:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
356:       assertEquals(0, node_SideEffectFlags2.valueOf());
357:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
358:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
359:       assertNotNull(node_SideEffectFlags2);
360:       
361:       boolean boolean0 = node0.isSetterDef();
362:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
363:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
364:       assertEquals(53, Node.INPUT_ID);
365:       assertEquals(29, Node.JSDOC_INFO_PROP);
366:       assertEquals(43, Node.IS_CONSTANT_NAME);
367:       assertEquals(56, Node.CHANGE_TIME);
368:       assertEquals(36, Node.QUOTED_PROP);
369:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
370:       assertEquals(46, Node.IS_NAMESPACE);
371:       assertEquals(55, Node.INFERRED_FUNCTION);
372:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
373:       assertEquals(39, Node.EMPTY_BLOCK);
374:       assertEquals(47, Node.IS_DISPATCHER);
375:       assertEquals(2, Node.POST_FLAG);
376:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
377:       assertEquals(57, Node.LAST_PROP);
378:       assertEquals(30, Node.VAR_ARGS_NAME);
379:       assertEquals(57, Node.REFLECTED_OBJECT);
380:       assertEquals(52, Node.LENGTH);
381:       assertEquals(40, Node.ORIGINALNAME_PROP);
382:       assertEquals(15, Node.NO_SIDE_EFFECTS);
383:       assertEquals(8, Node.FLAG_NO_THROWS);
384:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
385:       assertEquals(50, Node.FREE_CALL);
386:       assertEquals(54, Node.SLASH_V);
387:       assertEquals(51, Node.STATIC_SOURCE_FILE);
388:       assertEquals(12, Node.COLUMN_BITS);
389:       assertEquals(32, Node.INCRDECR_PROP);
390:       assertEquals(4095, Node.COLUMN_MASK);
391:       assertEquals(1, Node.DECR_FLAG);
392:       assertEquals(48, Node.DIRECTIVES);
393:       assertEquals(49, Node.DIRECT_EVAL);
394:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
395:       assertEquals(37, Node.OPT_ARG_NAME);
396:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
397:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
398:       assertFalse(node0.isOr());
399:       assertFalse(node0.isAssignAdd());
400:       assertFalse(node0.isLabel());
401:       assertEquals((-1), node0.getLineno());
402:       assertFalse(node0.isDec());
403:       assertEquals((-1), node0.getSourcePosition());
404:       assertFalse(node0.hasChildren());
405:       assertFalse(node0.isReturn());
406:       assertFalse(node0.isAssign());
407:       assertFalse(node0.isLabelName());
408:       assertFalse(node0.isContinue());
409:       assertFalse(node0.isTypeOf());
410:       assertFalse(node0.isCast());
411:       assertFalse(node0.hasMoreThanOneChild());
412:       assertFalse(node0.isGetElem());
413:       assertFalse(node0.isAdd());
414:       assertFalse(node0.isNew());
415:       assertFalse(node0.isVar());
416:       assertFalse(node0.isDo());
417:       assertFalse(node0.isSetterDef());
418:       assertEquals(0, node0.getChildCount());
419:       assertFalse(node0.isParamList());
420:       assertFalse(node0.isThis());
421:       assertFalse(node0.isWith());
422:       assertFalse(node0.isStringKey());
423:       assertFalse(node0.isRegExp());
424:       assertFalse(node0.isCatch());
425:       assertFalse(node0.isInstanceOf());
426:       assertFalse(node0.isTry());
427:       assertFalse(node0.isSwitch());
428:       assertEquals((-1), node0.getCharno());
429:       assertFalse(node0.isHook());
430:       assertFalse(node0.isBlock());
431:       assertFalse(node0.isFor());
432:       assertFalse(node0.isCase());
433:       assertFalse(node0.isGetterDef());
434:       assertFalse(node0.isNumber());
435:       assertFalse(node0.isScript());
436:       assertFalse(node0.hasOneChild());
437:       assertFalse(node0.isIn());
438:       assertFalse(node0.isNE());
439:       assertFalse(node0.isIf());
440:       assertFalse(node0.isDelProp());
441:       assertFalse(node0.isArrayLit());
442:       assertEquals(0, node0.getType());
443:       assertFalse(node0.isVoid());
444:       assertFalse(node0.isFunction());
445:       assertFalse(node0.isThrow());
446:       assertFalse(node0.isTrue());
447:       assertFalse(node0.isEmpty());
448:       assertFalse(node0.isDefaultCase());
449:       assertFalse(node0.isInc());
450:       assertFalse(node0.isComma());
451:       assertFalse(node0.isNull());
452:       assertFalse(node0.isAnd());
453:       assertFalse(node0.isFalse());
454:       assertFalse(node0.isName());
455:       assertFalse(node0.isBreak());
456:       assertFalse(node0.isExprResult());
457:       assertFalse(node0.isCall());
458:       assertFalse(node0.isDebugger());
459:       assertFalse(node0.isNot());
460:       assertFalse(node0.isString());
461:       assertFalse(node0.isWhile());
462:       assertFalse(node0.isObjectLit());
463:       assertFalse(node0.isGetProp());
464:       assertFalse(node0.equals((Object)node1));
465:       assertFalse(boolean0);
466:       
467:       Node[] nodeArray0 = new Node[1];
468:       nodeArray0[0] = node0;
469:       boolean boolean1 = node0.isParamList();
470:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
471:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
472:       assertEquals(53, Node.INPUT_ID);
473:       assertEquals(29, Node.JSDOC_INFO_PROP);
474:       assertEquals(43, Node.IS_CONSTANT_NAME);
475:       assertEquals(56, Node.CHANGE_TIME);
476:       assertEquals(36, Node.QUOTED_PROP);
477:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
478:       assertEquals(46, Node.IS_NAMESPACE);
479:       assertEquals(55, Node.INFERRED_FUNCTION);
480:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
481:       assertEquals(39, Node.EMPTY_BLOCK);
482:       assertEquals(47, Node.IS_DISPATCHER);
483:       assertEquals(2, Node.POST_FLAG);
484:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
485:       assertEquals(57, Node.LAST_PROP);
486:       assertEquals(30, Node.VAR_ARGS_NAME);
487:       assertEquals(57, Node.REFLECTED_OBJECT);
488:       assertEquals(52, Node.LENGTH);
489:       assertEquals(40, Node.ORIGINALNAME_PROP);
490:       assertEquals(15, Node.NO_SIDE_EFFECTS);
491:       assertEquals(8, Node.FLAG_NO_THROWS);
492:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
493:       assertEquals(50, Node.FREE_CALL);
494:       assertEquals(54, Node.SLASH_V);
495:       assertEquals(51, Node.STATIC_SOURCE_FILE);
496:       assertEquals(12, Node.COLUMN_BITS);
497:       assertEquals(32, Node.INCRDECR_PROP);
498:       assertEquals(4095, Node.COLUMN_MASK);
499:       assertEquals(1, Node.DECR_FLAG);
500:       assertEquals(48, Node.DIRECTIVES);
501:       assertEquals(49, Node.DIRECT_EVAL);
502:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
503:       assertEquals(37, Node.OPT_ARG_NAME);
504:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
505:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
506:       assertFalse(node0.isOr());
507:       assertFalse(node0.isAssignAdd());
508:       assertFalse(node0.isLabel());
509:       assertEquals((-1), node0.getLineno());
510:       assertFalse(node0.isDec());
511:       assertEquals((-1), node0.getSourcePosition());
512:       assertFalse(node0.hasChildren());
513:       assertFalse(node0.isReturn());
514:       assertFalse(node0.isAssign());
515:       assertFalse(node0.isLabelName());
516:       assertFalse(node0.isContinue());
517:       assertFalse(node0.isTypeOf());
518:       assertFalse(node0.isCast());
519:       assertFalse(node0.hasMoreThanOneChild());
520:       assertFalse(node0.isGetElem());
521:       assertFalse(node0.isAdd());
522:       assertFalse(node0.isNew());
523:       assertFalse(node0.isVar());
524:       assertFalse(node0.isDo());
525:       assertFalse(node0.isSetterDef());
526:       assertEquals(0, node0.getChildCount());
527:       assertFalse(node0.isParamList());
528:       assertFalse(node0.isThis());
529:       assertFalse(node0.isWith());
530:       assertFalse(node0.isStringKey());
531:       assertFalse(node0.isRegExp());
532:       assertFalse(node0.isCatch());
533:       assertFalse(node0.isInstanceOf());
534:       assertFalse(node0.isTry());
535:       assertFalse(node0.isSwitch());
536:       assertEquals((-1), node0.getCharno());
537:       assertFalse(node0.isHook());
538:       assertFalse(node0.isBlock());
539:       assertFalse(node0.isFor());
540:       assertFalse(node0.isCase());
541:       assertFalse(node0.isGetterDef());
542:       assertFalse(node0.isNumber());
543:       assertFalse(node0.isScript());
544:       assertFalse(node0.hasOneChild());
545:       assertFalse(node0.isIn());
546:       assertFalse(node0.isNE());
547:       assertFalse(node0.isIf());
548:       assertFalse(node0.isDelProp());
549:       assertFalse(node0.isArrayLit());
550:       assertEquals(0, node0.getType());
551:       assertFalse(node0.isVoid());
552:       assertFalse(node0.isFunction());
553:       assertFalse(node0.isThrow());
554:       assertFalse(node0.isTrue());
555:       assertFalse(node0.isEmpty());
556:       assertFalse(node0.isDefaultCase());
557:       assertFalse(node0.isInc());
558:       assertFalse(node0.isComma());
559:       assertFalse(node0.isNull());
560:       assertFalse(node0.isAnd());
561:       assertFalse(node0.isFalse());
562:       assertFalse(node0.isName());
563:       assertFalse(node0.isBreak());
564:       assertFalse(node0.isExprResult());
565:       assertFalse(node0.isCall());
566:       assertFalse(node0.isDebugger());
567:       assertFalse(node0.isNot());
568:       assertFalse(node0.isString());
569:       assertFalse(node0.isWhile());
570:       assertFalse(node0.isObjectLit());
571:       assertFalse(node0.isGetProp());
572:       assertFalse(node0.equals((Object)node1));
573:       assertTrue(boolean1 == boolean0);
574:       assertFalse(boolean1);
575:       
576:       JSDocInfo jSDocInfo0 = new JSDocInfo();
577:       assertFalse(jSDocInfo0.hasModifies());
578:       assertFalse(jSDocInfo0.isConstructor());
579:       assertNull(jSDocInfo0.getDescription());
580:       assertFalse(jSDocInfo0.hasEnumParameterType());
581:       assertFalse(jSDocInfo0.hasThisType());
582:       assertFalse(jSDocInfo0.containsDeclaration());
583:       assertFalse(jSDocInfo0.hasTypedefType());
584:       assertFalse(jSDocInfo0.isExport());
585:       assertNull(jSDocInfo0.getFileOverview());
586:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
587:       assertNull(jSDocInfo0.getMeaning());
588:       assertFalse(jSDocInfo0.isNoAlias());
589:       assertFalse(jSDocInfo0.hasReturnType());
590:       assertNull(jSDocInfo0.getVisibility());
591:       assertFalse(jSDocInfo0.isConstant());
592:       assertFalse(jSDocInfo0.isNoTypeCheck());
593:       assertFalse(jSDocInfo0.isWizaction());
594:       assertNull(jSDocInfo0.getVersion());
595:       assertFalse(jSDocInfo0.makesStructs());
596:       assertFalse(jSDocInfo0.isImplicitCast());
597:       assertEquals(0, jSDocInfo0.getParameterCount());
598:       assertFalse(jSDocInfo0.isOverride());
599:       assertFalse(jSDocInfo0.isDefine());
600:       assertFalse(jSDocInfo0.isIdGenerator());
601:       assertFalse(jSDocInfo0.isInterface());
602:       assertNull(jSDocInfo0.getDeprecationReason());
603:       assertNull(jSDocInfo0.getBlockDescription());
604:       assertFalse(jSDocInfo0.hasFileOverview());
605:       assertFalse(jSDocInfo0.isJaggerInject());
606:       assertFalse(jSDocInfo0.isNoSideEffects());
607:       assertFalse(jSDocInfo0.isMappedIdGenerator());
608:       assertFalse(jSDocInfo0.hasType());
609:       assertFalse(jSDocInfo0.makesDicts());
610:       assertFalse(jSDocInfo0.isJaggerModule());
611:       assertFalse(jSDocInfo0.isJavaDispatch());
612:       assertFalse(jSDocInfo0.isNoCompile());
613:       assertFalse(jSDocInfo0.isJaggerProvide());
614:       assertNull(jSDocInfo0.getOriginalCommentString());
615:       assertNull(jSDocInfo0.getLicense());
616:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
617:       assertFalse(jSDocInfo0.isStableIdGenerator());
618:       assertFalse(jSDocInfo0.shouldPreserveTry());
619:       assertNull(jSDocInfo0.getReturnDescription());
620:       assertFalse(jSDocInfo0.isNgInject());
621:       assertFalse(jSDocInfo0.hasBaseType());
622:       assertFalse(jSDocInfo0.isDisposes());
623:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
624:       assertEquals("JSDocInfo", jSDocInfo0.toString());
625:       assertFalse(jSDocInfo0.isExterns());
626:       assertFalse(jSDocInfo0.isHidden());
627:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
628:       assertFalse(jSDocInfo0.isNoShadow());
629:       assertNull(jSDocInfo0.getLendsName());
630:       assertFalse(jSDocInfo0.isDeprecated());
631:       assertFalse(jSDocInfo0.isExpose());
632:       assertNotNull(jSDocInfo0);
633:       
634:       Node node2 = new Node(1, nodeArray0);
635:       assertEquals(36, Node.QUOTED_PROP);
636:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
637:       assertEquals(4095, Node.COLUMN_MASK);
638:       assertEquals(53, Node.INPUT_ID);
639:       assertEquals(55, Node.INFERRED_FUNCTION);
640:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
641:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
642:       assertEquals(37, Node.OPT_ARG_NAME);
643:       assertEquals(8, Node.FLAG_NO_THROWS);
644:       assertEquals(39, Node.EMPTY_BLOCK);
645:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
646:       assertEquals(29, Node.JSDOC_INFO_PROP);
647:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
648:       assertEquals(52, Node.LENGTH);
649:       assertEquals(48, Node.DIRECTIVES);
650:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
651:       assertEquals(56, Node.CHANGE_TIME);
652:       assertEquals(57, Node.REFLECTED_OBJECT);
653:       assertEquals(15, Node.NO_SIDE_EFFECTS);
654:       assertEquals(57, Node.LAST_PROP);
655:       assertEquals(30, Node.VAR_ARGS_NAME);
656:       assertEquals(49, Node.DIRECT_EVAL);
657:       assertEquals(1, Node.DECR_FLAG);
658:       assertEquals(32, Node.INCRDECR_PROP);
659:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
660:       assertEquals(12, Node.COLUMN_BITS);
661:       assertEquals(47, Node.IS_DISPATCHER);
662:       assertEquals(2, Node.POST_FLAG);
663:       assertEquals(50, Node.FREE_CALL);
664:       assertEquals(40, Node.ORIGINALNAME_PROP);
665:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
666:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
667:       assertEquals(51, Node.STATIC_SOURCE_FILE);
668:       assertEquals(43, Node.IS_CONSTANT_NAME);
669:       assertEquals(46, Node.IS_NAMESPACE);
670:       assertEquals(54, Node.SLASH_V);
671:       assertFalse(node2.isFor());
672:       assertFalse(node2.isEmpty());
673:       assertTrue(node2.hasOneChild());
674:       assertFalse(node2.isArrayLit());
675:       assertFalse(node2.isIf());
676:       assertFalse(node2.isDelProp());
677:       assertFalse(node2.isNE());
678:       assertFalse(node2.isTrue());
679:       assertFalse(node2.isTry());
680:       assertFalse(node2.isDebugger());
681:       assertFalse(node2.isIn());
682:       assertFalse(node2.isGetterDef());
683:       assertFalse(node2.isCase());
684:       assertTrue(node2.hasChildren());
685:       assertFalse(node2.isVoid());
686:       assertEquals(1, node2.getChildCount());
687:       assertFalse(node2.isRegExp());
688:       assertFalse(node2.isCatch());
689:       assertFalse(node2.isStringKey());
690:       assertFalse(node2.isCall());
691:       assertFalse(node2.isName());
692:       assertFalse(node2.isBreak());
693:       assertFalse(node2.isHook());
694:       assertEquals(0, node2.getSourcePosition());
695:       assertFalse(node2.isVar());
696:       assertFalse(node2.isNull());
697:       assertFalse(node2.isParamList());
698:       assertFalse(node2.isNew());
699:       assertFalse(node2.isAdd());
700:       assertFalse(node2.isDo());
701:       assertFalse(node2.isDefaultCase());
702:       assertFalse(node2.isAssignAdd());
703:       assertFalse(node2.isSwitch());
704:       assertEquals(1, node2.getType());
705:       assertFalse(node2.isLabel());
706:       assertFalse(node2.isGetElem());
707:       assertFalse(node2.isLabelName());
708:       assertFalse(node2.isAssign());
709:       assertFalse(node2.isOr());
710:       assertEquals(0, node2.getCharno());
711:       assertFalse(node2.isNumber());
712:       assertFalse(node2.isScript());
713:       assertFalse(node2.isWhile());
714:       assertFalse(node2.isExprResult());
715:       assertFalse(node2.isBlock());
716:       assertFalse(node2.isComma());
717:       assertFalse(node2.isThis());
718:       assertFalse(node2.isReturn());
719:       assertFalse(node2.isInstanceOf());
720:       assertFalse(node2.isDec());
721:       assertFalse(node2.isTypeOf());
722:       assertFalse(node2.isWith());
723:       assertFalse(node2.hasMoreThanOneChild());
724:       assertFalse(node2.isThrow());
725:       assertFalse(node2.isFalse());
726:       assertFalse(node2.isGetProp());
727:       assertFalse(node2.isInc());
728:       assertFalse(node2.isSetterDef());
729:       assertFalse(node2.isString());
730:       assertFalse(node2.isNot());
731:       assertFalse(node2.isObjectLit());
732:       assertFalse(node2.isAnd());
733:       assertEquals(0, node2.getLineno());
734:       assertFalse(node2.isCast());
735:       assertFalse(node2.isFunction());
736:       assertFalse(node2.isContinue());
737:       assertFalse(node2.equals((Object)node0));
738:       assertFalse(node2.equals((Object)node1));
739:       assertNotNull(node2);
740:       assertEquals(1, nodeArray0.length);
741:       
742:       boolean boolean2 = node0.isUnscopedQualifiedName();
743:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
744:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
745:       assertEquals(53, Node.INPUT_ID);
746:       assertEquals(29, Node.JSDOC_INFO_PROP);
747:       assertEquals(43, Node.IS_CONSTANT_NAME);
748:       assertEquals(56, Node.CHANGE_TIME);
749:       assertEquals(36, Node.QUOTED_PROP);
750:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
751:       assertEquals(46, Node.IS_NAMESPACE);
752:       assertEquals(55, Node.INFERRED_FUNCTION);
753:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
754:       assertEquals(39, Node.EMPTY_BLOCK);
755:       assertEquals(47, Node.IS_DISPATCHER);
756:       assertEquals(2, Node.POST_FLAG);
757:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
758:       assertEquals(57, Node.LAST_PROP);
759:       assertEquals(30, Node.VAR_ARGS_NAME);
760:       assertEquals(57, Node.REFLECTED_OBJECT);
761:       assertEquals(52, Node.LENGTH);
762:       assertEquals(40, Node.ORIGINALNAME_PROP);
763:       assertEquals(15, Node.NO_SIDE_EFFECTS);
764:       assertEquals(8, Node.FLAG_NO_THROWS);
765:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
766:       assertEquals(50, Node.FREE_CALL);
767:       assertEquals(54, Node.SLASH_V);
768:       assertEquals(51, Node.STATIC_SOURCE_FILE);
769:       assertEquals(12, Node.COLUMN_BITS);
770:       assertEquals(32, Node.INCRDECR_PROP);
771:       assertEquals(4095, Node.COLUMN_MASK);
772:       assertEquals(1, Node.DECR_FLAG);
773:       assertEquals(48, Node.DIRECTIVES);
774:       assertEquals(49, Node.DIRECT_EVAL);
775:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
776:       assertEquals(37, Node.OPT_ARG_NAME);
777:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
778:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
779:       assertFalse(node0.isOr());
780:       assertFalse(node0.isAssignAdd());
781:       assertFalse(node0.isLabel());
782:       assertEquals((-1), node0.getLineno());
783:       assertFalse(node0.isDec());
784:       assertEquals((-1), node0.getSourcePosition());
785:       assertFalse(node0.hasChildren());
786:       assertFalse(node0.isReturn());
787:       assertFalse(node0.isAssign());
788:       assertFalse(node0.isLabelName());
789:       assertFalse(node0.isContinue());
790:       assertFalse(node0.isTypeOf());
791:       assertFalse(node0.isCast());
792:       assertFalse(node0.hasMoreThanOneChild());
793:       assertFalse(node0.isGetElem());
794:       assertFalse(node0.isAdd());
795:       assertFalse(node0.isNew());
796:       assertFalse(node0.isVar());
797:       assertFalse(node0.isDo());
798:       assertFalse(node0.isSetterDef());
799:       assertEquals(0, node0.getChildCount());
800:       assertFalse(node0.isParamList());
801:       assertFalse(node0.isThis());
802:       assertFalse(node0.isWith());
803:       assertFalse(node0.isStringKey());
804:       assertFalse(node0.isRegExp());
805:       assertFalse(node0.isCatch());
806:       assertFalse(node0.isInstanceOf());
807:       assertFalse(node0.isTry());
808:       assertFalse(node0.isSwitch());
809:       assertEquals((-1), node0.getCharno());
810:       assertFalse(node0.isHook());
811:       assertFalse(node0.isBlock());
812:       assertFalse(node0.isFor());
813:       assertFalse(node0.isCase());
814:       assertFalse(node0.isGetterDef());
815:       assertFalse(node0.isNumber());
816:       assertFalse(node0.isScript());
817:       assertFalse(node0.hasOneChild());
818:       assertFalse(node0.isIn());
819:       assertFalse(node0.isNE());
820:       assertFalse(node0.isIf());
821:       assertFalse(node0.isDelProp());
822:       assertFalse(node0.isArrayLit());
823:       assertEquals(0, node0.getType());
824:       assertFalse(node0.isVoid());
825:       assertFalse(node0.isFunction());
826:       assertFalse(node0.isThrow());
827:       assertFalse(node0.isTrue());
828:       assertFalse(node0.isEmpty());
829:       assertFalse(node0.isDefaultCase());
830:       assertFalse(node0.isInc());
831:       assertFalse(node0.isComma());
832:       assertFalse(node0.isNull());
833:       assertFalse(node0.isAnd());
834:       assertFalse(node0.isFalse());
835:       assertFalse(node0.isName());
836:       assertFalse(node0.isBreak());
837:       assertFalse(node0.isExprResult());
838:       assertFalse(node0.isCall());
839:       assertFalse(node0.isDebugger());
840:       assertFalse(node0.isNot());
841:       assertFalse(node0.isString());
842:       assertFalse(node0.isWhile());
843:       assertFalse(node0.isObjectLit());
844:       assertFalse(node0.isGetProp());
845:       assertNotSame(node0, node2);
846:       assertFalse(node0.equals((Object)node1));
847:       assertFalse(node0.equals((Object)node2));
848:       assertTrue(boolean2 == boolean1);
849:       assertTrue(boolean2 == boolean0);
850:       assertFalse(boolean2);
851:       
852:       Node node3 = node0.removeFirstChild();
853:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
854:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
855:       assertEquals(53, Node.INPUT_ID);
856:       assertEquals(29, Node.JSDOC_INFO_PROP);
857:       assertEquals(43, Node.IS_CONSTANT_NAME);
858:       assertEquals(56, Node.CHANGE_TIME);
859:       assertEquals(36, Node.QUOTED_PROP);
860:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
861:       assertEquals(46, Node.IS_NAMESPACE);
862:       assertEquals(55, Node.INFERRED_FUNCTION);
863:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
864:       assertEquals(39, Node.EMPTY_BLOCK);
865:       assertEquals(47, Node.IS_DISPATCHER);
866:       assertEquals(2, Node.POST_FLAG);
867:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
868:       assertEquals(57, Node.LAST_PROP);
869:       assertEquals(30, Node.VAR_ARGS_NAME);
870:       assertEquals(57, Node.REFLECTED_OBJECT);
871:       assertEquals(52, Node.LENGTH);
872:       assertEquals(40, Node.ORIGINALNAME_PROP);
873:       assertEquals(15, Node.NO_SIDE_EFFECTS);
874:       assertEquals(8, Node.FLAG_NO_THROWS);
875:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
876:       assertEquals(50, Node.FREE_CALL);
877:       assertEquals(54, Node.SLASH_V);
878:       assertEquals(51, Node.STATIC_SOURCE_FILE);
879:       assertEquals(12, Node.COLUMN_BITS);
880:       assertEquals(32, Node.INCRDECR_PROP);
881:       assertEquals(4095, Node.COLUMN_MASK);
882:       assertEquals(1, Node.DECR_FLAG);
883:       assertEquals(48, Node.DIRECTIVES);
884:       assertEquals(49, Node.DIRECT_EVAL);
885:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
886:       assertEquals(37, Node.OPT_ARG_NAME);
887:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
888:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
889:       assertFalse(node0.isOr());
890:       assertFalse(node0.isAssignAdd());
891:       assertFalse(node0.isLabel());
892:       assertEquals((-1), node0.getLineno());
893:       assertFalse(node0.isDec());
894:       assertEquals((-1), node0.getSourcePosition());
895:       assertFalse(node0.hasChildren());
896:       assertFalse(node0.isReturn());
897:       assertFalse(node0.isAssign());
898:       assertFalse(node0.isLabelName());
899:       assertFalse(node0.isContinue());
900:       assertFalse(node0.isTypeOf());
901:       assertFalse(node0.isCast());
902:       assertFalse(node0.hasMoreThanOneChild());
903:       assertFalse(node0.isGetElem());
904:       assertFalse(node0.isAdd());
905:       assertFalse(node0.isNew());
906:       assertFalse(node0.isVar());
907:       assertFalse(node0.isDo());
908:       assertFalse(node0.isSetterDef());
909:       assertEquals(0, node0.getChildCount());
910:       assertFalse(node0.isParamList());
911:       assertFalse(node0.isThis());
912:       assertFalse(node0.isWith());
913:       assertFalse(node0.isStringKey());
914:       assertFalse(node0.isRegExp());
915:       assertFalse(node0.isCatch());
916:       assertFalse(node0.isInstanceOf());
917:       assertFalse(node0.isTry());
918:       assertFalse(node0.isSwitch());
919:       assertEquals((-1), node0.getCharno());
920:       assertFalse(node0.isHook());
921:       assertFalse(node0.isBlock());
922:       assertFalse(node0.isFor());
923:       assertFalse(node0.isCase());
924:       assertFalse(node0.isGetterDef());
925:       assertFalse(node0.isNumber());
926:       assertFalse(node0.isScript());
927:       assertFalse(node0.hasOneChild());
928:       assertFalse(node0.isIn());
929:       assertFalse(node0.isNE());
930:       assertFalse(node0.isIf());
931:       assertFalse(node0.isDelProp());
932:       assertFalse(node0.isArrayLit());
933:       assertEquals(0, node0.getType());
934:       assertFalse(node0.isVoid());
935:       assertFalse(node0.isFunction());
936:       assertFalse(node0.isThrow());
937:       assertFalse(node0.isTrue());
938:       assertFalse(node0.isEmpty());
939:       assertFalse(node0.isDefaultCase());
940:       assertFalse(node0.isInc());
941:       assertFalse(node0.isComma());
942:       assertFalse(node0.isNull());
943:       assertFalse(node0.isAnd());
944:       assertFalse(node0.isFalse());
945:       assertFalse(node0.isName());
946:       assertFalse(node0.isBreak());
947:       assertFalse(node0.isExprResult());
948:       assertFalse(node0.isCall());
949:       assertFalse(node0.isDebugger());
950:       assertFalse(node0.isNot());
951:       assertFalse(node0.isString());
952:       assertFalse(node0.isWhile());
953:       assertFalse(node0.isObjectLit());
954:       assertFalse(node0.isGetProp());
955:       assertNotSame(node0, node2);
956:       assertFalse(node0.equals((Object)node1));
957:       assertFalse(node0.equals((Object)node2));
958:       assertNull(node3);
959:       
960:       Node node4 = node0.setJSDocInfo(jSDocInfo0);
961:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
962:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
963:       assertEquals(53, Node.INPUT_ID);
964:       assertEquals(29, Node.JSDOC_INFO_PROP);
965:       assertEquals(43, Node.IS_CONSTANT_NAME);
966:       assertEquals(56, Node.CHANGE_TIME);
967:       assertEquals(36, Node.QUOTED_PROP);
968:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
969:       assertEquals(46, Node.IS_NAMESPACE);
970:       assertEquals(55, Node.INFERRED_FUNCTION);
971:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
972:       assertEquals(39, Node.EMPTY_BLOCK);
973:       assertEquals(47, Node.IS_DISPATCHER);
974:       assertEquals(2, Node.POST_FLAG);
975:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
976:       assertEquals(57, Node.LAST_PROP);
977:       assertEquals(30, Node.VAR_ARGS_NAME);
978:       assertEquals(57, Node.REFLECTED_OBJECT);
979:       assertEquals(52, Node.LENGTH);
980:       assertEquals(40, Node.ORIGINALNAME_PROP);
981:       assertEquals(15, Node.NO_SIDE_EFFECTS);
982:       assertEquals(8, Node.FLAG_NO_THROWS);
983:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
984:       assertEquals(50, Node.FREE_CALL);
985:       assertEquals(54, Node.SLASH_V);
986:       assertEquals(51, Node.STATIC_SOURCE_FILE);
987:       assertEquals(12, Node.COLUMN_BITS);
988:       assertEquals(32, Node.INCRDECR_PROP);
989:       assertEquals(4095, Node.COLUMN_MASK);
990:       assertEquals(1, Node.DECR_FLAG);
991:       assertEquals(48, Node.DIRECTIVES);
992:       assertEquals(49, Node.DIRECT_EVAL);
993:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
994:       assertEquals(37, Node.OPT_ARG_NAME);
995:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
996:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
997:       assertEquals(15, Node.NO_SIDE_EFFECTS);
998:       assertEquals(57, Node.LAST_PROP);
999:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1000:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1001:       assertEquals(30, Node.VAR_ARGS_NAME);
1002:       assertEquals(57, Node.REFLECTED_OBJECT);
1003:       assertEquals(46, Node.IS_NAMESPACE);
1004:       assertEquals(54, Node.SLASH_V);
1005:       assertEquals(40, Node.ORIGINALNAME_PROP);
1006:       assertEquals(37, Node.OPT_ARG_NAME);
1007:       assertEquals(49, Node.DIRECT_EVAL);
1008:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1009:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1010:       assertEquals(50, Node.FREE_CALL);
1011:       assertEquals(32, Node.INCRDECR_PROP);
1012:       assertEquals(12, Node.COLUMN_BITS);
1013:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1014:       assertEquals(1, Node.DECR_FLAG);
1015:       assertEquals(43, Node.IS_CONSTANT_NAME);
1016:       assertEquals(36, Node.QUOTED_PROP);
1017:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1018:       assertEquals(4095, Node.COLUMN_MASK);
1019:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1020:       assertEquals(48, Node.DIRECTIVES);
1021:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1022:       assertEquals(47, Node.IS_DISPATCHER);
1023:       assertEquals(56, Node.CHANGE_TIME);
1024:       assertEquals(29, Node.JSDOC_INFO_PROP);
1025:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1026:       assertEquals(8, Node.FLAG_NO_THROWS);
1027:       assertEquals(2, Node.POST_FLAG);
1028:       assertEquals(52, Node.LENGTH);
1029:       assertEquals(53, Node.INPUT_ID);
1030:       assertEquals(55, Node.INFERRED_FUNCTION);
1031:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1032:       assertEquals(39, Node.EMPTY_BLOCK);
1033:       assertFalse(node0.isOr());
1034:       assertFalse(node0.isAssignAdd());
1035:       assertFalse(node0.isLabel());
1036:       assertEquals((-1), node0.getLineno());
1037:       assertFalse(node0.isDec());
1038:       assertEquals((-1), node0.getSourcePosition());
1039:       assertFalse(node0.hasChildren());
1040:       assertFalse(node0.isReturn());
1041:       assertFalse(node0.isAssign());
1042:       assertFalse(node0.isLabelName());
1043:       assertFalse(node0.isContinue());
1044:       assertFalse(node0.isTypeOf());
1045:       assertFalse(node0.isCast());
1046:       assertFalse(node0.hasMoreThanOneChild());
1047:       assertFalse(node0.isGetElem());
1048:       assertFalse(node0.isAdd());
1049:       assertFalse(node0.isNew());
1050:       assertFalse(node0.isVar());
1051:       assertFalse(node0.isDo());
1052:       assertFalse(node0.isSetterDef());
1053:       assertEquals(0, node0.getChildCount());
1054:       assertFalse(node0.isParamList());
1055:       assertFalse(node0.isThis());
1056:       assertFalse(node0.isWith());
1057:       assertFalse(node0.isStringKey());
1058:       assertFalse(node0.isRegExp());
1059:       assertFalse(node0.isCatch());
1060:       assertFalse(node0.isInstanceOf());
1061:       assertFalse(node0.isTry());
1062:       assertFalse(node0.isSwitch());
1063:       assertEquals((-1), node0.getCharno());
1064:       assertFalse(node0.isHook());
1065:       assertFalse(node0.isBlock());
1066:       assertFalse(node0.isFor());
1067:       assertFalse(node0.isCase());
1068:       assertFalse(node0.isGetterDef());
1069:       assertFalse(node0.isNumber());
1070:       assertFalse(node0.isScript());
1071:       assertFalse(node0.hasOneChild());
1072:       assertFalse(node0.isIn());
1073:       assertFalse(node0.isNE());
1074:       assertFalse(node0.isIf());
1075:       assertFalse(node0.isDelProp());
1076:       assertFalse(node0.isArrayLit());
1077:       assertEquals(0, node0.getType());
1078:       assertFalse(node0.isVoid());
1079:       assertFalse(node0.isFunction());
1080:       assertFalse(node0.isThrow());
1081:       assertFalse(node0.isTrue());
1082:       assertFalse(node0.isEmpty());
1083:       assertFalse(node0.isDefaultCase());
1084:       assertFalse(node0.isInc());
1085:       assertFalse(node0.isComma());
1086:       assertFalse(node0.isNull());
1087:       assertFalse(node0.isAnd());
1088:       assertFalse(node0.isFalse());
1089:       assertFalse(node0.isName());
1090:       assertFalse(node0.isBreak());
1091:       assertFalse(node0.isExprResult());
1092:       assertFalse(node0.isCall());
1093:       assertFalse(node0.isDebugger());
1094:       assertFalse(node0.isNot());
1095:       assertFalse(node0.isString());
1096:       assertFalse(node0.isWhile());
1097:       assertFalse(node0.isObjectLit());
1098:       assertFalse(node0.isGetProp());
1099:       assertFalse(jSDocInfo0.hasModifies());
1100:       assertFalse(jSDocInfo0.isConstructor());
1101:       assertNull(jSDocInfo0.getDescription());
1102:       assertFalse(jSDocInfo0.hasEnumParameterType());
1103:       assertFalse(jSDocInfo0.hasThisType());
1104:       assertFalse(jSDocInfo0.containsDeclaration());
1105:       assertFalse(jSDocInfo0.hasTypedefType());
1106:       assertFalse(jSDocInfo0.isExport());
1107:       assertNull(jSDocInfo0.getFileOverview());
1108:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
1109:       assertNull(jSDocInfo0.getMeaning());
1110:       assertFalse(jSDocInfo0.isNoAlias());
1111:       assertFalse(jSDocInfo0.hasReturnType());
1112:       assertNull(jSDocInfo0.getVisibility());
1113:       assertFalse(jSDocInfo0.isConstant());
1114:       assertFalse(jSDocInfo0.isNoTypeCheck());
1115:       assertFalse(jSDocInfo0.isWizaction());
1116:       assertNull(jSDocInfo0.getVersion());
1117:       assertFalse(jSDocInfo0.makesStructs());
1118:       assertFalse(jSDocInfo0.isImplicitCast());
1119:       assertEquals(0, jSDocInfo0.getParameterCount());
1120:       assertFalse(jSDocInfo0.isOverride());
1121:       assertFalse(jSDocInfo0.isDefine());
1122:       assertFalse(jSDocInfo0.isIdGenerator());
1123:       assertFalse(jSDocInfo0.isInterface());
1124:       assertNull(jSDocInfo0.getDeprecationReason());
1125:       assertNull(jSDocInfo0.getBlockDescription());
1126:       assertFalse(jSDocInfo0.hasFileOverview());
1127:       assertFalse(jSDocInfo0.isJaggerInject());
1128:       assertFalse(jSDocInfo0.isNoSideEffects());
1129:       assertFalse(jSDocInfo0.isMappedIdGenerator());
1130:       assertFalse(jSDocInfo0.hasType());
1131:       assertFalse(jSDocInfo0.makesDicts());
1132:       assertFalse(jSDocInfo0.isJaggerModule());
1133:       assertFalse(jSDocInfo0.isJavaDispatch());
1134:       assertFalse(jSDocInfo0.isNoCompile());
1135:       assertFalse(jSDocInfo0.isJaggerProvide());
1136:       assertNull(jSDocInfo0.getOriginalCommentString());
1137:       assertNull(jSDocInfo0.getLicense());
1138:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1139:       assertFalse(jSDocInfo0.isStableIdGenerator());
1140:       assertFalse(jSDocInfo0.shouldPreserveTry());
1141:       assertNull(jSDocInfo0.getReturnDescription());
1142:       assertFalse(jSDocInfo0.isNgInject());
1143:       assertFalse(jSDocInfo0.hasBaseType());
1144:       assertFalse(jSDocInfo0.isDisposes());
1145:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1146:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1147:       assertFalse(jSDocInfo0.isExterns());
1148:       assertFalse(jSDocInfo0.isHidden());
1149:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1150:       assertFalse(jSDocInfo0.isNoShadow());
1151:       assertNull(jSDocInfo0.getLendsName());
1152:       assertFalse(jSDocInfo0.isDeprecated());
1153:       assertFalse(jSDocInfo0.isExpose());
1154:       assertFalse(node4.isStringKey());
1155:       assertFalse(node4.isCall());
1156:       assertFalse(node4.isName());
1157:       assertFalse(node4.isSetterDef());
1158:       assertFalse(node4.isNew());
1159:       assertFalse(node4.isBlock());
1160:       assertEquals(0, node4.getChildCount());
1161:       assertFalse(node4.isVar());
1162:       assertFalse(node4.isContinue());
1163:       assertFalse(node4.isWhile());
1164:       assertFalse(node4.isParamList());
1165:       assertFalse(node4.isNumber());
1166:       assertEquals((-1), node4.getSourcePosition());
1167:       assertFalse(node4.isDebugger());
1168:       assertFalse(node4.isGetElem());
1169:       assertFalse(node4.isEmpty());
1170:       assertFalse(node4.isDelProp());
1171:       assertFalse(node4.isLabelName());
1172:       assertFalse(node4.isArrayLit());
1173:       assertFalse(node4.isExprResult());
1174:       assertFalse(node4.isAssignAdd());
1175:       assertFalse(node4.hasChildren());
1176:       assertFalse(node4.isDec());
1177:       assertFalse(node4.isTypeOf());
1178:       assertFalse(node4.isAssign());
1179:       assertFalse(node4.isReturn());
1180:       assertFalse(node4.isLabel());
1181:       assertFalse(node4.isDefaultCase());
1182:       assertFalse(node4.isDo());
1183:       assertFalse(node4.isAdd());
1184:       assertFalse(node4.isTrue());
1185:       assertFalse(node4.isVoid());
1186:       assertFalse(node4.isNull());
1187:       assertFalse(node4.isOr());
1188:       assertFalse(node4.isThrow());
1189:       assertFalse(node4.isFalse());
1190:       assertFalse(node4.isBreak());
1191:       assertEquals(0, node4.getType());
1192:       assertFalse(node4.isHook());
1193:       assertFalse(node4.isComma());
1194:       assertFalse(node4.isThis());
1195:       assertFalse(node4.isObjectLit());
1196:       assertFalse(node4.isAnd());
1197:       assertFalse(node4.isString());
1198:       assertFalse(node4.isScript());
1199:       assertFalse(node4.isCase());
1200:       assertFalse(node4.isGetProp());
1201:       assertFalse(node4.isSwitch());
1202:       assertFalse(node4.isGetterDef());
1203:       assertFalse(node4.isNot());
1204:       assertEquals((-1), node4.getCharno());
1205:       assertFalse(node4.isFor());
1206:       assertFalse(node4.isCast());
1207:       assertFalse(node4.isIf());
1208:       assertFalse(node4.hasOneChild());
1209:       assertFalse(node4.isFunction());
1210:       assertFalse(node4.isTry());
1211:       assertFalse(node4.isRegExp());
1212:       assertFalse(node4.isWith());
1213:       assertFalse(node4.hasMoreThanOneChild());
1214:       assertFalse(node4.isCatch());
1215:       assertFalse(node4.isInstanceOf());
1216:       assertFalse(node4.isInc());
1217:       assertEquals((-1), node4.getLineno());
1218:       assertFalse(node4.isNE());
1219:       assertFalse(node4.isIn());
1220:       assertNotSame(node0, node2);
1221:       assertSame(node0, node4);
1222:       assertSame(node4, node0);
1223:       assertNotSame(node4, node2);
1224:       assertFalse(node0.equals((Object)node1));
1225:       assertFalse(node0.equals((Object)node2));
1226:       assertFalse(node4.equals((Object)node1));
1227:       assertFalse(node4.equals((Object)node2));
1228:       assertNotNull(node4);
1229:       
1230:       boolean boolean3 = node2.isTypeOf();
1231:       assertEquals(36, Node.QUOTED_PROP);
1232:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1233:       assertEquals(4095, Node.COLUMN_MASK);
1234:       assertEquals(53, Node.INPUT_ID);
1235:       assertEquals(55, Node.INFERRED_FUNCTION);
1236:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1237:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1238:       assertEquals(37, Node.OPT_ARG_NAME);
1239:       assertEquals(8, Node.FLAG_NO_THROWS);
1240:       assertEquals(39, Node.EMPTY_BLOCK);
1241:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1242:       assertEquals(29, Node.JSDOC_INFO_PROP);
1243:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1244:       assertEquals(52, Node.LENGTH);
1245:       assertEquals(48, Node.DIRECTIVES);
1246:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1247:       assertEquals(56, Node.CHANGE_TIME);
1248:       assertEquals(57, Node.REFLECTED_OBJECT);
1249:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1250:       assertEquals(57, Node.LAST_PROP);
1251:       assertEquals(30, Node.VAR_ARGS_NAME);
1252:       assertEquals(49, Node.DIRECT_EVAL);
1253:       assertEquals(1, Node.DECR_FLAG);
1254:       assertEquals(32, Node.INCRDECR_PROP);
1255:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1256:       assertEquals(12, Node.COLUMN_BITS);
1257:       assertEquals(47, Node.IS_DISPATCHER);
1258:       assertEquals(2, Node.POST_FLAG);
1259:       assertEquals(50, Node.FREE_CALL);
1260:       assertEquals(40, Node.ORIGINALNAME_PROP);
1261:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1262:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1263:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1264:       assertEquals(43, Node.IS_CONSTANT_NAME);
1265:       assertEquals(46, Node.IS_NAMESPACE);
1266:       assertEquals(54, Node.SLASH_V);
1267:       assertFalse(node2.isFor());
1268:       assertFalse(node2.isEmpty());
1269:       assertTrue(node2.hasOneChild());
1270:       assertFalse(node2.isArrayLit());
1271:       assertFalse(node2.isIf());
1272:       assertFalse(node2.isDelProp());
1273:       assertFalse(node2.isNE());
1274:       assertFalse(node2.isTrue());
1275:       assertFalse(node2.isTry());
1276:       assertFalse(node2.isDebugger());
1277:       assertFalse(node2.isIn());
1278:       assertFalse(node2.isGetterDef());
1279:       assertFalse(node2.isCase());
1280:       assertTrue(node2.hasChildren());
1281:       assertFalse(node2.isVoid());
1282:       assertEquals(1, node2.getChildCount());
1283:       assertFalse(node2.isRegExp());
1284:       assertFalse(node2.isCatch());
1285:       assertFalse(node2.isStringKey());
1286:       assertFalse(node2.isCall());
1287:       assertFalse(node2.isName());
1288:       assertFalse(node2.isBreak());
1289:       assertFalse(node2.isHook());
1290:       assertEquals(0, node2.getSourcePosition());
1291:       assertFalse(node2.isVar());
1292:       assertFalse(node2.isNull());
1293:       assertFalse(node2.isParamList());
1294:       assertFalse(node2.isNew());
1295:       assertFalse(node2.isAdd());
1296:       assertFalse(node2.isDo());
1297:       assertFalse(node2.isDefaultCase());
1298:       assertFalse(node2.isAssignAdd());
1299:       assertFalse(node2.isSwitch());
1300:       assertEquals(1, node2.getType());
1301:       assertFalse(node2.isLabel());
1302:       assertFalse(node2.isGetElem());
1303:       assertFalse(node2.isLabelName());
1304:       assertFalse(node2.isAssign());
1305:       assertFalse(node2.isOr());
1306:       assertEquals(0, node2.getCharno());
1307:       assertFalse(node2.isNumber());
1308:       assertFalse(node2.isScript());
1309:       assertFalse(node2.isWhile());
1310:       assertFalse(node2.isExprResult());
1311:       assertFalse(node2.isBlock());
1312:       assertFalse(node2.isComma());
1313:       assertFalse(node2.isThis());
1314:       assertFalse(node2.isReturn());
1315:       assertFalse(node2.isInstanceOf());
1316:       assertFalse(node2.isDec());
1317:       assertFalse(node2.isTypeOf());
1318:       assertFalse(node2.isWith());
1319:       assertFalse(node2.hasMoreThanOneChild());
1320:       assertFalse(node2.isThrow());
1321:       assertFalse(node2.isFalse());
1322:       assertFalse(node2.isGetProp());
1323:       assertFalse(node2.isInc());
1324:       assertFalse(node2.isSetterDef());
1325:       assertFalse(node2.isString());
1326:       assertFalse(node2.isNot());
1327:       assertFalse(node2.isObjectLit());
1328:       assertFalse(node2.isAnd());
1329:       assertEquals(0, node2.getLineno());
1330:       assertFalse(node2.isCast());
1331:       assertFalse(node2.isFunction());
1332:       assertFalse(node2.isContinue());
1333:       assertNotSame(node2, node0);
1334:       assertNotSame(node2, node4);
1335:       assertFalse(node2.equals((Object)node0));
1336:       assertFalse(node2.equals((Object)node4));
1337:       assertFalse(node2.equals((Object)node1));
1338:       assertTrue(boolean3 == boolean1);
1339:       assertTrue(boolean3 == boolean0);
1340:       assertTrue(boolean3 == boolean2);
1341:       assertFalse(boolean3);
1342:       assertEquals(1, nodeArray0.length);
1343:       
1344:       // Undeclared exception!
1345:       try { 
1346:         node1.addChildToFront(node0);
1347:         fail("Expecting exception: IllegalArgumentException");
1348:       
1349:       } catch(IllegalArgumentException e) {
1350:          //
1351:          // no message in exception (getMessage() returned null)
1352:          //
1353:          verifyException("com.google.common.base.Preconditions", e);
1354:       }
1355:   }
1356: }
RegularFileObject[/tmp/EvoSuite_400_1628158949940/com/google/javascript/rhino/Node_400_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:22:30 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_400_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_400_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.common.collect.AbstractMapBasedMultimap$1",
120:       "com.google.common.collect.AbstractMapBasedMultimap$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.common.collect.AbstractMultimap$Values",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMultimap$Entries",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.Multimaps$Entries",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_400_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
267:       "com.google.javascript.rhino.SimpleErrorReporter",
268:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
269:       "com.google.common.base.Joiner",
270:       "com.google.common.base.Preconditions",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.jstype.ArrowType",
322:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
323:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
324:       "com.google.javascript.rhino.jstype.InstanceObjectType",
325:       "com.google.javascript.rhino.jstype.Property",
326:       "com.google.common.collect.Lists",
327:       "com.google.javascript.rhino.jstype.NoObjectType",
328:       "com.google.javascript.rhino.jstype.NoType",
329:       "com.google.javascript.rhino.jstype.NoResolvedType",
330:       "com.google.common.collect.SingletonImmutableList",
331:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
332:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
333:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
334:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
335:       "com.google.javascript.rhino.jstype.UnionType",
336:       "com.google.javascript.rhino.jstype.FunctionBuilder",
337:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.AbstractMultimap$Values",
341:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
342:       "com.google.common.collect.AbstractMapBasedMultimap$1",
343:       "com.google.common.collect.Multimaps$Entries",
344:       "com.google.common.collect.AbstractMultimap$Entries",
345:       "com.google.common.collect.AbstractMapBasedMultimap$2",
346:       "com.google.javascript.rhino.JSDocInfo",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.base.Objects",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
351:       "com.google.common.collect.Sets",
352:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
353:       "com.google.javascript.rhino.InputId",
354:       "com.google.common.collect.AbstractIndexedListIterator",
355:       "com.google.common.collect.Iterators$11",
356:       "com.google.common.collect.Iterables",
357:       "com.google.common.collect.Iterators$12",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.javascript.rhino.jstype.NamedType",
363:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
364:       "com.google.common.collect.Platform",
365:       "com.google.javascript.rhino.jstype.JSType$TypePair"
366:     );
367:   }
368: }

[MASTER] 10:22:30.149 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertNotNull(node0);

Node node1 = Node.newNumber((double) 42);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isTypeOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals(39, node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isFor());
assertFalse(node1.isCast());
assertFalse(node1.isNE());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isIf());
assertFalse(node1.isAnd());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);

Iterable<Node> iterable0 = node1.children();
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isTypeOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals(39, node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isFor());
assertFalse(node1.isCast());
assertFalse(node1.isNE());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isIf());
assertFalse(node1.isAnd());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.equals((Object)node0));
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));

Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
assertNotNull(node_SideEffectFlags2);

boolean boolean0 = node0.isSetterDef();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.equals((Object)node1));
assertFalse(boolean0);

Node[] nodeArray0 = new Node[1];
nodeArray0[0] = node0;
boolean boolean1 = node0.isParamList();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

JSDocInfo jSDocInfo0 = new JSDocInfo();
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isConstructor());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isExport());
assertNull(jSDocInfo0.getFileOverview());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasReturnType());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isWizaction());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isImplicitCast());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getDeprecationReason());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isJaggerProvide());
assertNull(jSDocInfo0.getOriginalCommentString());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isDisposes());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isHidden());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isNoShadow());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isExpose());
assertNotNull(jSDocInfo0);

Node node2 = new Node(1, nodeArray0);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertTrue(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertTrue(node2.hasChildren());
assertFalse(node2.isVoid());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isHook());
assertEquals(0, node2.getSourcePosition());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isSwitch());
assertEquals(1, node2.getType());
assertFalse(node2.isLabel());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertEquals(0, node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isWhile());
assertFalse(node2.isExprResult());
assertFalse(node2.isBlock());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isReturn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertEquals(0, node2.getLineno());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertEquals(1, nodeArray0.length);

boolean boolean2 = node0.isUnscopedQualifiedName();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertNotSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);

Node node3 = node0.removeFirstChild();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertNotSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertNull(node3);

Node node4 = node0.setJSDocInfo(jSDocInfo0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isContinue());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isConstructor());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isExport());
assertNull(jSDocInfo0.getFileOverview());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasReturnType());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isWizaction());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isImplicitCast());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getDeprecationReason());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isJaggerProvide());
assertNull(jSDocInfo0.getOriginalCommentString());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isDisposes());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isHidden());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isNoShadow());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isExpose());
assertFalse(node4.isStringKey());
assertFalse(node4.isCall());
assertFalse(node4.isName());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNew());
assertFalse(node4.isBlock());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isVar());
assertFalse(node4.isContinue());
assertFalse(node4.isWhile());
assertFalse(node4.isParamList());
assertFalse(node4.isNumber());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isDebugger());
assertFalse(node4.isGetElem());
assertFalse(node4.isEmpty());
assertFalse(node4.isDelProp());
assertFalse(node4.isLabelName());
assertFalse(node4.isArrayLit());
assertFalse(node4.isExprResult());
assertFalse(node4.isAssignAdd());
assertFalse(node4.hasChildren());
assertFalse(node4.isDec());
assertFalse(node4.isTypeOf());
assertFalse(node4.isAssign());
assertFalse(node4.isReturn());
assertFalse(node4.isLabel());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isDo());
assertFalse(node4.isAdd());
assertFalse(node4.isTrue());
assertFalse(node4.isVoid());
assertFalse(node4.isNull());
assertFalse(node4.isOr());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertFalse(node4.isBreak());
assertEquals(0, node4.getType());
assertFalse(node4.isHook());
assertFalse(node4.isComma());
assertFalse(node4.isThis());
assertFalse(node4.isObjectLit());
assertFalse(node4.isAnd());
assertFalse(node4.isString());
assertFalse(node4.isScript());
assertFalse(node4.isCase());
assertFalse(node4.isGetProp());
assertFalse(node4.isSwitch());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNot());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isFor());
assertFalse(node4.isCast());
assertFalse(node4.isIf());
assertFalse(node4.hasOneChild());
assertFalse(node4.isFunction());
assertFalse(node4.isTry());
assertFalse(node4.isRegExp());
assertFalse(node4.isWith());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isCatch());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isInc());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isNE());
assertFalse(node4.isIn());
assertNotSame(node0, node2);
assertSame(node0, node4);
assertSame(node4, node0);
assertNotSame(node4, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertNotNull(node4);

boolean boolean3 = node2.isTypeOf();
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertTrue(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertTrue(node2.hasChildren());
assertFalse(node2.isVoid());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isHook());
assertEquals(0, node2.getSourcePosition());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isSwitch());
assertEquals(1, node2.getType());
assertFalse(node2.isLabel());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertEquals(0, node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isWhile());
assertFalse(node2.isExprResult());
assertFalse(node2.isBlock());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isReturn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertEquals(0, node2.getLineno());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertNotSame(node2, node0);
assertNotSame(node2, node4);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3);
assertEquals(1, nodeArray0.length);

node1.addChildToFront(node0);

[MASTER] 10:22:53.117 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:22:53.394 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:22:53.604 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:22:53.833 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:22:54.028 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:22:54.859 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:22:55.044 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:22:55.223 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:22:55.420 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/12
* Done!

* Computation finished
