* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 19448
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2034603838
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:44:22.288 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:44:35.172 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 10:45:07.812 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 604s and 593 generations, 263329 statements, best individual has fitness: 2865.0
* Minimizing test suite
[MASTER] 10:55:50.412 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 853
* Number of covered goals: 807
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 714
* Number of covered goals: 621
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 101
* Number of covered goals: 101
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 89%
* Total number of goals: 530
* Number of covered goals: 473
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 48%
* Total number of goals: 4536
* Number of covered goals: 2169
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 714
* Number of covered goals: 576
* Generated 1064 tests with total length 10662
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:57:06.435 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.66745% of time used, but only 90/1064 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 16%
[MASTER] 10:57:26.391 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Compiling and checking tests
[MASTER] 10:57:38.840 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 12 seconds more than allowed.
[MASTER] 10:57:43.905 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_129_1628161063856/com/google/javascript/rhino/Node_129_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_129_1628161063856/com/google/javascript/rhino/Node_129_tmp__ESTest_scaffolding.java]]
[MASTER] 10:57:43.905 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:57:43.905 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:57:43.908 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 231
[MASTER] 10:57:43.909 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_129_1628161063856/com/google/javascript/rhino/Node_129_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:57:43 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.jstype.SimpleSourceFile;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_129_tmp__ESTest extends Node_129_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString("", 0, 132);
23:       assertNotNull(node0);
24:       assertEquals(4095, Node.COLUMN_MASK);
25:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
26:       assertEquals(55, Node.INFERRED_FUNCTION);
27:       assertEquals(36, Node.QUOTED_PROP);
28:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
29:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
30:       assertEquals(43, Node.IS_CONSTANT_NAME);
31:       assertEquals(48, Node.DIRECTIVES);
32:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
33:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
34:       assertEquals(50, Node.FREE_CALL);
35:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
36:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
37:       assertEquals(32, Node.INCRDECR_PROP);
38:       assertEquals(1, Node.DECR_FLAG);
39:       assertEquals(12, Node.COLUMN_BITS);
40:       assertEquals(46, Node.IS_NAMESPACE);
41:       assertEquals(30, Node.VAR_ARGS_NAME);
42:       assertEquals(51, Node.STATIC_SOURCE_FILE);
43:       assertEquals(2, Node.POST_FLAG);
44:       assertEquals(54, Node.SLASH_V);
45:       assertEquals(56, Node.CHANGE_TIME);
46:       assertEquals(49, Node.DIRECT_EVAL);
47:       assertEquals(37, Node.OPT_ARG_NAME);
48:       assertEquals(57, Node.REFLECTED_OBJECT);
49:       assertEquals(40, Node.ORIGINALNAME_PROP);
50:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
51:       assertEquals(52, Node.LENGTH);
52:       assertEquals(15, Node.NO_SIDE_EFFECTS);
53:       assertEquals(8, Node.FLAG_NO_THROWS);
54:       assertEquals(39, Node.EMPTY_BLOCK);
55:       assertEquals(57, Node.LAST_PROP);
56:       assertEquals(47, Node.IS_DISPATCHER);
57:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
58:       assertEquals(29, Node.JSDOC_INFO_PROP);
59:       assertEquals(53, Node.INPUT_ID);
60:       assertFalse(node0.isInstanceOf());
61:       assertFalse(node0.isAnd());
62:       assertFalse(node0.isGetProp());
63:       assertEquals(132, node0.getCharno());
64:       assertFalse(node0.isScript());
65:       assertFalse(node0.isObjectLit());
66:       assertFalse(node0.isNot());
67:       assertFalse(node0.isHook());
68:       assertFalse(node0.isExprResult());
69:       assertFalse(node0.isGetElem());
70:       assertFalse(node0.hasOneChild());
71:       assertFalse(node0.isBreak());
72:       assertFalse(node0.hasChildren());
73:       assertFalse(node0.isWith());
74:       assertFalse(node0.isThis());
75:       assertFalse(node0.isAssign());
76:       assertFalse(node0.isTypeOf());
77:       assertFalse(node0.isDec());
78:       assertFalse(node0.isComma());
79:       assertFalse(node0.isIn());
80:       assertFalse(node0.isReturn());
81:       assertFalse(node0.isIf());
82:       assertFalse(node0.isNE());
83:       assertFalse(node0.isCast());
84:       assertFalse(node0.isInc());
85:       assertEquals(40, node0.getType());
86:       assertFalse(node0.isThrow());
87:       assertFalse(node0.isContinue());
88:       assertFalse(node0.isFalse());
89:       assertFalse(node0.isFunction());
90:       assertFalse(node0.isCatch());
91:       assertFalse(node0.isSetterDef());
92:       assertEquals(0, node0.getLineno());
93:       assertFalse(node0.isNull());
94:       assertFalse(node0.isParamList());
95:       assertFalse(node0.isStringKey());
96:       assertFalse(node0.isDebugger());
97:       assertFalse(node0.isTrue());
98:       assertEquals(132, node0.getSourcePosition());
99:       assertFalse(node0.isVoid());
100:       assertFalse(node0.isCall());
101:       assertFalse(node0.isTry());
102:       assertTrue(node0.isString());
103:       assertFalse(node0.isName());
104:       assertFalse(node0.isWhile());
105:       assertFalse(node0.isFor());
106:       assertFalse(node0.hasMoreThanOneChild());
107:       assertFalse(node0.isBlock());
108:       assertFalse(node0.isRegExp());
109:       assertFalse(node0.isAssignAdd());
110:       assertFalse(node0.isDo());
111:       assertFalse(node0.isCase());
112:       assertFalse(node0.isGetterDef());
113:       assertFalse(node0.isDelProp());
114:       assertFalse(node0.isNumber());
115:       assertFalse(node0.isEmpty());
116:       assertFalse(node0.isOr());
117:       assertFalse(node0.isVar());
118:       assertFalse(node0.isAdd());
119:       assertFalse(node0.isSwitch());
120:       assertFalse(node0.isLabelName());
121:       assertFalse(node0.isArrayLit());
122:       assertFalse(node0.isNew());
123:       assertFalse(node0.isDefaultCase());
124:       assertFalse(node0.isLabel());
125:       assertEquals(0, node0.getChildCount());
126:       
127:       Iterable<Node> iterable0 = node0.children();
128:       assertNotNull(iterable0);
129:       assertEquals(4095, Node.COLUMN_MASK);
130:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
131:       assertEquals(55, Node.INFERRED_FUNCTION);
132:       assertEquals(36, Node.QUOTED_PROP);
133:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
134:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
135:       assertEquals(43, Node.IS_CONSTANT_NAME);
136:       assertEquals(48, Node.DIRECTIVES);
137:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
138:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
139:       assertEquals(50, Node.FREE_CALL);
140:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
141:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
142:       assertEquals(32, Node.INCRDECR_PROP);
143:       assertEquals(1, Node.DECR_FLAG);
144:       assertEquals(12, Node.COLUMN_BITS);
145:       assertEquals(46, Node.IS_NAMESPACE);
146:       assertEquals(30, Node.VAR_ARGS_NAME);
147:       assertEquals(51, Node.STATIC_SOURCE_FILE);
148:       assertEquals(2, Node.POST_FLAG);
149:       assertEquals(54, Node.SLASH_V);
150:       assertEquals(56, Node.CHANGE_TIME);
151:       assertEquals(49, Node.DIRECT_EVAL);
152:       assertEquals(37, Node.OPT_ARG_NAME);
153:       assertEquals(57, Node.REFLECTED_OBJECT);
154:       assertEquals(40, Node.ORIGINALNAME_PROP);
155:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
156:       assertEquals(52, Node.LENGTH);
157:       assertEquals(15, Node.NO_SIDE_EFFECTS);
158:       assertEquals(8, Node.FLAG_NO_THROWS);
159:       assertEquals(39, Node.EMPTY_BLOCK);
160:       assertEquals(57, Node.LAST_PROP);
161:       assertEquals(47, Node.IS_DISPATCHER);
162:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
163:       assertEquals(29, Node.JSDOC_INFO_PROP);
164:       assertEquals(53, Node.INPUT_ID);
165:       assertFalse(node0.isInstanceOf());
166:       assertFalse(node0.isAnd());
167:       assertFalse(node0.isGetProp());
168:       assertEquals(132, node0.getCharno());
169:       assertFalse(node0.isScript());
170:       assertFalse(node0.isObjectLit());
171:       assertFalse(node0.isNot());
172:       assertFalse(node0.isHook());
173:       assertFalse(node0.isExprResult());
174:       assertFalse(node0.isGetElem());
175:       assertFalse(node0.hasOneChild());
176:       assertFalse(node0.isBreak());
177:       assertFalse(node0.hasChildren());
178:       assertFalse(node0.isWith());
179:       assertFalse(node0.isThis());
180:       assertFalse(node0.isAssign());
181:       assertFalse(node0.isTypeOf());
182:       assertFalse(node0.isDec());
183:       assertFalse(node0.isComma());
184:       assertFalse(node0.isIn());
185:       assertFalse(node0.isReturn());
186:       assertFalse(node0.isIf());
187:       assertFalse(node0.isNE());
188:       assertFalse(node0.isCast());
189:       assertFalse(node0.isInc());
190:       assertEquals(40, node0.getType());
191:       assertFalse(node0.isThrow());
192:       assertFalse(node0.isContinue());
193:       assertFalse(node0.isFalse());
194:       assertFalse(node0.isFunction());
195:       assertFalse(node0.isCatch());
196:       assertFalse(node0.isSetterDef());
197:       assertEquals(0, node0.getLineno());
198:       assertFalse(node0.isNull());
199:       assertFalse(node0.isParamList());
200:       assertFalse(node0.isStringKey());
201:       assertFalse(node0.isDebugger());
202:       assertFalse(node0.isTrue());
203:       assertEquals(132, node0.getSourcePosition());
204:       assertFalse(node0.isVoid());
205:       assertFalse(node0.isCall());
206:       assertFalse(node0.isTry());
207:       assertTrue(node0.isString());
208:       assertFalse(node0.isName());
209:       assertFalse(node0.isWhile());
210:       assertFalse(node0.isFor());
211:       assertFalse(node0.hasMoreThanOneChild());
212:       assertFalse(node0.isBlock());
213:       assertFalse(node0.isRegExp());
214:       assertFalse(node0.isAssignAdd());
215:       assertFalse(node0.isDo());
216:       assertFalse(node0.isCase());
217:       assertFalse(node0.isGetterDef());
218:       assertFalse(node0.isDelProp());
219:       assertFalse(node0.isNumber());
220:       assertFalse(node0.isEmpty());
221:       assertFalse(node0.isOr());
222:       assertFalse(node0.isVar());
223:       assertFalse(node0.isAdd());
224:       assertFalse(node0.isSwitch());
225:       assertFalse(node0.isLabelName());
226:       assertFalse(node0.isArrayLit());
227:       assertFalse(node0.isNew());
228:       assertFalse(node0.isDefaultCase());
229:       assertFalse(node0.isLabel());
230:       assertEquals(0, node0.getChildCount());
231:       assertFalse(iterable0.contains(node0));
232:       
233:       node0.setWasEmptyNode(true);
234:       assertEquals(4095, Node.COLUMN_MASK);
235:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
236:       assertEquals(55, Node.INFERRED_FUNCTION);
237:       assertEquals(36, Node.QUOTED_PROP);
238:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
239:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
240:       assertEquals(43, Node.IS_CONSTANT_NAME);
241:       assertEquals(48, Node.DIRECTIVES);
242:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
243:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
244:       assertEquals(50, Node.FREE_CALL);
245:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
246:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
247:       assertEquals(32, Node.INCRDECR_PROP);
248:       assertEquals(1, Node.DECR_FLAG);
249:       assertEquals(12, Node.COLUMN_BITS);
250:       assertEquals(46, Node.IS_NAMESPACE);
251:       assertEquals(30, Node.VAR_ARGS_NAME);
252:       assertEquals(51, Node.STATIC_SOURCE_FILE);
253:       assertEquals(2, Node.POST_FLAG);
254:       assertEquals(54, Node.SLASH_V);
255:       assertEquals(56, Node.CHANGE_TIME);
256:       assertEquals(49, Node.DIRECT_EVAL);
257:       assertEquals(37, Node.OPT_ARG_NAME);
258:       assertEquals(57, Node.REFLECTED_OBJECT);
259:       assertEquals(40, Node.ORIGINALNAME_PROP);
260:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
261:       assertEquals(52, Node.LENGTH);
262:       assertEquals(15, Node.NO_SIDE_EFFECTS);
263:       assertEquals(8, Node.FLAG_NO_THROWS);
264:       assertEquals(39, Node.EMPTY_BLOCK);
265:       assertEquals(57, Node.LAST_PROP);
266:       assertEquals(47, Node.IS_DISPATCHER);
267:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
268:       assertEquals(29, Node.JSDOC_INFO_PROP);
269:       assertEquals(53, Node.INPUT_ID);
270:       assertFalse(node0.isInstanceOf());
271:       assertFalse(node0.isAnd());
272:       assertFalse(node0.isGetProp());
273:       assertEquals(132, node0.getCharno());
274:       assertFalse(node0.isScript());
275:       assertFalse(node0.isObjectLit());
276:       assertFalse(node0.isNot());
277:       assertFalse(node0.isHook());
278:       assertFalse(node0.isExprResult());
279:       assertFalse(node0.isGetElem());
280:       assertFalse(node0.hasOneChild());
281:       assertFalse(node0.isBreak());
282:       assertFalse(node0.hasChildren());
283:       assertFalse(node0.isWith());
284:       assertFalse(node0.isThis());
285:       assertFalse(node0.isAssign());
286:       assertFalse(node0.isTypeOf());
287:       assertFalse(node0.isDec());
288:       assertFalse(node0.isComma());
289:       assertFalse(node0.isIn());
290:       assertFalse(node0.isReturn());
291:       assertFalse(node0.isIf());
292:       assertFalse(node0.isNE());
293:       assertFalse(node0.isCast());
294:       assertFalse(node0.isInc());
295:       assertEquals(40, node0.getType());
296:       assertFalse(node0.isThrow());
297:       assertFalse(node0.isContinue());
298:       assertFalse(node0.isFalse());
299:       assertFalse(node0.isFunction());
300:       assertFalse(node0.isCatch());
301:       assertFalse(node0.isSetterDef());
302:       assertEquals(0, node0.getLineno());
303:       assertFalse(node0.isNull());
304:       assertFalse(node0.isParamList());
305:       assertFalse(node0.isStringKey());
306:       assertFalse(node0.isDebugger());
307:       assertFalse(node0.isTrue());
308:       assertEquals(132, node0.getSourcePosition());
309:       assertFalse(node0.isVoid());
310:       assertFalse(node0.isCall());
311:       assertFalse(node0.isTry());
312:       assertTrue(node0.isString());
313:       assertFalse(node0.isName());
314:       assertFalse(node0.isWhile());
315:       assertFalse(node0.isFor());
316:       assertFalse(node0.hasMoreThanOneChild());
317:       assertFalse(node0.isBlock());
318:       assertFalse(node0.isRegExp());
319:       assertFalse(node0.isAssignAdd());
320:       assertFalse(node0.isDo());
321:       assertFalse(node0.isCase());
322:       assertFalse(node0.isGetterDef());
323:       assertFalse(node0.isDelProp());
324:       assertFalse(node0.isNumber());
325:       assertFalse(node0.isEmpty());
326:       assertFalse(node0.isOr());
327:       assertFalse(node0.isVar());
328:       assertFalse(node0.isAdd());
329:       assertFalse(node0.isSwitch());
330:       assertFalse(node0.isLabelName());
331:       assertFalse(node0.isArrayLit());
332:       assertFalse(node0.isNew());
333:       assertFalse(node0.isDefaultCase());
334:       assertFalse(node0.isLabel());
335:       assertEquals(0, node0.getChildCount());
336:       
337:       Node node1 = node0.cloneNode();
338:       assertFalse(node1.equals((Object)node0));
339:       assertNotNull(node1);
340:       assertEquals(4095, Node.COLUMN_MASK);
341:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
342:       assertEquals(55, Node.INFERRED_FUNCTION);
343:       assertEquals(36, Node.QUOTED_PROP);
344:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
345:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
346:       assertEquals(43, Node.IS_CONSTANT_NAME);
347:       assertEquals(48, Node.DIRECTIVES);
348:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
349:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
350:       assertEquals(50, Node.FREE_CALL);
351:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
352:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
353:       assertEquals(32, Node.INCRDECR_PROP);
354:       assertEquals(1, Node.DECR_FLAG);
355:       assertEquals(12, Node.COLUMN_BITS);
356:       assertEquals(46, Node.IS_NAMESPACE);
357:       assertEquals(30, Node.VAR_ARGS_NAME);
358:       assertEquals(51, Node.STATIC_SOURCE_FILE);
359:       assertEquals(2, Node.POST_FLAG);
360:       assertEquals(54, Node.SLASH_V);
361:       assertEquals(56, Node.CHANGE_TIME);
362:       assertEquals(49, Node.DIRECT_EVAL);
363:       assertEquals(37, Node.OPT_ARG_NAME);
364:       assertEquals(57, Node.REFLECTED_OBJECT);
365:       assertEquals(40, Node.ORIGINALNAME_PROP);
366:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
367:       assertEquals(52, Node.LENGTH);
368:       assertEquals(15, Node.NO_SIDE_EFFECTS);
369:       assertEquals(8, Node.FLAG_NO_THROWS);
370:       assertEquals(39, Node.EMPTY_BLOCK);
371:       assertEquals(57, Node.LAST_PROP);
372:       assertEquals(47, Node.IS_DISPATCHER);
373:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
374:       assertEquals(29, Node.JSDOC_INFO_PROP);
375:       assertEquals(53, Node.INPUT_ID);
376:       assertEquals(53, Node.INPUT_ID);
377:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
378:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
379:       assertEquals(36, Node.QUOTED_PROP);
380:       assertEquals(29, Node.JSDOC_INFO_PROP);
381:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
382:       assertEquals(55, Node.INFERRED_FUNCTION);
383:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
384:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
385:       assertEquals(46, Node.IS_NAMESPACE);
386:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
387:       assertEquals(51, Node.STATIC_SOURCE_FILE);
388:       assertEquals(47, Node.IS_DISPATCHER);
389:       assertEquals(2, Node.POST_FLAG);
390:       assertEquals(40, Node.ORIGINALNAME_PROP);
391:       assertEquals(43, Node.IS_CONSTANT_NAME);
392:       assertEquals(52, Node.LENGTH);
393:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
394:       assertEquals(54, Node.SLASH_V);
395:       assertEquals(57, Node.REFLECTED_OBJECT);
396:       assertEquals(30, Node.VAR_ARGS_NAME);
397:       assertEquals(50, Node.FREE_CALL);
398:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
399:       assertEquals(15, Node.NO_SIDE_EFFECTS);
400:       assertEquals(39, Node.EMPTY_BLOCK);
401:       assertEquals(57, Node.LAST_PROP);
402:       assertEquals(32, Node.INCRDECR_PROP);
403:       assertEquals(1, Node.DECR_FLAG);
404:       assertEquals(12, Node.COLUMN_BITS);
405:       assertEquals(4095, Node.COLUMN_MASK);
406:       assertEquals(8, Node.FLAG_NO_THROWS);
407:       assertEquals(49, Node.DIRECT_EVAL);
408:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
409:       assertEquals(56, Node.CHANGE_TIME);
410:       assertEquals(37, Node.OPT_ARG_NAME);
411:       assertEquals(48, Node.DIRECTIVES);
412:       assertFalse(node0.isInstanceOf());
413:       assertFalse(node0.isAnd());
414:       assertFalse(node0.isGetProp());
415:       assertEquals(132, node0.getCharno());
416:       assertFalse(node0.isScript());
417:       assertFalse(node0.isObjectLit());
418:       assertFalse(node0.isNot());
419:       assertFalse(node0.isHook());
420:       assertFalse(node0.isExprResult());
421:       assertFalse(node0.isGetElem());
422:       assertFalse(node0.hasOneChild());
423:       assertFalse(node0.isBreak());
424:       assertFalse(node0.hasChildren());
425:       assertFalse(node0.isWith());
426:       assertFalse(node0.isThis());
427:       assertFalse(node0.isAssign());
428:       assertFalse(node0.isTypeOf());
429:       assertFalse(node0.isDec());
430:       assertFalse(node0.isComma());
431:       assertFalse(node0.isIn());
432:       assertFalse(node0.isReturn());
433:       assertFalse(node0.isIf());
434:       assertFalse(node0.isNE());
435:       assertFalse(node0.isCast());
436:       assertFalse(node0.isInc());
437:       assertEquals(40, node0.getType());
438:       assertFalse(node0.isThrow());
439:       assertFalse(node0.isContinue());
440:       assertFalse(node0.isFalse());
441:       assertFalse(node0.isFunction());
442:       assertFalse(node0.isCatch());
443:       assertFalse(node0.isSetterDef());
444:       assertEquals(0, node0.getLineno());
445:       assertFalse(node0.isNull());
446:       assertFalse(node0.isParamList());
447:       assertFalse(node0.isStringKey());
448:       assertFalse(node0.isDebugger());
449:       assertFalse(node0.isTrue());
450:       assertEquals(132, node0.getSourcePosition());
451:       assertFalse(node0.isVoid());
452:       assertFalse(node0.isCall());
453:       assertFalse(node0.isTry());
454:       assertTrue(node0.isString());
455:       assertFalse(node0.isName());
456:       assertFalse(node0.isWhile());
457:       assertFalse(node0.isFor());
458:       assertFalse(node0.hasMoreThanOneChild());
459:       assertFalse(node0.isBlock());
460:       assertFalse(node0.isRegExp());
461:       assertFalse(node0.isAssignAdd());
462:       assertFalse(node0.isDo());
463:       assertFalse(node0.isCase());
464:       assertFalse(node0.isGetterDef());
465:       assertFalse(node0.isDelProp());
466:       assertFalse(node0.isNumber());
467:       assertFalse(node0.isEmpty());
468:       assertFalse(node0.isOr());
469:       assertFalse(node0.isVar());
470:       assertFalse(node0.isAdd());
471:       assertFalse(node0.isSwitch());
472:       assertFalse(node0.isLabelName());
473:       assertFalse(node0.isArrayLit());
474:       assertFalse(node0.isNew());
475:       assertFalse(node0.isDefaultCase());
476:       assertFalse(node0.isLabel());
477:       assertEquals(0, node0.getChildCount());
478:       assertFalse(node1.isExprResult());
479:       assertFalse(node1.isScript());
480:       assertEquals(132, node1.getCharno());
481:       assertFalse(node1.hasOneChild());
482:       assertFalse(node1.isGetElem());
483:       assertFalse(node1.isCast());
484:       assertFalse(node1.isInstanceOf());
485:       assertFalse(node1.isWith());
486:       assertFalse(node1.hasChildren());
487:       assertFalse(node1.isTypeOf());
488:       assertFalse(node1.isAssign());
489:       assertFalse(node1.isDec());
490:       assertFalse(node1.isThis());
491:       assertFalse(node1.isGetProp());
492:       assertFalse(node1.isLabelName());
493:       assertFalse(node1.isAnd());
494:       assertFalse(node1.isObjectLit());
495:       assertFalse(node1.isNumber());
496:       assertFalse(node1.isNot());
497:       assertFalse(node1.isSwitch());
498:       assertFalse(node1.isAdd());
499:       assertFalse(node1.isWhile());
500:       assertFalse(node1.isNew());
501:       assertFalse(node1.isDo());
502:       assertFalse(node1.isCall());
503:       assertFalse(node1.isVar());
504:       assertFalse(node1.isReturn());
505:       assertFalse(node1.isLabel());
506:       assertFalse(node1.isComma());
507:       assertFalse(node1.isNull());
508:       assertFalse(node1.isDelProp());
509:       assertFalse(node1.isAssignAdd());
510:       assertFalse(node1.isBreak());
511:       assertFalse(node1.isName());
512:       assertEquals(132, node1.getSourcePosition());
513:       assertFalse(node1.isEmpty());
514:       assertFalse(node1.isOr());
515:       assertFalse(node1.isFunction());
516:       assertFalse(node1.isDebugger());
517:       assertFalse(node1.isTrue());
518:       assertFalse(node1.isVoid());
519:       assertFalse(node1.isDefaultCase());
520:       assertFalse(node1.isTry());
521:       assertFalse(node1.isArrayLit());
522:       assertEquals(40, node1.getType());
523:       assertFalse(node1.isFor());
524:       assertFalse(node1.isCatch());
525:       assertFalse(node1.isRegExp());
526:       assertEquals(0, node1.getChildCount());
527:       assertFalse(node1.isParamList());
528:       assertEquals(0, node1.getLineno());
529:       assertFalse(node1.isStringKey());
530:       assertFalse(node1.isGetterDef());
531:       assertFalse(node1.isInc());
532:       assertFalse(node1.isBlock());
533:       assertFalse(node1.isCase());
534:       assertTrue(node1.isString());
535:       assertFalse(node1.isContinue());
536:       assertFalse(node1.hasMoreThanOneChild());
537:       assertFalse(node1.isFalse());
538:       assertFalse(node1.isThrow());
539:       assertFalse(node1.isHook());
540:       assertFalse(node1.isSetterDef());
541:       assertFalse(node1.isNE());
542:       assertFalse(node1.isIf());
543:       assertFalse(node1.isIn());
544:       assertNotSame(node0, node1);
545:       assertNotSame(node1, node0);
546:       
547:       // Undeclared exception!
548:       try { 
549:         node0.addChildrenAfter((Node) null, (Node) null);
550:         fail("Expecting exception: NullPointerException");
551:       
552:       } catch(NullPointerException e) {
553:          //
554:          // no message in exception (getMessage() returned null)
555:          //
556:          verifyException("com.google.javascript.rhino.Node", e);
557:       }
558:   }
559: }
RegularFileObject[/tmp/EvoSuite_129_1628161063856/com/google/javascript/rhino/Node_129_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:57:43 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_129_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_129_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_129_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.Token",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.common.collect.AbstractIndexedListIterator",
332:       "com.google.common.collect.Iterators$11",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.common.collect.Sets",
338:       "com.google.javascript.rhino.JSTypeExpression",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.javascript.rhino.Node$AncestorIterable$1",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.common.collect.Iterables",
344:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
345:       "com.google.javascript.rhino.jstype.TemplatizedType",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
349:       "com.google.common.collect.Iterators$12",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.common.collect.Platform",
361:       "com.google.common.collect.AbstractMultimap$Values",
362:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
363:       "com.google.common.collect.AbstractMapBasedMultimap$1",
364:       "com.google.common.collect.Multimaps$Entries",
365:       "com.google.common.collect.AbstractMultimap$Entries",
366:       "com.google.common.collect.AbstractMapBasedMultimap$2",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
368:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
370:       "com.google.common.collect.ImmutableList$1"
371:     );
372:   }
373: }

[MASTER] 10:57:43.916 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("", 0, 132);
assertNotNull(node0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertEquals(132, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isHook());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(132, node0.getSourcePosition());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertEquals(132, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isHook());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(132, node0.getSourcePosition());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(iterable0.contains(node0));

node0.setWasEmptyNode(true);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertEquals(132, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isHook());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(132, node0.getSourcePosition());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());

Node node1 = node0.cloneNode();
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertEquals(132, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isHook());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(132, node0.getSourcePosition());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertEquals(132, node1.getCharno());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertEquals(132, node1.getSourcePosition());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertEquals(40, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertEquals(0, node1.getLineno());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertTrue(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isIn());
assertNotSame(node0, node1);
assertNotSame(node1, node0);

node0.addChildrenAfter((Node) null, (Node) null);

[MASTER] 10:57:44.830 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_132_1628161064806/com/google/javascript/rhino/Node_132_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_132_1628161064806/com/google/javascript/rhino/Node_132_tmp__ESTest_scaffolding.java]]
[MASTER] 10:57:44.830 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:57:44.830 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:57:44.831 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 229
[MASTER] 10:57:44.831 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_132_1628161064806/com/google/javascript/rhino/Node_132_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:57:44 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_132_tmp__ESTest extends Node_132_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("30;=6XE_VFF5");
21:       assertNotNull(node0);
22:       assertEquals(40, Node.ORIGINALNAME_PROP);
23:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
24:       assertEquals(57, Node.REFLECTED_OBJECT);
25:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
26:       assertEquals(52, Node.LENGTH);
27:       assertEquals(8, Node.FLAG_NO_THROWS);
28:       assertEquals(50, Node.FREE_CALL);
29:       assertEquals(48, Node.DIRECTIVES);
30:       assertEquals(54, Node.SLASH_V);
31:       assertEquals(49, Node.DIRECT_EVAL);
32:       assertEquals(1, Node.DECR_FLAG);
33:       assertEquals(12, Node.COLUMN_BITS);
34:       assertEquals(51, Node.STATIC_SOURCE_FILE);
35:       assertEquals(4095, Node.COLUMN_MASK);
36:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
37:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
38:       assertEquals(32, Node.INCRDECR_PROP);
39:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
40:       assertEquals(29, Node.JSDOC_INFO_PROP);
41:       assertEquals(47, Node.IS_DISPATCHER);
42:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
43:       assertEquals(2, Node.POST_FLAG);
44:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
45:       assertEquals(37, Node.OPT_ARG_NAME);
46:       assertEquals(46, Node.IS_NAMESPACE);
47:       assertEquals(56, Node.CHANGE_TIME);
48:       assertEquals(43, Node.IS_CONSTANT_NAME);
49:       assertEquals(55, Node.INFERRED_FUNCTION);
50:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
51:       assertEquals(36, Node.QUOTED_PROP);
52:       assertEquals(30, Node.VAR_ARGS_NAME);
53:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
54:       assertEquals(39, Node.EMPTY_BLOCK);
55:       assertEquals(53, Node.INPUT_ID);
56:       assertEquals(15, Node.NO_SIDE_EFFECTS);
57:       assertEquals(57, Node.LAST_PROP);
58:       assertFalse(node0.isStringKey());
59:       assertFalse(node0.isVar());
60:       assertFalse(node0.isCall());
61:       assertFalse(node0.isNew());
62:       assertTrue(node0.isString());
63:       assertFalse(node0.isName());
64:       assertFalse(node0.isSetterDef());
65:       assertFalse(node0.isParamList());
66:       assertFalse(node0.isAdd());
67:       assertFalse(node0.isNull());
68:       assertFalse(node0.hasMoreThanOneChild());
69:       assertFalse(node0.isCatch());
70:       assertEquals((-1), node0.getLineno());
71:       assertFalse(node0.isWhile());
72:       assertFalse(node0.hasChildren());
73:       assertFalse(node0.isBlock());
74:       assertFalse(node0.isAssign());
75:       assertFalse(node0.isReturn());
76:       assertFalse(node0.isDec());
77:       assertFalse(node0.isRegExp());
78:       assertFalse(node0.isTypeOf());
79:       assertFalse(node0.isArrayLit());
80:       assertFalse(node0.isGetElem());
81:       assertFalse(node0.isFor());
82:       assertFalse(node0.isEmpty());
83:       assertFalse(node0.isLabelName());
84:       assertFalse(node0.hasOneChild());
85:       assertFalse(node0.isTry());
86:       assertFalse(node0.isDelProp());
87:       assertFalse(node0.isVoid());
88:       assertFalse(node0.isScript());
89:       assertFalse(node0.isTrue());
90:       assertFalse(node0.isOr());
91:       assertFalse(node0.isNumber());
92:       assertFalse(node0.isGetterDef());
93:       assertFalse(node0.isDo());
94:       assertFalse(node0.isAssignAdd());
95:       assertFalse(node0.isDefaultCase());
96:       assertFalse(node0.isLabel());
97:       assertEquals(0, node0.getChildCount());
98:       assertFalse(node0.isHook());
99:       assertFalse(node0.isThrow());
100:       assertFalse(node0.isSwitch());
101:       assertEquals((-1), node0.getCharno());
102:       assertFalse(node0.isGetProp());
103:       assertFalse(node0.isInc());
104:       assertFalse(node0.isInstanceOf());
105:       assertFalse(node0.isCase());
106:       assertFalse(node0.isThis());
107:       assertFalse(node0.isComma());
108:       assertFalse(node0.isBreak());
109:       assertFalse(node0.isExprResult());
110:       assertFalse(node0.isWith());
111:       assertFalse(node0.isCast());
112:       assertFalse(node0.isIf());
113:       assertFalse(node0.isNE());
114:       assertEquals((-1), node0.getSourcePosition());
115:       assertFalse(node0.isDebugger());
116:       assertFalse(node0.isNot());
117:       assertFalse(node0.isIn());
118:       assertFalse(node0.isObjectLit());
119:       assertFalse(node0.isContinue());
120:       assertFalse(node0.isAnd());
121:       assertEquals(40, node0.getType());
122:       assertFalse(node0.isFalse());
123:       assertFalse(node0.isFunction());
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertNotNull(iterable0);
127:       assertEquals(40, Node.ORIGINALNAME_PROP);
128:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
129:       assertEquals(57, Node.REFLECTED_OBJECT);
130:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
131:       assertEquals(52, Node.LENGTH);
132:       assertEquals(8, Node.FLAG_NO_THROWS);
133:       assertEquals(50, Node.FREE_CALL);
134:       assertEquals(48, Node.DIRECTIVES);
135:       assertEquals(54, Node.SLASH_V);
136:       assertEquals(49, Node.DIRECT_EVAL);
137:       assertEquals(1, Node.DECR_FLAG);
138:       assertEquals(12, Node.COLUMN_BITS);
139:       assertEquals(51, Node.STATIC_SOURCE_FILE);
140:       assertEquals(4095, Node.COLUMN_MASK);
141:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
142:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
143:       assertEquals(32, Node.INCRDECR_PROP);
144:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
145:       assertEquals(29, Node.JSDOC_INFO_PROP);
146:       assertEquals(47, Node.IS_DISPATCHER);
147:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
148:       assertEquals(2, Node.POST_FLAG);
149:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
150:       assertEquals(37, Node.OPT_ARG_NAME);
151:       assertEquals(46, Node.IS_NAMESPACE);
152:       assertEquals(56, Node.CHANGE_TIME);
153:       assertEquals(43, Node.IS_CONSTANT_NAME);
154:       assertEquals(55, Node.INFERRED_FUNCTION);
155:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
156:       assertEquals(36, Node.QUOTED_PROP);
157:       assertEquals(30, Node.VAR_ARGS_NAME);
158:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
159:       assertEquals(39, Node.EMPTY_BLOCK);
160:       assertEquals(53, Node.INPUT_ID);
161:       assertEquals(15, Node.NO_SIDE_EFFECTS);
162:       assertEquals(57, Node.LAST_PROP);
163:       assertFalse(node0.isStringKey());
164:       assertFalse(node0.isVar());
165:       assertFalse(node0.isCall());
166:       assertFalse(node0.isNew());
167:       assertTrue(node0.isString());
168:       assertFalse(node0.isName());
169:       assertFalse(node0.isSetterDef());
170:       assertFalse(node0.isParamList());
171:       assertFalse(node0.isAdd());
172:       assertFalse(node0.isNull());
173:       assertFalse(node0.hasMoreThanOneChild());
174:       assertFalse(node0.isCatch());
175:       assertEquals((-1), node0.getLineno());
176:       assertFalse(node0.isWhile());
177:       assertFalse(node0.hasChildren());
178:       assertFalse(node0.isBlock());
179:       assertFalse(node0.isAssign());
180:       assertFalse(node0.isReturn());
181:       assertFalse(node0.isDec());
182:       assertFalse(node0.isRegExp());
183:       assertFalse(node0.isTypeOf());
184:       assertFalse(node0.isArrayLit());
185:       assertFalse(node0.isGetElem());
186:       assertFalse(node0.isFor());
187:       assertFalse(node0.isEmpty());
188:       assertFalse(node0.isLabelName());
189:       assertFalse(node0.hasOneChild());
190:       assertFalse(node0.isTry());
191:       assertFalse(node0.isDelProp());
192:       assertFalse(node0.isVoid());
193:       assertFalse(node0.isScript());
194:       assertFalse(node0.isTrue());
195:       assertFalse(node0.isOr());
196:       assertFalse(node0.isNumber());
197:       assertFalse(node0.isGetterDef());
198:       assertFalse(node0.isDo());
199:       assertFalse(node0.isAssignAdd());
200:       assertFalse(node0.isDefaultCase());
201:       assertFalse(node0.isLabel());
202:       assertEquals(0, node0.getChildCount());
203:       assertFalse(node0.isHook());
204:       assertFalse(node0.isThrow());
205:       assertFalse(node0.isSwitch());
206:       assertEquals((-1), node0.getCharno());
207:       assertFalse(node0.isGetProp());
208:       assertFalse(node0.isInc());
209:       assertFalse(node0.isInstanceOf());
210:       assertFalse(node0.isCase());
211:       assertFalse(node0.isThis());
212:       assertFalse(node0.isComma());
213:       assertFalse(node0.isBreak());
214:       assertFalse(node0.isExprResult());
215:       assertFalse(node0.isWith());
216:       assertFalse(node0.isCast());
217:       assertFalse(node0.isIf());
218:       assertFalse(node0.isNE());
219:       assertEquals((-1), node0.getSourcePosition());
220:       assertFalse(node0.isDebugger());
221:       assertFalse(node0.isNot());
222:       assertFalse(node0.isIn());
223:       assertFalse(node0.isObjectLit());
224:       assertFalse(node0.isContinue());
225:       assertFalse(node0.isAnd());
226:       assertEquals(40, node0.getType());
227:       assertFalse(node0.isFalse());
228:       assertFalse(node0.isFunction());
229:       assertFalse(iterable0.contains(node0));
230:       
231:       boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
232:       assertFalse(boolean0);
233:       assertEquals(40, Node.ORIGINALNAME_PROP);
234:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
235:       assertEquals(57, Node.REFLECTED_OBJECT);
236:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
237:       assertEquals(52, Node.LENGTH);
238:       assertEquals(8, Node.FLAG_NO_THROWS);
239:       assertEquals(50, Node.FREE_CALL);
240:       assertEquals(48, Node.DIRECTIVES);
241:       assertEquals(54, Node.SLASH_V);
242:       assertEquals(49, Node.DIRECT_EVAL);
243:       assertEquals(1, Node.DECR_FLAG);
244:       assertEquals(12, Node.COLUMN_BITS);
245:       assertEquals(51, Node.STATIC_SOURCE_FILE);
246:       assertEquals(4095, Node.COLUMN_MASK);
247:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
248:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
249:       assertEquals(32, Node.INCRDECR_PROP);
250:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
251:       assertEquals(29, Node.JSDOC_INFO_PROP);
252:       assertEquals(47, Node.IS_DISPATCHER);
253:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
254:       assertEquals(2, Node.POST_FLAG);
255:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
256:       assertEquals(37, Node.OPT_ARG_NAME);
257:       assertEquals(46, Node.IS_NAMESPACE);
258:       assertEquals(56, Node.CHANGE_TIME);
259:       assertEquals(43, Node.IS_CONSTANT_NAME);
260:       assertEquals(55, Node.INFERRED_FUNCTION);
261:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
262:       assertEquals(36, Node.QUOTED_PROP);
263:       assertEquals(30, Node.VAR_ARGS_NAME);
264:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
265:       assertEquals(39, Node.EMPTY_BLOCK);
266:       assertEquals(53, Node.INPUT_ID);
267:       assertEquals(15, Node.NO_SIDE_EFFECTS);
268:       assertEquals(57, Node.LAST_PROP);
269:       assertFalse(node0.isStringKey());
270:       assertFalse(node0.isVar());
271:       assertFalse(node0.isCall());
272:       assertFalse(node0.isNew());
273:       assertTrue(node0.isString());
274:       assertFalse(node0.isName());
275:       assertFalse(node0.isSetterDef());
276:       assertFalse(node0.isParamList());
277:       assertFalse(node0.isAdd());
278:       assertFalse(node0.isNull());
279:       assertFalse(node0.hasMoreThanOneChild());
280:       assertFalse(node0.isCatch());
281:       assertEquals((-1), node0.getLineno());
282:       assertFalse(node0.isWhile());
283:       assertFalse(node0.hasChildren());
284:       assertFalse(node0.isBlock());
285:       assertFalse(node0.isAssign());
286:       assertFalse(node0.isReturn());
287:       assertFalse(node0.isDec());
288:       assertFalse(node0.isRegExp());
289:       assertFalse(node0.isTypeOf());
290:       assertFalse(node0.isArrayLit());
291:       assertFalse(node0.isGetElem());
292:       assertFalse(node0.isFor());
293:       assertFalse(node0.isEmpty());
294:       assertFalse(node0.isLabelName());
295:       assertFalse(node0.hasOneChild());
296:       assertFalse(node0.isTry());
297:       assertFalse(node0.isDelProp());
298:       assertFalse(node0.isVoid());
299:       assertFalse(node0.isScript());
300:       assertFalse(node0.isTrue());
301:       assertFalse(node0.isOr());
302:       assertFalse(node0.isNumber());
303:       assertFalse(node0.isGetterDef());
304:       assertFalse(node0.isDo());
305:       assertFalse(node0.isAssignAdd());
306:       assertFalse(node0.isDefaultCase());
307:       assertFalse(node0.isLabel());
308:       assertEquals(0, node0.getChildCount());
309:       assertFalse(node0.isHook());
310:       assertFalse(node0.isThrow());
311:       assertFalse(node0.isSwitch());
312:       assertEquals((-1), node0.getCharno());
313:       assertFalse(node0.isGetProp());
314:       assertFalse(node0.isInc());
315:       assertFalse(node0.isInstanceOf());
316:       assertFalse(node0.isCase());
317:       assertFalse(node0.isThis());
318:       assertFalse(node0.isComma());
319:       assertFalse(node0.isBreak());
320:       assertFalse(node0.isExprResult());
321:       assertFalse(node0.isWith());
322:       assertFalse(node0.isCast());
323:       assertFalse(node0.isIf());
324:       assertFalse(node0.isNE());
325:       assertEquals((-1), node0.getSourcePosition());
326:       assertFalse(node0.isDebugger());
327:       assertFalse(node0.isNot());
328:       assertFalse(node0.isIn());
329:       assertFalse(node0.isObjectLit());
330:       assertFalse(node0.isContinue());
331:       assertFalse(node0.isAnd());
332:       assertEquals(40, node0.getType());
333:       assertFalse(node0.isFalse());
334:       assertFalse(node0.isFunction());
335:   }
336: }
RegularFileObject[/tmp/EvoSuite_132_1628161064806/com/google/javascript/rhino/Node_132_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:57:44 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_132_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_132_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_132_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.Token",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.common.collect.AbstractIndexedListIterator",
332:       "com.google.common.collect.Iterators$11",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.common.collect.Sets",
338:       "com.google.javascript.rhino.JSTypeExpression",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.javascript.rhino.Node$AncestorIterable$1",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.common.collect.Iterables",
344:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
345:       "com.google.javascript.rhino.jstype.TemplatizedType",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
349:       "com.google.common.collect.Iterators$12",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.common.collect.Platform",
361:       "com.google.common.collect.AbstractMultimap$Values",
362:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
363:       "com.google.common.collect.AbstractMapBasedMultimap$1",
364:       "com.google.common.collect.Multimaps$Entries",
365:       "com.google.common.collect.AbstractMultimap$Entries",
366:       "com.google.common.collect.AbstractMapBasedMultimap$2",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
368:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
370:       "com.google.common.collect.ImmutableList$1"
371:     );
372:   }
373: }

[MASTER] 10:57:44.834 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("30;=6XE_VFF5");
assertNotNull(node0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isIn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isIn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(iterable0.contains(node0));

boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
assertFalse(boolean0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isIn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());


[MASTER] 10:57:46.890 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_172_1628161066873/com/google/javascript/rhino/Node_172_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_172_1628161066873/com/google/javascript/rhino/Node_172_tmp__ESTest_scaffolding.java]]
[MASTER] 10:57:46.890 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:57:46.890 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:57:46.891 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 230
[MASTER] 10:57:46.891 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_172_1628161066873/com/google/javascript/rhino/Node_172_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:57:46 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_172_tmp__ESTest extends Node_172_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(33.0);
22:       assertNotNull(node0);
23:       assertEquals(15, Node.NO_SIDE_EFFECTS);
24:       assertEquals(57, Node.LAST_PROP);
25:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
26:       assertEquals(54, Node.SLASH_V);
27:       assertEquals(30, Node.VAR_ARGS_NAME);
28:       assertEquals(51, Node.STATIC_SOURCE_FILE);
29:       assertEquals(46, Node.IS_NAMESPACE);
30:       assertEquals(57, Node.REFLECTED_OBJECT);
31:       assertEquals(40, Node.ORIGINALNAME_PROP);
32:       assertEquals(49, Node.DIRECT_EVAL);
33:       assertEquals(37, Node.OPT_ARG_NAME);
34:       assertEquals(47, Node.IS_DISPATCHER);
35:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
36:       assertEquals(29, Node.JSDOC_INFO_PROP);
37:       assertEquals(56, Node.CHANGE_TIME);
38:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
39:       assertEquals(8, Node.FLAG_NO_THROWS);
40:       assertEquals(2, Node.POST_FLAG);
41:       assertEquals(55, Node.INFERRED_FUNCTION);
42:       assertEquals(52, Node.LENGTH);
43:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
44:       assertEquals(39, Node.EMPTY_BLOCK);
45:       assertEquals(53, Node.INPUT_ID);
46:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
47:       assertEquals(43, Node.IS_CONSTANT_NAME);
48:       assertEquals(36, Node.QUOTED_PROP);
49:       assertEquals(4095, Node.COLUMN_MASK);
50:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
51:       assertEquals(48, Node.DIRECTIVES);
52:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
53:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
54:       assertEquals(50, Node.FREE_CALL);
55:       assertEquals(32, Node.INCRDECR_PROP);
56:       assertEquals(12, Node.COLUMN_BITS);
57:       assertEquals(1, Node.DECR_FLAG);
58:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
59:       assertEquals(39, node0.getType());
60:       assertFalse(node0.isDo());
61:       assertFalse(node0.isContinue());
62:       assertFalse(node0.isWhile());
63:       assertFalse(node0.isNew());
64:       assertEquals((-1), node0.getLineno());
65:       assertFalse(node0.isOr());
66:       assertFalse(node0.isAdd());
67:       assertEquals((-1), node0.getSourcePosition());
68:       assertFalse(node0.isLabelName());
69:       assertFalse(node0.isStringKey());
70:       assertFalse(node0.isCast());
71:       assertFalse(node0.isSetterDef());
72:       assertFalse(node0.isLabel());
73:       assertFalse(node0.isAssignAdd());
74:       assertFalse(node0.isVar());
75:       assertEquals(0, node0.getChildCount());
76:       assertFalse(node0.isNot());
77:       assertFalse(node0.isDefaultCase());
78:       assertFalse(node0.isAnd());
79:       assertFalse(node0.isExprResult());
80:       assertFalse(node0.isVoid());
81:       assertFalse(node0.isObjectLit());
82:       assertFalse(node0.isTrue());
83:       assertFalse(node0.isNull());
84:       assertFalse(node0.isDebugger());
85:       assertFalse(node0.isAssign());
86:       assertFalse(node0.isName());
87:       assertFalse(node0.isGetElem());
88:       assertFalse(node0.isCall());
89:       assertFalse(node0.isDelProp());
90:       assertFalse(node0.isBreak());
91:       assertFalse(node0.isGetProp());
92:       assertFalse(node0.isReturn());
93:       assertFalse(node0.isTypeOf());
94:       assertFalse(node0.hasChildren());
95:       assertFalse(node0.isDec());
96:       assertFalse(node0.isComma());
97:       assertFalse(node0.isString());
98:       assertFalse(node0.isSwitch());
99:       assertFalse(node0.isInc());
100:       assertTrue(node0.isNumber());
101:       assertFalse(node0.isCase());
102:       assertFalse(node0.isIn());
103:       assertFalse(node0.isNE());
104:       assertFalse(node0.isGetterDef());
105:       assertEquals((-1), node0.getCharno());
106:       assertFalse(node0.isEmpty());
107:       assertFalse(node0.isFalse());
108:       assertFalse(node0.isThrow());
109:       assertFalse(node0.isArrayLit());
110:       assertFalse(node0.isFunction());
111:       assertFalse(node0.isWith());
112:       assertFalse(node0.isCatch());
113:       assertFalse(node0.isScript());
114:       assertFalse(node0.isParamList());
115:       assertFalse(node0.isFor());
116:       assertFalse(node0.isIf());
117:       assertFalse(node0.hasOneChild());
118:       assertFalse(node0.isTry());
119:       assertFalse(node0.isBlock());
120:       assertFalse(node0.isInstanceOf());
121:       assertFalse(node0.hasMoreThanOneChild());
122:       assertFalse(node0.isRegExp());
123:       assertFalse(node0.isHook());
124:       assertFalse(node0.isThis());
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertNotNull(iterable0);
128:       assertEquals(15, Node.NO_SIDE_EFFECTS);
129:       assertEquals(57, Node.LAST_PROP);
130:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
131:       assertEquals(54, Node.SLASH_V);
132:       assertEquals(30, Node.VAR_ARGS_NAME);
133:       assertEquals(51, Node.STATIC_SOURCE_FILE);
134:       assertEquals(46, Node.IS_NAMESPACE);
135:       assertEquals(57, Node.REFLECTED_OBJECT);
136:       assertEquals(40, Node.ORIGINALNAME_PROP);
137:       assertEquals(49, Node.DIRECT_EVAL);
138:       assertEquals(37, Node.OPT_ARG_NAME);
139:       assertEquals(47, Node.IS_DISPATCHER);
140:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
141:       assertEquals(29, Node.JSDOC_INFO_PROP);
142:       assertEquals(56, Node.CHANGE_TIME);
143:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
144:       assertEquals(8, Node.FLAG_NO_THROWS);
145:       assertEquals(2, Node.POST_FLAG);
146:       assertEquals(55, Node.INFERRED_FUNCTION);
147:       assertEquals(52, Node.LENGTH);
148:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
149:       assertEquals(39, Node.EMPTY_BLOCK);
150:       assertEquals(53, Node.INPUT_ID);
151:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
152:       assertEquals(43, Node.IS_CONSTANT_NAME);
153:       assertEquals(36, Node.QUOTED_PROP);
154:       assertEquals(4095, Node.COLUMN_MASK);
155:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
156:       assertEquals(48, Node.DIRECTIVES);
157:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
158:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
159:       assertEquals(50, Node.FREE_CALL);
160:       assertEquals(32, Node.INCRDECR_PROP);
161:       assertEquals(12, Node.COLUMN_BITS);
162:       assertEquals(1, Node.DECR_FLAG);
163:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
164:       assertEquals(39, node0.getType());
165:       assertFalse(node0.isDo());
166:       assertFalse(node0.isContinue());
167:       assertFalse(node0.isWhile());
168:       assertFalse(node0.isNew());
169:       assertEquals((-1), node0.getLineno());
170:       assertFalse(node0.isOr());
171:       assertFalse(node0.isAdd());
172:       assertEquals((-1), node0.getSourcePosition());
173:       assertFalse(node0.isLabelName());
174:       assertFalse(node0.isStringKey());
175:       assertFalse(node0.isCast());
176:       assertFalse(node0.isSetterDef());
177:       assertFalse(node0.isLabel());
178:       assertFalse(node0.isAssignAdd());
179:       assertFalse(node0.isVar());
180:       assertEquals(0, node0.getChildCount());
181:       assertFalse(node0.isNot());
182:       assertFalse(node0.isDefaultCase());
183:       assertFalse(node0.isAnd());
184:       assertFalse(node0.isExprResult());
185:       assertFalse(node0.isVoid());
186:       assertFalse(node0.isObjectLit());
187:       assertFalse(node0.isTrue());
188:       assertFalse(node0.isNull());
189:       assertFalse(node0.isDebugger());
190:       assertFalse(node0.isAssign());
191:       assertFalse(node0.isName());
192:       assertFalse(node0.isGetElem());
193:       assertFalse(node0.isCall());
194:       assertFalse(node0.isDelProp());
195:       assertFalse(node0.isBreak());
196:       assertFalse(node0.isGetProp());
197:       assertFalse(node0.isReturn());
198:       assertFalse(node0.isTypeOf());
199:       assertFalse(node0.hasChildren());
200:       assertFalse(node0.isDec());
201:       assertFalse(node0.isComma());
202:       assertFalse(node0.isString());
203:       assertFalse(node0.isSwitch());
204:       assertFalse(node0.isInc());
205:       assertTrue(node0.isNumber());
206:       assertFalse(node0.isCase());
207:       assertFalse(node0.isIn());
208:       assertFalse(node0.isNE());
209:       assertFalse(node0.isGetterDef());
210:       assertEquals((-1), node0.getCharno());
211:       assertFalse(node0.isEmpty());
212:       assertFalse(node0.isFalse());
213:       assertFalse(node0.isThrow());
214:       assertFalse(node0.isArrayLit());
215:       assertFalse(node0.isFunction());
216:       assertFalse(node0.isWith());
217:       assertFalse(node0.isCatch());
218:       assertFalse(node0.isScript());
219:       assertFalse(node0.isParamList());
220:       assertFalse(node0.isFor());
221:       assertFalse(node0.isIf());
222:       assertFalse(node0.hasOneChild());
223:       assertFalse(node0.isTry());
224:       assertFalse(node0.isBlock());
225:       assertFalse(node0.isInstanceOf());
226:       assertFalse(node0.hasMoreThanOneChild());
227:       assertFalse(node0.isRegExp());
228:       assertFalse(node0.isHook());
229:       assertFalse(node0.isThis());
230:       assertFalse(iterable0.contains(node0));
231:       
232:       // Undeclared exception!
233:       try { 
234:         node0.srcrefTree((Node) null);
235:         fail("Expecting exception: NullPointerException");
236:       
237:       } catch(NullPointerException e) {
238:          //
239:          // no message in exception (getMessage() returned null)
240:          //
241:          verifyException("com.google.javascript.rhino.Node", e);
242:       }
243:   }
244: }
RegularFileObject[/tmp/EvoSuite_172_1628161066873/com/google/javascript/rhino/Node_172_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:57:46 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_172_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_172_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_172_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.Token",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.common.collect.AbstractIndexedListIterator",
332:       "com.google.common.collect.Iterators$11",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.common.collect.Sets",
338:       "com.google.javascript.rhino.JSTypeExpression",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.javascript.rhino.Node$AncestorIterable$1",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.common.collect.Iterables",
344:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
345:       "com.google.javascript.rhino.jstype.TemplatizedType",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
349:       "com.google.common.collect.Iterators$12",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.common.collect.Platform",
361:       "com.google.common.collect.AbstractMultimap$Values",
362:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
363:       "com.google.common.collect.AbstractMapBasedMultimap$1",
364:       "com.google.common.collect.Multimaps$Entries",
365:       "com.google.common.collect.AbstractMultimap$Entries",
366:       "com.google.common.collect.AbstractMapBasedMultimap$2",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
368:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
370:       "com.google.common.collect.ImmutableList$1"
371:     );
372:   }
373: }

[MASTER] 10:57:46.893 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(33.0);
assertNotNull(node0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(39, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNot());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isThis());

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(39, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNot());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(iterable0.contains(node0));

node0.srcrefTree((Node) null);

[MASTER] 10:58:02.395 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_318_1628161082300/com/google/javascript/rhino/Node_318_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_318_1628161082300/com/google/javascript/rhino/Node_318_tmp__ESTest_scaffolding.java]]
[MASTER] 10:58:02.395 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:58:02.395 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:58:02.396 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 229
[MASTER] 10:58:02.397 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_318_1628161082300/com/google/javascript/rhino/Node_318_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:58:02 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_318_tmp__ESTest extends Node_318_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("", 0, 132);
21:       assertNotNull(node0);
22:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
23:       assertEquals(39, Node.EMPTY_BLOCK);
24:       assertEquals(4095, Node.COLUMN_MASK);
25:       assertEquals(8, Node.FLAG_NO_THROWS);
26:       assertEquals(50, Node.FREE_CALL);
27:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
28:       assertEquals(55, Node.INFERRED_FUNCTION);
29:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
30:       assertEquals(54, Node.SLASH_V);
31:       assertEquals(30, Node.VAR_ARGS_NAME);
32:       assertEquals(40, Node.ORIGINALNAME_PROP);
33:       assertEquals(43, Node.IS_CONSTANT_NAME);
34:       assertEquals(37, Node.OPT_ARG_NAME);
35:       assertEquals(46, Node.IS_NAMESPACE);
36:       assertEquals(51, Node.STATIC_SOURCE_FILE);
37:       assertEquals(47, Node.IS_DISPATCHER);
38:       assertEquals(2, Node.POST_FLAG);
39:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
40:       assertEquals(1, Node.DECR_FLAG);
41:       assertEquals(29, Node.JSDOC_INFO_PROP);
42:       assertEquals(12, Node.COLUMN_BITS);
43:       assertEquals(15, Node.NO_SIDE_EFFECTS);
44:       assertEquals(57, Node.LAST_PROP);
45:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
46:       assertEquals(32, Node.INCRDECR_PROP);
47:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
48:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
49:       assertEquals(53, Node.INPUT_ID);
50:       assertEquals(36, Node.QUOTED_PROP);
51:       assertEquals(57, Node.REFLECTED_OBJECT);
52:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
53:       assertEquals(52, Node.LENGTH);
54:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
55:       assertEquals(56, Node.CHANGE_TIME);
56:       assertEquals(48, Node.DIRECTIVES);
57:       assertEquals(49, Node.DIRECT_EVAL);
58:       assertFalse(node0.isSetterDef());
59:       assertFalse(node0.isParamList());
60:       assertFalse(node0.isNull());
61:       assertEquals(0, node0.getLineno());
62:       assertFalse(node0.isName());
63:       assertFalse(node0.isCatch());
64:       assertFalse(node0.isVar());
65:       assertEquals(40, node0.getType());
66:       assertFalse(node0.isCall());
67:       assertEquals(0, node0.getChildCount());
68:       assertFalse(node0.isRegExp());
69:       assertFalse(node0.isFunction());
70:       assertFalse(node0.isDebugger());
71:       assertFalse(node0.isBlock());
72:       assertFalse(node0.isWhile());
73:       assertFalse(node0.isTry());
74:       assertTrue(node0.isString());
75:       assertFalse(node0.isStringKey());
76:       assertFalse(node0.isGetterDef());
77:       assertFalse(node0.isNE());
78:       assertFalse(node0.isIf());
79:       assertFalse(node0.hasMoreThanOneChild());
80:       assertFalse(node0.isCast());
81:       assertFalse(node0.isContinue());
82:       assertFalse(node0.isFor());
83:       assertFalse(node0.isInc());
84:       assertEquals(132, node0.getCharno());
85:       assertFalse(node0.isIn());
86:       assertFalse(node0.isThis());
87:       assertFalse(node0.isComma());
88:       assertFalse(node0.isGetProp());
89:       assertFalse(node0.isBreak());
90:       assertFalse(node0.isInstanceOf());
91:       assertFalse(node0.isHook());
92:       assertFalse(node0.isThrow());
93:       assertFalse(node0.isWith());
94:       assertFalse(node0.isFalse());
95:       assertFalse(node0.isSwitch());
96:       assertFalse(node0.isScript());
97:       assertFalse(node0.isCase());
98:       assertFalse(node0.hasOneChild());
99:       assertFalse(node0.isAnd());
100:       assertFalse(node0.isNumber());
101:       assertFalse(node0.isObjectLit());
102:       assertFalse(node0.isNot());
103:       assertFalse(node0.isAssignAdd());
104:       assertFalse(node0.isLabelName());
105:       assertFalse(node0.isDelProp());
106:       assertFalse(node0.isArrayLit());
107:       assertFalse(node0.isGetElem());
108:       assertFalse(node0.isReturn());
109:       assertFalse(node0.isLabel());
110:       assertFalse(node0.hasChildren());
111:       assertFalse(node0.isDec());
112:       assertFalse(node0.isAssign());
113:       assertFalse(node0.isTypeOf());
114:       assertFalse(node0.isAdd());
115:       assertFalse(node0.isExprResult());
116:       assertFalse(node0.isTrue());
117:       assertFalse(node0.isNew());
118:       assertFalse(node0.isDefaultCase());
119:       assertFalse(node0.isDo());
120:       assertFalse(node0.isVoid());
121:       assertEquals(132, node0.getSourcePosition());
122:       assertFalse(node0.isEmpty());
123:       assertFalse(node0.isOr());
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertNotNull(iterable0);
127:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
128:       assertEquals(39, Node.EMPTY_BLOCK);
129:       assertEquals(4095, Node.COLUMN_MASK);
130:       assertEquals(8, Node.FLAG_NO_THROWS);
131:       assertEquals(50, Node.FREE_CALL);
132:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
133:       assertEquals(55, Node.INFERRED_FUNCTION);
134:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
135:       assertEquals(54, Node.SLASH_V);
136:       assertEquals(30, Node.VAR_ARGS_NAME);
137:       assertEquals(40, Node.ORIGINALNAME_PROP);
138:       assertEquals(43, Node.IS_CONSTANT_NAME);
139:       assertEquals(37, Node.OPT_ARG_NAME);
140:       assertEquals(46, Node.IS_NAMESPACE);
141:       assertEquals(51, Node.STATIC_SOURCE_FILE);
142:       assertEquals(47, Node.IS_DISPATCHER);
143:       assertEquals(2, Node.POST_FLAG);
144:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
145:       assertEquals(1, Node.DECR_FLAG);
146:       assertEquals(29, Node.JSDOC_INFO_PROP);
147:       assertEquals(12, Node.COLUMN_BITS);
148:       assertEquals(15, Node.NO_SIDE_EFFECTS);
149:       assertEquals(57, Node.LAST_PROP);
150:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
151:       assertEquals(32, Node.INCRDECR_PROP);
152:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
153:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
154:       assertEquals(53, Node.INPUT_ID);
155:       assertEquals(36, Node.QUOTED_PROP);
156:       assertEquals(57, Node.REFLECTED_OBJECT);
157:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
158:       assertEquals(52, Node.LENGTH);
159:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
160:       assertEquals(56, Node.CHANGE_TIME);
161:       assertEquals(48, Node.DIRECTIVES);
162:       assertEquals(49, Node.DIRECT_EVAL);
163:       assertFalse(node0.isSetterDef());
164:       assertFalse(node0.isParamList());
165:       assertFalse(node0.isNull());
166:       assertEquals(0, node0.getLineno());
167:       assertFalse(node0.isName());
168:       assertFalse(node0.isCatch());
169:       assertFalse(node0.isVar());
170:       assertEquals(40, node0.getType());
171:       assertFalse(node0.isCall());
172:       assertEquals(0, node0.getChildCount());
173:       assertFalse(node0.isRegExp());
174:       assertFalse(node0.isFunction());
175:       assertFalse(node0.isDebugger());
176:       assertFalse(node0.isBlock());
177:       assertFalse(node0.isWhile());
178:       assertFalse(node0.isTry());
179:       assertTrue(node0.isString());
180:       assertFalse(node0.isStringKey());
181:       assertFalse(node0.isGetterDef());
182:       assertFalse(node0.isNE());
183:       assertFalse(node0.isIf());
184:       assertFalse(node0.hasMoreThanOneChild());
185:       assertFalse(node0.isCast());
186:       assertFalse(node0.isContinue());
187:       assertFalse(node0.isFor());
188:       assertFalse(node0.isInc());
189:       assertEquals(132, node0.getCharno());
190:       assertFalse(node0.isIn());
191:       assertFalse(node0.isThis());
192:       assertFalse(node0.isComma());
193:       assertFalse(node0.isGetProp());
194:       assertFalse(node0.isBreak());
195:       assertFalse(node0.isInstanceOf());
196:       assertFalse(node0.isHook());
197:       assertFalse(node0.isThrow());
198:       assertFalse(node0.isWith());
199:       assertFalse(node0.isFalse());
200:       assertFalse(node0.isSwitch());
201:       assertFalse(node0.isScript());
202:       assertFalse(node0.isCase());
203:       assertFalse(node0.hasOneChild());
204:       assertFalse(node0.isAnd());
205:       assertFalse(node0.isNumber());
206:       assertFalse(node0.isObjectLit());
207:       assertFalse(node0.isNot());
208:       assertFalse(node0.isAssignAdd());
209:       assertFalse(node0.isLabelName());
210:       assertFalse(node0.isDelProp());
211:       assertFalse(node0.isArrayLit());
212:       assertFalse(node0.isGetElem());
213:       assertFalse(node0.isReturn());
214:       assertFalse(node0.isLabel());
215:       assertFalse(node0.hasChildren());
216:       assertFalse(node0.isDec());
217:       assertFalse(node0.isAssign());
218:       assertFalse(node0.isTypeOf());
219:       assertFalse(node0.isAdd());
220:       assertFalse(node0.isExprResult());
221:       assertFalse(node0.isTrue());
222:       assertFalse(node0.isNew());
223:       assertFalse(node0.isDefaultCase());
224:       assertFalse(node0.isDo());
225:       assertFalse(node0.isVoid());
226:       assertEquals(132, node0.getSourcePosition());
227:       assertFalse(node0.isEmpty());
228:       assertFalse(node0.isOr());
229:       assertFalse(iterable0.contains(node0));
230:       
231:       node0.setWasEmptyNode(true);
232:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
233:       assertEquals(39, Node.EMPTY_BLOCK);
234:       assertEquals(4095, Node.COLUMN_MASK);
235:       assertEquals(8, Node.FLAG_NO_THROWS);
236:       assertEquals(50, Node.FREE_CALL);
237:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
238:       assertEquals(55, Node.INFERRED_FUNCTION);
239:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
240:       assertEquals(54, Node.SLASH_V);
241:       assertEquals(30, Node.VAR_ARGS_NAME);
242:       assertEquals(40, Node.ORIGINALNAME_PROP);
243:       assertEquals(43, Node.IS_CONSTANT_NAME);
244:       assertEquals(37, Node.OPT_ARG_NAME);
245:       assertEquals(46, Node.IS_NAMESPACE);
246:       assertEquals(51, Node.STATIC_SOURCE_FILE);
247:       assertEquals(47, Node.IS_DISPATCHER);
248:       assertEquals(2, Node.POST_FLAG);
249:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
250:       assertEquals(1, Node.DECR_FLAG);
251:       assertEquals(29, Node.JSDOC_INFO_PROP);
252:       assertEquals(12, Node.COLUMN_BITS);
253:       assertEquals(15, Node.NO_SIDE_EFFECTS);
254:       assertEquals(57, Node.LAST_PROP);
255:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
256:       assertEquals(32, Node.INCRDECR_PROP);
257:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
258:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
259:       assertEquals(53, Node.INPUT_ID);
260:       assertEquals(36, Node.QUOTED_PROP);
261:       assertEquals(57, Node.REFLECTED_OBJECT);
262:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
263:       assertEquals(52, Node.LENGTH);
264:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
265:       assertEquals(56, Node.CHANGE_TIME);
266:       assertEquals(48, Node.DIRECTIVES);
267:       assertEquals(49, Node.DIRECT_EVAL);
268:       assertFalse(node0.isSetterDef());
269:       assertFalse(node0.isParamList());
270:       assertFalse(node0.isNull());
271:       assertEquals(0, node0.getLineno());
272:       assertFalse(node0.isName());
273:       assertFalse(node0.isCatch());
274:       assertFalse(node0.isVar());
275:       assertEquals(40, node0.getType());
276:       assertFalse(node0.isCall());
277:       assertEquals(0, node0.getChildCount());
278:       assertFalse(node0.isRegExp());
279:       assertFalse(node0.isFunction());
280:       assertFalse(node0.isDebugger());
281:       assertFalse(node0.isBlock());
282:       assertFalse(node0.isWhile());
283:       assertFalse(node0.isTry());
284:       assertTrue(node0.isString());
285:       assertFalse(node0.isStringKey());
286:       assertFalse(node0.isGetterDef());
287:       assertFalse(node0.isNE());
288:       assertFalse(node0.isIf());
289:       assertFalse(node0.hasMoreThanOneChild());
290:       assertFalse(node0.isCast());
291:       assertFalse(node0.isContinue());
292:       assertFalse(node0.isFor());
293:       assertFalse(node0.isInc());
294:       assertEquals(132, node0.getCharno());
295:       assertFalse(node0.isIn());
296:       assertFalse(node0.isThis());
297:       assertFalse(node0.isComma());
298:       assertFalse(node0.isGetProp());
299:       assertFalse(node0.isBreak());
300:       assertFalse(node0.isInstanceOf());
301:       assertFalse(node0.isHook());
302:       assertFalse(node0.isThrow());
303:       assertFalse(node0.isWith());
304:       assertFalse(node0.isFalse());
305:       assertFalse(node0.isSwitch());
306:       assertFalse(node0.isScript());
307:       assertFalse(node0.isCase());
308:       assertFalse(node0.hasOneChild());
309:       assertFalse(node0.isAnd());
310:       assertFalse(node0.isNumber());
311:       assertFalse(node0.isObjectLit());
312:       assertFalse(node0.isNot());
313:       assertFalse(node0.isAssignAdd());
314:       assertFalse(node0.isLabelName());
315:       assertFalse(node0.isDelProp());
316:       assertFalse(node0.isArrayLit());
317:       assertFalse(node0.isGetElem());
318:       assertFalse(node0.isReturn());
319:       assertFalse(node0.isLabel());
320:       assertFalse(node0.hasChildren());
321:       assertFalse(node0.isDec());
322:       assertFalse(node0.isAssign());
323:       assertFalse(node0.isTypeOf());
324:       assertFalse(node0.isAdd());
325:       assertFalse(node0.isExprResult());
326:       assertFalse(node0.isTrue());
327:       assertFalse(node0.isNew());
328:       assertFalse(node0.isDefaultCase());
329:       assertFalse(node0.isDo());
330:       assertFalse(node0.isVoid());
331:       assertEquals(132, node0.getSourcePosition());
332:       assertFalse(node0.isEmpty());
333:       assertFalse(node0.isOr());
334:       
335:       Node node1 = node0.cloneNode();
336:       assertFalse(node1.equals((Object)node0));
337:       assertNotNull(node1);
338:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
339:       assertEquals(39, Node.EMPTY_BLOCK);
340:       assertEquals(4095, Node.COLUMN_MASK);
341:       assertEquals(8, Node.FLAG_NO_THROWS);
342:       assertEquals(50, Node.FREE_CALL);
343:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
344:       assertEquals(55, Node.INFERRED_FUNCTION);
345:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
346:       assertEquals(54, Node.SLASH_V);
347:       assertEquals(30, Node.VAR_ARGS_NAME);
348:       assertEquals(40, Node.ORIGINALNAME_PROP);
349:       assertEquals(43, Node.IS_CONSTANT_NAME);
350:       assertEquals(37, Node.OPT_ARG_NAME);
351:       assertEquals(46, Node.IS_NAMESPACE);
352:       assertEquals(51, Node.STATIC_SOURCE_FILE);
353:       assertEquals(47, Node.IS_DISPATCHER);
354:       assertEquals(2, Node.POST_FLAG);
355:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
356:       assertEquals(1, Node.DECR_FLAG);
357:       assertEquals(29, Node.JSDOC_INFO_PROP);
358:       assertEquals(12, Node.COLUMN_BITS);
359:       assertEquals(15, Node.NO_SIDE_EFFECTS);
360:       assertEquals(57, Node.LAST_PROP);
361:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
362:       assertEquals(32, Node.INCRDECR_PROP);
363:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
364:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
365:       assertEquals(53, Node.INPUT_ID);
366:       assertEquals(36, Node.QUOTED_PROP);
367:       assertEquals(57, Node.REFLECTED_OBJECT);
368:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
369:       assertEquals(52, Node.LENGTH);
370:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
371:       assertEquals(56, Node.CHANGE_TIME);
372:       assertEquals(48, Node.DIRECTIVES);
373:       assertEquals(49, Node.DIRECT_EVAL);
374:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
375:       assertEquals(55, Node.INFERRED_FUNCTION);
376:       assertEquals(4095, Node.COLUMN_MASK);
377:       assertEquals(8, Node.FLAG_NO_THROWS);
378:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
379:       assertEquals(43, Node.IS_CONSTANT_NAME);
380:       assertEquals(36, Node.QUOTED_PROP);
381:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
382:       assertEquals(48, Node.DIRECTIVES);
383:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
384:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
385:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
386:       assertEquals(50, Node.FREE_CALL);
387:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
388:       assertEquals(1, Node.DECR_FLAG);
389:       assertEquals(32, Node.INCRDECR_PROP);
390:       assertEquals(46, Node.IS_NAMESPACE);
391:       assertEquals(51, Node.STATIC_SOURCE_FILE);
392:       assertEquals(12, Node.COLUMN_BITS);
393:       assertEquals(2, Node.POST_FLAG);
394:       assertEquals(56, Node.CHANGE_TIME);
395:       assertEquals(37, Node.OPT_ARG_NAME);
396:       assertEquals(54, Node.SLASH_V);
397:       assertEquals(49, Node.DIRECT_EVAL);
398:       assertEquals(40, Node.ORIGINALNAME_PROP);
399:       assertEquals(53, Node.INPUT_ID);
400:       assertEquals(57, Node.REFLECTED_OBJECT);
401:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
402:       assertEquals(52, Node.LENGTH);
403:       assertEquals(57, Node.LAST_PROP);
404:       assertEquals(30, Node.VAR_ARGS_NAME);
405:       assertEquals(29, Node.JSDOC_INFO_PROP);
406:       assertEquals(15, Node.NO_SIDE_EFFECTS);
407:       assertEquals(39, Node.EMPTY_BLOCK);
408:       assertEquals(47, Node.IS_DISPATCHER);
409:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
410:       assertFalse(node0.isSetterDef());
411:       assertFalse(node0.isParamList());
412:       assertFalse(node0.isNull());
413:       assertEquals(0, node0.getLineno());
414:       assertFalse(node0.isName());
415:       assertFalse(node0.isCatch());
416:       assertFalse(node0.isVar());
417:       assertEquals(40, node0.getType());
418:       assertFalse(node0.isCall());
419:       assertEquals(0, node0.getChildCount());
420:       assertFalse(node0.isRegExp());
421:       assertFalse(node0.isFunction());
422:       assertFalse(node0.isDebugger());
423:       assertFalse(node0.isBlock());
424:       assertFalse(node0.isWhile());
425:       assertFalse(node0.isTry());
426:       assertTrue(node0.isString());
427:       assertFalse(node0.isStringKey());
428:       assertFalse(node0.isGetterDef());
429:       assertFalse(node0.isNE());
430:       assertFalse(node0.isIf());
431:       assertFalse(node0.hasMoreThanOneChild());
432:       assertFalse(node0.isCast());
433:       assertFalse(node0.isContinue());
434:       assertFalse(node0.isFor());
435:       assertFalse(node0.isInc());
436:       assertEquals(132, node0.getCharno());
437:       assertFalse(node0.isIn());
438:       assertFalse(node0.isThis());
439:       assertFalse(node0.isComma());
440:       assertFalse(node0.isGetProp());
441:       assertFalse(node0.isBreak());
442:       assertFalse(node0.isInstanceOf());
443:       assertFalse(node0.isHook());
444:       assertFalse(node0.isThrow());
445:       assertFalse(node0.isWith());
446:       assertFalse(node0.isFalse());
447:       assertFalse(node0.isSwitch());
448:       assertFalse(node0.isScript());
449:       assertFalse(node0.isCase());
450:       assertFalse(node0.hasOneChild());
451:       assertFalse(node0.isAnd());
452:       assertFalse(node0.isNumber());
453:       assertFalse(node0.isObjectLit());
454:       assertFalse(node0.isNot());
455:       assertFalse(node0.isAssignAdd());
456:       assertFalse(node0.isLabelName());
457:       assertFalse(node0.isDelProp());
458:       assertFalse(node0.isArrayLit());
459:       assertFalse(node0.isGetElem());
460:       assertFalse(node0.isReturn());
461:       assertFalse(node0.isLabel());
462:       assertFalse(node0.hasChildren());
463:       assertFalse(node0.isDec());
464:       assertFalse(node0.isAssign());
465:       assertFalse(node0.isTypeOf());
466:       assertFalse(node0.isAdd());
467:       assertFalse(node0.isExprResult());
468:       assertFalse(node0.isTrue());
469:       assertFalse(node0.isNew());
470:       assertFalse(node0.isDefaultCase());
471:       assertFalse(node0.isDo());
472:       assertFalse(node0.isVoid());
473:       assertEquals(132, node0.getSourcePosition());
474:       assertFalse(node0.isEmpty());
475:       assertFalse(node0.isOr());
476:       assertEquals(0, node1.getLineno());
477:       assertFalse(node1.isSetterDef());
478:       assertFalse(node1.isNull());
479:       assertFalse(node1.isParamList());
480:       assertFalse(node1.isStringKey());
481:       assertFalse(node1.isTry());
482:       assertFalse(node1.isBlock());
483:       assertFalse(node1.isTrue());
484:       assertEquals(132, node1.getSourcePosition());
485:       assertFalse(node1.isVoid());
486:       assertTrue(node1.isString());
487:       assertFalse(node1.isName());
488:       assertFalse(node1.isFor());
489:       assertFalse(node1.isWhile());
490:       assertFalse(node1.isCall());
491:       assertFalse(node1.isRegExp());
492:       assertFalse(node1.isCatch());
493:       assertFalse(node1.hasMoreThanOneChild());
494:       assertFalse(node1.isReturn());
495:       assertFalse(node1.isNE());
496:       assertFalse(node1.isIf());
497:       assertFalse(node1.isIn());
498:       assertFalse(node1.isDebugger());
499:       assertFalse(node1.isInc());
500:       assertFalse(node1.isThrow());
501:       assertEquals(40, node1.getType());
502:       assertFalse(node1.isCast());
503:       assertFalse(node1.isContinue());
504:       assertFalse(node1.isFalse());
505:       assertFalse(node1.isFunction());
506:       assertFalse(node1.isGetProp());
507:       assertFalse(node1.isThis());
508:       assertFalse(node1.isAnd());
509:       assertFalse(node1.isNot());
510:       assertFalse(node1.isScript());
511:       assertFalse(node1.isObjectLit());
512:       assertFalse(node1.isHook());
513:       assertFalse(node1.isExprResult());
514:       assertFalse(node1.hasOneChild());
515:       assertEquals(132, node1.getCharno());
516:       assertFalse(node1.isAssign());
517:       assertFalse(node1.isBreak());
518:       assertFalse(node1.hasChildren());
519:       assertFalse(node1.isGetElem());
520:       assertFalse(node1.isTypeOf());
521:       assertFalse(node1.isInstanceOf());
522:       assertFalse(node1.isDec());
523:       assertFalse(node1.isComma());
524:       assertFalse(node1.isWith());
525:       assertFalse(node1.isOr());
526:       assertFalse(node1.isLabel());
527:       assertFalse(node1.isAssignAdd());
528:       assertFalse(node1.isDelProp());
529:       assertFalse(node1.isDo());
530:       assertFalse(node1.isEmpty());
531:       assertFalse(node1.isCase());
532:       assertFalse(node1.isGetterDef());
533:       assertFalse(node1.isNumber());
534:       assertFalse(node1.isAdd());
535:       assertFalse(node1.isNew());
536:       assertFalse(node1.isVar());
537:       assertFalse(node1.isArrayLit());
538:       assertFalse(node1.isDefaultCase());
539:       assertFalse(node1.isSwitch());
540:       assertFalse(node1.isLabelName());
541:       assertEquals(0, node1.getChildCount());
542:       assertNotSame(node0, node1);
543:       assertNotSame(node1, node0);
544:       
545:       Node node2 = node0.getLastSibling();
546:       assertFalse(node0.equals((Object)node1));
547:       assertFalse(node2.equals((Object)node1));
548:       assertNotNull(node2);
549:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
550:       assertEquals(39, Node.EMPTY_BLOCK);
551:       assertEquals(4095, Node.COLUMN_MASK);
552:       assertEquals(8, Node.FLAG_NO_THROWS);
553:       assertEquals(50, Node.FREE_CALL);
554:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
555:       assertEquals(55, Node.INFERRED_FUNCTION);
556:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
557:       assertEquals(54, Node.SLASH_V);
558:       assertEquals(30, Node.VAR_ARGS_NAME);
559:       assertEquals(40, Node.ORIGINALNAME_PROP);
560:       assertEquals(43, Node.IS_CONSTANT_NAME);
561:       assertEquals(37, Node.OPT_ARG_NAME);
562:       assertEquals(46, Node.IS_NAMESPACE);
563:       assertEquals(51, Node.STATIC_SOURCE_FILE);
564:       assertEquals(47, Node.IS_DISPATCHER);
565:       assertEquals(2, Node.POST_FLAG);
566:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
567:       assertEquals(1, Node.DECR_FLAG);
568:       assertEquals(29, Node.JSDOC_INFO_PROP);
569:       assertEquals(12, Node.COLUMN_BITS);
570:       assertEquals(15, Node.NO_SIDE_EFFECTS);
571:       assertEquals(57, Node.LAST_PROP);
572:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
573:       assertEquals(32, Node.INCRDECR_PROP);
574:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
575:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
576:       assertEquals(53, Node.INPUT_ID);
577:       assertEquals(36, Node.QUOTED_PROP);
578:       assertEquals(57, Node.REFLECTED_OBJECT);
579:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
580:       assertEquals(52, Node.LENGTH);
581:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
582:       assertEquals(56, Node.CHANGE_TIME);
583:       assertEquals(48, Node.DIRECTIVES);
584:       assertEquals(49, Node.DIRECT_EVAL);
585:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
586:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
587:       assertEquals(29, Node.JSDOC_INFO_PROP);
588:       assertEquals(2, Node.POST_FLAG);
589:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
590:       assertEquals(37, Node.OPT_ARG_NAME);
591:       assertEquals(36, Node.QUOTED_PROP);
592:       assertEquals(43, Node.IS_CONSTANT_NAME);
593:       assertEquals(56, Node.CHANGE_TIME);
594:       assertEquals(4095, Node.COLUMN_MASK);
595:       assertEquals(12, Node.COLUMN_BITS);
596:       assertEquals(46, Node.IS_NAMESPACE);
597:       assertEquals(51, Node.STATIC_SOURCE_FILE);
598:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
599:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
600:       assertEquals(1, Node.DECR_FLAG);
601:       assertEquals(32, Node.INCRDECR_PROP);
602:       assertEquals(57, Node.REFLECTED_OBJECT);
603:       assertEquals(40, Node.ORIGINALNAME_PROP);
604:       assertEquals(52, Node.LENGTH);
605:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
606:       assertEquals(50, Node.FREE_CALL);
607:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
608:       assertEquals(54, Node.SLASH_V);
609:       assertEquals(48, Node.DIRECTIVES);
610:       assertEquals(49, Node.DIRECT_EVAL);
611:       assertEquals(55, Node.INFERRED_FUNCTION);
612:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
613:       assertEquals(30, Node.VAR_ARGS_NAME);
614:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
615:       assertEquals(8, Node.FLAG_NO_THROWS);
616:       assertEquals(39, Node.EMPTY_BLOCK);
617:       assertEquals(15, Node.NO_SIDE_EFFECTS);
618:       assertEquals(47, Node.IS_DISPATCHER);
619:       assertEquals(53, Node.INPUT_ID);
620:       assertEquals(57, Node.LAST_PROP);
621:       assertFalse(node0.isSetterDef());
622:       assertFalse(node0.isParamList());
623:       assertFalse(node0.isNull());
624:       assertEquals(0, node0.getLineno());
625:       assertFalse(node0.isName());
626:       assertFalse(node0.isCatch());
627:       assertFalse(node0.isVar());
628:       assertEquals(40, node0.getType());
629:       assertFalse(node0.isCall());
630:       assertEquals(0, node0.getChildCount());
631:       assertFalse(node0.isRegExp());
632:       assertFalse(node0.isFunction());
633:       assertFalse(node0.isDebugger());
634:       assertFalse(node0.isBlock());
635:       assertFalse(node0.isWhile());
636:       assertFalse(node0.isTry());
637:       assertTrue(node0.isString());
638:       assertFalse(node0.isStringKey());
639:       assertFalse(node0.isGetterDef());
640:       assertFalse(node0.isNE());
641:       assertFalse(node0.isIf());
642:       assertFalse(node0.hasMoreThanOneChild());
643:       assertFalse(node0.isCast());
644:       assertFalse(node0.isContinue());
645:       assertFalse(node0.isFor());
646:       assertFalse(node0.isInc());
647:       assertEquals(132, node0.getCharno());
648:       assertFalse(node0.isIn());
649:       assertFalse(node0.isThis());
650:       assertFalse(node0.isComma());
651:       assertFalse(node0.isGetProp());
652:       assertFalse(node0.isBreak());
653:       assertFalse(node0.isInstanceOf());
654:       assertFalse(node0.isHook());
655:       assertFalse(node0.isThrow());
656:       assertFalse(node0.isWith());
657:       assertFalse(node0.isFalse());
658:       assertFalse(node0.isSwitch());
659:       assertFalse(node0.isScript());
660:       assertFalse(node0.isCase());
661:       assertFalse(node0.hasOneChild());
662:       assertFalse(node0.isAnd());
663:       assertFalse(node0.isNumber());
664:       assertFalse(node0.isObjectLit());
665:       assertFalse(node0.isNot());
666:       assertFalse(node0.isAssignAdd());
667:       assertFalse(node0.isLabelName());
668:       assertFalse(node0.isDelProp());
669:       assertFalse(node0.isArrayLit());
670:       assertFalse(node0.isGetElem());
671:       assertFalse(node0.isReturn());
672:       assertFalse(node0.isLabel());
673:       assertFalse(node0.hasChildren());
674:       assertFalse(node0.isDec());
675:       assertFalse(node0.isAssign());
676:       assertFalse(node0.isTypeOf());
677:       assertFalse(node0.isAdd());
678:       assertFalse(node0.isExprResult());
679:       assertFalse(node0.isTrue());
680:       assertFalse(node0.isNew());
681:       assertFalse(node0.isDefaultCase());
682:       assertFalse(node0.isDo());
683:       assertFalse(node0.isVoid());
684:       assertEquals(132, node0.getSourcePosition());
685:       assertFalse(node0.isEmpty());
686:       assertFalse(node0.isOr());
687:       assertFalse(node2.isArrayLit());
688:       assertFalse(node2.isTry());
689:       assertFalse(node2.isDelProp());
690:       assertFalse(node2.isVoid());
691:       assertFalse(node2.isIf());
692:       assertFalse(node2.isNE());
693:       assertFalse(node2.isEmpty());
694:       assertFalse(node2.isTrue());
695:       assertFalse(node2.isDebugger());
696:       assertFalse(node2.isGetterDef());
697:       assertFalse(node2.isCatch());
698:       assertFalse(node2.isCase());
699:       assertFalse(node2.isFor());
700:       assertFalse(node2.isRegExp());
701:       assertFalse(node2.isThrow());
702:       assertFalse(node2.isSetterDef());
703:       assertFalse(node2.isInc());
704:       assertFalse(node2.isIn());
705:       assertEquals(0, node2.getLineno());
706:       assertFalse(node2.isAnd());
707:       assertEquals(40, node2.getType());
708:       assertFalse(node2.isFalse());
709:       assertFalse(node2.isContinue());
710:       assertFalse(node2.isFunction());
711:       assertFalse(node2.hasOneChild());
712:       assertFalse(node2.isCast());
713:       assertFalse(node2.isGetElem());
714:       assertFalse(node2.isLabelName());
715:       assertFalse(node2.isNumber());
716:       assertFalse(node2.isScript());
717:       assertFalse(node2.isOr());
718:       assertFalse(node2.isObjectLit());
719:       assertFalse(node2.isNot());
720:       assertFalse(node2.isInstanceOf());
721:       assertFalse(node2.isReturn());
722:       assertFalse(node2.isGetProp());
723:       assertEquals(132, node2.getCharno());
724:       assertFalse(node2.isDec());
725:       assertFalse(node2.isBreak());
726:       assertFalse(node2.hasChildren());
727:       assertFalse(node2.isWhile());
728:       assertFalse(node2.isThis());
729:       assertFalse(node2.isExprResult());
730:       assertFalse(node2.isBlock());
731:       assertFalse(node2.hasMoreThanOneChild());
732:       assertFalse(node2.isWith());
733:       assertFalse(node2.isComma());
734:       assertFalse(node2.isAssign());
735:       assertFalse(node2.isTypeOf());
736:       assertFalse(node2.isHook());
737:       assertFalse(node2.isVar());
738:       assertFalse(node2.isAdd());
739:       assertFalse(node2.isCall());
740:       assertFalse(node2.isNew());
741:       assertFalse(node2.isStringKey());
742:       assertEquals(132, node2.getSourcePosition());
743:       assertFalse(node2.isSwitch());
744:       assertTrue(node2.isString());
745:       assertFalse(node2.isName());
746:       assertFalse(node2.isParamList());
747:       assertFalse(node2.isNull());
748:       assertEquals(0, node2.getChildCount());
749:       assertFalse(node2.isAssignAdd());
750:       assertFalse(node2.isDo());
751:       assertFalse(node2.isDefaultCase());
752:       assertFalse(node2.isLabel());
753:       assertNotSame(node0, node1);
754:       assertSame(node0, node2);
755:       assertSame(node2, node0);
756:       assertNotSame(node2, node1);
757:       
758:       Node node3 = Node.newNumber((-2202.05778), 37, 1322);
759:       assertFalse(node3.equals((Object)node0));
760:       assertFalse(node3.equals((Object)node1));
761:       assertFalse(node3.equals((Object)node2));
762:       assertNotNull(node3);
763:       assertEquals(29, Node.JSDOC_INFO_PROP);
764:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
765:       assertEquals(53, Node.INPUT_ID);
766:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
767:       assertEquals(36, Node.QUOTED_PROP);
768:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
769:       assertEquals(43, Node.IS_CONSTANT_NAME);
770:       assertEquals(56, Node.CHANGE_TIME);
771:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
772:       assertEquals(8, Node.FLAG_NO_THROWS);
773:       assertEquals(39, Node.EMPTY_BLOCK);
774:       assertEquals(55, Node.INFERRED_FUNCTION);
775:       assertEquals(15, Node.NO_SIDE_EFFECTS);
776:       assertEquals(57, Node.LAST_PROP);
777:       assertEquals(47, Node.IS_DISPATCHER);
778:       assertEquals(2, Node.POST_FLAG);
779:       assertEquals(30, Node.VAR_ARGS_NAME);
780:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
781:       assertEquals(52, Node.LENGTH);
782:       assertEquals(57, Node.REFLECTED_OBJECT);
783:       assertEquals(40, Node.ORIGINALNAME_PROP);
784:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
785:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
786:       assertEquals(49, Node.DIRECT_EVAL);
787:       assertEquals(50, Node.FREE_CALL);
788:       assertEquals(54, Node.SLASH_V);
789:       assertEquals(32, Node.INCRDECR_PROP);
790:       assertEquals(46, Node.IS_NAMESPACE);
791:       assertEquals(48, Node.DIRECTIVES);
792:       assertEquals(51, Node.STATIC_SOURCE_FILE);
793:       assertEquals(37, Node.OPT_ARG_NAME);
794:       assertEquals(4095, Node.COLUMN_MASK);
795:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
796:       assertEquals(1, Node.DECR_FLAG);
797:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
798:       assertEquals(12, Node.COLUMN_BITS);
799:       assertFalse(node3.isTry());
800:       assertFalse(node3.isDebugger());
801:       assertFalse(node3.isVoid());
802:       assertFalse(node3.isDefaultCase());
803:       assertFalse(node3.isTrue());
804:       assertFalse(node3.isEmpty());
805:       assertFalse(node3.isGetterDef());
806:       assertEquals(0, node3.getChildCount());
807:       assertFalse(node3.isParamList());
808:       assertFalse(node3.isArrayLit());
809:       assertEquals(37, node3.getLineno());
810:       assertFalse(node3.isFunction());
811:       assertFalse(node3.isAdd());
812:       assertFalse(node3.isNew());
813:       assertFalse(node3.isVar());
814:       assertFalse(node3.isWhile());
815:       assertFalse(node3.isDo());
816:       assertFalse(node3.isString());
817:       assertFalse(node3.isGetProp());
818:       assertFalse(node3.isReturn());
819:       assertFalse(node3.isOr());
820:       assertTrue(node3.isNumber());
821:       assertFalse(node3.isComma());
822:       assertFalse(node3.isNull());
823:       assertFalse(node3.isName());
824:       assertFalse(node3.isGetElem());
825:       assertFalse(node3.isDelProp());
826:       assertFalse(node3.isBreak());
827:       assertFalse(node3.hasChildren());
828:       assertFalse(node3.isAssign());
829:       assertFalse(node3.isDec());
830:       assertFalse(node3.isTypeOf());
831:       assertFalse(node3.isExprResult());
832:       assertFalse(node3.isCall());
833:       assertFalse(node3.hasOneChild());
834:       assertEquals(152874, node3.getSourcePosition());
835:       assertFalse(node3.isNot());
836:       assertFalse(node3.isObjectLit());
837:       assertFalse(node3.isScript());
838:       assertFalse(node3.isLabel());
839:       assertFalse(node3.isAssignAdd());
840:       assertFalse(node3.isAnd());
841:       assertFalse(node3.isLabelName());
842:       assertFalse(node3.isFalse());
843:       assertFalse(node3.isContinue());
844:       assertFalse(node3.isCast());
845:       assertEquals(1322, node3.getCharno());
846:       assertFalse(node3.isBlock());
847:       assertFalse(node3.isHook());
848:       assertFalse(node3.isSwitch());
849:       assertFalse(node3.isStringKey());
850:       assertFalse(node3.isThrow());
851:       assertFalse(node3.isCase());
852:       assertFalse(node3.isSetterDef());
853:       assertFalse(node3.isIn());
854:       assertFalse(node3.isInc());
855:       assertFalse(node3.isThis());
856:       assertFalse(node3.isIf());
857:       assertFalse(node3.isNE());
858:       assertFalse(node3.isFor());
859:       assertEquals(39, node3.getType());
860:       assertFalse(node3.isWith());
861:       assertFalse(node3.isRegExp());
862:       assertFalse(node3.hasMoreThanOneChild());
863:       assertFalse(node3.isCatch());
864:       assertFalse(node3.isInstanceOf());
865:       
866:       Object object0 = node2.getProp(48);
867:       assertFalse(node0.equals((Object)node3));
868:       assertFalse(node0.equals((Object)node1));
869:       assertFalse(node2.equals((Object)node3));
870:       assertFalse(node2.equals((Object)node1));
871:       assertNull(object0);
872:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
873:       assertEquals(39, Node.EMPTY_BLOCK);
874:       assertEquals(4095, Node.COLUMN_MASK);
875:       assertEquals(8, Node.FLAG_NO_THROWS);
876:       assertEquals(50, Node.FREE_CALL);
877:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
878:       assertEquals(55, Node.INFERRED_FUNCTION);
879:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
880:       assertEquals(54, Node.SLASH_V);
881:       assertEquals(30, Node.VAR_ARGS_NAME);
882:       assertEquals(40, Node.ORIGINALNAME_PROP);
883:       assertEquals(43, Node.IS_CONSTANT_NAME);
884:       assertEquals(37, Node.OPT_ARG_NAME);
885:       assertEquals(46, Node.IS_NAMESPACE);
886:       assertEquals(51, Node.STATIC_SOURCE_FILE);
887:       assertEquals(47, Node.IS_DISPATCHER);
888:       assertEquals(2, Node.POST_FLAG);
889:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
890:       assertEquals(1, Node.DECR_FLAG);
891:       assertEquals(29, Node.JSDOC_INFO_PROP);
892:       assertEquals(12, Node.COLUMN_BITS);
893:       assertEquals(15, Node.NO_SIDE_EFFECTS);
894:       assertEquals(57, Node.LAST_PROP);
895:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
896:       assertEquals(32, Node.INCRDECR_PROP);
897:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
898:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
899:       assertEquals(53, Node.INPUT_ID);
900:       assertEquals(36, Node.QUOTED_PROP);
901:       assertEquals(57, Node.REFLECTED_OBJECT);
902:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
903:       assertEquals(52, Node.LENGTH);
904:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
905:       assertEquals(56, Node.CHANGE_TIME);
906:       assertEquals(48, Node.DIRECTIVES);
907:       assertEquals(49, Node.DIRECT_EVAL);
908:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
909:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
910:       assertEquals(29, Node.JSDOC_INFO_PROP);
911:       assertEquals(2, Node.POST_FLAG);
912:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
913:       assertEquals(37, Node.OPT_ARG_NAME);
914:       assertEquals(36, Node.QUOTED_PROP);
915:       assertEquals(43, Node.IS_CONSTANT_NAME);
916:       assertEquals(56, Node.CHANGE_TIME);
917:       assertEquals(4095, Node.COLUMN_MASK);
918:       assertEquals(12, Node.COLUMN_BITS);
919:       assertEquals(46, Node.IS_NAMESPACE);
920:       assertEquals(51, Node.STATIC_SOURCE_FILE);
921:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
922:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
923:       assertEquals(1, Node.DECR_FLAG);
924:       assertEquals(32, Node.INCRDECR_PROP);
925:       assertEquals(57, Node.REFLECTED_OBJECT);
926:       assertEquals(40, Node.ORIGINALNAME_PROP);
927:       assertEquals(52, Node.LENGTH);
928:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
929:       assertEquals(50, Node.FREE_CALL);
930:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
931:       assertEquals(54, Node.SLASH_V);
932:       assertEquals(48, Node.DIRECTIVES);
933:       assertEquals(49, Node.DIRECT_EVAL);
934:       assertEquals(55, Node.INFERRED_FUNCTION);
935:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
936:       assertEquals(30, Node.VAR_ARGS_NAME);
937:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
938:       assertEquals(8, Node.FLAG_NO_THROWS);
939:       assertEquals(39, Node.EMPTY_BLOCK);
940:       assertEquals(15, Node.NO_SIDE_EFFECTS);
941:       assertEquals(47, Node.IS_DISPATCHER);
942:       assertEquals(53, Node.INPUT_ID);
943:       assertEquals(57, Node.LAST_PROP);
944:       assertFalse(node0.isSetterDef());
945:       assertFalse(node0.isParamList());
946:       assertFalse(node0.isNull());
947:       assertEquals(0, node0.getLineno());
948:       assertFalse(node0.isName());
949:       assertFalse(node0.isCatch());
950:       assertFalse(node0.isVar());
951:       assertEquals(40, node0.getType());
952:       assertFalse(node0.isCall());
953:       assertEquals(0, node0.getChildCount());
954:       assertFalse(node0.isRegExp());
955:       assertFalse(node0.isFunction());
956:       assertFalse(node0.isDebugger());
957:       assertFalse(node0.isBlock());
958:       assertFalse(node0.isWhile());
959:       assertFalse(node0.isTry());
960:       assertTrue(node0.isString());
961:       assertFalse(node0.isStringKey());
962:       assertFalse(node0.isGetterDef());
963:       assertFalse(node0.isNE());
964:       assertFalse(node0.isIf());
965:       assertFalse(node0.hasMoreThanOneChild());
966:       assertFalse(node0.isCast());
967:       assertFalse(node0.isContinue());
968:       assertFalse(node0.isFor());
969:       assertFalse(node0.isInc());
970:       assertEquals(132, node0.getCharno());
971:       assertFalse(node0.isIn());
972:       assertFalse(node0.isThis());
973:       assertFalse(node0.isComma());
974:       assertFalse(node0.isGetProp());
975:       assertFalse(node0.isBreak());
976:       assertFalse(node0.isInstanceOf());
977:       assertFalse(node0.isHook());
978:       assertFalse(node0.isThrow());
979:       assertFalse(node0.isWith());
980:       assertFalse(node0.isFalse());
981:       assertFalse(node0.isSwitch());
982:       assertFalse(node0.isScript());
983:       assertFalse(node0.isCase());
984:       assertFalse(node0.hasOneChild());
985:       assertFalse(node0.isAnd());
986:       assertFalse(node0.isNumber());
987:       assertFalse(node0.isObjectLit());
988:       assertFalse(node0.isNot());
989:       assertFalse(node0.isAssignAdd());
990:       assertFalse(node0.isLabelName());
991:       assertFalse(node0.isDelProp());
992:       assertFalse(node0.isArrayLit());
993:       assertFalse(node0.isGetElem());
994:       assertFalse(node0.isReturn());
995:       assertFalse(node0.isLabel());
996:       assertFalse(node0.hasChildren());
997:       assertFalse(node0.isDec());
998:       assertFalse(node0.isAssign());
999:       assertFalse(node0.isTypeOf());
1000:       assertFalse(node0.isAdd());
1001:       assertFalse(node0.isExprResult());
1002:       assertFalse(node0.isTrue());
1003:       assertFalse(node0.isNew());
1004:       assertFalse(node0.isDefaultCase());
1005:       assertFalse(node0.isDo());
1006:       assertFalse(node0.isVoid());
1007:       assertEquals(132, node0.getSourcePosition());
1008:       assertFalse(node0.isEmpty());
1009:       assertFalse(node0.isOr());
1010:       assertFalse(node2.isArrayLit());
1011:       assertFalse(node2.isTry());
1012:       assertFalse(node2.isDelProp());
1013:       assertFalse(node2.isVoid());
1014:       assertFalse(node2.isIf());
1015:       assertFalse(node2.isNE());
1016:       assertFalse(node2.isEmpty());
1017:       assertFalse(node2.isTrue());
1018:       assertFalse(node2.isDebugger());
1019:       assertFalse(node2.isGetterDef());
1020:       assertFalse(node2.isCatch());
1021:       assertFalse(node2.isCase());
1022:       assertFalse(node2.isFor());
1023:       assertFalse(node2.isRegExp());
1024:       assertFalse(node2.isThrow());
1025:       assertFalse(node2.isSetterDef());
1026:       assertFalse(node2.isInc());
1027:       assertFalse(node2.isIn());
1028:       assertEquals(0, node2.getLineno());
1029:       assertFalse(node2.isAnd());
1030:       assertEquals(40, node2.getType());
1031:       assertFalse(node2.isFalse());
1032:       assertFalse(node2.isContinue());
1033:       assertFalse(node2.isFunction());
1034:       assertFalse(node2.hasOneChild());
1035:       assertFalse(node2.isCast());
1036:       assertFalse(node2.isGetElem());
1037:       assertFalse(node2.isLabelName());
1038:       assertFalse(node2.isNumber());
1039:       assertFalse(node2.isScript());
1040:       assertFalse(node2.isOr());
1041:       assertFalse(node2.isObjectLit());
1042:       assertFalse(node2.isNot());
1043:       assertFalse(node2.isInstanceOf());
1044:       assertFalse(node2.isReturn());
1045:       assertFalse(node2.isGetProp());
1046:       assertEquals(132, node2.getCharno());
1047:       assertFalse(node2.isDec());
1048:       assertFalse(node2.isBreak());
1049:       assertFalse(node2.hasChildren());
1050:       assertFalse(node2.isWhile());
1051:       assertFalse(node2.isThis());
1052:       assertFalse(node2.isExprResult());
1053:       assertFalse(node2.isBlock());
1054:       assertFalse(node2.hasMoreThanOneChild());
1055:       assertFalse(node2.isWith());
1056:       assertFalse(node2.isComma());
1057:       assertFalse(node2.isAssign());
1058:       assertFalse(node2.isTypeOf());
1059:       assertFalse(node2.isHook());
1060:       assertFalse(node2.isVar());
1061:       assertFalse(node2.isAdd());
1062:       assertFalse(node2.isCall());
1063:       assertFalse(node2.isNew());
1064:       assertFalse(node2.isStringKey());
1065:       assertEquals(132, node2.getSourcePosition());
1066:       assertFalse(node2.isSwitch());
1067:       assertTrue(node2.isString());
1068:       assertFalse(node2.isName());
1069:       assertFalse(node2.isParamList());
1070:       assertFalse(node2.isNull());
1071:       assertEquals(0, node2.getChildCount());
1072:       assertFalse(node2.isAssignAdd());
1073:       assertFalse(node2.isDo());
1074:       assertFalse(node2.isDefaultCase());
1075:       assertFalse(node2.isLabel());
1076:       assertNotSame(node0, node1);
1077:       assertSame(node0, node2);
1078:       assertSame(node2, node0);
1079:       assertNotSame(node2, node1);
1080:   }
1081: }
RegularFileObject[/tmp/EvoSuite_318_1628161082300/com/google/javascript/rhino/Node_318_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:58:02 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_318_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_318_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_318_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.Token",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.common.collect.AbstractIndexedListIterator",
332:       "com.google.common.collect.Iterators$11",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.common.collect.Sets",
338:       "com.google.javascript.rhino.JSTypeExpression",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.javascript.rhino.Node$AncestorIterable$1",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.common.collect.Iterables",
344:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
345:       "com.google.javascript.rhino.jstype.TemplatizedType",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
349:       "com.google.common.collect.Iterators$12",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.common.collect.Platform",
361:       "com.google.common.collect.AbstractMultimap$Values",
362:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
363:       "com.google.common.collect.AbstractMapBasedMultimap$1",
364:       "com.google.common.collect.Multimaps$Entries",
365:       "com.google.common.collect.AbstractMultimap$Entries",
366:       "com.google.common.collect.AbstractMapBasedMultimap$2",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
368:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
370:       "com.google.common.collect.ImmutableList$1"
371:     );
372:   }
373: }

[MASTER] 10:58:02.422 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("", 0, 132);
assertNotNull(node0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertEquals(132, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals(132, node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertEquals(132, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals(132, node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(iterable0.contains(node0));

node0.setWasEmptyNode(true);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertEquals(132, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals(132, node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());

Node node1 = node0.cloneNode();
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertEquals(132, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals(132, node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertEquals(0, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isTrue());
assertEquals(132, node1.getSourcePosition());
assertFalse(node1.isVoid());
assertTrue(node1.isString());
assertFalse(node1.isName());
assertFalse(node1.isFor());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isIn());
assertFalse(node1.isDebugger());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertEquals(40, node1.getType());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isHook());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertEquals(132, node1.getCharno());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertNotSame(node0, node1);
assertNotSame(node1, node0);

Node node2 = node0.getLastSibling();
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertEquals(132, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals(132, node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertEquals(0, node2.getLineno());
assertFalse(node2.isAnd());
assertEquals(40, node2.getType());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isFunction());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isOr());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertEquals(132, node2.getCharno());
assertFalse(node2.isDec());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isWhile());
assertFalse(node2.isThis());
assertFalse(node2.isExprResult());
assertFalse(node2.isBlock());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isHook());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isNew());
assertFalse(node2.isStringKey());
assertEquals(132, node2.getSourcePosition());
assertFalse(node2.isSwitch());
assertTrue(node2.isString());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertNotSame(node0, node1);
assertSame(node0, node2);
assertSame(node2, node0);
assertNotSame(node2, node1);

Node node3 = Node.newNumber((-2202.05778), 37, 1322);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertNotNull(node3);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isVoid());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetterDef());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isParamList());
assertFalse(node3.isArrayLit());
assertEquals(37, node3.getLineno());
assertFalse(node3.isFunction());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isVar());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.isString());
assertFalse(node3.isGetProp());
assertFalse(node3.isReturn());
assertFalse(node3.isOr());
assertTrue(node3.isNumber());
assertFalse(node3.isComma());
assertFalse(node3.isNull());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.hasChildren());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isExprResult());
assertFalse(node3.isCall());
assertFalse(node3.hasOneChild());
assertEquals(152874, node3.getSourcePosition());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isScript());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isAnd());
assertFalse(node3.isLabelName());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());
assertEquals(1322, node3.getCharno());
assertFalse(node3.isBlock());
assertFalse(node3.isHook());
assertFalse(node3.isSwitch());
assertFalse(node3.isStringKey());
assertFalse(node3.isThrow());
assertFalse(node3.isCase());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isInc());
assertFalse(node3.isThis());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertEquals(39, node3.getType());
assertFalse(node3.isWith());
assertFalse(node3.isRegExp());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());

Object object0 = node2.getProp(48);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertNull(object0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertEquals(132, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals(132, node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertEquals(0, node2.getLineno());
assertFalse(node2.isAnd());
assertEquals(40, node2.getType());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isFunction());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isOr());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertEquals(132, node2.getCharno());
assertFalse(node2.isDec());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isWhile());
assertFalse(node2.isThis());
assertFalse(node2.isExprResult());
assertFalse(node2.isBlock());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isHook());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isNew());
assertFalse(node2.isStringKey());
assertEquals(132, node2.getSourcePosition());
assertFalse(node2.isSwitch());
assertTrue(node2.isString());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertNotSame(node0, node1);
assertSame(node0, node2);
assertSame(node2, node0);
assertNotSame(node2, node1);


[MASTER] 10:58:30.678 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:30.984 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:31.227 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:31.489 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:31.682 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:31.871 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:32.138 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:32.345 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:32.539 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:32.745 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:32.996 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:33.182 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:33.361 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:33.547 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:33.796 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:33.987 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:34.165 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:34.397 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:35.055 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:35.290 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:35.553 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:35.753 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:35.929 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/24
* Done!

* Computation finished
