* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 12924
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 1904012283
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:00:11.715 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:00:13.406 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1920: com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;:566 - ReplaceComparisonOperator <= -> <
[MASTER] 10:00:13.411 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.getFirstChild()Lcom/google/javascript/rhino/Node;
[MASTER] 10:00:13.424 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;
[MASTER] 10:01:01.125 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 10:07:10.154 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 10:09:29.910 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 604s and 710 generations, 320824 statements, best individual has fitness: 2668.0
* Minimizing test suite
* Going to analyze the coverage criteria
[MASTER] 10:11:32.223 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 853
* Number of covered goals: 808
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 714
* Number of covered goals: 625
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 109
* Number of covered goals: 109
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 89%
* Total number of goals: 530
* Number of covered goals: 474
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 52%
* Total number of goals: 4536
* Number of covered goals: 2350
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 714
* Number of covered goals: 591
* Generated 1143 tests with total length 12674
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:12:49.055 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6860166666666667% of time used, but only 88/1143 tests minimized), falling back to using all assertions
[MASTER] 10:13:08.115 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 16%
* Compiling and checking tests
[MASTER] 10:13:19.754 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 11 seconds more than allowed.
[MASTER] 10:13:37.822 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_252_1628158417591/com/google/javascript/rhino/Node_252_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_252_1628158417591/com/google/javascript/rhino/Node_252_tmp__ESTest_scaffolding.java]]
[MASTER] 10:13:37.822 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:37.822 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:37.825 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 350
[MASTER] 10:13:37.827 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_252_1628158417591/com/google/javascript/rhino/Node_252_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:13:37 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.JSType;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import java.util.Stack;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_252_tmp__ESTest extends Node_252_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
25:       assertNotNull(simpleErrorReporter0);
26:       
27:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
28:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
29:       assertNotNull(jSTypeRegistry0);
30:       
31:       JSType[] jSTypeArray0 = new JSType[0];
32:       Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
33:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
34:       assertEquals(83, node0.getType());
35:       assertFalse(node0.isComma());
36:       assertFalse(node0.isGetProp());
37:       assertFalse(node0.isBreak());
38:       assertFalse(node0.isObjectLit());
39:       assertFalse(node0.isAnd());
40:       assertTrue(node0.isParamList());
41:       assertFalse(node0.isNot());
42:       assertEquals((-1), node0.getCharno());
43:       assertFalse(node0.isScript());
44:       assertFalse(node0.isWith());
45:       assertFalse(node0.isCase());
46:       assertFalse(node0.isString());
47:       assertFalse(node0.isExprResult());
48:       assertFalse(node0.hasOneChild());
49:       assertFalse(node0.isInstanceOf());
50:       assertFalse(node0.isAssign());
51:       assertFalse(node0.hasChildren());
52:       assertFalse(node0.isHook());
53:       assertFalse(node0.isThis());
54:       assertFalse(node0.isDec());
55:       assertFalse(node0.isGetterDef());
56:       assertFalse(node0.isDelProp());
57:       assertFalse(node0.isTypeOf());
58:       assertFalse(node0.isNumber());
59:       assertFalse(node0.isEmpty());
60:       assertFalse(node0.isLabelName());
61:       assertFalse(node0.isGetElem());
62:       assertFalse(node0.isArrayLit());
63:       assertFalse(node0.isOr());
64:       assertFalse(node0.isTrue());
65:       assertFalse(node0.isSwitch());
66:       assertFalse(node0.isDefaultCase());
67:       assertFalse(node0.isAdd());
68:       assertFalse(node0.isDo());
69:       assertFalse(node0.isNew());
70:       assertFalse(node0.isVar());
71:       assertEquals(0, node0.getChildCount());
72:       assertFalse(node0.isLabel());
73:       assertFalse(node0.isAssignAdd());
74:       assertFalse(node0.isCall());
75:       assertFalse(node0.isSetterDef());
76:       assertFalse(node0.isName());
77:       assertFalse(node0.isStringKey());
78:       assertFalse(node0.isNull());
79:       assertFalse(node0.isRegExp());
80:       assertFalse(node0.isVoid());
81:       assertFalse(node0.isTry());
82:       assertFalse(node0.isCatch());
83:       assertFalse(node0.hasMoreThanOneChild());
84:       assertFalse(node0.isFor());
85:       assertFalse(node0.isWhile());
86:       assertFalse(node0.isReturn());
87:       assertFalse(node0.isBlock());
88:       assertFalse(node0.isNE());
89:       assertEquals((-1), node0.getSourcePosition());
90:       assertFalse(node0.isIf());
91:       assertEquals((-1), node0.getLineno());
92:       assertFalse(node0.isIn());
93:       assertFalse(node0.isDebugger());
94:       assertFalse(node0.isFunction());
95:       assertFalse(node0.isInc());
96:       assertFalse(node0.isCast());
97:       assertFalse(node0.isContinue());
98:       assertFalse(node0.isFalse());
99:       assertFalse(node0.isThrow());
100:       assertEquals(0, jSTypeArray0.length);
101:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
102:       assertEquals(8, Node.FLAG_NO_THROWS);
103:       assertEquals(39, Node.EMPTY_BLOCK);
104:       assertEquals(48, Node.DIRECTIVES);
105:       assertEquals(55, Node.INFERRED_FUNCTION);
106:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
107:       assertEquals(57, Node.REFLECTED_OBJECT);
108:       assertEquals(52, Node.LENGTH);
109:       assertEquals(50, Node.FREE_CALL);
110:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
111:       assertEquals(54, Node.SLASH_V);
112:       assertEquals(15, Node.NO_SIDE_EFFECTS);
113:       assertEquals(53, Node.INPUT_ID);
114:       assertEquals(43, Node.IS_CONSTANT_NAME);
115:       assertEquals(57, Node.LAST_PROP);
116:       assertEquals(40, Node.ORIGINALNAME_PROP);
117:       assertEquals(30, Node.VAR_ARGS_NAME);
118:       assertEquals(2, Node.POST_FLAG);
119:       assertEquals(47, Node.IS_DISPATCHER);
120:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
121:       assertEquals(37, Node.OPT_ARG_NAME);
122:       assertEquals(32, Node.INCRDECR_PROP);
123:       assertEquals(46, Node.IS_NAMESPACE);
124:       assertEquals(56, Node.CHANGE_TIME);
125:       assertEquals(51, Node.STATIC_SOURCE_FILE);
126:       assertEquals(1, Node.DECR_FLAG);
127:       assertEquals(29, Node.JSDOC_INFO_PROP);
128:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
129:       assertEquals(36, Node.QUOTED_PROP);
130:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
131:       assertEquals(49, Node.DIRECT_EVAL);
132:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
133:       assertEquals(12, Node.COLUMN_BITS);
134:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
135:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
136:       assertEquals(4095, Node.COLUMN_MASK);
137:       assertNotNull(node0);
138:       
139:       Node node1 = new Node(55, node0, node0, node0);
140:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
141:       assertEquals(83, node0.getType());
142:       assertFalse(node0.isComma());
143:       assertFalse(node0.isGetProp());
144:       assertFalse(node0.isBreak());
145:       assertFalse(node0.isObjectLit());
146:       assertFalse(node0.isAnd());
147:       assertTrue(node0.isParamList());
148:       assertFalse(node0.isNot());
149:       assertEquals((-1), node0.getCharno());
150:       assertFalse(node0.isScript());
151:       assertFalse(node0.isWith());
152:       assertFalse(node0.isCase());
153:       assertFalse(node0.isString());
154:       assertFalse(node0.isExprResult());
155:       assertFalse(node0.hasOneChild());
156:       assertFalse(node0.isInstanceOf());
157:       assertFalse(node0.isAssign());
158:       assertFalse(node0.hasChildren());
159:       assertFalse(node0.isHook());
160:       assertFalse(node0.isThis());
161:       assertFalse(node0.isDec());
162:       assertFalse(node0.isGetterDef());
163:       assertFalse(node0.isDelProp());
164:       assertFalse(node0.isTypeOf());
165:       assertFalse(node0.isNumber());
166:       assertFalse(node0.isEmpty());
167:       assertFalse(node0.isLabelName());
168:       assertFalse(node0.isGetElem());
169:       assertFalse(node0.isArrayLit());
170:       assertFalse(node0.isOr());
171:       assertFalse(node0.isTrue());
172:       assertFalse(node0.isSwitch());
173:       assertFalse(node0.isDefaultCase());
174:       assertFalse(node0.isAdd());
175:       assertFalse(node0.isDo());
176:       assertFalse(node0.isNew());
177:       assertFalse(node0.isVar());
178:       assertEquals(0, node0.getChildCount());
179:       assertFalse(node0.isLabel());
180:       assertFalse(node0.isAssignAdd());
181:       assertFalse(node0.isCall());
182:       assertFalse(node0.isSetterDef());
183:       assertFalse(node0.isName());
184:       assertFalse(node0.isStringKey());
185:       assertFalse(node0.isNull());
186:       assertFalse(node0.isRegExp());
187:       assertFalse(node0.isVoid());
188:       assertFalse(node0.isTry());
189:       assertFalse(node0.isCatch());
190:       assertFalse(node0.hasMoreThanOneChild());
191:       assertFalse(node0.isFor());
192:       assertFalse(node0.isWhile());
193:       assertFalse(node0.isReturn());
194:       assertFalse(node0.isBlock());
195:       assertFalse(node0.isNE());
196:       assertEquals((-1), node0.getSourcePosition());
197:       assertFalse(node0.isIf());
198:       assertEquals((-1), node0.getLineno());
199:       assertFalse(node0.isIn());
200:       assertFalse(node0.isDebugger());
201:       assertFalse(node0.isFunction());
202:       assertFalse(node0.isInc());
203:       assertFalse(node0.isCast());
204:       assertFalse(node0.isContinue());
205:       assertFalse(node0.isFalse());
206:       assertFalse(node0.isThrow());
207:       assertFalse(node1.isCase());
208:       assertEquals((-1), node1.getCharno());
209:       assertFalse(node1.isSwitch());
210:       assertFalse(node1.isHook());
211:       assertEquals(1, node1.getChildCount());
212:       assertFalse(node1.isFalse());
213:       assertTrue(node1.hasChildren());
214:       assertFalse(node1.isBreak());
215:       assertFalse(node1.isIf());
216:       assertFalse(node1.isDelProp());
217:       assertFalse(node1.isThrow());
218:       assertFalse(node1.isNE());
219:       assertFalse(node1.isIn());
220:       assertFalse(node1.isInc());
221:       assertFalse(node1.isEmpty());
222:       assertFalse(node1.isNot());
223:       assertFalse(node1.isDebugger());
224:       assertFalse(node1.isVoid());
225:       assertFalse(node1.isTrue());
226:       assertFalse(node1.isAnd());
227:       assertFalse(node1.isExprResult());
228:       assertFalse(node1.isGetElem());
229:       assertFalse(node1.isFunction());
230:       assertFalse(node1.isCast());
231:       assertFalse(node1.isDec());
232:       assertFalse(node1.isTypeOf());
233:       assertFalse(node1.isComma());
234:       assertFalse(node1.isAssign());
235:       assertTrue(node1.hasOneChild());
236:       assertEquals((-1), node1.getSourcePosition());
237:       assertFalse(node1.isGetProp());
238:       assertFalse(node1.isObjectLit());
239:       assertFalse(node1.isString());
240:       assertFalse(node1.isDo());
241:       assertFalse(node1.isBlock());
242:       assertFalse(node1.isWhile());
243:       assertFalse(node1.isReturn());
244:       assertFalse(node1.isLabel());
245:       assertEquals((-1), node1.getLineno());
246:       assertFalse(node1.isCall());
247:       assertFalse(node1.hasMoreThanOneChild());
248:       assertFalse(node1.isContinue());
249:       assertFalse(node1.isNull());
250:       assertFalse(node1.isSetterDef());
251:       assertFalse(node1.isName());
252:       assertFalse(node1.isAssignAdd());
253:       assertFalse(node1.isVar());
254:       assertFalse(node1.isOr());
255:       assertFalse(node1.isNew());
256:       assertFalse(node1.isAdd());
257:       assertFalse(node1.isDefaultCase());
258:       assertFalse(node1.isScript());
259:       assertFalse(node1.isRegExp());
260:       assertFalse(node1.isInstanceOf());
261:       assertFalse(node1.isArrayLit());
262:       assertFalse(node1.isWith());
263:       assertFalse(node1.isCatch());
264:       assertFalse(node1.isNumber());
265:       assertFalse(node1.isGetterDef());
266:       assertFalse(node1.isLabelName());
267:       assertEquals(55, node1.getType());
268:       assertFalse(node1.isStringKey());
269:       assertFalse(node1.isFor());
270:       assertFalse(node1.isThis());
271:       assertFalse(node1.isParamList());
272:       assertFalse(node1.isTry());
273:       assertEquals(0, jSTypeArray0.length);
274:       assertFalse(node1.equals((Object)node0));
275:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
276:       assertEquals(8, Node.FLAG_NO_THROWS);
277:       assertEquals(39, Node.EMPTY_BLOCK);
278:       assertEquals(48, Node.DIRECTIVES);
279:       assertEquals(55, Node.INFERRED_FUNCTION);
280:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
281:       assertEquals(57, Node.REFLECTED_OBJECT);
282:       assertEquals(52, Node.LENGTH);
283:       assertEquals(50, Node.FREE_CALL);
284:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
285:       assertEquals(54, Node.SLASH_V);
286:       assertEquals(15, Node.NO_SIDE_EFFECTS);
287:       assertEquals(53, Node.INPUT_ID);
288:       assertEquals(43, Node.IS_CONSTANT_NAME);
289:       assertEquals(57, Node.LAST_PROP);
290:       assertEquals(40, Node.ORIGINALNAME_PROP);
291:       assertEquals(30, Node.VAR_ARGS_NAME);
292:       assertEquals(2, Node.POST_FLAG);
293:       assertEquals(47, Node.IS_DISPATCHER);
294:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
295:       assertEquals(37, Node.OPT_ARG_NAME);
296:       assertEquals(32, Node.INCRDECR_PROP);
297:       assertEquals(46, Node.IS_NAMESPACE);
298:       assertEquals(56, Node.CHANGE_TIME);
299:       assertEquals(51, Node.STATIC_SOURCE_FILE);
300:       assertEquals(1, Node.DECR_FLAG);
301:       assertEquals(29, Node.JSDOC_INFO_PROP);
302:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
303:       assertEquals(36, Node.QUOTED_PROP);
304:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
305:       assertEquals(49, Node.DIRECT_EVAL);
306:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
307:       assertEquals(12, Node.COLUMN_BITS);
308:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
309:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
310:       assertEquals(4095, Node.COLUMN_MASK);
311:       assertEquals(15, Node.NO_SIDE_EFFECTS);
312:       assertEquals(57, Node.LAST_PROP);
313:       assertEquals(54, Node.SLASH_V);
314:       assertEquals(52, Node.LENGTH);
315:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
316:       assertEquals(30, Node.VAR_ARGS_NAME);
317:       assertEquals(51, Node.STATIC_SOURCE_FILE);
318:       assertEquals(57, Node.REFLECTED_OBJECT);
319:       assertEquals(40, Node.ORIGINALNAME_PROP);
320:       assertEquals(46, Node.IS_NAMESPACE);
321:       assertEquals(37, Node.OPT_ARG_NAME);
322:       assertEquals(49, Node.DIRECT_EVAL);
323:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
324:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
325:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
326:       assertEquals(50, Node.FREE_CALL);
327:       assertEquals(12, Node.COLUMN_BITS);
328:       assertEquals(32, Node.INCRDECR_PROP);
329:       assertEquals(1, Node.DECR_FLAG);
330:       assertEquals(43, Node.IS_CONSTANT_NAME);
331:       assertEquals(36, Node.QUOTED_PROP);
332:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
333:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
334:       assertEquals(4095, Node.COLUMN_MASK);
335:       assertEquals(48, Node.DIRECTIVES);
336:       assertEquals(56, Node.CHANGE_TIME);
337:       assertEquals(8, Node.FLAG_NO_THROWS);
338:       assertEquals(39, Node.EMPTY_BLOCK);
339:       assertEquals(47, Node.IS_DISPATCHER);
340:       assertEquals(29, Node.JSDOC_INFO_PROP);
341:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
342:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
343:       assertEquals(2, Node.POST_FLAG);
344:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
345:       assertEquals(55, Node.INFERRED_FUNCTION);
346:       assertEquals(53, Node.INPUT_ID);
347:       assertNotNull(node1);
348:       
349:       Iterable<Node> iterable0 = new Stack<Node>();
350:       assertFalse(iterable0.contains(node0));
351:       assertNotNull(iterable0);
352:       
353:       Node node2 = Node.newString("", 0, (-521));
354:       assertFalse(node2.isNull());
355:       assertFalse(node2.isSetterDef());
356:       assertFalse(node2.isName());
357:       assertFalse(node2.isStringKey());
358:       assertFalse(node2.isParamList());
359:       assertFalse(node2.isVar());
360:       assertEquals(0, node2.getChildCount());
361:       assertFalse(node2.isCatch());
362:       assertFalse(node2.isCall());
363:       assertFalse(node2.isTrue());
364:       assertFalse(node2.isNew());
365:       assertEquals(40, node2.getType());
366:       assertFalse(node2.isVoid());
367:       assertFalse(node2.isDo());
368:       assertFalse(node2.isDefaultCase());
369:       assertFalse(node2.isAdd());
370:       assertFalse(node2.isEmpty());
371:       assertFalse(node2.isOr());
372:       assertFalse(node2.isNE());
373:       assertFalse(node2.isFor());
374:       assertFalse(node2.isLabelName());
375:       assertFalse(node2.isAssignAdd());
376:       assertFalse(node2.isIf());
377:       assertFalse(node2.isArrayLit());
378:       assertEquals((-1), node2.getLineno());
379:       assertFalse(node2.isLabel());
380:       assertFalse(node2.hasMoreThanOneChild());
381:       assertFalse(node2.isScript());
382:       assertFalse(node2.isRegExp());
383:       assertEquals((-1), node2.getCharno());
384:       assertFalse(node2.isCase());
385:       assertTrue(node2.isString());
386:       assertFalse(node2.isBlock());
387:       assertFalse(node2.isTry());
388:       assertFalse(node2.isSwitch());
389:       assertFalse(node2.hasOneChild());
390:       assertFalse(node2.isGetterDef());
391:       assertFalse(node2.isNumber());
392:       assertFalse(node2.isComma());
393:       assertFalse(node2.isThis());
394:       assertFalse(node2.isGetProp());
395:       assertFalse(node2.isBreak());
396:       assertFalse(node2.isThrow());
397:       assertFalse(node2.isInstanceOf());
398:       assertFalse(node2.isHook());
399:       assertFalse(node2.isFalse());
400:       assertFalse(node2.isWith());
401:       assertFalse(node2.isInc());
402:       assertFalse(node2.isExprResult());
403:       assertFalse(node2.isIn());
404:       assertFalse(node2.isTypeOf());
405:       assertEquals((-1), node2.getSourcePosition());
406:       assertFalse(node2.isDec());
407:       assertFalse(node2.hasChildren());
408:       assertFalse(node2.isDelProp());
409:       assertFalse(node2.isCast());
410:       assertFalse(node2.isReturn());
411:       assertFalse(node2.isGetElem());
412:       assertFalse(node2.isAssign());
413:       assertFalse(node2.isContinue());
414:       assertFalse(node2.isFunction());
415:       assertFalse(node2.isDebugger());
416:       assertFalse(node2.isWhile());
417:       assertFalse(node2.isAnd());
418:       assertFalse(node2.isNot());
419:       assertFalse(node2.isObjectLit());
420:       assertFalse(node2.equals((Object)node0));
421:       assertFalse(node2.equals((Object)node1));
422:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
423:       assertEquals(39, Node.EMPTY_BLOCK);
424:       assertEquals(8, Node.FLAG_NO_THROWS);
425:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
426:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
427:       assertEquals(50, Node.FREE_CALL);
428:       assertEquals(40, Node.ORIGINALNAME_PROP);
429:       assertEquals(57, Node.REFLECTED_OBJECT);
430:       assertEquals(4095, Node.COLUMN_MASK);
431:       assertEquals(48, Node.DIRECTIVES);
432:       assertEquals(54, Node.SLASH_V);
433:       assertEquals(43, Node.IS_CONSTANT_NAME);
434:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
435:       assertEquals(12, Node.COLUMN_BITS);
436:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
437:       assertEquals(32, Node.INCRDECR_PROP);
438:       assertEquals(1, Node.DECR_FLAG);
439:       assertEquals(2, Node.POST_FLAG);
440:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
441:       assertEquals(56, Node.CHANGE_TIME);
442:       assertEquals(47, Node.IS_DISPATCHER);
443:       assertEquals(51, Node.STATIC_SOURCE_FILE);
444:       assertEquals(46, Node.IS_NAMESPACE);
445:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
446:       assertEquals(49, Node.DIRECT_EVAL);
447:       assertEquals(37, Node.OPT_ARG_NAME);
448:       assertEquals(57, Node.LAST_PROP);
449:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
450:       assertEquals(30, Node.VAR_ARGS_NAME);
451:       assertEquals(52, Node.LENGTH);
452:       assertEquals(36, Node.QUOTED_PROP);
453:       assertEquals(55, Node.INFERRED_FUNCTION);
454:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
455:       assertEquals(29, Node.JSDOC_INFO_PROP);
456:       assertEquals(53, Node.INPUT_ID);
457:       assertEquals(15, Node.NO_SIDE_EFFECTS);
458:       assertNotNull(node2);
459:       
460:       node1.addChildrenAfter(node2, node0);
461:       assertNotSame(node0, node1);
462:       assertNotSame(node1, node0);
463:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
464:       assertEquals(83, node0.getType());
465:       assertFalse(node0.isComma());
466:       assertFalse(node0.isGetProp());
467:       assertFalse(node0.isBreak());
468:       assertFalse(node0.isObjectLit());
469:       assertFalse(node0.isAnd());
470:       assertTrue(node0.isParamList());
471:       assertFalse(node0.isNot());
472:       assertEquals((-1), node0.getCharno());
473:       assertFalse(node0.isScript());
474:       assertFalse(node0.isWith());
475:       assertFalse(node0.isCase());
476:       assertFalse(node0.isString());
477:       assertFalse(node0.isExprResult());
478:       assertFalse(node0.hasOneChild());
479:       assertFalse(node0.isInstanceOf());
480:       assertFalse(node0.isAssign());
481:       assertFalse(node0.hasChildren());
482:       assertFalse(node0.isHook());
483:       assertFalse(node0.isThis());
484:       assertFalse(node0.isDec());
485:       assertFalse(node0.isGetterDef());
486:       assertFalse(node0.isDelProp());
487:       assertFalse(node0.isTypeOf());
488:       assertFalse(node0.isNumber());
489:       assertFalse(node0.isEmpty());
490:       assertFalse(node0.isLabelName());
491:       assertFalse(node0.isGetElem());
492:       assertFalse(node0.isArrayLit());
493:       assertFalse(node0.isOr());
494:       assertFalse(node0.isTrue());
495:       assertFalse(node0.isSwitch());
496:       assertFalse(node0.isDefaultCase());
497:       assertFalse(node0.isAdd());
498:       assertFalse(node0.isDo());
499:       assertFalse(node0.isNew());
500:       assertFalse(node0.isVar());
501:       assertEquals(0, node0.getChildCount());
502:       assertFalse(node0.isLabel());
503:       assertFalse(node0.isAssignAdd());
504:       assertFalse(node0.isCall());
505:       assertFalse(node0.isSetterDef());
506:       assertFalse(node0.isName());
507:       assertFalse(node0.isStringKey());
508:       assertFalse(node0.isNull());
509:       assertFalse(node0.isRegExp());
510:       assertFalse(node0.isVoid());
511:       assertFalse(node0.isTry());
512:       assertFalse(node0.isCatch());
513:       assertFalse(node0.hasMoreThanOneChild());
514:       assertFalse(node0.isFor());
515:       assertFalse(node0.isWhile());
516:       assertFalse(node0.isReturn());
517:       assertFalse(node0.isBlock());
518:       assertFalse(node0.isNE());
519:       assertEquals((-1), node0.getSourcePosition());
520:       assertFalse(node0.isIf());
521:       assertEquals((-1), node0.getLineno());
522:       assertFalse(node0.isIn());
523:       assertFalse(node0.isDebugger());
524:       assertFalse(node0.isFunction());
525:       assertFalse(node0.isInc());
526:       assertFalse(node0.isCast());
527:       assertFalse(node0.isContinue());
528:       assertFalse(node0.isFalse());
529:       assertFalse(node0.isThrow());
530:       assertTrue(node1.hasMoreThanOneChild());
531:       assertFalse(node1.isCase());
532:       assertEquals((-1), node1.getCharno());
533:       assertFalse(node1.isSwitch());
534:       assertFalse(node1.isHook());
535:       assertFalse(node1.isFalse());
536:       assertTrue(node1.hasChildren());
537:       assertFalse(node1.isBreak());
538:       assertFalse(node1.isIf());
539:       assertFalse(node1.isDelProp());
540:       assertFalse(node1.isThrow());
541:       assertFalse(node1.isNE());
542:       assertFalse(node1.isIn());
543:       assertFalse(node1.isInc());
544:       assertFalse(node1.isEmpty());
545:       assertFalse(node1.isNot());
546:       assertFalse(node1.isDebugger());
547:       assertFalse(node1.isVoid());
548:       assertFalse(node1.isTrue());
549:       assertFalse(node1.isAnd());
550:       assertEquals(2, node1.getChildCount());
551:       assertFalse(node1.isExprResult());
552:       assertFalse(node1.isGetElem());
553:       assertFalse(node1.isFunction());
554:       assertFalse(node1.isCast());
555:       assertFalse(node1.isDec());
556:       assertFalse(node1.isTypeOf());
557:       assertFalse(node1.isComma());
558:       assertFalse(node1.isAssign());
559:       assertEquals((-1), node1.getSourcePosition());
560:       assertFalse(node1.isGetProp());
561:       assertFalse(node1.isObjectLit());
562:       assertFalse(node1.isString());
563:       assertFalse(node1.isDo());
564:       assertFalse(node1.isBlock());
565:       assertFalse(node1.isWhile());
566:       assertFalse(node1.isReturn());
567:       assertFalse(node1.isLabel());
568:       assertEquals((-1), node1.getLineno());
569:       assertFalse(node1.isCall());
570:       assertFalse(node1.isContinue());
571:       assertFalse(node1.isNull());
572:       assertFalse(node1.isSetterDef());
573:       assertFalse(node1.isName());
574:       assertFalse(node1.isAssignAdd());
575:       assertFalse(node1.isVar());
576:       assertFalse(node1.isOr());
577:       assertFalse(node1.isNew());
578:       assertFalse(node1.isAdd());
579:       assertFalse(node1.isDefaultCase());
580:       assertFalse(node1.isScript());
581:       assertFalse(node1.isRegExp());
582:       assertFalse(node1.isInstanceOf());
583:       assertFalse(node1.isArrayLit());
584:       assertFalse(node1.isWith());
585:       assertFalse(node1.isCatch());
586:       assertFalse(node1.isNumber());
587:       assertFalse(node1.isGetterDef());
588:       assertFalse(node1.isLabelName());
589:       assertEquals(55, node1.getType());
590:       assertFalse(node1.isStringKey());
591:       assertFalse(node1.isFor());
592:       assertFalse(node1.isThis());
593:       assertFalse(node1.isParamList());
594:       assertFalse(node1.hasOneChild());
595:       assertFalse(node1.isTry());
596:       assertFalse(node2.isNull());
597:       assertFalse(node2.isSetterDef());
598:       assertFalse(node2.isName());
599:       assertFalse(node2.isStringKey());
600:       assertFalse(node2.isParamList());
601:       assertFalse(node2.isVar());
602:       assertEquals(0, node2.getChildCount());
603:       assertFalse(node2.isCatch());
604:       assertFalse(node2.isCall());
605:       assertFalse(node2.isTrue());
606:       assertFalse(node2.isNew());
607:       assertEquals(40, node2.getType());
608:       assertFalse(node2.isVoid());
609:       assertFalse(node2.isDo());
610:       assertFalse(node2.isDefaultCase());
611:       assertFalse(node2.isAdd());
612:       assertFalse(node2.isEmpty());
613:       assertFalse(node2.isOr());
614:       assertFalse(node2.isNE());
615:       assertFalse(node2.isFor());
616:       assertFalse(node2.isLabelName());
617:       assertFalse(node2.isAssignAdd());
618:       assertFalse(node2.isIf());
619:       assertFalse(node2.isArrayLit());
620:       assertEquals((-1), node2.getLineno());
621:       assertFalse(node2.isLabel());
622:       assertFalse(node2.hasMoreThanOneChild());
623:       assertFalse(node2.isScript());
624:       assertFalse(node2.isRegExp());
625:       assertEquals((-1), node2.getCharno());
626:       assertFalse(node2.isCase());
627:       assertTrue(node2.isString());
628:       assertFalse(node2.isBlock());
629:       assertFalse(node2.isTry());
630:       assertFalse(node2.isSwitch());
631:       assertFalse(node2.hasOneChild());
632:       assertFalse(node2.isGetterDef());
633:       assertFalse(node2.isNumber());
634:       assertFalse(node2.isComma());
635:       assertFalse(node2.isThis());
636:       assertFalse(node2.isGetProp());
637:       assertFalse(node2.isBreak());
638:       assertFalse(node2.isThrow());
639:       assertFalse(node2.isInstanceOf());
640:       assertFalse(node2.isHook());
641:       assertFalse(node2.isFalse());
642:       assertFalse(node2.isWith());
643:       assertFalse(node2.isInc());
644:       assertFalse(node2.isExprResult());
645:       assertFalse(node2.isIn());
646:       assertFalse(node2.isTypeOf());
647:       assertEquals((-1), node2.getSourcePosition());
648:       assertFalse(node2.isDec());
649:       assertFalse(node2.hasChildren());
650:       assertFalse(node2.isDelProp());
651:       assertFalse(node2.isCast());
652:       assertFalse(node2.isReturn());
653:       assertFalse(node2.isGetElem());
654:       assertFalse(node2.isAssign());
655:       assertFalse(node2.isContinue());
656:       assertFalse(node2.isFunction());
657:       assertFalse(node2.isDebugger());
658:       assertFalse(node2.isWhile());
659:       assertFalse(node2.isAnd());
660:       assertFalse(node2.isNot());
661:       assertFalse(node2.isObjectLit());
662:       assertEquals(0, jSTypeArray0.length);
663:       assertFalse(node0.equals((Object)node2));
664:       assertFalse(node0.equals((Object)node1));
665:       assertFalse(node1.equals((Object)node0));
666:       assertFalse(node1.equals((Object)node2));
667:       assertFalse(node2.equals((Object)node0));
668:       assertFalse(node2.equals((Object)node1));
669:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
670:       assertEquals(8, Node.FLAG_NO_THROWS);
671:       assertEquals(39, Node.EMPTY_BLOCK);
672:       assertEquals(48, Node.DIRECTIVES);
673:       assertEquals(55, Node.INFERRED_FUNCTION);
674:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
675:       assertEquals(57, Node.REFLECTED_OBJECT);
676:       assertEquals(52, Node.LENGTH);
677:       assertEquals(50, Node.FREE_CALL);
678:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
679:       assertEquals(54, Node.SLASH_V);
680:       assertEquals(15, Node.NO_SIDE_EFFECTS);
681:       assertEquals(53, Node.INPUT_ID);
682:       assertEquals(43, Node.IS_CONSTANT_NAME);
683:       assertEquals(57, Node.LAST_PROP);
684:       assertEquals(40, Node.ORIGINALNAME_PROP);
685:       assertEquals(30, Node.VAR_ARGS_NAME);
686:       assertEquals(2, Node.POST_FLAG);
687:       assertEquals(47, Node.IS_DISPATCHER);
688:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
689:       assertEquals(37, Node.OPT_ARG_NAME);
690:       assertEquals(32, Node.INCRDECR_PROP);
691:       assertEquals(46, Node.IS_NAMESPACE);
692:       assertEquals(56, Node.CHANGE_TIME);
693:       assertEquals(51, Node.STATIC_SOURCE_FILE);
694:       assertEquals(1, Node.DECR_FLAG);
695:       assertEquals(29, Node.JSDOC_INFO_PROP);
696:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
697:       assertEquals(36, Node.QUOTED_PROP);
698:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
699:       assertEquals(49, Node.DIRECT_EVAL);
700:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
701:       assertEquals(12, Node.COLUMN_BITS);
702:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
703:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
704:       assertEquals(4095, Node.COLUMN_MASK);
705:       assertEquals(15, Node.NO_SIDE_EFFECTS);
706:       assertEquals(57, Node.LAST_PROP);
707:       assertEquals(54, Node.SLASH_V);
708:       assertEquals(52, Node.LENGTH);
709:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
710:       assertEquals(30, Node.VAR_ARGS_NAME);
711:       assertEquals(51, Node.STATIC_SOURCE_FILE);
712:       assertEquals(57, Node.REFLECTED_OBJECT);
713:       assertEquals(40, Node.ORIGINALNAME_PROP);
714:       assertEquals(46, Node.IS_NAMESPACE);
715:       assertEquals(37, Node.OPT_ARG_NAME);
716:       assertEquals(49, Node.DIRECT_EVAL);
717:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
718:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
719:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
720:       assertEquals(50, Node.FREE_CALL);
721:       assertEquals(12, Node.COLUMN_BITS);
722:       assertEquals(32, Node.INCRDECR_PROP);
723:       assertEquals(1, Node.DECR_FLAG);
724:       assertEquals(43, Node.IS_CONSTANT_NAME);
725:       assertEquals(36, Node.QUOTED_PROP);
726:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
727:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
728:       assertEquals(4095, Node.COLUMN_MASK);
729:       assertEquals(48, Node.DIRECTIVES);
730:       assertEquals(56, Node.CHANGE_TIME);
731:       assertEquals(8, Node.FLAG_NO_THROWS);
732:       assertEquals(39, Node.EMPTY_BLOCK);
733:       assertEquals(47, Node.IS_DISPATCHER);
734:       assertEquals(29, Node.JSDOC_INFO_PROP);
735:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
736:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
737:       assertEquals(2, Node.POST_FLAG);
738:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
739:       assertEquals(55, Node.INFERRED_FUNCTION);
740:       assertEquals(53, Node.INPUT_ID);
741:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
742:       assertEquals(39, Node.EMPTY_BLOCK);
743:       assertEquals(8, Node.FLAG_NO_THROWS);
744:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
745:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
746:       assertEquals(50, Node.FREE_CALL);
747:       assertEquals(40, Node.ORIGINALNAME_PROP);
748:       assertEquals(57, Node.REFLECTED_OBJECT);
749:       assertEquals(4095, Node.COLUMN_MASK);
750:       assertEquals(48, Node.DIRECTIVES);
751:       assertEquals(54, Node.SLASH_V);
752:       assertEquals(43, Node.IS_CONSTANT_NAME);
753:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
754:       assertEquals(12, Node.COLUMN_BITS);
755:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
756:       assertEquals(32, Node.INCRDECR_PROP);
757:       assertEquals(1, Node.DECR_FLAG);
758:       assertEquals(2, Node.POST_FLAG);
759:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
760:       assertEquals(56, Node.CHANGE_TIME);
761:       assertEquals(47, Node.IS_DISPATCHER);
762:       assertEquals(51, Node.STATIC_SOURCE_FILE);
763:       assertEquals(46, Node.IS_NAMESPACE);
764:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
765:       assertEquals(49, Node.DIRECT_EVAL);
766:       assertEquals(37, Node.OPT_ARG_NAME);
767:       assertEquals(57, Node.LAST_PROP);
768:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
769:       assertEquals(30, Node.VAR_ARGS_NAME);
770:       assertEquals(52, Node.LENGTH);
771:       assertEquals(36, Node.QUOTED_PROP);
772:       assertEquals(55, Node.INFERRED_FUNCTION);
773:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
774:       assertEquals(29, Node.JSDOC_INFO_PROP);
775:       assertEquals(53, Node.INPUT_ID);
776:       assertEquals(15, Node.NO_SIDE_EFFECTS);
777:       
778:       Node node3 = Node.newNumber((double) 57, 1682, 12);
779:       assertFalse(node3.isWith());
780:       assertFalse(node3.isScript());
781:       assertFalse(node3.isExprResult());
782:       assertFalse(node3.isAnd());
783:       assertEquals(12, node3.getCharno());
784:       assertFalse(node3.isCast());
785:       assertFalse(node3.isInstanceOf());
786:       assertFalse(node3.isThis());
787:       assertFalse(node3.isAssign());
788:       assertFalse(node3.isComma());
789:       assertFalse(node3.isBreak());
790:       assertFalse(node3.isThrow());
791:       assertFalse(node3.isGetElem());
792:       assertFalse(node3.isOr());
793:       assertEquals(39, node3.getType());
794:       assertFalse(node3.isSwitch());
795:       assertEquals(1682, node3.getLineno());
796:       assertFalse(node3.isCase());
797:       assertFalse(node3.isDo());
798:       assertFalse(node3.isNew());
799:       assertFalse(node3.isHook());
800:       assertFalse(node3.isAssignAdd());
801:       assertFalse(node3.isVar());
802:       assertEquals(6889484, node3.getSourcePosition());
803:       assertFalse(node3.hasMoreThanOneChild());
804:       assertFalse(node3.isBlock());
805:       assertFalse(node3.isLabel());
806:       assertFalse(node3.isGetterDef());
807:       assertFalse(node3.isFor());
808:       assertFalse(node3.isStringKey());
809:       assertFalse(node3.isParamList());
810:       assertFalse(node3.isArrayLit());
811:       assertFalse(node3.isLabelName());
812:       assertFalse(node3.hasOneChild());
813:       assertFalse(node3.isDefaultCase());
814:       assertFalse(node3.isVoid());
815:       assertFalse(node3.isTry());
816:       assertFalse(node3.isCatch());
817:       assertFalse(node3.isFunction());
818:       assertFalse(node3.isRegExp());
819:       assertEquals(0, node3.getChildCount());
820:       assertFalse(node3.isDelProp());
821:       assertFalse(node3.isIf());
822:       assertFalse(node3.isEmpty());
823:       assertFalse(node3.isNull());
824:       assertFalse(node3.isNE());
825:       assertFalse(node3.isCall());
826:       assertFalse(node3.isSetterDef());
827:       assertFalse(node3.isName());
828:       assertFalse(node3.isIn());
829:       assertFalse(node3.isAdd());
830:       assertFalse(node3.isTrue());
831:       assertFalse(node3.isString());
832:       assertFalse(node3.isWhile());
833:       assertFalse(node3.isInc());
834:       assertFalse(node3.isReturn());
835:       assertFalse(node3.isContinue());
836:       assertFalse(node3.isFalse());
837:       assertFalse(node3.isTypeOf());
838:       assertFalse(node3.isDec());
839:       assertFalse(node3.hasChildren());
840:       assertFalse(node3.isGetProp());
841:       assertTrue(node3.isNumber());
842:       assertFalse(node3.isDebugger());
843:       assertFalse(node3.isObjectLit());
844:       assertFalse(node3.isNot());
845:       assertFalse(node3.equals((Object)node1));
846:       assertFalse(node3.equals((Object)node2));
847:       assertFalse(node3.equals((Object)node0));
848:       assertEquals(43, Node.IS_CONSTANT_NAME);
849:       assertEquals(36, Node.QUOTED_PROP);
850:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
851:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
852:       assertEquals(4095, Node.COLUMN_MASK);
853:       assertEquals(48, Node.DIRECTIVES);
854:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
855:       assertEquals(50, Node.FREE_CALL);
856:       assertEquals(46, Node.IS_NAMESPACE);
857:       assertEquals(51, Node.STATIC_SOURCE_FILE);
858:       assertEquals(32, Node.INCRDECR_PROP);
859:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
860:       assertEquals(1, Node.DECR_FLAG);
861:       assertEquals(15, Node.NO_SIDE_EFFECTS);
862:       assertEquals(57, Node.LAST_PROP);
863:       assertEquals(30, Node.VAR_ARGS_NAME);
864:       assertEquals(49, Node.DIRECT_EVAL);
865:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
866:       assertEquals(12, Node.COLUMN_BITS);
867:       assertEquals(54, Node.SLASH_V);
868:       assertEquals(37, Node.OPT_ARG_NAME);
869:       assertEquals(40, Node.ORIGINALNAME_PROP);
870:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
871:       assertEquals(56, Node.CHANGE_TIME);
872:       assertEquals(47, Node.IS_DISPATCHER);
873:       assertEquals(8, Node.FLAG_NO_THROWS);
874:       assertEquals(2, Node.POST_FLAG);
875:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
876:       assertEquals(57, Node.REFLECTED_OBJECT);
877:       assertEquals(52, Node.LENGTH);
878:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
879:       assertEquals(55, Node.INFERRED_FUNCTION);
880:       assertEquals(39, Node.EMPTY_BLOCK);
881:       assertEquals(29, Node.JSDOC_INFO_PROP);
882:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
883:       assertEquals(53, Node.INPUT_ID);
884:       assertNotNull(node3);
885:       
886:       boolean boolean0 = node3.isSetterDef();
887:       assertFalse(node3.isWith());
888:       assertFalse(node3.isScript());
889:       assertFalse(node3.isExprResult());
890:       assertFalse(node3.isAnd());
891:       assertEquals(12, node3.getCharno());
892:       assertFalse(node3.isCast());
893:       assertFalse(node3.isInstanceOf());
894:       assertFalse(node3.isThis());
895:       assertFalse(node3.isAssign());
896:       assertFalse(node3.isComma());
897:       assertFalse(node3.isBreak());
898:       assertFalse(node3.isThrow());
899:       assertFalse(node3.isGetElem());
900:       assertFalse(node3.isOr());
901:       assertEquals(39, node3.getType());
902:       assertFalse(node3.isSwitch());
903:       assertEquals(1682, node3.getLineno());
904:       assertFalse(node3.isCase());
905:       assertFalse(node3.isDo());
906:       assertFalse(node3.isNew());
907:       assertFalse(node3.isHook());
908:       assertFalse(node3.isAssignAdd());
909:       assertFalse(node3.isVar());
910:       assertEquals(6889484, node3.getSourcePosition());
911:       assertFalse(node3.hasMoreThanOneChild());
912:       assertFalse(node3.isBlock());
913:       assertFalse(node3.isLabel());
914:       assertFalse(node3.isGetterDef());
915:       assertFalse(node3.isFor());
916:       assertFalse(node3.isStringKey());
917:       assertFalse(node3.isParamList());
918:       assertFalse(node3.isArrayLit());
919:       assertFalse(node3.isLabelName());
920:       assertFalse(node3.hasOneChild());
921:       assertFalse(node3.isDefaultCase());
922:       assertFalse(node3.isVoid());
923:       assertFalse(node3.isTry());
924:       assertFalse(node3.isCatch());
925:       assertFalse(node3.isFunction());
926:       assertFalse(node3.isRegExp());
927:       assertEquals(0, node3.getChildCount());
928:       assertFalse(node3.isDelProp());
929:       assertFalse(node3.isIf());
930:       assertFalse(node3.isEmpty());
931:       assertFalse(node3.isNull());
932:       assertFalse(node3.isNE());
933:       assertFalse(node3.isCall());
934:       assertFalse(node3.isSetterDef());
935:       assertFalse(node3.isName());
936:       assertFalse(node3.isIn());
937:       assertFalse(node3.isAdd());
938:       assertFalse(node3.isTrue());
939:       assertFalse(node3.isString());
940:       assertFalse(node3.isWhile());
941:       assertFalse(node3.isInc());
942:       assertFalse(node3.isReturn());
943:       assertFalse(node3.isContinue());
944:       assertFalse(node3.isFalse());
945:       assertFalse(node3.isTypeOf());
946:       assertFalse(node3.isDec());
947:       assertFalse(node3.hasChildren());
948:       assertFalse(node3.isGetProp());
949:       assertTrue(node3.isNumber());
950:       assertFalse(node3.isDebugger());
951:       assertFalse(node3.isObjectLit());
952:       assertFalse(node3.isNot());
953:       assertFalse(node3.equals((Object)node1));
954:       assertFalse(node3.equals((Object)node2));
955:       assertFalse(node3.equals((Object)node0));
956:       assertFalse(boolean0);
957:       assertEquals(43, Node.IS_CONSTANT_NAME);
958:       assertEquals(36, Node.QUOTED_PROP);
959:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
960:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
961:       assertEquals(4095, Node.COLUMN_MASK);
962:       assertEquals(48, Node.DIRECTIVES);
963:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
964:       assertEquals(50, Node.FREE_CALL);
965:       assertEquals(46, Node.IS_NAMESPACE);
966:       assertEquals(51, Node.STATIC_SOURCE_FILE);
967:       assertEquals(32, Node.INCRDECR_PROP);
968:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
969:       assertEquals(1, Node.DECR_FLAG);
970:       assertEquals(15, Node.NO_SIDE_EFFECTS);
971:       assertEquals(57, Node.LAST_PROP);
972:       assertEquals(30, Node.VAR_ARGS_NAME);
973:       assertEquals(49, Node.DIRECT_EVAL);
974:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
975:       assertEquals(12, Node.COLUMN_BITS);
976:       assertEquals(54, Node.SLASH_V);
977:       assertEquals(37, Node.OPT_ARG_NAME);
978:       assertEquals(40, Node.ORIGINALNAME_PROP);
979:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
980:       assertEquals(56, Node.CHANGE_TIME);
981:       assertEquals(47, Node.IS_DISPATCHER);
982:       assertEquals(8, Node.FLAG_NO_THROWS);
983:       assertEquals(2, Node.POST_FLAG);
984:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
985:       assertEquals(57, Node.REFLECTED_OBJECT);
986:       assertEquals(52, Node.LENGTH);
987:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
988:       assertEquals(55, Node.INFERRED_FUNCTION);
989:       assertEquals(39, Node.EMPTY_BLOCK);
990:       assertEquals(29, Node.JSDOC_INFO_PROP);
991:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
992:       assertEquals(53, Node.INPUT_ID);
993:       
994:       Node node4 = Node.newString(37, "Object#Key");
995:       assertNotSame(node4, node2);
996:       assertFalse(node4.isOr());
997:       assertFalse(node4.isLabel());
998:       assertFalse(node4.isAssignAdd());
999:       assertFalse(node4.isReturn());
1000:       assertEquals((-1), node4.getLineno());
1001:       assertFalse(node4.isAssign());
1002:       assertFalse(node4.isLabelName());
1003:       assertFalse(node4.isGetElem());
1004:       assertFalse(node4.isDec());
1005:       assertFalse(node4.hasChildren());
1006:       assertFalse(node4.hasMoreThanOneChild());
1007:       assertFalse(node4.isCast());
1008:       assertFalse(node4.isTypeOf());
1009:       assertFalse(node4.isContinue());
1010:       assertFalse(node4.isAdd());
1011:       assertFalse(node4.isNew());
1012:       assertFalse(node4.isVar());
1013:       assertFalse(node4.isDo());
1014:       assertFalse(node4.isSetterDef());
1015:       assertFalse(node4.isGetProp());
1016:       assertFalse(node4.isComma());
1017:       assertFalse(node4.isNull());
1018:       assertFalse(node4.isAnd());
1019:       assertFalse(node4.isFalse());
1020:       assertFalse(node4.isName());
1021:       assertFalse(node4.isBreak());
1022:       assertFalse(node4.isExprResult());
1023:       assertFalse(node4.isFunction());
1024:       assertFalse(node4.isDebugger());
1025:       assertFalse(node4.isWhile());
1026:       assertFalse(node4.isNot());
1027:       assertEquals((-1), node4.getSourcePosition());
1028:       assertFalse(node4.isObjectLit());
1029:       assertFalse(node4.isString());
1030:       assertFalse(node4.isNE());
1031:       assertFalse(node4.isIf());
1032:       assertFalse(node4.isFor());
1033:       assertFalse(node4.isDelProp());
1034:       assertEquals(37, node4.getType());
1035:       assertFalse(node4.isVoid());
1036:       assertFalse(node4.isTrue());
1037:       assertFalse(node4.isDefaultCase());
1038:       assertFalse(node4.isThrow());
1039:       assertFalse(node4.isEmpty());
1040:       assertFalse(node4.isInc());
1041:       assertFalse(node4.isIn());
1042:       assertEquals(0, node4.getChildCount());
1043:       assertFalse(node4.isThis());
1044:       assertTrue(node4.isCall());
1045:       assertFalse(node4.isParamList());
1046:       assertFalse(node4.isWith());
1047:       assertFalse(node4.isCatch());
1048:       assertFalse(node4.isRegExp());
1049:       assertFalse(node4.isInstanceOf());
1050:       assertFalse(node4.isTry());
1051:       assertFalse(node4.isBlock());
1052:       assertEquals((-1), node4.getCharno());
1053:       assertFalse(node4.isArrayLit());
1054:       assertFalse(node4.hasOneChild());
1055:       assertFalse(node4.isSwitch());
1056:       assertFalse(node4.isHook());
1057:       assertFalse(node4.isStringKey());
1058:       assertFalse(node4.isGetterDef());
1059:       assertFalse(node4.isCase());
1060:       assertFalse(node4.isScript());
1061:       assertFalse(node4.isNumber());
1062:       assertFalse(node4.equals((Object)node2));
1063:       assertFalse(node4.equals((Object)node0));
1064:       assertFalse(node4.equals((Object)node3));
1065:       assertFalse(node4.equals((Object)node1));
1066:       assertEquals(12, Node.COLUMN_BITS);
1067:       assertEquals(46, Node.IS_NAMESPACE);
1068:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1069:       assertEquals(2, Node.POST_FLAG);
1070:       assertEquals(30, Node.VAR_ARGS_NAME);
1071:       assertEquals(56, Node.CHANGE_TIME);
1072:       assertEquals(37, Node.OPT_ARG_NAME);
1073:       assertEquals(49, Node.DIRECT_EVAL);
1074:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1075:       assertEquals(54, Node.SLASH_V);
1076:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1077:       assertEquals(50, Node.FREE_CALL);
1078:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1079:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1080:       assertEquals(32, Node.INCRDECR_PROP);
1081:       assertEquals(1, Node.DECR_FLAG);
1082:       assertEquals(55, Node.INFERRED_FUNCTION);
1083:       assertEquals(8, Node.FLAG_NO_THROWS);
1084:       assertEquals(4095, Node.COLUMN_MASK);
1085:       assertEquals(43, Node.IS_CONSTANT_NAME);
1086:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1087:       assertEquals(40, Node.ORIGINALNAME_PROP);
1088:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1089:       assertEquals(48, Node.DIRECTIVES);
1090:       assertEquals(52, Node.LENGTH);
1091:       assertEquals(53, Node.INPUT_ID);
1092:       assertEquals(57, Node.REFLECTED_OBJECT);
1093:       assertEquals(36, Node.QUOTED_PROP);
1094:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1095:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1096:       assertEquals(57, Node.LAST_PROP);
1097:       assertEquals(47, Node.IS_DISPATCHER);
1098:       assertEquals(29, Node.JSDOC_INFO_PROP);
1099:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1100:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1101:       assertEquals(39, Node.EMPTY_BLOCK);
1102:       assertNotNull(node4);
1103:       
1104:       boolean boolean1 = node1.isOnlyModifiesArgumentsCall();
1105:       assertNotSame(node0, node1);
1106:       assertNotSame(node1, node0);
1107:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1108:       assertEquals(83, node0.getType());
1109:       assertFalse(node0.isComma());
1110:       assertFalse(node0.isGetProp());
1111:       assertFalse(node0.isBreak());
1112:       assertFalse(node0.isObjectLit());
1113:       assertFalse(node0.isAnd());
1114:       assertTrue(node0.isParamList());
1115:       assertFalse(node0.isNot());
1116:       assertEquals((-1), node0.getCharno());
1117:       assertFalse(node0.isScript());
1118:       assertFalse(node0.isWith());
1119:       assertFalse(node0.isCase());
1120:       assertFalse(node0.isString());
1121:       assertFalse(node0.isExprResult());
1122:       assertFalse(node0.hasOneChild());
1123:       assertFalse(node0.isInstanceOf());
1124:       assertFalse(node0.isAssign());
1125:       assertFalse(node0.hasChildren());
1126:       assertFalse(node0.isHook());
1127:       assertFalse(node0.isThis());
1128:       assertFalse(node0.isDec());
1129:       assertFalse(node0.isGetterDef());
1130:       assertFalse(node0.isDelProp());
1131:       assertFalse(node0.isTypeOf());
1132:       assertFalse(node0.isNumber());
1133:       assertFalse(node0.isEmpty());
1134:       assertFalse(node0.isLabelName());
1135:       assertFalse(node0.isGetElem());
1136:       assertFalse(node0.isArrayLit());
1137:       assertFalse(node0.isOr());
1138:       assertFalse(node0.isTrue());
1139:       assertFalse(node0.isSwitch());
1140:       assertFalse(node0.isDefaultCase());
1141:       assertFalse(node0.isAdd());
1142:       assertFalse(node0.isDo());
1143:       assertFalse(node0.isNew());
1144:       assertFalse(node0.isVar());
1145:       assertEquals(0, node0.getChildCount());
1146:       assertFalse(node0.isLabel());
1147:       assertFalse(node0.isAssignAdd());
1148:       assertFalse(node0.isCall());
1149:       assertFalse(node0.isSetterDef());
1150:       assertFalse(node0.isName());
1151:       assertFalse(node0.isStringKey());
1152:       assertFalse(node0.isNull());
1153:       assertFalse(node0.isRegExp());
1154:       assertFalse(node0.isVoid());
1155:       assertFalse(node0.isTry());
1156:       assertFalse(node0.isCatch());
1157:       assertFalse(node0.hasMoreThanOneChild());
1158:       assertFalse(node0.isFor());
1159:       assertFalse(node0.isWhile());
1160:       assertFalse(node0.isReturn());
1161:       assertFalse(node0.isBlock());
1162:       assertFalse(node0.isNE());
1163:       assertEquals((-1), node0.getSourcePosition());
1164:       assertFalse(node0.isIf());
1165:       assertEquals((-1), node0.getLineno());
1166:       assertFalse(node0.isIn());
1167:       assertFalse(node0.isDebugger());
1168:       assertFalse(node0.isFunction());
1169:       assertFalse(node0.isInc());
1170:       assertFalse(node0.isCast());
1171:       assertFalse(node0.isContinue());
1172:       assertFalse(node0.isFalse());
1173:       assertFalse(node0.isThrow());
1174:       assertTrue(node1.hasMoreThanOneChild());
1175:       assertFalse(node1.isCase());
1176:       assertEquals((-1), node1.getCharno());
1177:       assertFalse(node1.isSwitch());
1178:       assertFalse(node1.isHook());
1179:       assertFalse(node1.isFalse());
1180:       assertTrue(node1.hasChildren());
1181:       assertFalse(node1.isBreak());
1182:       assertFalse(node1.isIf());
1183:       assertFalse(node1.isDelProp());
1184:       assertFalse(node1.isThrow());
1185:       assertFalse(node1.isNE());
1186:       assertFalse(node1.isIn());
1187:       assertFalse(node1.isInc());
1188:       assertFalse(node1.isEmpty());
1189:       assertFalse(node1.isNot());
1190:       assertFalse(node1.isDebugger());
1191:       assertFalse(node1.isVoid());
1192:       assertFalse(node1.isTrue());
1193:       assertFalse(node1.isAnd());
1194:       assertEquals(2, node1.getChildCount());
1195:       assertFalse(node1.isExprResult());
1196:       assertFalse(node1.isGetElem());
1197:       assertFalse(node1.isFunction());
1198:       assertFalse(node1.isCast());
1199:       assertFalse(node1.isDec());
1200:       assertFalse(node1.isTypeOf());
1201:       assertFalse(node1.isComma());
1202:       assertFalse(node1.isAssign());
1203:       assertEquals((-1), node1.getSourcePosition());
1204:       assertFalse(node1.isGetProp());
1205:       assertFalse(node1.isObjectLit());
1206:       assertFalse(node1.isString());
1207:       assertFalse(node1.isDo());
1208:       assertFalse(node1.isBlock());
1209:       assertFalse(node1.isWhile());
1210:       assertFalse(node1.isReturn());
1211:       assertFalse(node1.isLabel());
1212:       assertEquals((-1), node1.getLineno());
1213:       assertFalse(node1.isCall());
1214:       assertFalse(node1.isContinue());
1215:       assertFalse(node1.isNull());
1216:       assertFalse(node1.isSetterDef());
1217:       assertFalse(node1.isName());
1218:       assertFalse(node1.isAssignAdd());
1219:       assertFalse(node1.isVar());
1220:       assertFalse(node1.isOr());
1221:       assertFalse(node1.isNew());
1222:       assertFalse(node1.isAdd());
1223:       assertFalse(node1.isDefaultCase());
1224:       assertFalse(node1.isScript());
1225:       assertFalse(node1.isRegExp());
1226:       assertFalse(node1.isInstanceOf());
1227:       assertFalse(node1.isArrayLit());
1228:       assertFalse(node1.isWith());
1229:       assertFalse(node1.isCatch());
1230:       assertFalse(node1.isNumber());
1231:       assertFalse(node1.isGetterDef());
1232:       assertFalse(node1.isLabelName());
1233:       assertEquals(55, node1.getType());
1234:       assertFalse(node1.isStringKey());
1235:       assertFalse(node1.isFor());
1236:       assertFalse(node1.isThis());
1237:       assertFalse(node1.isParamList());
1238:       assertFalse(node1.hasOneChild());
1239:       assertFalse(node1.isTry());
1240:       assertEquals(0, jSTypeArray0.length);
1241:       assertFalse(node0.equals((Object)node2));
1242:       assertFalse(node0.equals((Object)node4));
1243:       assertFalse(node0.equals((Object)node3));
1244:       assertFalse(node0.equals((Object)node1));
1245:       assertFalse(node1.equals((Object)node0));
1246:       assertFalse(node1.equals((Object)node4));
1247:       assertFalse(node1.equals((Object)node3));
1248:       assertFalse(node1.equals((Object)node2));
1249:       assertTrue(boolean1 == boolean0);
1250:       assertFalse(boolean1);
1251:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1252:       assertEquals(8, Node.FLAG_NO_THROWS);
1253:       assertEquals(39, Node.EMPTY_BLOCK);
1254:       assertEquals(48, Node.DIRECTIVES);
1255:       assertEquals(55, Node.INFERRED_FUNCTION);
1256:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1257:       assertEquals(57, Node.REFLECTED_OBJECT);
1258:       assertEquals(52, Node.LENGTH);
1259:       assertEquals(50, Node.FREE_CALL);
1260:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1261:       assertEquals(54, Node.SLASH_V);
1262:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1263:       assertEquals(53, Node.INPUT_ID);
1264:       assertEquals(43, Node.IS_CONSTANT_NAME);
1265:       assertEquals(57, Node.LAST_PROP);
1266:       assertEquals(40, Node.ORIGINALNAME_PROP);
1267:       assertEquals(30, Node.VAR_ARGS_NAME);
1268:       assertEquals(2, Node.POST_FLAG);
1269:       assertEquals(47, Node.IS_DISPATCHER);
1270:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1271:       assertEquals(37, Node.OPT_ARG_NAME);
1272:       assertEquals(32, Node.INCRDECR_PROP);
1273:       assertEquals(46, Node.IS_NAMESPACE);
1274:       assertEquals(56, Node.CHANGE_TIME);
1275:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1276:       assertEquals(1, Node.DECR_FLAG);
1277:       assertEquals(29, Node.JSDOC_INFO_PROP);
1278:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1279:       assertEquals(36, Node.QUOTED_PROP);
1280:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1281:       assertEquals(49, Node.DIRECT_EVAL);
1282:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1283:       assertEquals(12, Node.COLUMN_BITS);
1284:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1285:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1286:       assertEquals(4095, Node.COLUMN_MASK);
1287:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1288:       assertEquals(57, Node.LAST_PROP);
1289:       assertEquals(54, Node.SLASH_V);
1290:       assertEquals(52, Node.LENGTH);
1291:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1292:       assertEquals(30, Node.VAR_ARGS_NAME);
1293:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1294:       assertEquals(57, Node.REFLECTED_OBJECT);
1295:       assertEquals(40, Node.ORIGINALNAME_PROP);
1296:       assertEquals(46, Node.IS_NAMESPACE);
1297:       assertEquals(37, Node.OPT_ARG_NAME);
1298:       assertEquals(49, Node.DIRECT_EVAL);
1299:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1300:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1301:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1302:       assertEquals(50, Node.FREE_CALL);
1303:       assertEquals(12, Node.COLUMN_BITS);
1304:       assertEquals(32, Node.INCRDECR_PROP);
1305:       assertEquals(1, Node.DECR_FLAG);
1306:       assertEquals(43, Node.IS_CONSTANT_NAME);
1307:       assertEquals(36, Node.QUOTED_PROP);
1308:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1309:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1310:       assertEquals(4095, Node.COLUMN_MASK);
1311:       assertEquals(48, Node.DIRECTIVES);
1312:       assertEquals(56, Node.CHANGE_TIME);
1313:       assertEquals(8, Node.FLAG_NO_THROWS);
1314:       assertEquals(39, Node.EMPTY_BLOCK);
1315:       assertEquals(47, Node.IS_DISPATCHER);
1316:       assertEquals(29, Node.JSDOC_INFO_PROP);
1317:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1318:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1319:       assertEquals(2, Node.POST_FLAG);
1320:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1321:       assertEquals(55, Node.INFERRED_FUNCTION);
1322:       assertEquals(53, Node.INPUT_ID);
1323:       
1324:       Node node5 = node1.cloneNode();
1325:       assertNotSame(node0, node5);
1326:       assertNotSame(node0, node1);
1327:       assertNotSame(node1, node0);
1328:       assertNotSame(node1, node5);
1329:       assertNotSame(node5, node1);
1330:       assertNotSame(node5, node0);
1331:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1332:       assertEquals(83, node0.getType());
1333:       assertFalse(node0.isComma());
1334:       assertFalse(node0.isGetProp());
1335:       assertFalse(node0.isBreak());
1336:       assertFalse(node0.isObjectLit());
1337:       assertFalse(node0.isAnd());
1338:       assertTrue(node0.isParamList());
1339:       assertFalse(node0.isNot());
1340:       assertEquals((-1), node0.getCharno());
1341:       assertFalse(node0.isScript());
1342:       assertFalse(node0.isWith());
1343:       assertFalse(node0.isCase());
1344:       assertFalse(node0.isString());
1345:       assertFalse(node0.isExprResult());
1346:       assertFalse(node0.hasOneChild());
1347:       assertFalse(node0.isInstanceOf());
1348:       assertFalse(node0.isAssign());
1349:       assertFalse(node0.hasChildren());
1350:       assertFalse(node0.isHook());
1351:       assertFalse(node0.isThis());
1352:       assertFalse(node0.isDec());
1353:       assertFalse(node0.isGetterDef());
1354:       assertFalse(node0.isDelProp());
1355:       assertFalse(node0.isTypeOf());
1356:       assertFalse(node0.isNumber());
1357:       assertFalse(node0.isEmpty());
1358:       assertFalse(node0.isLabelName());
1359:       assertFalse(node0.isGetElem());
1360:       assertFalse(node0.isArrayLit());
1361:       assertFalse(node0.isOr());
1362:       assertFalse(node0.isTrue());
1363:       assertFalse(node0.isSwitch());
1364:       assertFalse(node0.isDefaultCase());
1365:       assertFalse(node0.isAdd());
1366:       assertFalse(node0.isDo());
1367:       assertFalse(node0.isNew());
1368:       assertFalse(node0.isVar());
1369:       assertEquals(0, node0.getChildCount());
1370:       assertFalse(node0.isLabel());
1371:       assertFalse(node0.isAssignAdd());
1372:       assertFalse(node0.isCall());
1373:       assertFalse(node0.isSetterDef());
1374:       assertFalse(node0.isName());
1375:       assertFalse(node0.isStringKey());
1376:       assertFalse(node0.isNull());
1377:       assertFalse(node0.isRegExp());
1378:       assertFalse(node0.isVoid());
1379:       assertFalse(node0.isTry());
1380:       assertFalse(node0.isCatch());
1381:       assertFalse(node0.hasMoreThanOneChild());
1382:       assertFalse(node0.isFor());
1383:       assertFalse(node0.isWhile());
1384:       assertFalse(node0.isReturn());
1385:       assertFalse(node0.isBlock());
1386:       assertFalse(node0.isNE());
1387:       assertEquals((-1), node0.getSourcePosition());
1388:       assertFalse(node0.isIf());
1389:       assertEquals((-1), node0.getLineno());
1390:       assertFalse(node0.isIn());
1391:       assertFalse(node0.isDebugger());
1392:       assertFalse(node0.isFunction());
1393:       assertFalse(node0.isInc());
1394:       assertFalse(node0.isCast());
1395:       assertFalse(node0.isContinue());
1396:       assertFalse(node0.isFalse());
1397:       assertFalse(node0.isThrow());
1398:       assertTrue(node1.hasMoreThanOneChild());
1399:       assertFalse(node1.isCase());
1400:       assertEquals((-1), node1.getCharno());
1401:       assertFalse(node1.isSwitch());
1402:       assertFalse(node1.isHook());
1403:       assertFalse(node1.isFalse());
1404:       assertTrue(node1.hasChildren());
1405:       assertFalse(node1.isBreak());
1406:       assertFalse(node1.isIf());
1407:       assertFalse(node1.isDelProp());
1408:       assertFalse(node1.isThrow());
1409:       assertFalse(node1.isNE());
1410:       assertFalse(node1.isIn());
1411:       assertFalse(node1.isInc());
1412:       assertFalse(node1.isEmpty());
1413:       assertFalse(node1.isNot());
1414:       assertFalse(node1.isDebugger());
1415:       assertFalse(node1.isVoid());
1416:       assertFalse(node1.isTrue());
1417:       assertFalse(node1.isAnd());
1418:       assertEquals(2, node1.getChildCount());
1419:       assertFalse(node1.isExprResult());
1420:       assertFalse(node1.isGetElem());
1421:       assertFalse(node1.isFunction());
1422:       assertFalse(node1.isCast());
1423:       assertFalse(node1.isDec());
1424:       assertFalse(node1.isTypeOf());
1425:       assertFalse(node1.isComma());
1426:       assertFalse(node1.isAssign());
1427:       assertEquals((-1), node1.getSourcePosition());
1428:       assertFalse(node1.isGetProp());
1429:       assertFalse(node1.isObjectLit());
1430:       assertFalse(node1.isString());
1431:       assertFalse(node1.isDo());
1432:       assertFalse(node1.isBlock());
1433:       assertFalse(node1.isWhile());
1434:       assertFalse(node1.isReturn());
1435:       assertFalse(node1.isLabel());
1436:       assertEquals((-1), node1.getLineno());
1437:       assertFalse(node1.isCall());
1438:       assertFalse(node1.isContinue());
1439:       assertFalse(node1.isNull());
1440:       assertFalse(node1.isSetterDef());
1441:       assertFalse(node1.isName());
1442:       assertFalse(node1.isAssignAdd());
1443:       assertFalse(node1.isVar());
1444:       assertFalse(node1.isOr());
1445:       assertFalse(node1.isNew());
1446:       assertFalse(node1.isAdd());
1447:       assertFalse(node1.isDefaultCase());
1448:       assertFalse(node1.isScript());
1449:       assertFalse(node1.isRegExp());
1450:       assertFalse(node1.isInstanceOf());
1451:       assertFalse(node1.isArrayLit());
1452:       assertFalse(node1.isWith());
1453:       assertFalse(node1.isCatch());
1454:       assertFalse(node1.isNumber());
1455:       assertFalse(node1.isGetterDef());
1456:       assertFalse(node1.isLabelName());
1457:       assertEquals(55, node1.getType());
1458:       assertFalse(node1.isStringKey());
1459:       assertFalse(node1.isFor());
1460:       assertFalse(node1.isThis());
1461:       assertFalse(node1.isParamList());
1462:       assertFalse(node1.hasOneChild());
1463:       assertFalse(node1.isTry());
1464:       assertFalse(node5.isCast());
1465:       assertFalse(node5.hasOneChild());
1466:       assertFalse(node5.isLabelName());
1467:       assertFalse(node5.isExprResult());
1468:       assertFalse(node5.isGetElem());
1469:       assertFalse(node5.isDec());
1470:       assertFalse(node5.isTypeOf());
1471:       assertFalse(node5.isAssign());
1472:       assertFalse(node5.isLabel());
1473:       assertFalse(node5.isAssignAdd());
1474:       assertFalse(node5.hasChildren());
1475:       assertFalse(node5.isReturn());
1476:       assertFalse(node5.hasMoreThanOneChild());
1477:       assertFalse(node5.isDo());
1478:       assertFalse(node5.isWith());
1479:       assertEquals((-1), node5.getLineno());
1480:       assertFalse(node5.isInstanceOf());
1481:       assertFalse(node5.isOr());
1482:       assertFalse(node5.isVar());
1483:       assertFalse(node5.isNew());
1484:       assertFalse(node5.isAdd());
1485:       assertFalse(node5.isHook());
1486:       assertFalse(node5.isBlock());
1487:       assertFalse(node5.isThis());
1488:       assertEquals(0, node5.getChildCount());
1489:       assertFalse(node5.isCase());
1490:       assertFalse(node5.isScript());
1491:       assertFalse(node5.isSwitch());
1492:       assertEquals((-1), node5.getCharno());
1493:       assertFalse(node5.isParamList());
1494:       assertFalse(node5.isNumber());
1495:       assertFalse(node5.isGetterDef());
1496:       assertEquals(55, node5.getType());
1497:       assertFalse(node5.isStringKey());
1498:       assertFalse(node5.isArrayLit());
1499:       assertFalse(node5.isEmpty());
1500:       assertFalse(node5.isTry());
1501:       assertFalse(node5.isDefaultCase());
1502:       assertFalse(node5.isFunction());
1503:       assertFalse(node5.isRegExp());
1504:       assertFalse(node5.isFor());
1505:       assertFalse(node5.isCatch());
1506:       assertFalse(node5.isIn());
1507:       assertFalse(node5.isNE());
1508:       assertFalse(node5.isVoid());
1509:       assertFalse(node5.isIf());
1510:       assertFalse(node5.isDelProp());
1511:       assertFalse(node5.isNull());
1512:       assertFalse(node5.isTrue());
1513:       assertFalse(node5.isFalse());
1514:       assertFalse(node5.isName());
1515:       assertFalse(node5.isBreak());
1516:       assertFalse(node5.isInc());
1517:       assertFalse(node5.isCall());
1518:       assertFalse(node5.isComma());
1519:       assertFalse(node5.isSetterDef());
1520:       assertFalse(node5.isWhile());
1521:       assertFalse(node5.isThrow());
1522:       assertFalse(node5.isContinue());
1523:       assertFalse(node5.isAnd());
1524:       assertFalse(node5.isObjectLit());
1525:       assertFalse(node5.isString());
1526:       assertFalse(node5.isGetProp());
1527:       assertFalse(node5.isDebugger());
1528:       assertEquals((-1), node5.getSourcePosition());
1529:       assertFalse(node5.isNot());
1530:       assertEquals(0, jSTypeArray0.length);
1531:       assertFalse(node0.equals((Object)node2));
1532:       assertFalse(node0.equals((Object)node4));
1533:       assertFalse(node0.equals((Object)node3));
1534:       assertFalse(node0.equals((Object)node1));
1535:       assertFalse(node1.equals((Object)node0));
1536:       assertFalse(node1.equals((Object)node4));
1537:       assertFalse(node1.equals((Object)node3));
1538:       assertFalse(node1.equals((Object)node2));
1539:       assertFalse(node5.equals((Object)node4));
1540:       assertFalse(node5.equals((Object)node2));
1541:       assertFalse(node5.equals((Object)node1));
1542:       assertFalse(node5.equals((Object)node3));
1543:       assertFalse(node5.equals((Object)node0));
1544:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1545:       assertEquals(8, Node.FLAG_NO_THROWS);
1546:       assertEquals(39, Node.EMPTY_BLOCK);
1547:       assertEquals(48, Node.DIRECTIVES);
1548:       assertEquals(55, Node.INFERRED_FUNCTION);
1549:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1550:       assertEquals(57, Node.REFLECTED_OBJECT);
1551:       assertEquals(52, Node.LENGTH);
1552:       assertEquals(50, Node.FREE_CALL);
1553:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1554:       assertEquals(54, Node.SLASH_V);
1555:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1556:       assertEquals(53, Node.INPUT_ID);
1557:       assertEquals(43, Node.IS_CONSTANT_NAME);
1558:       assertEquals(57, Node.LAST_PROP);
1559:       assertEquals(40, Node.ORIGINALNAME_PROP);
1560:       assertEquals(30, Node.VAR_ARGS_NAME);
1561:       assertEquals(2, Node.POST_FLAG);
1562:       assertEquals(47, Node.IS_DISPATCHER);
1563:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1564:       assertEquals(37, Node.OPT_ARG_NAME);
1565:       assertEquals(32, Node.INCRDECR_PROP);
1566:       assertEquals(46, Node.IS_NAMESPACE);
1567:       assertEquals(56, Node.CHANGE_TIME);
1568:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1569:       assertEquals(1, Node.DECR_FLAG);
1570:       assertEquals(29, Node.JSDOC_INFO_PROP);
1571:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1572:       assertEquals(36, Node.QUOTED_PROP);
1573:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1574:       assertEquals(49, Node.DIRECT_EVAL);
1575:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1576:       assertEquals(12, Node.COLUMN_BITS);
1577:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1578:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1579:       assertEquals(4095, Node.COLUMN_MASK);
1580:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1581:       assertEquals(57, Node.LAST_PROP);
1582:       assertEquals(54, Node.SLASH_V);
1583:       assertEquals(52, Node.LENGTH);
1584:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1585:       assertEquals(30, Node.VAR_ARGS_NAME);
1586:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1587:       assertEquals(57, Node.REFLECTED_OBJECT);
1588:       assertEquals(40, Node.ORIGINALNAME_PROP);
1589:       assertEquals(46, Node.IS_NAMESPACE);
1590:       assertEquals(37, Node.OPT_ARG_NAME);
1591:       assertEquals(49, Node.DIRECT_EVAL);
1592:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1593:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1594:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1595:       assertEquals(50, Node.FREE_CALL);
1596:       assertEquals(12, Node.COLUMN_BITS);
1597:       assertEquals(32, Node.INCRDECR_PROP);
1598:       assertEquals(1, Node.DECR_FLAG);
1599:       assertEquals(43, Node.IS_CONSTANT_NAME);
1600:       assertEquals(36, Node.QUOTED_PROP);
1601:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1602:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1603:       assertEquals(4095, Node.COLUMN_MASK);
1604:       assertEquals(48, Node.DIRECTIVES);
1605:       assertEquals(56, Node.CHANGE_TIME);
1606:       assertEquals(8, Node.FLAG_NO_THROWS);
1607:       assertEquals(39, Node.EMPTY_BLOCK);
1608:       assertEquals(47, Node.IS_DISPATCHER);
1609:       assertEquals(29, Node.JSDOC_INFO_PROP);
1610:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1611:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1612:       assertEquals(2, Node.POST_FLAG);
1613:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1614:       assertEquals(55, Node.INFERRED_FUNCTION);
1615:       assertEquals(53, Node.INPUT_ID);
1616:       assertEquals(56, Node.CHANGE_TIME);
1617:       assertEquals(37, Node.OPT_ARG_NAME);
1618:       assertEquals(2, Node.POST_FLAG);
1619:       assertEquals(47, Node.IS_DISPATCHER);
1620:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1621:       assertEquals(1, Node.DECR_FLAG);
1622:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1623:       assertEquals(12, Node.COLUMN_BITS);
1624:       assertEquals(32, Node.INCRDECR_PROP);
1625:       assertEquals(46, Node.IS_NAMESPACE);
1626:       assertEquals(43, Node.IS_CONSTANT_NAME);
1627:       assertEquals(54, Node.SLASH_V);
1628:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1629:       assertEquals(50, Node.FREE_CALL);
1630:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1631:       assertEquals(40, Node.ORIGINALNAME_PROP);
1632:       assertEquals(57, Node.REFLECTED_OBJECT);
1633:       assertEquals(48, Node.DIRECTIVES);
1634:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1635:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1636:       assertEquals(30, Node.VAR_ARGS_NAME);
1637:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1638:       assertEquals(4095, Node.COLUMN_MASK);
1639:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1640:       assertEquals(55, Node.INFERRED_FUNCTION);
1641:       assertEquals(49, Node.DIRECT_EVAL);
1642:       assertEquals(57, Node.LAST_PROP);
1643:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1644:       assertEquals(36, Node.QUOTED_PROP);
1645:       assertEquals(53, Node.INPUT_ID);
1646:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1647:       assertEquals(39, Node.EMPTY_BLOCK);
1648:       assertEquals(29, Node.JSDOC_INFO_PROP);
1649:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1650:       assertEquals(52, Node.LENGTH);
1651:       assertEquals(8, Node.FLAG_NO_THROWS);
1652:       assertNotNull(node5);
1653:       
1654:       boolean boolean2 = node0.isEmpty();
1655:       assertNotSame(node0, node5);
1656:       assertNotSame(node0, node1);
1657:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1658:       assertEquals(83, node0.getType());
1659:       assertFalse(node0.isComma());
1660:       assertFalse(node0.isGetProp());
1661:       assertFalse(node0.isBreak());
1662:       assertFalse(node0.isObjectLit());
1663:       assertFalse(node0.isAnd());
1664:       assertTrue(node0.isParamList());
1665:       assertFalse(node0.isNot());
1666:       assertEquals((-1), node0.getCharno());
1667:       assertFalse(node0.isScript());
1668:       assertFalse(node0.isWith());
1669:       assertFalse(node0.isCase());
1670:       assertFalse(node0.isString());
1671:       assertFalse(node0.isExprResult());
1672:       assertFalse(node0.hasOneChild());
1673:       assertFalse(node0.isInstanceOf());
1674:       assertFalse(node0.isAssign());
1675:       assertFalse(node0.hasChildren());
1676:       assertFalse(node0.isHook());
1677:       assertFalse(node0.isThis());
1678:       assertFalse(node0.isDec());
1679:       assertFalse(node0.isGetterDef());
1680:       assertFalse(node0.isDelProp());
1681:       assertFalse(node0.isTypeOf());
1682:       assertFalse(node0.isNumber());
1683:       assertFalse(node0.isEmpty());
1684:       assertFalse(node0.isLabelName());
1685:       assertFalse(node0.isGetElem());
1686:       assertFalse(node0.isArrayLit());
1687:       assertFalse(node0.isOr());
1688:       assertFalse(node0.isTrue());
1689:       assertFalse(node0.isSwitch());
1690:       assertFalse(node0.isDefaultCase());
1691:       assertFalse(node0.isAdd());
1692:       assertFalse(node0.isDo());
1693:       assertFalse(node0.isNew());
1694:       assertFalse(node0.isVar());
1695:       assertEquals(0, node0.getChildCount());
1696:       assertFalse(node0.isLabel());
1697:       assertFalse(node0.isAssignAdd());
1698:       assertFalse(node0.isCall());
1699:       assertFalse(node0.isSetterDef());
1700:       assertFalse(node0.isName());
1701:       assertFalse(node0.isStringKey());
1702:       assertFalse(node0.isNull());
1703:       assertFalse(node0.isRegExp());
1704:       assertFalse(node0.isVoid());
1705:       assertFalse(node0.isTry());
1706:       assertFalse(node0.isCatch());
1707:       assertFalse(node0.hasMoreThanOneChild());
1708:       assertFalse(node0.isFor());
1709:       assertFalse(node0.isWhile());
1710:       assertFalse(node0.isReturn());
1711:       assertFalse(node0.isBlock());
1712:       assertFalse(node0.isNE());
1713:       assertEquals((-1), node0.getSourcePosition());
1714:       assertFalse(node0.isIf());
1715:       assertEquals((-1), node0.getLineno());
1716:       assertFalse(node0.isIn());
1717:       assertFalse(node0.isDebugger());
1718:       assertFalse(node0.isFunction());
1719:       assertFalse(node0.isInc());
1720:       assertFalse(node0.isCast());
1721:       assertFalse(node0.isContinue());
1722:       assertFalse(node0.isFalse());
1723:       assertFalse(node0.isThrow());
1724:       assertEquals(0, jSTypeArray0.length);
1725:       assertFalse(node0.equals((Object)node2));
1726:       assertFalse(node0.equals((Object)node4));
1727:       assertFalse(node0.equals((Object)node5));
1728:       assertFalse(node0.equals((Object)node3));
1729:       assertFalse(node0.equals((Object)node1));
1730:       assertTrue(boolean2 == boolean1);
1731:       assertTrue(boolean2 == boolean0);
1732:       assertFalse(boolean2);
1733:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1734:       assertEquals(8, Node.FLAG_NO_THROWS);
1735:       assertEquals(39, Node.EMPTY_BLOCK);
1736:       assertEquals(48, Node.DIRECTIVES);
1737:       assertEquals(55, Node.INFERRED_FUNCTION);
1738:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1739:       assertEquals(57, Node.REFLECTED_OBJECT);
1740:       assertEquals(52, Node.LENGTH);
1741:       assertEquals(50, Node.FREE_CALL);
1742:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1743:       assertEquals(54, Node.SLASH_V);
1744:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1745:       assertEquals(53, Node.INPUT_ID);
1746:       assertEquals(43, Node.IS_CONSTANT_NAME);
1747:       assertEquals(57, Node.LAST_PROP);
1748:       assertEquals(40, Node.ORIGINALNAME_PROP);
1749:       assertEquals(30, Node.VAR_ARGS_NAME);
1750:       assertEquals(2, Node.POST_FLAG);
1751:       assertEquals(47, Node.IS_DISPATCHER);
1752:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1753:       assertEquals(37, Node.OPT_ARG_NAME);
1754:       assertEquals(32, Node.INCRDECR_PROP);
1755:       assertEquals(46, Node.IS_NAMESPACE);
1756:       assertEquals(56, Node.CHANGE_TIME);
1757:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1758:       assertEquals(1, Node.DECR_FLAG);
1759:       assertEquals(29, Node.JSDOC_INFO_PROP);
1760:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1761:       assertEquals(36, Node.QUOTED_PROP);
1762:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1763:       assertEquals(49, Node.DIRECT_EVAL);
1764:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1765:       assertEquals(12, Node.COLUMN_BITS);
1766:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1767:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1768:       assertEquals(4095, Node.COLUMN_MASK);
1769:   }
1770: }
RegularFileObject[/tmp/EvoSuite_252_1628158417591/com/google/javascript/rhino/Node_252_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:13:37 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_252_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_252_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.VoidType",
121:       "com.google.common.base.Joiner",
122:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
123:       "com.google.common.collect.AbstractListMultimap",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.javascript.rhino.jstype.ProxyObjectType",
128:       "com.google.common.collect.Sets$SetView",
129:       "com.google.common.collect.RegularImmutableAsList",
130:       "com.google.javascript.rhino.jstype.TemplateType",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.javascript.rhino.JSDocInfo$1",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
206:       "com.google.common.collect.Iterators$1",
207:       "com.google.common.collect.Iterators$2",
208:       "com.google.javascript.rhino.jstype.NamespaceType",
209:       "com.google.common.collect.Iterators$3",
210:       "com.google.common.collect.Sets",
211:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
212:       "com.google.javascript.rhino.Node$ObjectPropListItem",
213:       "com.google.common.collect.Lists$StringAsImmutableList",
214:       "com.google.common.collect.Lists$2",
215:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
216:       "com.google.common.collect.ImmutableList$Builder",
217:       "com.google.common.collect.Lists$1",
218:       "com.google.javascript.rhino.jstype.StaticReference",
219:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
220:       "com.google.common.collect.Multiset",
221:       "com.google.common.collect.AbstractMultimap",
222:       "com.google.common.collect.Multimap",
223:       "com.google.common.collect.Iterators",
224:       "com.google.common.collect.Maps$ImprovedAbstractMap",
225:       "com.google.common.collect.ImmutableBiMap",
226:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
228:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
229:       "com.google.common.collect.ImmutableList",
230:       "com.google.common.collect.SingletonImmutableBiMap",
231:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
232:       "com.google.javascript.rhino.jstype.StringType",
233:       "com.google.javascript.rhino.Node$AbstractPropListItem",
234:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
235:       "com.google.javascript.rhino.jstype.TemplatizedType",
236:       "com.google.javascript.rhino.jstype.Visitor",
237:       "com.google.javascript.rhino.jstype.NoResolvedType",
238:       "com.google.javascript.rhino.jstype.JSTypeNative",
239:       "com.google.javascript.rhino.jstype.AllType",
240:       "com.google.common.collect.Maps",
241:       "com.google.common.collect.SetMultimap",
242:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
243:       "com.google.common.collect.Maps$EntryTransformer",
244:       "com.google.javascript.rhino.JSTypeExpression",
245:       "com.google.common.collect.Iterators$MergingIterator"
246:     );
247:   } 
248: 
249:   private static void resetClasses() {
250:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_252_tmp__ESTest_scaffolding.class.getClassLoader()); 
251: 
252:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
253:       "com.google.javascript.rhino.Node",
254:       "com.google.javascript.rhino.Node$NumberNode",
255:       "com.google.javascript.rhino.Node$StringNode",
256:       "com.google.javascript.rhino.Node$AbstractPropListItem",
257:       "com.google.javascript.rhino.Node$ObjectPropListItem",
258:       "com.google.javascript.rhino.Node$IntPropListItem",
259:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
260:       "com.google.javascript.rhino.Node$AncestorIterable",
261:       "com.google.javascript.rhino.Node$NodeMismatch",
262:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
263:       "com.google.javascript.rhino.Node$SideEffectFlags",
264:       "com.google.javascript.rhino.Token",
265:       "com.google.common.base.Preconditions",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.JSDocInfo",
339:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.InputId",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
344:       "com.google.common.collect.Sets$ImprovedAbstractSet",
345:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
346:       "com.google.common.collect.Hashing",
347:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.common.collect.Iterables",
351:       "com.google.common.collect.AbstractIndexedListIterator",
352:       "com.google.common.collect.Iterators$11",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.javascript.rhino.Node$AncestorIterable$1",
356:       "com.google.javascript.rhino.jstype.TemplatizedType",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.javascript.rhino.JSTypeExpression",
361:       "com.google.common.collect.Iterators$12",
362:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
363:       "com.google.javascript.rhino.jstype.NamedType",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.common.collect.AbstractMultimap$Values",
366:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
367:       "com.google.common.collect.AbstractMapBasedMultimap$1",
368:       "com.google.common.collect.Multimaps$Entries",
369:       "com.google.common.collect.AbstractMultimap$Entries",
370:       "com.google.common.collect.AbstractMapBasedMultimap$2",
371:       "com.google.common.collect.ImmutableList$1",
372:       "com.google.common.collect.Platform",
373:       "com.google.javascript.rhino.jstype.JSType$TypePair",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
375:       "com.google.javascript.rhino.jstype.JSType$2"
376:     );
377:   }
378: }

[MASTER] 10:13:37.978 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

JSType[] jSTypeArray0 = new JSType[0];
Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(83, node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertTrue(node0.isParamList());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(0, jSTypeArray0.length);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(node0);

Node node1 = new Node(55, node0, node0, node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(83, node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertTrue(node0.isParamList());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node1.isCase());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFalse());
assertTrue(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertEquals(55, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isTry());
assertEquals(0, jSTypeArray0.length);
assertFalse(node1.equals((Object)node0));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertNotNull(node1);

Iterable<Node> iterable0 = new Stack<Node>();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);

Node node2 = Node.newString("", 0, (-521));
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isVar());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isTrue());
assertFalse(node2.isNew());
assertEquals(40, node2.getType());
assertFalse(node2.isVoid());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isCase());
assertTrue(node2.isString());
assertFalse(node2.isBlock());
assertFalse(node2.isTry());
assertFalse(node2.isSwitch());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isInc());
assertFalse(node2.isExprResult());
assertFalse(node2.isIn());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isCast());
assertFalse(node2.isReturn());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isContinue());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isWhile());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertNotNull(node2);

node1.addChildrenAfter(node2, node0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(83, node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertTrue(node0.isParamList());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertTrue(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertTrue(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isAnd());
assertEquals(2, node1.getChildCount());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertEquals(55, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isVar());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isTrue());
assertFalse(node2.isNew());
assertEquals(40, node2.getType());
assertFalse(node2.isVoid());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isCase());
assertTrue(node2.isString());
assertFalse(node2.isBlock());
assertFalse(node2.isTry());
assertFalse(node2.isSwitch());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isInc());
assertFalse(node2.isExprResult());
assertFalse(node2.isIn());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isCast());
assertFalse(node2.isReturn());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isContinue());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isWhile());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(0, jSTypeArray0.length);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);

Node node3 = Node.newNumber((double) 57, 1682, 12);
assertFalse(node3.isWith());
assertFalse(node3.isScript());
assertFalse(node3.isExprResult());
assertFalse(node3.isAnd());
assertEquals(12, node3.getCharno());
assertFalse(node3.isCast());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isThis());
assertFalse(node3.isAssign());
assertFalse(node3.isComma());
assertFalse(node3.isBreak());
assertFalse(node3.isThrow());
assertFalse(node3.isGetElem());
assertFalse(node3.isOr());
assertEquals(39, node3.getType());
assertFalse(node3.isSwitch());
assertEquals(1682, node3.getLineno());
assertFalse(node3.isCase());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isHook());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isVar());
assertEquals(6889484, node3.getSourcePosition());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isBlock());
assertFalse(node3.isLabel());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabelName());
assertFalse(node3.hasOneChild());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isTry());
assertFalse(node3.isCatch());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isEmpty());
assertFalse(node3.isNull());
assertFalse(node3.isNE());
assertFalse(node3.isCall());
assertFalse(node3.isSetterDef());
assertFalse(node3.isName());
assertFalse(node3.isIn());
assertFalse(node3.isAdd());
assertFalse(node3.isTrue());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isInc());
assertFalse(node3.isReturn());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isGetProp());
assertTrue(node3.isNumber());
assertFalse(node3.isDebugger());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertNotNull(node3);

boolean boolean0 = node3.isSetterDef();
assertFalse(node3.isWith());
assertFalse(node3.isScript());
assertFalse(node3.isExprResult());
assertFalse(node3.isAnd());
assertEquals(12, node3.getCharno());
assertFalse(node3.isCast());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isThis());
assertFalse(node3.isAssign());
assertFalse(node3.isComma());
assertFalse(node3.isBreak());
assertFalse(node3.isThrow());
assertFalse(node3.isGetElem());
assertFalse(node3.isOr());
assertEquals(39, node3.getType());
assertFalse(node3.isSwitch());
assertEquals(1682, node3.getLineno());
assertFalse(node3.isCase());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isHook());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isVar());
assertEquals(6889484, node3.getSourcePosition());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isBlock());
assertFalse(node3.isLabel());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabelName());
assertFalse(node3.hasOneChild());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isTry());
assertFalse(node3.isCatch());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isEmpty());
assertFalse(node3.isNull());
assertFalse(node3.isNE());
assertFalse(node3.isCall());
assertFalse(node3.isSetterDef());
assertFalse(node3.isName());
assertFalse(node3.isIn());
assertFalse(node3.isAdd());
assertFalse(node3.isTrue());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isInc());
assertFalse(node3.isReturn());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isGetProp());
assertTrue(node3.isNumber());
assertFalse(node3.isDebugger());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(boolean0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);

Node node4 = Node.newString(37, "Object#Key");
assertNotSame(node4, node2);
assertFalse(node4.isOr());
assertFalse(node4.isLabel());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isReturn());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isAssign());
assertFalse(node4.isLabelName());
assertFalse(node4.isGetElem());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isCast());
assertFalse(node4.isTypeOf());
assertFalse(node4.isContinue());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isVar());
assertFalse(node4.isDo());
assertFalse(node4.isSetterDef());
assertFalse(node4.isGetProp());
assertFalse(node4.isComma());
assertFalse(node4.isNull());
assertFalse(node4.isAnd());
assertFalse(node4.isFalse());
assertFalse(node4.isName());
assertFalse(node4.isBreak());
assertFalse(node4.isExprResult());
assertFalse(node4.isFunction());
assertFalse(node4.isDebugger());
assertFalse(node4.isWhile());
assertFalse(node4.isNot());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isObjectLit());
assertFalse(node4.isString());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isFor());
assertFalse(node4.isDelProp());
assertEquals(37, node4.getType());
assertFalse(node4.isVoid());
assertFalse(node4.isTrue());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isThrow());
assertFalse(node4.isEmpty());
assertFalse(node4.isInc());
assertFalse(node4.isIn());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isThis());
assertTrue(node4.isCall());
assertFalse(node4.isParamList());
assertFalse(node4.isWith());
assertFalse(node4.isCatch());
assertFalse(node4.isRegExp());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isTry());
assertFalse(node4.isBlock());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isArrayLit());
assertFalse(node4.hasOneChild());
assertFalse(node4.isSwitch());
assertFalse(node4.isHook());
assertFalse(node4.isStringKey());
assertFalse(node4.isGetterDef());
assertFalse(node4.isCase());
assertFalse(node4.isScript());
assertFalse(node4.isNumber());
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertNotNull(node4);

boolean boolean1 = node1.isOnlyModifiesArgumentsCall();
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(83, node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertTrue(node0.isParamList());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertTrue(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertTrue(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isAnd());
assertEquals(2, node1.getChildCount());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertEquals(55, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertEquals(0, jSTypeArray0.length);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);

Node node5 = node1.cloneNode();
assertNotSame(node0, node5);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node5);
assertNotSame(node5, node1);
assertNotSame(node5, node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(83, node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertTrue(node0.isParamList());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertTrue(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertTrue(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isAnd());
assertEquals(2, node1.getChildCount());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertEquals(55, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node5.isCast());
assertFalse(node5.hasOneChild());
assertFalse(node5.isLabelName());
assertFalse(node5.isExprResult());
assertFalse(node5.isGetElem());
assertFalse(node5.isDec());
assertFalse(node5.isTypeOf());
assertFalse(node5.isAssign());
assertFalse(node5.isLabel());
assertFalse(node5.isAssignAdd());
assertFalse(node5.hasChildren());
assertFalse(node5.isReturn());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isDo());
assertFalse(node5.isWith());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isOr());
assertFalse(node5.isVar());
assertFalse(node5.isNew());
assertFalse(node5.isAdd());
assertFalse(node5.isHook());
assertFalse(node5.isBlock());
assertFalse(node5.isThis());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isCase());
assertFalse(node5.isScript());
assertFalse(node5.isSwitch());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isParamList());
assertFalse(node5.isNumber());
assertFalse(node5.isGetterDef());
assertEquals(55, node5.getType());
assertFalse(node5.isStringKey());
assertFalse(node5.isArrayLit());
assertFalse(node5.isEmpty());
assertFalse(node5.isTry());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isFunction());
assertFalse(node5.isRegExp());
assertFalse(node5.isFor());
assertFalse(node5.isCatch());
assertFalse(node5.isIn());
assertFalse(node5.isNE());
assertFalse(node5.isVoid());
assertFalse(node5.isIf());
assertFalse(node5.isDelProp());
assertFalse(node5.isNull());
assertFalse(node5.isTrue());
assertFalse(node5.isFalse());
assertFalse(node5.isName());
assertFalse(node5.isBreak());
assertFalse(node5.isInc());
assertFalse(node5.isCall());
assertFalse(node5.isComma());
assertFalse(node5.isSetterDef());
assertFalse(node5.isWhile());
assertFalse(node5.isThrow());
assertFalse(node5.isContinue());
assertFalse(node5.isAnd());
assertFalse(node5.isObjectLit());
assertFalse(node5.isString());
assertFalse(node5.isGetProp());
assertFalse(node5.isDebugger());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isNot());
assertEquals(0, jSTypeArray0.length);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node0));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotNull(node5);

boolean boolean2 = node0.isEmpty();
assertNotSame(node0, node5);
assertNotSame(node0, node1);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(83, node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertTrue(node0.isParamList());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(0, jSTypeArray0.length);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);


[MASTER] 10:13:40.570 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_279_1628158420544/com/google/javascript/rhino/Node_279_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_279_1628158420544/com/google/javascript/rhino/Node_279_tmp__ESTest_scaffolding.java]]
[MASTER] 10:13:40.570 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:40.570 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:40.571 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 126
[MASTER] 10:13:40.574 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_279_1628158420544/com/google/javascript/rhino/Node_279_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:13:40 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_279_tmp__ESTest extends Node_279_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(118);
21:       assertFalse(node0.isIf());
22:       assertFalse(node0.isGetterDef());
23:       assertFalse(node0.isDelProp());
24:       assertFalse(node0.isFor());
25:       assertFalse(node0.isNE());
26:       assertFalse(node0.isIn());
27:       assertFalse(node0.isTry());
28:       assertFalse(node0.isEmpty());
29:       assertFalse(node0.isString());
30:       assertFalse(node0.isRegExp());
31:       assertFalse(node0.isCase());
32:       assertFalse(node0.isVoid());
33:       assertFalse(node0.isTrue());
34:       assertFalse(node0.isHook());
35:       assertFalse(node0.isCatch());
36:       assertFalse(node0.isBreak());
37:       assertFalse(node0.isNull());
38:       assertFalse(node0.isThis());
39:       assertFalse(node0.isStringKey());
40:       assertFalse(node0.isName());
41:       assertFalse(node0.isParamList());
42:       assertFalse(node0.isNew());
43:       assertFalse(node0.isAdd());
44:       assertFalse(node0.isDefaultCase());
45:       assertFalse(node0.isDo());
46:       assertEquals((-1), node0.getCharno());
47:       assertFalse(node0.isSwitch());
48:       assertEquals(0, node0.getChildCount());
49:       assertFalse(node0.isArrayLit());
50:       assertFalse(node0.isLabel());
51:       assertFalse(node0.isDec());
52:       assertFalse(node0.hasChildren());
53:       assertFalse(node0.isNumber());
54:       assertFalse(node0.isTypeOf());
55:       assertFalse(node0.isAssign());
56:       assertFalse(node0.isLabelName());
57:       assertEquals((-1), node0.getSourcePosition());
58:       assertFalse(node0.isAssignAdd());
59:       assertFalse(node0.hasOneChild());
60:       assertFalse(node0.isOr());
61:       assertFalse(node0.isScript());
62:       assertFalse(node0.isBlock());
63:       assertFalse(node0.isWhile());
64:       assertFalse(node0.isInstanceOf());
65:       assertFalse(node0.isReturn());
66:       assertEquals((-1), node0.getLineno());
67:       assertFalse(node0.isExprResult());
68:       assertFalse(node0.isGetElem());
69:       assertFalse(node0.isCall());
70:       assertFalse(node0.hasMoreThanOneChild());
71:       assertFalse(node0.isWith());
72:       assertTrue(node0.isVar());
73:       assertFalse(node0.isComma());
74:       assertFalse(node0.isSetterDef());
75:       assertEquals(118, node0.getType());
76:       assertFalse(node0.isThrow());
77:       assertFalse(node0.isGetProp());
78:       assertFalse(node0.isInc());
79:       assertFalse(node0.isObjectLit());
80:       assertFalse(node0.isNot());
81:       assertFalse(node0.isDebugger());
82:       assertFalse(node0.isAnd());
83:       assertFalse(node0.isFalse());
84:       assertFalse(node0.isFunction());
85:       assertFalse(node0.isCast());
86:       assertFalse(node0.isContinue());
87:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
88:       assertEquals(47, Node.IS_DISPATCHER);
89:       assertEquals(29, Node.JSDOC_INFO_PROP);
90:       assertEquals(56, Node.CHANGE_TIME);
91:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
92:       assertEquals(2, Node.POST_FLAG);
93:       assertEquals(12, Node.COLUMN_BITS);
94:       assertEquals(53, Node.INPUT_ID);
95:       assertEquals(32, Node.INCRDECR_PROP);
96:       assertEquals(1, Node.DECR_FLAG);
97:       assertEquals(43, Node.IS_CONSTANT_NAME);
98:       assertEquals(57, Node.LAST_PROP);
99:       assertEquals(54, Node.SLASH_V);
100:       assertEquals(30, Node.VAR_ARGS_NAME);
101:       assertEquals(51, Node.STATIC_SOURCE_FILE);
102:       assertEquals(40, Node.ORIGINALNAME_PROP);
103:       assertEquals(46, Node.IS_NAMESPACE);
104:       assertEquals(8, Node.FLAG_NO_THROWS);
105:       assertEquals(39, Node.EMPTY_BLOCK);
106:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
107:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
108:       assertEquals(50, Node.FREE_CALL);
109:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
110:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
111:       assertEquals(55, Node.INFERRED_FUNCTION);
112:       assertEquals(36, Node.QUOTED_PROP);
113:       assertEquals(15, Node.NO_SIDE_EFFECTS);
114:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
115:       assertEquals(52, Node.LENGTH);
116:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
117:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
118:       assertEquals(4095, Node.COLUMN_MASK);
119:       assertEquals(57, Node.REFLECTED_OBJECT);
120:       assertEquals(37, Node.OPT_ARG_NAME);
121:       assertEquals(48, Node.DIRECTIVES);
122:       assertEquals(49, Node.DIRECT_EVAL);
123:       assertNotNull(node0);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(iterable0.contains(node0));
127:       assertFalse(node0.isIf());
128:       assertFalse(node0.isGetterDef());
129:       assertFalse(node0.isDelProp());
130:       assertFalse(node0.isFor());
131:       assertFalse(node0.isNE());
132:       assertFalse(node0.isIn());
133:       assertFalse(node0.isTry());
134:       assertFalse(node0.isEmpty());
135:       assertFalse(node0.isString());
136:       assertFalse(node0.isRegExp());
137:       assertFalse(node0.isCase());
138:       assertFalse(node0.isVoid());
139:       assertFalse(node0.isTrue());
140:       assertFalse(node0.isHook());
141:       assertFalse(node0.isCatch());
142:       assertFalse(node0.isBreak());
143:       assertFalse(node0.isNull());
144:       assertFalse(node0.isThis());
145:       assertFalse(node0.isStringKey());
146:       assertFalse(node0.isName());
147:       assertFalse(node0.isParamList());
148:       assertFalse(node0.isNew());
149:       assertFalse(node0.isAdd());
150:       assertFalse(node0.isDefaultCase());
151:       assertFalse(node0.isDo());
152:       assertEquals((-1), node0.getCharno());
153:       assertFalse(node0.isSwitch());
154:       assertEquals(0, node0.getChildCount());
155:       assertFalse(node0.isArrayLit());
156:       assertFalse(node0.isLabel());
157:       assertFalse(node0.isDec());
158:       assertFalse(node0.hasChildren());
159:       assertFalse(node0.isNumber());
160:       assertFalse(node0.isTypeOf());
161:       assertFalse(node0.isAssign());
162:       assertFalse(node0.isLabelName());
163:       assertEquals((-1), node0.getSourcePosition());
164:       assertFalse(node0.isAssignAdd());
165:       assertFalse(node0.hasOneChild());
166:       assertFalse(node0.isOr());
167:       assertFalse(node0.isScript());
168:       assertFalse(node0.isBlock());
169:       assertFalse(node0.isWhile());
170:       assertFalse(node0.isInstanceOf());
171:       assertFalse(node0.isReturn());
172:       assertEquals((-1), node0.getLineno());
173:       assertFalse(node0.isExprResult());
174:       assertFalse(node0.isGetElem());
175:       assertFalse(node0.isCall());
176:       assertFalse(node0.hasMoreThanOneChild());
177:       assertFalse(node0.isWith());
178:       assertTrue(node0.isVar());
179:       assertFalse(node0.isComma());
180:       assertFalse(node0.isSetterDef());
181:       assertEquals(118, node0.getType());
182:       assertFalse(node0.isThrow());
183:       assertFalse(node0.isGetProp());
184:       assertFalse(node0.isInc());
185:       assertFalse(node0.isObjectLit());
186:       assertFalse(node0.isNot());
187:       assertFalse(node0.isDebugger());
188:       assertFalse(node0.isAnd());
189:       assertFalse(node0.isFalse());
190:       assertFalse(node0.isFunction());
191:       assertFalse(node0.isCast());
192:       assertFalse(node0.isContinue());
193:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
194:       assertEquals(47, Node.IS_DISPATCHER);
195:       assertEquals(29, Node.JSDOC_INFO_PROP);
196:       assertEquals(56, Node.CHANGE_TIME);
197:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
198:       assertEquals(2, Node.POST_FLAG);
199:       assertEquals(12, Node.COLUMN_BITS);
200:       assertEquals(53, Node.INPUT_ID);
201:       assertEquals(32, Node.INCRDECR_PROP);
202:       assertEquals(1, Node.DECR_FLAG);
203:       assertEquals(43, Node.IS_CONSTANT_NAME);
204:       assertEquals(57, Node.LAST_PROP);
205:       assertEquals(54, Node.SLASH_V);
206:       assertEquals(30, Node.VAR_ARGS_NAME);
207:       assertEquals(51, Node.STATIC_SOURCE_FILE);
208:       assertEquals(40, Node.ORIGINALNAME_PROP);
209:       assertEquals(46, Node.IS_NAMESPACE);
210:       assertEquals(8, Node.FLAG_NO_THROWS);
211:       assertEquals(39, Node.EMPTY_BLOCK);
212:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
213:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
214:       assertEquals(50, Node.FREE_CALL);
215:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
216:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
217:       assertEquals(55, Node.INFERRED_FUNCTION);
218:       assertEquals(36, Node.QUOTED_PROP);
219:       assertEquals(15, Node.NO_SIDE_EFFECTS);
220:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
221:       assertEquals(52, Node.LENGTH);
222:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
223:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
224:       assertEquals(4095, Node.COLUMN_MASK);
225:       assertEquals(57, Node.REFLECTED_OBJECT);
226:       assertEquals(37, Node.OPT_ARG_NAME);
227:       assertEquals(48, Node.DIRECTIVES);
228:       assertEquals(49, Node.DIRECT_EVAL);
229:       assertNotNull(iterable0);
230:   }
231: }
RegularFileObject[/tmp/EvoSuite_279_1628158420544/com/google/javascript/rhino/Node_279_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:13:40 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_279_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_279_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.VoidType",
121:       "com.google.common.base.Joiner",
122:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
123:       "com.google.common.collect.AbstractListMultimap",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.javascript.rhino.jstype.ProxyObjectType",
128:       "com.google.common.collect.Sets$SetView",
129:       "com.google.common.collect.RegularImmutableAsList",
130:       "com.google.javascript.rhino.jstype.TemplateType",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.javascript.rhino.JSDocInfo$1",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
206:       "com.google.common.collect.Iterators$1",
207:       "com.google.common.collect.Iterators$2",
208:       "com.google.javascript.rhino.jstype.NamespaceType",
209:       "com.google.common.collect.Iterators$3",
210:       "com.google.common.collect.Sets",
211:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
212:       "com.google.javascript.rhino.Node$ObjectPropListItem",
213:       "com.google.common.collect.Lists$StringAsImmutableList",
214:       "com.google.common.collect.Lists$2",
215:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
216:       "com.google.common.collect.ImmutableList$Builder",
217:       "com.google.common.collect.Lists$1",
218:       "com.google.javascript.rhino.jstype.StaticReference",
219:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
220:       "com.google.common.collect.Multiset",
221:       "com.google.common.collect.AbstractMultimap",
222:       "com.google.common.collect.Multimap",
223:       "com.google.common.collect.Iterators",
224:       "com.google.common.collect.Maps$ImprovedAbstractMap",
225:       "com.google.common.collect.ImmutableBiMap",
226:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
228:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
229:       "com.google.common.collect.ImmutableList",
230:       "com.google.common.collect.SingletonImmutableBiMap",
231:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
232:       "com.google.javascript.rhino.jstype.StringType",
233:       "com.google.javascript.rhino.Node$AbstractPropListItem",
234:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
235:       "com.google.javascript.rhino.jstype.TemplatizedType",
236:       "com.google.javascript.rhino.jstype.Visitor",
237:       "com.google.javascript.rhino.jstype.NoResolvedType",
238:       "com.google.javascript.rhino.jstype.JSTypeNative",
239:       "com.google.javascript.rhino.jstype.AllType",
240:       "com.google.common.collect.Maps",
241:       "com.google.common.collect.SetMultimap",
242:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
243:       "com.google.common.collect.Maps$EntryTransformer",
244:       "com.google.javascript.rhino.JSTypeExpression",
245:       "com.google.common.collect.Iterators$MergingIterator"
246:     );
247:   } 
248: 
249:   private static void resetClasses() {
250:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_279_tmp__ESTest_scaffolding.class.getClassLoader()); 
251: 
252:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
253:       "com.google.javascript.rhino.Node",
254:       "com.google.javascript.rhino.Node$NumberNode",
255:       "com.google.javascript.rhino.Node$StringNode",
256:       "com.google.javascript.rhino.Node$AbstractPropListItem",
257:       "com.google.javascript.rhino.Node$ObjectPropListItem",
258:       "com.google.javascript.rhino.Node$IntPropListItem",
259:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
260:       "com.google.javascript.rhino.Node$AncestorIterable",
261:       "com.google.javascript.rhino.Node$NodeMismatch",
262:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
263:       "com.google.javascript.rhino.Node$SideEffectFlags",
264:       "com.google.javascript.rhino.Token",
265:       "com.google.common.base.Preconditions",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.JSDocInfo",
339:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.InputId",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
344:       "com.google.common.collect.Sets$ImprovedAbstractSet",
345:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
346:       "com.google.common.collect.Hashing",
347:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.common.collect.Iterables",
351:       "com.google.common.collect.AbstractIndexedListIterator",
352:       "com.google.common.collect.Iterators$11",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.javascript.rhino.Node$AncestorIterable$1",
356:       "com.google.javascript.rhino.jstype.TemplatizedType",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.javascript.rhino.JSTypeExpression",
361:       "com.google.common.collect.Iterators$12",
362:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
363:       "com.google.javascript.rhino.jstype.NamedType",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.common.collect.AbstractMultimap$Values",
366:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
367:       "com.google.common.collect.AbstractMapBasedMultimap$1",
368:       "com.google.common.collect.Multimaps$Entries",
369:       "com.google.common.collect.AbstractMultimap$Entries",
370:       "com.google.common.collect.AbstractMapBasedMultimap$2",
371:       "com.google.common.collect.ImmutableList$1",
372:       "com.google.common.collect.Platform",
373:       "com.google.javascript.rhino.jstype.JSType$TypePair",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
375:       "com.google.javascript.rhino.jstype.JSType$2"
376:     );
377:   }
378: }

[MASTER] 10:13:40.578 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(118);
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertTrue(node0.isVar());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertEquals(118, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertTrue(node0.isVar());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertEquals(118, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertNotNull(iterable0);


[MASTER] 10:13:40.645 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_280_1628158420579/com/google/javascript/rhino/Node_280_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_280_1628158420579/com/google/javascript/rhino/Node_280_tmp__ESTest_scaffolding.java]]
[MASTER] 10:13:40.645 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:40.645 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:40.645 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 446
[MASTER] 10:13:40.646 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_280_1628158420579/com/google/javascript/rhino/Node_280_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:13:40 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_280_tmp__ESTest extends Node_280_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("-uy:iUrd", (-513), (-513));
22:       assertFalse(node0.isSetterDef());
23:       assertFalse(node0.isNull());
24:       assertFalse(node0.isParamList());
25:       assertFalse(node0.isStringKey());
26:       assertFalse(node0.isAdd());
27:       assertFalse(node0.isNew());
28:       assertFalse(node0.isDebugger());
29:       assertFalse(node0.isArrayLit());
30:       assertFalse(node0.isVar());
31:       assertFalse(node0.isDefaultCase());
32:       assertEquals(40, node0.getType());
33:       assertEquals(0, node0.getChildCount());
34:       assertFalse(node0.isContinue());
35:       assertFalse(node0.isFunction());
36:       assertEquals((-1), node0.getLineno());
37:       assertFalse(node0.isNE());
38:       assertFalse(node0.isIf());
39:       assertFalse(node0.isCase());
40:       assertFalse(node0.isGetterDef());
41:       assertFalse(node0.isIn());
42:       assertFalse(node0.isNumber());
43:       assertTrue(node0.isString());
44:       assertFalse(node0.isBlock());
45:       assertFalse(node0.isTry());
46:       assertFalse(node0.isHook());
47:       assertFalse(node0.hasOneChild());
48:       assertFalse(node0.isFor());
49:       assertFalse(node0.isRegExp());
50:       assertFalse(node0.isInstanceOf());
51:       assertFalse(node0.isCatch());
52:       assertFalse(node0.hasMoreThanOneChild());
53:       assertFalse(node0.isWith());
54:       assertFalse(node0.isGetProp());
55:       assertFalse(node0.isThis());
56:       assertFalse(node0.isAnd());
57:       assertFalse(node0.isNot());
58:       assertFalse(node0.isScript());
59:       assertFalse(node0.isObjectLit());
60:       assertFalse(node0.isInc());
61:       assertEquals((-1), node0.getCharno());
62:       assertFalse(node0.isSwitch());
63:       assertFalse(node0.isLabelName());
64:       assertFalse(node0.isThrow());
65:       assertFalse(node0.isCast());
66:       assertFalse(node0.isFalse());
67:       assertFalse(node0.isLabel());
68:       assertFalse(node0.isOr());
69:       assertFalse(node0.isReturn());
70:       assertFalse(node0.isDelProp());
71:       assertFalse(node0.isAssignAdd());
72:       assertFalse(node0.isEmpty());
73:       assertFalse(node0.isDo());
74:       assertEquals((-1), node0.getSourcePosition());
75:       assertFalse(node0.isVoid());
76:       assertFalse(node0.isExprResult());
77:       assertFalse(node0.isTrue());
78:       assertFalse(node0.isWhile());
79:       assertFalse(node0.isGetElem());
80:       assertFalse(node0.isName());
81:       assertFalse(node0.isAssign());
82:       assertFalse(node0.isCall());
83:       assertFalse(node0.isBreak());
84:       assertFalse(node0.hasChildren());
85:       assertFalse(node0.isTypeOf());
86:       assertFalse(node0.isComma());
87:       assertFalse(node0.isDec());
88:       assertEquals(4095, Node.COLUMN_MASK);
89:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
90:       assertEquals(8, Node.FLAG_NO_THROWS);
91:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
92:       assertEquals(50, Node.FREE_CALL);
93:       assertEquals(55, Node.INFERRED_FUNCTION);
94:       assertEquals(39, Node.EMPTY_BLOCK);
95:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
96:       assertEquals(52, Node.LENGTH);
97:       assertEquals(53, Node.INPUT_ID);
98:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
99:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
100:       assertEquals(57, Node.REFLECTED_OBJECT);
101:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
102:       assertEquals(36, Node.QUOTED_PROP);
103:       assertEquals(49, Node.DIRECT_EVAL);
104:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
105:       assertEquals(56, Node.CHANGE_TIME);
106:       assertEquals(48, Node.DIRECTIVES);
107:       assertEquals(37, Node.OPT_ARG_NAME);
108:       assertEquals(32, Node.INCRDECR_PROP);
109:       assertEquals(46, Node.IS_NAMESPACE);
110:       assertEquals(2, Node.POST_FLAG);
111:       assertEquals(12, Node.COLUMN_BITS);
112:       assertEquals(47, Node.IS_DISPATCHER);
113:       assertEquals(51, Node.STATIC_SOURCE_FILE);
114:       assertEquals(29, Node.JSDOC_INFO_PROP);
115:       assertEquals(57, Node.LAST_PROP);
116:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
117:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
118:       assertEquals(15, Node.NO_SIDE_EFFECTS);
119:       assertEquals(1, Node.DECR_FLAG);
120:       assertEquals(54, Node.SLASH_V);
121:       assertEquals(30, Node.VAR_ARGS_NAME);
122:       assertEquals(43, Node.IS_CONSTANT_NAME);
123:       assertEquals(40, Node.ORIGINALNAME_PROP);
124:       assertNotNull(node0);
125:       
126:       Node node1 = Node.newNumber((double) 39);
127:       assertFalse(node1.isArrayLit());
128:       assertFalse(node1.isVoid());
129:       assertFalse(node1.isTry());
130:       assertFalse(node1.isDebugger());
131:       assertFalse(node1.isTrue());
132:       assertFalse(node1.isFor());
133:       assertFalse(node1.isDelProp());
134:       assertFalse(node1.isIf());
135:       assertFalse(node1.isRegExp());
136:       assertFalse(node1.isFunction());
137:       assertFalse(node1.isCatch());
138:       assertFalse(node1.isIn());
139:       assertEquals(0, node1.getChildCount());
140:       assertFalse(node1.isNull());
141:       assertFalse(node1.isNE());
142:       assertFalse(node1.isDefaultCase());
143:       assertFalse(node1.isInc());
144:       assertFalse(node1.isSetterDef());
145:       assertFalse(node1.isEmpty());
146:       assertFalse(node1.isThrow());
147:       assertFalse(node1.isBreak());
148:       assertFalse(node1.isName());
149:       assertFalse(node1.isCall());
150:       assertFalse(node1.isContinue());
151:       assertFalse(node1.isFalse());
152:       assertFalse(node1.isReturn());
153:       assertTrue(node1.isNumber());
154:       assertFalse(node1.isComma());
155:       assertFalse(node1.isAnd());
156:       assertFalse(node1.isString());
157:       assertFalse(node1.isWhile());
158:       assertEquals((-1), node1.getSourcePosition());
159:       assertFalse(node1.isNot());
160:       assertFalse(node1.isObjectLit());
161:       assertFalse(node1.isGetProp());
162:       assertFalse(node1.hasOneChild());
163:       assertFalse(node1.hasChildren());
164:       assertFalse(node1.isWith());
165:       assertFalse(node1.isTypeOf());
166:       assertFalse(node1.isAssign());
167:       assertFalse(node1.isDec());
168:       assertFalse(node1.isLabelName());
169:       assertFalse(node1.isExprResult());
170:       assertFalse(node1.isGetElem());
171:       assertFalse(node1.isCast());
172:       assertFalse(node1.isInstanceOf());
173:       assertEquals((-1), node1.getLineno());
174:       assertFalse(node1.isLabel());
175:       assertFalse(node1.isAssignAdd());
176:       assertFalse(node1.isOr());
177:       assertFalse(node1.isDo());
178:       assertFalse(node1.isAdd());
179:       assertFalse(node1.isHook());
180:       assertFalse(node1.isNew());
181:       assertEquals((-1), node1.getCharno());
182:       assertFalse(node1.isSwitch());
183:       assertFalse(node1.isBlock());
184:       assertFalse(node1.isVar());
185:       assertFalse(node1.isStringKey());
186:       assertEquals(39, node1.getType());
187:       assertFalse(node1.hasMoreThanOneChild());
188:       assertFalse(node1.isParamList());
189:       assertFalse(node1.isThis());
190:       assertFalse(node1.isGetterDef());
191:       assertFalse(node1.isCase());
192:       assertFalse(node1.isScript());
193:       assertFalse(node1.equals((Object)node0));
194:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
195:       assertEquals(53, Node.INPUT_ID);
196:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
197:       assertEquals(43, Node.IS_CONSTANT_NAME);
198:       assertEquals(56, Node.CHANGE_TIME);
199:       assertEquals(36, Node.QUOTED_PROP);
200:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
201:       assertEquals(37, Node.OPT_ARG_NAME);
202:       assertEquals(46, Node.IS_NAMESPACE);
203:       assertEquals(51, Node.STATIC_SOURCE_FILE);
204:       assertEquals(4095, Node.COLUMN_MASK);
205:       assertEquals(12, Node.COLUMN_BITS);
206:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
207:       assertEquals(1, Node.DECR_FLAG);
208:       assertEquals(32, Node.INCRDECR_PROP);
209:       assertEquals(40, Node.ORIGINALNAME_PROP);
210:       assertEquals(57, Node.REFLECTED_OBJECT);
211:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
212:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
213:       assertEquals(52, Node.LENGTH);
214:       assertEquals(50, Node.FREE_CALL);
215:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
216:       assertEquals(48, Node.DIRECTIVES);
217:       assertEquals(54, Node.SLASH_V);
218:       assertEquals(49, Node.DIRECT_EVAL);
219:       assertEquals(55, Node.INFERRED_FUNCTION);
220:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
221:       assertEquals(2, Node.POST_FLAG);
222:       assertEquals(30, Node.VAR_ARGS_NAME);
223:       assertEquals(8, Node.FLAG_NO_THROWS);
224:       assertEquals(15, Node.NO_SIDE_EFFECTS);
225:       assertEquals(57, Node.LAST_PROP);
226:       assertEquals(47, Node.IS_DISPATCHER);
227:       assertEquals(29, Node.JSDOC_INFO_PROP);
228:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
229:       assertEquals(39, Node.EMPTY_BLOCK);
230:       assertNotNull(node1);
231:       
232:       boolean boolean0 = node1.isFromExterns();
233:       assertFalse(node1.isArrayLit());
234:       assertFalse(node1.isVoid());
235:       assertFalse(node1.isTry());
236:       assertFalse(node1.isDebugger());
237:       assertFalse(node1.isTrue());
238:       assertFalse(node1.isFor());
239:       assertFalse(node1.isDelProp());
240:       assertFalse(node1.isIf());
241:       assertFalse(node1.isRegExp());
242:       assertFalse(node1.isFunction());
243:       assertFalse(node1.isCatch());
244:       assertFalse(node1.isIn());
245:       assertEquals(0, node1.getChildCount());
246:       assertFalse(node1.isNull());
247:       assertFalse(node1.isNE());
248:       assertFalse(node1.isDefaultCase());
249:       assertFalse(node1.isInc());
250:       assertFalse(node1.isSetterDef());
251:       assertFalse(node1.isEmpty());
252:       assertFalse(node1.isThrow());
253:       assertFalse(node1.isBreak());
254:       assertFalse(node1.isName());
255:       assertFalse(node1.isCall());
256:       assertFalse(node1.isContinue());
257:       assertFalse(node1.isFalse());
258:       assertFalse(node1.isReturn());
259:       assertTrue(node1.isNumber());
260:       assertFalse(node1.isComma());
261:       assertFalse(node1.isAnd());
262:       assertFalse(node1.isString());
263:       assertFalse(node1.isWhile());
264:       assertEquals((-1), node1.getSourcePosition());
265:       assertFalse(node1.isNot());
266:       assertFalse(node1.isObjectLit());
267:       assertFalse(node1.isGetProp());
268:       assertFalse(node1.hasOneChild());
269:       assertFalse(node1.hasChildren());
270:       assertFalse(node1.isWith());
271:       assertFalse(node1.isTypeOf());
272:       assertFalse(node1.isAssign());
273:       assertFalse(node1.isDec());
274:       assertFalse(node1.isLabelName());
275:       assertFalse(node1.isExprResult());
276:       assertFalse(node1.isGetElem());
277:       assertFalse(node1.isCast());
278:       assertFalse(node1.isInstanceOf());
279:       assertEquals((-1), node1.getLineno());
280:       assertFalse(node1.isLabel());
281:       assertFalse(node1.isAssignAdd());
282:       assertFalse(node1.isOr());
283:       assertFalse(node1.isDo());
284:       assertFalse(node1.isAdd());
285:       assertFalse(node1.isHook());
286:       assertFalse(node1.isNew());
287:       assertEquals((-1), node1.getCharno());
288:       assertFalse(node1.isSwitch());
289:       assertFalse(node1.isBlock());
290:       assertFalse(node1.isVar());
291:       assertFalse(node1.isStringKey());
292:       assertEquals(39, node1.getType());
293:       assertFalse(node1.hasMoreThanOneChild());
294:       assertFalse(node1.isParamList());
295:       assertFalse(node1.isThis());
296:       assertFalse(node1.isGetterDef());
297:       assertFalse(node1.isCase());
298:       assertFalse(node1.isScript());
299:       assertFalse(node1.equals((Object)node0));
300:       assertFalse(boolean0);
301:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
302:       assertEquals(53, Node.INPUT_ID);
303:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
304:       assertEquals(43, Node.IS_CONSTANT_NAME);
305:       assertEquals(56, Node.CHANGE_TIME);
306:       assertEquals(36, Node.QUOTED_PROP);
307:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
308:       assertEquals(37, Node.OPT_ARG_NAME);
309:       assertEquals(46, Node.IS_NAMESPACE);
310:       assertEquals(51, Node.STATIC_SOURCE_FILE);
311:       assertEquals(4095, Node.COLUMN_MASK);
312:       assertEquals(12, Node.COLUMN_BITS);
313:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
314:       assertEquals(1, Node.DECR_FLAG);
315:       assertEquals(32, Node.INCRDECR_PROP);
316:       assertEquals(40, Node.ORIGINALNAME_PROP);
317:       assertEquals(57, Node.REFLECTED_OBJECT);
318:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
319:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
320:       assertEquals(52, Node.LENGTH);
321:       assertEquals(50, Node.FREE_CALL);
322:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
323:       assertEquals(48, Node.DIRECTIVES);
324:       assertEquals(54, Node.SLASH_V);
325:       assertEquals(49, Node.DIRECT_EVAL);
326:       assertEquals(55, Node.INFERRED_FUNCTION);
327:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
328:       assertEquals(2, Node.POST_FLAG);
329:       assertEquals(30, Node.VAR_ARGS_NAME);
330:       assertEquals(8, Node.FLAG_NO_THROWS);
331:       assertEquals(15, Node.NO_SIDE_EFFECTS);
332:       assertEquals(57, Node.LAST_PROP);
333:       assertEquals(47, Node.IS_DISPATCHER);
334:       assertEquals(29, Node.JSDOC_INFO_PROP);
335:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
336:       assertEquals(39, Node.EMPTY_BLOCK);
337:       
338:       boolean boolean1 = node1.isUnscopedQualifiedName();
339:       assertFalse(node1.isArrayLit());
340:       assertFalse(node1.isVoid());
341:       assertFalse(node1.isTry());
342:       assertFalse(node1.isDebugger());
343:       assertFalse(node1.isTrue());
344:       assertFalse(node1.isFor());
345:       assertFalse(node1.isDelProp());
346:       assertFalse(node1.isIf());
347:       assertFalse(node1.isRegExp());
348:       assertFalse(node1.isFunction());
349:       assertFalse(node1.isCatch());
350:       assertFalse(node1.isIn());
351:       assertEquals(0, node1.getChildCount());
352:       assertFalse(node1.isNull());
353:       assertFalse(node1.isNE());
354:       assertFalse(node1.isDefaultCase());
355:       assertFalse(node1.isInc());
356:       assertFalse(node1.isSetterDef());
357:       assertFalse(node1.isEmpty());
358:       assertFalse(node1.isThrow());
359:       assertFalse(node1.isBreak());
360:       assertFalse(node1.isName());
361:       assertFalse(node1.isCall());
362:       assertFalse(node1.isContinue());
363:       assertFalse(node1.isFalse());
364:       assertFalse(node1.isReturn());
365:       assertTrue(node1.isNumber());
366:       assertFalse(node1.isComma());
367:       assertFalse(node1.isAnd());
368:       assertFalse(node1.isString());
369:       assertFalse(node1.isWhile());
370:       assertEquals((-1), node1.getSourcePosition());
371:       assertFalse(node1.isNot());
372:       assertFalse(node1.isObjectLit());
373:       assertFalse(node1.isGetProp());
374:       assertFalse(node1.hasOneChild());
375:       assertFalse(node1.hasChildren());
376:       assertFalse(node1.isWith());
377:       assertFalse(node1.isTypeOf());
378:       assertFalse(node1.isAssign());
379:       assertFalse(node1.isDec());
380:       assertFalse(node1.isLabelName());
381:       assertFalse(node1.isExprResult());
382:       assertFalse(node1.isGetElem());
383:       assertFalse(node1.isCast());
384:       assertFalse(node1.isInstanceOf());
385:       assertEquals((-1), node1.getLineno());
386:       assertFalse(node1.isLabel());
387:       assertFalse(node1.isAssignAdd());
388:       assertFalse(node1.isOr());
389:       assertFalse(node1.isDo());
390:       assertFalse(node1.isAdd());
391:       assertFalse(node1.isHook());
392:       assertFalse(node1.isNew());
393:       assertEquals((-1), node1.getCharno());
394:       assertFalse(node1.isSwitch());
395:       assertFalse(node1.isBlock());
396:       assertFalse(node1.isVar());
397:       assertFalse(node1.isStringKey());
398:       assertEquals(39, node1.getType());
399:       assertFalse(node1.hasMoreThanOneChild());
400:       assertFalse(node1.isParamList());
401:       assertFalse(node1.isThis());
402:       assertFalse(node1.isGetterDef());
403:       assertFalse(node1.isCase());
404:       assertFalse(node1.isScript());
405:       assertFalse(node1.equals((Object)node0));
406:       assertTrue(boolean1 == boolean0);
407:       assertFalse(boolean1);
408:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
409:       assertEquals(53, Node.INPUT_ID);
410:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
411:       assertEquals(43, Node.IS_CONSTANT_NAME);
412:       assertEquals(56, Node.CHANGE_TIME);
413:       assertEquals(36, Node.QUOTED_PROP);
414:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
415:       assertEquals(37, Node.OPT_ARG_NAME);
416:       assertEquals(46, Node.IS_NAMESPACE);
417:       assertEquals(51, Node.STATIC_SOURCE_FILE);
418:       assertEquals(4095, Node.COLUMN_MASK);
419:       assertEquals(12, Node.COLUMN_BITS);
420:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
421:       assertEquals(1, Node.DECR_FLAG);
422:       assertEquals(32, Node.INCRDECR_PROP);
423:       assertEquals(40, Node.ORIGINALNAME_PROP);
424:       assertEquals(57, Node.REFLECTED_OBJECT);
425:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
426:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
427:       assertEquals(52, Node.LENGTH);
428:       assertEquals(50, Node.FREE_CALL);
429:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
430:       assertEquals(48, Node.DIRECTIVES);
431:       assertEquals(54, Node.SLASH_V);
432:       assertEquals(49, Node.DIRECT_EVAL);
433:       assertEquals(55, Node.INFERRED_FUNCTION);
434:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
435:       assertEquals(2, Node.POST_FLAG);
436:       assertEquals(30, Node.VAR_ARGS_NAME);
437:       assertEquals(8, Node.FLAG_NO_THROWS);
438:       assertEquals(15, Node.NO_SIDE_EFFECTS);
439:       assertEquals(57, Node.LAST_PROP);
440:       assertEquals(47, Node.IS_DISPATCHER);
441:       assertEquals(29, Node.JSDOC_INFO_PROP);
442:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
443:       assertEquals(39, Node.EMPTY_BLOCK);
444:       
445:       Iterable<Node> iterable0 = node0.children();
446:       assertFalse(iterable0.contains(node0));
447:       assertFalse(node0.isSetterDef());
448:       assertFalse(node0.isNull());
449:       assertFalse(node0.isParamList());
450:       assertFalse(node0.isStringKey());
451:       assertFalse(node0.isAdd());
452:       assertFalse(node0.isNew());
453:       assertFalse(node0.isDebugger());
454:       assertFalse(node0.isArrayLit());
455:       assertFalse(node0.isVar());
456:       assertFalse(node0.isDefaultCase());
457:       assertEquals(40, node0.getType());
458:       assertEquals(0, node0.getChildCount());
459:       assertFalse(node0.isContinue());
460:       assertFalse(node0.isFunction());
461:       assertEquals((-1), node0.getLineno());
462:       assertFalse(node0.isNE());
463:       assertFalse(node0.isIf());
464:       assertFalse(node0.isCase());
465:       assertFalse(node0.isGetterDef());
466:       assertFalse(node0.isIn());
467:       assertFalse(node0.isNumber());
468:       assertTrue(node0.isString());
469:       assertFalse(node0.isBlock());
470:       assertFalse(node0.isTry());
471:       assertFalse(node0.isHook());
472:       assertFalse(node0.hasOneChild());
473:       assertFalse(node0.isFor());
474:       assertFalse(node0.isRegExp());
475:       assertFalse(node0.isInstanceOf());
476:       assertFalse(node0.isCatch());
477:       assertFalse(node0.hasMoreThanOneChild());
478:       assertFalse(node0.isWith());
479:       assertFalse(node0.isGetProp());
480:       assertFalse(node0.isThis());
481:       assertFalse(node0.isAnd());
482:       assertFalse(node0.isNot());
483:       assertFalse(node0.isScript());
484:       assertFalse(node0.isObjectLit());
485:       assertFalse(node0.isInc());
486:       assertEquals((-1), node0.getCharno());
487:       assertFalse(node0.isSwitch());
488:       assertFalse(node0.isLabelName());
489:       assertFalse(node0.isThrow());
490:       assertFalse(node0.isCast());
491:       assertFalse(node0.isFalse());
492:       assertFalse(node0.isLabel());
493:       assertFalse(node0.isOr());
494:       assertFalse(node0.isReturn());
495:       assertFalse(node0.isDelProp());
496:       assertFalse(node0.isAssignAdd());
497:       assertFalse(node0.isEmpty());
498:       assertFalse(node0.isDo());
499:       assertEquals((-1), node0.getSourcePosition());
500:       assertFalse(node0.isVoid());
501:       assertFalse(node0.isExprResult());
502:       assertFalse(node0.isTrue());
503:       assertFalse(node0.isWhile());
504:       assertFalse(node0.isGetElem());
505:       assertFalse(node0.isName());
506:       assertFalse(node0.isAssign());
507:       assertFalse(node0.isCall());
508:       assertFalse(node0.isBreak());
509:       assertFalse(node0.hasChildren());
510:       assertFalse(node0.isTypeOf());
511:       assertFalse(node0.isComma());
512:       assertFalse(node0.isDec());
513:       assertFalse(node0.equals((Object)node1));
514:       assertEquals(4095, Node.COLUMN_MASK);
515:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
516:       assertEquals(8, Node.FLAG_NO_THROWS);
517:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
518:       assertEquals(50, Node.FREE_CALL);
519:       assertEquals(55, Node.INFERRED_FUNCTION);
520:       assertEquals(39, Node.EMPTY_BLOCK);
521:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
522:       assertEquals(52, Node.LENGTH);
523:       assertEquals(53, Node.INPUT_ID);
524:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
525:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
526:       assertEquals(57, Node.REFLECTED_OBJECT);
527:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
528:       assertEquals(36, Node.QUOTED_PROP);
529:       assertEquals(49, Node.DIRECT_EVAL);
530:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
531:       assertEquals(56, Node.CHANGE_TIME);
532:       assertEquals(48, Node.DIRECTIVES);
533:       assertEquals(37, Node.OPT_ARG_NAME);
534:       assertEquals(32, Node.INCRDECR_PROP);
535:       assertEquals(46, Node.IS_NAMESPACE);
536:       assertEquals(2, Node.POST_FLAG);
537:       assertEquals(12, Node.COLUMN_BITS);
538:       assertEquals(47, Node.IS_DISPATCHER);
539:       assertEquals(51, Node.STATIC_SOURCE_FILE);
540:       assertEquals(29, Node.JSDOC_INFO_PROP);
541:       assertEquals(57, Node.LAST_PROP);
542:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
543:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
544:       assertEquals(15, Node.NO_SIDE_EFFECTS);
545:       assertEquals(1, Node.DECR_FLAG);
546:       assertEquals(54, Node.SLASH_V);
547:       assertEquals(30, Node.VAR_ARGS_NAME);
548:       assertEquals(43, Node.IS_CONSTANT_NAME);
549:       assertEquals(40, Node.ORIGINALNAME_PROP);
550:       assertNotNull(iterable0);
551:       
552:       String string0 = node1.getQualifiedName();
553:       assertFalse(node1.isArrayLit());
554:       assertFalse(node1.isVoid());
555:       assertFalse(node1.isTry());
556:       assertFalse(node1.isDebugger());
557:       assertFalse(node1.isTrue());
558:       assertFalse(node1.isFor());
559:       assertFalse(node1.isDelProp());
560:       assertFalse(node1.isIf());
561:       assertFalse(node1.isRegExp());
562:       assertFalse(node1.isFunction());
563:       assertFalse(node1.isCatch());
564:       assertFalse(node1.isIn());
565:       assertEquals(0, node1.getChildCount());
566:       assertFalse(node1.isNull());
567:       assertFalse(node1.isNE());
568:       assertFalse(node1.isDefaultCase());
569:       assertFalse(node1.isInc());
570:       assertFalse(node1.isSetterDef());
571:       assertFalse(node1.isEmpty());
572:       assertFalse(node1.isThrow());
573:       assertFalse(node1.isBreak());
574:       assertFalse(node1.isName());
575:       assertFalse(node1.isCall());
576:       assertFalse(node1.isContinue());
577:       assertFalse(node1.isFalse());
578:       assertFalse(node1.isReturn());
579:       assertTrue(node1.isNumber());
580:       assertFalse(node1.isComma());
581:       assertFalse(node1.isAnd());
582:       assertFalse(node1.isString());
583:       assertFalse(node1.isWhile());
584:       assertEquals((-1), node1.getSourcePosition());
585:       assertFalse(node1.isNot());
586:       assertFalse(node1.isObjectLit());
587:       assertFalse(node1.isGetProp());
588:       assertFalse(node1.hasOneChild());
589:       assertFalse(node1.hasChildren());
590:       assertFalse(node1.isWith());
591:       assertFalse(node1.isTypeOf());
592:       assertFalse(node1.isAssign());
593:       assertFalse(node1.isDec());
594:       assertFalse(node1.isLabelName());
595:       assertFalse(node1.isExprResult());
596:       assertFalse(node1.isGetElem());
597:       assertFalse(node1.isCast());
598:       assertFalse(node1.isInstanceOf());
599:       assertEquals((-1), node1.getLineno());
600:       assertFalse(node1.isLabel());
601:       assertFalse(node1.isAssignAdd());
602:       assertFalse(node1.isOr());
603:       assertFalse(node1.isDo());
604:       assertFalse(node1.isAdd());
605:       assertFalse(node1.isHook());
606:       assertFalse(node1.isNew());
607:       assertEquals((-1), node1.getCharno());
608:       assertFalse(node1.isSwitch());
609:       assertFalse(node1.isBlock());
610:       assertFalse(node1.isVar());
611:       assertFalse(node1.isStringKey());
612:       assertEquals(39, node1.getType());
613:       assertFalse(node1.hasMoreThanOneChild());
614:       assertFalse(node1.isParamList());
615:       assertFalse(node1.isThis());
616:       assertFalse(node1.isGetterDef());
617:       assertFalse(node1.isCase());
618:       assertFalse(node1.isScript());
619:       assertFalse(node1.equals((Object)node0));
620:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
621:       assertEquals(53, Node.INPUT_ID);
622:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
623:       assertEquals(43, Node.IS_CONSTANT_NAME);
624:       assertEquals(56, Node.CHANGE_TIME);
625:       assertEquals(36, Node.QUOTED_PROP);
626:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
627:       assertEquals(37, Node.OPT_ARG_NAME);
628:       assertEquals(46, Node.IS_NAMESPACE);
629:       assertEquals(51, Node.STATIC_SOURCE_FILE);
630:       assertEquals(4095, Node.COLUMN_MASK);
631:       assertEquals(12, Node.COLUMN_BITS);
632:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
633:       assertEquals(1, Node.DECR_FLAG);
634:       assertEquals(32, Node.INCRDECR_PROP);
635:       assertEquals(40, Node.ORIGINALNAME_PROP);
636:       assertEquals(57, Node.REFLECTED_OBJECT);
637:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
638:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
639:       assertEquals(52, Node.LENGTH);
640:       assertEquals(50, Node.FREE_CALL);
641:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
642:       assertEquals(48, Node.DIRECTIVES);
643:       assertEquals(54, Node.SLASH_V);
644:       assertEquals(49, Node.DIRECT_EVAL);
645:       assertEquals(55, Node.INFERRED_FUNCTION);
646:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
647:       assertEquals(2, Node.POST_FLAG);
648:       assertEquals(30, Node.VAR_ARGS_NAME);
649:       assertEquals(8, Node.FLAG_NO_THROWS);
650:       assertEquals(15, Node.NO_SIDE_EFFECTS);
651:       assertEquals(57, Node.LAST_PROP);
652:       assertEquals(47, Node.IS_DISPATCHER);
653:       assertEquals(29, Node.JSDOC_INFO_PROP);
654:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
655:       assertEquals(39, Node.EMPTY_BLOCK);
656:       assertNull(string0);
657:       
658:       // Undeclared exception!
659:       try { 
660:         node1.removeChild(node0);
661:         fail("Expecting exception: NullPointerException");
662:       
663:       } catch(NullPointerException e) {
664:          //
665:          // no message in exception (getMessage() returned null)
666:          //
667:          verifyException("com.google.javascript.rhino.Node", e);
668:       }
669:   }
670: }
RegularFileObject[/tmp/EvoSuite_280_1628158420579/com/google/javascript/rhino/Node_280_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:13:40 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_280_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_280_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.VoidType",
121:       "com.google.common.base.Joiner",
122:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
123:       "com.google.common.collect.AbstractListMultimap",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.javascript.rhino.jstype.ProxyObjectType",
128:       "com.google.common.collect.Sets$SetView",
129:       "com.google.common.collect.RegularImmutableAsList",
130:       "com.google.javascript.rhino.jstype.TemplateType",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.javascript.rhino.JSDocInfo$1",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
206:       "com.google.common.collect.Iterators$1",
207:       "com.google.common.collect.Iterators$2",
208:       "com.google.javascript.rhino.jstype.NamespaceType",
209:       "com.google.common.collect.Iterators$3",
210:       "com.google.common.collect.Sets",
211:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
212:       "com.google.javascript.rhino.Node$ObjectPropListItem",
213:       "com.google.common.collect.Lists$StringAsImmutableList",
214:       "com.google.common.collect.Lists$2",
215:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
216:       "com.google.common.collect.ImmutableList$Builder",
217:       "com.google.common.collect.Lists$1",
218:       "com.google.javascript.rhino.jstype.StaticReference",
219:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
220:       "com.google.common.collect.Multiset",
221:       "com.google.common.collect.AbstractMultimap",
222:       "com.google.common.collect.Multimap",
223:       "com.google.common.collect.Iterators",
224:       "com.google.common.collect.Maps$ImprovedAbstractMap",
225:       "com.google.common.collect.ImmutableBiMap",
226:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
228:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
229:       "com.google.common.collect.ImmutableList",
230:       "com.google.common.collect.SingletonImmutableBiMap",
231:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
232:       "com.google.javascript.rhino.jstype.StringType",
233:       "com.google.javascript.rhino.Node$AbstractPropListItem",
234:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
235:       "com.google.javascript.rhino.jstype.TemplatizedType",
236:       "com.google.javascript.rhino.jstype.Visitor",
237:       "com.google.javascript.rhino.jstype.NoResolvedType",
238:       "com.google.javascript.rhino.jstype.JSTypeNative",
239:       "com.google.javascript.rhino.jstype.AllType",
240:       "com.google.common.collect.Maps",
241:       "com.google.common.collect.SetMultimap",
242:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
243:       "com.google.common.collect.Maps$EntryTransformer",
244:       "com.google.javascript.rhino.JSTypeExpression",
245:       "com.google.common.collect.Iterators$MergingIterator"
246:     );
247:   } 
248: 
249:   private static void resetClasses() {
250:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_280_tmp__ESTest_scaffolding.class.getClassLoader()); 
251: 
252:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
253:       "com.google.javascript.rhino.Node",
254:       "com.google.javascript.rhino.Node$NumberNode",
255:       "com.google.javascript.rhino.Node$StringNode",
256:       "com.google.javascript.rhino.Node$AbstractPropListItem",
257:       "com.google.javascript.rhino.Node$ObjectPropListItem",
258:       "com.google.javascript.rhino.Node$IntPropListItem",
259:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
260:       "com.google.javascript.rhino.Node$AncestorIterable",
261:       "com.google.javascript.rhino.Node$NodeMismatch",
262:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
263:       "com.google.javascript.rhino.Node$SideEffectFlags",
264:       "com.google.javascript.rhino.Token",
265:       "com.google.common.base.Preconditions",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.JSDocInfo",
339:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.InputId",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
344:       "com.google.common.collect.Sets$ImprovedAbstractSet",
345:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
346:       "com.google.common.collect.Hashing",
347:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.common.collect.Iterables",
351:       "com.google.common.collect.AbstractIndexedListIterator",
352:       "com.google.common.collect.Iterators$11",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.javascript.rhino.Node$AncestorIterable$1",
356:       "com.google.javascript.rhino.jstype.TemplatizedType",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.javascript.rhino.JSTypeExpression",
361:       "com.google.common.collect.Iterators$12",
362:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
363:       "com.google.javascript.rhino.jstype.NamedType",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.common.collect.AbstractMultimap$Values",
366:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
367:       "com.google.common.collect.AbstractMapBasedMultimap$1",
368:       "com.google.common.collect.Multimaps$Entries",
369:       "com.google.common.collect.AbstractMultimap$Entries",
370:       "com.google.common.collect.AbstractMapBasedMultimap$2",
371:       "com.google.common.collect.ImmutableList$1",
372:       "com.google.common.collect.Platform",
373:       "com.google.javascript.rhino.jstype.JSType$TypePair",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
375:       "com.google.javascript.rhino.jstype.JSType$2"
376:     );
377:   }
378: }

[MASTER] 10:13:40.654 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("-uy:iUrd", (-513), (-513));
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node0);

Node node1 = Node.newNumber((double) 39);
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isReturn());
assertTrue(node1.isNumber());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isHook());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertEquals(39, node1.getType());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.equals((Object)node0));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertNotNull(node1);

boolean boolean0 = node1.isFromExterns();
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isReturn());
assertTrue(node1.isNumber());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isHook());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertEquals(39, node1.getType());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.equals((Object)node0));
assertFalse(boolean0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean1 = node1.isUnscopedQualifiedName();
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isReturn());
assertTrue(node1.isNumber());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isHook());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertEquals(39, node1.getType());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.equals((Object)node1));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(iterable0);

String string0 = node1.getQualifiedName();
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isReturn());
assertTrue(node1.isNumber());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isHook());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertEquals(39, node1.getType());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.equals((Object)node0));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertNull(string0);

node1.removeChild(node0);

[MASTER] 10:13:49.117 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_351_1628158428846/com/google/javascript/rhino/Node_351_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_351_1628158428846/com/google/javascript/rhino/Node_351_tmp__ESTest_scaffolding.java]]
[MASTER] 10:13:49.117 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:49.117 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:13:49.118 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 651
[MASTER] 10:13:49.119 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_351_1628158428846/com/google/javascript/rhino/Node_351_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:13:48 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_351_tmp__ESTest extends Node_351_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(0.7, (-1891), 155);
22:       assertFalse(node0.isNE());
23:       assertFalse(node0.isIf());
24:       assertFalse(node0.isFor());
25:       assertFalse(node0.isGetterDef());
26:       assertFalse(node0.isDelProp());
27:       assertFalse(node0.isArrayLit());
28:       assertFalse(node0.isSwitch());
29:       assertFalse(node0.isRegExp());
30:       assertFalse(node0.isString());
31:       assertFalse(node0.isHook());
32:       assertFalse(node0.isDebugger());
33:       assertEquals((-1), node0.getCharno());
34:       assertTrue(node0.isNumber());
35:       assertFalse(node0.isTry());
36:       assertFalse(node0.isCase());
37:       assertFalse(node0.isThis());
38:       assertFalse(node0.isSetterDef());
39:       assertFalse(node0.isCatch());
40:       assertFalse(node0.isFalse());
41:       assertFalse(node0.isInstanceOf());
42:       assertFalse(node0.isAnd());
43:       assertFalse(node0.isInc());
44:       assertFalse(node0.isFunction());
45:       assertFalse(node0.isIn());
46:       assertFalse(node0.isThrow());
47:       assertFalse(node0.isTypeOf());
48:       assertFalse(node0.isAssign());
49:       assertFalse(node0.isOr());
50:       assertFalse(node0.isReturn());
51:       assertFalse(node0.isDec());
52:       assertFalse(node0.hasChildren());
53:       assertFalse(node0.isLabel());
54:       assertEquals((-1), node0.getSourcePosition());
55:       assertFalse(node0.hasMoreThanOneChild());
56:       assertFalse(node0.isCast());
57:       assertFalse(node0.isContinue());
58:       assertFalse(node0.isLabelName());
59:       assertFalse(node0.isGetElem());
60:       assertEquals((-1), node0.getLineno());
61:       assertFalse(node0.isExprResult());
62:       assertFalse(node0.isScript());
63:       assertFalse(node0.isWhile());
64:       assertFalse(node0.isNot());
65:       assertFalse(node0.isWith());
66:       assertEquals(39, node0.getType());
67:       assertFalse(node0.isBlock());
68:       assertFalse(node0.isObjectLit());
69:       assertFalse(node0.isGetProp());
70:       assertFalse(node0.hasOneChild());
71:       assertFalse(node0.isComma());
72:       assertFalse(node0.isNull());
73:       assertFalse(node0.isParamList());
74:       assertEquals(0, node0.getChildCount());
75:       assertFalse(node0.isCall());
76:       assertFalse(node0.isStringKey());
77:       assertFalse(node0.isName());
78:       assertFalse(node0.isBreak());
79:       assertFalse(node0.isVoid());
80:       assertFalse(node0.isTrue());
81:       assertFalse(node0.isDefaultCase());
82:       assertFalse(node0.isVar());
83:       assertFalse(node0.isEmpty());
84:       assertFalse(node0.isDo());
85:       assertFalse(node0.isAssignAdd());
86:       assertFalse(node0.isAdd());
87:       assertFalse(node0.isNew());
88:       assertEquals(37, Node.OPT_ARG_NAME);
89:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
90:       assertEquals(2, Node.POST_FLAG);
91:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
92:       assertEquals(29, Node.JSDOC_INFO_PROP);
93:       assertEquals(51, Node.STATIC_SOURCE_FILE);
94:       assertEquals(49, Node.DIRECT_EVAL);
95:       assertEquals(46, Node.IS_NAMESPACE);
96:       assertEquals(56, Node.CHANGE_TIME);
97:       assertEquals(36, Node.QUOTED_PROP);
98:       assertEquals(52, Node.LENGTH);
99:       assertEquals(15, Node.NO_SIDE_EFFECTS);
100:       assertEquals(53, Node.INPUT_ID);
101:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
102:       assertEquals(30, Node.VAR_ARGS_NAME);
103:       assertEquals(57, Node.LAST_PROP);
104:       assertEquals(47, Node.IS_DISPATCHER);
105:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
106:       assertEquals(8, Node.FLAG_NO_THROWS);
107:       assertEquals(39, Node.EMPTY_BLOCK);
108:       assertEquals(48, Node.DIRECTIVES);
109:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
110:       assertEquals(4095, Node.COLUMN_MASK);
111:       assertEquals(55, Node.INFERRED_FUNCTION);
112:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
113:       assertEquals(40, Node.ORIGINALNAME_PROP);
114:       assertEquals(50, Node.FREE_CALL);
115:       assertEquals(43, Node.IS_CONSTANT_NAME);
116:       assertEquals(57, Node.REFLECTED_OBJECT);
117:       assertEquals(54, Node.SLASH_V);
118:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
119:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
120:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
121:       assertEquals(1, Node.DECR_FLAG);
122:       assertEquals(32, Node.INCRDECR_PROP);
123:       assertEquals(12, Node.COLUMN_BITS);
124:       assertNotNull(node0);
125:       
126:       Node node1 = new Node(4095, node0, node0, node0);
127:       assertFalse(node0.isNE());
128:       assertFalse(node0.isIf());
129:       assertFalse(node0.isFor());
130:       assertFalse(node0.isGetterDef());
131:       assertFalse(node0.isDelProp());
132:       assertFalse(node0.isArrayLit());
133:       assertFalse(node0.isSwitch());
134:       assertFalse(node0.isRegExp());
135:       assertFalse(node0.isString());
136:       assertFalse(node0.isHook());
137:       assertFalse(node0.isDebugger());
138:       assertEquals((-1), node0.getCharno());
139:       assertTrue(node0.isNumber());
140:       assertFalse(node0.isTry());
141:       assertFalse(node0.isCase());
142:       assertFalse(node0.isThis());
143:       assertFalse(node0.isSetterDef());
144:       assertFalse(node0.isCatch());
145:       assertFalse(node0.isFalse());
146:       assertFalse(node0.isInstanceOf());
147:       assertFalse(node0.isAnd());
148:       assertFalse(node0.isInc());
149:       assertFalse(node0.isFunction());
150:       assertFalse(node0.isIn());
151:       assertFalse(node0.isThrow());
152:       assertFalse(node0.isTypeOf());
153:       assertFalse(node0.isAssign());
154:       assertFalse(node0.isOr());
155:       assertFalse(node0.isReturn());
156:       assertFalse(node0.isDec());
157:       assertFalse(node0.hasChildren());
158:       assertFalse(node0.isLabel());
159:       assertEquals((-1), node0.getSourcePosition());
160:       assertFalse(node0.hasMoreThanOneChild());
161:       assertFalse(node0.isCast());
162:       assertFalse(node0.isContinue());
163:       assertFalse(node0.isLabelName());
164:       assertFalse(node0.isGetElem());
165:       assertEquals((-1), node0.getLineno());
166:       assertFalse(node0.isExprResult());
167:       assertFalse(node0.isScript());
168:       assertFalse(node0.isWhile());
169:       assertFalse(node0.isNot());
170:       assertFalse(node0.isWith());
171:       assertEquals(39, node0.getType());
172:       assertFalse(node0.isBlock());
173:       assertFalse(node0.isObjectLit());
174:       assertFalse(node0.isGetProp());
175:       assertFalse(node0.hasOneChild());
176:       assertFalse(node0.isComma());
177:       assertFalse(node0.isNull());
178:       assertFalse(node0.isParamList());
179:       assertEquals(0, node0.getChildCount());
180:       assertFalse(node0.isCall());
181:       assertFalse(node0.isStringKey());
182:       assertFalse(node0.isName());
183:       assertFalse(node0.isBreak());
184:       assertFalse(node0.isVoid());
185:       assertFalse(node0.isTrue());
186:       assertFalse(node0.isDefaultCase());
187:       assertFalse(node0.isVar());
188:       assertFalse(node0.isEmpty());
189:       assertFalse(node0.isDo());
190:       assertFalse(node0.isAssignAdd());
191:       assertFalse(node0.isAdd());
192:       assertFalse(node0.isNew());
193:       assertFalse(node1.isDo());
194:       assertFalse(node1.isWhile());
195:       assertFalse(node1.isAssignAdd());
196:       assertFalse(node1.isBlock());
197:       assertFalse(node1.isReturn());
198:       assertEquals((-1), node1.getLineno());
199:       assertFalse(node1.isLabel());
200:       assertFalse(node1.isTypeOf());
201:       assertFalse(node1.isDec());
202:       assertFalse(node1.hasMoreThanOneChild());
203:       assertFalse(node1.isContinue());
204:       assertFalse(node1.isStringKey());
205:       assertFalse(node1.isAssign());
206:       assertFalse(node1.isLabelName());
207:       assertFalse(node1.isParamList());
208:       assertFalse(node1.isNumber());
209:       assertEquals((-1), node1.getSourcePosition());
210:       assertFalse(node1.isScript());
211:       assertFalse(node1.isDefaultCase());
212:       assertFalse(node1.isVoid());
213:       assertFalse(node1.isExprResult());
214:       assertFalse(node1.isComma());
215:       assertFalse(node1.isGetElem());
216:       assertFalse(node1.isName());
217:       assertFalse(node1.isEmpty());
218:       assertFalse(node1.isCall());
219:       assertFalse(node1.isBreak());
220:       assertFalse(node1.isNull());
221:       assertFalse(node1.isDelProp());
222:       assertFalse(node1.isVar());
223:       assertFalse(node1.isNew());
224:       assertFalse(node1.isAdd());
225:       assertFalse(node1.isOr());
226:       assertFalse(node1.isTrue());
227:       assertFalse(node1.isCase());
228:       assertFalse(node1.isSwitch());
229:       assertTrue(node1.hasChildren());
230:       assertEquals(1, node1.getChildCount());
231:       assertFalse(node1.isFor());
232:       assertTrue(node1.hasOneChild());
233:       assertFalse(node1.isArrayLit());
234:       assertFalse(node1.isHook());
235:       assertFalse(node1.isTry());
236:       assertFalse(node1.isDebugger());
237:       assertFalse(node1.isGetProp());
238:       assertEquals((-1), node1.getCharno());
239:       assertFalse(node1.isGetterDef());
240:       assertFalse(node1.isString());
241:       assertFalse(node1.isNot());
242:       assertFalse(node1.isObjectLit());
243:       assertFalse(node1.isAnd());
244:       assertEquals(4095, node1.getType());
245:       assertFalse(node1.isThis());
246:       assertFalse(node1.isInstanceOf());
247:       assertFalse(node1.isCast());
248:       assertFalse(node1.isRegExp());
249:       assertFalse(node1.isWith());
250:       assertFalse(node1.isCatch());
251:       assertFalse(node1.isFunction());
252:       assertFalse(node1.isFalse());
253:       assertFalse(node1.isThrow());
254:       assertFalse(node1.isNE());
255:       assertFalse(node1.isIf());
256:       assertFalse(node1.isInc());
257:       assertFalse(node1.isSetterDef());
258:       assertFalse(node1.isIn());
259:       assertFalse(node1.equals((Object)node0));
260:       assertEquals(37, Node.OPT_ARG_NAME);
261:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
262:       assertEquals(2, Node.POST_FLAG);
263:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
264:       assertEquals(29, Node.JSDOC_INFO_PROP);
265:       assertEquals(51, Node.STATIC_SOURCE_FILE);
266:       assertEquals(49, Node.DIRECT_EVAL);
267:       assertEquals(46, Node.IS_NAMESPACE);
268:       assertEquals(56, Node.CHANGE_TIME);
269:       assertEquals(36, Node.QUOTED_PROP);
270:       assertEquals(52, Node.LENGTH);
271:       assertEquals(15, Node.NO_SIDE_EFFECTS);
272:       assertEquals(53, Node.INPUT_ID);
273:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
274:       assertEquals(30, Node.VAR_ARGS_NAME);
275:       assertEquals(57, Node.LAST_PROP);
276:       assertEquals(47, Node.IS_DISPATCHER);
277:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
278:       assertEquals(8, Node.FLAG_NO_THROWS);
279:       assertEquals(39, Node.EMPTY_BLOCK);
280:       assertEquals(48, Node.DIRECTIVES);
281:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
282:       assertEquals(4095, Node.COLUMN_MASK);
283:       assertEquals(55, Node.INFERRED_FUNCTION);
284:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
285:       assertEquals(40, Node.ORIGINALNAME_PROP);
286:       assertEquals(50, Node.FREE_CALL);
287:       assertEquals(43, Node.IS_CONSTANT_NAME);
288:       assertEquals(57, Node.REFLECTED_OBJECT);
289:       assertEquals(54, Node.SLASH_V);
290:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
291:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
292:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
293:       assertEquals(1, Node.DECR_FLAG);
294:       assertEquals(32, Node.INCRDECR_PROP);
295:       assertEquals(12, Node.COLUMN_BITS);
296:       assertEquals(49, Node.DIRECT_EVAL);
297:       assertEquals(57, Node.LAST_PROP);
298:       assertEquals(12, Node.COLUMN_BITS);
299:       assertEquals(30, Node.VAR_ARGS_NAME);
300:       assertEquals(51, Node.STATIC_SOURCE_FILE);
301:       assertEquals(46, Node.IS_NAMESPACE);
302:       assertEquals(54, Node.SLASH_V);
303:       assertEquals(37, Node.OPT_ARG_NAME);
304:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
305:       assertEquals(29, Node.JSDOC_INFO_PROP);
306:       assertEquals(40, Node.ORIGINALNAME_PROP);
307:       assertEquals(56, Node.CHANGE_TIME);
308:       assertEquals(2, Node.POST_FLAG);
309:       assertEquals(8, Node.FLAG_NO_THROWS);
310:       assertEquals(47, Node.IS_DISPATCHER);
311:       assertEquals(57, Node.REFLECTED_OBJECT);
312:       assertEquals(52, Node.LENGTH);
313:       assertEquals(53, Node.INPUT_ID);
314:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
315:       assertEquals(15, Node.NO_SIDE_EFFECTS);
316:       assertEquals(39, Node.EMPTY_BLOCK);
317:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
318:       assertEquals(55, Node.INFERRED_FUNCTION);
319:       assertEquals(43, Node.IS_CONSTANT_NAME);
320:       assertEquals(4095, Node.COLUMN_MASK);
321:       assertEquals(36, Node.QUOTED_PROP);
322:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
323:       assertEquals(48, Node.DIRECTIVES);
324:       assertEquals(50, Node.FREE_CALL);
325:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
326:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
327:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
328:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
329:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
330:       assertEquals(32, Node.INCRDECR_PROP);
331:       assertEquals(1, Node.DECR_FLAG);
332:       assertNotNull(node1);
333:       
334:       Node node2 = node0.useSourceInfoFrom(node1);
335:       assertSame(node0, node2);
336:       assertSame(node2, node0);
337:       assertFalse(node0.isNE());
338:       assertFalse(node0.isIf());
339:       assertFalse(node0.isFor());
340:       assertFalse(node0.isGetterDef());
341:       assertFalse(node0.isDelProp());
342:       assertFalse(node0.isArrayLit());
343:       assertFalse(node0.isSwitch());
344:       assertFalse(node0.isRegExp());
345:       assertFalse(node0.isString());
346:       assertFalse(node0.isHook());
347:       assertFalse(node0.isDebugger());
348:       assertEquals((-1), node0.getCharno());
349:       assertTrue(node0.isNumber());
350:       assertFalse(node0.isTry());
351:       assertFalse(node0.isCase());
352:       assertFalse(node0.isThis());
353:       assertFalse(node0.isSetterDef());
354:       assertFalse(node0.isCatch());
355:       assertFalse(node0.isFalse());
356:       assertFalse(node0.isInstanceOf());
357:       assertFalse(node0.isAnd());
358:       assertFalse(node0.isInc());
359:       assertFalse(node0.isFunction());
360:       assertFalse(node0.isIn());
361:       assertFalse(node0.isThrow());
362:       assertFalse(node0.isTypeOf());
363:       assertFalse(node0.isAssign());
364:       assertFalse(node0.isOr());
365:       assertFalse(node0.isReturn());
366:       assertFalse(node0.isDec());
367:       assertFalse(node0.hasChildren());
368:       assertFalse(node0.isLabel());
369:       assertEquals((-1), node0.getSourcePosition());
370:       assertFalse(node0.hasMoreThanOneChild());
371:       assertFalse(node0.isCast());
372:       assertFalse(node0.isContinue());
373:       assertFalse(node0.isLabelName());
374:       assertFalse(node0.isGetElem());
375:       assertEquals((-1), node0.getLineno());
376:       assertFalse(node0.isExprResult());
377:       assertFalse(node0.isScript());
378:       assertFalse(node0.isWhile());
379:       assertFalse(node0.isNot());
380:       assertFalse(node0.isWith());
381:       assertEquals(39, node0.getType());
382:       assertFalse(node0.isBlock());
383:       assertFalse(node0.isObjectLit());
384:       assertFalse(node0.isGetProp());
385:       assertFalse(node0.hasOneChild());
386:       assertFalse(node0.isComma());
387:       assertFalse(node0.isNull());
388:       assertFalse(node0.isParamList());
389:       assertEquals(0, node0.getChildCount());
390:       assertFalse(node0.isCall());
391:       assertFalse(node0.isStringKey());
392:       assertFalse(node0.isName());
393:       assertFalse(node0.isBreak());
394:       assertFalse(node0.isVoid());
395:       assertFalse(node0.isTrue());
396:       assertFalse(node0.isDefaultCase());
397:       assertFalse(node0.isVar());
398:       assertFalse(node0.isEmpty());
399:       assertFalse(node0.isDo());
400:       assertFalse(node0.isAssignAdd());
401:       assertFalse(node0.isAdd());
402:       assertFalse(node0.isNew());
403:       assertFalse(node1.isDo());
404:       assertFalse(node1.isWhile());
405:       assertFalse(node1.isAssignAdd());
406:       assertFalse(node1.isBlock());
407:       assertFalse(node1.isReturn());
408:       assertEquals((-1), node1.getLineno());
409:       assertFalse(node1.isLabel());
410:       assertFalse(node1.isTypeOf());
411:       assertFalse(node1.isDec());
412:       assertFalse(node1.hasMoreThanOneChild());
413:       assertFalse(node1.isContinue());
414:       assertFalse(node1.isStringKey());
415:       assertFalse(node1.isAssign());
416:       assertFalse(node1.isLabelName());
417:       assertFalse(node1.isParamList());
418:       assertFalse(node1.isNumber());
419:       assertEquals((-1), node1.getSourcePosition());
420:       assertFalse(node1.isScript());
421:       assertFalse(node1.isDefaultCase());
422:       assertFalse(node1.isVoid());
423:       assertFalse(node1.isExprResult());
424:       assertFalse(node1.isComma());
425:       assertFalse(node1.isGetElem());
426:       assertFalse(node1.isName());
427:       assertFalse(node1.isEmpty());
428:       assertFalse(node1.isCall());
429:       assertFalse(node1.isBreak());
430:       assertFalse(node1.isNull());
431:       assertFalse(node1.isDelProp());
432:       assertFalse(node1.isVar());
433:       assertFalse(node1.isNew());
434:       assertFalse(node1.isAdd());
435:       assertFalse(node1.isOr());
436:       assertFalse(node1.isTrue());
437:       assertFalse(node1.isCase());
438:       assertFalse(node1.isSwitch());
439:       assertTrue(node1.hasChildren());
440:       assertEquals(1, node1.getChildCount());
441:       assertFalse(node1.isFor());
442:       assertTrue(node1.hasOneChild());
443:       assertFalse(node1.isArrayLit());
444:       assertFalse(node1.isHook());
445:       assertFalse(node1.isTry());
446:       assertFalse(node1.isDebugger());
447:       assertFalse(node1.isGetProp());
448:       assertEquals((-1), node1.getCharno());
449:       assertFalse(node1.isGetterDef());
450:       assertFalse(node1.isString());
451:       assertFalse(node1.isNot());
452:       assertFalse(node1.isObjectLit());
453:       assertFalse(node1.isAnd());
454:       assertEquals(4095, node1.getType());
455:       assertFalse(node1.isThis());
456:       assertFalse(node1.isInstanceOf());
457:       assertFalse(node1.isCast());
458:       assertFalse(node1.isRegExp());
459:       assertFalse(node1.isWith());
460:       assertFalse(node1.isCatch());
461:       assertFalse(node1.isFunction());
462:       assertFalse(node1.isFalse());
463:       assertFalse(node1.isThrow());
464:       assertFalse(node1.isNE());
465:       assertFalse(node1.isIf());
466:       assertFalse(node1.isInc());
467:       assertFalse(node1.isSetterDef());
468:       assertFalse(node1.isIn());
469:       assertFalse(node2.isNew());
470:       assertFalse(node2.isDo());
471:       assertEquals(39, node2.getType());
472:       assertFalse(node2.isBlock());
473:       assertFalse(node2.isWhile());
474:       assertFalse(node2.hasMoreThanOneChild());
475:       assertFalse(node2.isCall());
476:       assertFalse(node2.isVar());
477:       assertEquals((-1), node2.getLineno());
478:       assertFalse(node2.isContinue());
479:       assertFalse(node2.isSetterDef());
480:       assertFalse(node2.isNull());
481:       assertFalse(node2.isLabel());
482:       assertFalse(node2.isAssignAdd());
483:       assertFalse(node2.isName());
484:       assertFalse(node2.isOr());
485:       assertFalse(node2.isAdd());
486:       assertFalse(node2.isScript());
487:       assertFalse(node2.isRegExp());
488:       assertFalse(node2.isTry());
489:       assertFalse(node2.isDefaultCase());
490:       assertFalse(node2.isCatch());
491:       assertEquals(0, node2.getChildCount());
492:       assertFalse(node2.isArrayLit());
493:       assertFalse(node2.isWith());
494:       assertFalse(node2.isInstanceOf());
495:       assertFalse(node2.isThis());
496:       assertFalse(node2.isLabelName());
497:       assertFalse(node2.isFor());
498:       assertFalse(node2.isStringKey());
499:       assertFalse(node2.isParamList());
500:       assertFalse(node2.hasOneChild());
501:       assertFalse(node2.isCase());
502:       assertFalse(node2.isGetterDef());
503:       assertFalse(node2.isSwitch());
504:       assertFalse(node2.isInc());
505:       assertEquals((-1), node2.getCharno());
506:       assertFalse(node2.isHook());
507:       assertFalse(node2.isFalse());
508:       assertFalse(node2.isNE());
509:       assertFalse(node2.isBreak());
510:       assertFalse(node2.isDelProp());
511:       assertFalse(node2.isThrow());
512:       assertFalse(node2.isIf());
513:       assertFalse(node2.isEmpty());
514:       assertFalse(node2.isIn());
515:       assertFalse(node2.isExprResult());
516:       assertFalse(node2.isVoid());
517:       assertFalse(node2.isTrue());
518:       assertFalse(node2.isFunction());
519:       assertFalse(node2.isDebugger());
520:       assertFalse(node2.isAnd());
521:       assertFalse(node2.isCast());
522:       assertFalse(node2.isGetElem());
523:       assertFalse(node2.isAssign());
524:       assertFalse(node2.isComma());
525:       assertFalse(node2.isTypeOf());
526:       assertFalse(node2.isGetProp());
527:       assertFalse(node2.isDec());
528:       assertFalse(node2.hasChildren());
529:       assertEquals((-1), node2.getSourcePosition());
530:       assertFalse(node2.isReturn());
531:       assertTrue(node2.isNumber());
532:       assertFalse(node2.isObjectLit());
533:       assertFalse(node2.isNot());
534:       assertFalse(node2.isString());
535:       assertFalse(node0.equals((Object)node1));
536:       assertFalse(node1.equals((Object)node0));
537:       assertFalse(node2.equals((Object)node1));
538:       assertEquals(37, Node.OPT_ARG_NAME);
539:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
540:       assertEquals(2, Node.POST_FLAG);
541:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
542:       assertEquals(29, Node.JSDOC_INFO_PROP);
543:       assertEquals(51, Node.STATIC_SOURCE_FILE);
544:       assertEquals(49, Node.DIRECT_EVAL);
545:       assertEquals(46, Node.IS_NAMESPACE);
546:       assertEquals(56, Node.CHANGE_TIME);
547:       assertEquals(36, Node.QUOTED_PROP);
548:       assertEquals(52, Node.LENGTH);
549:       assertEquals(15, Node.NO_SIDE_EFFECTS);
550:       assertEquals(53, Node.INPUT_ID);
551:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
552:       assertEquals(30, Node.VAR_ARGS_NAME);
553:       assertEquals(57, Node.LAST_PROP);
554:       assertEquals(47, Node.IS_DISPATCHER);
555:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
556:       assertEquals(8, Node.FLAG_NO_THROWS);
557:       assertEquals(39, Node.EMPTY_BLOCK);
558:       assertEquals(48, Node.DIRECTIVES);
559:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
560:       assertEquals(4095, Node.COLUMN_MASK);
561:       assertEquals(55, Node.INFERRED_FUNCTION);
562:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
563:       assertEquals(40, Node.ORIGINALNAME_PROP);
564:       assertEquals(50, Node.FREE_CALL);
565:       assertEquals(43, Node.IS_CONSTANT_NAME);
566:       assertEquals(57, Node.REFLECTED_OBJECT);
567:       assertEquals(54, Node.SLASH_V);
568:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
569:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
570:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
571:       assertEquals(1, Node.DECR_FLAG);
572:       assertEquals(32, Node.INCRDECR_PROP);
573:       assertEquals(12, Node.COLUMN_BITS);
574:       assertEquals(49, Node.DIRECT_EVAL);
575:       assertEquals(57, Node.LAST_PROP);
576:       assertEquals(12, Node.COLUMN_BITS);
577:       assertEquals(30, Node.VAR_ARGS_NAME);
578:       assertEquals(51, Node.STATIC_SOURCE_FILE);
579:       assertEquals(46, Node.IS_NAMESPACE);
580:       assertEquals(54, Node.SLASH_V);
581:       assertEquals(37, Node.OPT_ARG_NAME);
582:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
583:       assertEquals(29, Node.JSDOC_INFO_PROP);
584:       assertEquals(40, Node.ORIGINALNAME_PROP);
585:       assertEquals(56, Node.CHANGE_TIME);
586:       assertEquals(2, Node.POST_FLAG);
587:       assertEquals(8, Node.FLAG_NO_THROWS);
588:       assertEquals(47, Node.IS_DISPATCHER);
589:       assertEquals(57, Node.REFLECTED_OBJECT);
590:       assertEquals(52, Node.LENGTH);
591:       assertEquals(53, Node.INPUT_ID);
592:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
593:       assertEquals(15, Node.NO_SIDE_EFFECTS);
594:       assertEquals(39, Node.EMPTY_BLOCK);
595:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
596:       assertEquals(55, Node.INFERRED_FUNCTION);
597:       assertEquals(43, Node.IS_CONSTANT_NAME);
598:       assertEquals(4095, Node.COLUMN_MASK);
599:       assertEquals(36, Node.QUOTED_PROP);
600:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
601:       assertEquals(48, Node.DIRECTIVES);
602:       assertEquals(50, Node.FREE_CALL);
603:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
604:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
605:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
606:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
607:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
608:       assertEquals(32, Node.INCRDECR_PROP);
609:       assertEquals(1, Node.DECR_FLAG);
610:       assertEquals(54, Node.SLASH_V);
611:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
612:       assertEquals(52, Node.LENGTH);
613:       assertEquals(30, Node.VAR_ARGS_NAME);
614:       assertEquals(40, Node.ORIGINALNAME_PROP);
615:       assertEquals(57, Node.REFLECTED_OBJECT);
616:       assertEquals(49, Node.DIRECT_EVAL);
617:       assertEquals(37, Node.OPT_ARG_NAME);
618:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
619:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
620:       assertEquals(46, Node.IS_NAMESPACE);
621:       assertEquals(51, Node.STATIC_SOURCE_FILE);
622:       assertEquals(50, Node.FREE_CALL);
623:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
624:       assertEquals(12, Node.COLUMN_BITS);
625:       assertEquals(32, Node.INCRDECR_PROP);
626:       assertEquals(1, Node.DECR_FLAG);
627:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
628:       assertEquals(43, Node.IS_CONSTANT_NAME);
629:       assertEquals(53, Node.INPUT_ID);
630:       assertEquals(36, Node.QUOTED_PROP);
631:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
632:       assertEquals(4095, Node.COLUMN_MASK);
633:       assertEquals(48, Node.DIRECTIVES);
634:       assertEquals(8, Node.FLAG_NO_THROWS);
635:       assertEquals(39, Node.EMPTY_BLOCK);
636:       assertEquals(56, Node.CHANGE_TIME);
637:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
638:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
639:       assertEquals(47, Node.IS_DISPATCHER);
640:       assertEquals(2, Node.POST_FLAG);
641:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
642:       assertEquals(29, Node.JSDOC_INFO_PROP);
643:       assertEquals(55, Node.INFERRED_FUNCTION);
644:       assertEquals(15, Node.NO_SIDE_EFFECTS);
645:       assertEquals(57, Node.LAST_PROP);
646:       assertNotNull(node2);
647:       
648:       Iterable<Node> iterable0 = node2.children();
649:       assertSame(node0, node2);
650:       assertSame(node2, node0);
651:       assertFalse(iterable0.contains(node1));
652:       assertFalse(node0.isNE());
653:       assertFalse(node0.isIf());
654:       assertFalse(node0.isFor());
655:       assertFalse(node0.isGetterDef());
656:       assertFalse(node0.isDelProp());
657:       assertFalse(node0.isArrayLit());
658:       assertFalse(node0.isSwitch());
659:       assertFalse(node0.isRegExp());
660:       assertFalse(node0.isString());
661:       assertFalse(node0.isHook());
662:       assertFalse(node0.isDebugger());
663:       assertEquals((-1), node0.getCharno());
664:       assertTrue(node0.isNumber());
665:       assertFalse(node0.isTry());
666:       assertFalse(node0.isCase());
667:       assertFalse(node0.isThis());
668:       assertFalse(node0.isSetterDef());
669:       assertFalse(node0.isCatch());
670:       assertFalse(node0.isFalse());
671:       assertFalse(node0.isInstanceOf());
672:       assertFalse(node0.isAnd());
673:       assertFalse(node0.isInc());
674:       assertFalse(node0.isFunction());
675:       assertFalse(node0.isIn());
676:       assertFalse(node0.isThrow());
677:       assertFalse(node0.isTypeOf());
678:       assertFalse(node0.isAssign());
679:       assertFalse(node0.isOr());
680:       assertFalse(node0.isReturn());
681:       assertFalse(node0.isDec());
682:       assertFalse(node0.hasChildren());
683:       assertFalse(node0.isLabel());
684:       assertEquals((-1), node0.getSourcePosition());
685:       assertFalse(node0.hasMoreThanOneChild());
686:       assertFalse(node0.isCast());
687:       assertFalse(node0.isContinue());
688:       assertFalse(node0.isLabelName());
689:       assertFalse(node0.isGetElem());
690:       assertEquals((-1), node0.getLineno());
691:       assertFalse(node0.isExprResult());
692:       assertFalse(node0.isScript());
693:       assertFalse(node0.isWhile());
694:       assertFalse(node0.isNot());
695:       assertFalse(node0.isWith());
696:       assertEquals(39, node0.getType());
697:       assertFalse(node0.isBlock());
698:       assertFalse(node0.isObjectLit());
699:       assertFalse(node0.isGetProp());
700:       assertFalse(node0.hasOneChild());
701:       assertFalse(node0.isComma());
702:       assertFalse(node0.isNull());
703:       assertFalse(node0.isParamList());
704:       assertEquals(0, node0.getChildCount());
705:       assertFalse(node0.isCall());
706:       assertFalse(node0.isStringKey());
707:       assertFalse(node0.isName());
708:       assertFalse(node0.isBreak());
709:       assertFalse(node0.isVoid());
710:       assertFalse(node0.isTrue());
711:       assertFalse(node0.isDefaultCase());
712:       assertFalse(node0.isVar());
713:       assertFalse(node0.isEmpty());
714:       assertFalse(node0.isDo());
715:       assertFalse(node0.isAssignAdd());
716:       assertFalse(node0.isAdd());
717:       assertFalse(node0.isNew());
718:       assertFalse(node1.isDo());
719:       assertFalse(node1.isWhile());
720:       assertFalse(node1.isAssignAdd());
721:       assertFalse(node1.isBlock());
722:       assertFalse(node1.isReturn());
723:       assertEquals((-1), node1.getLineno());
724:       assertFalse(node1.isLabel());
725:       assertFalse(node1.isTypeOf());
726:       assertFalse(node1.isDec());
727:       assertFalse(node1.hasMoreThanOneChild());
728:       assertFalse(node1.isContinue());
729:       assertFalse(node1.isStringKey());
730:       assertFalse(node1.isAssign());
731:       assertFalse(node1.isLabelName());
732:       assertFalse(node1.isParamList());
733:       assertFalse(node1.isNumber());
734:       assertEquals((-1), node1.getSourcePosition());
735:       assertFalse(node1.isScript());
736:       assertFalse(node1.isDefaultCase());
737:       assertFalse(node1.isVoid());
738:       assertFalse(node1.isExprResult());
739:       assertFalse(node1.isComma());
740:       assertFalse(node1.isGetElem());
741:       assertFalse(node1.isName());
742:       assertFalse(node1.isEmpty());
743:       assertFalse(node1.isCall());
744:       assertFalse(node1.isBreak());
745:       assertFalse(node1.isNull());
746:       assertFalse(node1.isDelProp());
747:       assertFalse(node1.isVar());
748:       assertFalse(node1.isNew());
749:       assertFalse(node1.isAdd());
750:       assertFalse(node1.isOr());
751:       assertFalse(node1.isTrue());
752:       assertFalse(node1.isCase());
753:       assertFalse(node1.isSwitch());
754:       assertTrue(node1.hasChildren());
755:       assertEquals(1, node1.getChildCount());
756:       assertFalse(node1.isFor());
757:       assertTrue(node1.hasOneChild());
758:       assertFalse(node1.isArrayLit());
759:       assertFalse(node1.isHook());
760:       assertFalse(node1.isTry());
761:       assertFalse(node1.isDebugger());
762:       assertFalse(node1.isGetProp());
763:       assertEquals((-1), node1.getCharno());
764:       assertFalse(node1.isGetterDef());
765:       assertFalse(node1.isString());
766:       assertFalse(node1.isNot());
767:       assertFalse(node1.isObjectLit());
768:       assertFalse(node1.isAnd());
769:       assertEquals(4095, node1.getType());
770:       assertFalse(node1.isThis());
771:       assertFalse(node1.isInstanceOf());
772:       assertFalse(node1.isCast());
773:       assertFalse(node1.isRegExp());
774:       assertFalse(node1.isWith());
775:       assertFalse(node1.isCatch());
776:       assertFalse(node1.isFunction());
777:       assertFalse(node1.isFalse());
778:       assertFalse(node1.isThrow());
779:       assertFalse(node1.isNE());
780:       assertFalse(node1.isIf());
781:       assertFalse(node1.isInc());
782:       assertFalse(node1.isSetterDef());
783:       assertFalse(node1.isIn());
784:       assertFalse(node2.isNew());
785:       assertFalse(node2.isDo());
786:       assertEquals(39, node2.getType());
787:       assertFalse(node2.isBlock());
788:       assertFalse(node2.isWhile());
789:       assertFalse(node2.hasMoreThanOneChild());
790:       assertFalse(node2.isCall());
791:       assertFalse(node2.isVar());
792:       assertEquals((-1), node2.getLineno());
793:       assertFalse(node2.isContinue());
794:       assertFalse(node2.isSetterDef());
795:       assertFalse(node2.isNull());
796:       assertFalse(node2.isLabel());
797:       assertFalse(node2.isAssignAdd());
798:       assertFalse(node2.isName());
799:       assertFalse(node2.isOr());
800:       assertFalse(node2.isAdd());
801:       assertFalse(node2.isScript());
802:       assertFalse(node2.isRegExp());
803:       assertFalse(node2.isTry());
804:       assertFalse(node2.isDefaultCase());
805:       assertFalse(node2.isCatch());
806:       assertEquals(0, node2.getChildCount());
807:       assertFalse(node2.isArrayLit());
808:       assertFalse(node2.isWith());
809:       assertFalse(node2.isInstanceOf());
810:       assertFalse(node2.isThis());
811:       assertFalse(node2.isLabelName());
812:       assertFalse(node2.isFor());
813:       assertFalse(node2.isStringKey());
814:       assertFalse(node2.isParamList());
815:       assertFalse(node2.hasOneChild());
816:       assertFalse(node2.isCase());
817:       assertFalse(node2.isGetterDef());
818:       assertFalse(node2.isSwitch());
819:       assertFalse(node2.isInc());
820:       assertEquals((-1), node2.getCharno());
821:       assertFalse(node2.isHook());
822:       assertFalse(node2.isFalse());
823:       assertFalse(node2.isNE());
824:       assertFalse(node2.isBreak());
825:       assertFalse(node2.isDelProp());
826:       assertFalse(node2.isThrow());
827:       assertFalse(node2.isIf());
828:       assertFalse(node2.isEmpty());
829:       assertFalse(node2.isIn());
830:       assertFalse(node2.isExprResult());
831:       assertFalse(node2.isVoid());
832:       assertFalse(node2.isTrue());
833:       assertFalse(node2.isFunction());
834:       assertFalse(node2.isDebugger());
835:       assertFalse(node2.isAnd());
836:       assertFalse(node2.isCast());
837:       assertFalse(node2.isGetElem());
838:       assertFalse(node2.isAssign());
839:       assertFalse(node2.isComma());
840:       assertFalse(node2.isTypeOf());
841:       assertFalse(node2.isGetProp());
842:       assertFalse(node2.isDec());
843:       assertFalse(node2.hasChildren());
844:       assertEquals((-1), node2.getSourcePosition());
845:       assertFalse(node2.isReturn());
846:       assertTrue(node2.isNumber());
847:       assertFalse(node2.isObjectLit());
848:       assertFalse(node2.isNot());
849:       assertFalse(node2.isString());
850:       assertFalse(node0.equals((Object)node1));
851:       assertFalse(node1.equals((Object)node0));
852:       assertFalse(node1.equals((Object)node2));
853:       assertFalse(node2.equals((Object)node1));
854:       assertEquals(37, Node.OPT_ARG_NAME);
855:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
856:       assertEquals(2, Node.POST_FLAG);
857:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
858:       assertEquals(29, Node.JSDOC_INFO_PROP);
859:       assertEquals(51, Node.STATIC_SOURCE_FILE);
860:       assertEquals(49, Node.DIRECT_EVAL);
861:       assertEquals(46, Node.IS_NAMESPACE);
862:       assertEquals(56, Node.CHANGE_TIME);
863:       assertEquals(36, Node.QUOTED_PROP);
864:       assertEquals(52, Node.LENGTH);
865:       assertEquals(15, Node.NO_SIDE_EFFECTS);
866:       assertEquals(53, Node.INPUT_ID);
867:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
868:       assertEquals(30, Node.VAR_ARGS_NAME);
869:       assertEquals(57, Node.LAST_PROP);
870:       assertEquals(47, Node.IS_DISPATCHER);
871:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
872:       assertEquals(8, Node.FLAG_NO_THROWS);
873:       assertEquals(39, Node.EMPTY_BLOCK);
874:       assertEquals(48, Node.DIRECTIVES);
875:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
876:       assertEquals(4095, Node.COLUMN_MASK);
877:       assertEquals(55, Node.INFERRED_FUNCTION);
878:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
879:       assertEquals(40, Node.ORIGINALNAME_PROP);
880:       assertEquals(50, Node.FREE_CALL);
881:       assertEquals(43, Node.IS_CONSTANT_NAME);
882:       assertEquals(57, Node.REFLECTED_OBJECT);
883:       assertEquals(54, Node.SLASH_V);
884:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
885:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
886:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
887:       assertEquals(1, Node.DECR_FLAG);
888:       assertEquals(32, Node.INCRDECR_PROP);
889:       assertEquals(12, Node.COLUMN_BITS);
890:       assertEquals(49, Node.DIRECT_EVAL);
891:       assertEquals(57, Node.LAST_PROP);
892:       assertEquals(12, Node.COLUMN_BITS);
893:       assertEquals(30, Node.VAR_ARGS_NAME);
894:       assertEquals(51, Node.STATIC_SOURCE_FILE);
895:       assertEquals(46, Node.IS_NAMESPACE);
896:       assertEquals(54, Node.SLASH_V);
897:       assertEquals(37, Node.OPT_ARG_NAME);
898:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
899:       assertEquals(29, Node.JSDOC_INFO_PROP);
900:       assertEquals(40, Node.ORIGINALNAME_PROP);
901:       assertEquals(56, Node.CHANGE_TIME);
902:       assertEquals(2, Node.POST_FLAG);
903:       assertEquals(8, Node.FLAG_NO_THROWS);
904:       assertEquals(47, Node.IS_DISPATCHER);
905:       assertEquals(57, Node.REFLECTED_OBJECT);
906:       assertEquals(52, Node.LENGTH);
907:       assertEquals(53, Node.INPUT_ID);
908:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
909:       assertEquals(15, Node.NO_SIDE_EFFECTS);
910:       assertEquals(39, Node.EMPTY_BLOCK);
911:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
912:       assertEquals(55, Node.INFERRED_FUNCTION);
913:       assertEquals(43, Node.IS_CONSTANT_NAME);
914:       assertEquals(4095, Node.COLUMN_MASK);
915:       assertEquals(36, Node.QUOTED_PROP);
916:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
917:       assertEquals(48, Node.DIRECTIVES);
918:       assertEquals(50, Node.FREE_CALL);
919:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
920:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
921:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
922:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
923:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
924:       assertEquals(32, Node.INCRDECR_PROP);
925:       assertEquals(1, Node.DECR_FLAG);
926:       assertEquals(54, Node.SLASH_V);
927:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
928:       assertEquals(52, Node.LENGTH);
929:       assertEquals(30, Node.VAR_ARGS_NAME);
930:       assertEquals(40, Node.ORIGINALNAME_PROP);
931:       assertEquals(57, Node.REFLECTED_OBJECT);
932:       assertEquals(49, Node.DIRECT_EVAL);
933:       assertEquals(37, Node.OPT_ARG_NAME);
934:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
935:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
936:       assertEquals(46, Node.IS_NAMESPACE);
937:       assertEquals(51, Node.STATIC_SOURCE_FILE);
938:       assertEquals(50, Node.FREE_CALL);
939:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
940:       assertEquals(12, Node.COLUMN_BITS);
941:       assertEquals(32, Node.INCRDECR_PROP);
942:       assertEquals(1, Node.DECR_FLAG);
943:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
944:       assertEquals(43, Node.IS_CONSTANT_NAME);
945:       assertEquals(53, Node.INPUT_ID);
946:       assertEquals(36, Node.QUOTED_PROP);
947:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
948:       assertEquals(4095, Node.COLUMN_MASK);
949:       assertEquals(48, Node.DIRECTIVES);
950:       assertEquals(8, Node.FLAG_NO_THROWS);
951:       assertEquals(39, Node.EMPTY_BLOCK);
952:       assertEquals(56, Node.CHANGE_TIME);
953:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
954:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
955:       assertEquals(47, Node.IS_DISPATCHER);
956:       assertEquals(2, Node.POST_FLAG);
957:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
958:       assertEquals(29, Node.JSDOC_INFO_PROP);
959:       assertEquals(55, Node.INFERRED_FUNCTION);
960:       assertEquals(15, Node.NO_SIDE_EFFECTS);
961:       assertEquals(57, Node.LAST_PROP);
962:       assertNotNull(iterable0);
963:       
964:       Node node3 = Node.newString("^", 2, 40);
965:       assertFalse(node3.isCast());
966:       assertFalse(node3.isGetElem());
967:       assertFalse(node3.hasOneChild());
968:       assertFalse(node3.isAssign());
969:       assertFalse(node3.isNumber());
970:       assertFalse(node3.isTypeOf());
971:       assertFalse(node3.isScript());
972:       assertFalse(node3.isDec());
973:       assertFalse(node3.isLabel());
974:       assertFalse(node3.hasChildren());
975:       assertFalse(node3.isReturn());
976:       assertFalse(node3.isAssignAdd());
977:       assertFalse(node3.isObjectLit());
978:       assertFalse(node3.isNot());
979:       assertFalse(node3.isContinue());
980:       assertEquals(2, node3.getLineno());
981:       assertFalse(node3.isLabelName());
982:       assertEquals(8232, node3.getSourcePosition());
983:       assertFalse(node3.isAnd());
984:       assertFalse(node3.isCall());
985:       assertFalse(node3.isVar());
986:       assertFalse(node3.isAdd());
987:       assertFalse(node3.isComma());
988:       assertFalse(node3.isGetProp());
989:       assertFalse(node3.isNew());
990:       assertFalse(node3.isWhile());
991:       assertFalse(node3.isDo());
992:       assertFalse(node3.isOr());
993:       assertFalse(node3.isExprResult());
994:       assertFalse(node3.isVoid());
995:       assertFalse(node3.isNull());
996:       assertFalse(node3.isTrue());
997:       assertFalse(node3.isBreak());
998:       assertFalse(node3.isDelProp());
999:       assertFalse(node3.isName());
1000:       assertFalse(node3.isArrayLit());
1001:       assertFalse(node3.isGetterDef());
1002:       assertFalse(node3.isEmpty());
1003:       assertFalse(node3.isFunction());
1004:       assertFalse(node3.isRegExp());
1005:       assertFalse(node3.isFor());
1006:       assertFalse(node3.isTry());
1007:       assertEquals(40, node3.getType());
1008:       assertFalse(node3.isDefaultCase());
1009:       assertEquals(40, node3.getCharno());
1010:       assertEquals(0, node3.getChildCount());
1011:       assertFalse(node3.isCase());
1012:       assertFalse(node3.isSwitch());
1013:       assertFalse(node3.isParamList());
1014:       assertFalse(node3.isDebugger());
1015:       assertFalse(node3.isStringKey());
1016:       assertFalse(node3.isHook());
1017:       assertFalse(node3.isFalse());
1018:       assertFalse(node3.isInc());
1019:       assertFalse(node3.isThis());
1020:       assertFalse(node3.isSetterDef());
1021:       assertFalse(node3.isBlock());
1022:       assertTrue(node3.isString());
1023:       assertFalse(node3.isThrow());
1024:       assertFalse(node3.hasMoreThanOneChild());
1025:       assertFalse(node3.isCatch());
1026:       assertFalse(node3.isWith());
1027:       assertFalse(node3.isInstanceOf());
1028:       assertFalse(node3.isIn());
1029:       assertFalse(node3.isNE());
1030:       assertFalse(node3.isIf());
1031:       assertFalse(node3.equals((Object)node0));
1032:       assertFalse(node3.equals((Object)node2));
1033:       assertFalse(node3.equals((Object)node1));
1034:       assertEquals(29, Node.JSDOC_INFO_PROP);
1035:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1036:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1037:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1038:       assertEquals(37, Node.OPT_ARG_NAME);
1039:       assertEquals(47, Node.IS_DISPATCHER);
1040:       assertEquals(2, Node.POST_FLAG);
1041:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1042:       assertEquals(4095, Node.COLUMN_MASK);
1043:       assertEquals(55, Node.INFERRED_FUNCTION);
1044:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1045:       assertEquals(57, Node.LAST_PROP);
1046:       assertEquals(49, Node.DIRECT_EVAL);
1047:       assertEquals(48, Node.DIRECTIVES);
1048:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1049:       assertEquals(8, Node.FLAG_NO_THROWS);
1050:       assertEquals(39, Node.EMPTY_BLOCK);
1051:       assertEquals(53, Node.INPUT_ID);
1052:       assertEquals(56, Node.CHANGE_TIME);
1053:       assertEquals(52, Node.LENGTH);
1054:       assertEquals(57, Node.REFLECTED_OBJECT);
1055:       assertEquals(36, Node.QUOTED_PROP);
1056:       assertEquals(40, Node.ORIGINALNAME_PROP);
1057:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1058:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1059:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1060:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1061:       assertEquals(30, Node.VAR_ARGS_NAME);
1062:       assertEquals(12, Node.COLUMN_BITS);
1063:       assertEquals(32, Node.INCRDECR_PROP);
1064:       assertEquals(1, Node.DECR_FLAG);
1065:       assertEquals(54, Node.SLASH_V);
1066:       assertEquals(43, Node.IS_CONSTANT_NAME);
1067:       assertEquals(46, Node.IS_NAMESPACE);
1068:       assertEquals(50, Node.FREE_CALL);
1069:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1070:       assertNotNull(node3);
1071:       
1072:       node0.setType((-479));
1073:       assertSame(node0, node2);
1074:       assertFalse(node0.isNE());
1075:       assertFalse(node0.isIf());
1076:       assertFalse(node0.isFor());
1077:       assertFalse(node0.isGetterDef());
1078:       assertFalse(node0.isDelProp());
1079:       assertFalse(node0.isArrayLit());
1080:       assertFalse(node0.isSwitch());
1081:       assertFalse(node0.isRegExp());
1082:       assertEquals((-479), node0.getType());
1083:       assertFalse(node0.isString());
1084:       assertFalse(node0.isHook());
1085:       assertFalse(node0.isDebugger());
1086:       assertEquals((-1), node0.getCharno());
1087:       assertFalse(node0.isTry());
1088:       assertFalse(node0.isCase());
1089:       assertFalse(node0.isThis());
1090:       assertFalse(node0.isSetterDef());
1091:       assertFalse(node0.isCatch());
1092:       assertFalse(node0.isFalse());
1093:       assertFalse(node0.isInstanceOf());
1094:       assertFalse(node0.isAnd());
1095:       assertFalse(node0.isInc());
1096:       assertFalse(node0.isFunction());
1097:       assertFalse(node0.isIn());
1098:       assertFalse(node0.isThrow());
1099:       assertFalse(node0.isTypeOf());
1100:       assertFalse(node0.isNumber());
1101:       assertFalse(node0.isAssign());
1102:       assertFalse(node0.isOr());
1103:       assertFalse(node0.isReturn());
1104:       assertFalse(node0.isDec());
1105:       assertFalse(node0.hasChildren());
1106:       assertFalse(node0.isLabel());
1107:       assertEquals((-1), node0.getSourcePosition());
1108:       assertFalse(node0.hasMoreThanOneChild());
1109:       assertFalse(node0.isCast());
1110:       assertFalse(node0.isContinue());
1111:       assertFalse(node0.isLabelName());
1112:       assertFalse(node0.isGetElem());
1113:       assertEquals((-1), node0.getLineno());
1114:       assertFalse(node0.isExprResult());
1115:       assertFalse(node0.isScript());
1116:       assertFalse(node0.isWhile());
1117:       assertFalse(node0.isNot());
1118:       assertFalse(node0.isWith());
1119:       assertFalse(node0.isBlock());
1120:       assertFalse(node0.isObjectLit());
1121:       assertFalse(node0.isGetProp());
1122:       assertFalse(node0.hasOneChild());
1123:       assertFalse(node0.isComma());
1124:       assertFalse(node0.isNull());
1125:       assertFalse(node0.isParamList());
1126:       assertEquals(0, node0.getChildCount());
1127:       assertFalse(node0.isCall());
1128:       assertFalse(node0.isStringKey());
1129:       assertFalse(node0.isName());
1130:       assertFalse(node0.isBreak());
1131:       assertFalse(node0.isVoid());
1132:       assertFalse(node0.isTrue());
1133:       assertFalse(node0.isDefaultCase());
1134:       assertFalse(node0.isVar());
1135:       assertFalse(node0.isEmpty());
1136:       assertFalse(node0.isDo());
1137:       assertFalse(node0.isAssignAdd());
1138:       assertFalse(node0.isAdd());
1139:       assertFalse(node0.isNew());
1140:       assertFalse(node0.equals((Object)node1));
1141:       assertFalse(node0.equals((Object)node3));
1142:       assertEquals(37, Node.OPT_ARG_NAME);
1143:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1144:       assertEquals(2, Node.POST_FLAG);
1145:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1146:       assertEquals(29, Node.JSDOC_INFO_PROP);
1147:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1148:       assertEquals(49, Node.DIRECT_EVAL);
1149:       assertEquals(46, Node.IS_NAMESPACE);
1150:       assertEquals(56, Node.CHANGE_TIME);
1151:       assertEquals(36, Node.QUOTED_PROP);
1152:       assertEquals(52, Node.LENGTH);
1153:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1154:       assertEquals(53, Node.INPUT_ID);
1155:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1156:       assertEquals(30, Node.VAR_ARGS_NAME);
1157:       assertEquals(57, Node.LAST_PROP);
1158:       assertEquals(47, Node.IS_DISPATCHER);
1159:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1160:       assertEquals(8, Node.FLAG_NO_THROWS);
1161:       assertEquals(39, Node.EMPTY_BLOCK);
1162:       assertEquals(48, Node.DIRECTIVES);
1163:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1164:       assertEquals(4095, Node.COLUMN_MASK);
1165:       assertEquals(55, Node.INFERRED_FUNCTION);
1166:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1167:       assertEquals(40, Node.ORIGINALNAME_PROP);
1168:       assertEquals(50, Node.FREE_CALL);
1169:       assertEquals(43, Node.IS_CONSTANT_NAME);
1170:       assertEquals(57, Node.REFLECTED_OBJECT);
1171:       assertEquals(54, Node.SLASH_V);
1172:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1173:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1174:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1175:       assertEquals(1, Node.DECR_FLAG);
1176:       assertEquals(32, Node.INCRDECR_PROP);
1177:       assertEquals(12, Node.COLUMN_BITS);
1178:       
1179:       node3.setLength(4);
1180:       assertFalse(node3.isCast());
1181:       assertFalse(node3.isGetElem());
1182:       assertFalse(node3.hasOneChild());
1183:       assertFalse(node3.isAssign());
1184:       assertFalse(node3.isNumber());
1185:       assertFalse(node3.isTypeOf());
1186:       assertFalse(node3.isScript());
1187:       assertFalse(node3.isDec());
1188:       assertFalse(node3.isLabel());
1189:       assertFalse(node3.hasChildren());
1190:       assertFalse(node3.isReturn());
1191:       assertFalse(node3.isAssignAdd());
1192:       assertFalse(node3.isObjectLit());
1193:       assertFalse(node3.isNot());
1194:       assertFalse(node3.isContinue());
1195:       assertEquals(2, node3.getLineno());
1196:       assertFalse(node3.isLabelName());
1197:       assertEquals(8232, node3.getSourcePosition());
1198:       assertFalse(node3.isAnd());
1199:       assertFalse(node3.isCall());
1200:       assertFalse(node3.isVar());
1201:       assertFalse(node3.isAdd());
1202:       assertFalse(node3.isComma());
1203:       assertFalse(node3.isGetProp());
1204:       assertFalse(node3.isNew());
1205:       assertFalse(node3.isWhile());
1206:       assertFalse(node3.isDo());
1207:       assertFalse(node3.isOr());
1208:       assertFalse(node3.isExprResult());
1209:       assertFalse(node3.isVoid());
1210:       assertFalse(node3.isNull());
1211:       assertFalse(node3.isTrue());
1212:       assertFalse(node3.isBreak());
1213:       assertFalse(node3.isDelProp());
1214:       assertFalse(node3.isName());
1215:       assertFalse(node3.isArrayLit());
1216:       assertFalse(node3.isGetterDef());
1217:       assertFalse(node3.isEmpty());
1218:       assertFalse(node3.isFunction());
1219:       assertFalse(node3.isRegExp());
1220:       assertFalse(node3.isFor());
1221:       assertFalse(node3.isTry());
1222:       assertEquals(40, node3.getType());
1223:       assertFalse(node3.isDefaultCase());
1224:       assertEquals(40, node3.getCharno());
1225:       assertEquals(0, node3.getChildCount());
1226:       assertFalse(node3.isCase());
1227:       assertFalse(node3.isSwitch());
1228:       assertFalse(node3.isParamList());
1229:       assertFalse(node3.isDebugger());
1230:       assertFalse(node3.isStringKey());
1231:       assertFalse(node3.isHook());
1232:       assertFalse(node3.isFalse());
1233:       assertFalse(node3.isInc());
1234:       assertFalse(node3.isThis());
1235:       assertFalse(node3.isSetterDef());
1236:       assertFalse(node3.isBlock());
1237:       assertTrue(node3.isString());
1238:       assertFalse(node3.isThrow());
1239:       assertFalse(node3.hasMoreThanOneChild());
1240:       assertFalse(node3.isCatch());
1241:       assertFalse(node3.isWith());
1242:       assertFalse(node3.isInstanceOf());
1243:       assertFalse(node3.isIn());
1244:       assertFalse(node3.isNE());
1245:       assertFalse(node3.isIf());
1246:       assertFalse(node3.equals((Object)node0));
1247:       assertFalse(node3.equals((Object)node2));
1248:       assertFalse(node3.equals((Object)node1));
1249:       assertEquals(29, Node.JSDOC_INFO_PROP);
1250:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1251:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1252:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1253:       assertEquals(37, Node.OPT_ARG_NAME);
1254:       assertEquals(47, Node.IS_DISPATCHER);
1255:       assertEquals(2, Node.POST_FLAG);
1256:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1257:       assertEquals(4095, Node.COLUMN_MASK);
1258:       assertEquals(55, Node.INFERRED_FUNCTION);
1259:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1260:       assertEquals(57, Node.LAST_PROP);
1261:       assertEquals(49, Node.DIRECT_EVAL);
1262:       assertEquals(48, Node.DIRECTIVES);
1263:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1264:       assertEquals(8, Node.FLAG_NO_THROWS);
1265:       assertEquals(39, Node.EMPTY_BLOCK);
1266:       assertEquals(53, Node.INPUT_ID);
1267:       assertEquals(56, Node.CHANGE_TIME);
1268:       assertEquals(52, Node.LENGTH);
1269:       assertEquals(57, Node.REFLECTED_OBJECT);
1270:       assertEquals(36, Node.QUOTED_PROP);
1271:       assertEquals(40, Node.ORIGINALNAME_PROP);
1272:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1273:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1274:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1275:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1276:       assertEquals(30, Node.VAR_ARGS_NAME);
1277:       assertEquals(12, Node.COLUMN_BITS);
1278:       assertEquals(32, Node.INCRDECR_PROP);
1279:       assertEquals(1, Node.DECR_FLAG);
1280:       assertEquals(54, Node.SLASH_V);
1281:       assertEquals(43, Node.IS_CONSTANT_NAME);
1282:       assertEquals(46, Node.IS_NAMESPACE);
1283:       assertEquals(50, Node.FREE_CALL);
1284:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1285:       
1286:       node1.putBooleanProp(1, true);
1287:       assertSame(node0, node2);
1288:       assertFalse(node0.isNE());
1289:       assertFalse(node0.isIf());
1290:       assertFalse(node0.isFor());
1291:       assertFalse(node0.isGetterDef());
1292:       assertFalse(node0.isDelProp());
1293:       assertFalse(node0.isArrayLit());
1294:       assertFalse(node0.isSwitch());
1295:       assertFalse(node0.isRegExp());
1296:       assertEquals((-479), node0.getType());
1297:       assertFalse(node0.isString());
1298:       assertFalse(node0.isHook());
1299:       assertFalse(node0.isDebugger());
1300:       assertEquals((-1), node0.getCharno());
1301:       assertFalse(node0.isTry());
1302:       assertFalse(node0.isCase());
1303:       assertFalse(node0.isThis());
1304:       assertFalse(node0.isSetterDef());
1305:       assertFalse(node0.isCatch());
1306:       assertFalse(node0.isFalse());
1307:       assertFalse(node0.isInstanceOf());
1308:       assertFalse(node0.isAnd());
1309:       assertFalse(node0.isInc());
1310:       assertFalse(node0.isFunction());
1311:       assertFalse(node0.isIn());
1312:       assertFalse(node0.isThrow());
1313:       assertFalse(node0.isTypeOf());
1314:       assertFalse(node0.isNumber());
1315:       assertFalse(node0.isAssign());
1316:       assertFalse(node0.isOr());
1317:       assertFalse(node0.isReturn());
1318:       assertFalse(node0.isDec());
1319:       assertFalse(node0.hasChildren());
1320:       assertFalse(node0.isLabel());
1321:       assertEquals((-1), node0.getSourcePosition());
1322:       assertFalse(node0.hasMoreThanOneChild());
1323:       assertFalse(node0.isCast());
1324:       assertFalse(node0.isContinue());
1325:       assertFalse(node0.isLabelName());
1326:       assertFalse(node0.isGetElem());
1327:       assertEquals((-1), node0.getLineno());
1328:       assertFalse(node0.isExprResult());
1329:       assertFalse(node0.isScript());
1330:       assertFalse(node0.isWhile());
1331:       assertFalse(node0.isNot());
1332:       assertFalse(node0.isWith());
1333:       assertFalse(node0.isBlock());
1334:       assertFalse(node0.isObjectLit());
1335:       assertFalse(node0.isGetProp());
1336:       assertFalse(node0.hasOneChild());
1337:       assertFalse(node0.isComma());
1338:       assertFalse(node0.isNull());
1339:       assertFalse(node0.isParamList());
1340:       assertEquals(0, node0.getChildCount());
1341:       assertFalse(node0.isCall());
1342:       assertFalse(node0.isStringKey());
1343:       assertFalse(node0.isName());
1344:       assertFalse(node0.isBreak());
1345:       assertFalse(node0.isVoid());
1346:       assertFalse(node0.isTrue());
1347:       assertFalse(node0.isDefaultCase());
1348:       assertFalse(node0.isVar());
1349:       assertFalse(node0.isEmpty());
1350:       assertFalse(node0.isDo());
1351:       assertFalse(node0.isAssignAdd());
1352:       assertFalse(node0.isAdd());
1353:       assertFalse(node0.isNew());
1354:       assertFalse(node1.isDo());
1355:       assertFalse(node1.isWhile());
1356:       assertFalse(node1.isAssignAdd());
1357:       assertFalse(node1.isBlock());
1358:       assertFalse(node1.isReturn());
1359:       assertEquals((-1), node1.getLineno());
1360:       assertFalse(node1.isLabel());
1361:       assertFalse(node1.isTypeOf());
1362:       assertFalse(node1.isDec());
1363:       assertFalse(node1.hasMoreThanOneChild());
1364:       assertFalse(node1.isContinue());
1365:       assertFalse(node1.isStringKey());
1366:       assertFalse(node1.isAssign());
1367:       assertFalse(node1.isLabelName());
1368:       assertFalse(node1.isParamList());
1369:       assertFalse(node1.isNumber());
1370:       assertEquals((-1), node1.getSourcePosition());
1371:       assertFalse(node1.isScript());
1372:       assertFalse(node1.isDefaultCase());
1373:       assertFalse(node1.isVoid());
1374:       assertFalse(node1.isExprResult());
1375:       assertFalse(node1.isComma());
1376:       assertFalse(node1.isGetElem());
1377:       assertFalse(node1.isName());
1378:       assertFalse(node1.isEmpty());
1379:       assertFalse(node1.isCall());
1380:       assertFalse(node1.isBreak());
1381:       assertFalse(node1.isNull());
1382:       assertFalse(node1.isDelProp());
1383:       assertFalse(node1.isVar());
1384:       assertFalse(node1.isNew());
1385:       assertFalse(node1.isAdd());
1386:       assertFalse(node1.isOr());
1387:       assertFalse(node1.isTrue());
1388:       assertFalse(node1.isCase());
1389:       assertFalse(node1.isSwitch());
1390:       assertTrue(node1.hasChildren());
1391:       assertEquals(1, node1.getChildCount());
1392:       assertFalse(node1.isFor());
1393:       assertTrue(node1.hasOneChild());
1394:       assertFalse(node1.isArrayLit());
1395:       assertFalse(node1.isHook());
1396:       assertFalse(node1.isTry());
1397:       assertFalse(node1.isDebugger());
1398:       assertFalse(node1.isGetProp());
1399:       assertEquals((-1), node1.getCharno());
1400:       assertFalse(node1.isGetterDef());
1401:       assertFalse(node1.isString());
1402:       assertFalse(node1.isNot());
1403:       assertFalse(node1.isObjectLit());
1404:       assertFalse(node1.isAnd());
1405:       assertEquals(4095, node1.getType());
1406:       assertFalse(node1.isThis());
1407:       assertFalse(node1.isInstanceOf());
1408:       assertFalse(node1.isCast());
1409:       assertFalse(node1.isRegExp());
1410:       assertFalse(node1.isWith());
1411:       assertFalse(node1.isCatch());
1412:       assertFalse(node1.isFunction());
1413:       assertFalse(node1.isFalse());
1414:       assertFalse(node1.isThrow());
1415:       assertFalse(node1.isNE());
1416:       assertFalse(node1.isIf());
1417:       assertFalse(node1.isInc());
1418:       assertFalse(node1.isSetterDef());
1419:       assertFalse(node1.isIn());
1420:       assertFalse(node0.equals((Object)node1));
1421:       assertFalse(node0.equals((Object)node3));
1422:       assertFalse(node1.equals((Object)node3));
1423:       assertFalse(node1.equals((Object)node0));
1424:       assertFalse(node1.equals((Object)node2));
1425:       assertEquals(37, Node.OPT_ARG_NAME);
1426:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1427:       assertEquals(2, Node.POST_FLAG);
1428:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1429:       assertEquals(29, Node.JSDOC_INFO_PROP);
1430:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1431:       assertEquals(49, Node.DIRECT_EVAL);
1432:       assertEquals(46, Node.IS_NAMESPACE);
1433:       assertEquals(56, Node.CHANGE_TIME);
1434:       assertEquals(36, Node.QUOTED_PROP);
1435:       assertEquals(52, Node.LENGTH);
1436:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1437:       assertEquals(53, Node.INPUT_ID);
1438:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1439:       assertEquals(30, Node.VAR_ARGS_NAME);
1440:       assertEquals(57, Node.LAST_PROP);
1441:       assertEquals(47, Node.IS_DISPATCHER);
1442:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1443:       assertEquals(8, Node.FLAG_NO_THROWS);
1444:       assertEquals(39, Node.EMPTY_BLOCK);
1445:       assertEquals(48, Node.DIRECTIVES);
1446:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1447:       assertEquals(4095, Node.COLUMN_MASK);
1448:       assertEquals(55, Node.INFERRED_FUNCTION);
1449:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1450:       assertEquals(40, Node.ORIGINALNAME_PROP);
1451:       assertEquals(50, Node.FREE_CALL);
1452:       assertEquals(43, Node.IS_CONSTANT_NAME);
1453:       assertEquals(57, Node.REFLECTED_OBJECT);
1454:       assertEquals(54, Node.SLASH_V);
1455:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1456:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1457:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1458:       assertEquals(1, Node.DECR_FLAG);
1459:       assertEquals(32, Node.INCRDECR_PROP);
1460:       assertEquals(12, Node.COLUMN_BITS);
1461:       assertEquals(49, Node.DIRECT_EVAL);
1462:       assertEquals(57, Node.LAST_PROP);
1463:       assertEquals(12, Node.COLUMN_BITS);
1464:       assertEquals(30, Node.VAR_ARGS_NAME);
1465:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1466:       assertEquals(46, Node.IS_NAMESPACE);
1467:       assertEquals(54, Node.SLASH_V);
1468:       assertEquals(37, Node.OPT_ARG_NAME);
1469:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1470:       assertEquals(29, Node.JSDOC_INFO_PROP);
1471:       assertEquals(40, Node.ORIGINALNAME_PROP);
1472:       assertEquals(56, Node.CHANGE_TIME);
1473:       assertEquals(2, Node.POST_FLAG);
1474:       assertEquals(8, Node.FLAG_NO_THROWS);
1475:       assertEquals(47, Node.IS_DISPATCHER);
1476:       assertEquals(57, Node.REFLECTED_OBJECT);
1477:       assertEquals(52, Node.LENGTH);
1478:       assertEquals(53, Node.INPUT_ID);
1479:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1480:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1481:       assertEquals(39, Node.EMPTY_BLOCK);
1482:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1483:       assertEquals(55, Node.INFERRED_FUNCTION);
1484:       assertEquals(43, Node.IS_CONSTANT_NAME);
1485:       assertEquals(4095, Node.COLUMN_MASK);
1486:       assertEquals(36, Node.QUOTED_PROP);
1487:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1488:       assertEquals(48, Node.DIRECTIVES);
1489:       assertEquals(50, Node.FREE_CALL);
1490:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1491:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1492:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1493:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1494:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1495:       assertEquals(32, Node.INCRDECR_PROP);
1496:       assertEquals(1, Node.DECR_FLAG);
1497:       
1498:       boolean boolean0 = node0.isUnscopedQualifiedName();
1499:       assertSame(node0, node2);
1500:       assertFalse(node0.isNE());
1501:       assertFalse(node0.isIf());
1502:       assertFalse(node0.isFor());
1503:       assertFalse(node0.isGetterDef());
1504:       assertFalse(node0.isDelProp());
1505:       assertFalse(node0.isArrayLit());
1506:       assertFalse(node0.isSwitch());
1507:       assertFalse(node0.isRegExp());
1508:       assertEquals((-479), node0.getType());
1509:       assertFalse(node0.isString());
1510:       assertFalse(node0.isHook());
1511:       assertFalse(node0.isDebugger());
1512:       assertEquals((-1), node0.getCharno());
1513:       assertFalse(node0.isTry());
1514:       assertFalse(node0.isCase());
1515:       assertFalse(node0.isThis());
1516:       assertFalse(node0.isSetterDef());
1517:       assertFalse(node0.isCatch());
1518:       assertFalse(node0.isFalse());
1519:       assertFalse(node0.isInstanceOf());
1520:       assertFalse(node0.isAnd());
1521:       assertFalse(node0.isInc());
1522:       assertFalse(node0.isFunction());
1523:       assertFalse(node0.isIn());
1524:       assertFalse(node0.isThrow());
1525:       assertFalse(node0.isTypeOf());
1526:       assertFalse(node0.isNumber());
1527:       assertFalse(node0.isAssign());
1528:       assertFalse(node0.isOr());
1529:       assertFalse(node0.isReturn());
1530:       assertFalse(node0.isDec());
1531:       assertFalse(node0.hasChildren());
1532:       assertFalse(node0.isLabel());
1533:       assertEquals((-1), node0.getSourcePosition());
1534:       assertFalse(node0.hasMoreThanOneChild());
1535:       assertFalse(node0.isCast());
1536:       assertFalse(node0.isContinue());
1537:       assertFalse(node0.isLabelName());
1538:       assertFalse(node0.isGetElem());
1539:       assertEquals((-1), node0.getLineno());
1540:       assertFalse(node0.isExprResult());
1541:       assertFalse(node0.isScript());
1542:       assertFalse(node0.isWhile());
1543:       assertFalse(node0.isNot());
1544:       assertFalse(node0.isWith());
1545:       assertFalse(node0.isBlock());
1546:       assertFalse(node0.isObjectLit());
1547:       assertFalse(node0.isGetProp());
1548:       assertFalse(node0.hasOneChild());
1549:       assertFalse(node0.isComma());
1550:       assertFalse(node0.isNull());
1551:       assertFalse(node0.isParamList());
1552:       assertEquals(0, node0.getChildCount());
1553:       assertFalse(node0.isCall());
1554:       assertFalse(node0.isStringKey());
1555:       assertFalse(node0.isName());
1556:       assertFalse(node0.isBreak());
1557:       assertFalse(node0.isVoid());
1558:       assertFalse(node0.isTrue());
1559:       assertFalse(node0.isDefaultCase());
1560:       assertFalse(node0.isVar());
1561:       assertFalse(node0.isEmpty());
1562:       assertFalse(node0.isDo());
1563:       assertFalse(node0.isAssignAdd());
1564:       assertFalse(node0.isAdd());
1565:       assertFalse(node0.isNew());
1566:       assertFalse(node0.equals((Object)node1));
1567:       assertFalse(node0.equals((Object)node3));
1568:       assertFalse(boolean0);
1569:       assertEquals(37, Node.OPT_ARG_NAME);
1570:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1571:       assertEquals(2, Node.POST_FLAG);
1572:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1573:       assertEquals(29, Node.JSDOC_INFO_PROP);
1574:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1575:       assertEquals(49, Node.DIRECT_EVAL);
1576:       assertEquals(46, Node.IS_NAMESPACE);
1577:       assertEquals(56, Node.CHANGE_TIME);
1578:       assertEquals(36, Node.QUOTED_PROP);
1579:       assertEquals(52, Node.LENGTH);
1580:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1581:       assertEquals(53, Node.INPUT_ID);
1582:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1583:       assertEquals(30, Node.VAR_ARGS_NAME);
1584:       assertEquals(57, Node.LAST_PROP);
1585:       assertEquals(47, Node.IS_DISPATCHER);
1586:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1587:       assertEquals(8, Node.FLAG_NO_THROWS);
1588:       assertEquals(39, Node.EMPTY_BLOCK);
1589:       assertEquals(48, Node.DIRECTIVES);
1590:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1591:       assertEquals(4095, Node.COLUMN_MASK);
1592:       assertEquals(55, Node.INFERRED_FUNCTION);
1593:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1594:       assertEquals(40, Node.ORIGINALNAME_PROP);
1595:       assertEquals(50, Node.FREE_CALL);
1596:       assertEquals(43, Node.IS_CONSTANT_NAME);
1597:       assertEquals(57, Node.REFLECTED_OBJECT);
1598:       assertEquals(54, Node.SLASH_V);
1599:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1600:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1601:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1602:       assertEquals(1, Node.DECR_FLAG);
1603:       assertEquals(32, Node.INCRDECR_PROP);
1604:       assertEquals(12, Node.COLUMN_BITS);
1605:       
1606:       Node node4 = node0.cloneNode();
1607:       assertSame(node0, node2);
1608:       assertNotSame(node0, node4);
1609:       assertNotSame(node4, node2);
1610:       assertNotSame(node4, node0);
1611:       assertFalse(node0.isNE());
1612:       assertFalse(node0.isIf());
1613:       assertFalse(node0.isFor());
1614:       assertFalse(node0.isGetterDef());
1615:       assertFalse(node0.isDelProp());
1616:       assertFalse(node0.isArrayLit());
1617:       assertFalse(node0.isSwitch());
1618:       assertFalse(node0.isRegExp());
1619:       assertEquals((-479), node0.getType());
1620:       assertFalse(node0.isString());
1621:       assertFalse(node0.isHook());
1622:       assertFalse(node0.isDebugger());
1623:       assertEquals((-1), node0.getCharno());
1624:       assertFalse(node0.isTry());
1625:       assertFalse(node0.isCase());
1626:       assertFalse(node0.isThis());
1627:       assertFalse(node0.isSetterDef());
1628:       assertFalse(node0.isCatch());
1629:       assertFalse(node0.isFalse());
1630:       assertFalse(node0.isInstanceOf());
1631:       assertFalse(node0.isAnd());
1632:       assertFalse(node0.isInc());
1633:       assertFalse(node0.isFunction());
1634:       assertFalse(node0.isIn());
1635:       assertFalse(node0.isThrow());
1636:       assertFalse(node0.isTypeOf());
1637:       assertFalse(node0.isNumber());
1638:       assertFalse(node0.isAssign());
1639:       assertFalse(node0.isOr());
1640:       assertFalse(node0.isReturn());
1641:       assertFalse(node0.isDec());
1642:       assertFalse(node0.hasChildren());
1643:       assertFalse(node0.isLabel());
1644:       assertEquals((-1), node0.getSourcePosition());
1645:       assertFalse(node0.hasMoreThanOneChild());
1646:       assertFalse(node0.isCast());
1647:       assertFalse(node0.isContinue());
1648:       assertFalse(node0.isLabelName());
1649:       assertFalse(node0.isGetElem());
1650:       assertEquals((-1), node0.getLineno());
1651:       assertFalse(node0.isExprResult());
1652:       assertFalse(node0.isScript());
1653:       assertFalse(node0.isWhile());
1654:       assertFalse(node0.isNot());
1655:       assertFalse(node0.isWith());
1656:       assertFalse(node0.isBlock());
1657:       assertFalse(node0.isObjectLit());
1658:       assertFalse(node0.isGetProp());
1659:       assertFalse(node0.hasOneChild());
1660:       assertFalse(node0.isComma());
1661:       assertFalse(node0.isNull());
1662:       assertFalse(node0.isParamList());
1663:       assertEquals(0, node0.getChildCount());
1664:       assertFalse(node0.isCall());
1665:       assertFalse(node0.isStringKey());
1666:       assertFalse(node0.isName());
1667:       assertFalse(node0.isBreak());
1668:       assertFalse(node0.isVoid());
1669:       assertFalse(node0.isTrue());
1670:       assertFalse(node0.isDefaultCase());
1671:       assertFalse(node0.isVar());
1672:       assertFalse(node0.isEmpty());
1673:       assertFalse(node0.isDo());
1674:       assertFalse(node0.isAssignAdd());
1675:       assertFalse(node0.isAdd());
1676:       assertFalse(node0.isNew());
1677:       assertFalse(node4.isFalse());
1678:       assertFalse(node4.isThrow());
1679:       assertFalse(node4.isBreak());
1680:       assertFalse(node4.isGetProp());
1681:       assertEquals((-1), node4.getCharno());
1682:       assertFalse(node4.isInc());
1683:       assertFalse(node4.isObjectLit());
1684:       assertFalse(node4.isAnd());
1685:       assertFalse(node4.isSwitch());
1686:       assertFalse(node4.isFor());
1687:       assertFalse(node4.isArrayLit());
1688:       assertFalse(node4.hasOneChild());
1689:       assertFalse(node4.isIf());
1690:       assertFalse(node4.isLabelName());
1691:       assertFalse(node4.isTry());
1692:       assertFalse(node4.isScript());
1693:       assertFalse(node4.isNE());
1694:       assertFalse(node4.isNumber());
1695:       assertFalse(node4.isIn());
1696:       assertFalse(node4.isGetterDef());
1697:       assertFalse(node4.isCase());
1698:       assertFalse(node4.isWith());
1699:       assertFalse(node4.isCatch());
1700:       assertEquals((-1), node4.getLineno());
1701:       assertFalse(node4.isBlock());
1702:       assertFalse(node4.isThis());
1703:       assertFalse(node4.isHook());
1704:       assertFalse(node4.isInstanceOf());
1705:       assertFalse(node4.isRegExp());
1706:       assertFalse(node4.hasMoreThanOneChild());
1707:       assertFalse(node4.isName());
1708:       assertFalse(node4.isStringKey());
1709:       assertFalse(node4.isCall());
1710:       assertFalse(node4.isVar());
1711:       assertFalse(node4.isAdd());
1712:       assertFalse(node4.isNew());
1713:       assertFalse(node4.isParamList());
1714:       assertFalse(node4.isSetterDef());
1715:       assertFalse(node4.isNull());
1716:       assertFalse(node4.isContinue());
1717:       assertFalse(node4.isDefaultCase());
1718:       assertFalse(node4.isDo());
1719:       assertFalse(node4.isLabel());
1720:       assertFalse(node4.isAssignAdd());
1721:       assertFalse(node4.isFunction());
1722:       assertEquals(0, node4.getChildCount());
1723:       assertFalse(node4.isGetElem());
1724:       assertFalse(node4.isEmpty());
1725:       assertFalse(node4.isCast());
1726:       assertFalse(node4.isDelProp());
1727:       assertFalse(node4.isTrue());
1728:       assertEquals((-1), node4.getSourcePosition());
1729:       assertFalse(node4.isDebugger());
1730:       assertFalse(node4.isNot());
1731:       assertFalse(node4.isOr());
1732:       assertFalse(node4.isString());
1733:       assertFalse(node4.isWhile());
1734:       assertFalse(node4.isVoid());
1735:       assertFalse(node4.isExprResult());
1736:       assertFalse(node4.isReturn());
1737:       assertEquals((-479), node4.getType());
1738:       assertFalse(node4.isTypeOf());
1739:       assertFalse(node4.hasChildren());
1740:       assertFalse(node4.isComma());
1741:       assertFalse(node4.isAssign());
1742:       assertFalse(node4.isDec());
1743:       assertFalse(node0.equals((Object)node1));
1744:       assertFalse(node0.equals((Object)node3));
1745:       assertFalse(node4.equals((Object)node3));
1746:       assertFalse(node4.equals((Object)node2));
1747:       assertFalse(node4.equals((Object)node0));
1748:       assertFalse(node4.equals((Object)node1));
1749:       assertEquals(37, Node.OPT_ARG_NAME);
1750:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1751:       assertEquals(2, Node.POST_FLAG);
1752:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1753:       assertEquals(29, Node.JSDOC_INFO_PROP);
1754:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1755:       assertEquals(49, Node.DIRECT_EVAL);
1756:       assertEquals(46, Node.IS_NAMESPACE);
1757:       assertEquals(56, Node.CHANGE_TIME);
1758:       assertEquals(36, Node.QUOTED_PROP);
1759:       assertEquals(52, Node.LENGTH);
1760:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1761:       assertEquals(53, Node.INPUT_ID);
1762:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1763:       assertEquals(30, Node.VAR_ARGS_NAME);
1764:       assertEquals(57, Node.LAST_PROP);
1765:       assertEquals(47, Node.IS_DISPATCHER);
1766:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1767:       assertEquals(8, Node.FLAG_NO_THROWS);
1768:       assertEquals(39, Node.EMPTY_BLOCK);
1769:       assertEquals(48, Node.DIRECTIVES);
1770:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1771:       assertEquals(4095, Node.COLUMN_MASK);
1772:       assertEquals(55, Node.INFERRED_FUNCTION);
1773:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1774:       assertEquals(40, Node.ORIGINALNAME_PROP);
1775:       assertEquals(50, Node.FREE_CALL);
1776:       assertEquals(43, Node.IS_CONSTANT_NAME);
1777:       assertEquals(57, Node.REFLECTED_OBJECT);
1778:       assertEquals(54, Node.SLASH_V);
1779:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1780:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1781:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1782:       assertEquals(1, Node.DECR_FLAG);
1783:       assertEquals(32, Node.INCRDECR_PROP);
1784:       assertEquals(12, Node.COLUMN_BITS);
1785:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1786:       assertEquals(50, Node.FREE_CALL);
1787:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1788:       assertEquals(57, Node.REFLECTED_OBJECT);
1789:       assertEquals(52, Node.LENGTH);
1790:       assertEquals(8, Node.FLAG_NO_THROWS);
1791:       assertEquals(55, Node.INFERRED_FUNCTION);
1792:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1793:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1794:       assertEquals(39, Node.EMPTY_BLOCK);
1795:       assertEquals(49, Node.DIRECT_EVAL);
1796:       assertEquals(1, Node.DECR_FLAG);
1797:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1798:       assertEquals(36, Node.QUOTED_PROP);
1799:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1800:       assertEquals(12, Node.COLUMN_BITS);
1801:       assertEquals(48, Node.DIRECTIVES);
1802:       assertEquals(4095, Node.COLUMN_MASK);
1803:       assertEquals(37, Node.OPT_ARG_NAME);
1804:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1805:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1806:       assertEquals(29, Node.JSDOC_INFO_PROP);
1807:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1808:       assertEquals(2, Node.POST_FLAG);
1809:       assertEquals(56, Node.CHANGE_TIME);
1810:       assertEquals(47, Node.IS_DISPATCHER);
1811:       assertEquals(32, Node.INCRDECR_PROP);
1812:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1813:       assertEquals(53, Node.INPUT_ID);
1814:       assertEquals(30, Node.VAR_ARGS_NAME);
1815:       assertEquals(57, Node.LAST_PROP);
1816:       assertEquals(43, Node.IS_CONSTANT_NAME);
1817:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1818:       assertEquals(46, Node.IS_NAMESPACE);
1819:       assertEquals(54, Node.SLASH_V);
1820:       assertEquals(40, Node.ORIGINALNAME_PROP);
1821:       assertNotNull(node4);
1822:       
1823:       int int0 = node1.getSideEffectFlags();
1824:       assertSame(node0, node2);
1825:       assertNotSame(node0, node4);
1826:       assertFalse(node0.isNE());
1827:       assertFalse(node0.isIf());
1828:       assertFalse(node0.isFor());
1829:       assertFalse(node0.isGetterDef());
1830:       assertFalse(node0.isDelProp());
1831:       assertFalse(node0.isArrayLit());
1832:       assertFalse(node0.isSwitch());
1833:       assertFalse(node0.isRegExp());
1834:       assertEquals((-479), node0.getType());
1835:       assertFalse(node0.isString());
1836:       assertFalse(node0.isHook());
1837:       assertFalse(node0.isDebugger());
1838:       assertEquals((-1), node0.getCharno());
1839:       assertFalse(node0.isTry());
1840:       assertFalse(node0.isCase());
1841:       assertFalse(node0.isThis());
1842:       assertFalse(node0.isSetterDef());
1843:       assertFalse(node0.isCatch());
1844:       assertFalse(node0.isFalse());
1845:       assertFalse(node0.isInstanceOf());
1846:       assertFalse(node0.isAnd());
1847:       assertFalse(node0.isInc());
1848:       assertFalse(node0.isFunction());
1849:       assertFalse(node0.isIn());
1850:       assertFalse(node0.isThrow());
1851:       assertFalse(node0.isTypeOf());
1852:       assertFalse(node0.isNumber());
1853:       assertFalse(node0.isAssign());
1854:       assertFalse(node0.isOr());
1855:       assertFalse(node0.isReturn());
1856:       assertFalse(node0.isDec());
1857:       assertFalse(node0.hasChildren());
1858:       assertFalse(node0.isLabel());
1859:       assertEquals((-1), node0.getSourcePosition());
1860:       assertFalse(node0.hasMoreThanOneChild());
1861:       assertFalse(node0.isCast());
1862:       assertFalse(node0.isContinue());
1863:       assertFalse(node0.isLabelName());
1864:       assertFalse(node0.isGetElem());
1865:       assertEquals((-1), node0.getLineno());
1866:       assertFalse(node0.isExprResult());
1867:       assertFalse(node0.isScript());
1868:       assertFalse(node0.isWhile());
1869:       assertFalse(node0.isNot());
1870:       assertFalse(node0.isWith());
1871:       assertFalse(node0.isBlock());
1872:       assertFalse(node0.isObjectLit());
1873:       assertFalse(node0.isGetProp());
1874:       assertFalse(node0.hasOneChild());
1875:       assertFalse(node0.isComma());
1876:       assertFalse(node0.isNull());
1877:       assertFalse(node0.isParamList());
1878:       assertEquals(0, node0.getChildCount());
1879:       assertFalse(node0.isCall());
1880:       assertFalse(node0.isStringKey());
1881:       assertFalse(node0.isName());
1882:       assertFalse(node0.isBreak());
1883:       assertFalse(node0.isVoid());
1884:       assertFalse(node0.isTrue());
1885:       assertFalse(node0.isDefaultCase());
1886:       assertFalse(node0.isVar());
1887:       assertFalse(node0.isEmpty());
1888:       assertFalse(node0.isDo());
1889:       assertFalse(node0.isAssignAdd());
1890:       assertFalse(node0.isAdd());
1891:       assertFalse(node0.isNew());
1892:       assertFalse(node1.isDo());
1893:       assertFalse(node1.isWhile());
1894:       assertFalse(node1.isAssignAdd());
1895:       assertFalse(node1.isBlock());
1896:       assertFalse(node1.isReturn());
1897:       assertEquals((-1), node1.getLineno());
1898:       assertFalse(node1.isLabel());
1899:       assertFalse(node1.isTypeOf());
1900:       assertFalse(node1.isDec());
1901:       assertFalse(node1.hasMoreThanOneChild());
1902:       assertFalse(node1.isContinue());
1903:       assertFalse(node1.isStringKey());
1904:       assertFalse(node1.isAssign());
1905:       assertFalse(node1.isLabelName());
1906:       assertFalse(node1.isParamList());
1907:       assertFalse(node1.isNumber());
1908:       assertEquals((-1), node1.getSourcePosition());
1909:       assertFalse(node1.isScript());
1910:       assertFalse(node1.isDefaultCase());
1911:       assertFalse(node1.isVoid());
1912:       assertFalse(node1.isExprResult());
1913:       assertFalse(node1.isComma());
1914:       assertFalse(node1.isGetElem());
1915:       assertFalse(node1.isName());
1916:       assertFalse(node1.isEmpty());
1917:       assertFalse(node1.isCall());
1918:       assertFalse(node1.isBreak());
1919:       assertFalse(node1.isNull());
1920:       assertFalse(node1.isDelProp());
1921:       assertFalse(node1.isVar());
1922:       assertFalse(node1.isNew());
1923:       assertFalse(node1.isAdd());
1924:       assertFalse(node1.isOr());
1925:       assertFalse(node1.isTrue());
1926:       assertFalse(node1.isCase());
1927:       assertFalse(node1.isSwitch());
1928:       assertTrue(node1.hasChildren());
1929:       assertEquals(1, node1.getChildCount());
1930:       assertFalse(node1.isFor());
1931:       assertTrue(node1.hasOneChild());
1932:       assertFalse(node1.isArrayLit());
1933:       assertFalse(node1.isHook());
1934:       assertFalse(node1.isTry());
1935:       assertFalse(node1.isDebugger());
1936:       assertFalse(node1.isGetProp());
1937:       assertEquals((-1), node1.getCharno());
1938:       assertFalse(node1.isGetterDef());
1939:       assertFalse(node1.isString());
1940:       assertFalse(node1.isNot());
1941:       assertFalse(node1.isObjectLit());
1942:       assertFalse(node1.isAnd());
1943:       assertEquals(4095, node1.getType());
1944:       assertFalse(node1.isThis());
1945:       assertFalse(node1.isInstanceOf());
1946:       assertFalse(node1.isCast());
1947:       assertFalse(node1.isRegExp());
1948:       assertFalse(node1.isWith());
1949:       assertFalse(node1.isCatch());
1950:       assertFalse(node1.isFunction());
1951:       assertFalse(node1.isFalse());
1952:       assertFalse(node1.isThrow());
1953:       assertFalse(node1.isNE());
1954:       assertFalse(node1.isIf());
1955:       assertFalse(node1.isInc());
1956:       assertFalse(node1.isSetterDef());
1957:       assertFalse(node1.isIn());
1958:       assertFalse(node0.equals((Object)node1));
1959:       assertFalse(node0.equals((Object)node3));
1960:       assertFalse(node0.equals((Object)node4));
1961:       assertFalse(node1.equals((Object)node3));
1962:       assertFalse(node1.equals((Object)node4));
1963:       assertFalse(node1.equals((Object)node0));
1964:       assertFalse(node1.equals((Object)node2));
1965:       assertEquals(0, int0);
1966:       assertEquals(37, Node.OPT_ARG_NAME);
1967:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1968:       assertEquals(2, Node.POST_FLAG);
1969:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1970:       assertEquals(29, Node.JSDOC_INFO_PROP);
1971:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1972:       assertEquals(49, Node.DIRECT_EVAL);
1973:       assertEquals(46, Node.IS_NAMESPACE);
1974:       assertEquals(56, Node.CHANGE_TIME);
1975:       assertEquals(36, Node.QUOTED_PROP);
1976:       assertEquals(52, Node.LENGTH);
1977:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1978:       assertEquals(53, Node.INPUT_ID);
1979:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1980:       assertEquals(30, Node.VAR_ARGS_NAME);
1981:       assertEquals(57, Node.LAST_PROP);
1982:       assertEquals(47, Node.IS_DISPATCHER);
1983:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1984:       assertEquals(8, Node.FLAG_NO_THROWS);
1985:       assertEquals(39, Node.EMPTY_BLOCK);
1986:       assertEquals(48, Node.DIRECTIVES);
1987:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1988:       assertEquals(4095, Node.COLUMN_MASK);
1989:       assertEquals(55, Node.INFERRED_FUNCTION);
1990:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1991:       assertEquals(40, Node.ORIGINALNAME_PROP);
1992:       assertEquals(50, Node.FREE_CALL);
1993:       assertEquals(43, Node.IS_CONSTANT_NAME);
1994:       assertEquals(57, Node.REFLECTED_OBJECT);
1995:       assertEquals(54, Node.SLASH_V);
1996:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1997:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1998:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1999:       assertEquals(1, Node.DECR_FLAG);
2000:       assertEquals(32, Node.INCRDECR_PROP);
2001:       assertEquals(12, Node.COLUMN_BITS);
2002:       assertEquals(49, Node.DIRECT_EVAL);
2003:       assertEquals(57, Node.LAST_PROP);
2004:       assertEquals(12, Node.COLUMN_BITS);
2005:       assertEquals(30, Node.VAR_ARGS_NAME);
2006:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2007:       assertEquals(46, Node.IS_NAMESPACE);
2008:       assertEquals(54, Node.SLASH_V);
2009:       assertEquals(37, Node.OPT_ARG_NAME);
2010:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2011:       assertEquals(29, Node.JSDOC_INFO_PROP);
2012:       assertEquals(40, Node.ORIGINALNAME_PROP);
2013:       assertEquals(56, Node.CHANGE_TIME);
2014:       assertEquals(2, Node.POST_FLAG);
2015:       assertEquals(8, Node.FLAG_NO_THROWS);
2016:       assertEquals(47, Node.IS_DISPATCHER);
2017:       assertEquals(57, Node.REFLECTED_OBJECT);
2018:       assertEquals(52, Node.LENGTH);
2019:       assertEquals(53, Node.INPUT_ID);
2020:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2021:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2022:       assertEquals(39, Node.EMPTY_BLOCK);
2023:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2024:       assertEquals(55, Node.INFERRED_FUNCTION);
2025:       assertEquals(43, Node.IS_CONSTANT_NAME);
2026:       assertEquals(4095, Node.COLUMN_MASK);
2027:       assertEquals(36, Node.QUOTED_PROP);
2028:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2029:       assertEquals(48, Node.DIRECTIVES);
2030:       assertEquals(50, Node.FREE_CALL);
2031:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2032:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2033:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2034:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2035:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2036:       assertEquals(32, Node.INCRDECR_PROP);
2037:       assertEquals(1, Node.DECR_FLAG);
2038:       
2039:       // Undeclared exception!
2040:       try { 
2041:         node2.toStringTree();
2042:         fail("Expecting exception: IllegalStateException");
2043:       
2044:       } catch(IllegalStateException e) {
2045:          //
2046:          // -479
2047:          //
2048:          verifyException("com.google.javascript.rhino.Token", e);
2049:       }
2050:   }
2051: }
RegularFileObject[/tmp/EvoSuite_351_1628158428846/com/google/javascript/rhino/Node_351_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:13:49 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_351_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_351_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.VoidType",
121:       "com.google.common.base.Joiner",
122:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
123:       "com.google.common.collect.AbstractListMultimap",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.javascript.rhino.jstype.ProxyObjectType",
128:       "com.google.common.collect.Sets$SetView",
129:       "com.google.common.collect.RegularImmutableAsList",
130:       "com.google.javascript.rhino.jstype.TemplateType",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.javascript.rhino.JSDocInfo$1",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
206:       "com.google.common.collect.Iterators$1",
207:       "com.google.common.collect.Iterators$2",
208:       "com.google.javascript.rhino.jstype.NamespaceType",
209:       "com.google.common.collect.Iterators$3",
210:       "com.google.common.collect.Sets",
211:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
212:       "com.google.javascript.rhino.Node$ObjectPropListItem",
213:       "com.google.common.collect.Lists$StringAsImmutableList",
214:       "com.google.common.collect.Lists$2",
215:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
216:       "com.google.common.collect.ImmutableList$Builder",
217:       "com.google.common.collect.Lists$1",
218:       "com.google.javascript.rhino.jstype.StaticReference",
219:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
220:       "com.google.common.collect.Multiset",
221:       "com.google.common.collect.AbstractMultimap",
222:       "com.google.common.collect.Multimap",
223:       "com.google.common.collect.Iterators",
224:       "com.google.common.collect.Maps$ImprovedAbstractMap",
225:       "com.google.common.collect.ImmutableBiMap",
226:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
228:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
229:       "com.google.common.collect.ImmutableList",
230:       "com.google.common.collect.SingletonImmutableBiMap",
231:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
232:       "com.google.javascript.rhino.jstype.StringType",
233:       "com.google.javascript.rhino.Node$AbstractPropListItem",
234:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
235:       "com.google.javascript.rhino.jstype.TemplatizedType",
236:       "com.google.javascript.rhino.jstype.Visitor",
237:       "com.google.javascript.rhino.jstype.NoResolvedType",
238:       "com.google.javascript.rhino.jstype.JSTypeNative",
239:       "com.google.javascript.rhino.jstype.AllType",
240:       "com.google.common.collect.Maps",
241:       "com.google.common.collect.SetMultimap",
242:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
243:       "com.google.common.collect.Maps$EntryTransformer",
244:       "com.google.javascript.rhino.JSTypeExpression",
245:       "com.google.common.collect.Iterators$MergingIterator"
246:     );
247:   } 
248: 
249:   private static void resetClasses() {
250:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_351_tmp__ESTest_scaffolding.class.getClassLoader()); 
251: 
252:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
253:       "com.google.javascript.rhino.Node",
254:       "com.google.javascript.rhino.Node$NumberNode",
255:       "com.google.javascript.rhino.Node$StringNode",
256:       "com.google.javascript.rhino.Node$AbstractPropListItem",
257:       "com.google.javascript.rhino.Node$ObjectPropListItem",
258:       "com.google.javascript.rhino.Node$IntPropListItem",
259:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
260:       "com.google.javascript.rhino.Node$AncestorIterable",
261:       "com.google.javascript.rhino.Node$NodeMismatch",
262:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
263:       "com.google.javascript.rhino.Node$SideEffectFlags",
264:       "com.google.javascript.rhino.Token",
265:       "com.google.common.base.Preconditions",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.JSDocInfo",
339:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.InputId",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
344:       "com.google.common.collect.Sets$ImprovedAbstractSet",
345:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
346:       "com.google.common.collect.Hashing",
347:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.common.collect.Iterables",
351:       "com.google.common.collect.AbstractIndexedListIterator",
352:       "com.google.common.collect.Iterators$11",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.javascript.rhino.Node$AncestorIterable$1",
356:       "com.google.javascript.rhino.jstype.TemplatizedType",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.javascript.rhino.JSTypeExpression",
361:       "com.google.common.collect.Iterators$12",
362:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
363:       "com.google.javascript.rhino.jstype.NamedType",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.common.collect.AbstractMultimap$Values",
366:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
367:       "com.google.common.collect.AbstractMapBasedMultimap$1",
368:       "com.google.common.collect.Multimaps$Entries",
369:       "com.google.common.collect.AbstractMultimap$Entries",
370:       "com.google.common.collect.AbstractMapBasedMultimap$2",
371:       "com.google.common.collect.ImmutableList$1",
372:       "com.google.common.collect.Platform",
373:       "com.google.javascript.rhino.jstype.JSType$TypePair",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
375:       "com.google.javascript.rhino.jstype.JSType$2"
376:     );
377:   }
378: }

[MASTER] 10:13:49.248 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.7, (-1891), 155);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotNull(node0);

Node node1 = new Node(4095, node0, node0, node0);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertEquals(4095, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.equals((Object)node0));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(node1);

Node node2 = node0.useSourceInfoFrom(node1);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertEquals(4095, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertEquals(39, node2.getType());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isContinue());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isName());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isLabelName());
assertFalse(node2.isFor());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isNE());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isThrow());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isReturn());
assertTrue(node2.isNumber());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertNotNull(node2);

Iterable<Node> iterable0 = node2.children();
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(iterable0.contains(node1));
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertEquals(4095, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertEquals(39, node2.getType());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isContinue());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isName());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isLabelName());
assertFalse(node2.isFor());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isNE());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isThrow());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isReturn());
assertTrue(node2.isNumber());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertNotNull(iterable0);

Node node3 = Node.newString("^", 2, 40);
assertFalse(node3.isCast());
assertFalse(node3.isGetElem());
assertFalse(node3.hasOneChild());
assertFalse(node3.isAssign());
assertFalse(node3.isNumber());
assertFalse(node3.isTypeOf());
assertFalse(node3.isScript());
assertFalse(node3.isDec());
assertFalse(node3.isLabel());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isContinue());
assertEquals(2, node3.getLineno());
assertFalse(node3.isLabelName());
assertEquals(8232, node3.getSourcePosition());
assertFalse(node3.isAnd());
assertFalse(node3.isCall());
assertFalse(node3.isVar());
assertFalse(node3.isAdd());
assertFalse(node3.isComma());
assertFalse(node3.isGetProp());
assertFalse(node3.isNew());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.isOr());
assertFalse(node3.isExprResult());
assertFalse(node3.isVoid());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isBreak());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertFalse(node3.isArrayLit());
assertFalse(node3.isGetterDef());
assertFalse(node3.isEmpty());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertFalse(node3.isFor());
assertFalse(node3.isTry());
assertEquals(40, node3.getType());
assertFalse(node3.isDefaultCase());
assertEquals(40, node3.getCharno());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertFalse(node3.isDebugger());
assertFalse(node3.isStringKey());
assertFalse(node3.isHook());
assertFalse(node3.isFalse());
assertFalse(node3.isInc());
assertFalse(node3.isThis());
assertFalse(node3.isSetterDef());
assertFalse(node3.isBlock());
assertTrue(node3.isString());
assertFalse(node3.isThrow());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotNull(node3);

node0.setType((-479));
assertSame(node0, node2);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertEquals((-479), node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);

node3.setLength(4);
assertFalse(node3.isCast());
assertFalse(node3.isGetElem());
assertFalse(node3.hasOneChild());
assertFalse(node3.isAssign());
assertFalse(node3.isNumber());
assertFalse(node3.isTypeOf());
assertFalse(node3.isScript());
assertFalse(node3.isDec());
assertFalse(node3.isLabel());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isContinue());
assertEquals(2, node3.getLineno());
assertFalse(node3.isLabelName());
assertEquals(8232, node3.getSourcePosition());
assertFalse(node3.isAnd());
assertFalse(node3.isCall());
assertFalse(node3.isVar());
assertFalse(node3.isAdd());
assertFalse(node3.isComma());
assertFalse(node3.isGetProp());
assertFalse(node3.isNew());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.isOr());
assertFalse(node3.isExprResult());
assertFalse(node3.isVoid());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isBreak());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertFalse(node3.isArrayLit());
assertFalse(node3.isGetterDef());
assertFalse(node3.isEmpty());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertFalse(node3.isFor());
assertFalse(node3.isTry());
assertEquals(40, node3.getType());
assertFalse(node3.isDefaultCase());
assertEquals(40, node3.getCharno());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertFalse(node3.isDebugger());
assertFalse(node3.isStringKey());
assertFalse(node3.isHook());
assertFalse(node3.isFalse());
assertFalse(node3.isInc());
assertFalse(node3.isThis());
assertFalse(node3.isSetterDef());
assertFalse(node3.isBlock());
assertTrue(node3.isString());
assertFalse(node3.isThrow());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

node1.putBooleanProp(1, true);
assertSame(node0, node2);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertEquals((-479), node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertEquals(4095, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

boolean boolean0 = node0.isUnscopedQualifiedName();
assertSame(node0, node2);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertEquals((-479), node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(boolean0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);

Node node4 = node0.cloneNode();
assertSame(node0, node2);
assertNotSame(node0, node4);
assertNotSame(node4, node2);
assertNotSame(node4, node0);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertEquals((-479), node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isBreak());
assertFalse(node4.isGetProp());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isInc());
assertFalse(node4.isObjectLit());
assertFalse(node4.isAnd());
assertFalse(node4.isSwitch());
assertFalse(node4.isFor());
assertFalse(node4.isArrayLit());
assertFalse(node4.hasOneChild());
assertFalse(node4.isIf());
assertFalse(node4.isLabelName());
assertFalse(node4.isTry());
assertFalse(node4.isScript());
assertFalse(node4.isNE());
assertFalse(node4.isNumber());
assertFalse(node4.isIn());
assertFalse(node4.isGetterDef());
assertFalse(node4.isCase());
assertFalse(node4.isWith());
assertFalse(node4.isCatch());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isBlock());
assertFalse(node4.isThis());
assertFalse(node4.isHook());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isRegExp());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isName());
assertFalse(node4.isStringKey());
assertFalse(node4.isCall());
assertFalse(node4.isVar());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isParamList());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNull());
assertFalse(node4.isContinue());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isDo());
assertFalse(node4.isLabel());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isFunction());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isGetElem());
assertFalse(node4.isEmpty());
assertFalse(node4.isCast());
assertFalse(node4.isDelProp());
assertFalse(node4.isTrue());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isDebugger());
assertFalse(node4.isNot());
assertFalse(node4.isOr());
assertFalse(node4.isString());
assertFalse(node4.isWhile());
assertFalse(node4.isVoid());
assertFalse(node4.isExprResult());
assertFalse(node4.isReturn());
assertEquals((-479), node4.getType());
assertFalse(node4.isTypeOf());
assertFalse(node4.hasChildren());
assertFalse(node4.isComma());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node4);

int int0 = node1.getSideEffectFlags();
assertSame(node0, node2);
assertNotSame(node0, node4);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertEquals((-479), node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertEquals(4095, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(0, int0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

node2.toStringTree();

[MASTER] 10:14:10.804 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:11.102 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:11.438 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:11.701 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:11.933 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:12.136 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:12.350 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:12.553 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:12.756 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:12.988 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:13.233 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:13.428 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:13.642 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:13.904 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:14.144 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:14.381 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:14.600 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:14.780 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:15.624 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:15.818 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:16.022 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:16.217 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:16.422 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:16.639 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:14:16.827 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/9
* Done!

* Computation finished
