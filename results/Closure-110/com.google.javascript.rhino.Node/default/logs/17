* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 6109
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 4092599175
* Starting evolution
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:23:33.361 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:23:39.630 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class com.google.javascript.rhino.jstype.UnionType canUseFunctionalMocks=false, canBeMocked: true
[MASTER] 10:23:40.607 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:24:16.519 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 10:25:09.472 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.jstype.TemplateTypeMapReplacer due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 10:26:20.061 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 605s and 772 generations, 296942 statements, best individual has fitness: 2689.0
* Minimizing test suite
[MASTER] 10:35:05.992 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 96%
* Total number of goals: 853
* Number of covered goals: 819
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 714
* Number of covered goals: 653
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 105
* Number of covered goals: 105
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 92%
* Total number of goals: 530
* Number of covered goals: 487
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 4536
* Number of covered goals: 2263
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 85%
* Total number of goals: 714
* Number of covered goals: 604
* Generated 1223 tests with total length 11780
* Resulting test suite's coverage: 79% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:36:20.716 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6715833333333333% of time used, but only 66/1223 tests minimized), falling back to using all assertions
[MASTER] 10:36:40.457 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 14%
* Compiling and checking tests
[MASTER] 10:36:53.980 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 13 seconds more than allowed.
[MASTER] 10:36:58.511 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_92_1628159818399/com/google/javascript/rhino/Node_92_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_92_1628159818399/com/google/javascript/rhino/Node_92_tmp__ESTest_scaffolding.java]]
[MASTER] 10:36:58.511 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:36:58.511 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:36:58.514 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 129
[MASTER] 10:36:58.516 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_92_1628159818399/com/google/javascript/rhino/Node_92_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:36:58 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.testdata.EvoSuiteFile;
15: import org.evosuite.runtime.testdata.FileSystemHandling;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_92_tmp__ESTest extends Node_92_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = Node.newNumber(950.1923499633118);
24:       assertNotNull(node0);
25:       assertFalse(node0.isHook());
26:       assertFalse(node0.isInc());
27:       assertFalse(node0.isBreak());
28:       assertFalse(node0.isSwitch());
29:       assertFalse(node0.isString());
30:       assertEquals((-1), node0.getCharno());
31:       assertFalse(node0.isInstanceOf());
32:       assertFalse(node0.isGetProp());
33:       assertTrue(node0.isNumber());
34:       assertFalse(node0.isCase());
35:       assertFalse(node0.isWith());
36:       assertFalse(node0.isFor());
37:       assertFalse(node0.isThis());
38:       assertFalse(node0.isComma());
39:       assertFalse(node0.hasOneChild());
40:       assertFalse(node0.isGetElem());
41:       assertFalse(node0.isEmpty());
42:       assertFalse(node0.isLabelName());
43:       assertFalse(node0.isTry());
44:       assertFalse(node0.isExprResult());
45:       assertFalse(node0.isVoid());
46:       assertFalse(node0.isArrayLit());
47:       assertFalse(node0.isDelProp());
48:       assertFalse(node0.isScript());
49:       assertFalse(node0.isGetterDef());
50:       assertFalse(node0.isTrue());
51:       assertFalse(node0.isOr());
52:       assertEquals(0, node0.getChildCount());
53:       assertFalse(node0.isAssignAdd());
54:       assertFalse(node0.isDo());
55:       assertFalse(node0.isDefaultCase());
56:       assertFalse(node0.isLabel());
57:       assertFalse(node0.isVar());
58:       assertFalse(node0.isNew());
59:       assertFalse(node0.isName());
60:       assertFalse(node0.isAdd());
61:       assertFalse(node0.isCall());
62:       assertFalse(node0.isNull());
63:       assertFalse(node0.isParamList());
64:       assertFalse(node0.isStringKey());
65:       assertFalse(node0.isCatch());
66:       assertFalse(node0.hasMoreThanOneChild());
67:       assertEquals((-1), node0.getLineno());
68:       assertFalse(node0.isDec());
69:       assertFalse(node0.isRegExp());
70:       assertFalse(node0.isTypeOf());
71:       assertFalse(node0.isWhile());
72:       assertFalse(node0.isBlock());
73:       assertFalse(node0.isAssign());
74:       assertEquals(39, node0.getType());
75:       assertFalse(node0.isReturn());
76:       assertFalse(node0.hasChildren());
77:       assertFalse(node0.isCast());
78:       assertFalse(node0.isNE());
79:       assertFalse(node0.isIf());
80:       assertFalse(node0.isNot());
81:       assertFalse(node0.isObjectLit());
82:       assertEquals((-1), node0.getSourcePosition());
83:       assertFalse(node0.isDebugger());
84:       assertFalse(node0.isIn());
85:       assertFalse(node0.isContinue());
86:       assertFalse(node0.isAnd());
87:       assertFalse(node0.isSetterDef());
88:       assertFalse(node0.isFunction());
89:       assertFalse(node0.isThrow());
90:       assertFalse(node0.isFalse());
91:       assertEquals(52, Node.LENGTH);
92:       assertEquals(57, Node.REFLECTED_OBJECT);
93:       assertEquals(54, Node.SLASH_V);
94:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
95:       assertEquals(50, Node.FREE_CALL);
96:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
97:       assertEquals(40, Node.ORIGINALNAME_PROP);
98:       assertEquals(48, Node.DIRECTIVES);
99:       assertEquals(49, Node.DIRECT_EVAL);
100:       assertEquals(32, Node.INCRDECR_PROP);
101:       assertEquals(46, Node.IS_NAMESPACE);
102:       assertEquals(12, Node.COLUMN_BITS);
103:       assertEquals(4095, Node.COLUMN_MASK);
104:       assertEquals(51, Node.STATIC_SOURCE_FILE);
105:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
106:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
107:       assertEquals(1, Node.DECR_FLAG);
108:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
109:       assertEquals(53, Node.INPUT_ID);
110:       assertEquals(36, Node.QUOTED_PROP);
111:       assertEquals(43, Node.IS_CONSTANT_NAME);
112:       assertEquals(56, Node.CHANGE_TIME);
113:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
114:       assertEquals(37, Node.OPT_ARG_NAME);
115:       assertEquals(55, Node.INFERRED_FUNCTION);
116:       assertEquals(8, Node.FLAG_NO_THROWS);
117:       assertEquals(2, Node.POST_FLAG);
118:       assertEquals(30, Node.VAR_ARGS_NAME);
119:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
120:       assertEquals(15, Node.NO_SIDE_EFFECTS);
121:       assertEquals(57, Node.LAST_PROP);
122:       assertEquals(47, Node.IS_DISPATCHER);
123:       assertEquals(29, Node.JSDOC_INFO_PROP);
124:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
125:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
126:       assertEquals(39, Node.EMPTY_BLOCK);
127:       
128:       Iterable<Node> iterable0 = node0.children();
129:       assertFalse(iterable0.contains(node0));
130:       assertNotNull(iterable0);
131:       assertFalse(node0.isHook());
132:       assertFalse(node0.isInc());
133:       assertFalse(node0.isBreak());
134:       assertFalse(node0.isSwitch());
135:       assertFalse(node0.isString());
136:       assertEquals((-1), node0.getCharno());
137:       assertFalse(node0.isInstanceOf());
138:       assertFalse(node0.isGetProp());
139:       assertTrue(node0.isNumber());
140:       assertFalse(node0.isCase());
141:       assertFalse(node0.isWith());
142:       assertFalse(node0.isFor());
143:       assertFalse(node0.isThis());
144:       assertFalse(node0.isComma());
145:       assertFalse(node0.hasOneChild());
146:       assertFalse(node0.isGetElem());
147:       assertFalse(node0.isEmpty());
148:       assertFalse(node0.isLabelName());
149:       assertFalse(node0.isTry());
150:       assertFalse(node0.isExprResult());
151:       assertFalse(node0.isVoid());
152:       assertFalse(node0.isArrayLit());
153:       assertFalse(node0.isDelProp());
154:       assertFalse(node0.isScript());
155:       assertFalse(node0.isGetterDef());
156:       assertFalse(node0.isTrue());
157:       assertFalse(node0.isOr());
158:       assertEquals(0, node0.getChildCount());
159:       assertFalse(node0.isAssignAdd());
160:       assertFalse(node0.isDo());
161:       assertFalse(node0.isDefaultCase());
162:       assertFalse(node0.isLabel());
163:       assertFalse(node0.isVar());
164:       assertFalse(node0.isNew());
165:       assertFalse(node0.isName());
166:       assertFalse(node0.isAdd());
167:       assertFalse(node0.isCall());
168:       assertFalse(node0.isNull());
169:       assertFalse(node0.isParamList());
170:       assertFalse(node0.isStringKey());
171:       assertFalse(node0.isCatch());
172:       assertFalse(node0.hasMoreThanOneChild());
173:       assertEquals((-1), node0.getLineno());
174:       assertFalse(node0.isDec());
175:       assertFalse(node0.isRegExp());
176:       assertFalse(node0.isTypeOf());
177:       assertFalse(node0.isWhile());
178:       assertFalse(node0.isBlock());
179:       assertFalse(node0.isAssign());
180:       assertEquals(39, node0.getType());
181:       assertFalse(node0.isReturn());
182:       assertFalse(node0.hasChildren());
183:       assertFalse(node0.isCast());
184:       assertFalse(node0.isNE());
185:       assertFalse(node0.isIf());
186:       assertFalse(node0.isNot());
187:       assertFalse(node0.isObjectLit());
188:       assertEquals((-1), node0.getSourcePosition());
189:       assertFalse(node0.isDebugger());
190:       assertFalse(node0.isIn());
191:       assertFalse(node0.isContinue());
192:       assertFalse(node0.isAnd());
193:       assertFalse(node0.isSetterDef());
194:       assertFalse(node0.isFunction());
195:       assertFalse(node0.isThrow());
196:       assertFalse(node0.isFalse());
197:       assertEquals(52, Node.LENGTH);
198:       assertEquals(57, Node.REFLECTED_OBJECT);
199:       assertEquals(54, Node.SLASH_V);
200:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
201:       assertEquals(50, Node.FREE_CALL);
202:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
203:       assertEquals(40, Node.ORIGINALNAME_PROP);
204:       assertEquals(48, Node.DIRECTIVES);
205:       assertEquals(49, Node.DIRECT_EVAL);
206:       assertEquals(32, Node.INCRDECR_PROP);
207:       assertEquals(46, Node.IS_NAMESPACE);
208:       assertEquals(12, Node.COLUMN_BITS);
209:       assertEquals(4095, Node.COLUMN_MASK);
210:       assertEquals(51, Node.STATIC_SOURCE_FILE);
211:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
212:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
213:       assertEquals(1, Node.DECR_FLAG);
214:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
215:       assertEquals(53, Node.INPUT_ID);
216:       assertEquals(36, Node.QUOTED_PROP);
217:       assertEquals(43, Node.IS_CONSTANT_NAME);
218:       assertEquals(56, Node.CHANGE_TIME);
219:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
220:       assertEquals(37, Node.OPT_ARG_NAME);
221:       assertEquals(55, Node.INFERRED_FUNCTION);
222:       assertEquals(8, Node.FLAG_NO_THROWS);
223:       assertEquals(2, Node.POST_FLAG);
224:       assertEquals(30, Node.VAR_ARGS_NAME);
225:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
226:       assertEquals(15, Node.NO_SIDE_EFFECTS);
227:       assertEquals(57, Node.LAST_PROP);
228:       assertEquals(47, Node.IS_DISPATCHER);
229:       assertEquals(29, Node.JSDOC_INFO_PROP);
230:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
231:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
232:       assertEquals(39, Node.EMPTY_BLOCK);
233:       
234:       int int0 = node0.getIntProp(120);
235:       assertEquals(0, int0);
236:       assertFalse(node0.isHook());
237:       assertFalse(node0.isInc());
238:       assertFalse(node0.isBreak());
239:       assertFalse(node0.isSwitch());
240:       assertFalse(node0.isString());
241:       assertEquals((-1), node0.getCharno());
242:       assertFalse(node0.isInstanceOf());
243:       assertFalse(node0.isGetProp());
244:       assertTrue(node0.isNumber());
245:       assertFalse(node0.isCase());
246:       assertFalse(node0.isWith());
247:       assertFalse(node0.isFor());
248:       assertFalse(node0.isThis());
249:       assertFalse(node0.isComma());
250:       assertFalse(node0.hasOneChild());
251:       assertFalse(node0.isGetElem());
252:       assertFalse(node0.isEmpty());
253:       assertFalse(node0.isLabelName());
254:       assertFalse(node0.isTry());
255:       assertFalse(node0.isExprResult());
256:       assertFalse(node0.isVoid());
257:       assertFalse(node0.isArrayLit());
258:       assertFalse(node0.isDelProp());
259:       assertFalse(node0.isScript());
260:       assertFalse(node0.isGetterDef());
261:       assertFalse(node0.isTrue());
262:       assertFalse(node0.isOr());
263:       assertEquals(0, node0.getChildCount());
264:       assertFalse(node0.isAssignAdd());
265:       assertFalse(node0.isDo());
266:       assertFalse(node0.isDefaultCase());
267:       assertFalse(node0.isLabel());
268:       assertFalse(node0.isVar());
269:       assertFalse(node0.isNew());
270:       assertFalse(node0.isName());
271:       assertFalse(node0.isAdd());
272:       assertFalse(node0.isCall());
273:       assertFalse(node0.isNull());
274:       assertFalse(node0.isParamList());
275:       assertFalse(node0.isStringKey());
276:       assertFalse(node0.isCatch());
277:       assertFalse(node0.hasMoreThanOneChild());
278:       assertEquals((-1), node0.getLineno());
279:       assertFalse(node0.isDec());
280:       assertFalse(node0.isRegExp());
281:       assertFalse(node0.isTypeOf());
282:       assertFalse(node0.isWhile());
283:       assertFalse(node0.isBlock());
284:       assertFalse(node0.isAssign());
285:       assertEquals(39, node0.getType());
286:       assertFalse(node0.isReturn());
287:       assertFalse(node0.hasChildren());
288:       assertFalse(node0.isCast());
289:       assertFalse(node0.isNE());
290:       assertFalse(node0.isIf());
291:       assertFalse(node0.isNot());
292:       assertFalse(node0.isObjectLit());
293:       assertEquals((-1), node0.getSourcePosition());
294:       assertFalse(node0.isDebugger());
295:       assertFalse(node0.isIn());
296:       assertFalse(node0.isContinue());
297:       assertFalse(node0.isAnd());
298:       assertFalse(node0.isSetterDef());
299:       assertFalse(node0.isFunction());
300:       assertFalse(node0.isThrow());
301:       assertFalse(node0.isFalse());
302:       assertEquals(52, Node.LENGTH);
303:       assertEquals(57, Node.REFLECTED_OBJECT);
304:       assertEquals(54, Node.SLASH_V);
305:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
306:       assertEquals(50, Node.FREE_CALL);
307:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
308:       assertEquals(40, Node.ORIGINALNAME_PROP);
309:       assertEquals(48, Node.DIRECTIVES);
310:       assertEquals(49, Node.DIRECT_EVAL);
311:       assertEquals(32, Node.INCRDECR_PROP);
312:       assertEquals(46, Node.IS_NAMESPACE);
313:       assertEquals(12, Node.COLUMN_BITS);
314:       assertEquals(4095, Node.COLUMN_MASK);
315:       assertEquals(51, Node.STATIC_SOURCE_FILE);
316:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
317:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
318:       assertEquals(1, Node.DECR_FLAG);
319:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
320:       assertEquals(53, Node.INPUT_ID);
321:       assertEquals(36, Node.QUOTED_PROP);
322:       assertEquals(43, Node.IS_CONSTANT_NAME);
323:       assertEquals(56, Node.CHANGE_TIME);
324:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
325:       assertEquals(37, Node.OPT_ARG_NAME);
326:       assertEquals(55, Node.INFERRED_FUNCTION);
327:       assertEquals(8, Node.FLAG_NO_THROWS);
328:       assertEquals(2, Node.POST_FLAG);
329:       assertEquals(30, Node.VAR_ARGS_NAME);
330:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
331:       assertEquals(15, Node.NO_SIDE_EFFECTS);
332:       assertEquals(57, Node.LAST_PROP);
333:       assertEquals(47, Node.IS_DISPATCHER);
334:       assertEquals(29, Node.JSDOC_INFO_PROP);
335:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
336:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
337:       assertEquals(39, Node.EMPTY_BLOCK);
338:       
339:       boolean boolean0 = node0.isOr();
340:       assertFalse(boolean0);
341:       assertFalse(node0.isHook());
342:       assertFalse(node0.isInc());
343:       assertFalse(node0.isBreak());
344:       assertFalse(node0.isSwitch());
345:       assertFalse(node0.isString());
346:       assertEquals((-1), node0.getCharno());
347:       assertFalse(node0.isInstanceOf());
348:       assertFalse(node0.isGetProp());
349:       assertTrue(node0.isNumber());
350:       assertFalse(node0.isCase());
351:       assertFalse(node0.isWith());
352:       assertFalse(node0.isFor());
353:       assertFalse(node0.isThis());
354:       assertFalse(node0.isComma());
355:       assertFalse(node0.hasOneChild());
356:       assertFalse(node0.isGetElem());
357:       assertFalse(node0.isEmpty());
358:       assertFalse(node0.isLabelName());
359:       assertFalse(node0.isTry());
360:       assertFalse(node0.isExprResult());
361:       assertFalse(node0.isVoid());
362:       assertFalse(node0.isArrayLit());
363:       assertFalse(node0.isDelProp());
364:       assertFalse(node0.isScript());
365:       assertFalse(node0.isGetterDef());
366:       assertFalse(node0.isTrue());
367:       assertFalse(node0.isOr());
368:       assertEquals(0, node0.getChildCount());
369:       assertFalse(node0.isAssignAdd());
370:       assertFalse(node0.isDo());
371:       assertFalse(node0.isDefaultCase());
372:       assertFalse(node0.isLabel());
373:       assertFalse(node0.isVar());
374:       assertFalse(node0.isNew());
375:       assertFalse(node0.isName());
376:       assertFalse(node0.isAdd());
377:       assertFalse(node0.isCall());
378:       assertFalse(node0.isNull());
379:       assertFalse(node0.isParamList());
380:       assertFalse(node0.isStringKey());
381:       assertFalse(node0.isCatch());
382:       assertFalse(node0.hasMoreThanOneChild());
383:       assertEquals((-1), node0.getLineno());
384:       assertFalse(node0.isDec());
385:       assertFalse(node0.isRegExp());
386:       assertFalse(node0.isTypeOf());
387:       assertFalse(node0.isWhile());
388:       assertFalse(node0.isBlock());
389:       assertFalse(node0.isAssign());
390:       assertEquals(39, node0.getType());
391:       assertFalse(node0.isReturn());
392:       assertFalse(node0.hasChildren());
393:       assertFalse(node0.isCast());
394:       assertFalse(node0.isNE());
395:       assertFalse(node0.isIf());
396:       assertFalse(node0.isNot());
397:       assertFalse(node0.isObjectLit());
398:       assertEquals((-1), node0.getSourcePosition());
399:       assertFalse(node0.isDebugger());
400:       assertFalse(node0.isIn());
401:       assertFalse(node0.isContinue());
402:       assertFalse(node0.isAnd());
403:       assertFalse(node0.isSetterDef());
404:       assertFalse(node0.isFunction());
405:       assertFalse(node0.isThrow());
406:       assertFalse(node0.isFalse());
407:       assertEquals(52, Node.LENGTH);
408:       assertEquals(57, Node.REFLECTED_OBJECT);
409:       assertEquals(54, Node.SLASH_V);
410:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
411:       assertEquals(50, Node.FREE_CALL);
412:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
413:       assertEquals(40, Node.ORIGINALNAME_PROP);
414:       assertEquals(48, Node.DIRECTIVES);
415:       assertEquals(49, Node.DIRECT_EVAL);
416:       assertEquals(32, Node.INCRDECR_PROP);
417:       assertEquals(46, Node.IS_NAMESPACE);
418:       assertEquals(12, Node.COLUMN_BITS);
419:       assertEquals(4095, Node.COLUMN_MASK);
420:       assertEquals(51, Node.STATIC_SOURCE_FILE);
421:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
422:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
423:       assertEquals(1, Node.DECR_FLAG);
424:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
425:       assertEquals(53, Node.INPUT_ID);
426:       assertEquals(36, Node.QUOTED_PROP);
427:       assertEquals(43, Node.IS_CONSTANT_NAME);
428:       assertEquals(56, Node.CHANGE_TIME);
429:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
430:       assertEquals(37, Node.OPT_ARG_NAME);
431:       assertEquals(55, Node.INFERRED_FUNCTION);
432:       assertEquals(8, Node.FLAG_NO_THROWS);
433:       assertEquals(2, Node.POST_FLAG);
434:       assertEquals(30, Node.VAR_ARGS_NAME);
435:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
436:       assertEquals(15, Node.NO_SIDE_EFFECTS);
437:       assertEquals(57, Node.LAST_PROP);
438:       assertEquals(47, Node.IS_DISPATCHER);
439:       assertEquals(29, Node.JSDOC_INFO_PROP);
440:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
441:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
442:       assertEquals(39, Node.EMPTY_BLOCK);
443:       
444:       Node node1 = new Node(15, node0, node0, node0);
445:       assertFalse(node1.equals((Object)node0));
446:       assertNotNull(node1);
447:       assertFalse(node0.isHook());
448:       assertFalse(node0.isInc());
449:       assertFalse(node0.isBreak());
450:       assertFalse(node0.isSwitch());
451:       assertFalse(node0.isString());
452:       assertEquals((-1), node0.getCharno());
453:       assertFalse(node0.isInstanceOf());
454:       assertFalse(node0.isGetProp());
455:       assertTrue(node0.isNumber());
456:       assertFalse(node0.isCase());
457:       assertFalse(node0.isWith());
458:       assertFalse(node0.isFor());
459:       assertFalse(node0.isThis());
460:       assertFalse(node0.isComma());
461:       assertFalse(node0.hasOneChild());
462:       assertFalse(node0.isGetElem());
463:       assertFalse(node0.isEmpty());
464:       assertFalse(node0.isLabelName());
465:       assertFalse(node0.isTry());
466:       assertFalse(node0.isExprResult());
467:       assertFalse(node0.isVoid());
468:       assertFalse(node0.isArrayLit());
469:       assertFalse(node0.isDelProp());
470:       assertFalse(node0.isScript());
471:       assertFalse(node0.isGetterDef());
472:       assertFalse(node0.isTrue());
473:       assertFalse(node0.isOr());
474:       assertEquals(0, node0.getChildCount());
475:       assertFalse(node0.isAssignAdd());
476:       assertFalse(node0.isDo());
477:       assertFalse(node0.isDefaultCase());
478:       assertFalse(node0.isLabel());
479:       assertFalse(node0.isVar());
480:       assertFalse(node0.isNew());
481:       assertFalse(node0.isName());
482:       assertFalse(node0.isAdd());
483:       assertFalse(node0.isCall());
484:       assertFalse(node0.isNull());
485:       assertFalse(node0.isParamList());
486:       assertFalse(node0.isStringKey());
487:       assertFalse(node0.isCatch());
488:       assertFalse(node0.hasMoreThanOneChild());
489:       assertEquals((-1), node0.getLineno());
490:       assertFalse(node0.isDec());
491:       assertFalse(node0.isRegExp());
492:       assertFalse(node0.isTypeOf());
493:       assertFalse(node0.isWhile());
494:       assertFalse(node0.isBlock());
495:       assertFalse(node0.isAssign());
496:       assertEquals(39, node0.getType());
497:       assertFalse(node0.isReturn());
498:       assertFalse(node0.hasChildren());
499:       assertFalse(node0.isCast());
500:       assertFalse(node0.isNE());
501:       assertFalse(node0.isIf());
502:       assertFalse(node0.isNot());
503:       assertFalse(node0.isObjectLit());
504:       assertEquals((-1), node0.getSourcePosition());
505:       assertFalse(node0.isDebugger());
506:       assertFalse(node0.isIn());
507:       assertFalse(node0.isContinue());
508:       assertFalse(node0.isAnd());
509:       assertFalse(node0.isSetterDef());
510:       assertFalse(node0.isFunction());
511:       assertFalse(node0.isThrow());
512:       assertFalse(node0.isFalse());
513:       assertFalse(node1.isDelProp());
514:       assertFalse(node1.isGetterDef());
515:       assertTrue(node1.hasOneChild());
516:       assertFalse(node1.isIf());
517:       assertFalse(node1.isEmpty());
518:       assertTrue(node1.hasChildren());
519:       assertEquals(1, node1.getChildCount());
520:       assertFalse(node1.isTry());
521:       assertFalse(node1.isFor());
522:       assertFalse(node1.isString());
523:       assertFalse(node1.isCase());
524:       assertFalse(node1.isFunction());
525:       assertFalse(node1.isArrayLit());
526:       assertFalse(node1.isParamList());
527:       assertFalse(node1.isDebugger());
528:       assertFalse(node1.isSwitch());
529:       assertEquals((-1), node1.getCharno());
530:       assertFalse(node1.isBreak());
531:       assertFalse(node1.isName());
532:       assertFalse(node1.isCall());
533:       assertFalse(node1.isGetProp());
534:       assertFalse(node1.isNew());
535:       assertFalse(node1.isComma());
536:       assertFalse(node1.isVar());
537:       assertFalse(node1.isDefaultCase());
538:       assertFalse(node1.isDo());
539:       assertFalse(node1.isExprResult());
540:       assertFalse(node1.isAdd());
541:       assertFalse(node1.isOr());
542:       assertFalse(node1.isVoid());
543:       assertFalse(node1.isTrue());
544:       assertFalse(node1.isNull());
545:       assertFalse(node1.isNumber());
546:       assertEquals((-1), node1.getSourcePosition());
547:       assertFalse(node1.isTypeOf());
548:       assertFalse(node1.isLabelName());
549:       assertFalse(node1.isDec());
550:       assertFalse(node1.isAssign());
551:       assertFalse(node1.isGetElem());
552:       assertFalse(node1.isCast());
553:       assertFalse(node1.isReturn());
554:       assertFalse(node1.isLabel());
555:       assertFalse(node1.isAssignAdd());
556:       assertFalse(node1.isWhile());
557:       assertFalse(node1.isNot());
558:       assertFalse(node1.isContinue());
559:       assertFalse(node1.isObjectLit());
560:       assertFalse(node1.isScript());
561:       assertFalse(node1.isAnd());
562:       assertFalse(node1.isStringKey());
563:       assertFalse(node1.isFalse());
564:       assertFalse(node1.isSetterDef());
565:       assertFalse(node1.isHook());
566:       assertEquals(15, node1.getType());
567:       assertFalse(node1.isThis());
568:       assertFalse(node1.isBlock());
569:       assertFalse(node1.isThrow());
570:       assertFalse(node1.isWith());
571:       assertFalse(node1.isRegExp());
572:       assertFalse(node1.isInc());
573:       assertFalse(node1.hasMoreThanOneChild());
574:       assertFalse(node1.isCatch());
575:       assertFalse(node1.isInstanceOf());
576:       assertEquals((-1), node1.getLineno());
577:       assertFalse(node1.isIn());
578:       assertFalse(node1.isNE());
579:       assertEquals(52, Node.LENGTH);
580:       assertEquals(57, Node.REFLECTED_OBJECT);
581:       assertEquals(54, Node.SLASH_V);
582:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
583:       assertEquals(50, Node.FREE_CALL);
584:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
585:       assertEquals(40, Node.ORIGINALNAME_PROP);
586:       assertEquals(48, Node.DIRECTIVES);
587:       assertEquals(49, Node.DIRECT_EVAL);
588:       assertEquals(32, Node.INCRDECR_PROP);
589:       assertEquals(46, Node.IS_NAMESPACE);
590:       assertEquals(12, Node.COLUMN_BITS);
591:       assertEquals(4095, Node.COLUMN_MASK);
592:       assertEquals(51, Node.STATIC_SOURCE_FILE);
593:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
594:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
595:       assertEquals(1, Node.DECR_FLAG);
596:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
597:       assertEquals(53, Node.INPUT_ID);
598:       assertEquals(36, Node.QUOTED_PROP);
599:       assertEquals(43, Node.IS_CONSTANT_NAME);
600:       assertEquals(56, Node.CHANGE_TIME);
601:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
602:       assertEquals(37, Node.OPT_ARG_NAME);
603:       assertEquals(55, Node.INFERRED_FUNCTION);
604:       assertEquals(8, Node.FLAG_NO_THROWS);
605:       assertEquals(2, Node.POST_FLAG);
606:       assertEquals(30, Node.VAR_ARGS_NAME);
607:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
608:       assertEquals(15, Node.NO_SIDE_EFFECTS);
609:       assertEquals(57, Node.LAST_PROP);
610:       assertEquals(47, Node.IS_DISPATCHER);
611:       assertEquals(29, Node.JSDOC_INFO_PROP);
612:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
613:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
614:       assertEquals(39, Node.EMPTY_BLOCK);
615:       assertEquals(29, Node.JSDOC_INFO_PROP);
616:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
617:       assertEquals(2, Node.POST_FLAG);
618:       assertEquals(56, Node.CHANGE_TIME);
619:       assertEquals(47, Node.IS_DISPATCHER);
620:       assertEquals(32, Node.INCRDECR_PROP);
621:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
622:       assertEquals(53, Node.INPUT_ID);
623:       assertEquals(30, Node.VAR_ARGS_NAME);
624:       assertEquals(57, Node.LAST_PROP);
625:       assertEquals(43, Node.IS_CONSTANT_NAME);
626:       assertEquals(51, Node.STATIC_SOURCE_FILE);
627:       assertEquals(46, Node.IS_NAMESPACE);
628:       assertEquals(54, Node.SLASH_V);
629:       assertEquals(40, Node.ORIGINALNAME_PROP);
630:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
631:       assertEquals(50, Node.FREE_CALL);
632:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
633:       assertEquals(57, Node.REFLECTED_OBJECT);
634:       assertEquals(52, Node.LENGTH);
635:       assertEquals(8, Node.FLAG_NO_THROWS);
636:       assertEquals(55, Node.INFERRED_FUNCTION);
637:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
638:       assertEquals(15, Node.NO_SIDE_EFFECTS);
639:       assertEquals(39, Node.EMPTY_BLOCK);
640:       assertEquals(49, Node.DIRECT_EVAL);
641:       assertEquals(1, Node.DECR_FLAG);
642:       assertEquals(12, Node.COLUMN_BITS);
643:       assertEquals(36, Node.QUOTED_PROP);
644:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
645:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
646:       assertEquals(48, Node.DIRECTIVES);
647:       assertEquals(4095, Node.COLUMN_MASK);
648:       assertEquals(37, Node.OPT_ARG_NAME);
649:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
650:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
651:       
652:       boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dXY.AD&HI=");
653:       assertTrue(boolean1 == boolean0);
654:       assertFalse(boolean1);
655:       
656:       boolean boolean2 = node1.isNew();
657:       assertFalse(node0.equals((Object)node1));
658:       assertFalse(node1.equals((Object)node0));
659:       assertTrue(boolean2 == boolean1);
660:       assertTrue(boolean2 == boolean0);
661:       assertFalse(boolean2);
662:       assertFalse(node0.isHook());
663:       assertFalse(node0.isInc());
664:       assertFalse(node0.isBreak());
665:       assertFalse(node0.isSwitch());
666:       assertFalse(node0.isString());
667:       assertEquals((-1), node0.getCharno());
668:       assertFalse(node0.isInstanceOf());
669:       assertFalse(node0.isGetProp());
670:       assertTrue(node0.isNumber());
671:       assertFalse(node0.isCase());
672:       assertFalse(node0.isWith());
673:       assertFalse(node0.isFor());
674:       assertFalse(node0.isThis());
675:       assertFalse(node0.isComma());
676:       assertFalse(node0.hasOneChild());
677:       assertFalse(node0.isGetElem());
678:       assertFalse(node0.isEmpty());
679:       assertFalse(node0.isLabelName());
680:       assertFalse(node0.isTry());
681:       assertFalse(node0.isExprResult());
682:       assertFalse(node0.isVoid());
683:       assertFalse(node0.isArrayLit());
684:       assertFalse(node0.isDelProp());
685:       assertFalse(node0.isScript());
686:       assertFalse(node0.isGetterDef());
687:       assertFalse(node0.isTrue());
688:       assertFalse(node0.isOr());
689:       assertEquals(0, node0.getChildCount());
690:       assertFalse(node0.isAssignAdd());
691:       assertFalse(node0.isDo());
692:       assertFalse(node0.isDefaultCase());
693:       assertFalse(node0.isLabel());
694:       assertFalse(node0.isVar());
695:       assertFalse(node0.isNew());
696:       assertFalse(node0.isName());
697:       assertFalse(node0.isAdd());
698:       assertFalse(node0.isCall());
699:       assertFalse(node0.isNull());
700:       assertFalse(node0.isParamList());
701:       assertFalse(node0.isStringKey());
702:       assertFalse(node0.isCatch());
703:       assertFalse(node0.hasMoreThanOneChild());
704:       assertEquals((-1), node0.getLineno());
705:       assertFalse(node0.isDec());
706:       assertFalse(node0.isRegExp());
707:       assertFalse(node0.isTypeOf());
708:       assertFalse(node0.isWhile());
709:       assertFalse(node0.isBlock());
710:       assertFalse(node0.isAssign());
711:       assertEquals(39, node0.getType());
712:       assertFalse(node0.isReturn());
713:       assertFalse(node0.hasChildren());
714:       assertFalse(node0.isCast());
715:       assertFalse(node0.isNE());
716:       assertFalse(node0.isIf());
717:       assertFalse(node0.isNot());
718:       assertFalse(node0.isObjectLit());
719:       assertEquals((-1), node0.getSourcePosition());
720:       assertFalse(node0.isDebugger());
721:       assertFalse(node0.isIn());
722:       assertFalse(node0.isContinue());
723:       assertFalse(node0.isAnd());
724:       assertFalse(node0.isSetterDef());
725:       assertFalse(node0.isFunction());
726:       assertFalse(node0.isThrow());
727:       assertFalse(node0.isFalse());
728:       assertFalse(node1.isDelProp());
729:       assertFalse(node1.isGetterDef());
730:       assertTrue(node1.hasOneChild());
731:       assertFalse(node1.isIf());
732:       assertFalse(node1.isEmpty());
733:       assertTrue(node1.hasChildren());
734:       assertEquals(1, node1.getChildCount());
735:       assertFalse(node1.isTry());
736:       assertFalse(node1.isFor());
737:       assertFalse(node1.isString());
738:       assertFalse(node1.isCase());
739:       assertFalse(node1.isFunction());
740:       assertFalse(node1.isArrayLit());
741:       assertFalse(node1.isParamList());
742:       assertFalse(node1.isDebugger());
743:       assertFalse(node1.isSwitch());
744:       assertEquals((-1), node1.getCharno());
745:       assertFalse(node1.isBreak());
746:       assertFalse(node1.isName());
747:       assertFalse(node1.isCall());
748:       assertFalse(node1.isGetProp());
749:       assertFalse(node1.isNew());
750:       assertFalse(node1.isComma());
751:       assertFalse(node1.isVar());
752:       assertFalse(node1.isDefaultCase());
753:       assertFalse(node1.isDo());
754:       assertFalse(node1.isExprResult());
755:       assertFalse(node1.isAdd());
756:       assertFalse(node1.isOr());
757:       assertFalse(node1.isVoid());
758:       assertFalse(node1.isTrue());
759:       assertFalse(node1.isNull());
760:       assertFalse(node1.isNumber());
761:       assertEquals((-1), node1.getSourcePosition());
762:       assertFalse(node1.isTypeOf());
763:       assertFalse(node1.isLabelName());
764:       assertFalse(node1.isDec());
765:       assertFalse(node1.isAssign());
766:       assertFalse(node1.isGetElem());
767:       assertFalse(node1.isCast());
768:       assertFalse(node1.isReturn());
769:       assertFalse(node1.isLabel());
770:       assertFalse(node1.isAssignAdd());
771:       assertFalse(node1.isWhile());
772:       assertFalse(node1.isNot());
773:       assertFalse(node1.isContinue());
774:       assertFalse(node1.isObjectLit());
775:       assertFalse(node1.isScript());
776:       assertFalse(node1.isAnd());
777:       assertFalse(node1.isStringKey());
778:       assertFalse(node1.isFalse());
779:       assertFalse(node1.isSetterDef());
780:       assertFalse(node1.isHook());
781:       assertEquals(15, node1.getType());
782:       assertFalse(node1.isThis());
783:       assertFalse(node1.isBlock());
784:       assertFalse(node1.isThrow());
785:       assertFalse(node1.isWith());
786:       assertFalse(node1.isRegExp());
787:       assertFalse(node1.isInc());
788:       assertFalse(node1.hasMoreThanOneChild());
789:       assertFalse(node1.isCatch());
790:       assertFalse(node1.isInstanceOf());
791:       assertEquals((-1), node1.getLineno());
792:       assertFalse(node1.isIn());
793:       assertFalse(node1.isNE());
794:       assertEquals(52, Node.LENGTH);
795:       assertEquals(57, Node.REFLECTED_OBJECT);
796:       assertEquals(54, Node.SLASH_V);
797:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
798:       assertEquals(50, Node.FREE_CALL);
799:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
800:       assertEquals(40, Node.ORIGINALNAME_PROP);
801:       assertEquals(48, Node.DIRECTIVES);
802:       assertEquals(49, Node.DIRECT_EVAL);
803:       assertEquals(32, Node.INCRDECR_PROP);
804:       assertEquals(46, Node.IS_NAMESPACE);
805:       assertEquals(12, Node.COLUMN_BITS);
806:       assertEquals(4095, Node.COLUMN_MASK);
807:       assertEquals(51, Node.STATIC_SOURCE_FILE);
808:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
809:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
810:       assertEquals(1, Node.DECR_FLAG);
811:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
812:       assertEquals(53, Node.INPUT_ID);
813:       assertEquals(36, Node.QUOTED_PROP);
814:       assertEquals(43, Node.IS_CONSTANT_NAME);
815:       assertEquals(56, Node.CHANGE_TIME);
816:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
817:       assertEquals(37, Node.OPT_ARG_NAME);
818:       assertEquals(55, Node.INFERRED_FUNCTION);
819:       assertEquals(8, Node.FLAG_NO_THROWS);
820:       assertEquals(2, Node.POST_FLAG);
821:       assertEquals(30, Node.VAR_ARGS_NAME);
822:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
823:       assertEquals(15, Node.NO_SIDE_EFFECTS);
824:       assertEquals(57, Node.LAST_PROP);
825:       assertEquals(47, Node.IS_DISPATCHER);
826:       assertEquals(29, Node.JSDOC_INFO_PROP);
827:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
828:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
829:       assertEquals(39, Node.EMPTY_BLOCK);
830:       assertEquals(29, Node.JSDOC_INFO_PROP);
831:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
832:       assertEquals(2, Node.POST_FLAG);
833:       assertEquals(56, Node.CHANGE_TIME);
834:       assertEquals(47, Node.IS_DISPATCHER);
835:       assertEquals(32, Node.INCRDECR_PROP);
836:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
837:       assertEquals(53, Node.INPUT_ID);
838:       assertEquals(30, Node.VAR_ARGS_NAME);
839:       assertEquals(57, Node.LAST_PROP);
840:       assertEquals(43, Node.IS_CONSTANT_NAME);
841:       assertEquals(51, Node.STATIC_SOURCE_FILE);
842:       assertEquals(46, Node.IS_NAMESPACE);
843:       assertEquals(54, Node.SLASH_V);
844:       assertEquals(40, Node.ORIGINALNAME_PROP);
845:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
846:       assertEquals(50, Node.FREE_CALL);
847:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
848:       assertEquals(57, Node.REFLECTED_OBJECT);
849:       assertEquals(52, Node.LENGTH);
850:       assertEquals(8, Node.FLAG_NO_THROWS);
851:       assertEquals(55, Node.INFERRED_FUNCTION);
852:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
853:       assertEquals(15, Node.NO_SIDE_EFFECTS);
854:       assertEquals(39, Node.EMPTY_BLOCK);
855:       assertEquals(49, Node.DIRECT_EVAL);
856:       assertEquals(1, Node.DECR_FLAG);
857:       assertEquals(12, Node.COLUMN_BITS);
858:       assertEquals(36, Node.QUOTED_PROP);
859:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
860:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
861:       assertEquals(48, Node.DIRECTIVES);
862:       assertEquals(4095, Node.COLUMN_MASK);
863:       assertEquals(37, Node.OPT_ARG_NAME);
864:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
865:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
866:       
867:       boolean boolean3 = node1.isTry();
868:       assertFalse(node0.equals((Object)node1));
869:       assertFalse(node1.equals((Object)node0));
870:       assertTrue(boolean3 == boolean0);
871:       assertTrue(boolean3 == boolean2);
872:       assertTrue(boolean3 == boolean1);
873:       assertFalse(boolean3);
874:       assertFalse(node0.isHook());
875:       assertFalse(node0.isInc());
876:       assertFalse(node0.isBreak());
877:       assertFalse(node0.isSwitch());
878:       assertFalse(node0.isString());
879:       assertEquals((-1), node0.getCharno());
880:       assertFalse(node0.isInstanceOf());
881:       assertFalse(node0.isGetProp());
882:       assertTrue(node0.isNumber());
883:       assertFalse(node0.isCase());
884:       assertFalse(node0.isWith());
885:       assertFalse(node0.isFor());
886:       assertFalse(node0.isThis());
887:       assertFalse(node0.isComma());
888:       assertFalse(node0.hasOneChild());
889:       assertFalse(node0.isGetElem());
890:       assertFalse(node0.isEmpty());
891:       assertFalse(node0.isLabelName());
892:       assertFalse(node0.isTry());
893:       assertFalse(node0.isExprResult());
894:       assertFalse(node0.isVoid());
895:       assertFalse(node0.isArrayLit());
896:       assertFalse(node0.isDelProp());
897:       assertFalse(node0.isScript());
898:       assertFalse(node0.isGetterDef());
899:       assertFalse(node0.isTrue());
900:       assertFalse(node0.isOr());
901:       assertEquals(0, node0.getChildCount());
902:       assertFalse(node0.isAssignAdd());
903:       assertFalse(node0.isDo());
904:       assertFalse(node0.isDefaultCase());
905:       assertFalse(node0.isLabel());
906:       assertFalse(node0.isVar());
907:       assertFalse(node0.isNew());
908:       assertFalse(node0.isName());
909:       assertFalse(node0.isAdd());
910:       assertFalse(node0.isCall());
911:       assertFalse(node0.isNull());
912:       assertFalse(node0.isParamList());
913:       assertFalse(node0.isStringKey());
914:       assertFalse(node0.isCatch());
915:       assertFalse(node0.hasMoreThanOneChild());
916:       assertEquals((-1), node0.getLineno());
917:       assertFalse(node0.isDec());
918:       assertFalse(node0.isRegExp());
919:       assertFalse(node0.isTypeOf());
920:       assertFalse(node0.isWhile());
921:       assertFalse(node0.isBlock());
922:       assertFalse(node0.isAssign());
923:       assertEquals(39, node0.getType());
924:       assertFalse(node0.isReturn());
925:       assertFalse(node0.hasChildren());
926:       assertFalse(node0.isCast());
927:       assertFalse(node0.isNE());
928:       assertFalse(node0.isIf());
929:       assertFalse(node0.isNot());
930:       assertFalse(node0.isObjectLit());
931:       assertEquals((-1), node0.getSourcePosition());
932:       assertFalse(node0.isDebugger());
933:       assertFalse(node0.isIn());
934:       assertFalse(node0.isContinue());
935:       assertFalse(node0.isAnd());
936:       assertFalse(node0.isSetterDef());
937:       assertFalse(node0.isFunction());
938:       assertFalse(node0.isThrow());
939:       assertFalse(node0.isFalse());
940:       assertFalse(node1.isDelProp());
941:       assertFalse(node1.isGetterDef());
942:       assertTrue(node1.hasOneChild());
943:       assertFalse(node1.isIf());
944:       assertFalse(node1.isEmpty());
945:       assertTrue(node1.hasChildren());
946:       assertEquals(1, node1.getChildCount());
947:       assertFalse(node1.isTry());
948:       assertFalse(node1.isFor());
949:       assertFalse(node1.isString());
950:       assertFalse(node1.isCase());
951:       assertFalse(node1.isFunction());
952:       assertFalse(node1.isArrayLit());
953:       assertFalse(node1.isParamList());
954:       assertFalse(node1.isDebugger());
955:       assertFalse(node1.isSwitch());
956:       assertEquals((-1), node1.getCharno());
957:       assertFalse(node1.isBreak());
958:       assertFalse(node1.isName());
959:       assertFalse(node1.isCall());
960:       assertFalse(node1.isGetProp());
961:       assertFalse(node1.isNew());
962:       assertFalse(node1.isComma());
963:       assertFalse(node1.isVar());
964:       assertFalse(node1.isDefaultCase());
965:       assertFalse(node1.isDo());
966:       assertFalse(node1.isExprResult());
967:       assertFalse(node1.isAdd());
968:       assertFalse(node1.isOr());
969:       assertFalse(node1.isVoid());
970:       assertFalse(node1.isTrue());
971:       assertFalse(node1.isNull());
972:       assertFalse(node1.isNumber());
973:       assertEquals((-1), node1.getSourcePosition());
974:       assertFalse(node1.isTypeOf());
975:       assertFalse(node1.isLabelName());
976:       assertFalse(node1.isDec());
977:       assertFalse(node1.isAssign());
978:       assertFalse(node1.isGetElem());
979:       assertFalse(node1.isCast());
980:       assertFalse(node1.isReturn());
981:       assertFalse(node1.isLabel());
982:       assertFalse(node1.isAssignAdd());
983:       assertFalse(node1.isWhile());
984:       assertFalse(node1.isNot());
985:       assertFalse(node1.isContinue());
986:       assertFalse(node1.isObjectLit());
987:       assertFalse(node1.isScript());
988:       assertFalse(node1.isAnd());
989:       assertFalse(node1.isStringKey());
990:       assertFalse(node1.isFalse());
991:       assertFalse(node1.isSetterDef());
992:       assertFalse(node1.isHook());
993:       assertEquals(15, node1.getType());
994:       assertFalse(node1.isThis());
995:       assertFalse(node1.isBlock());
996:       assertFalse(node1.isThrow());
997:       assertFalse(node1.isWith());
998:       assertFalse(node1.isRegExp());
999:       assertFalse(node1.isInc());
1000:       assertFalse(node1.hasMoreThanOneChild());
1001:       assertFalse(node1.isCatch());
1002:       assertFalse(node1.isInstanceOf());
1003:       assertEquals((-1), node1.getLineno());
1004:       assertFalse(node1.isIn());
1005:       assertFalse(node1.isNE());
1006:       assertEquals(52, Node.LENGTH);
1007:       assertEquals(57, Node.REFLECTED_OBJECT);
1008:       assertEquals(54, Node.SLASH_V);
1009:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1010:       assertEquals(50, Node.FREE_CALL);
1011:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1012:       assertEquals(40, Node.ORIGINALNAME_PROP);
1013:       assertEquals(48, Node.DIRECTIVES);
1014:       assertEquals(49, Node.DIRECT_EVAL);
1015:       assertEquals(32, Node.INCRDECR_PROP);
1016:       assertEquals(46, Node.IS_NAMESPACE);
1017:       assertEquals(12, Node.COLUMN_BITS);
1018:       assertEquals(4095, Node.COLUMN_MASK);
1019:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1020:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1021:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1022:       assertEquals(1, Node.DECR_FLAG);
1023:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1024:       assertEquals(53, Node.INPUT_ID);
1025:       assertEquals(36, Node.QUOTED_PROP);
1026:       assertEquals(43, Node.IS_CONSTANT_NAME);
1027:       assertEquals(56, Node.CHANGE_TIME);
1028:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1029:       assertEquals(37, Node.OPT_ARG_NAME);
1030:       assertEquals(55, Node.INFERRED_FUNCTION);
1031:       assertEquals(8, Node.FLAG_NO_THROWS);
1032:       assertEquals(2, Node.POST_FLAG);
1033:       assertEquals(30, Node.VAR_ARGS_NAME);
1034:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1035:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1036:       assertEquals(57, Node.LAST_PROP);
1037:       assertEquals(47, Node.IS_DISPATCHER);
1038:       assertEquals(29, Node.JSDOC_INFO_PROP);
1039:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1040:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1041:       assertEquals(39, Node.EMPTY_BLOCK);
1042:       assertEquals(29, Node.JSDOC_INFO_PROP);
1043:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1044:       assertEquals(2, Node.POST_FLAG);
1045:       assertEquals(56, Node.CHANGE_TIME);
1046:       assertEquals(47, Node.IS_DISPATCHER);
1047:       assertEquals(32, Node.INCRDECR_PROP);
1048:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1049:       assertEquals(53, Node.INPUT_ID);
1050:       assertEquals(30, Node.VAR_ARGS_NAME);
1051:       assertEquals(57, Node.LAST_PROP);
1052:       assertEquals(43, Node.IS_CONSTANT_NAME);
1053:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1054:       assertEquals(46, Node.IS_NAMESPACE);
1055:       assertEquals(54, Node.SLASH_V);
1056:       assertEquals(40, Node.ORIGINALNAME_PROP);
1057:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1058:       assertEquals(50, Node.FREE_CALL);
1059:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1060:       assertEquals(57, Node.REFLECTED_OBJECT);
1061:       assertEquals(52, Node.LENGTH);
1062:       assertEquals(8, Node.FLAG_NO_THROWS);
1063:       assertEquals(55, Node.INFERRED_FUNCTION);
1064:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1065:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1066:       assertEquals(39, Node.EMPTY_BLOCK);
1067:       assertEquals(49, Node.DIRECT_EVAL);
1068:       assertEquals(1, Node.DECR_FLAG);
1069:       assertEquals(12, Node.COLUMN_BITS);
1070:       assertEquals(36, Node.QUOTED_PROP);
1071:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1072:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1073:       assertEquals(48, Node.DIRECTIVES);
1074:       assertEquals(4095, Node.COLUMN_MASK);
1075:       assertEquals(37, Node.OPT_ARG_NAME);
1076:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1077:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1078:       
1079:       boolean boolean4 = node1.isDo();
1080:       assertFalse(node0.equals((Object)node1));
1081:       assertFalse(node1.equals((Object)node0));
1082:       assertTrue(boolean4 == boolean3);
1083:       assertTrue(boolean4 == boolean1);
1084:       assertTrue(boolean4 == boolean2);
1085:       assertTrue(boolean4 == boolean0);
1086:       assertFalse(boolean4);
1087:       assertFalse(node0.isHook());
1088:       assertFalse(node0.isInc());
1089:       assertFalse(node0.isBreak());
1090:       assertFalse(node0.isSwitch());
1091:       assertFalse(node0.isString());
1092:       assertEquals((-1), node0.getCharno());
1093:       assertFalse(node0.isInstanceOf());
1094:       assertFalse(node0.isGetProp());
1095:       assertTrue(node0.isNumber());
1096:       assertFalse(node0.isCase());
1097:       assertFalse(node0.isWith());
1098:       assertFalse(node0.isFor());
1099:       assertFalse(node0.isThis());
1100:       assertFalse(node0.isComma());
1101:       assertFalse(node0.hasOneChild());
1102:       assertFalse(node0.isGetElem());
1103:       assertFalse(node0.isEmpty());
1104:       assertFalse(node0.isLabelName());
1105:       assertFalse(node0.isTry());
1106:       assertFalse(node0.isExprResult());
1107:       assertFalse(node0.isVoid());
1108:       assertFalse(node0.isArrayLit());
1109:       assertFalse(node0.isDelProp());
1110:       assertFalse(node0.isScript());
1111:       assertFalse(node0.isGetterDef());
1112:       assertFalse(node0.isTrue());
1113:       assertFalse(node0.isOr());
1114:       assertEquals(0, node0.getChildCount());
1115:       assertFalse(node0.isAssignAdd());
1116:       assertFalse(node0.isDo());
1117:       assertFalse(node0.isDefaultCase());
1118:       assertFalse(node0.isLabel());
1119:       assertFalse(node0.isVar());
1120:       assertFalse(node0.isNew());
1121:       assertFalse(node0.isName());
1122:       assertFalse(node0.isAdd());
1123:       assertFalse(node0.isCall());
1124:       assertFalse(node0.isNull());
1125:       assertFalse(node0.isParamList());
1126:       assertFalse(node0.isStringKey());
1127:       assertFalse(node0.isCatch());
1128:       assertFalse(node0.hasMoreThanOneChild());
1129:       assertEquals((-1), node0.getLineno());
1130:       assertFalse(node0.isDec());
1131:       assertFalse(node0.isRegExp());
1132:       assertFalse(node0.isTypeOf());
1133:       assertFalse(node0.isWhile());
1134:       assertFalse(node0.isBlock());
1135:       assertFalse(node0.isAssign());
1136:       assertEquals(39, node0.getType());
1137:       assertFalse(node0.isReturn());
1138:       assertFalse(node0.hasChildren());
1139:       assertFalse(node0.isCast());
1140:       assertFalse(node0.isNE());
1141:       assertFalse(node0.isIf());
1142:       assertFalse(node0.isNot());
1143:       assertFalse(node0.isObjectLit());
1144:       assertEquals((-1), node0.getSourcePosition());
1145:       assertFalse(node0.isDebugger());
1146:       assertFalse(node0.isIn());
1147:       assertFalse(node0.isContinue());
1148:       assertFalse(node0.isAnd());
1149:       assertFalse(node0.isSetterDef());
1150:       assertFalse(node0.isFunction());
1151:       assertFalse(node0.isThrow());
1152:       assertFalse(node0.isFalse());
1153:       assertFalse(node1.isDelProp());
1154:       assertFalse(node1.isGetterDef());
1155:       assertTrue(node1.hasOneChild());
1156:       assertFalse(node1.isIf());
1157:       assertFalse(node1.isEmpty());
1158:       assertTrue(node1.hasChildren());
1159:       assertEquals(1, node1.getChildCount());
1160:       assertFalse(node1.isTry());
1161:       assertFalse(node1.isFor());
1162:       assertFalse(node1.isString());
1163:       assertFalse(node1.isCase());
1164:       assertFalse(node1.isFunction());
1165:       assertFalse(node1.isArrayLit());
1166:       assertFalse(node1.isParamList());
1167:       assertFalse(node1.isDebugger());
1168:       assertFalse(node1.isSwitch());
1169:       assertEquals((-1), node1.getCharno());
1170:       assertFalse(node1.isBreak());
1171:       assertFalse(node1.isName());
1172:       assertFalse(node1.isCall());
1173:       assertFalse(node1.isGetProp());
1174:       assertFalse(node1.isNew());
1175:       assertFalse(node1.isComma());
1176:       assertFalse(node1.isVar());
1177:       assertFalse(node1.isDefaultCase());
1178:       assertFalse(node1.isDo());
1179:       assertFalse(node1.isExprResult());
1180:       assertFalse(node1.isAdd());
1181:       assertFalse(node1.isOr());
1182:       assertFalse(node1.isVoid());
1183:       assertFalse(node1.isTrue());
1184:       assertFalse(node1.isNull());
1185:       assertFalse(node1.isNumber());
1186:       assertEquals((-1), node1.getSourcePosition());
1187:       assertFalse(node1.isTypeOf());
1188:       assertFalse(node1.isLabelName());
1189:       assertFalse(node1.isDec());
1190:       assertFalse(node1.isAssign());
1191:       assertFalse(node1.isGetElem());
1192:       assertFalse(node1.isCast());
1193:       assertFalse(node1.isReturn());
1194:       assertFalse(node1.isLabel());
1195:       assertFalse(node1.isAssignAdd());
1196:       assertFalse(node1.isWhile());
1197:       assertFalse(node1.isNot());
1198:       assertFalse(node1.isContinue());
1199:       assertFalse(node1.isObjectLit());
1200:       assertFalse(node1.isScript());
1201:       assertFalse(node1.isAnd());
1202:       assertFalse(node1.isStringKey());
1203:       assertFalse(node1.isFalse());
1204:       assertFalse(node1.isSetterDef());
1205:       assertFalse(node1.isHook());
1206:       assertEquals(15, node1.getType());
1207:       assertFalse(node1.isThis());
1208:       assertFalse(node1.isBlock());
1209:       assertFalse(node1.isThrow());
1210:       assertFalse(node1.isWith());
1211:       assertFalse(node1.isRegExp());
1212:       assertFalse(node1.isInc());
1213:       assertFalse(node1.hasMoreThanOneChild());
1214:       assertFalse(node1.isCatch());
1215:       assertFalse(node1.isInstanceOf());
1216:       assertEquals((-1), node1.getLineno());
1217:       assertFalse(node1.isIn());
1218:       assertFalse(node1.isNE());
1219:       assertEquals(52, Node.LENGTH);
1220:       assertEquals(57, Node.REFLECTED_OBJECT);
1221:       assertEquals(54, Node.SLASH_V);
1222:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1223:       assertEquals(50, Node.FREE_CALL);
1224:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1225:       assertEquals(40, Node.ORIGINALNAME_PROP);
1226:       assertEquals(48, Node.DIRECTIVES);
1227:       assertEquals(49, Node.DIRECT_EVAL);
1228:       assertEquals(32, Node.INCRDECR_PROP);
1229:       assertEquals(46, Node.IS_NAMESPACE);
1230:       assertEquals(12, Node.COLUMN_BITS);
1231:       assertEquals(4095, Node.COLUMN_MASK);
1232:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1233:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1234:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1235:       assertEquals(1, Node.DECR_FLAG);
1236:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1237:       assertEquals(53, Node.INPUT_ID);
1238:       assertEquals(36, Node.QUOTED_PROP);
1239:       assertEquals(43, Node.IS_CONSTANT_NAME);
1240:       assertEquals(56, Node.CHANGE_TIME);
1241:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1242:       assertEquals(37, Node.OPT_ARG_NAME);
1243:       assertEquals(55, Node.INFERRED_FUNCTION);
1244:       assertEquals(8, Node.FLAG_NO_THROWS);
1245:       assertEquals(2, Node.POST_FLAG);
1246:       assertEquals(30, Node.VAR_ARGS_NAME);
1247:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1248:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1249:       assertEquals(57, Node.LAST_PROP);
1250:       assertEquals(47, Node.IS_DISPATCHER);
1251:       assertEquals(29, Node.JSDOC_INFO_PROP);
1252:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1253:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1254:       assertEquals(39, Node.EMPTY_BLOCK);
1255:       assertEquals(29, Node.JSDOC_INFO_PROP);
1256:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1257:       assertEquals(2, Node.POST_FLAG);
1258:       assertEquals(56, Node.CHANGE_TIME);
1259:       assertEquals(47, Node.IS_DISPATCHER);
1260:       assertEquals(32, Node.INCRDECR_PROP);
1261:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1262:       assertEquals(53, Node.INPUT_ID);
1263:       assertEquals(30, Node.VAR_ARGS_NAME);
1264:       assertEquals(57, Node.LAST_PROP);
1265:       assertEquals(43, Node.IS_CONSTANT_NAME);
1266:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1267:       assertEquals(46, Node.IS_NAMESPACE);
1268:       assertEquals(54, Node.SLASH_V);
1269:       assertEquals(40, Node.ORIGINALNAME_PROP);
1270:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1271:       assertEquals(50, Node.FREE_CALL);
1272:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1273:       assertEquals(57, Node.REFLECTED_OBJECT);
1274:       assertEquals(52, Node.LENGTH);
1275:       assertEquals(8, Node.FLAG_NO_THROWS);
1276:       assertEquals(55, Node.INFERRED_FUNCTION);
1277:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1278:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1279:       assertEquals(39, Node.EMPTY_BLOCK);
1280:       assertEquals(49, Node.DIRECT_EVAL);
1281:       assertEquals(1, Node.DECR_FLAG);
1282:       assertEquals(12, Node.COLUMN_BITS);
1283:       assertEquals(36, Node.QUOTED_PROP);
1284:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1285:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1286:       assertEquals(48, Node.DIRECTIVES);
1287:       assertEquals(4095, Node.COLUMN_MASK);
1288:       assertEquals(37, Node.OPT_ARG_NAME);
1289:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1290:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1291:       
1292:       Node node2 = null;
1293:       try {
1294:         node2 = new Node(37, node1, node1, node0, (-4053), 43);
1295:         fail("Expecting exception: IllegalArgumentException");
1296:       
1297:       } catch(IllegalArgumentException e) {
1298:          //
1299:          // no message in exception (getMessage() returned null)
1300:          //
1301:          verifyException("com.google.common.base.Preconditions", e);
1302:       }
1303:   }
1304: }
RegularFileObject[/tmp/EvoSuite_92_1628159818399/com/google/javascript/rhino/Node_92_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:36:58 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_92_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_92_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.common.collect.Sets$1",
101:       "com.google.javascript.rhino.SourcePosition",
102:       "com.google.common.collect.ImmutableMapKeySet",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.javascript.rhino.Node$AncestorIterable$1",
115:       "com.google.common.collect.Iterators$12",
116:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
117:       "com.google.common.collect.Iterators$11",
118:       "com.google.javascript.rhino.jstype.JSType$1",
119:       "com.google.common.collect.EmptyImmutableBiMap",
120:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
121:       "com.google.common.base.Predicate",
122:       "com.google.javascript.rhino.jstype.JSType$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.common.collect.SingletonImmutableSet",
135:       "com.google.javascript.rhino.jstype.NamedType",
136:       "com.google.common.collect.Iterators$13",
137:       "com.google.javascript.rhino.InputId",
138:       "com.google.common.collect.ImmutableList$SerializedForm",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
163:       "com.google.common.base.Joiner$MapJoiner",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.javascript.rhino.Node$AncestorIterable",
185:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
186:       "com.google.common.collect.Lists$RandomAccessListWrapper",
187:       "com.google.common.collect.ImmutableEnumSet",
188:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
189:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
190:       "com.google.javascript.rhino.jstype.EnumElementType",
191:       "com.google.javascript.rhino.jstype.UnionType",
192:       "com.google.common.base.Objects",
193:       "com.google.javascript.rhino.Node$NumberNode",
194:       "com.google.common.collect.SingletonImmutableList",
195:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
196:       "com.google.common.collect.ImmutableCollection$Builder",
197:       "com.google.javascript.rhino.jstype.StaticSlot",
198:       "com.google.common.collect.Iterators$6",
199:       "com.google.common.collect.BiMap",
200:       "com.google.common.collect.Iterators$7",
201:       "com.google.common.collect.AbstractSetMultimap",
202:       "com.google.common.base.Function",
203:       "com.google.common.collect.ImmutableSet",
204:       "com.google.common.collect.Lists$AbstractListWrapper",
205:       "com.google.common.collect.ImmutableMap",
206:       "com.google.common.collect.AbstractIndexedListIterator",
207:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
208:       "com.google.common.collect.Maps$1",
209:       "com.google.javascript.rhino.jstype.EnumType",
210:       "com.google.common.collect.Iterators$1",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$2",
213:       "com.google.javascript.rhino.jstype.NamespaceType",
214:       "com.google.common.collect.Iterators$3",
215:       "com.google.common.collect.Sets",
216:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
217:       "com.google.javascript.rhino.Node$ObjectPropListItem",
218:       "com.google.common.collect.Lists$StringAsImmutableList",
219:       "com.google.common.collect.Lists$2",
220:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
221:       "com.google.common.collect.ImmutableList$Builder",
222:       "com.google.common.collect.Lists$1",
223:       "com.google.javascript.rhino.jstype.StaticReference",
224:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
225:       "com.google.common.collect.Multiset",
226:       "com.google.common.collect.AbstractMultimap",
227:       "com.google.common.collect.Multimap",
228:       "com.google.common.collect.Iterators",
229:       "com.google.common.collect.EmptyImmutableSet",
230:       "com.google.common.collect.Maps$ImprovedAbstractMap",
231:       "com.google.common.collect.ImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
233:       "com.google.common.collect.ImmutableList",
234:       "com.google.common.collect.SingletonImmutableBiMap",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
236:       "com.google.javascript.rhino.jstype.StringType",
237:       "com.google.javascript.rhino.Node$AbstractPropListItem",
238:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
239:       "com.google.javascript.rhino.jstype.TemplatizedType",
240:       "com.google.javascript.rhino.jstype.Visitor",
241:       "com.google.javascript.rhino.jstype.NoResolvedType",
242:       "com.google.javascript.rhino.jstype.JSTypeNative",
243:       "com.google.javascript.rhino.jstype.AllType",
244:       "com.google.common.collect.Maps",
245:       "com.google.common.collect.SetMultimap",
246:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
247:       "com.google.common.collect.Maps$EntryTransformer",
248:       "com.google.javascript.rhino.JSTypeExpression",
249:       "com.google.common.collect.Iterators$MergingIterator"
250:     );
251:   } 
252: 
253:   private static void resetClasses() {
254:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_92_tmp__ESTest_scaffolding.class.getClassLoader()); 
255: 
256:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
257:       "com.google.javascript.rhino.Node",
258:       "com.google.javascript.rhino.Node$NumberNode",
259:       "com.google.javascript.rhino.Node$StringNode",
260:       "com.google.javascript.rhino.Node$AbstractPropListItem",
261:       "com.google.javascript.rhino.Node$ObjectPropListItem",
262:       "com.google.javascript.rhino.Node$IntPropListItem",
263:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
264:       "com.google.javascript.rhino.Node$AncestorIterable",
265:       "com.google.javascript.rhino.Node$NodeMismatch",
266:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
267:       "com.google.javascript.rhino.Node$SideEffectFlags",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Preconditions",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
301:       "com.google.javascript.rhino.jstype.JSType$1",
302:       "com.google.javascript.rhino.jstype.JSType",
303:       "com.google.javascript.rhino.jstype.ObjectType",
304:       "com.google.javascript.rhino.jstype.ProxyObjectType",
305:       "com.google.javascript.rhino.jstype.TemplateType",
306:       "com.google.javascript.rhino.jstype.ValueType",
307:       "com.google.javascript.rhino.jstype.BooleanType",
308:       "com.google.javascript.rhino.jstype.NullType",
309:       "com.google.javascript.rhino.jstype.NumberType",
310:       "com.google.javascript.rhino.jstype.StringType",
311:       "com.google.javascript.rhino.jstype.UnknownType",
312:       "com.google.javascript.rhino.jstype.VoidType",
313:       "com.google.javascript.rhino.jstype.AllType",
314:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
315:       "com.google.common.collect.ImmutableMap",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.collect.EmptyImmutableBiMap",
318:       "com.google.javascript.rhino.jstype.PropertyMap$1",
319:       "com.google.javascript.rhino.jstype.PropertyMap",
320:       "com.google.javascript.rhino.jstype.FunctionType",
321:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
322:       "com.google.javascript.rhino.Token",
323:       "com.google.javascript.rhino.jstype.ArrowType",
324:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
325:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
326:       "com.google.javascript.rhino.jstype.InstanceObjectType",
327:       "com.google.javascript.rhino.jstype.Property",
328:       "com.google.common.collect.Lists",
329:       "com.google.javascript.rhino.jstype.NoObjectType",
330:       "com.google.javascript.rhino.jstype.NoType",
331:       "com.google.javascript.rhino.jstype.NoResolvedType",
332:       "com.google.common.collect.SingletonImmutableList",
333:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
334:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
335:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
336:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
337:       "com.google.javascript.rhino.jstype.UnionType",
338:       "com.google.javascript.rhino.jstype.FunctionBuilder",
339:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.javascript.rhino.jstype.TernaryValue",
348:       "com.google.common.collect.Iterables",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
353:       "com.google.common.collect.Sets",
354:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
355:       "com.google.javascript.rhino.InputId",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
364:       "com.google.javascript.rhino.JSTypeExpression",
365:       "com.google.common.collect.Platform",
366:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
371:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.JSDocInfo$Marker",
374:       "com.google.common.collect.Iterators$12",
375:       "com.google.javascript.rhino.jstype.JSType$2",
376:       "com.google.common.collect.ImmutableList$1"
377:     );
378:   }
379: }

[MASTER] 10:36:58.657 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(950.1923499633118);
assertNotNull(node0);
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);

int int0 = node0.getIntProp(120);
assertEquals(0, int0);
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean0 = node0.isOr();
assertFalse(boolean0);
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);

Node node1 = new Node(15, node0, node0, node0);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertTrue(node1.hasOneChild());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isHook());
assertEquals(15, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dXY.AD&HI=");
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

boolean boolean2 = node1.isNew();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertTrue(node1.hasOneChild());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isHook());
assertEquals(15, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

boolean boolean3 = node1.isTry();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(boolean3);
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertTrue(node1.hasOneChild());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isHook());
assertEquals(15, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

boolean boolean4 = node1.isDo();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertFalse(boolean4);
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertTrue(node1.hasOneChild());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isHook());
assertEquals(15, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

Node node2 = new Node(37, node1, node1, node0, (-4053), 43);

[MASTER] 10:37:00.713 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_135_1628159820335/com/google/javascript/rhino/Node_135_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_135_1628159820335/com/google/javascript/rhino/Node_135_tmp__ESTest_scaffolding.java]]
[MASTER] 10:37:00.713 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:37:00.713 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:37:00.714 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1195
[MASTER] 10:37:00.717 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_135_1628159820335/com/google/javascript/rhino/Node_135_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:37:00 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.jstype.StaticSourceFile;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_135_tmp__ESTest extends Node_135_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString("", 0, 111);
23:       assertNotNull(node0);
24:       assertFalse(node0.isTypeOf());
25:       assertFalse(node0.isNumber());
26:       assertFalse(node0.isLabelName());
27:       assertFalse(node0.isAssignAdd());
28:       assertFalse(node0.isGetElem());
29:       assertFalse(node0.hasMoreThanOneChild());
30:       assertFalse(node0.isContinue());
31:       assertFalse(node0.isCast());
32:       assertFalse(node0.isLabel());
33:       assertFalse(node0.isAssign());
34:       assertFalse(node0.isReturn());
35:       assertFalse(node0.hasChildren());
36:       assertEquals(111, node0.getSourcePosition());
37:       assertFalse(node0.isDec());
38:       assertFalse(node0.isExprResult());
39:       assertFalse(node0.isAdd());
40:       assertFalse(node0.isDo());
41:       assertFalse(node0.isNew());
42:       assertFalse(node0.isOr());
43:       assertFalse(node0.isNull());
44:       assertFalse(node0.isSetterDef());
45:       assertEquals(0, node0.getLineno());
46:       assertFalse(node0.isName());
47:       assertFalse(node0.isGetProp());
48:       assertFalse(node0.isBreak());
49:       assertFalse(node0.isCall());
50:       assertFalse(node0.isThrow());
51:       assertEquals(40, node0.getType());
52:       assertFalse(node0.isFalse());
53:       assertFalse(node0.isComma());
54:       assertFalse(node0.isFunction());
55:       assertFalse(node0.isWhile());
56:       assertFalse(node0.isAnd());
57:       assertFalse(node0.isNot());
58:       assertFalse(node0.isDebugger());
59:       assertFalse(node0.isObjectLit());
60:       assertFalse(node0.isIf());
61:       assertFalse(node0.isNE());
62:       assertFalse(node0.isEmpty());
63:       assertFalse(node0.isDelProp());
64:       assertFalse(node0.isArrayLit());
65:       assertFalse(node0.isFor());
66:       assertFalse(node0.isRegExp());
67:       assertFalse(node0.isInc());
68:       assertFalse(node0.isDefaultCase());
69:       assertFalse(node0.isTrue());
70:       assertFalse(node0.isVoid());
71:       assertFalse(node0.isIn());
72:       assertFalse(node0.isThis());
73:       assertFalse(node0.isParamList());
74:       assertFalse(node0.isVar());
75:       assertFalse(node0.isHook());
76:       assertFalse(node0.isCatch());
77:       assertFalse(node0.isInstanceOf());
78:       assertFalse(node0.isWith());
79:       assertFalse(node0.isBlock());
80:       assertEquals(111, node0.getCharno());
81:       assertEquals(0, node0.getChildCount());
82:       assertFalse(node0.isScript());
83:       assertFalse(node0.isSwitch());
84:       assertTrue(node0.isString());
85:       assertFalse(node0.isCase());
86:       assertFalse(node0.isTry());
87:       assertFalse(node0.hasOneChild());
88:       assertFalse(node0.isStringKey());
89:       assertFalse(node0.isGetterDef());
90:       
91:       Node node1 = new Node(49, node0, 41, (-3141));
92:       assertFalse(node1.equals((Object)node0));
93:       assertNotNull(node1);
94:       assertFalse(node0.isTypeOf());
95:       assertFalse(node0.isNumber());
96:       assertFalse(node0.isLabelName());
97:       assertFalse(node0.isAssignAdd());
98:       assertFalse(node0.isGetElem());
99:       assertFalse(node0.hasMoreThanOneChild());
100:       assertFalse(node0.isContinue());
101:       assertFalse(node0.isCast());
102:       assertFalse(node0.isLabel());
103:       assertFalse(node0.isAssign());
104:       assertFalse(node0.isReturn());
105:       assertFalse(node0.hasChildren());
106:       assertEquals(111, node0.getSourcePosition());
107:       assertFalse(node0.isDec());
108:       assertFalse(node0.isExprResult());
109:       assertFalse(node0.isAdd());
110:       assertFalse(node0.isDo());
111:       assertFalse(node0.isNew());
112:       assertFalse(node0.isOr());
113:       assertFalse(node0.isNull());
114:       assertFalse(node0.isSetterDef());
115:       assertEquals(0, node0.getLineno());
116:       assertFalse(node0.isName());
117:       assertFalse(node0.isGetProp());
118:       assertFalse(node0.isBreak());
119:       assertFalse(node0.isCall());
120:       assertFalse(node0.isThrow());
121:       assertEquals(40, node0.getType());
122:       assertFalse(node0.isFalse());
123:       assertFalse(node0.isComma());
124:       assertFalse(node0.isFunction());
125:       assertFalse(node0.isWhile());
126:       assertFalse(node0.isAnd());
127:       assertFalse(node0.isNot());
128:       assertFalse(node0.isDebugger());
129:       assertFalse(node0.isObjectLit());
130:       assertFalse(node0.isIf());
131:       assertFalse(node0.isNE());
132:       assertFalse(node0.isEmpty());
133:       assertFalse(node0.isDelProp());
134:       assertFalse(node0.isArrayLit());
135:       assertFalse(node0.isFor());
136:       assertFalse(node0.isRegExp());
137:       assertFalse(node0.isInc());
138:       assertFalse(node0.isDefaultCase());
139:       assertFalse(node0.isTrue());
140:       assertFalse(node0.isVoid());
141:       assertFalse(node0.isIn());
142:       assertFalse(node0.isThis());
143:       assertFalse(node0.isParamList());
144:       assertFalse(node0.isVar());
145:       assertFalse(node0.isHook());
146:       assertFalse(node0.isCatch());
147:       assertFalse(node0.isInstanceOf());
148:       assertFalse(node0.isWith());
149:       assertFalse(node0.isBlock());
150:       assertEquals(111, node0.getCharno());
151:       assertEquals(0, node0.getChildCount());
152:       assertFalse(node0.isScript());
153:       assertFalse(node0.isSwitch());
154:       assertTrue(node0.isString());
155:       assertFalse(node0.isCase());
156:       assertFalse(node0.isTry());
157:       assertFalse(node0.hasOneChild());
158:       assertFalse(node0.isStringKey());
159:       assertFalse(node0.isGetterDef());
160:       assertFalse(node1.isDelProp());
161:       assertFalse(node1.isIf());
162:       assertFalse(node1.isGetterDef());
163:       assertTrue(node1.hasOneChild());
164:       assertEquals(49, node1.getType());
165:       assertFalse(node1.isEmpty());
166:       assertTrue(node1.hasChildren());
167:       assertFalse(node1.isIn());
168:       assertFalse(node1.isArrayLit());
169:       assertFalse(node1.isDebugger());
170:       assertFalse(node1.isVoid());
171:       assertFalse(node1.isTrue());
172:       assertFalse(node1.isNE());
173:       assertFalse(node1.isDefaultCase());
174:       assertFalse(node1.isInc());
175:       assertFalse(node1.isFunction());
176:       assertFalse(node1.isSetterDef());
177:       assertTrue(node1.isThrow());
178:       assertEquals((-1), node1.getCharno());
179:       assertFalse(node1.isSwitch());
180:       assertFalse(node1.isParamList());
181:       assertFalse(node1.isStringKey());
182:       assertFalse(node1.isWith());
183:       assertFalse(node1.isRegExp());
184:       assertFalse(node1.isCase());
185:       assertFalse(node1.hasMoreThanOneChild());
186:       assertFalse(node1.isScript());
187:       assertFalse(node1.isCatch());
188:       assertFalse(node1.isInstanceOf());
189:       assertFalse(node1.isHook());
190:       assertFalse(node1.isTry());
191:       assertEquals(1, node1.getChildCount());
192:       assertFalse(node1.isThis());
193:       assertFalse(node1.isBlock());
194:       assertFalse(node1.isFor());
195:       assertFalse(node1.isNumber());
196:       assertFalse(node1.isTypeOf());
197:       assertFalse(node1.isLabelName());
198:       assertFalse(node1.isAssign());
199:       assertEquals((-1), node1.getSourcePosition());
200:       assertFalse(node1.isDec());
201:       assertFalse(node1.isGetElem());
202:       assertFalse(node1.isCast());
203:       assertFalse(node1.isOr());
204:       assertEquals((-1), node1.getLineno());
205:       assertFalse(node1.isDo());
206:       assertFalse(node1.isContinue());
207:       assertFalse(node1.isAdd());
208:       assertFalse(node1.isLabel());
209:       assertFalse(node1.isNew());
210:       assertFalse(node1.isAssignAdd());
211:       assertFalse(node1.isVar());
212:       assertFalse(node1.isBreak());
213:       assertFalse(node1.isNull());
214:       assertFalse(node1.isComma());
215:       assertFalse(node1.isGetProp());
216:       assertFalse(node1.isFalse());
217:       assertFalse(node1.isCall());
218:       assertFalse(node1.isAnd());
219:       assertFalse(node1.isName());
220:       assertFalse(node1.isNot());
221:       assertFalse(node1.isObjectLit());
222:       assertFalse(node1.isExprResult());
223:       assertFalse(node1.isString());
224:       assertFalse(node1.isReturn());
225:       assertFalse(node1.isWhile());
226:       
227:       boolean boolean0 = node1.wasEmptyNode();
228:       assertFalse(node0.equals((Object)node1));
229:       assertFalse(node1.equals((Object)node0));
230:       assertFalse(boolean0);
231:       assertFalse(node0.isTypeOf());
232:       assertFalse(node0.isNumber());
233:       assertFalse(node0.isLabelName());
234:       assertFalse(node0.isAssignAdd());
235:       assertFalse(node0.isGetElem());
236:       assertFalse(node0.hasMoreThanOneChild());
237:       assertFalse(node0.isContinue());
238:       assertFalse(node0.isCast());
239:       assertFalse(node0.isLabel());
240:       assertFalse(node0.isAssign());
241:       assertFalse(node0.isReturn());
242:       assertFalse(node0.hasChildren());
243:       assertEquals(111, node0.getSourcePosition());
244:       assertFalse(node0.isDec());
245:       assertFalse(node0.isExprResult());
246:       assertFalse(node0.isAdd());
247:       assertFalse(node0.isDo());
248:       assertFalse(node0.isNew());
249:       assertFalse(node0.isOr());
250:       assertFalse(node0.isNull());
251:       assertFalse(node0.isSetterDef());
252:       assertEquals(0, node0.getLineno());
253:       assertFalse(node0.isName());
254:       assertFalse(node0.isGetProp());
255:       assertFalse(node0.isBreak());
256:       assertFalse(node0.isCall());
257:       assertFalse(node0.isThrow());
258:       assertEquals(40, node0.getType());
259:       assertFalse(node0.isFalse());
260:       assertFalse(node0.isComma());
261:       assertFalse(node0.isFunction());
262:       assertFalse(node0.isWhile());
263:       assertFalse(node0.isAnd());
264:       assertFalse(node0.isNot());
265:       assertFalse(node0.isDebugger());
266:       assertFalse(node0.isObjectLit());
267:       assertFalse(node0.isIf());
268:       assertFalse(node0.isNE());
269:       assertFalse(node0.isEmpty());
270:       assertFalse(node0.isDelProp());
271:       assertFalse(node0.isArrayLit());
272:       assertFalse(node0.isFor());
273:       assertFalse(node0.isRegExp());
274:       assertFalse(node0.isInc());
275:       assertFalse(node0.isDefaultCase());
276:       assertFalse(node0.isTrue());
277:       assertFalse(node0.isVoid());
278:       assertFalse(node0.isIn());
279:       assertFalse(node0.isThis());
280:       assertFalse(node0.isParamList());
281:       assertFalse(node0.isVar());
282:       assertFalse(node0.isHook());
283:       assertFalse(node0.isCatch());
284:       assertFalse(node0.isInstanceOf());
285:       assertFalse(node0.isWith());
286:       assertFalse(node0.isBlock());
287:       assertEquals(111, node0.getCharno());
288:       assertEquals(0, node0.getChildCount());
289:       assertFalse(node0.isScript());
290:       assertFalse(node0.isSwitch());
291:       assertTrue(node0.isString());
292:       assertFalse(node0.isCase());
293:       assertFalse(node0.isTry());
294:       assertFalse(node0.hasOneChild());
295:       assertFalse(node0.isStringKey());
296:       assertFalse(node0.isGetterDef());
297:       assertFalse(node1.isDelProp());
298:       assertFalse(node1.isIf());
299:       assertFalse(node1.isGetterDef());
300:       assertTrue(node1.hasOneChild());
301:       assertEquals(49, node1.getType());
302:       assertFalse(node1.isEmpty());
303:       assertTrue(node1.hasChildren());
304:       assertFalse(node1.isIn());
305:       assertFalse(node1.isArrayLit());
306:       assertFalse(node1.isDebugger());
307:       assertFalse(node1.isVoid());
308:       assertFalse(node1.isTrue());
309:       assertFalse(node1.isNE());
310:       assertFalse(node1.isDefaultCase());
311:       assertFalse(node1.isInc());
312:       assertFalse(node1.isFunction());
313:       assertFalse(node1.isSetterDef());
314:       assertTrue(node1.isThrow());
315:       assertEquals((-1), node1.getCharno());
316:       assertFalse(node1.isSwitch());
317:       assertFalse(node1.isParamList());
318:       assertFalse(node1.isStringKey());
319:       assertFalse(node1.isWith());
320:       assertFalse(node1.isRegExp());
321:       assertFalse(node1.isCase());
322:       assertFalse(node1.hasMoreThanOneChild());
323:       assertFalse(node1.isScript());
324:       assertFalse(node1.isCatch());
325:       assertFalse(node1.isInstanceOf());
326:       assertFalse(node1.isHook());
327:       assertFalse(node1.isTry());
328:       assertEquals(1, node1.getChildCount());
329:       assertFalse(node1.isThis());
330:       assertFalse(node1.isBlock());
331:       assertFalse(node1.isFor());
332:       assertFalse(node1.isNumber());
333:       assertFalse(node1.isTypeOf());
334:       assertFalse(node1.isLabelName());
335:       assertFalse(node1.isAssign());
336:       assertEquals((-1), node1.getSourcePosition());
337:       assertFalse(node1.isDec());
338:       assertFalse(node1.isGetElem());
339:       assertFalse(node1.isCast());
340:       assertFalse(node1.isOr());
341:       assertEquals((-1), node1.getLineno());
342:       assertFalse(node1.isDo());
343:       assertFalse(node1.isContinue());
344:       assertFalse(node1.isAdd());
345:       assertFalse(node1.isLabel());
346:       assertFalse(node1.isNew());
347:       assertFalse(node1.isAssignAdd());
348:       assertFalse(node1.isVar());
349:       assertFalse(node1.isBreak());
350:       assertFalse(node1.isNull());
351:       assertFalse(node1.isComma());
352:       assertFalse(node1.isGetProp());
353:       assertFalse(node1.isFalse());
354:       assertFalse(node1.isCall());
355:       assertFalse(node1.isAnd());
356:       assertFalse(node1.isName());
357:       assertFalse(node1.isNot());
358:       assertFalse(node1.isObjectLit());
359:       assertFalse(node1.isExprResult());
360:       assertFalse(node1.isString());
361:       assertFalse(node1.isReturn());
362:       assertFalse(node1.isWhile());
363:       
364:       String string0 = node1.checkTreeEquals(node0);
365:       assertFalse(node0.equals((Object)node1));
366:       assertFalse(node1.equals((Object)node0));
367:       assertNotNull(string0);
368:       assertEquals("Node tree inequality:\nTree1:\nTHROW\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: THROW\n    STRING  0\n\n\nSubtree2: STRING  0\n", string0);
369:       assertFalse(node0.isTypeOf());
370:       assertFalse(node0.isNumber());
371:       assertFalse(node0.isLabelName());
372:       assertFalse(node0.isAssignAdd());
373:       assertFalse(node0.isGetElem());
374:       assertFalse(node0.hasMoreThanOneChild());
375:       assertFalse(node0.isContinue());
376:       assertFalse(node0.isCast());
377:       assertFalse(node0.isLabel());
378:       assertFalse(node0.isAssign());
379:       assertFalse(node0.isReturn());
380:       assertFalse(node0.hasChildren());
381:       assertEquals(111, node0.getSourcePosition());
382:       assertFalse(node0.isDec());
383:       assertFalse(node0.isExprResult());
384:       assertFalse(node0.isAdd());
385:       assertFalse(node0.isDo());
386:       assertFalse(node0.isNew());
387:       assertFalse(node0.isOr());
388:       assertFalse(node0.isNull());
389:       assertFalse(node0.isSetterDef());
390:       assertEquals(0, node0.getLineno());
391:       assertFalse(node0.isName());
392:       assertFalse(node0.isGetProp());
393:       assertFalse(node0.isBreak());
394:       assertFalse(node0.isCall());
395:       assertFalse(node0.isThrow());
396:       assertEquals(40, node0.getType());
397:       assertFalse(node0.isFalse());
398:       assertFalse(node0.isComma());
399:       assertFalse(node0.isFunction());
400:       assertFalse(node0.isWhile());
401:       assertFalse(node0.isAnd());
402:       assertFalse(node0.isNot());
403:       assertFalse(node0.isDebugger());
404:       assertFalse(node0.isObjectLit());
405:       assertFalse(node0.isIf());
406:       assertFalse(node0.isNE());
407:       assertFalse(node0.isEmpty());
408:       assertFalse(node0.isDelProp());
409:       assertFalse(node0.isArrayLit());
410:       assertFalse(node0.isFor());
411:       assertFalse(node0.isRegExp());
412:       assertFalse(node0.isInc());
413:       assertFalse(node0.isDefaultCase());
414:       assertFalse(node0.isTrue());
415:       assertFalse(node0.isVoid());
416:       assertFalse(node0.isIn());
417:       assertFalse(node0.isThis());
418:       assertFalse(node0.isParamList());
419:       assertFalse(node0.isVar());
420:       assertFalse(node0.isHook());
421:       assertFalse(node0.isCatch());
422:       assertFalse(node0.isInstanceOf());
423:       assertFalse(node0.isWith());
424:       assertFalse(node0.isBlock());
425:       assertEquals(111, node0.getCharno());
426:       assertEquals(0, node0.getChildCount());
427:       assertFalse(node0.isScript());
428:       assertFalse(node0.isSwitch());
429:       assertTrue(node0.isString());
430:       assertFalse(node0.isCase());
431:       assertFalse(node0.isTry());
432:       assertFalse(node0.hasOneChild());
433:       assertFalse(node0.isStringKey());
434:       assertFalse(node0.isGetterDef());
435:       assertFalse(node1.isDelProp());
436:       assertFalse(node1.isIf());
437:       assertFalse(node1.isGetterDef());
438:       assertTrue(node1.hasOneChild());
439:       assertEquals(49, node1.getType());
440:       assertFalse(node1.isEmpty());
441:       assertTrue(node1.hasChildren());
442:       assertFalse(node1.isIn());
443:       assertFalse(node1.isArrayLit());
444:       assertFalse(node1.isDebugger());
445:       assertFalse(node1.isVoid());
446:       assertFalse(node1.isTrue());
447:       assertFalse(node1.isNE());
448:       assertFalse(node1.isDefaultCase());
449:       assertFalse(node1.isInc());
450:       assertFalse(node1.isFunction());
451:       assertFalse(node1.isSetterDef());
452:       assertTrue(node1.isThrow());
453:       assertEquals((-1), node1.getCharno());
454:       assertFalse(node1.isSwitch());
455:       assertFalse(node1.isParamList());
456:       assertFalse(node1.isStringKey());
457:       assertFalse(node1.isWith());
458:       assertFalse(node1.isRegExp());
459:       assertFalse(node1.isCase());
460:       assertFalse(node1.hasMoreThanOneChild());
461:       assertFalse(node1.isScript());
462:       assertFalse(node1.isCatch());
463:       assertFalse(node1.isInstanceOf());
464:       assertFalse(node1.isHook());
465:       assertFalse(node1.isTry());
466:       assertEquals(1, node1.getChildCount());
467:       assertFalse(node1.isThis());
468:       assertFalse(node1.isBlock());
469:       assertFalse(node1.isFor());
470:       assertFalse(node1.isNumber());
471:       assertFalse(node1.isTypeOf());
472:       assertFalse(node1.isLabelName());
473:       assertFalse(node1.isAssign());
474:       assertEquals((-1), node1.getSourcePosition());
475:       assertFalse(node1.isDec());
476:       assertFalse(node1.isGetElem());
477:       assertFalse(node1.isCast());
478:       assertFalse(node1.isOr());
479:       assertEquals((-1), node1.getLineno());
480:       assertFalse(node1.isDo());
481:       assertFalse(node1.isContinue());
482:       assertFalse(node1.isAdd());
483:       assertFalse(node1.isLabel());
484:       assertFalse(node1.isNew());
485:       assertFalse(node1.isAssignAdd());
486:       assertFalse(node1.isVar());
487:       assertFalse(node1.isBreak());
488:       assertFalse(node1.isNull());
489:       assertFalse(node1.isComma());
490:       assertFalse(node1.isGetProp());
491:       assertFalse(node1.isFalse());
492:       assertFalse(node1.isCall());
493:       assertFalse(node1.isAnd());
494:       assertFalse(node1.isName());
495:       assertFalse(node1.isNot());
496:       assertFalse(node1.isObjectLit());
497:       assertFalse(node1.isExprResult());
498:       assertFalse(node1.isString());
499:       assertFalse(node1.isReturn());
500:       assertFalse(node1.isWhile());
501:       
502:       String string1 = node1.getQualifiedName();
503:       assertFalse(node0.equals((Object)node1));
504:       assertFalse(node1.equals((Object)node0));
505:       assertNull(string1);
506:       assertFalse(node0.isTypeOf());
507:       assertFalse(node0.isNumber());
508:       assertFalse(node0.isLabelName());
509:       assertFalse(node0.isAssignAdd());
510:       assertFalse(node0.isGetElem());
511:       assertFalse(node0.hasMoreThanOneChild());
512:       assertFalse(node0.isContinue());
513:       assertFalse(node0.isCast());
514:       assertFalse(node0.isLabel());
515:       assertFalse(node0.isAssign());
516:       assertFalse(node0.isReturn());
517:       assertFalse(node0.hasChildren());
518:       assertEquals(111, node0.getSourcePosition());
519:       assertFalse(node0.isDec());
520:       assertFalse(node0.isExprResult());
521:       assertFalse(node0.isAdd());
522:       assertFalse(node0.isDo());
523:       assertFalse(node0.isNew());
524:       assertFalse(node0.isOr());
525:       assertFalse(node0.isNull());
526:       assertFalse(node0.isSetterDef());
527:       assertEquals(0, node0.getLineno());
528:       assertFalse(node0.isName());
529:       assertFalse(node0.isGetProp());
530:       assertFalse(node0.isBreak());
531:       assertFalse(node0.isCall());
532:       assertFalse(node0.isThrow());
533:       assertEquals(40, node0.getType());
534:       assertFalse(node0.isFalse());
535:       assertFalse(node0.isComma());
536:       assertFalse(node0.isFunction());
537:       assertFalse(node0.isWhile());
538:       assertFalse(node0.isAnd());
539:       assertFalse(node0.isNot());
540:       assertFalse(node0.isDebugger());
541:       assertFalse(node0.isObjectLit());
542:       assertFalse(node0.isIf());
543:       assertFalse(node0.isNE());
544:       assertFalse(node0.isEmpty());
545:       assertFalse(node0.isDelProp());
546:       assertFalse(node0.isArrayLit());
547:       assertFalse(node0.isFor());
548:       assertFalse(node0.isRegExp());
549:       assertFalse(node0.isInc());
550:       assertFalse(node0.isDefaultCase());
551:       assertFalse(node0.isTrue());
552:       assertFalse(node0.isVoid());
553:       assertFalse(node0.isIn());
554:       assertFalse(node0.isThis());
555:       assertFalse(node0.isParamList());
556:       assertFalse(node0.isVar());
557:       assertFalse(node0.isHook());
558:       assertFalse(node0.isCatch());
559:       assertFalse(node0.isInstanceOf());
560:       assertFalse(node0.isWith());
561:       assertFalse(node0.isBlock());
562:       assertEquals(111, node0.getCharno());
563:       assertEquals(0, node0.getChildCount());
564:       assertFalse(node0.isScript());
565:       assertFalse(node0.isSwitch());
566:       assertTrue(node0.isString());
567:       assertFalse(node0.isCase());
568:       assertFalse(node0.isTry());
569:       assertFalse(node0.hasOneChild());
570:       assertFalse(node0.isStringKey());
571:       assertFalse(node0.isGetterDef());
572:       assertFalse(node1.isDelProp());
573:       assertFalse(node1.isIf());
574:       assertFalse(node1.isGetterDef());
575:       assertTrue(node1.hasOneChild());
576:       assertEquals(49, node1.getType());
577:       assertFalse(node1.isEmpty());
578:       assertTrue(node1.hasChildren());
579:       assertFalse(node1.isIn());
580:       assertFalse(node1.isArrayLit());
581:       assertFalse(node1.isDebugger());
582:       assertFalse(node1.isVoid());
583:       assertFalse(node1.isTrue());
584:       assertFalse(node1.isNE());
585:       assertFalse(node1.isDefaultCase());
586:       assertFalse(node1.isInc());
587:       assertFalse(node1.isFunction());
588:       assertFalse(node1.isSetterDef());
589:       assertTrue(node1.isThrow());
590:       assertEquals((-1), node1.getCharno());
591:       assertFalse(node1.isSwitch());
592:       assertFalse(node1.isParamList());
593:       assertFalse(node1.isStringKey());
594:       assertFalse(node1.isWith());
595:       assertFalse(node1.isRegExp());
596:       assertFalse(node1.isCase());
597:       assertFalse(node1.hasMoreThanOneChild());
598:       assertFalse(node1.isScript());
599:       assertFalse(node1.isCatch());
600:       assertFalse(node1.isInstanceOf());
601:       assertFalse(node1.isHook());
602:       assertFalse(node1.isTry());
603:       assertEquals(1, node1.getChildCount());
604:       assertFalse(node1.isThis());
605:       assertFalse(node1.isBlock());
606:       assertFalse(node1.isFor());
607:       assertFalse(node1.isNumber());
608:       assertFalse(node1.isTypeOf());
609:       assertFalse(node1.isLabelName());
610:       assertFalse(node1.isAssign());
611:       assertEquals((-1), node1.getSourcePosition());
612:       assertFalse(node1.isDec());
613:       assertFalse(node1.isGetElem());
614:       assertFalse(node1.isCast());
615:       assertFalse(node1.isOr());
616:       assertEquals((-1), node1.getLineno());
617:       assertFalse(node1.isDo());
618:       assertFalse(node1.isContinue());
619:       assertFalse(node1.isAdd());
620:       assertFalse(node1.isLabel());
621:       assertFalse(node1.isNew());
622:       assertFalse(node1.isAssignAdd());
623:       assertFalse(node1.isVar());
624:       assertFalse(node1.isBreak());
625:       assertFalse(node1.isNull());
626:       assertFalse(node1.isComma());
627:       assertFalse(node1.isGetProp());
628:       assertFalse(node1.isFalse());
629:       assertFalse(node1.isCall());
630:       assertFalse(node1.isAnd());
631:       assertFalse(node1.isName());
632:       assertFalse(node1.isNot());
633:       assertFalse(node1.isObjectLit());
634:       assertFalse(node1.isExprResult());
635:       assertFalse(node1.isString());
636:       assertFalse(node1.isReturn());
637:       assertFalse(node1.isWhile());
638:       
639:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
640:       assertFalse(node0.equals((Object)node1));
641:       assertFalse(node1.equals((Object)node0));
642:       assertNotNull(node_NodeMismatch0);
643:       assertFalse(node0.isTypeOf());
644:       assertFalse(node0.isNumber());
645:       assertFalse(node0.isLabelName());
646:       assertFalse(node0.isAssignAdd());
647:       assertFalse(node0.isGetElem());
648:       assertFalse(node0.hasMoreThanOneChild());
649:       assertFalse(node0.isContinue());
650:       assertFalse(node0.isCast());
651:       assertFalse(node0.isLabel());
652:       assertFalse(node0.isAssign());
653:       assertFalse(node0.isReturn());
654:       assertFalse(node0.hasChildren());
655:       assertEquals(111, node0.getSourcePosition());
656:       assertFalse(node0.isDec());
657:       assertFalse(node0.isExprResult());
658:       assertFalse(node0.isAdd());
659:       assertFalse(node0.isDo());
660:       assertFalse(node0.isNew());
661:       assertFalse(node0.isOr());
662:       assertFalse(node0.isNull());
663:       assertFalse(node0.isSetterDef());
664:       assertEquals(0, node0.getLineno());
665:       assertFalse(node0.isName());
666:       assertFalse(node0.isGetProp());
667:       assertFalse(node0.isBreak());
668:       assertFalse(node0.isCall());
669:       assertFalse(node0.isThrow());
670:       assertEquals(40, node0.getType());
671:       assertFalse(node0.isFalse());
672:       assertFalse(node0.isComma());
673:       assertFalse(node0.isFunction());
674:       assertFalse(node0.isWhile());
675:       assertFalse(node0.isAnd());
676:       assertFalse(node0.isNot());
677:       assertFalse(node0.isDebugger());
678:       assertFalse(node0.isObjectLit());
679:       assertFalse(node0.isIf());
680:       assertFalse(node0.isNE());
681:       assertFalse(node0.isEmpty());
682:       assertFalse(node0.isDelProp());
683:       assertFalse(node0.isArrayLit());
684:       assertFalse(node0.isFor());
685:       assertFalse(node0.isRegExp());
686:       assertFalse(node0.isInc());
687:       assertFalse(node0.isDefaultCase());
688:       assertFalse(node0.isTrue());
689:       assertFalse(node0.isVoid());
690:       assertFalse(node0.isIn());
691:       assertFalse(node0.isThis());
692:       assertFalse(node0.isParamList());
693:       assertFalse(node0.isVar());
694:       assertFalse(node0.isHook());
695:       assertFalse(node0.isCatch());
696:       assertFalse(node0.isInstanceOf());
697:       assertFalse(node0.isWith());
698:       assertFalse(node0.isBlock());
699:       assertEquals(111, node0.getCharno());
700:       assertEquals(0, node0.getChildCount());
701:       assertFalse(node0.isScript());
702:       assertFalse(node0.isSwitch());
703:       assertTrue(node0.isString());
704:       assertFalse(node0.isCase());
705:       assertFalse(node0.isTry());
706:       assertFalse(node0.hasOneChild());
707:       assertFalse(node0.isStringKey());
708:       assertFalse(node0.isGetterDef());
709:       assertFalse(node1.isDelProp());
710:       assertFalse(node1.isIf());
711:       assertFalse(node1.isGetterDef());
712:       assertTrue(node1.hasOneChild());
713:       assertEquals(49, node1.getType());
714:       assertFalse(node1.isEmpty());
715:       assertTrue(node1.hasChildren());
716:       assertFalse(node1.isIn());
717:       assertFalse(node1.isArrayLit());
718:       assertFalse(node1.isDebugger());
719:       assertFalse(node1.isVoid());
720:       assertFalse(node1.isTrue());
721:       assertFalse(node1.isNE());
722:       assertFalse(node1.isDefaultCase());
723:       assertFalse(node1.isInc());
724:       assertFalse(node1.isFunction());
725:       assertFalse(node1.isSetterDef());
726:       assertTrue(node1.isThrow());
727:       assertEquals((-1), node1.getCharno());
728:       assertFalse(node1.isSwitch());
729:       assertFalse(node1.isParamList());
730:       assertFalse(node1.isStringKey());
731:       assertFalse(node1.isWith());
732:       assertFalse(node1.isRegExp());
733:       assertFalse(node1.isCase());
734:       assertFalse(node1.hasMoreThanOneChild());
735:       assertFalse(node1.isScript());
736:       assertFalse(node1.isCatch());
737:       assertFalse(node1.isInstanceOf());
738:       assertFalse(node1.isHook());
739:       assertFalse(node1.isTry());
740:       assertEquals(1, node1.getChildCount());
741:       assertFalse(node1.isThis());
742:       assertFalse(node1.isBlock());
743:       assertFalse(node1.isFor());
744:       assertFalse(node1.isNumber());
745:       assertFalse(node1.isTypeOf());
746:       assertFalse(node1.isLabelName());
747:       assertFalse(node1.isAssign());
748:       assertEquals((-1), node1.getSourcePosition());
749:       assertFalse(node1.isDec());
750:       assertFalse(node1.isGetElem());
751:       assertFalse(node1.isCast());
752:       assertFalse(node1.isOr());
753:       assertEquals((-1), node1.getLineno());
754:       assertFalse(node1.isDo());
755:       assertFalse(node1.isContinue());
756:       assertFalse(node1.isAdd());
757:       assertFalse(node1.isLabel());
758:       assertFalse(node1.isNew());
759:       assertFalse(node1.isAssignAdd());
760:       assertFalse(node1.isVar());
761:       assertFalse(node1.isBreak());
762:       assertFalse(node1.isNull());
763:       assertFalse(node1.isComma());
764:       assertFalse(node1.isGetProp());
765:       assertFalse(node1.isFalse());
766:       assertFalse(node1.isCall());
767:       assertFalse(node1.isAnd());
768:       assertFalse(node1.isName());
769:       assertFalse(node1.isNot());
770:       assertFalse(node1.isObjectLit());
771:       assertFalse(node1.isExprResult());
772:       assertFalse(node1.isString());
773:       assertFalse(node1.isReturn());
774:       assertFalse(node1.isWhile());
775:       
776:       Node node2 = node0.getLastSibling();
777:       assertSame(node0, node2);
778:       assertSame(node2, node0);
779:       assertFalse(node0.equals((Object)node1));
780:       assertFalse(node2.equals((Object)node1));
781:       assertNotNull(node2);
782:       assertFalse(node0.isTypeOf());
783:       assertFalse(node0.isNumber());
784:       assertFalse(node0.isLabelName());
785:       assertFalse(node0.isAssignAdd());
786:       assertFalse(node0.isGetElem());
787:       assertFalse(node0.hasMoreThanOneChild());
788:       assertFalse(node0.isContinue());
789:       assertFalse(node0.isCast());
790:       assertFalse(node0.isLabel());
791:       assertFalse(node0.isAssign());
792:       assertFalse(node0.isReturn());
793:       assertFalse(node0.hasChildren());
794:       assertEquals(111, node0.getSourcePosition());
795:       assertFalse(node0.isDec());
796:       assertFalse(node0.isExprResult());
797:       assertFalse(node0.isAdd());
798:       assertFalse(node0.isDo());
799:       assertFalse(node0.isNew());
800:       assertFalse(node0.isOr());
801:       assertFalse(node0.isNull());
802:       assertFalse(node0.isSetterDef());
803:       assertEquals(0, node0.getLineno());
804:       assertFalse(node0.isName());
805:       assertFalse(node0.isGetProp());
806:       assertFalse(node0.isBreak());
807:       assertFalse(node0.isCall());
808:       assertFalse(node0.isThrow());
809:       assertEquals(40, node0.getType());
810:       assertFalse(node0.isFalse());
811:       assertFalse(node0.isComma());
812:       assertFalse(node0.isFunction());
813:       assertFalse(node0.isWhile());
814:       assertFalse(node0.isAnd());
815:       assertFalse(node0.isNot());
816:       assertFalse(node0.isDebugger());
817:       assertFalse(node0.isObjectLit());
818:       assertFalse(node0.isIf());
819:       assertFalse(node0.isNE());
820:       assertFalse(node0.isEmpty());
821:       assertFalse(node0.isDelProp());
822:       assertFalse(node0.isArrayLit());
823:       assertFalse(node0.isFor());
824:       assertFalse(node0.isRegExp());
825:       assertFalse(node0.isInc());
826:       assertFalse(node0.isDefaultCase());
827:       assertFalse(node0.isTrue());
828:       assertFalse(node0.isVoid());
829:       assertFalse(node0.isIn());
830:       assertFalse(node0.isThis());
831:       assertFalse(node0.isParamList());
832:       assertFalse(node0.isVar());
833:       assertFalse(node0.isHook());
834:       assertFalse(node0.isCatch());
835:       assertFalse(node0.isInstanceOf());
836:       assertFalse(node0.isWith());
837:       assertFalse(node0.isBlock());
838:       assertEquals(111, node0.getCharno());
839:       assertEquals(0, node0.getChildCount());
840:       assertFalse(node0.isScript());
841:       assertFalse(node0.isSwitch());
842:       assertTrue(node0.isString());
843:       assertFalse(node0.isCase());
844:       assertFalse(node0.isTry());
845:       assertFalse(node0.hasOneChild());
846:       assertFalse(node0.isStringKey());
847:       assertFalse(node0.isGetterDef());
848:       assertFalse(node2.isBlock());
849:       assertFalse(node2.isAdd());
850:       assertFalse(node2.isVar());
851:       assertEquals(111, node2.getSourcePosition());
852:       assertFalse(node2.isStringKey());
853:       assertFalse(node2.isNull());
854:       assertFalse(node2.isParamList());
855:       assertFalse(node2.isCall());
856:       assertFalse(node2.isName());
857:       assertEquals(0, node2.getLineno());
858:       assertFalse(node2.isLabel());
859:       assertFalse(node2.isAssignAdd());
860:       assertFalse(node2.isContinue());
861:       assertFalse(node2.isOr());
862:       assertEquals(0, node2.getChildCount());
863:       assertEquals(40, node2.getType());
864:       assertFalse(node2.isSetterDef());
865:       assertFalse(node2.isDefaultCase());
866:       assertFalse(node2.isNew());
867:       assertFalse(node2.isDo());
868:       assertFalse(node2.isCast());
869:       assertFalse(node2.isExprResult());
870:       assertFalse(node2.isFunction());
871:       assertFalse(node2.isTrue());
872:       assertFalse(node2.isDebugger());
873:       assertFalse(node2.isAssign());
874:       assertFalse(node2.isGetElem());
875:       assertFalse(node2.isAnd());
876:       assertFalse(node2.isDelProp());
877:       assertFalse(node2.isVoid());
878:       assertFalse(node2.isReturn());
879:       assertFalse(node2.isComma());
880:       assertFalse(node2.isDec());
881:       assertFalse(node2.isNot());
882:       assertFalse(node2.isObjectLit());
883:       assertFalse(node2.isTypeOf());
884:       assertFalse(node2.isWhile());
885:       assertFalse(node2.hasChildren());
886:       assertFalse(node2.isGetProp());
887:       assertFalse(node2.isHook());
888:       assertFalse(node2.isFalse());
889:       assertFalse(node2.isBreak());
890:       assertFalse(node2.isSwitch());
891:       assertFalse(node2.isIn());
892:       assertFalse(node2.isThrow());
893:       assertFalse(node2.isEmpty());
894:       assertFalse(node2.isInc());
895:       assertFalse(node2.isRegExp());
896:       assertFalse(node2.isWith());
897:       assertFalse(node2.isIf());
898:       assertFalse(node2.isNE());
899:       assertFalse(node2.isArrayLit());
900:       assertFalse(node2.isLabelName());
901:       assertFalse(node2.isInstanceOf());
902:       assertFalse(node2.isCatch());
903:       assertFalse(node2.isThis());
904:       assertFalse(node2.hasMoreThanOneChild());
905:       assertEquals(111, node2.getCharno());
906:       assertFalse(node2.isNumber());
907:       assertFalse(node2.isGetterDef());
908:       assertFalse(node2.isScript());
909:       assertFalse(node2.isFor());
910:       assertTrue(node2.isString());
911:       assertFalse(node2.isCase());
912:       assertFalse(node2.hasOneChild());
913:       assertFalse(node2.isTry());
914:       
915:       boolean boolean1 = node1.isEquivalentToTyped(node2);
916:       assertSame(node0, node2);
917:       assertSame(node2, node0);
918:       assertFalse(node0.equals((Object)node1));
919:       assertFalse(node1.equals((Object)node2));
920:       assertFalse(node1.equals((Object)node0));
921:       assertFalse(node2.equals((Object)node1));
922:       assertTrue(boolean1 == boolean0);
923:       assertFalse(boolean1);
924:       assertFalse(node0.isTypeOf());
925:       assertFalse(node0.isNumber());
926:       assertFalse(node0.isLabelName());
927:       assertFalse(node0.isAssignAdd());
928:       assertFalse(node0.isGetElem());
929:       assertFalse(node0.hasMoreThanOneChild());
930:       assertFalse(node0.isContinue());
931:       assertFalse(node0.isCast());
932:       assertFalse(node0.isLabel());
933:       assertFalse(node0.isAssign());
934:       assertFalse(node0.isReturn());
935:       assertFalse(node0.hasChildren());
936:       assertEquals(111, node0.getSourcePosition());
937:       assertFalse(node0.isDec());
938:       assertFalse(node0.isExprResult());
939:       assertFalse(node0.isAdd());
940:       assertFalse(node0.isDo());
941:       assertFalse(node0.isNew());
942:       assertFalse(node0.isOr());
943:       assertFalse(node0.isNull());
944:       assertFalse(node0.isSetterDef());
945:       assertEquals(0, node0.getLineno());
946:       assertFalse(node0.isName());
947:       assertFalse(node0.isGetProp());
948:       assertFalse(node0.isBreak());
949:       assertFalse(node0.isCall());
950:       assertFalse(node0.isThrow());
951:       assertEquals(40, node0.getType());
952:       assertFalse(node0.isFalse());
953:       assertFalse(node0.isComma());
954:       assertFalse(node0.isFunction());
955:       assertFalse(node0.isWhile());
956:       assertFalse(node0.isAnd());
957:       assertFalse(node0.isNot());
958:       assertFalse(node0.isDebugger());
959:       assertFalse(node0.isObjectLit());
960:       assertFalse(node0.isIf());
961:       assertFalse(node0.isNE());
962:       assertFalse(node0.isEmpty());
963:       assertFalse(node0.isDelProp());
964:       assertFalse(node0.isArrayLit());
965:       assertFalse(node0.isFor());
966:       assertFalse(node0.isRegExp());
967:       assertFalse(node0.isInc());
968:       assertFalse(node0.isDefaultCase());
969:       assertFalse(node0.isTrue());
970:       assertFalse(node0.isVoid());
971:       assertFalse(node0.isIn());
972:       assertFalse(node0.isThis());
973:       assertFalse(node0.isParamList());
974:       assertFalse(node0.isVar());
975:       assertFalse(node0.isHook());
976:       assertFalse(node0.isCatch());
977:       assertFalse(node0.isInstanceOf());
978:       assertFalse(node0.isWith());
979:       assertFalse(node0.isBlock());
980:       assertEquals(111, node0.getCharno());
981:       assertEquals(0, node0.getChildCount());
982:       assertFalse(node0.isScript());
983:       assertFalse(node0.isSwitch());
984:       assertTrue(node0.isString());
985:       assertFalse(node0.isCase());
986:       assertFalse(node0.isTry());
987:       assertFalse(node0.hasOneChild());
988:       assertFalse(node0.isStringKey());
989:       assertFalse(node0.isGetterDef());
990:       assertFalse(node1.isDelProp());
991:       assertFalse(node1.isIf());
992:       assertFalse(node1.isGetterDef());
993:       assertTrue(node1.hasOneChild());
994:       assertEquals(49, node1.getType());
995:       assertFalse(node1.isEmpty());
996:       assertTrue(node1.hasChildren());
997:       assertFalse(node1.isIn());
998:       assertFalse(node1.isArrayLit());
999:       assertFalse(node1.isDebugger());
1000:       assertFalse(node1.isVoid());
1001:       assertFalse(node1.isTrue());
1002:       assertFalse(node1.isNE());
1003:       assertFalse(node1.isDefaultCase());
1004:       assertFalse(node1.isInc());
1005:       assertFalse(node1.isFunction());
1006:       assertFalse(node1.isSetterDef());
1007:       assertTrue(node1.isThrow());
1008:       assertEquals((-1), node1.getCharno());
1009:       assertFalse(node1.isSwitch());
1010:       assertFalse(node1.isParamList());
1011:       assertFalse(node1.isStringKey());
1012:       assertFalse(node1.isWith());
1013:       assertFalse(node1.isRegExp());
1014:       assertFalse(node1.isCase());
1015:       assertFalse(node1.hasMoreThanOneChild());
1016:       assertFalse(node1.isScript());
1017:       assertFalse(node1.isCatch());
1018:       assertFalse(node1.isInstanceOf());
1019:       assertFalse(node1.isHook());
1020:       assertFalse(node1.isTry());
1021:       assertEquals(1, node1.getChildCount());
1022:       assertFalse(node1.isThis());
1023:       assertFalse(node1.isBlock());
1024:       assertFalse(node1.isFor());
1025:       assertFalse(node1.isNumber());
1026:       assertFalse(node1.isTypeOf());
1027:       assertFalse(node1.isLabelName());
1028:       assertFalse(node1.isAssign());
1029:       assertEquals((-1), node1.getSourcePosition());
1030:       assertFalse(node1.isDec());
1031:       assertFalse(node1.isGetElem());
1032:       assertFalse(node1.isCast());
1033:       assertFalse(node1.isOr());
1034:       assertEquals((-1), node1.getLineno());
1035:       assertFalse(node1.isDo());
1036:       assertFalse(node1.isContinue());
1037:       assertFalse(node1.isAdd());
1038:       assertFalse(node1.isLabel());
1039:       assertFalse(node1.isNew());
1040:       assertFalse(node1.isAssignAdd());
1041:       assertFalse(node1.isVar());
1042:       assertFalse(node1.isBreak());
1043:       assertFalse(node1.isNull());
1044:       assertFalse(node1.isComma());
1045:       assertFalse(node1.isGetProp());
1046:       assertFalse(node1.isFalse());
1047:       assertFalse(node1.isCall());
1048:       assertFalse(node1.isAnd());
1049:       assertFalse(node1.isName());
1050:       assertFalse(node1.isNot());
1051:       assertFalse(node1.isObjectLit());
1052:       assertFalse(node1.isExprResult());
1053:       assertFalse(node1.isString());
1054:       assertFalse(node1.isReturn());
1055:       assertFalse(node1.isWhile());
1056:       assertFalse(node2.isBlock());
1057:       assertFalse(node2.isAdd());
1058:       assertFalse(node2.isVar());
1059:       assertEquals(111, node2.getSourcePosition());
1060:       assertFalse(node2.isStringKey());
1061:       assertFalse(node2.isNull());
1062:       assertFalse(node2.isParamList());
1063:       assertFalse(node2.isCall());
1064:       assertFalse(node2.isName());
1065:       assertEquals(0, node2.getLineno());
1066:       assertFalse(node2.isLabel());
1067:       assertFalse(node2.isAssignAdd());
1068:       assertFalse(node2.isContinue());
1069:       assertFalse(node2.isOr());
1070:       assertEquals(0, node2.getChildCount());
1071:       assertEquals(40, node2.getType());
1072:       assertFalse(node2.isSetterDef());
1073:       assertFalse(node2.isDefaultCase());
1074:       assertFalse(node2.isNew());
1075:       assertFalse(node2.isDo());
1076:       assertFalse(node2.isCast());
1077:       assertFalse(node2.isExprResult());
1078:       assertFalse(node2.isFunction());
1079:       assertFalse(node2.isTrue());
1080:       assertFalse(node2.isDebugger());
1081:       assertFalse(node2.isAssign());
1082:       assertFalse(node2.isGetElem());
1083:       assertFalse(node2.isAnd());
1084:       assertFalse(node2.isDelProp());
1085:       assertFalse(node2.isVoid());
1086:       assertFalse(node2.isReturn());
1087:       assertFalse(node2.isComma());
1088:       assertFalse(node2.isDec());
1089:       assertFalse(node2.isNot());
1090:       assertFalse(node2.isObjectLit());
1091:       assertFalse(node2.isTypeOf());
1092:       assertFalse(node2.isWhile());
1093:       assertFalse(node2.hasChildren());
1094:       assertFalse(node2.isGetProp());
1095:       assertFalse(node2.isHook());
1096:       assertFalse(node2.isFalse());
1097:       assertFalse(node2.isBreak());
1098:       assertFalse(node2.isSwitch());
1099:       assertFalse(node2.isIn());
1100:       assertFalse(node2.isThrow());
1101:       assertFalse(node2.isEmpty());
1102:       assertFalse(node2.isInc());
1103:       assertFalse(node2.isRegExp());
1104:       assertFalse(node2.isWith());
1105:       assertFalse(node2.isIf());
1106:       assertFalse(node2.isNE());
1107:       assertFalse(node2.isArrayLit());
1108:       assertFalse(node2.isLabelName());
1109:       assertFalse(node2.isInstanceOf());
1110:       assertFalse(node2.isCatch());
1111:       assertFalse(node2.isThis());
1112:       assertFalse(node2.hasMoreThanOneChild());
1113:       assertEquals(111, node2.getCharno());
1114:       assertFalse(node2.isNumber());
1115:       assertFalse(node2.isGetterDef());
1116:       assertFalse(node2.isScript());
1117:       assertFalse(node2.isFor());
1118:       assertTrue(node2.isString());
1119:       assertFalse(node2.isCase());
1120:       assertFalse(node2.hasOneChild());
1121:       assertFalse(node2.isTry());
1122:       
1123:       int int0 = node0.getSourceOffset();
1124:       assertSame(node0, node2);
1125:       assertFalse(node0.equals((Object)node1));
1126:       assertEquals((-1), int0);
1127:       assertFalse(node0.isTypeOf());
1128:       assertFalse(node0.isNumber());
1129:       assertFalse(node0.isLabelName());
1130:       assertFalse(node0.isAssignAdd());
1131:       assertFalse(node0.isGetElem());
1132:       assertFalse(node0.hasMoreThanOneChild());
1133:       assertFalse(node0.isContinue());
1134:       assertFalse(node0.isCast());
1135:       assertFalse(node0.isLabel());
1136:       assertFalse(node0.isAssign());
1137:       assertFalse(node0.isReturn());
1138:       assertFalse(node0.hasChildren());
1139:       assertEquals(111, node0.getSourcePosition());
1140:       assertFalse(node0.isDec());
1141:       assertFalse(node0.isExprResult());
1142:       assertFalse(node0.isAdd());
1143:       assertFalse(node0.isDo());
1144:       assertFalse(node0.isNew());
1145:       assertFalse(node0.isOr());
1146:       assertFalse(node0.isNull());
1147:       assertFalse(node0.isSetterDef());
1148:       assertEquals(0, node0.getLineno());
1149:       assertFalse(node0.isName());
1150:       assertFalse(node0.isGetProp());
1151:       assertFalse(node0.isBreak());
1152:       assertFalse(node0.isCall());
1153:       assertFalse(node0.isThrow());
1154:       assertEquals(40, node0.getType());
1155:       assertFalse(node0.isFalse());
1156:       assertFalse(node0.isComma());
1157:       assertFalse(node0.isFunction());
1158:       assertFalse(node0.isWhile());
1159:       assertFalse(node0.isAnd());
1160:       assertFalse(node0.isNot());
1161:       assertFalse(node0.isDebugger());
1162:       assertFalse(node0.isObjectLit());
1163:       assertFalse(node0.isIf());
1164:       assertFalse(node0.isNE());
1165:       assertFalse(node0.isEmpty());
1166:       assertFalse(node0.isDelProp());
1167:       assertFalse(node0.isArrayLit());
1168:       assertFalse(node0.isFor());
1169:       assertFalse(node0.isRegExp());
1170:       assertFalse(node0.isInc());
1171:       assertFalse(node0.isDefaultCase());
1172:       assertFalse(node0.isTrue());
1173:       assertFalse(node0.isVoid());
1174:       assertFalse(node0.isIn());
1175:       assertFalse(node0.isThis());
1176:       assertFalse(node0.isParamList());
1177:       assertFalse(node0.isVar());
1178:       assertFalse(node0.isHook());
1179:       assertFalse(node0.isCatch());
1180:       assertFalse(node0.isInstanceOf());
1181:       assertFalse(node0.isWith());
1182:       assertFalse(node0.isBlock());
1183:       assertEquals(111, node0.getCharno());
1184:       assertEquals(0, node0.getChildCount());
1185:       assertFalse(node0.isScript());
1186:       assertFalse(node0.isSwitch());
1187:       assertTrue(node0.isString());
1188:       assertFalse(node0.isCase());
1189:       assertFalse(node0.isTry());
1190:       assertFalse(node0.hasOneChild());
1191:       assertFalse(node0.isStringKey());
1192:       assertFalse(node0.isGetterDef());
1193:       
1194:       Iterable<Node> iterable0 = node2.children();
1195:       assertFalse(iterable0.contains(node0));
1196:       assertSame(node0, node2);
1197:       assertSame(node2, node0);
1198:       assertFalse(node0.equals((Object)node1));
1199:       assertFalse(node2.equals((Object)node1));
1200:       assertNotNull(iterable0);
1201:       assertFalse(node0.isTypeOf());
1202:       assertFalse(node0.isNumber());
1203:       assertFalse(node0.isLabelName());
1204:       assertFalse(node0.isAssignAdd());
1205:       assertFalse(node0.isGetElem());
1206:       assertFalse(node0.hasMoreThanOneChild());
1207:       assertFalse(node0.isContinue());
1208:       assertFalse(node0.isCast());
1209:       assertFalse(node0.isLabel());
1210:       assertFalse(node0.isAssign());
1211:       assertFalse(node0.isReturn());
1212:       assertFalse(node0.hasChildren());
1213:       assertEquals(111, node0.getSourcePosition());
1214:       assertFalse(node0.isDec());
1215:       assertFalse(node0.isExprResult());
1216:       assertFalse(node0.isAdd());
1217:       assertFalse(node0.isDo());
1218:       assertFalse(node0.isNew());
1219:       assertFalse(node0.isOr());
1220:       assertFalse(node0.isNull());
1221:       assertFalse(node0.isSetterDef());
1222:       assertEquals(0, node0.getLineno());
1223:       assertFalse(node0.isName());
1224:       assertFalse(node0.isGetProp());
1225:       assertFalse(node0.isBreak());
1226:       assertFalse(node0.isCall());
1227:       assertFalse(node0.isThrow());
1228:       assertEquals(40, node0.getType());
1229:       assertFalse(node0.isFalse());
1230:       assertFalse(node0.isComma());
1231:       assertFalse(node0.isFunction());
1232:       assertFalse(node0.isWhile());
1233:       assertFalse(node0.isAnd());
1234:       assertFalse(node0.isNot());
1235:       assertFalse(node0.isDebugger());
1236:       assertFalse(node0.isObjectLit());
1237:       assertFalse(node0.isIf());
1238:       assertFalse(node0.isNE());
1239:       assertFalse(node0.isEmpty());
1240:       assertFalse(node0.isDelProp());
1241:       assertFalse(node0.isArrayLit());
1242:       assertFalse(node0.isFor());
1243:       assertFalse(node0.isRegExp());
1244:       assertFalse(node0.isInc());
1245:       assertFalse(node0.isDefaultCase());
1246:       assertFalse(node0.isTrue());
1247:       assertFalse(node0.isVoid());
1248:       assertFalse(node0.isIn());
1249:       assertFalse(node0.isThis());
1250:       assertFalse(node0.isParamList());
1251:       assertFalse(node0.isVar());
1252:       assertFalse(node0.isHook());
1253:       assertFalse(node0.isCatch());
1254:       assertFalse(node0.isInstanceOf());
1255:       assertFalse(node0.isWith());
1256:       assertFalse(node0.isBlock());
1257:       assertEquals(111, node0.getCharno());
1258:       assertEquals(0, node0.getChildCount());
1259:       assertFalse(node0.isScript());
1260:       assertFalse(node0.isSwitch());
1261:       assertTrue(node0.isString());
1262:       assertFalse(node0.isCase());
1263:       assertFalse(node0.isTry());
1264:       assertFalse(node0.hasOneChild());
1265:       assertFalse(node0.isStringKey());
1266:       assertFalse(node0.isGetterDef());
1267:       assertFalse(node2.isBlock());
1268:       assertFalse(node2.isAdd());
1269:       assertFalse(node2.isVar());
1270:       assertEquals(111, node2.getSourcePosition());
1271:       assertFalse(node2.isStringKey());
1272:       assertFalse(node2.isNull());
1273:       assertFalse(node2.isParamList());
1274:       assertFalse(node2.isCall());
1275:       assertFalse(node2.isName());
1276:       assertEquals(0, node2.getLineno());
1277:       assertFalse(node2.isLabel());
1278:       assertFalse(node2.isAssignAdd());
1279:       assertFalse(node2.isContinue());
1280:       assertFalse(node2.isOr());
1281:       assertEquals(0, node2.getChildCount());
1282:       assertEquals(40, node2.getType());
1283:       assertFalse(node2.isSetterDef());
1284:       assertFalse(node2.isDefaultCase());
1285:       assertFalse(node2.isNew());
1286:       assertFalse(node2.isDo());
1287:       assertFalse(node2.isCast());
1288:       assertFalse(node2.isExprResult());
1289:       assertFalse(node2.isFunction());
1290:       assertFalse(node2.isTrue());
1291:       assertFalse(node2.isDebugger());
1292:       assertFalse(node2.isAssign());
1293:       assertFalse(node2.isGetElem());
1294:       assertFalse(node2.isAnd());
1295:       assertFalse(node2.isDelProp());
1296:       assertFalse(node2.isVoid());
1297:       assertFalse(node2.isReturn());
1298:       assertFalse(node2.isComma());
1299:       assertFalse(node2.isDec());
1300:       assertFalse(node2.isNot());
1301:       assertFalse(node2.isObjectLit());
1302:       assertFalse(node2.isTypeOf());
1303:       assertFalse(node2.isWhile());
1304:       assertFalse(node2.hasChildren());
1305:       assertFalse(node2.isGetProp());
1306:       assertFalse(node2.isHook());
1307:       assertFalse(node2.isFalse());
1308:       assertFalse(node2.isBreak());
1309:       assertFalse(node2.isSwitch());
1310:       assertFalse(node2.isIn());
1311:       assertFalse(node2.isThrow());
1312:       assertFalse(node2.isEmpty());
1313:       assertFalse(node2.isInc());
1314:       assertFalse(node2.isRegExp());
1315:       assertFalse(node2.isWith());
1316:       assertFalse(node2.isIf());
1317:       assertFalse(node2.isNE());
1318:       assertFalse(node2.isArrayLit());
1319:       assertFalse(node2.isLabelName());
1320:       assertFalse(node2.isInstanceOf());
1321:       assertFalse(node2.isCatch());
1322:       assertFalse(node2.isThis());
1323:       assertFalse(node2.hasMoreThanOneChild());
1324:       assertEquals(111, node2.getCharno());
1325:       assertFalse(node2.isNumber());
1326:       assertFalse(node2.isGetterDef());
1327:       assertFalse(node2.isScript());
1328:       assertFalse(node2.isFor());
1329:       assertTrue(node2.isString());
1330:       assertFalse(node2.isCase());
1331:       assertFalse(node2.hasOneChild());
1332:       assertFalse(node2.isTry());
1333:       
1334:       boolean boolean2 = node2.mayMutateArguments();
1335:       assertSame(node0, node2);
1336:       assertSame(node2, node0);
1337:       assertFalse(node0.equals((Object)node1));
1338:       assertFalse(node2.equals((Object)node1));
1339:       assertFalse(boolean2 == boolean0);
1340:       assertFalse(boolean2 == boolean1);
1341:       assertTrue(boolean2);
1342:       assertFalse(node0.isTypeOf());
1343:       assertFalse(node0.isNumber());
1344:       assertFalse(node0.isLabelName());
1345:       assertFalse(node0.isAssignAdd());
1346:       assertFalse(node0.isGetElem());
1347:       assertFalse(node0.hasMoreThanOneChild());
1348:       assertFalse(node0.isContinue());
1349:       assertFalse(node0.isCast());
1350:       assertFalse(node0.isLabel());
1351:       assertFalse(node0.isAssign());
1352:       assertFalse(node0.isReturn());
1353:       assertFalse(node0.hasChildren());
1354:       assertEquals(111, node0.getSourcePosition());
1355:       assertFalse(node0.isDec());
1356:       assertFalse(node0.isExprResult());
1357:       assertFalse(node0.isAdd());
1358:       assertFalse(node0.isDo());
1359:       assertFalse(node0.isNew());
1360:       assertFalse(node0.isOr());
1361:       assertFalse(node0.isNull());
1362:       assertFalse(node0.isSetterDef());
1363:       assertEquals(0, node0.getLineno());
1364:       assertFalse(node0.isName());
1365:       assertFalse(node0.isGetProp());
1366:       assertFalse(node0.isBreak());
1367:       assertFalse(node0.isCall());
1368:       assertFalse(node0.isThrow());
1369:       assertEquals(40, node0.getType());
1370:       assertFalse(node0.isFalse());
1371:       assertFalse(node0.isComma());
1372:       assertFalse(node0.isFunction());
1373:       assertFalse(node0.isWhile());
1374:       assertFalse(node0.isAnd());
1375:       assertFalse(node0.isNot());
1376:       assertFalse(node0.isDebugger());
1377:       assertFalse(node0.isObjectLit());
1378:       assertFalse(node0.isIf());
1379:       assertFalse(node0.isNE());
1380:       assertFalse(node0.isEmpty());
1381:       assertFalse(node0.isDelProp());
1382:       assertFalse(node0.isArrayLit());
1383:       assertFalse(node0.isFor());
1384:       assertFalse(node0.isRegExp());
1385:       assertFalse(node0.isInc());
1386:       assertFalse(node0.isDefaultCase());
1387:       assertFalse(node0.isTrue());
1388:       assertFalse(node0.isVoid());
1389:       assertFalse(node0.isIn());
1390:       assertFalse(node0.isThis());
1391:       assertFalse(node0.isParamList());
1392:       assertFalse(node0.isVar());
1393:       assertFalse(node0.isHook());
1394:       assertFalse(node0.isCatch());
1395:       assertFalse(node0.isInstanceOf());
1396:       assertFalse(node0.isWith());
1397:       assertFalse(node0.isBlock());
1398:       assertEquals(111, node0.getCharno());
1399:       assertEquals(0, node0.getChildCount());
1400:       assertFalse(node0.isScript());
1401:       assertFalse(node0.isSwitch());
1402:       assertTrue(node0.isString());
1403:       assertFalse(node0.isCase());
1404:       assertFalse(node0.isTry());
1405:       assertFalse(node0.hasOneChild());
1406:       assertFalse(node0.isStringKey());
1407:       assertFalse(node0.isGetterDef());
1408:       assertFalse(node2.isBlock());
1409:       assertFalse(node2.isAdd());
1410:       assertFalse(node2.isVar());
1411:       assertEquals(111, node2.getSourcePosition());
1412:       assertFalse(node2.isStringKey());
1413:       assertFalse(node2.isNull());
1414:       assertFalse(node2.isParamList());
1415:       assertFalse(node2.isCall());
1416:       assertFalse(node2.isName());
1417:       assertEquals(0, node2.getLineno());
1418:       assertFalse(node2.isLabel());
1419:       assertFalse(node2.isAssignAdd());
1420:       assertFalse(node2.isContinue());
1421:       assertFalse(node2.isOr());
1422:       assertEquals(0, node2.getChildCount());
1423:       assertEquals(40, node2.getType());
1424:       assertFalse(node2.isSetterDef());
1425:       assertFalse(node2.isDefaultCase());
1426:       assertFalse(node2.isNew());
1427:       assertFalse(node2.isDo());
1428:       assertFalse(node2.isCast());
1429:       assertFalse(node2.isExprResult());
1430:       assertFalse(node2.isFunction());
1431:       assertFalse(node2.isTrue());
1432:       assertFalse(node2.isDebugger());
1433:       assertFalse(node2.isAssign());
1434:       assertFalse(node2.isGetElem());
1435:       assertFalse(node2.isAnd());
1436:       assertFalse(node2.isDelProp());
1437:       assertFalse(node2.isVoid());
1438:       assertFalse(node2.isReturn());
1439:       assertFalse(node2.isComma());
1440:       assertFalse(node2.isDec());
1441:       assertFalse(node2.isNot());
1442:       assertFalse(node2.isObjectLit());
1443:       assertFalse(node2.isTypeOf());
1444:       assertFalse(node2.isWhile());
1445:       assertFalse(node2.hasChildren());
1446:       assertFalse(node2.isGetProp());
1447:       assertFalse(node2.isHook());
1448:       assertFalse(node2.isFalse());
1449:       assertFalse(node2.isBreak());
1450:       assertFalse(node2.isSwitch());
1451:       assertFalse(node2.isIn());
1452:       assertFalse(node2.isThrow());
1453:       assertFalse(node2.isEmpty());
1454:       assertFalse(node2.isInc());
1455:       assertFalse(node2.isRegExp());
1456:       assertFalse(node2.isWith());
1457:       assertFalse(node2.isIf());
1458:       assertFalse(node2.isNE());
1459:       assertFalse(node2.isArrayLit());
1460:       assertFalse(node2.isLabelName());
1461:       assertFalse(node2.isInstanceOf());
1462:       assertFalse(node2.isCatch());
1463:       assertFalse(node2.isThis());
1464:       assertFalse(node2.hasMoreThanOneChild());
1465:       assertEquals(111, node2.getCharno());
1466:       assertFalse(node2.isNumber());
1467:       assertFalse(node2.isGetterDef());
1468:       assertFalse(node2.isScript());
1469:       assertFalse(node2.isFor());
1470:       assertTrue(node2.isString());
1471:       assertFalse(node2.isCase());
1472:       assertFalse(node2.hasOneChild());
1473:       assertFalse(node2.isTry());
1474:       
1475:       boolean boolean3 = node0.isDo();
1476:       assertSame(node0, node2);
1477:       assertFalse(node0.equals((Object)node1));
1478:       assertTrue(boolean3 == boolean1);
1479:       assertFalse(boolean3 == boolean2);
1480:       assertTrue(boolean3 == boolean0);
1481:       assertFalse(boolean3);
1482:       assertFalse(node0.isTypeOf());
1483:       assertFalse(node0.isNumber());
1484:       assertFalse(node0.isLabelName());
1485:       assertFalse(node0.isAssignAdd());
1486:       assertFalse(node0.isGetElem());
1487:       assertFalse(node0.hasMoreThanOneChild());
1488:       assertFalse(node0.isContinue());
1489:       assertFalse(node0.isCast());
1490:       assertFalse(node0.isLabel());
1491:       assertFalse(node0.isAssign());
1492:       assertFalse(node0.isReturn());
1493:       assertFalse(node0.hasChildren());
1494:       assertEquals(111, node0.getSourcePosition());
1495:       assertFalse(node0.isDec());
1496:       assertFalse(node0.isExprResult());
1497:       assertFalse(node0.isAdd());
1498:       assertFalse(node0.isDo());
1499:       assertFalse(node0.isNew());
1500:       assertFalse(node0.isOr());
1501:       assertFalse(node0.isNull());
1502:       assertFalse(node0.isSetterDef());
1503:       assertEquals(0, node0.getLineno());
1504:       assertFalse(node0.isName());
1505:       assertFalse(node0.isGetProp());
1506:       assertFalse(node0.isBreak());
1507:       assertFalse(node0.isCall());
1508:       assertFalse(node0.isThrow());
1509:       assertEquals(40, node0.getType());
1510:       assertFalse(node0.isFalse());
1511:       assertFalse(node0.isComma());
1512:       assertFalse(node0.isFunction());
1513:       assertFalse(node0.isWhile());
1514:       assertFalse(node0.isAnd());
1515:       assertFalse(node0.isNot());
1516:       assertFalse(node0.isDebugger());
1517:       assertFalse(node0.isObjectLit());
1518:       assertFalse(node0.isIf());
1519:       assertFalse(node0.isNE());
1520:       assertFalse(node0.isEmpty());
1521:       assertFalse(node0.isDelProp());
1522:       assertFalse(node0.isArrayLit());
1523:       assertFalse(node0.isFor());
1524:       assertFalse(node0.isRegExp());
1525:       assertFalse(node0.isInc());
1526:       assertFalse(node0.isDefaultCase());
1527:       assertFalse(node0.isTrue());
1528:       assertFalse(node0.isVoid());
1529:       assertFalse(node0.isIn());
1530:       assertFalse(node0.isThis());
1531:       assertFalse(node0.isParamList());
1532:       assertFalse(node0.isVar());
1533:       assertFalse(node0.isHook());
1534:       assertFalse(node0.isCatch());
1535:       assertFalse(node0.isInstanceOf());
1536:       assertFalse(node0.isWith());
1537:       assertFalse(node0.isBlock());
1538:       assertEquals(111, node0.getCharno());
1539:       assertEquals(0, node0.getChildCount());
1540:       assertFalse(node0.isScript());
1541:       assertFalse(node0.isSwitch());
1542:       assertTrue(node0.isString());
1543:       assertFalse(node0.isCase());
1544:       assertFalse(node0.isTry());
1545:       assertFalse(node0.hasOneChild());
1546:       assertFalse(node0.isStringKey());
1547:       assertFalse(node0.isGetterDef());
1548:       
1549:       boolean boolean4 = node2.isNot();
1550:       assertSame(node0, node2);
1551:       assertSame(node2, node0);
1552:       assertFalse(node0.equals((Object)node1));
1553:       assertFalse(node2.equals((Object)node1));
1554:       assertTrue(boolean4 == boolean1);
1555:       assertTrue(boolean4 == boolean0);
1556:       assertTrue(boolean4 == boolean3);
1557:       assertFalse(boolean4 == boolean2);
1558:       assertFalse(boolean4);
1559:       assertFalse(node0.isTypeOf());
1560:       assertFalse(node0.isNumber());
1561:       assertFalse(node0.isLabelName());
1562:       assertFalse(node0.isAssignAdd());
1563:       assertFalse(node0.isGetElem());
1564:       assertFalse(node0.hasMoreThanOneChild());
1565:       assertFalse(node0.isContinue());
1566:       assertFalse(node0.isCast());
1567:       assertFalse(node0.isLabel());
1568:       assertFalse(node0.isAssign());
1569:       assertFalse(node0.isReturn());
1570:       assertFalse(node0.hasChildren());
1571:       assertEquals(111, node0.getSourcePosition());
1572:       assertFalse(node0.isDec());
1573:       assertFalse(node0.isExprResult());
1574:       assertFalse(node0.isAdd());
1575:       assertFalse(node0.isDo());
1576:       assertFalse(node0.isNew());
1577:       assertFalse(node0.isOr());
1578:       assertFalse(node0.isNull());
1579:       assertFalse(node0.isSetterDef());
1580:       assertEquals(0, node0.getLineno());
1581:       assertFalse(node0.isName());
1582:       assertFalse(node0.isGetProp());
1583:       assertFalse(node0.isBreak());
1584:       assertFalse(node0.isCall());
1585:       assertFalse(node0.isThrow());
1586:       assertEquals(40, node0.getType());
1587:       assertFalse(node0.isFalse());
1588:       assertFalse(node0.isComma());
1589:       assertFalse(node0.isFunction());
1590:       assertFalse(node0.isWhile());
1591:       assertFalse(node0.isAnd());
1592:       assertFalse(node0.isNot());
1593:       assertFalse(node0.isDebugger());
1594:       assertFalse(node0.isObjectLit());
1595:       assertFalse(node0.isIf());
1596:       assertFalse(node0.isNE());
1597:       assertFalse(node0.isEmpty());
1598:       assertFalse(node0.isDelProp());
1599:       assertFalse(node0.isArrayLit());
1600:       assertFalse(node0.isFor());
1601:       assertFalse(node0.isRegExp());
1602:       assertFalse(node0.isInc());
1603:       assertFalse(node0.isDefaultCase());
1604:       assertFalse(node0.isTrue());
1605:       assertFalse(node0.isVoid());
1606:       assertFalse(node0.isIn());
1607:       assertFalse(node0.isThis());
1608:       assertFalse(node0.isParamList());
1609:       assertFalse(node0.isVar());
1610:       assertFalse(node0.isHook());
1611:       assertFalse(node0.isCatch());
1612:       assertFalse(node0.isInstanceOf());
1613:       assertFalse(node0.isWith());
1614:       assertFalse(node0.isBlock());
1615:       assertEquals(111, node0.getCharno());
1616:       assertEquals(0, node0.getChildCount());
1617:       assertFalse(node0.isScript());
1618:       assertFalse(node0.isSwitch());
1619:       assertTrue(node0.isString());
1620:       assertFalse(node0.isCase());
1621:       assertFalse(node0.isTry());
1622:       assertFalse(node0.hasOneChild());
1623:       assertFalse(node0.isStringKey());
1624:       assertFalse(node0.isGetterDef());
1625:       assertFalse(node2.isBlock());
1626:       assertFalse(node2.isAdd());
1627:       assertFalse(node2.isVar());
1628:       assertEquals(111, node2.getSourcePosition());
1629:       assertFalse(node2.isStringKey());
1630:       assertFalse(node2.isNull());
1631:       assertFalse(node2.isParamList());
1632:       assertFalse(node2.isCall());
1633:       assertFalse(node2.isName());
1634:       assertEquals(0, node2.getLineno());
1635:       assertFalse(node2.isLabel());
1636:       assertFalse(node2.isAssignAdd());
1637:       assertFalse(node2.isContinue());
1638:       assertFalse(node2.isOr());
1639:       assertEquals(0, node2.getChildCount());
1640:       assertEquals(40, node2.getType());
1641:       assertFalse(node2.isSetterDef());
1642:       assertFalse(node2.isDefaultCase());
1643:       assertFalse(node2.isNew());
1644:       assertFalse(node2.isDo());
1645:       assertFalse(node2.isCast());
1646:       assertFalse(node2.isExprResult());
1647:       assertFalse(node2.isFunction());
1648:       assertFalse(node2.isTrue());
1649:       assertFalse(node2.isDebugger());
1650:       assertFalse(node2.isAssign());
1651:       assertFalse(node2.isGetElem());
1652:       assertFalse(node2.isAnd());
1653:       assertFalse(node2.isDelProp());
1654:       assertFalse(node2.isVoid());
1655:       assertFalse(node2.isReturn());
1656:       assertFalse(node2.isComma());
1657:       assertFalse(node2.isDec());
1658:       assertFalse(node2.isNot());
1659:       assertFalse(node2.isObjectLit());
1660:       assertFalse(node2.isTypeOf());
1661:       assertFalse(node2.isWhile());
1662:       assertFalse(node2.hasChildren());
1663:       assertFalse(node2.isGetProp());
1664:       assertFalse(node2.isHook());
1665:       assertFalse(node2.isFalse());
1666:       assertFalse(node2.isBreak());
1667:       assertFalse(node2.isSwitch());
1668:       assertFalse(node2.isIn());
1669:       assertFalse(node2.isThrow());
1670:       assertFalse(node2.isEmpty());
1671:       assertFalse(node2.isInc());
1672:       assertFalse(node2.isRegExp());
1673:       assertFalse(node2.isWith());
1674:       assertFalse(node2.isIf());
1675:       assertFalse(node2.isNE());
1676:       assertFalse(node2.isArrayLit());
1677:       assertFalse(node2.isLabelName());
1678:       assertFalse(node2.isInstanceOf());
1679:       assertFalse(node2.isCatch());
1680:       assertFalse(node2.isThis());
1681:       assertFalse(node2.hasMoreThanOneChild());
1682:       assertEquals(111, node2.getCharno());
1683:       assertFalse(node2.isNumber());
1684:       assertFalse(node2.isGetterDef());
1685:       assertFalse(node2.isScript());
1686:       assertFalse(node2.isFor());
1687:       assertTrue(node2.isString());
1688:       assertFalse(node2.isCase());
1689:       assertFalse(node2.hasOneChild());
1690:       assertFalse(node2.isTry());
1691:       
1692:       boolean boolean5 = node2.isName();
1693:       assertSame(node0, node2);
1694:       assertSame(node2, node0);
1695:       assertFalse(node0.equals((Object)node1));
1696:       assertFalse(node2.equals((Object)node1));
1697:       assertTrue(boolean5 == boolean1);
1698:       assertFalse(boolean5 == boolean2);
1699:       assertTrue(boolean5 == boolean4);
1700:       assertTrue(boolean5 == boolean0);
1701:       assertTrue(boolean5 == boolean3);
1702:       assertFalse(boolean5);
1703:       assertFalse(node0.isTypeOf());
1704:       assertFalse(node0.isNumber());
1705:       assertFalse(node0.isLabelName());
1706:       assertFalse(node0.isAssignAdd());
1707:       assertFalse(node0.isGetElem());
1708:       assertFalse(node0.hasMoreThanOneChild());
1709:       assertFalse(node0.isContinue());
1710:       assertFalse(node0.isCast());
1711:       assertFalse(node0.isLabel());
1712:       assertFalse(node0.isAssign());
1713:       assertFalse(node0.isReturn());
1714:       assertFalse(node0.hasChildren());
1715:       assertEquals(111, node0.getSourcePosition());
1716:       assertFalse(node0.isDec());
1717:       assertFalse(node0.isExprResult());
1718:       assertFalse(node0.isAdd());
1719:       assertFalse(node0.isDo());
1720:       assertFalse(node0.isNew());
1721:       assertFalse(node0.isOr());
1722:       assertFalse(node0.isNull());
1723:       assertFalse(node0.isSetterDef());
1724:       assertEquals(0, node0.getLineno());
1725:       assertFalse(node0.isName());
1726:       assertFalse(node0.isGetProp());
1727:       assertFalse(node0.isBreak());
1728:       assertFalse(node0.isCall());
1729:       assertFalse(node0.isThrow());
1730:       assertEquals(40, node0.getType());
1731:       assertFalse(node0.isFalse());
1732:       assertFalse(node0.isComma());
1733:       assertFalse(node0.isFunction());
1734:       assertFalse(node0.isWhile());
1735:       assertFalse(node0.isAnd());
1736:       assertFalse(node0.isNot());
1737:       assertFalse(node0.isDebugger());
1738:       assertFalse(node0.isObjectLit());
1739:       assertFalse(node0.isIf());
1740:       assertFalse(node0.isNE());
1741:       assertFalse(node0.isEmpty());
1742:       assertFalse(node0.isDelProp());
1743:       assertFalse(node0.isArrayLit());
1744:       assertFalse(node0.isFor());
1745:       assertFalse(node0.isRegExp());
1746:       assertFalse(node0.isInc());
1747:       assertFalse(node0.isDefaultCase());
1748:       assertFalse(node0.isTrue());
1749:       assertFalse(node0.isVoid());
1750:       assertFalse(node0.isIn());
1751:       assertFalse(node0.isThis());
1752:       assertFalse(node0.isParamList());
1753:       assertFalse(node0.isVar());
1754:       assertFalse(node0.isHook());
1755:       assertFalse(node0.isCatch());
1756:       assertFalse(node0.isInstanceOf());
1757:       assertFalse(node0.isWith());
1758:       assertFalse(node0.isBlock());
1759:       assertEquals(111, node0.getCharno());
1760:       assertEquals(0, node0.getChildCount());
1761:       assertFalse(node0.isScript());
1762:       assertFalse(node0.isSwitch());
1763:       assertTrue(node0.isString());
1764:       assertFalse(node0.isCase());
1765:       assertFalse(node0.isTry());
1766:       assertFalse(node0.hasOneChild());
1767:       assertFalse(node0.isStringKey());
1768:       assertFalse(node0.isGetterDef());
1769:       assertFalse(node2.isBlock());
1770:       assertFalse(node2.isAdd());
1771:       assertFalse(node2.isVar());
1772:       assertEquals(111, node2.getSourcePosition());
1773:       assertFalse(node2.isStringKey());
1774:       assertFalse(node2.isNull());
1775:       assertFalse(node2.isParamList());
1776:       assertFalse(node2.isCall());
1777:       assertFalse(node2.isName());
1778:       assertEquals(0, node2.getLineno());
1779:       assertFalse(node2.isLabel());
1780:       assertFalse(node2.isAssignAdd());
1781:       assertFalse(node2.isContinue());
1782:       assertFalse(node2.isOr());
1783:       assertEquals(0, node2.getChildCount());
1784:       assertEquals(40, node2.getType());
1785:       assertFalse(node2.isSetterDef());
1786:       assertFalse(node2.isDefaultCase());
1787:       assertFalse(node2.isNew());
1788:       assertFalse(node2.isDo());
1789:       assertFalse(node2.isCast());
1790:       assertFalse(node2.isExprResult());
1791:       assertFalse(node2.isFunction());
1792:       assertFalse(node2.isTrue());
1793:       assertFalse(node2.isDebugger());
1794:       assertFalse(node2.isAssign());
1795:       assertFalse(node2.isGetElem());
1796:       assertFalse(node2.isAnd());
1797:       assertFalse(node2.isDelProp());
1798:       assertFalse(node2.isVoid());
1799:       assertFalse(node2.isReturn());
1800:       assertFalse(node2.isComma());
1801:       assertFalse(node2.isDec());
1802:       assertFalse(node2.isNot());
1803:       assertFalse(node2.isObjectLit());
1804:       assertFalse(node2.isTypeOf());
1805:       assertFalse(node2.isWhile());
1806:       assertFalse(node2.hasChildren());
1807:       assertFalse(node2.isGetProp());
1808:       assertFalse(node2.isHook());
1809:       assertFalse(node2.isFalse());
1810:       assertFalse(node2.isBreak());
1811:       assertFalse(node2.isSwitch());
1812:       assertFalse(node2.isIn());
1813:       assertFalse(node2.isThrow());
1814:       assertFalse(node2.isEmpty());
1815:       assertFalse(node2.isInc());
1816:       assertFalse(node2.isRegExp());
1817:       assertFalse(node2.isWith());
1818:       assertFalse(node2.isIf());
1819:       assertFalse(node2.isNE());
1820:       assertFalse(node2.isArrayLit());
1821:       assertFalse(node2.isLabelName());
1822:       assertFalse(node2.isInstanceOf());
1823:       assertFalse(node2.isCatch());
1824:       assertFalse(node2.isThis());
1825:       assertFalse(node2.hasMoreThanOneChild());
1826:       assertEquals(111, node2.getCharno());
1827:       assertFalse(node2.isNumber());
1828:       assertFalse(node2.isGetterDef());
1829:       assertFalse(node2.isScript());
1830:       assertFalse(node2.isFor());
1831:       assertTrue(node2.isString());
1832:       assertFalse(node2.isCase());
1833:       assertFalse(node2.hasOneChild());
1834:       assertFalse(node2.isTry());
1835:       
1836:       int int1 = node0.getLength();
1837:       assertSame(node0, node2);
1838:       assertFalse(node0.equals((Object)node1));
1839:       assertFalse(int1 == int0);
1840:       assertEquals(0, int1);
1841:       assertFalse(node0.isTypeOf());
1842:       assertFalse(node0.isNumber());
1843:       assertFalse(node0.isLabelName());
1844:       assertFalse(node0.isAssignAdd());
1845:       assertFalse(node0.isGetElem());
1846:       assertFalse(node0.hasMoreThanOneChild());
1847:       assertFalse(node0.isContinue());
1848:       assertFalse(node0.isCast());
1849:       assertFalse(node0.isLabel());
1850:       assertFalse(node0.isAssign());
1851:       assertFalse(node0.isReturn());
1852:       assertFalse(node0.hasChildren());
1853:       assertEquals(111, node0.getSourcePosition());
1854:       assertFalse(node0.isDec());
1855:       assertFalse(node0.isExprResult());
1856:       assertFalse(node0.isAdd());
1857:       assertFalse(node0.isDo());
1858:       assertFalse(node0.isNew());
1859:       assertFalse(node0.isOr());
1860:       assertFalse(node0.isNull());
1861:       assertFalse(node0.isSetterDef());
1862:       assertEquals(0, node0.getLineno());
1863:       assertFalse(node0.isName());
1864:       assertFalse(node0.isGetProp());
1865:       assertFalse(node0.isBreak());
1866:       assertFalse(node0.isCall());
1867:       assertFalse(node0.isThrow());
1868:       assertEquals(40, node0.getType());
1869:       assertFalse(node0.isFalse());
1870:       assertFalse(node0.isComma());
1871:       assertFalse(node0.isFunction());
1872:       assertFalse(node0.isWhile());
1873:       assertFalse(node0.isAnd());
1874:       assertFalse(node0.isNot());
1875:       assertFalse(node0.isDebugger());
1876:       assertFalse(node0.isObjectLit());
1877:       assertFalse(node0.isIf());
1878:       assertFalse(node0.isNE());
1879:       assertFalse(node0.isEmpty());
1880:       assertFalse(node0.isDelProp());
1881:       assertFalse(node0.isArrayLit());
1882:       assertFalse(node0.isFor());
1883:       assertFalse(node0.isRegExp());
1884:       assertFalse(node0.isInc());
1885:       assertFalse(node0.isDefaultCase());
1886:       assertFalse(node0.isTrue());
1887:       assertFalse(node0.isVoid());
1888:       assertFalse(node0.isIn());
1889:       assertFalse(node0.isThis());
1890:       assertFalse(node0.isParamList());
1891:       assertFalse(node0.isVar());
1892:       assertFalse(node0.isHook());
1893:       assertFalse(node0.isCatch());
1894:       assertFalse(node0.isInstanceOf());
1895:       assertFalse(node0.isWith());
1896:       assertFalse(node0.isBlock());
1897:       assertEquals(111, node0.getCharno());
1898:       assertEquals(0, node0.getChildCount());
1899:       assertFalse(node0.isScript());
1900:       assertFalse(node0.isSwitch());
1901:       assertTrue(node0.isString());
1902:       assertFalse(node0.isCase());
1903:       assertFalse(node0.isTry());
1904:       assertFalse(node0.hasOneChild());
1905:       assertFalse(node0.isStringKey());
1906:       assertFalse(node0.isGetterDef());
1907:       
1908:       boolean boolean6 = node2.isGetterDef();
1909:       assertSame(node0, node2);
1910:       assertSame(node2, node0);
1911:       assertFalse(node0.equals((Object)node1));
1912:       assertFalse(node2.equals((Object)node1));
1913:       assertTrue(boolean6 == boolean1);
1914:       assertTrue(boolean6 == boolean4);
1915:       assertTrue(boolean6 == boolean0);
1916:       assertTrue(boolean6 == boolean3);
1917:       assertFalse(boolean6 == boolean2);
1918:       assertTrue(boolean6 == boolean5);
1919:       assertFalse(boolean6);
1920:       assertFalse(node0.isTypeOf());
1921:       assertFalse(node0.isNumber());
1922:       assertFalse(node0.isLabelName());
1923:       assertFalse(node0.isAssignAdd());
1924:       assertFalse(node0.isGetElem());
1925:       assertFalse(node0.hasMoreThanOneChild());
1926:       assertFalse(node0.isContinue());
1927:       assertFalse(node0.isCast());
1928:       assertFalse(node0.isLabel());
1929:       assertFalse(node0.isAssign());
1930:       assertFalse(node0.isReturn());
1931:       assertFalse(node0.hasChildren());
1932:       assertEquals(111, node0.getSourcePosition());
1933:       assertFalse(node0.isDec());
1934:       assertFalse(node0.isExprResult());
1935:       assertFalse(node0.isAdd());
1936:       assertFalse(node0.isDo());
1937:       assertFalse(node0.isNew());
1938:       assertFalse(node0.isOr());
1939:       assertFalse(node0.isNull());
1940:       assertFalse(node0.isSetterDef());
1941:       assertEquals(0, node0.getLineno());
1942:       assertFalse(node0.isName());
1943:       assertFalse(node0.isGetProp());
1944:       assertFalse(node0.isBreak());
1945:       assertFalse(node0.isCall());
1946:       assertFalse(node0.isThrow());
1947:       assertEquals(40, node0.getType());
1948:       assertFalse(node0.isFalse());
1949:       assertFalse(node0.isComma());
1950:       assertFalse(node0.isFunction());
1951:       assertFalse(node0.isWhile());
1952:       assertFalse(node0.isAnd());
1953:       assertFalse(node0.isNot());
1954:       assertFalse(node0.isDebugger());
1955:       assertFalse(node0.isObjectLit());
1956:       assertFalse(node0.isIf());
1957:       assertFalse(node0.isNE());
1958:       assertFalse(node0.isEmpty());
1959:       assertFalse(node0.isDelProp());
1960:       assertFalse(node0.isArrayLit());
1961:       assertFalse(node0.isFor());
1962:       assertFalse(node0.isRegExp());
1963:       assertFalse(node0.isInc());
1964:       assertFalse(node0.isDefaultCase());
1965:       assertFalse(node0.isTrue());
1966:       assertFalse(node0.isVoid());
1967:       assertFalse(node0.isIn());
1968:       assertFalse(node0.isThis());
1969:       assertFalse(node0.isParamList());
1970:       assertFalse(node0.isVar());
1971:       assertFalse(node0.isHook());
1972:       assertFalse(node0.isCatch());
1973:       assertFalse(node0.isInstanceOf());
1974:       assertFalse(node0.isWith());
1975:       assertFalse(node0.isBlock());
1976:       assertEquals(111, node0.getCharno());
1977:       assertEquals(0, node0.getChildCount());
1978:       assertFalse(node0.isScript());
1979:       assertFalse(node0.isSwitch());
1980:       assertTrue(node0.isString());
1981:       assertFalse(node0.isCase());
1982:       assertFalse(node0.isTry());
1983:       assertFalse(node0.hasOneChild());
1984:       assertFalse(node0.isStringKey());
1985:       assertFalse(node0.isGetterDef());
1986:       assertFalse(node2.isBlock());
1987:       assertFalse(node2.isAdd());
1988:       assertFalse(node2.isVar());
1989:       assertEquals(111, node2.getSourcePosition());
1990:       assertFalse(node2.isStringKey());
1991:       assertFalse(node2.isNull());
1992:       assertFalse(node2.isParamList());
1993:       assertFalse(node2.isCall());
1994:       assertFalse(node2.isName());
1995:       assertEquals(0, node2.getLineno());
1996:       assertFalse(node2.isLabel());
1997:       assertFalse(node2.isAssignAdd());
1998:       assertFalse(node2.isContinue());
1999:       assertFalse(node2.isOr());
2000:       assertEquals(0, node2.getChildCount());
2001:       assertEquals(40, node2.getType());
2002:       assertFalse(node2.isSetterDef());
2003:       assertFalse(node2.isDefaultCase());
2004:       assertFalse(node2.isNew());
2005:       assertFalse(node2.isDo());
2006:       assertFalse(node2.isCast());
2007:       assertFalse(node2.isExprResult());
2008:       assertFalse(node2.isFunction());
2009:       assertFalse(node2.isTrue());
2010:       assertFalse(node2.isDebugger());
2011:       assertFalse(node2.isAssign());
2012:       assertFalse(node2.isGetElem());
2013:       assertFalse(node2.isAnd());
2014:       assertFalse(node2.isDelProp());
2015:       assertFalse(node2.isVoid());
2016:       assertFalse(node2.isReturn());
2017:       assertFalse(node2.isComma());
2018:       assertFalse(node2.isDec());
2019:       assertFalse(node2.isNot());
2020:       assertFalse(node2.isObjectLit());
2021:       assertFalse(node2.isTypeOf());
2022:       assertFalse(node2.isWhile());
2023:       assertFalse(node2.hasChildren());
2024:       assertFalse(node2.isGetProp());
2025:       assertFalse(node2.isHook());
2026:       assertFalse(node2.isFalse());
2027:       assertFalse(node2.isBreak());
2028:       assertFalse(node2.isSwitch());
2029:       assertFalse(node2.isIn());
2030:       assertFalse(node2.isThrow());
2031:       assertFalse(node2.isEmpty());
2032:       assertFalse(node2.isInc());
2033:       assertFalse(node2.isRegExp());
2034:       assertFalse(node2.isWith());
2035:       assertFalse(node2.isIf());
2036:       assertFalse(node2.isNE());
2037:       assertFalse(node2.isArrayLit());
2038:       assertFalse(node2.isLabelName());
2039:       assertFalse(node2.isInstanceOf());
2040:       assertFalse(node2.isCatch());
2041:       assertFalse(node2.isThis());
2042:       assertFalse(node2.hasMoreThanOneChild());
2043:       assertEquals(111, node2.getCharno());
2044:       assertFalse(node2.isNumber());
2045:       assertFalse(node2.isGetterDef());
2046:       assertFalse(node2.isScript());
2047:       assertFalse(node2.isFor());
2048:       assertTrue(node2.isString());
2049:       assertFalse(node2.isCase());
2050:       assertFalse(node2.hasOneChild());
2051:       assertFalse(node2.isTry());
2052:       
2053:       StaticSourceFile staticSourceFile0 = node2.getStaticSourceFile();
2054:       assertSame(node0, node2);
2055:       assertSame(node2, node0);
2056:       assertFalse(node0.equals((Object)node1));
2057:       assertFalse(node2.equals((Object)node1));
2058:       assertNull(staticSourceFile0);
2059:       assertFalse(node0.isTypeOf());
2060:       assertFalse(node0.isNumber());
2061:       assertFalse(node0.isLabelName());
2062:       assertFalse(node0.isAssignAdd());
2063:       assertFalse(node0.isGetElem());
2064:       assertFalse(node0.hasMoreThanOneChild());
2065:       assertFalse(node0.isContinue());
2066:       assertFalse(node0.isCast());
2067:       assertFalse(node0.isLabel());
2068:       assertFalse(node0.isAssign());
2069:       assertFalse(node0.isReturn());
2070:       assertFalse(node0.hasChildren());
2071:       assertEquals(111, node0.getSourcePosition());
2072:       assertFalse(node0.isDec());
2073:       assertFalse(node0.isExprResult());
2074:       assertFalse(node0.isAdd());
2075:       assertFalse(node0.isDo());
2076:       assertFalse(node0.isNew());
2077:       assertFalse(node0.isOr());
2078:       assertFalse(node0.isNull());
2079:       assertFalse(node0.isSetterDef());
2080:       assertEquals(0, node0.getLineno());
2081:       assertFalse(node0.isName());
2082:       assertFalse(node0.isGetProp());
2083:       assertFalse(node0.isBreak());
2084:       assertFalse(node0.isCall());
2085:       assertFalse(node0.isThrow());
2086:       assertEquals(40, node0.getType());
2087:       assertFalse(node0.isFalse());
2088:       assertFalse(node0.isComma());
2089:       assertFalse(node0.isFunction());
2090:       assertFalse(node0.isWhile());
2091:       assertFalse(node0.isAnd());
2092:       assertFalse(node0.isNot());
2093:       assertFalse(node0.isDebugger());
2094:       assertFalse(node0.isObjectLit());
2095:       assertFalse(node0.isIf());
2096:       assertFalse(node0.isNE());
2097:       assertFalse(node0.isEmpty());
2098:       assertFalse(node0.isDelProp());
2099:       assertFalse(node0.isArrayLit());
2100:       assertFalse(node0.isFor());
2101:       assertFalse(node0.isRegExp());
2102:       assertFalse(node0.isInc());
2103:       assertFalse(node0.isDefaultCase());
2104:       assertFalse(node0.isTrue());
2105:       assertFalse(node0.isVoid());
2106:       assertFalse(node0.isIn());
2107:       assertFalse(node0.isThis());
2108:       assertFalse(node0.isParamList());
2109:       assertFalse(node0.isVar());
2110:       assertFalse(node0.isHook());
2111:       assertFalse(node0.isCatch());
2112:       assertFalse(node0.isInstanceOf());
2113:       assertFalse(node0.isWith());
2114:       assertFalse(node0.isBlock());
2115:       assertEquals(111, node0.getCharno());
2116:       assertEquals(0, node0.getChildCount());
2117:       assertFalse(node0.isScript());
2118:       assertFalse(node0.isSwitch());
2119:       assertTrue(node0.isString());
2120:       assertFalse(node0.isCase());
2121:       assertFalse(node0.isTry());
2122:       assertFalse(node0.hasOneChild());
2123:       assertFalse(node0.isStringKey());
2124:       assertFalse(node0.isGetterDef());
2125:       assertFalse(node2.isBlock());
2126:       assertFalse(node2.isAdd());
2127:       assertFalse(node2.isVar());
2128:       assertEquals(111, node2.getSourcePosition());
2129:       assertFalse(node2.isStringKey());
2130:       assertFalse(node2.isNull());
2131:       assertFalse(node2.isParamList());
2132:       assertFalse(node2.isCall());
2133:       assertFalse(node2.isName());
2134:       assertEquals(0, node2.getLineno());
2135:       assertFalse(node2.isLabel());
2136:       assertFalse(node2.isAssignAdd());
2137:       assertFalse(node2.isContinue());
2138:       assertFalse(node2.isOr());
2139:       assertEquals(0, node2.getChildCount());
2140:       assertEquals(40, node2.getType());
2141:       assertFalse(node2.isSetterDef());
2142:       assertFalse(node2.isDefaultCase());
2143:       assertFalse(node2.isNew());
2144:       assertFalse(node2.isDo());
2145:       assertFalse(node2.isCast());
2146:       assertFalse(node2.isExprResult());
2147:       assertFalse(node2.isFunction());
2148:       assertFalse(node2.isTrue());
2149:       assertFalse(node2.isDebugger());
2150:       assertFalse(node2.isAssign());
2151:       assertFalse(node2.isGetElem());
2152:       assertFalse(node2.isAnd());
2153:       assertFalse(node2.isDelProp());
2154:       assertFalse(node2.isVoid());
2155:       assertFalse(node2.isReturn());
2156:       assertFalse(node2.isComma());
2157:       assertFalse(node2.isDec());
2158:       assertFalse(node2.isNot());
2159:       assertFalse(node2.isObjectLit());
2160:       assertFalse(node2.isTypeOf());
2161:       assertFalse(node2.isWhile());
2162:       assertFalse(node2.hasChildren());
2163:       assertFalse(node2.isGetProp());
2164:       assertFalse(node2.isHook());
2165:       assertFalse(node2.isFalse());
2166:       assertFalse(node2.isBreak());
2167:       assertFalse(node2.isSwitch());
2168:       assertFalse(node2.isIn());
2169:       assertFalse(node2.isThrow());
2170:       assertFalse(node2.isEmpty());
2171:       assertFalse(node2.isInc());
2172:       assertFalse(node2.isRegExp());
2173:       assertFalse(node2.isWith());
2174:       assertFalse(node2.isIf());
2175:       assertFalse(node2.isNE());
2176:       assertFalse(node2.isArrayLit());
2177:       assertFalse(node2.isLabelName());
2178:       assertFalse(node2.isInstanceOf());
2179:       assertFalse(node2.isCatch());
2180:       assertFalse(node2.isThis());
2181:       assertFalse(node2.hasMoreThanOneChild());
2182:       assertEquals(111, node2.getCharno());
2183:       assertFalse(node2.isNumber());
2184:       assertFalse(node2.isGetterDef());
2185:       assertFalse(node2.isScript());
2186:       assertFalse(node2.isFor());
2187:       assertTrue(node2.isString());
2188:       assertFalse(node2.isCase());
2189:       assertFalse(node2.hasOneChild());
2190:       assertFalse(node2.isTry());
2191:       
2192:       Node node3 = node2.getNext();
2193:       assertSame(node0, node2);
2194:       assertSame(node2, node0);
2195:       assertFalse(node0.equals((Object)node1));
2196:       assertFalse(node2.equals((Object)node1));
2197:       assertNull(node3);
2198:       assertFalse(node0.isTypeOf());
2199:       assertFalse(node0.isNumber());
2200:       assertFalse(node0.isLabelName());
2201:       assertFalse(node0.isAssignAdd());
2202:       assertFalse(node0.isGetElem());
2203:       assertFalse(node0.hasMoreThanOneChild());
2204:       assertFalse(node0.isContinue());
2205:       assertFalse(node0.isCast());
2206:       assertFalse(node0.isLabel());
2207:       assertFalse(node0.isAssign());
2208:       assertFalse(node0.isReturn());
2209:       assertFalse(node0.hasChildren());
2210:       assertEquals(111, node0.getSourcePosition());
2211:       assertFalse(node0.isDec());
2212:       assertFalse(node0.isExprResult());
2213:       assertFalse(node0.isAdd());
2214:       assertFalse(node0.isDo());
2215:       assertFalse(node0.isNew());
2216:       assertFalse(node0.isOr());
2217:       assertFalse(node0.isNull());
2218:       assertFalse(node0.isSetterDef());
2219:       assertEquals(0, node0.getLineno());
2220:       assertFalse(node0.isName());
2221:       assertFalse(node0.isGetProp());
2222:       assertFalse(node0.isBreak());
2223:       assertFalse(node0.isCall());
2224:       assertFalse(node0.isThrow());
2225:       assertEquals(40, node0.getType());
2226:       assertFalse(node0.isFalse());
2227:       assertFalse(node0.isComma());
2228:       assertFalse(node0.isFunction());
2229:       assertFalse(node0.isWhile());
2230:       assertFalse(node0.isAnd());
2231:       assertFalse(node0.isNot());
2232:       assertFalse(node0.isDebugger());
2233:       assertFalse(node0.isObjectLit());
2234:       assertFalse(node0.isIf());
2235:       assertFalse(node0.isNE());
2236:       assertFalse(node0.isEmpty());
2237:       assertFalse(node0.isDelProp());
2238:       assertFalse(node0.isArrayLit());
2239:       assertFalse(node0.isFor());
2240:       assertFalse(node0.isRegExp());
2241:       assertFalse(node0.isInc());
2242:       assertFalse(node0.isDefaultCase());
2243:       assertFalse(node0.isTrue());
2244:       assertFalse(node0.isVoid());
2245:       assertFalse(node0.isIn());
2246:       assertFalse(node0.isThis());
2247:       assertFalse(node0.isParamList());
2248:       assertFalse(node0.isVar());
2249:       assertFalse(node0.isHook());
2250:       assertFalse(node0.isCatch());
2251:       assertFalse(node0.isInstanceOf());
2252:       assertFalse(node0.isWith());
2253:       assertFalse(node0.isBlock());
2254:       assertEquals(111, node0.getCharno());
2255:       assertEquals(0, node0.getChildCount());
2256:       assertFalse(node0.isScript());
2257:       assertFalse(node0.isSwitch());
2258:       assertTrue(node0.isString());
2259:       assertFalse(node0.isCase());
2260:       assertFalse(node0.isTry());
2261:       assertFalse(node0.hasOneChild());
2262:       assertFalse(node0.isStringKey());
2263:       assertFalse(node0.isGetterDef());
2264:       assertFalse(node2.isBlock());
2265:       assertFalse(node2.isAdd());
2266:       assertFalse(node2.isVar());
2267:       assertEquals(111, node2.getSourcePosition());
2268:       assertFalse(node2.isStringKey());
2269:       assertFalse(node2.isNull());
2270:       assertFalse(node2.isParamList());
2271:       assertFalse(node2.isCall());
2272:       assertFalse(node2.isName());
2273:       assertEquals(0, node2.getLineno());
2274:       assertFalse(node2.isLabel());
2275:       assertFalse(node2.isAssignAdd());
2276:       assertFalse(node2.isContinue());
2277:       assertFalse(node2.isOr());
2278:       assertEquals(0, node2.getChildCount());
2279:       assertEquals(40, node2.getType());
2280:       assertFalse(node2.isSetterDef());
2281:       assertFalse(node2.isDefaultCase());
2282:       assertFalse(node2.isNew());
2283:       assertFalse(node2.isDo());
2284:       assertFalse(node2.isCast());
2285:       assertFalse(node2.isExprResult());
2286:       assertFalse(node2.isFunction());
2287:       assertFalse(node2.isTrue());
2288:       assertFalse(node2.isDebugger());
2289:       assertFalse(node2.isAssign());
2290:       assertFalse(node2.isGetElem());
2291:       assertFalse(node2.isAnd());
2292:       assertFalse(node2.isDelProp());
2293:       assertFalse(node2.isVoid());
2294:       assertFalse(node2.isReturn());
2295:       assertFalse(node2.isComma());
2296:       assertFalse(node2.isDec());
2297:       assertFalse(node2.isNot());
2298:       assertFalse(node2.isObjectLit());
2299:       assertFalse(node2.isTypeOf());
2300:       assertFalse(node2.isWhile());
2301:       assertFalse(node2.hasChildren());
2302:       assertFalse(node2.isGetProp());
2303:       assertFalse(node2.isHook());
2304:       assertFalse(node2.isFalse());
2305:       assertFalse(node2.isBreak());
2306:       assertFalse(node2.isSwitch());
2307:       assertFalse(node2.isIn());
2308:       assertFalse(node2.isThrow());
2309:       assertFalse(node2.isEmpty());
2310:       assertFalse(node2.isInc());
2311:       assertFalse(node2.isRegExp());
2312:       assertFalse(node2.isWith());
2313:       assertFalse(node2.isIf());
2314:       assertFalse(node2.isNE());
2315:       assertFalse(node2.isArrayLit());
2316:       assertFalse(node2.isLabelName());
2317:       assertFalse(node2.isInstanceOf());
2318:       assertFalse(node2.isCatch());
2319:       assertFalse(node2.isThis());
2320:       assertFalse(node2.hasMoreThanOneChild());
2321:       assertEquals(111, node2.getCharno());
2322:       assertFalse(node2.isNumber());
2323:       assertFalse(node2.isGetterDef());
2324:       assertFalse(node2.isScript());
2325:       assertFalse(node2.isFor());
2326:       assertTrue(node2.isString());
2327:       assertFalse(node2.isCase());
2328:       assertFalse(node2.hasOneChild());
2329:       assertFalse(node2.isTry());
2330:       
2331:       Node node4 = node2.getParent();
2332:       assertSame(node0, node2);
2333:       assertSame(node4, node1);
2334:       assertSame(node2, node0);
2335:       assertFalse(node0.equals((Object)node1));
2336:       assertFalse(node4.equals((Object)node2));
2337:       assertFalse(node4.equals((Object)node0));
2338:       assertFalse(node2.equals((Object)node1));
2339:       assertNotNull(node4);
2340:       assertFalse(node0.isTypeOf());
2341:       assertFalse(node0.isNumber());
2342:       assertFalse(node0.isLabelName());
2343:       assertFalse(node0.isAssignAdd());
2344:       assertFalse(node0.isGetElem());
2345:       assertFalse(node0.hasMoreThanOneChild());
2346:       assertFalse(node0.isContinue());
2347:       assertFalse(node0.isCast());
2348:       assertFalse(node0.isLabel());
2349:       assertFalse(node0.isAssign());
2350:       assertFalse(node0.isReturn());
2351:       assertFalse(node0.hasChildren());
2352:       assertEquals(111, node0.getSourcePosition());
2353:       assertFalse(node0.isDec());
2354:       assertFalse(node0.isExprResult());
2355:       assertFalse(node0.isAdd());
2356:       assertFalse(node0.isDo());
2357:       assertFalse(node0.isNew());
2358:       assertFalse(node0.isOr());
2359:       assertFalse(node0.isNull());
2360:       assertFalse(node0.isSetterDef());
2361:       assertEquals(0, node0.getLineno());
2362:       assertFalse(node0.isName());
2363:       assertFalse(node0.isGetProp());
2364:       assertFalse(node0.isBreak());
2365:       assertFalse(node0.isCall());
2366:       assertFalse(node0.isThrow());
2367:       assertEquals(40, node0.getType());
2368:       assertFalse(node0.isFalse());
2369:       assertFalse(node0.isComma());
2370:       assertFalse(node0.isFunction());
2371:       assertFalse(node0.isWhile());
2372:       assertFalse(node0.isAnd());
2373:       assertFalse(node0.isNot());
2374:       assertFalse(node0.isDebugger());
2375:       assertFalse(node0.isObjectLit());
2376:       assertFalse(node0.isIf());
2377:       assertFalse(node0.isNE());
2378:       assertFalse(node0.isEmpty());
2379:       assertFalse(node0.isDelProp());
2380:       assertFalse(node0.isArrayLit());
2381:       assertFalse(node0.isFor());
2382:       assertFalse(node0.isRegExp());
2383:       assertFalse(node0.isInc());
2384:       assertFalse(node0.isDefaultCase());
2385:       assertFalse(node0.isTrue());
2386:       assertFalse(node0.isVoid());
2387:       assertFalse(node0.isIn());
2388:       assertFalse(node0.isThis());
2389:       assertFalse(node0.isParamList());
2390:       assertFalse(node0.isVar());
2391:       assertFalse(node0.isHook());
2392:       assertFalse(node0.isCatch());
2393:       assertFalse(node0.isInstanceOf());
2394:       assertFalse(node0.isWith());
2395:       assertFalse(node0.isBlock());
2396:       assertEquals(111, node0.getCharno());
2397:       assertEquals(0, node0.getChildCount());
2398:       assertFalse(node0.isScript());
2399:       assertFalse(node0.isSwitch());
2400:       assertTrue(node0.isString());
2401:       assertFalse(node0.isCase());
2402:       assertFalse(node0.isTry());
2403:       assertFalse(node0.hasOneChild());
2404:       assertFalse(node0.isStringKey());
2405:       assertFalse(node0.isGetterDef());
2406:       assertFalse(node4.isScript());
2407:       assertFalse(node4.isCast());
2408:       assertFalse(node4.isExprResult());
2409:       assertFalse(node4.isGetElem());
2410:       assertFalse(node4.isAssign());
2411:       assertFalse(node4.isWith());
2412:       assertFalse(node4.isTypeOf());
2413:       assertFalse(node4.isDec());
2414:       assertFalse(node4.isLabel());
2415:       assertFalse(node4.isGetProp());
2416:       assertFalse(node4.isLabelName());
2417:       assertFalse(node4.isNot());
2418:       assertFalse(node4.isObjectLit());
2419:       assertFalse(node4.isAnd());
2420:       assertFalse(node4.isNumber());
2421:       assertEquals((-1), node4.getSourcePosition());
2422:       assertFalse(node4.isAdd());
2423:       assertFalse(node4.isNew());
2424:       assertFalse(node4.isSwitch());
2425:       assertFalse(node4.isCall());
2426:       assertFalse(node4.isDo());
2427:       assertFalse(node4.isWhile());
2428:       assertFalse(node4.isVar());
2429:       assertFalse(node4.isComma());
2430:       assertFalse(node4.isReturn());
2431:       assertFalse(node4.isOr());
2432:       assertFalse(node4.isAssignAdd());
2433:       assertFalse(node4.isBreak());
2434:       assertFalse(node4.isEmpty());
2435:       assertFalse(node4.isName());
2436:       assertFalse(node4.isDelProp());
2437:       assertFalse(node4.isNull());
2438:       assertFalse(node4.isTrue());
2439:       assertFalse(node4.isTry());
2440:       assertFalse(node4.isVoid());
2441:       assertFalse(node4.isFunction());
2442:       assertFalse(node4.isArrayLit());
2443:       assertFalse(node4.isFor());
2444:       assertFalse(node4.isDefaultCase());
2445:       assertFalse(node4.isRegExp());
2446:       assertTrue(node4.hasOneChild());
2447:       assertEquals(49, node4.getType());
2448:       assertTrue(node4.isThrow());
2449:       assertFalse(node4.isStringKey());
2450:       assertFalse(node4.isString());
2451:       assertFalse(node4.isGetterDef());
2452:       assertFalse(node4.isParamList());
2453:       assertEquals((-1), node4.getCharno());
2454:       assertFalse(node4.isDebugger());
2455:       assertFalse(node4.isInc());
2456:       assertFalse(node4.isCase());
2457:       assertFalse(node4.isContinue());
2458:       assertFalse(node4.isFalse());
2459:       assertFalse(node4.hasMoreThanOneChild());
2460:       assertEquals(1, node4.getChildCount());
2461:       assertFalse(node4.isThis());
2462:       assertFalse(node4.isBlock());
2463:       assertFalse(node4.isHook());
2464:       assertTrue(node4.hasChildren());
2465:       assertEquals((-1), node4.getLineno());
2466:       assertFalse(node4.isIn());
2467:       assertFalse(node4.isCatch());
2468:       assertFalse(node4.isInstanceOf());
2469:       assertFalse(node4.isSetterDef());
2470:       assertFalse(node4.isIf());
2471:       assertFalse(node4.isNE());
2472:       assertFalse(node2.isBlock());
2473:       assertFalse(node2.isAdd());
2474:       assertFalse(node2.isVar());
2475:       assertEquals(111, node2.getSourcePosition());
2476:       assertFalse(node2.isStringKey());
2477:       assertFalse(node2.isNull());
2478:       assertFalse(node2.isParamList());
2479:       assertFalse(node2.isCall());
2480:       assertFalse(node2.isName());
2481:       assertEquals(0, node2.getLineno());
2482:       assertFalse(node2.isLabel());
2483:       assertFalse(node2.isAssignAdd());
2484:       assertFalse(node2.isContinue());
2485:       assertFalse(node2.isOr());
2486:       assertEquals(0, node2.getChildCount());
2487:       assertEquals(40, node2.getType());
2488:       assertFalse(node2.isSetterDef());
2489:       assertFalse(node2.isDefaultCase());
2490:       assertFalse(node2.isNew());
2491:       assertFalse(node2.isDo());
2492:       assertFalse(node2.isCast());
2493:       assertFalse(node2.isExprResult());
2494:       assertFalse(node2.isFunction());
2495:       assertFalse(node2.isTrue());
2496:       assertFalse(node2.isDebugger());
2497:       assertFalse(node2.isAssign());
2498:       assertFalse(node2.isGetElem());
2499:       assertFalse(node2.isAnd());
2500:       assertFalse(node2.isDelProp());
2501:       assertFalse(node2.isVoid());
2502:       assertFalse(node2.isReturn());
2503:       assertFalse(node2.isComma());
2504:       assertFalse(node2.isDec());
2505:       assertFalse(node2.isNot());
2506:       assertFalse(node2.isObjectLit());
2507:       assertFalse(node2.isTypeOf());
2508:       assertFalse(node2.isWhile());
2509:       assertFalse(node2.hasChildren());
2510:       assertFalse(node2.isGetProp());
2511:       assertFalse(node2.isHook());
2512:       assertFalse(node2.isFalse());
2513:       assertFalse(node2.isBreak());
2514:       assertFalse(node2.isSwitch());
2515:       assertFalse(node2.isIn());
2516:       assertFalse(node2.isThrow());
2517:       assertFalse(node2.isEmpty());
2518:       assertFalse(node2.isInc());
2519:       assertFalse(node2.isRegExp());
2520:       assertFalse(node2.isWith());
2521:       assertFalse(node2.isIf());
2522:       assertFalse(node2.isNE());
2523:       assertFalse(node2.isArrayLit());
2524:       assertFalse(node2.isLabelName());
2525:       assertFalse(node2.isInstanceOf());
2526:       assertFalse(node2.isCatch());
2527:       assertFalse(node2.isThis());
2528:       assertFalse(node2.hasMoreThanOneChild());
2529:       assertEquals(111, node2.getCharno());
2530:       assertFalse(node2.isNumber());
2531:       assertFalse(node2.isGetterDef());
2532:       assertFalse(node2.isScript());
2533:       assertFalse(node2.isFor());
2534:       assertTrue(node2.isString());
2535:       assertFalse(node2.isCase());
2536:       
2537:       // Undeclared exception!
2538:       try { 
2539:         node0.replaceChild(node1, node2);
2540:         fail("Expecting exception: IllegalArgumentException");
2541:       
2542:       } catch(IllegalArgumentException e) {
2543:          //
2544:          // The new child node already has a parent.
2545:          //
2546:          verifyException("com.google.common.base.Preconditions", e);
2547:       }
2548:   }
2549: }
RegularFileObject[/tmp/EvoSuite_135_1628159820335/com/google/javascript/rhino/Node_135_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:37:00 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_135_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_135_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.common.collect.Sets$1",
101:       "com.google.javascript.rhino.SourcePosition",
102:       "com.google.common.collect.ImmutableMapKeySet",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.javascript.rhino.Node$AncestorIterable$1",
115:       "com.google.common.collect.Iterators$12",
116:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
117:       "com.google.common.collect.Iterators$11",
118:       "com.google.javascript.rhino.jstype.JSType$1",
119:       "com.google.common.collect.EmptyImmutableBiMap",
120:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
121:       "com.google.common.base.Predicate",
122:       "com.google.javascript.rhino.jstype.JSType$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.common.collect.SingletonImmutableSet",
135:       "com.google.javascript.rhino.jstype.NamedType",
136:       "com.google.common.collect.Iterators$13",
137:       "com.google.javascript.rhino.InputId",
138:       "com.google.common.collect.ImmutableList$SerializedForm",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
163:       "com.google.common.base.Joiner$MapJoiner",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.javascript.rhino.Node$AncestorIterable",
185:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
186:       "com.google.common.collect.Lists$RandomAccessListWrapper",
187:       "com.google.common.collect.ImmutableEnumSet",
188:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
189:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
190:       "com.google.javascript.rhino.jstype.EnumElementType",
191:       "com.google.javascript.rhino.jstype.UnionType",
192:       "com.google.common.base.Objects",
193:       "com.google.javascript.rhino.Node$NumberNode",
194:       "com.google.common.collect.SingletonImmutableList",
195:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
196:       "com.google.common.collect.ImmutableCollection$Builder",
197:       "com.google.javascript.rhino.jstype.StaticSlot",
198:       "com.google.common.collect.Iterators$6",
199:       "com.google.common.collect.BiMap",
200:       "com.google.common.collect.Iterators$7",
201:       "com.google.common.collect.AbstractSetMultimap",
202:       "com.google.common.base.Function",
203:       "com.google.common.collect.ImmutableSet",
204:       "com.google.common.collect.Lists$AbstractListWrapper",
205:       "com.google.common.collect.ImmutableMap",
206:       "com.google.common.collect.AbstractIndexedListIterator",
207:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
208:       "com.google.common.collect.Maps$1",
209:       "com.google.javascript.rhino.jstype.EnumType",
210:       "com.google.common.collect.Iterators$1",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$2",
213:       "com.google.javascript.rhino.jstype.NamespaceType",
214:       "com.google.common.collect.Iterators$3",
215:       "com.google.common.collect.Sets",
216:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
217:       "com.google.javascript.rhino.Node$ObjectPropListItem",
218:       "com.google.common.collect.Lists$StringAsImmutableList",
219:       "com.google.common.collect.Lists$2",
220:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
221:       "com.google.common.collect.ImmutableList$Builder",
222:       "com.google.common.collect.Lists$1",
223:       "com.google.javascript.rhino.jstype.StaticReference",
224:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
225:       "com.google.common.collect.Multiset",
226:       "com.google.common.collect.AbstractMultimap",
227:       "com.google.common.collect.Multimap",
228:       "com.google.common.collect.Iterators",
229:       "com.google.common.collect.EmptyImmutableSet",
230:       "com.google.common.collect.Maps$ImprovedAbstractMap",
231:       "com.google.common.collect.ImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
233:       "com.google.common.collect.ImmutableList",
234:       "com.google.common.collect.SingletonImmutableBiMap",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
236:       "com.google.javascript.rhino.jstype.StringType",
237:       "com.google.javascript.rhino.Node$AbstractPropListItem",
238:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
239:       "com.google.javascript.rhino.jstype.TemplatizedType",
240:       "com.google.javascript.rhino.jstype.Visitor",
241:       "com.google.javascript.rhino.jstype.NoResolvedType",
242:       "com.google.javascript.rhino.jstype.JSTypeNative",
243:       "com.google.javascript.rhino.jstype.AllType",
244:       "com.google.common.collect.Maps",
245:       "com.google.common.collect.SetMultimap",
246:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
247:       "com.google.common.collect.Maps$EntryTransformer",
248:       "com.google.javascript.rhino.JSTypeExpression",
249:       "com.google.common.collect.Iterators$MergingIterator"
250:     );
251:   } 
252: 
253:   private static void resetClasses() {
254:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_135_tmp__ESTest_scaffolding.class.getClassLoader()); 
255: 
256:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
257:       "com.google.javascript.rhino.Node",
258:       "com.google.javascript.rhino.Node$NumberNode",
259:       "com.google.javascript.rhino.Node$StringNode",
260:       "com.google.javascript.rhino.Node$AbstractPropListItem",
261:       "com.google.javascript.rhino.Node$ObjectPropListItem",
262:       "com.google.javascript.rhino.Node$IntPropListItem",
263:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
264:       "com.google.javascript.rhino.Node$AncestorIterable",
265:       "com.google.javascript.rhino.Node$NodeMismatch",
266:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
267:       "com.google.javascript.rhino.Node$SideEffectFlags",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Preconditions",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
301:       "com.google.javascript.rhino.jstype.JSType$1",
302:       "com.google.javascript.rhino.jstype.JSType",
303:       "com.google.javascript.rhino.jstype.ObjectType",
304:       "com.google.javascript.rhino.jstype.ProxyObjectType",
305:       "com.google.javascript.rhino.jstype.TemplateType",
306:       "com.google.javascript.rhino.jstype.ValueType",
307:       "com.google.javascript.rhino.jstype.BooleanType",
308:       "com.google.javascript.rhino.jstype.NullType",
309:       "com.google.javascript.rhino.jstype.NumberType",
310:       "com.google.javascript.rhino.jstype.StringType",
311:       "com.google.javascript.rhino.jstype.UnknownType",
312:       "com.google.javascript.rhino.jstype.VoidType",
313:       "com.google.javascript.rhino.jstype.AllType",
314:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
315:       "com.google.common.collect.ImmutableMap",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.collect.EmptyImmutableBiMap",
318:       "com.google.javascript.rhino.jstype.PropertyMap$1",
319:       "com.google.javascript.rhino.jstype.PropertyMap",
320:       "com.google.javascript.rhino.jstype.FunctionType",
321:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
322:       "com.google.javascript.rhino.Token",
323:       "com.google.javascript.rhino.jstype.ArrowType",
324:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
325:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
326:       "com.google.javascript.rhino.jstype.InstanceObjectType",
327:       "com.google.javascript.rhino.jstype.Property",
328:       "com.google.common.collect.Lists",
329:       "com.google.javascript.rhino.jstype.NoObjectType",
330:       "com.google.javascript.rhino.jstype.NoType",
331:       "com.google.javascript.rhino.jstype.NoResolvedType",
332:       "com.google.common.collect.SingletonImmutableList",
333:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
334:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
335:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
336:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
337:       "com.google.javascript.rhino.jstype.UnionType",
338:       "com.google.javascript.rhino.jstype.FunctionBuilder",
339:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.javascript.rhino.jstype.TernaryValue",
348:       "com.google.common.collect.Iterables",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
353:       "com.google.common.collect.Sets",
354:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
355:       "com.google.javascript.rhino.InputId",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
364:       "com.google.javascript.rhino.JSTypeExpression",
365:       "com.google.common.collect.Platform",
366:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
371:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.JSDocInfo$Marker",
374:       "com.google.common.collect.Iterators$12",
375:       "com.google.javascript.rhino.jstype.JSType$2",
376:       "com.google.common.collect.ImmutableList$1"
377:     );
378:   }
379: }

[MASTER] 10:37:00.884 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("", 0, 111);
assertNotNull(node0);
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(111, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertEquals(111, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());

Node node1 = new Node(49, node0, 41, (-3141));
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(111, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertEquals(111, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertTrue(node1.hasOneChild());
assertEquals(49, node1.getType());
assertFalse(node1.isEmpty());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isSetterDef());
assertTrue(node1.isThrow());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());

boolean boolean0 = node1.wasEmptyNode();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean0);
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(111, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertEquals(111, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertTrue(node1.hasOneChild());
assertEquals(49, node1.getType());
assertFalse(node1.isEmpty());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isSetterDef());
assertTrue(node1.isThrow());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());

String string0 = node1.checkTreeEquals(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotNull(string0);
assertEquals("Node tree inequality:\nTree1:\nTHROW\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: THROW\n    STRING  0\n\n\nSubtree2: STRING  0\n", string0);
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(111, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertEquals(111, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertTrue(node1.hasOneChild());
assertEquals(49, node1.getType());
assertFalse(node1.isEmpty());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isSetterDef());
assertTrue(node1.isThrow());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());

String string1 = node1.getQualifiedName();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNull(string1);
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(111, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertEquals(111, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertTrue(node1.hasOneChild());
assertEquals(49, node1.getType());
assertFalse(node1.isEmpty());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isSetterDef());
assertTrue(node1.isThrow());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotNull(node_NodeMismatch0);
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(111, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertEquals(111, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertTrue(node1.hasOneChild());
assertEquals(49, node1.getType());
assertFalse(node1.isEmpty());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isSetterDef());
assertTrue(node1.isThrow());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());

Node node2 = node0.getLastSibling();
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(111, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertEquals(111, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertEquals(111, node2.getSourcePosition());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertEquals(0, node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertEquals(0, node2.getChildCount());
assertEquals(40, node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isAnd());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(111, node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isFor());
assertTrue(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());

boolean boolean1 = node1.isEquivalentToTyped(node2);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(111, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertEquals(111, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertTrue(node1.hasOneChild());
assertEquals(49, node1.getType());
assertFalse(node1.isEmpty());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isSetterDef());
assertTrue(node1.isThrow());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertEquals(111, node2.getSourcePosition());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertEquals(0, node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertEquals(0, node2.getChildCount());
assertEquals(40, node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isAnd());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(111, node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isFor());
assertTrue(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());

int int0 = node0.getSourceOffset();
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertEquals((-1), int0);
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(111, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertEquals(111, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());

Iterable<Node> iterable0 = node2.children();
assertFalse(iterable0.contains(node0));
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertNotNull(iterable0);
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(111, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertEquals(111, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertEquals(111, node2.getSourcePosition());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertEquals(0, node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertEquals(0, node2.getChildCount());
assertEquals(40, node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isAnd());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(111, node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isFor());
assertTrue(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());

boolean boolean2 = node2.mayMutateArguments();
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(boolean2 == boolean0);
assertFalse(boolean2 == boolean1);
assertTrue(boolean2);
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(111, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertEquals(111, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertEquals(111, node2.getSourcePosition());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertEquals(0, node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertEquals(0, node2.getChildCount());
assertEquals(40, node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isAnd());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(111, node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isFor());
assertTrue(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());

boolean boolean3 = node0.isDo();
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertFalse(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(boolean3);
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(111, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertEquals(111, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());

boolean boolean4 = node2.isNot();
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertFalse(boolean4 == boolean2);
assertFalse(boolean4);
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(111, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertEquals(111, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertEquals(111, node2.getSourcePosition());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertEquals(0, node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertEquals(0, node2.getChildCount());
assertEquals(40, node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isAnd());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(111, node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isFor());
assertTrue(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());

boolean boolean5 = node2.isName();
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean5 == boolean1);
assertFalse(boolean5 == boolean2);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean3);
assertFalse(boolean5);
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(111, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertEquals(111, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertEquals(111, node2.getSourcePosition());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertEquals(0, node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertEquals(0, node2.getChildCount());
assertEquals(40, node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isAnd());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(111, node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isFor());
assertTrue(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());

int int1 = node0.getLength();
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(int1 == int0);
assertEquals(0, int1);
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(111, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertEquals(111, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());

boolean boolean6 = node2.isGetterDef();
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean3);
assertFalse(boolean6 == boolean2);
assertTrue(boolean6 == boolean5);
assertFalse(boolean6);
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(111, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertEquals(111, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertEquals(111, node2.getSourcePosition());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertEquals(0, node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertEquals(0, node2.getChildCount());
assertEquals(40, node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isAnd());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(111, node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isFor());
assertTrue(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());

StaticSourceFile staticSourceFile0 = node2.getStaticSourceFile();
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertNull(staticSourceFile0);
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(111, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertEquals(111, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertEquals(111, node2.getSourcePosition());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertEquals(0, node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertEquals(0, node2.getChildCount());
assertEquals(40, node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isAnd());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(111, node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isFor());
assertTrue(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());

Node node3 = node2.getNext();
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertNull(node3);
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(111, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertEquals(111, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertEquals(111, node2.getSourcePosition());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertEquals(0, node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertEquals(0, node2.getChildCount());
assertEquals(40, node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isAnd());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(111, node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isFor());
assertTrue(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());

Node node4 = node2.getParent();
assertSame(node0, node2);
assertSame(node4, node1);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node4);
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals(111, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertEquals(111, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node4.isScript());
assertFalse(node4.isCast());
assertFalse(node4.isExprResult());
assertFalse(node4.isGetElem());
assertFalse(node4.isAssign());
assertFalse(node4.isWith());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.isLabel());
assertFalse(node4.isGetProp());
assertFalse(node4.isLabelName());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isAnd());
assertFalse(node4.isNumber());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isSwitch());
assertFalse(node4.isCall());
assertFalse(node4.isDo());
assertFalse(node4.isWhile());
assertFalse(node4.isVar());
assertFalse(node4.isComma());
assertFalse(node4.isReturn());
assertFalse(node4.isOr());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isBreak());
assertFalse(node4.isEmpty());
assertFalse(node4.isName());
assertFalse(node4.isDelProp());
assertFalse(node4.isNull());
assertFalse(node4.isTrue());
assertFalse(node4.isTry());
assertFalse(node4.isVoid());
assertFalse(node4.isFunction());
assertFalse(node4.isArrayLit());
assertFalse(node4.isFor());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isRegExp());
assertTrue(node4.hasOneChild());
assertEquals(49, node4.getType());
assertTrue(node4.isThrow());
assertFalse(node4.isStringKey());
assertFalse(node4.isString());
assertFalse(node4.isGetterDef());
assertFalse(node4.isParamList());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isDebugger());
assertFalse(node4.isInc());
assertFalse(node4.isCase());
assertFalse(node4.isContinue());
assertFalse(node4.isFalse());
assertFalse(node4.hasMoreThanOneChild());
assertEquals(1, node4.getChildCount());
assertFalse(node4.isThis());
assertFalse(node4.isBlock());
assertFalse(node4.isHook());
assertTrue(node4.hasChildren());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isIn());
assertFalse(node4.isCatch());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isSetterDef());
assertFalse(node4.isIf());
assertFalse(node4.isNE());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertEquals(111, node2.getSourcePosition());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertEquals(0, node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertEquals(0, node2.getChildCount());
assertEquals(40, node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isAnd());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(111, node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isFor());
assertTrue(node2.isString());
assertFalse(node2.isCase());

node0.replaceChild(node1, node2);

[MASTER] 10:37:01.107 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_137_1628159820903/com/google/javascript/rhino/Node_137_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_137_1628159820903/com/google/javascript/rhino/Node_137_tmp__ESTest_scaffolding.java]]
[MASTER] 10:37:01.107 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:37:01.107 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:37:01.108 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 127
[MASTER] 10:37:01.109 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_137_1628159820903/com/google/javascript/rhino/Node_137_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:37:00 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_137_tmp__ESTest extends Node_137_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(951.13);
22:       assertNotNull(node0);
23:       assertFalse(node0.isReturn());
24:       assertFalse(node0.isAssignAdd());
25:       assertEquals((-1), node0.getLineno());
26:       assertFalse(node0.isDo());
27:       assertFalse(node0.isWhile());
28:       assertFalse(node0.hasChildren());
29:       assertEquals(39, node0.getType());
30:       assertFalse(node0.isContinue());
31:       assertFalse(node0.hasMoreThanOneChild());
32:       assertFalse(node0.isLabel());
33:       assertFalse(node0.isTypeOf());
34:       assertFalse(node0.isDec());
35:       assertFalse(node0.isAssign());
36:       assertFalse(node0.isBlock());
37:       assertFalse(node0.isCast());
38:       assertFalse(node0.isLabelName());
39:       assertFalse(node0.hasOneChild());
40:       assertFalse(node0.isScript());
41:       assertFalse(node0.isStringKey());
42:       assertFalse(node0.isObjectLit());
43:       assertEquals((-1), node0.getSourcePosition());
44:       assertFalse(node0.isNot());
45:       assertFalse(node0.isParamList());
46:       assertFalse(node0.isGetProp());
47:       assertFalse(node0.isBreak());
48:       assertFalse(node0.isDefaultCase());
49:       assertEquals(0, node0.getChildCount());
50:       assertFalse(node0.isComma());
51:       assertFalse(node0.isAdd());
52:       assertFalse(node0.isVar());
53:       assertFalse(node0.isExprResult());
54:       assertFalse(node0.isVoid());
55:       assertFalse(node0.isCall());
56:       assertFalse(node0.isGetElem());
57:       assertFalse(node0.isName());
58:       assertFalse(node0.isNew());
59:       assertFalse(node0.isDelProp());
60:       assertFalse(node0.isEmpty());
61:       assertFalse(node0.isNull());
62:       assertFalse(node0.isTrue());
63:       assertFalse(node0.isOr());
64:       assertFalse(node0.isIn());
65:       assertFalse(node0.isCase());
66:       assertTrue(node0.isNumber());
67:       assertFalse(node0.isFor());
68:       assertFalse(node0.isHook());
69:       assertFalse(node0.isSwitch());
70:       assertFalse(node0.isArrayLit());
71:       assertFalse(node0.isTry());
72:       assertFalse(node0.isString());
73:       assertFalse(node0.isGetterDef());
74:       assertEquals((-1), node0.getCharno());
75:       assertFalse(node0.isDebugger());
76:       assertFalse(node0.isCatch());
77:       assertFalse(node0.isInstanceOf());
78:       assertFalse(node0.isAnd());
79:       assertFalse(node0.isSetterDef());
80:       assertFalse(node0.isWith());
81:       assertFalse(node0.isThrow());
82:       assertFalse(node0.isFalse());
83:       assertFalse(node0.isThis());
84:       assertFalse(node0.isFunction());
85:       assertFalse(node0.isRegExp());
86:       assertFalse(node0.isInc());
87:       assertFalse(node0.isIf());
88:       assertFalse(node0.isNE());
89:       assertEquals(12, Node.COLUMN_BITS);
90:       assertEquals(46, Node.IS_NAMESPACE);
91:       assertEquals(2, Node.POST_FLAG);
92:       assertEquals(51, Node.STATIC_SOURCE_FILE);
93:       assertEquals(29, Node.JSDOC_INFO_PROP);
94:       assertEquals(30, Node.VAR_ARGS_NAME);
95:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
96:       assertEquals(15, Node.NO_SIDE_EFFECTS);
97:       assertEquals(47, Node.IS_DISPATCHER);
98:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
99:       assertEquals(57, Node.LAST_PROP);
100:       assertEquals(1, Node.DECR_FLAG);
101:       assertEquals(32, Node.INCRDECR_PROP);
102:       assertEquals(54, Node.SLASH_V);
103:       assertEquals(50, Node.FREE_CALL);
104:       assertEquals(40, Node.ORIGINALNAME_PROP);
105:       assertEquals(43, Node.IS_CONSTANT_NAME);
106:       assertEquals(55, Node.INFERRED_FUNCTION);
107:       assertEquals(8, Node.FLAG_NO_THROWS);
108:       assertEquals(4095, Node.COLUMN_MASK);
109:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
110:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
111:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
112:       assertEquals(39, Node.EMPTY_BLOCK);
113:       assertEquals(52, Node.LENGTH);
114:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
115:       assertEquals(53, Node.INPUT_ID);
116:       assertEquals(57, Node.REFLECTED_OBJECT);
117:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
118:       assertEquals(36, Node.QUOTED_PROP);
119:       assertEquals(49, Node.DIRECT_EVAL);
120:       assertEquals(56, Node.CHANGE_TIME);
121:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
122:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
123:       assertEquals(37, Node.OPT_ARG_NAME);
124:       assertEquals(48, Node.DIRECTIVES);
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertFalse(iterable0.contains(node0));
128:       assertNotNull(iterable0);
129:       assertFalse(node0.isReturn());
130:       assertFalse(node0.isAssignAdd());
131:       assertEquals((-1), node0.getLineno());
132:       assertFalse(node0.isDo());
133:       assertFalse(node0.isWhile());
134:       assertFalse(node0.hasChildren());
135:       assertEquals(39, node0.getType());
136:       assertFalse(node0.isContinue());
137:       assertFalse(node0.hasMoreThanOneChild());
138:       assertFalse(node0.isLabel());
139:       assertFalse(node0.isTypeOf());
140:       assertFalse(node0.isDec());
141:       assertFalse(node0.isAssign());
142:       assertFalse(node0.isBlock());
143:       assertFalse(node0.isCast());
144:       assertFalse(node0.isLabelName());
145:       assertFalse(node0.hasOneChild());
146:       assertFalse(node0.isScript());
147:       assertFalse(node0.isStringKey());
148:       assertFalse(node0.isObjectLit());
149:       assertEquals((-1), node0.getSourcePosition());
150:       assertFalse(node0.isNot());
151:       assertFalse(node0.isParamList());
152:       assertFalse(node0.isGetProp());
153:       assertFalse(node0.isBreak());
154:       assertFalse(node0.isDefaultCase());
155:       assertEquals(0, node0.getChildCount());
156:       assertFalse(node0.isComma());
157:       assertFalse(node0.isAdd());
158:       assertFalse(node0.isVar());
159:       assertFalse(node0.isExprResult());
160:       assertFalse(node0.isVoid());
161:       assertFalse(node0.isCall());
162:       assertFalse(node0.isGetElem());
163:       assertFalse(node0.isName());
164:       assertFalse(node0.isNew());
165:       assertFalse(node0.isDelProp());
166:       assertFalse(node0.isEmpty());
167:       assertFalse(node0.isNull());
168:       assertFalse(node0.isTrue());
169:       assertFalse(node0.isOr());
170:       assertFalse(node0.isIn());
171:       assertFalse(node0.isCase());
172:       assertTrue(node0.isNumber());
173:       assertFalse(node0.isFor());
174:       assertFalse(node0.isHook());
175:       assertFalse(node0.isSwitch());
176:       assertFalse(node0.isArrayLit());
177:       assertFalse(node0.isTry());
178:       assertFalse(node0.isString());
179:       assertFalse(node0.isGetterDef());
180:       assertEquals((-1), node0.getCharno());
181:       assertFalse(node0.isDebugger());
182:       assertFalse(node0.isCatch());
183:       assertFalse(node0.isInstanceOf());
184:       assertFalse(node0.isAnd());
185:       assertFalse(node0.isSetterDef());
186:       assertFalse(node0.isWith());
187:       assertFalse(node0.isThrow());
188:       assertFalse(node0.isFalse());
189:       assertFalse(node0.isThis());
190:       assertFalse(node0.isFunction());
191:       assertFalse(node0.isRegExp());
192:       assertFalse(node0.isInc());
193:       assertFalse(node0.isIf());
194:       assertFalse(node0.isNE());
195:       assertEquals(12, Node.COLUMN_BITS);
196:       assertEquals(46, Node.IS_NAMESPACE);
197:       assertEquals(2, Node.POST_FLAG);
198:       assertEquals(51, Node.STATIC_SOURCE_FILE);
199:       assertEquals(29, Node.JSDOC_INFO_PROP);
200:       assertEquals(30, Node.VAR_ARGS_NAME);
201:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
202:       assertEquals(15, Node.NO_SIDE_EFFECTS);
203:       assertEquals(47, Node.IS_DISPATCHER);
204:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
205:       assertEquals(57, Node.LAST_PROP);
206:       assertEquals(1, Node.DECR_FLAG);
207:       assertEquals(32, Node.INCRDECR_PROP);
208:       assertEquals(54, Node.SLASH_V);
209:       assertEquals(50, Node.FREE_CALL);
210:       assertEquals(40, Node.ORIGINALNAME_PROP);
211:       assertEquals(43, Node.IS_CONSTANT_NAME);
212:       assertEquals(55, Node.INFERRED_FUNCTION);
213:       assertEquals(8, Node.FLAG_NO_THROWS);
214:       assertEquals(4095, Node.COLUMN_MASK);
215:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
216:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
217:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
218:       assertEquals(39, Node.EMPTY_BLOCK);
219:       assertEquals(52, Node.LENGTH);
220:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
221:       assertEquals(53, Node.INPUT_ID);
222:       assertEquals(57, Node.REFLECTED_OBJECT);
223:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
224:       assertEquals(36, Node.QUOTED_PROP);
225:       assertEquals(49, Node.DIRECT_EVAL);
226:       assertEquals(56, Node.CHANGE_TIME);
227:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
228:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
229:       assertEquals(37, Node.OPT_ARG_NAME);
230:       assertEquals(48, Node.DIRECTIVES);
231:       
232:       boolean boolean0 = node0.isOr();
233:       assertFalse(boolean0);
234:       assertFalse(node0.isReturn());
235:       assertFalse(node0.isAssignAdd());
236:       assertEquals((-1), node0.getLineno());
237:       assertFalse(node0.isDo());
238:       assertFalse(node0.isWhile());
239:       assertFalse(node0.hasChildren());
240:       assertEquals(39, node0.getType());
241:       assertFalse(node0.isContinue());
242:       assertFalse(node0.hasMoreThanOneChild());
243:       assertFalse(node0.isLabel());
244:       assertFalse(node0.isTypeOf());
245:       assertFalse(node0.isDec());
246:       assertFalse(node0.isAssign());
247:       assertFalse(node0.isBlock());
248:       assertFalse(node0.isCast());
249:       assertFalse(node0.isLabelName());
250:       assertFalse(node0.hasOneChild());
251:       assertFalse(node0.isScript());
252:       assertFalse(node0.isStringKey());
253:       assertFalse(node0.isObjectLit());
254:       assertEquals((-1), node0.getSourcePosition());
255:       assertFalse(node0.isNot());
256:       assertFalse(node0.isParamList());
257:       assertFalse(node0.isGetProp());
258:       assertFalse(node0.isBreak());
259:       assertFalse(node0.isDefaultCase());
260:       assertEquals(0, node0.getChildCount());
261:       assertFalse(node0.isComma());
262:       assertFalse(node0.isAdd());
263:       assertFalse(node0.isVar());
264:       assertFalse(node0.isExprResult());
265:       assertFalse(node0.isVoid());
266:       assertFalse(node0.isCall());
267:       assertFalse(node0.isGetElem());
268:       assertFalse(node0.isName());
269:       assertFalse(node0.isNew());
270:       assertFalse(node0.isDelProp());
271:       assertFalse(node0.isEmpty());
272:       assertFalse(node0.isNull());
273:       assertFalse(node0.isTrue());
274:       assertFalse(node0.isOr());
275:       assertFalse(node0.isIn());
276:       assertFalse(node0.isCase());
277:       assertTrue(node0.isNumber());
278:       assertFalse(node0.isFor());
279:       assertFalse(node0.isHook());
280:       assertFalse(node0.isSwitch());
281:       assertFalse(node0.isArrayLit());
282:       assertFalse(node0.isTry());
283:       assertFalse(node0.isString());
284:       assertFalse(node0.isGetterDef());
285:       assertEquals((-1), node0.getCharno());
286:       assertFalse(node0.isDebugger());
287:       assertFalse(node0.isCatch());
288:       assertFalse(node0.isInstanceOf());
289:       assertFalse(node0.isAnd());
290:       assertFalse(node0.isSetterDef());
291:       assertFalse(node0.isWith());
292:       assertFalse(node0.isThrow());
293:       assertFalse(node0.isFalse());
294:       assertFalse(node0.isThis());
295:       assertFalse(node0.isFunction());
296:       assertFalse(node0.isRegExp());
297:       assertFalse(node0.isInc());
298:       assertFalse(node0.isIf());
299:       assertFalse(node0.isNE());
300:       assertEquals(12, Node.COLUMN_BITS);
301:       assertEquals(46, Node.IS_NAMESPACE);
302:       assertEquals(2, Node.POST_FLAG);
303:       assertEquals(51, Node.STATIC_SOURCE_FILE);
304:       assertEquals(29, Node.JSDOC_INFO_PROP);
305:       assertEquals(30, Node.VAR_ARGS_NAME);
306:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
307:       assertEquals(15, Node.NO_SIDE_EFFECTS);
308:       assertEquals(47, Node.IS_DISPATCHER);
309:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
310:       assertEquals(57, Node.LAST_PROP);
311:       assertEquals(1, Node.DECR_FLAG);
312:       assertEquals(32, Node.INCRDECR_PROP);
313:       assertEquals(54, Node.SLASH_V);
314:       assertEquals(50, Node.FREE_CALL);
315:       assertEquals(40, Node.ORIGINALNAME_PROP);
316:       assertEquals(43, Node.IS_CONSTANT_NAME);
317:       assertEquals(55, Node.INFERRED_FUNCTION);
318:       assertEquals(8, Node.FLAG_NO_THROWS);
319:       assertEquals(4095, Node.COLUMN_MASK);
320:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
321:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
322:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
323:       assertEquals(39, Node.EMPTY_BLOCK);
324:       assertEquals(52, Node.LENGTH);
325:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
326:       assertEquals(53, Node.INPUT_ID);
327:       assertEquals(57, Node.REFLECTED_OBJECT);
328:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
329:       assertEquals(36, Node.QUOTED_PROP);
330:       assertEquals(49, Node.DIRECT_EVAL);
331:       assertEquals(56, Node.CHANGE_TIME);
332:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
333:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
334:       assertEquals(37, Node.OPT_ARG_NAME);
335:       assertEquals(48, Node.DIRECTIVES);
336:       
337:       Node node1 = Node.newString("", 429, 40);
338:       assertFalse(node1.equals((Object)node0));
339:       assertNotNull(node1);
340:       assertFalse(node1.hasOneChild());
341:       assertFalse(node1.isExprResult());
342:       assertFalse(node1.isGetElem());
343:       assertFalse(node1.isScript());
344:       assertFalse(node1.isCast());
345:       assertFalse(node1.isNumber());
346:       assertFalse(node1.isLabelName());
347:       assertFalse(node1.isNot());
348:       assertFalse(node1.isObjectLit());
349:       assertFalse(node1.isAnd());
350:       assertFalse(node1.isLabel());
351:       assertFalse(node1.isAssignAdd());
352:       assertFalse(node1.isOr());
353:       assertFalse(node1.isContinue());
354:       assertFalse(node1.isFalse());
355:       assertFalse(node1.isDo());
356:       assertFalse(node1.isThrow());
357:       assertTrue(node1.isString());
358:       assertEquals(429, node1.getLineno());
359:       assertFalse(node1.isInc());
360:       assertFalse(node1.isParamList());
361:       assertFalse(node1.isSwitch());
362:       assertFalse(node1.isStringKey());
363:       assertFalse(node1.isCatch());
364:       assertFalse(node1.hasMoreThanOneChild());
365:       assertFalse(node1.isInstanceOf());
366:       assertFalse(node1.isWith());
367:       assertFalse(node1.isCase());
368:       assertFalse(node1.isRegExp());
369:       assertFalse(node1.isThis());
370:       assertFalse(node1.isBlock());
371:       assertFalse(node1.isHook());
372:       assertFalse(node1.isFor());
373:       assertFalse(node1.isTry());
374:       assertFalse(node1.isVoid());
375:       assertFalse(node1.isFunction());
376:       assertFalse(node1.isArrayLit());
377:       assertEquals(1757224, node1.getSourcePosition());
378:       assertFalse(node1.isEmpty());
379:       assertFalse(node1.isIf());
380:       assertFalse(node1.isDelProp());
381:       assertFalse(node1.isGetterDef());
382:       assertFalse(node1.isTrue());
383:       assertFalse(node1.isDebugger());
384:       assertFalse(node1.isNE());
385:       assertFalse(node1.isIn());
386:       assertEquals(0, node1.getChildCount());
387:       assertEquals(40, node1.getCharno());
388:       assertFalse(node1.isSetterDef());
389:       assertFalse(node1.isDefaultCase());
390:       assertEquals(40, node1.getType());
391:       assertFalse(node1.isVar());
392:       assertFalse(node1.isNew());
393:       assertFalse(node1.isCall());
394:       assertFalse(node1.isAdd());
395:       assertFalse(node1.isBreak());
396:       assertFalse(node1.isName());
397:       assertFalse(node1.isNull());
398:       assertFalse(node1.isReturn());
399:       assertFalse(node1.isGetProp());
400:       assertFalse(node1.isWhile());
401:       assertFalse(node1.hasChildren());
402:       assertFalse(node1.isDec());
403:       assertFalse(node1.isTypeOf());
404:       assertFalse(node1.isAssign());
405:       assertFalse(node1.isComma());
406:       assertEquals(53, Node.INPUT_ID);
407:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
408:       assertEquals(36, Node.QUOTED_PROP);
409:       assertEquals(43, Node.IS_CONSTANT_NAME);
410:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
411:       assertEquals(4095, Node.COLUMN_MASK);
412:       assertEquals(37, Node.OPT_ARG_NAME);
413:       assertEquals(48, Node.DIRECTIVES);
414:       assertEquals(8, Node.FLAG_NO_THROWS);
415:       assertEquals(2, Node.POST_FLAG);
416:       assertEquals(56, Node.CHANGE_TIME);
417:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
418:       assertEquals(47, Node.IS_DISPATCHER);
419:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
420:       assertEquals(29, Node.JSDOC_INFO_PROP);
421:       assertEquals(57, Node.LAST_PROP);
422:       assertEquals(55, Node.INFERRED_FUNCTION);
423:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
424:       assertEquals(15, Node.NO_SIDE_EFFECTS);
425:       assertEquals(39, Node.EMPTY_BLOCK);
426:       assertEquals(52, Node.LENGTH);
427:       assertEquals(54, Node.SLASH_V);
428:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
429:       assertEquals(57, Node.REFLECTED_OBJECT);
430:       assertEquals(49, Node.DIRECT_EVAL);
431:       assertEquals(30, Node.VAR_ARGS_NAME);
432:       assertEquals(40, Node.ORIGINALNAME_PROP);
433:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
434:       assertEquals(32, Node.INCRDECR_PROP);
435:       assertEquals(12, Node.COLUMN_BITS);
436:       assertEquals(51, Node.STATIC_SOURCE_FILE);
437:       assertEquals(46, Node.IS_NAMESPACE);
438:       assertEquals(50, Node.FREE_CALL);
439:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
440:       assertEquals(1, Node.DECR_FLAG);
441:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
442:       
443:       boolean boolean1 = node1.isUnscopedQualifiedName();
444:       assertFalse(node1.equals((Object)node0));
445:       assertTrue(boolean1 == boolean0);
446:       assertFalse(boolean1);
447:       assertFalse(node1.hasOneChild());
448:       assertFalse(node1.isExprResult());
449:       assertFalse(node1.isGetElem());
450:       assertFalse(node1.isScript());
451:       assertFalse(node1.isCast());
452:       assertFalse(node1.isNumber());
453:       assertFalse(node1.isLabelName());
454:       assertFalse(node1.isNot());
455:       assertFalse(node1.isObjectLit());
456:       assertFalse(node1.isAnd());
457:       assertFalse(node1.isLabel());
458:       assertFalse(node1.isAssignAdd());
459:       assertFalse(node1.isOr());
460:       assertFalse(node1.isContinue());
461:       assertFalse(node1.isFalse());
462:       assertFalse(node1.isDo());
463:       assertFalse(node1.isThrow());
464:       assertTrue(node1.isString());
465:       assertEquals(429, node1.getLineno());
466:       assertFalse(node1.isInc());
467:       assertFalse(node1.isParamList());
468:       assertFalse(node1.isSwitch());
469:       assertFalse(node1.isStringKey());
470:       assertFalse(node1.isCatch());
471:       assertFalse(node1.hasMoreThanOneChild());
472:       assertFalse(node1.isInstanceOf());
473:       assertFalse(node1.isWith());
474:       assertFalse(node1.isCase());
475:       assertFalse(node1.isRegExp());
476:       assertFalse(node1.isThis());
477:       assertFalse(node1.isBlock());
478:       assertFalse(node1.isHook());
479:       assertFalse(node1.isFor());
480:       assertFalse(node1.isTry());
481:       assertFalse(node1.isVoid());
482:       assertFalse(node1.isFunction());
483:       assertFalse(node1.isArrayLit());
484:       assertEquals(1757224, node1.getSourcePosition());
485:       assertFalse(node1.isEmpty());
486:       assertFalse(node1.isIf());
487:       assertFalse(node1.isDelProp());
488:       assertFalse(node1.isGetterDef());
489:       assertFalse(node1.isTrue());
490:       assertFalse(node1.isDebugger());
491:       assertFalse(node1.isNE());
492:       assertFalse(node1.isIn());
493:       assertEquals(0, node1.getChildCount());
494:       assertEquals(40, node1.getCharno());
495:       assertFalse(node1.isSetterDef());
496:       assertFalse(node1.isDefaultCase());
497:       assertEquals(40, node1.getType());
498:       assertFalse(node1.isVar());
499:       assertFalse(node1.isNew());
500:       assertFalse(node1.isCall());
501:       assertFalse(node1.isAdd());
502:       assertFalse(node1.isBreak());
503:       assertFalse(node1.isName());
504:       assertFalse(node1.isNull());
505:       assertFalse(node1.isReturn());
506:       assertFalse(node1.isGetProp());
507:       assertFalse(node1.isWhile());
508:       assertFalse(node1.hasChildren());
509:       assertFalse(node1.isDec());
510:       assertFalse(node1.isTypeOf());
511:       assertFalse(node1.isAssign());
512:       assertFalse(node1.isComma());
513:       assertEquals(53, Node.INPUT_ID);
514:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
515:       assertEquals(36, Node.QUOTED_PROP);
516:       assertEquals(43, Node.IS_CONSTANT_NAME);
517:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
518:       assertEquals(4095, Node.COLUMN_MASK);
519:       assertEquals(37, Node.OPT_ARG_NAME);
520:       assertEquals(48, Node.DIRECTIVES);
521:       assertEquals(8, Node.FLAG_NO_THROWS);
522:       assertEquals(2, Node.POST_FLAG);
523:       assertEquals(56, Node.CHANGE_TIME);
524:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
525:       assertEquals(47, Node.IS_DISPATCHER);
526:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
527:       assertEquals(29, Node.JSDOC_INFO_PROP);
528:       assertEquals(57, Node.LAST_PROP);
529:       assertEquals(55, Node.INFERRED_FUNCTION);
530:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
531:       assertEquals(15, Node.NO_SIDE_EFFECTS);
532:       assertEquals(39, Node.EMPTY_BLOCK);
533:       assertEquals(52, Node.LENGTH);
534:       assertEquals(54, Node.SLASH_V);
535:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
536:       assertEquals(57, Node.REFLECTED_OBJECT);
537:       assertEquals(49, Node.DIRECT_EVAL);
538:       assertEquals(30, Node.VAR_ARGS_NAME);
539:       assertEquals(40, Node.ORIGINALNAME_PROP);
540:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
541:       assertEquals(32, Node.INCRDECR_PROP);
542:       assertEquals(12, Node.COLUMN_BITS);
543:       assertEquals(51, Node.STATIC_SOURCE_FILE);
544:       assertEquals(46, Node.IS_NAMESPACE);
545:       assertEquals(50, Node.FREE_CALL);
546:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
547:       assertEquals(1, Node.DECR_FLAG);
548:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
549:       
550:       Node node2 = Node.newString("", 56, 42);
551:       assertNotSame(node2, node1);
552:       assertFalse(node2.equals((Object)node0));
553:       assertFalse(node2.equals((Object)node1));
554:       assertNotNull(node2);
555:       assertFalse(node2.isLabel());
556:       assertFalse(node2.isAssignAdd());
557:       assertFalse(node2.isReturn());
558:       assertEquals(42, node2.getCharno());
559:       assertFalse(node2.isTypeOf());
560:       assertFalse(node2.isNumber());
561:       assertFalse(node2.hasMoreThanOneChild());
562:       assertFalse(node2.hasChildren());
563:       assertFalse(node2.isOr());
564:       assertFalse(node2.isDec());
565:       assertFalse(node2.isAssign());
566:       assertFalse(node2.isGetElem());
567:       assertFalse(node2.isContinue());
568:       assertFalse(node2.isCast());
569:       assertFalse(node2.isLabelName());
570:       assertTrue(node2.isString());
571:       assertFalse(node2.isBlock());
572:       assertFalse(node2.isExprResult());
573:       assertFalse(node2.isNot());
574:       assertFalse(node2.isWhile());
575:       assertFalse(node2.isScript());
576:       assertFalse(node2.hasOneChild());
577:       assertFalse(node2.isGetProp());
578:       assertFalse(node2.isInstanceOf());
579:       assertFalse(node2.isThis());
580:       assertFalse(node2.isObjectLit());
581:       assertFalse(node2.isFalse());
582:       assertFalse(node2.isWith());
583:       assertFalse(node2.isAnd());
584:       assertFalse(node2.isCatch());
585:       assertFalse(node2.isFunction());
586:       assertEquals(40, node2.getType());
587:       assertFalse(node2.isThrow());
588:       assertFalse(node2.isInc());
589:       assertFalse(node2.isSetterDef());
590:       assertFalse(node2.isNE());
591:       assertEquals(229418, node2.getSourcePosition());
592:       assertFalse(node2.isIn());
593:       assertFalse(node2.isGetterDef());
594:       assertFalse(node2.isArrayLit());
595:       assertFalse(node2.isSwitch());
596:       assertFalse(node2.isIf());
597:       assertFalse(node2.isDelProp());
598:       assertFalse(node2.isTry());
599:       assertFalse(node2.isRegExp());
600:       assertFalse(node2.isHook());
601:       assertFalse(node2.isDebugger());
602:       assertFalse(node2.isCase());
603:       assertFalse(node2.isFor());
604:       assertFalse(node2.isParamList());
605:       assertFalse(node2.isNull());
606:       assertEquals(0, node2.getChildCount());
607:       assertFalse(node2.isComma());
608:       assertEquals(56, node2.getLineno());
609:       assertFalse(node2.isName());
610:       assertFalse(node2.isCall());
611:       assertFalse(node2.isStringKey());
612:       assertFalse(node2.isVoid());
613:       assertFalse(node2.isBreak());
614:       assertFalse(node2.isAdd());
615:       assertFalse(node2.isNew());
616:       assertFalse(node2.isTrue());
617:       assertFalse(node2.isVar());
618:       assertFalse(node2.isEmpty());
619:       assertFalse(node2.isDefaultCase());
620:       assertFalse(node2.isDo());
621:       assertEquals(37, Node.OPT_ARG_NAME);
622:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
623:       assertEquals(46, Node.IS_NAMESPACE);
624:       assertEquals(56, Node.CHANGE_TIME);
625:       assertEquals(32, Node.INCRDECR_PROP);
626:       assertEquals(12, Node.COLUMN_BITS);
627:       assertEquals(47, Node.IS_DISPATCHER);
628:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
629:       assertEquals(2, Node.POST_FLAG);
630:       assertEquals(30, Node.VAR_ARGS_NAME);
631:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
632:       assertEquals(54, Node.SLASH_V);
633:       assertEquals(43, Node.IS_CONSTANT_NAME);
634:       assertEquals(1, Node.DECR_FLAG);
635:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
636:       assertEquals(51, Node.STATIC_SOURCE_FILE);
637:       assertEquals(50, Node.FREE_CALL);
638:       assertEquals(48, Node.DIRECTIVES);
639:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
640:       assertEquals(39, Node.EMPTY_BLOCK);
641:       assertEquals(40, Node.ORIGINALNAME_PROP);
642:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
643:       assertEquals(4095, Node.COLUMN_MASK);
644:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
645:       assertEquals(53, Node.INPUT_ID);
646:       assertEquals(15, Node.NO_SIDE_EFFECTS);
647:       assertEquals(57, Node.LAST_PROP);
648:       assertEquals(49, Node.DIRECT_EVAL);
649:       assertEquals(55, Node.INFERRED_FUNCTION);
650:       assertEquals(29, Node.JSDOC_INFO_PROP);
651:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
652:       assertEquals(57, Node.REFLECTED_OBJECT);
653:       assertEquals(36, Node.QUOTED_PROP);
654:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
655:       assertEquals(52, Node.LENGTH);
656:       assertEquals(8, Node.FLAG_NO_THROWS);
657:       
658:       node0.putProp(1528, node1);
659:       assertNotSame(node1, node2);
660:       assertFalse(node0.equals((Object)node1));
661:       assertFalse(node0.equals((Object)node2));
662:       assertFalse(node1.equals((Object)node0));
663:       assertFalse(node1.equals((Object)node2));
664:       assertFalse(node0.isReturn());
665:       assertFalse(node0.isAssignAdd());
666:       assertEquals((-1), node0.getLineno());
667:       assertFalse(node0.isDo());
668:       assertFalse(node0.isWhile());
669:       assertFalse(node0.hasChildren());
670:       assertEquals(39, node0.getType());
671:       assertFalse(node0.isContinue());
672:       assertFalse(node0.hasMoreThanOneChild());
673:       assertFalse(node0.isLabel());
674:       assertFalse(node0.isTypeOf());
675:       assertFalse(node0.isDec());
676:       assertFalse(node0.isAssign());
677:       assertFalse(node0.isBlock());
678:       assertFalse(node0.isCast());
679:       assertFalse(node0.isLabelName());
680:       assertFalse(node0.hasOneChild());
681:       assertFalse(node0.isScript());
682:       assertFalse(node0.isStringKey());
683:       assertFalse(node0.isObjectLit());
684:       assertEquals((-1), node0.getSourcePosition());
685:       assertFalse(node0.isNot());
686:       assertFalse(node0.isParamList());
687:       assertFalse(node0.isGetProp());
688:       assertFalse(node0.isBreak());
689:       assertFalse(node0.isDefaultCase());
690:       assertEquals(0, node0.getChildCount());
691:       assertFalse(node0.isComma());
692:       assertFalse(node0.isAdd());
693:       assertFalse(node0.isVar());
694:       assertFalse(node0.isExprResult());
695:       assertFalse(node0.isVoid());
696:       assertFalse(node0.isCall());
697:       assertFalse(node0.isGetElem());
698:       assertFalse(node0.isName());
699:       assertFalse(node0.isNew());
700:       assertFalse(node0.isDelProp());
701:       assertFalse(node0.isEmpty());
702:       assertFalse(node0.isNull());
703:       assertFalse(node0.isTrue());
704:       assertFalse(node0.isOr());
705:       assertFalse(node0.isIn());
706:       assertFalse(node0.isCase());
707:       assertTrue(node0.isNumber());
708:       assertFalse(node0.isFor());
709:       assertFalse(node0.isHook());
710:       assertFalse(node0.isSwitch());
711:       assertFalse(node0.isArrayLit());
712:       assertFalse(node0.isTry());
713:       assertFalse(node0.isString());
714:       assertFalse(node0.isGetterDef());
715:       assertEquals((-1), node0.getCharno());
716:       assertFalse(node0.isDebugger());
717:       assertFalse(node0.isCatch());
718:       assertFalse(node0.isInstanceOf());
719:       assertFalse(node0.isAnd());
720:       assertFalse(node0.isSetterDef());
721:       assertFalse(node0.isWith());
722:       assertFalse(node0.isThrow());
723:       assertFalse(node0.isFalse());
724:       assertFalse(node0.isThis());
725:       assertFalse(node0.isFunction());
726:       assertFalse(node0.isRegExp());
727:       assertFalse(node0.isInc());
728:       assertFalse(node0.isIf());
729:       assertFalse(node0.isNE());
730:       assertFalse(node1.hasOneChild());
731:       assertFalse(node1.isExprResult());
732:       assertFalse(node1.isGetElem());
733:       assertFalse(node1.isScript());
734:       assertFalse(node1.isCast());
735:       assertFalse(node1.isNumber());
736:       assertFalse(node1.isLabelName());
737:       assertFalse(node1.isNot());
738:       assertFalse(node1.isObjectLit());
739:       assertFalse(node1.isAnd());
740:       assertFalse(node1.isLabel());
741:       assertFalse(node1.isAssignAdd());
742:       assertFalse(node1.isOr());
743:       assertFalse(node1.isContinue());
744:       assertFalse(node1.isFalse());
745:       assertFalse(node1.isDo());
746:       assertFalse(node1.isThrow());
747:       assertTrue(node1.isString());
748:       assertEquals(429, node1.getLineno());
749:       assertFalse(node1.isInc());
750:       assertFalse(node1.isParamList());
751:       assertFalse(node1.isSwitch());
752:       assertFalse(node1.isStringKey());
753:       assertFalse(node1.isCatch());
754:       assertFalse(node1.hasMoreThanOneChild());
755:       assertFalse(node1.isInstanceOf());
756:       assertFalse(node1.isWith());
757:       assertFalse(node1.isCase());
758:       assertFalse(node1.isRegExp());
759:       assertFalse(node1.isThis());
760:       assertFalse(node1.isBlock());
761:       assertFalse(node1.isHook());
762:       assertFalse(node1.isFor());
763:       assertFalse(node1.isTry());
764:       assertFalse(node1.isVoid());
765:       assertFalse(node1.isFunction());
766:       assertFalse(node1.isArrayLit());
767:       assertEquals(1757224, node1.getSourcePosition());
768:       assertFalse(node1.isEmpty());
769:       assertFalse(node1.isIf());
770:       assertFalse(node1.isDelProp());
771:       assertFalse(node1.isGetterDef());
772:       assertFalse(node1.isTrue());
773:       assertFalse(node1.isDebugger());
774:       assertFalse(node1.isNE());
775:       assertFalse(node1.isIn());
776:       assertEquals(0, node1.getChildCount());
777:       assertEquals(40, node1.getCharno());
778:       assertFalse(node1.isSetterDef());
779:       assertFalse(node1.isDefaultCase());
780:       assertEquals(40, node1.getType());
781:       assertFalse(node1.isVar());
782:       assertFalse(node1.isNew());
783:       assertFalse(node1.isCall());
784:       assertFalse(node1.isAdd());
785:       assertFalse(node1.isBreak());
786:       assertFalse(node1.isName());
787:       assertFalse(node1.isNull());
788:       assertFalse(node1.isReturn());
789:       assertFalse(node1.isGetProp());
790:       assertFalse(node1.isWhile());
791:       assertFalse(node1.hasChildren());
792:       assertFalse(node1.isDec());
793:       assertFalse(node1.isTypeOf());
794:       assertFalse(node1.isAssign());
795:       assertFalse(node1.isComma());
796:       assertEquals(12, Node.COLUMN_BITS);
797:       assertEquals(46, Node.IS_NAMESPACE);
798:       assertEquals(2, Node.POST_FLAG);
799:       assertEquals(51, Node.STATIC_SOURCE_FILE);
800:       assertEquals(29, Node.JSDOC_INFO_PROP);
801:       assertEquals(30, Node.VAR_ARGS_NAME);
802:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
803:       assertEquals(15, Node.NO_SIDE_EFFECTS);
804:       assertEquals(47, Node.IS_DISPATCHER);
805:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
806:       assertEquals(57, Node.LAST_PROP);
807:       assertEquals(1, Node.DECR_FLAG);
808:       assertEquals(32, Node.INCRDECR_PROP);
809:       assertEquals(54, Node.SLASH_V);
810:       assertEquals(50, Node.FREE_CALL);
811:       assertEquals(40, Node.ORIGINALNAME_PROP);
812:       assertEquals(43, Node.IS_CONSTANT_NAME);
813:       assertEquals(55, Node.INFERRED_FUNCTION);
814:       assertEquals(8, Node.FLAG_NO_THROWS);
815:       assertEquals(4095, Node.COLUMN_MASK);
816:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
817:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
818:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
819:       assertEquals(39, Node.EMPTY_BLOCK);
820:       assertEquals(52, Node.LENGTH);
821:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
822:       assertEquals(53, Node.INPUT_ID);
823:       assertEquals(57, Node.REFLECTED_OBJECT);
824:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
825:       assertEquals(36, Node.QUOTED_PROP);
826:       assertEquals(49, Node.DIRECT_EVAL);
827:       assertEquals(56, Node.CHANGE_TIME);
828:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
829:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
830:       assertEquals(37, Node.OPT_ARG_NAME);
831:       assertEquals(48, Node.DIRECTIVES);
832:       assertEquals(53, Node.INPUT_ID);
833:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
834:       assertEquals(36, Node.QUOTED_PROP);
835:       assertEquals(43, Node.IS_CONSTANT_NAME);
836:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
837:       assertEquals(4095, Node.COLUMN_MASK);
838:       assertEquals(37, Node.OPT_ARG_NAME);
839:       assertEquals(48, Node.DIRECTIVES);
840:       assertEquals(8, Node.FLAG_NO_THROWS);
841:       assertEquals(2, Node.POST_FLAG);
842:       assertEquals(56, Node.CHANGE_TIME);
843:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
844:       assertEquals(47, Node.IS_DISPATCHER);
845:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
846:       assertEquals(29, Node.JSDOC_INFO_PROP);
847:       assertEquals(57, Node.LAST_PROP);
848:       assertEquals(55, Node.INFERRED_FUNCTION);
849:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
850:       assertEquals(15, Node.NO_SIDE_EFFECTS);
851:       assertEquals(39, Node.EMPTY_BLOCK);
852:       assertEquals(52, Node.LENGTH);
853:       assertEquals(54, Node.SLASH_V);
854:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
855:       assertEquals(57, Node.REFLECTED_OBJECT);
856:       assertEquals(49, Node.DIRECT_EVAL);
857:       assertEquals(30, Node.VAR_ARGS_NAME);
858:       assertEquals(40, Node.ORIGINALNAME_PROP);
859:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
860:       assertEquals(32, Node.INCRDECR_PROP);
861:       assertEquals(12, Node.COLUMN_BITS);
862:       assertEquals(51, Node.STATIC_SOURCE_FILE);
863:       assertEquals(46, Node.IS_NAMESPACE);
864:       assertEquals(50, Node.FREE_CALL);
865:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
866:       assertEquals(1, Node.DECR_FLAG);
867:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
868:       
869:       node1.setWasEmptyNode(false);
870:       assertNotSame(node1, node2);
871:       assertFalse(node1.equals((Object)node0));
872:       assertFalse(node1.equals((Object)node2));
873:       assertFalse(node1.hasOneChild());
874:       assertFalse(node1.isExprResult());
875:       assertFalse(node1.isGetElem());
876:       assertFalse(node1.isScript());
877:       assertFalse(node1.isCast());
878:       assertFalse(node1.isNumber());
879:       assertFalse(node1.isLabelName());
880:       assertFalse(node1.isNot());
881:       assertFalse(node1.isObjectLit());
882:       assertFalse(node1.isAnd());
883:       assertFalse(node1.isLabel());
884:       assertFalse(node1.isAssignAdd());
885:       assertFalse(node1.isOr());
886:       assertFalse(node1.isContinue());
887:       assertFalse(node1.isFalse());
888:       assertFalse(node1.isDo());
889:       assertFalse(node1.isThrow());
890:       assertTrue(node1.isString());
891:       assertEquals(429, node1.getLineno());
892:       assertFalse(node1.isInc());
893:       assertFalse(node1.isParamList());
894:       assertFalse(node1.isSwitch());
895:       assertFalse(node1.isStringKey());
896:       assertFalse(node1.isCatch());
897:       assertFalse(node1.hasMoreThanOneChild());
898:       assertFalse(node1.isInstanceOf());
899:       assertFalse(node1.isWith());
900:       assertFalse(node1.isCase());
901:       assertFalse(node1.isRegExp());
902:       assertFalse(node1.isThis());
903:       assertFalse(node1.isBlock());
904:       assertFalse(node1.isHook());
905:       assertFalse(node1.isFor());
906:       assertFalse(node1.isTry());
907:       assertFalse(node1.isVoid());
908:       assertFalse(node1.isFunction());
909:       assertFalse(node1.isArrayLit());
910:       assertEquals(1757224, node1.getSourcePosition());
911:       assertFalse(node1.isEmpty());
912:       assertFalse(node1.isIf());
913:       assertFalse(node1.isDelProp());
914:       assertFalse(node1.isGetterDef());
915:       assertFalse(node1.isTrue());
916:       assertFalse(node1.isDebugger());
917:       assertFalse(node1.isNE());
918:       assertFalse(node1.isIn());
919:       assertEquals(0, node1.getChildCount());
920:       assertEquals(40, node1.getCharno());
921:       assertFalse(node1.isSetterDef());
922:       assertFalse(node1.isDefaultCase());
923:       assertEquals(40, node1.getType());
924:       assertFalse(node1.isVar());
925:       assertFalse(node1.isNew());
926:       assertFalse(node1.isCall());
927:       assertFalse(node1.isAdd());
928:       assertFalse(node1.isBreak());
929:       assertFalse(node1.isName());
930:       assertFalse(node1.isNull());
931:       assertFalse(node1.isReturn());
932:       assertFalse(node1.isGetProp());
933:       assertFalse(node1.isWhile());
934:       assertFalse(node1.hasChildren());
935:       assertFalse(node1.isDec());
936:       assertFalse(node1.isTypeOf());
937:       assertFalse(node1.isAssign());
938:       assertFalse(node1.isComma());
939:       assertEquals(53, Node.INPUT_ID);
940:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
941:       assertEquals(36, Node.QUOTED_PROP);
942:       assertEquals(43, Node.IS_CONSTANT_NAME);
943:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
944:       assertEquals(4095, Node.COLUMN_MASK);
945:       assertEquals(37, Node.OPT_ARG_NAME);
946:       assertEquals(48, Node.DIRECTIVES);
947:       assertEquals(8, Node.FLAG_NO_THROWS);
948:       assertEquals(2, Node.POST_FLAG);
949:       assertEquals(56, Node.CHANGE_TIME);
950:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
951:       assertEquals(47, Node.IS_DISPATCHER);
952:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
953:       assertEquals(29, Node.JSDOC_INFO_PROP);
954:       assertEquals(57, Node.LAST_PROP);
955:       assertEquals(55, Node.INFERRED_FUNCTION);
956:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
957:       assertEquals(15, Node.NO_SIDE_EFFECTS);
958:       assertEquals(39, Node.EMPTY_BLOCK);
959:       assertEquals(52, Node.LENGTH);
960:       assertEquals(54, Node.SLASH_V);
961:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
962:       assertEquals(57, Node.REFLECTED_OBJECT);
963:       assertEquals(49, Node.DIRECT_EVAL);
964:       assertEquals(30, Node.VAR_ARGS_NAME);
965:       assertEquals(40, Node.ORIGINALNAME_PROP);
966:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
967:       assertEquals(32, Node.INCRDECR_PROP);
968:       assertEquals(12, Node.COLUMN_BITS);
969:       assertEquals(51, Node.STATIC_SOURCE_FILE);
970:       assertEquals(46, Node.IS_NAMESPACE);
971:       assertEquals(50, Node.FREE_CALL);
972:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
973:       assertEquals(1, Node.DECR_FLAG);
974:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
975:       
976:       String string0 = node1.getSourceFileName();
977:       assertNotSame(node1, node2);
978:       assertFalse(node1.equals((Object)node0));
979:       assertFalse(node1.equals((Object)node2));
980:       assertNull(string0);
981:       assertFalse(node1.hasOneChild());
982:       assertFalse(node1.isExprResult());
983:       assertFalse(node1.isGetElem());
984:       assertFalse(node1.isScript());
985:       assertFalse(node1.isCast());
986:       assertFalse(node1.isNumber());
987:       assertFalse(node1.isLabelName());
988:       assertFalse(node1.isNot());
989:       assertFalse(node1.isObjectLit());
990:       assertFalse(node1.isAnd());
991:       assertFalse(node1.isLabel());
992:       assertFalse(node1.isAssignAdd());
993:       assertFalse(node1.isOr());
994:       assertFalse(node1.isContinue());
995:       assertFalse(node1.isFalse());
996:       assertFalse(node1.isDo());
997:       assertFalse(node1.isThrow());
998:       assertTrue(node1.isString());
999:       assertEquals(429, node1.getLineno());
1000:       assertFalse(node1.isInc());
1001:       assertFalse(node1.isParamList());
1002:       assertFalse(node1.isSwitch());
1003:       assertFalse(node1.isStringKey());
1004:       assertFalse(node1.isCatch());
1005:       assertFalse(node1.hasMoreThanOneChild());
1006:       assertFalse(node1.isInstanceOf());
1007:       assertFalse(node1.isWith());
1008:       assertFalse(node1.isCase());
1009:       assertFalse(node1.isRegExp());
1010:       assertFalse(node1.isThis());
1011:       assertFalse(node1.isBlock());
1012:       assertFalse(node1.isHook());
1013:       assertFalse(node1.isFor());
1014:       assertFalse(node1.isTry());
1015:       assertFalse(node1.isVoid());
1016:       assertFalse(node1.isFunction());
1017:       assertFalse(node1.isArrayLit());
1018:       assertEquals(1757224, node1.getSourcePosition());
1019:       assertFalse(node1.isEmpty());
1020:       assertFalse(node1.isIf());
1021:       assertFalse(node1.isDelProp());
1022:       assertFalse(node1.isGetterDef());
1023:       assertFalse(node1.isTrue());
1024:       assertFalse(node1.isDebugger());
1025:       assertFalse(node1.isNE());
1026:       assertFalse(node1.isIn());
1027:       assertEquals(0, node1.getChildCount());
1028:       assertEquals(40, node1.getCharno());
1029:       assertFalse(node1.isSetterDef());
1030:       assertFalse(node1.isDefaultCase());
1031:       assertEquals(40, node1.getType());
1032:       assertFalse(node1.isVar());
1033:       assertFalse(node1.isNew());
1034:       assertFalse(node1.isCall());
1035:       assertFalse(node1.isAdd());
1036:       assertFalse(node1.isBreak());
1037:       assertFalse(node1.isName());
1038:       assertFalse(node1.isNull());
1039:       assertFalse(node1.isReturn());
1040:       assertFalse(node1.isGetProp());
1041:       assertFalse(node1.isWhile());
1042:       assertFalse(node1.hasChildren());
1043:       assertFalse(node1.isDec());
1044:       assertFalse(node1.isTypeOf());
1045:       assertFalse(node1.isAssign());
1046:       assertFalse(node1.isComma());
1047:       assertEquals(53, Node.INPUT_ID);
1048:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1049:       assertEquals(36, Node.QUOTED_PROP);
1050:       assertEquals(43, Node.IS_CONSTANT_NAME);
1051:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1052:       assertEquals(4095, Node.COLUMN_MASK);
1053:       assertEquals(37, Node.OPT_ARG_NAME);
1054:       assertEquals(48, Node.DIRECTIVES);
1055:       assertEquals(8, Node.FLAG_NO_THROWS);
1056:       assertEquals(2, Node.POST_FLAG);
1057:       assertEquals(56, Node.CHANGE_TIME);
1058:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1059:       assertEquals(47, Node.IS_DISPATCHER);
1060:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1061:       assertEquals(29, Node.JSDOC_INFO_PROP);
1062:       assertEquals(57, Node.LAST_PROP);
1063:       assertEquals(55, Node.INFERRED_FUNCTION);
1064:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1065:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1066:       assertEquals(39, Node.EMPTY_BLOCK);
1067:       assertEquals(52, Node.LENGTH);
1068:       assertEquals(54, Node.SLASH_V);
1069:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1070:       assertEquals(57, Node.REFLECTED_OBJECT);
1071:       assertEquals(49, Node.DIRECT_EVAL);
1072:       assertEquals(30, Node.VAR_ARGS_NAME);
1073:       assertEquals(40, Node.ORIGINALNAME_PROP);
1074:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1075:       assertEquals(32, Node.INCRDECR_PROP);
1076:       assertEquals(12, Node.COLUMN_BITS);
1077:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1078:       assertEquals(46, Node.IS_NAMESPACE);
1079:       assertEquals(50, Node.FREE_CALL);
1080:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1081:       assertEquals(1, Node.DECR_FLAG);
1082:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1083:       
1084:       node1.addChildrenToBack(node2);
1085:       assertNotSame(node1, node2);
1086:       assertNotSame(node2, node1);
1087:       assertFalse(node1.equals((Object)node0));
1088:       assertFalse(node1.equals((Object)node2));
1089:       assertFalse(node2.equals((Object)node0));
1090:       assertFalse(node2.equals((Object)node1));
1091:       assertFalse(node1.isExprResult());
1092:       assertFalse(node1.isGetElem());
1093:       assertFalse(node1.isScript());
1094:       assertFalse(node1.isCast());
1095:       assertFalse(node1.isNumber());
1096:       assertFalse(node1.isLabelName());
1097:       assertFalse(node1.isNot());
1098:       assertFalse(node1.isObjectLit());
1099:       assertFalse(node1.isAnd());
1100:       assertFalse(node1.isLabel());
1101:       assertFalse(node1.isAssignAdd());
1102:       assertFalse(node1.isOr());
1103:       assertFalse(node1.isContinue());
1104:       assertFalse(node1.isFalse());
1105:       assertFalse(node1.isDo());
1106:       assertFalse(node1.isThrow());
1107:       assertTrue(node1.isString());
1108:       assertEquals(429, node1.getLineno());
1109:       assertFalse(node1.isInc());
1110:       assertFalse(node1.isParamList());
1111:       assertFalse(node1.isSwitch());
1112:       assertFalse(node1.isStringKey());
1113:       assertEquals(1, node1.getChildCount());
1114:       assertFalse(node1.isCatch());
1115:       assertFalse(node1.hasMoreThanOneChild());
1116:       assertFalse(node1.isInstanceOf());
1117:       assertTrue(node1.hasChildren());
1118:       assertFalse(node1.isWith());
1119:       assertFalse(node1.isCase());
1120:       assertFalse(node1.isRegExp());
1121:       assertFalse(node1.isThis());
1122:       assertFalse(node1.isBlock());
1123:       assertFalse(node1.isHook());
1124:       assertFalse(node1.isFor());
1125:       assertFalse(node1.isTry());
1126:       assertFalse(node1.isVoid());
1127:       assertFalse(node1.isFunction());
1128:       assertFalse(node1.isArrayLit());
1129:       assertEquals(1757224, node1.getSourcePosition());
1130:       assertFalse(node1.isEmpty());
1131:       assertFalse(node1.isIf());
1132:       assertFalse(node1.isDelProp());
1133:       assertFalse(node1.isGetterDef());
1134:       assertFalse(node1.isTrue());
1135:       assertFalse(node1.isDebugger());
1136:       assertFalse(node1.isNE());
1137:       assertFalse(node1.isIn());
1138:       assertEquals(40, node1.getCharno());
1139:       assertFalse(node1.isSetterDef());
1140:       assertFalse(node1.isDefaultCase());
1141:       assertEquals(40, node1.getType());
1142:       assertFalse(node1.isVar());
1143:       assertFalse(node1.isNew());
1144:       assertFalse(node1.isCall());
1145:       assertFalse(node1.isAdd());
1146:       assertFalse(node1.isBreak());
1147:       assertFalse(node1.isName());
1148:       assertFalse(node1.isNull());
1149:       assertFalse(node1.isReturn());
1150:       assertFalse(node1.isGetProp());
1151:       assertTrue(node1.hasOneChild());
1152:       assertFalse(node1.isWhile());
1153:       assertFalse(node1.isDec());
1154:       assertFalse(node1.isTypeOf());
1155:       assertFalse(node1.isAssign());
1156:       assertFalse(node1.isComma());
1157:       assertFalse(node2.isLabel());
1158:       assertFalse(node2.isAssignAdd());
1159:       assertFalse(node2.isReturn());
1160:       assertEquals(42, node2.getCharno());
1161:       assertFalse(node2.isTypeOf());
1162:       assertFalse(node2.isNumber());
1163:       assertFalse(node2.hasMoreThanOneChild());
1164:       assertFalse(node2.hasChildren());
1165:       assertFalse(node2.isOr());
1166:       assertFalse(node2.isDec());
1167:       assertFalse(node2.isAssign());
1168:       assertFalse(node2.isGetElem());
1169:       assertFalse(node2.isContinue());
1170:       assertFalse(node2.isCast());
1171:       assertFalse(node2.isLabelName());
1172:       assertTrue(node2.isString());
1173:       assertFalse(node2.isBlock());
1174:       assertFalse(node2.isExprResult());
1175:       assertFalse(node2.isNot());
1176:       assertFalse(node2.isWhile());
1177:       assertFalse(node2.isScript());
1178:       assertFalse(node2.hasOneChild());
1179:       assertFalse(node2.isGetProp());
1180:       assertFalse(node2.isInstanceOf());
1181:       assertFalse(node2.isThis());
1182:       assertFalse(node2.isObjectLit());
1183:       assertFalse(node2.isFalse());
1184:       assertFalse(node2.isWith());
1185:       assertFalse(node2.isAnd());
1186:       assertFalse(node2.isCatch());
1187:       assertFalse(node2.isFunction());
1188:       assertEquals(40, node2.getType());
1189:       assertFalse(node2.isThrow());
1190:       assertFalse(node2.isInc());
1191:       assertFalse(node2.isSetterDef());
1192:       assertFalse(node2.isNE());
1193:       assertEquals(229418, node2.getSourcePosition());
1194:       assertFalse(node2.isIn());
1195:       assertFalse(node2.isGetterDef());
1196:       assertFalse(node2.isArrayLit());
1197:       assertFalse(node2.isSwitch());
1198:       assertFalse(node2.isIf());
1199:       assertFalse(node2.isDelProp());
1200:       assertFalse(node2.isTry());
1201:       assertFalse(node2.isRegExp());
1202:       assertFalse(node2.isHook());
1203:       assertFalse(node2.isDebugger());
1204:       assertFalse(node2.isCase());
1205:       assertFalse(node2.isFor());
1206:       assertFalse(node2.isParamList());
1207:       assertFalse(node2.isNull());
1208:       assertEquals(0, node2.getChildCount());
1209:       assertFalse(node2.isComma());
1210:       assertEquals(56, node2.getLineno());
1211:       assertFalse(node2.isName());
1212:       assertFalse(node2.isCall());
1213:       assertFalse(node2.isStringKey());
1214:       assertFalse(node2.isVoid());
1215:       assertFalse(node2.isBreak());
1216:       assertFalse(node2.isAdd());
1217:       assertFalse(node2.isNew());
1218:       assertFalse(node2.isTrue());
1219:       assertFalse(node2.isVar());
1220:       assertFalse(node2.isEmpty());
1221:       assertFalse(node2.isDefaultCase());
1222:       assertFalse(node2.isDo());
1223:       assertEquals(53, Node.INPUT_ID);
1224:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1225:       assertEquals(36, Node.QUOTED_PROP);
1226:       assertEquals(43, Node.IS_CONSTANT_NAME);
1227:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1228:       assertEquals(4095, Node.COLUMN_MASK);
1229:       assertEquals(37, Node.OPT_ARG_NAME);
1230:       assertEquals(48, Node.DIRECTIVES);
1231:       assertEquals(8, Node.FLAG_NO_THROWS);
1232:       assertEquals(2, Node.POST_FLAG);
1233:       assertEquals(56, Node.CHANGE_TIME);
1234:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1235:       assertEquals(47, Node.IS_DISPATCHER);
1236:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1237:       assertEquals(29, Node.JSDOC_INFO_PROP);
1238:       assertEquals(57, Node.LAST_PROP);
1239:       assertEquals(55, Node.INFERRED_FUNCTION);
1240:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1241:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1242:       assertEquals(39, Node.EMPTY_BLOCK);
1243:       assertEquals(52, Node.LENGTH);
1244:       assertEquals(54, Node.SLASH_V);
1245:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1246:       assertEquals(57, Node.REFLECTED_OBJECT);
1247:       assertEquals(49, Node.DIRECT_EVAL);
1248:       assertEquals(30, Node.VAR_ARGS_NAME);
1249:       assertEquals(40, Node.ORIGINALNAME_PROP);
1250:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1251:       assertEquals(32, Node.INCRDECR_PROP);
1252:       assertEquals(12, Node.COLUMN_BITS);
1253:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1254:       assertEquals(46, Node.IS_NAMESPACE);
1255:       assertEquals(50, Node.FREE_CALL);
1256:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1257:       assertEquals(1, Node.DECR_FLAG);
1258:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1259:       assertEquals(37, Node.OPT_ARG_NAME);
1260:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1261:       assertEquals(46, Node.IS_NAMESPACE);
1262:       assertEquals(56, Node.CHANGE_TIME);
1263:       assertEquals(32, Node.INCRDECR_PROP);
1264:       assertEquals(12, Node.COLUMN_BITS);
1265:       assertEquals(47, Node.IS_DISPATCHER);
1266:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1267:       assertEquals(2, Node.POST_FLAG);
1268:       assertEquals(30, Node.VAR_ARGS_NAME);
1269:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1270:       assertEquals(54, Node.SLASH_V);
1271:       assertEquals(43, Node.IS_CONSTANT_NAME);
1272:       assertEquals(1, Node.DECR_FLAG);
1273:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1274:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1275:       assertEquals(50, Node.FREE_CALL);
1276:       assertEquals(48, Node.DIRECTIVES);
1277:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1278:       assertEquals(39, Node.EMPTY_BLOCK);
1279:       assertEquals(40, Node.ORIGINALNAME_PROP);
1280:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1281:       assertEquals(4095, Node.COLUMN_MASK);
1282:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1283:       assertEquals(53, Node.INPUT_ID);
1284:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1285:       assertEquals(57, Node.LAST_PROP);
1286:       assertEquals(49, Node.DIRECT_EVAL);
1287:       assertEquals(55, Node.INFERRED_FUNCTION);
1288:       assertEquals(29, Node.JSDOC_INFO_PROP);
1289:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1290:       assertEquals(57, Node.REFLECTED_OBJECT);
1291:       assertEquals(36, Node.QUOTED_PROP);
1292:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1293:       assertEquals(52, Node.LENGTH);
1294:       assertEquals(8, Node.FLAG_NO_THROWS);
1295:       
1296:       node1.setQuotedString();
1297:       assertNotSame(node1, node2);
1298:       assertFalse(node1.equals((Object)node0));
1299:       assertFalse(node1.equals((Object)node2));
1300:       assertFalse(node1.isExprResult());
1301:       assertFalse(node1.isGetElem());
1302:       assertFalse(node1.isScript());
1303:       assertFalse(node1.isCast());
1304:       assertFalse(node1.isNumber());
1305:       assertFalse(node1.isLabelName());
1306:       assertFalse(node1.isNot());
1307:       assertFalse(node1.isObjectLit());
1308:       assertFalse(node1.isAnd());
1309:       assertFalse(node1.isLabel());
1310:       assertFalse(node1.isAssignAdd());
1311:       assertFalse(node1.isOr());
1312:       assertFalse(node1.isContinue());
1313:       assertFalse(node1.isFalse());
1314:       assertFalse(node1.isDo());
1315:       assertFalse(node1.isThrow());
1316:       assertTrue(node1.isString());
1317:       assertEquals(429, node1.getLineno());
1318:       assertFalse(node1.isInc());
1319:       assertFalse(node1.isParamList());
1320:       assertFalse(node1.isSwitch());
1321:       assertFalse(node1.isStringKey());
1322:       assertEquals(1, node1.getChildCount());
1323:       assertFalse(node1.isCatch());
1324:       assertFalse(node1.hasMoreThanOneChild());
1325:       assertFalse(node1.isInstanceOf());
1326:       assertTrue(node1.hasChildren());
1327:       assertFalse(node1.isWith());
1328:       assertFalse(node1.isCase());
1329:       assertFalse(node1.isRegExp());
1330:       assertFalse(node1.isThis());
1331:       assertFalse(node1.isBlock());
1332:       assertFalse(node1.isHook());
1333:       assertFalse(node1.isFor());
1334:       assertFalse(node1.isTry());
1335:       assertFalse(node1.isVoid());
1336:       assertFalse(node1.isFunction());
1337:       assertFalse(node1.isArrayLit());
1338:       assertEquals(1757224, node1.getSourcePosition());
1339:       assertFalse(node1.isEmpty());
1340:       assertFalse(node1.isIf());
1341:       assertFalse(node1.isDelProp());
1342:       assertFalse(node1.isGetterDef());
1343:       assertFalse(node1.isTrue());
1344:       assertFalse(node1.isDebugger());
1345:       assertFalse(node1.isNE());
1346:       assertFalse(node1.isIn());
1347:       assertEquals(40, node1.getCharno());
1348:       assertFalse(node1.isSetterDef());
1349:       assertFalse(node1.isDefaultCase());
1350:       assertEquals(40, node1.getType());
1351:       assertFalse(node1.isVar());
1352:       assertFalse(node1.isNew());
1353:       assertFalse(node1.isCall());
1354:       assertFalse(node1.isAdd());
1355:       assertFalse(node1.isBreak());
1356:       assertFalse(node1.isName());
1357:       assertFalse(node1.isNull());
1358:       assertFalse(node1.isReturn());
1359:       assertFalse(node1.isGetProp());
1360:       assertTrue(node1.hasOneChild());
1361:       assertFalse(node1.isWhile());
1362:       assertFalse(node1.isDec());
1363:       assertFalse(node1.isTypeOf());
1364:       assertFalse(node1.isAssign());
1365:       assertFalse(node1.isComma());
1366:       assertEquals(53, Node.INPUT_ID);
1367:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1368:       assertEquals(36, Node.QUOTED_PROP);
1369:       assertEquals(43, Node.IS_CONSTANT_NAME);
1370:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1371:       assertEquals(4095, Node.COLUMN_MASK);
1372:       assertEquals(37, Node.OPT_ARG_NAME);
1373:       assertEquals(48, Node.DIRECTIVES);
1374:       assertEquals(8, Node.FLAG_NO_THROWS);
1375:       assertEquals(2, Node.POST_FLAG);
1376:       assertEquals(56, Node.CHANGE_TIME);
1377:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1378:       assertEquals(47, Node.IS_DISPATCHER);
1379:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1380:       assertEquals(29, Node.JSDOC_INFO_PROP);
1381:       assertEquals(57, Node.LAST_PROP);
1382:       assertEquals(55, Node.INFERRED_FUNCTION);
1383:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1384:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1385:       assertEquals(39, Node.EMPTY_BLOCK);
1386:       assertEquals(52, Node.LENGTH);
1387:       assertEquals(54, Node.SLASH_V);
1388:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1389:       assertEquals(57, Node.REFLECTED_OBJECT);
1390:       assertEquals(49, Node.DIRECT_EVAL);
1391:       assertEquals(30, Node.VAR_ARGS_NAME);
1392:       assertEquals(40, Node.ORIGINALNAME_PROP);
1393:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1394:       assertEquals(32, Node.INCRDECR_PROP);
1395:       assertEquals(12, Node.COLUMN_BITS);
1396:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1397:       assertEquals(46, Node.IS_NAMESPACE);
1398:       assertEquals(50, Node.FREE_CALL);
1399:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1400:       assertEquals(1, Node.DECR_FLAG);
1401:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1402:       
1403:       int int0 = Node.mergeLineCharNo(42, 36);
1404:       assertEquals(172068, int0);
1405:       
1406:       boolean boolean2 = node2.isFalse();
1407:       assertNotSame(node2, node1);
1408:       assertFalse(node2.equals((Object)node0));
1409:       assertFalse(node2.equals((Object)node1));
1410:       assertTrue(boolean2 == boolean1);
1411:       assertTrue(boolean2 == boolean0);
1412:       assertFalse(boolean2);
1413:       assertFalse(node2.isLabel());
1414:       assertFalse(node2.isAssignAdd());
1415:       assertFalse(node2.isReturn());
1416:       assertEquals(42, node2.getCharno());
1417:       assertFalse(node2.isTypeOf());
1418:       assertFalse(node2.isNumber());
1419:       assertFalse(node2.hasMoreThanOneChild());
1420:       assertFalse(node2.hasChildren());
1421:       assertFalse(node2.isOr());
1422:       assertFalse(node2.isDec());
1423:       assertFalse(node2.isAssign());
1424:       assertFalse(node2.isGetElem());
1425:       assertFalse(node2.isContinue());
1426:       assertFalse(node2.isCast());
1427:       assertFalse(node2.isLabelName());
1428:       assertTrue(node2.isString());
1429:       assertFalse(node2.isBlock());
1430:       assertFalse(node2.isExprResult());
1431:       assertFalse(node2.isNot());
1432:       assertFalse(node2.isWhile());
1433:       assertFalse(node2.isScript());
1434:       assertFalse(node2.hasOneChild());
1435:       assertFalse(node2.isGetProp());
1436:       assertFalse(node2.isInstanceOf());
1437:       assertFalse(node2.isThis());
1438:       assertFalse(node2.isObjectLit());
1439:       assertFalse(node2.isFalse());
1440:       assertFalse(node2.isWith());
1441:       assertFalse(node2.isAnd());
1442:       assertFalse(node2.isCatch());
1443:       assertFalse(node2.isFunction());
1444:       assertEquals(40, node2.getType());
1445:       assertFalse(node2.isThrow());
1446:       assertFalse(node2.isInc());
1447:       assertFalse(node2.isSetterDef());
1448:       assertFalse(node2.isNE());
1449:       assertEquals(229418, node2.getSourcePosition());
1450:       assertFalse(node2.isIn());
1451:       assertFalse(node2.isGetterDef());
1452:       assertFalse(node2.isArrayLit());
1453:       assertFalse(node2.isSwitch());
1454:       assertFalse(node2.isIf());
1455:       assertFalse(node2.isDelProp());
1456:       assertFalse(node2.isTry());
1457:       assertFalse(node2.isRegExp());
1458:       assertFalse(node2.isHook());
1459:       assertFalse(node2.isDebugger());
1460:       assertFalse(node2.isCase());
1461:       assertFalse(node2.isFor());
1462:       assertFalse(node2.isParamList());
1463:       assertFalse(node2.isNull());
1464:       assertEquals(0, node2.getChildCount());
1465:       assertFalse(node2.isComma());
1466:       assertEquals(56, node2.getLineno());
1467:       assertFalse(node2.isName());
1468:       assertFalse(node2.isCall());
1469:       assertFalse(node2.isStringKey());
1470:       assertFalse(node2.isVoid());
1471:       assertFalse(node2.isBreak());
1472:       assertFalse(node2.isAdd());
1473:       assertFalse(node2.isNew());
1474:       assertFalse(node2.isTrue());
1475:       assertFalse(node2.isVar());
1476:       assertFalse(node2.isEmpty());
1477:       assertFalse(node2.isDefaultCase());
1478:       assertFalse(node2.isDo());
1479:       assertEquals(37, Node.OPT_ARG_NAME);
1480:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1481:       assertEquals(46, Node.IS_NAMESPACE);
1482:       assertEquals(56, Node.CHANGE_TIME);
1483:       assertEquals(32, Node.INCRDECR_PROP);
1484:       assertEquals(12, Node.COLUMN_BITS);
1485:       assertEquals(47, Node.IS_DISPATCHER);
1486:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1487:       assertEquals(2, Node.POST_FLAG);
1488:       assertEquals(30, Node.VAR_ARGS_NAME);
1489:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1490:       assertEquals(54, Node.SLASH_V);
1491:       assertEquals(43, Node.IS_CONSTANT_NAME);
1492:       assertEquals(1, Node.DECR_FLAG);
1493:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1494:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1495:       assertEquals(50, Node.FREE_CALL);
1496:       assertEquals(48, Node.DIRECTIVES);
1497:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1498:       assertEquals(39, Node.EMPTY_BLOCK);
1499:       assertEquals(40, Node.ORIGINALNAME_PROP);
1500:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1501:       assertEquals(4095, Node.COLUMN_MASK);
1502:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1503:       assertEquals(53, Node.INPUT_ID);
1504:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1505:       assertEquals(57, Node.LAST_PROP);
1506:       assertEquals(49, Node.DIRECT_EVAL);
1507:       assertEquals(55, Node.INFERRED_FUNCTION);
1508:       assertEquals(29, Node.JSDOC_INFO_PROP);
1509:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1510:       assertEquals(57, Node.REFLECTED_OBJECT);
1511:       assertEquals(36, Node.QUOTED_PROP);
1512:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1513:       assertEquals(52, Node.LENGTH);
1514:       assertEquals(8, Node.FLAG_NO_THROWS);
1515:       
1516:       node1.setVarArgs(false);
1517:       assertNotSame(node1, node2);
1518:       assertFalse(node1.equals((Object)node0));
1519:       assertFalse(node1.equals((Object)node2));
1520:       assertFalse(node1.isExprResult());
1521:       assertFalse(node1.isGetElem());
1522:       assertFalse(node1.isScript());
1523:       assertFalse(node1.isCast());
1524:       assertFalse(node1.isNumber());
1525:       assertFalse(node1.isLabelName());
1526:       assertFalse(node1.isNot());
1527:       assertFalse(node1.isObjectLit());
1528:       assertFalse(node1.isAnd());
1529:       assertFalse(node1.isLabel());
1530:       assertFalse(node1.isAssignAdd());
1531:       assertFalse(node1.isOr());
1532:       assertFalse(node1.isContinue());
1533:       assertFalse(node1.isFalse());
1534:       assertFalse(node1.isDo());
1535:       assertFalse(node1.isThrow());
1536:       assertTrue(node1.isString());
1537:       assertEquals(429, node1.getLineno());
1538:       assertFalse(node1.isInc());
1539:       assertFalse(node1.isParamList());
1540:       assertFalse(node1.isSwitch());
1541:       assertFalse(node1.isStringKey());
1542:       assertEquals(1, node1.getChildCount());
1543:       assertFalse(node1.isCatch());
1544:       assertFalse(node1.hasMoreThanOneChild());
1545:       assertFalse(node1.isInstanceOf());
1546:       assertTrue(node1.hasChildren());
1547:       assertFalse(node1.isWith());
1548:       assertFalse(node1.isCase());
1549:       assertFalse(node1.isRegExp());
1550:       assertFalse(node1.isThis());
1551:       assertFalse(node1.isBlock());
1552:       assertFalse(node1.isHook());
1553:       assertFalse(node1.isFor());
1554:       assertFalse(node1.isTry());
1555:       assertFalse(node1.isVoid());
1556:       assertFalse(node1.isFunction());
1557:       assertFalse(node1.isArrayLit());
1558:       assertEquals(1757224, node1.getSourcePosition());
1559:       assertFalse(node1.isEmpty());
1560:       assertFalse(node1.isIf());
1561:       assertFalse(node1.isDelProp());
1562:       assertFalse(node1.isGetterDef());
1563:       assertFalse(node1.isTrue());
1564:       assertFalse(node1.isDebugger());
1565:       assertFalse(node1.isNE());
1566:       assertFalse(node1.isIn());
1567:       assertEquals(40, node1.getCharno());
1568:       assertFalse(node1.isSetterDef());
1569:       assertFalse(node1.isDefaultCase());
1570:       assertEquals(40, node1.getType());
1571:       assertFalse(node1.isVar());
1572:       assertFalse(node1.isNew());
1573:       assertFalse(node1.isCall());
1574:       assertFalse(node1.isAdd());
1575:       assertFalse(node1.isBreak());
1576:       assertFalse(node1.isName());
1577:       assertFalse(node1.isNull());
1578:       assertFalse(node1.isReturn());
1579:       assertFalse(node1.isGetProp());
1580:       assertTrue(node1.hasOneChild());
1581:       assertFalse(node1.isWhile());
1582:       assertFalse(node1.isDec());
1583:       assertFalse(node1.isTypeOf());
1584:       assertFalse(node1.isAssign());
1585:       assertFalse(node1.isComma());
1586:       assertEquals(53, Node.INPUT_ID);
1587:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1588:       assertEquals(36, Node.QUOTED_PROP);
1589:       assertEquals(43, Node.IS_CONSTANT_NAME);
1590:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1591:       assertEquals(4095, Node.COLUMN_MASK);
1592:       assertEquals(37, Node.OPT_ARG_NAME);
1593:       assertEquals(48, Node.DIRECTIVES);
1594:       assertEquals(8, Node.FLAG_NO_THROWS);
1595:       assertEquals(2, Node.POST_FLAG);
1596:       assertEquals(56, Node.CHANGE_TIME);
1597:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1598:       assertEquals(47, Node.IS_DISPATCHER);
1599:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1600:       assertEquals(29, Node.JSDOC_INFO_PROP);
1601:       assertEquals(57, Node.LAST_PROP);
1602:       assertEquals(55, Node.INFERRED_FUNCTION);
1603:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1604:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1605:       assertEquals(39, Node.EMPTY_BLOCK);
1606:       assertEquals(52, Node.LENGTH);
1607:       assertEquals(54, Node.SLASH_V);
1608:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1609:       assertEquals(57, Node.REFLECTED_OBJECT);
1610:       assertEquals(49, Node.DIRECT_EVAL);
1611:       assertEquals(30, Node.VAR_ARGS_NAME);
1612:       assertEquals(40, Node.ORIGINALNAME_PROP);
1613:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1614:       assertEquals(32, Node.INCRDECR_PROP);
1615:       assertEquals(12, Node.COLUMN_BITS);
1616:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1617:       assertEquals(46, Node.IS_NAMESPACE);
1618:       assertEquals(50, Node.FREE_CALL);
1619:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1620:       assertEquals(1, Node.DECR_FLAG);
1621:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1622:       
1623:       boolean boolean3 = node1.isGetElem();
1624:       assertNotSame(node1, node2);
1625:       assertFalse(node1.equals((Object)node0));
1626:       assertFalse(node1.equals((Object)node2));
1627:       assertTrue(boolean3 == boolean2);
1628:       assertTrue(boolean3 == boolean0);
1629:       assertTrue(boolean3 == boolean1);
1630:       assertFalse(boolean3);
1631:       assertFalse(node1.isExprResult());
1632:       assertFalse(node1.isGetElem());
1633:       assertFalse(node1.isScript());
1634:       assertFalse(node1.isCast());
1635:       assertFalse(node1.isNumber());
1636:       assertFalse(node1.isLabelName());
1637:       assertFalse(node1.isNot());
1638:       assertFalse(node1.isObjectLit());
1639:       assertFalse(node1.isAnd());
1640:       assertFalse(node1.isLabel());
1641:       assertFalse(node1.isAssignAdd());
1642:       assertFalse(node1.isOr());
1643:       assertFalse(node1.isContinue());
1644:       assertFalse(node1.isFalse());
1645:       assertFalse(node1.isDo());
1646:       assertFalse(node1.isThrow());
1647:       assertTrue(node1.isString());
1648:       assertEquals(429, node1.getLineno());
1649:       assertFalse(node1.isInc());
1650:       assertFalse(node1.isParamList());
1651:       assertFalse(node1.isSwitch());
1652:       assertFalse(node1.isStringKey());
1653:       assertEquals(1, node1.getChildCount());
1654:       assertFalse(node1.isCatch());
1655:       assertFalse(node1.hasMoreThanOneChild());
1656:       assertFalse(node1.isInstanceOf());
1657:       assertTrue(node1.hasChildren());
1658:       assertFalse(node1.isWith());
1659:       assertFalse(node1.isCase());
1660:       assertFalse(node1.isRegExp());
1661:       assertFalse(node1.isThis());
1662:       assertFalse(node1.isBlock());
1663:       assertFalse(node1.isHook());
1664:       assertFalse(node1.isFor());
1665:       assertFalse(node1.isTry());
1666:       assertFalse(node1.isVoid());
1667:       assertFalse(node1.isFunction());
1668:       assertFalse(node1.isArrayLit());
1669:       assertEquals(1757224, node1.getSourcePosition());
1670:       assertFalse(node1.isEmpty());
1671:       assertFalse(node1.isIf());
1672:       assertFalse(node1.isDelProp());
1673:       assertFalse(node1.isGetterDef());
1674:       assertFalse(node1.isTrue());
1675:       assertFalse(node1.isDebugger());
1676:       assertFalse(node1.isNE());
1677:       assertFalse(node1.isIn());
1678:       assertEquals(40, node1.getCharno());
1679:       assertFalse(node1.isSetterDef());
1680:       assertFalse(node1.isDefaultCase());
1681:       assertEquals(40, node1.getType());
1682:       assertFalse(node1.isVar());
1683:       assertFalse(node1.isNew());
1684:       assertFalse(node1.isCall());
1685:       assertFalse(node1.isAdd());
1686:       assertFalse(node1.isBreak());
1687:       assertFalse(node1.isName());
1688:       assertFalse(node1.isNull());
1689:       assertFalse(node1.isReturn());
1690:       assertFalse(node1.isGetProp());
1691:       assertTrue(node1.hasOneChild());
1692:       assertFalse(node1.isWhile());
1693:       assertFalse(node1.isDec());
1694:       assertFalse(node1.isTypeOf());
1695:       assertFalse(node1.isAssign());
1696:       assertFalse(node1.isComma());
1697:       assertEquals(53, Node.INPUT_ID);
1698:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1699:       assertEquals(36, Node.QUOTED_PROP);
1700:       assertEquals(43, Node.IS_CONSTANT_NAME);
1701:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1702:       assertEquals(4095, Node.COLUMN_MASK);
1703:       assertEquals(37, Node.OPT_ARG_NAME);
1704:       assertEquals(48, Node.DIRECTIVES);
1705:       assertEquals(8, Node.FLAG_NO_THROWS);
1706:       assertEquals(2, Node.POST_FLAG);
1707:       assertEquals(56, Node.CHANGE_TIME);
1708:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1709:       assertEquals(47, Node.IS_DISPATCHER);
1710:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1711:       assertEquals(29, Node.JSDOC_INFO_PROP);
1712:       assertEquals(57, Node.LAST_PROP);
1713:       assertEquals(55, Node.INFERRED_FUNCTION);
1714:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1715:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1716:       assertEquals(39, Node.EMPTY_BLOCK);
1717:       assertEquals(52, Node.LENGTH);
1718:       assertEquals(54, Node.SLASH_V);
1719:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1720:       assertEquals(57, Node.REFLECTED_OBJECT);
1721:       assertEquals(49, Node.DIRECT_EVAL);
1722:       assertEquals(30, Node.VAR_ARGS_NAME);
1723:       assertEquals(40, Node.ORIGINALNAME_PROP);
1724:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1725:       assertEquals(32, Node.INCRDECR_PROP);
1726:       assertEquals(12, Node.COLUMN_BITS);
1727:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1728:       assertEquals(46, Node.IS_NAMESPACE);
1729:       assertEquals(50, Node.FREE_CALL);
1730:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1731:       assertEquals(1, Node.DECR_FLAG);
1732:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1733:       
1734:       boolean boolean4 = node2.isFromExterns();
1735:       assertNotSame(node2, node1);
1736:       assertFalse(node2.equals((Object)node0));
1737:       assertFalse(node2.equals((Object)node1));
1738:       assertTrue(boolean4 == boolean0);
1739:       assertTrue(boolean4 == boolean1);
1740:       assertTrue(boolean4 == boolean2);
1741:       assertTrue(boolean4 == boolean3);
1742:       assertFalse(boolean4);
1743:       assertFalse(node2.isLabel());
1744:       assertFalse(node2.isAssignAdd());
1745:       assertFalse(node2.isReturn());
1746:       assertEquals(42, node2.getCharno());
1747:       assertFalse(node2.isTypeOf());
1748:       assertFalse(node2.isNumber());
1749:       assertFalse(node2.hasMoreThanOneChild());
1750:       assertFalse(node2.hasChildren());
1751:       assertFalse(node2.isOr());
1752:       assertFalse(node2.isDec());
1753:       assertFalse(node2.isAssign());
1754:       assertFalse(node2.isGetElem());
1755:       assertFalse(node2.isContinue());
1756:       assertFalse(node2.isCast());
1757:       assertFalse(node2.isLabelName());
1758:       assertTrue(node2.isString());
1759:       assertFalse(node2.isBlock());
1760:       assertFalse(node2.isExprResult());
1761:       assertFalse(node2.isNot());
1762:       assertFalse(node2.isWhile());
1763:       assertFalse(node2.isScript());
1764:       assertFalse(node2.hasOneChild());
1765:       assertFalse(node2.isGetProp());
1766:       assertFalse(node2.isInstanceOf());
1767:       assertFalse(node2.isThis());
1768:       assertFalse(node2.isObjectLit());
1769:       assertFalse(node2.isFalse());
1770:       assertFalse(node2.isWith());
1771:       assertFalse(node2.isAnd());
1772:       assertFalse(node2.isCatch());
1773:       assertFalse(node2.isFunction());
1774:       assertEquals(40, node2.getType());
1775:       assertFalse(node2.isThrow());
1776:       assertFalse(node2.isInc());
1777:       assertFalse(node2.isSetterDef());
1778:       assertFalse(node2.isNE());
1779:       assertEquals(229418, node2.getSourcePosition());
1780:       assertFalse(node2.isIn());
1781:       assertFalse(node2.isGetterDef());
1782:       assertFalse(node2.isArrayLit());
1783:       assertFalse(node2.isSwitch());
1784:       assertFalse(node2.isIf());
1785:       assertFalse(node2.isDelProp());
1786:       assertFalse(node2.isTry());
1787:       assertFalse(node2.isRegExp());
1788:       assertFalse(node2.isHook());
1789:       assertFalse(node2.isDebugger());
1790:       assertFalse(node2.isCase());
1791:       assertFalse(node2.isFor());
1792:       assertFalse(node2.isParamList());
1793:       assertFalse(node2.isNull());
1794:       assertEquals(0, node2.getChildCount());
1795:       assertFalse(node2.isComma());
1796:       assertEquals(56, node2.getLineno());
1797:       assertFalse(node2.isName());
1798:       assertFalse(node2.isCall());
1799:       assertFalse(node2.isStringKey());
1800:       assertFalse(node2.isVoid());
1801:       assertFalse(node2.isBreak());
1802:       assertFalse(node2.isAdd());
1803:       assertFalse(node2.isNew());
1804:       assertFalse(node2.isTrue());
1805:       assertFalse(node2.isVar());
1806:       assertFalse(node2.isEmpty());
1807:       assertFalse(node2.isDefaultCase());
1808:       assertFalse(node2.isDo());
1809:       assertEquals(37, Node.OPT_ARG_NAME);
1810:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1811:       assertEquals(46, Node.IS_NAMESPACE);
1812:       assertEquals(56, Node.CHANGE_TIME);
1813:       assertEquals(32, Node.INCRDECR_PROP);
1814:       assertEquals(12, Node.COLUMN_BITS);
1815:       assertEquals(47, Node.IS_DISPATCHER);
1816:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1817:       assertEquals(2, Node.POST_FLAG);
1818:       assertEquals(30, Node.VAR_ARGS_NAME);
1819:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1820:       assertEquals(54, Node.SLASH_V);
1821:       assertEquals(43, Node.IS_CONSTANT_NAME);
1822:       assertEquals(1, Node.DECR_FLAG);
1823:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1824:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1825:       assertEquals(50, Node.FREE_CALL);
1826:       assertEquals(48, Node.DIRECTIVES);
1827:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1828:       assertEquals(39, Node.EMPTY_BLOCK);
1829:       assertEquals(40, Node.ORIGINALNAME_PROP);
1830:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1831:       assertEquals(4095, Node.COLUMN_MASK);
1832:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1833:       assertEquals(53, Node.INPUT_ID);
1834:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1835:       assertEquals(57, Node.LAST_PROP);
1836:       assertEquals(49, Node.DIRECT_EVAL);
1837:       assertEquals(55, Node.INFERRED_FUNCTION);
1838:       assertEquals(29, Node.JSDOC_INFO_PROP);
1839:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1840:       assertEquals(57, Node.REFLECTED_OBJECT);
1841:       assertEquals(36, Node.QUOTED_PROP);
1842:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1843:       assertEquals(52, Node.LENGTH);
1844:       assertEquals(8, Node.FLAG_NO_THROWS);
1845:       
1846:       int int1 = Node.REFLECTED_OBJECT;
1847:       assertFalse(int1 == int0);
1848:       assertEquals(57, int1);
1849:       
1850:       try { 
1851:         node1.getDouble();
1852:         fail("Expecting exception: UnsupportedOperationException");
1853:       
1854:       } catch(UnsupportedOperationException e) {
1855:          //
1856:          // STRING  429 [quoted: com.google.javascript.rhino.Node$IntPropListItem@0000000005] is not a number node
1857:          //
1858:          verifyException("com.google.javascript.rhino.Node", e);
1859:       }
1860:   }
1861: }
RegularFileObject[/tmp/EvoSuite_137_1628159820903/com/google/javascript/rhino/Node_137_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:37:01 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_137_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_137_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.common.collect.Sets$1",
101:       "com.google.javascript.rhino.SourcePosition",
102:       "com.google.common.collect.ImmutableMapKeySet",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.javascript.rhino.Node$AncestorIterable$1",
115:       "com.google.common.collect.Iterators$12",
116:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
117:       "com.google.common.collect.Iterators$11",
118:       "com.google.javascript.rhino.jstype.JSType$1",
119:       "com.google.common.collect.EmptyImmutableBiMap",
120:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
121:       "com.google.common.base.Predicate",
122:       "com.google.javascript.rhino.jstype.JSType$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.common.collect.SingletonImmutableSet",
135:       "com.google.javascript.rhino.jstype.NamedType",
136:       "com.google.common.collect.Iterators$13",
137:       "com.google.javascript.rhino.InputId",
138:       "com.google.common.collect.ImmutableList$SerializedForm",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
163:       "com.google.common.base.Joiner$MapJoiner",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.javascript.rhino.Node$AncestorIterable",
185:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
186:       "com.google.common.collect.Lists$RandomAccessListWrapper",
187:       "com.google.common.collect.ImmutableEnumSet",
188:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
189:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
190:       "com.google.javascript.rhino.jstype.EnumElementType",
191:       "com.google.javascript.rhino.jstype.UnionType",
192:       "com.google.common.base.Objects",
193:       "com.google.javascript.rhino.Node$NumberNode",
194:       "com.google.common.collect.SingletonImmutableList",
195:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
196:       "com.google.common.collect.ImmutableCollection$Builder",
197:       "com.google.javascript.rhino.jstype.StaticSlot",
198:       "com.google.common.collect.Iterators$6",
199:       "com.google.common.collect.BiMap",
200:       "com.google.common.collect.Iterators$7",
201:       "com.google.common.collect.AbstractSetMultimap",
202:       "com.google.common.base.Function",
203:       "com.google.common.collect.ImmutableSet",
204:       "com.google.common.collect.Lists$AbstractListWrapper",
205:       "com.google.common.collect.ImmutableMap",
206:       "com.google.common.collect.AbstractIndexedListIterator",
207:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
208:       "com.google.common.collect.Maps$1",
209:       "com.google.javascript.rhino.jstype.EnumType",
210:       "com.google.common.collect.Iterators$1",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$2",
213:       "com.google.javascript.rhino.jstype.NamespaceType",
214:       "com.google.common.collect.Iterators$3",
215:       "com.google.common.collect.Sets",
216:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
217:       "com.google.javascript.rhino.Node$ObjectPropListItem",
218:       "com.google.common.collect.Lists$StringAsImmutableList",
219:       "com.google.common.collect.Lists$2",
220:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
221:       "com.google.common.collect.ImmutableList$Builder",
222:       "com.google.common.collect.Lists$1",
223:       "com.google.javascript.rhino.jstype.StaticReference",
224:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
225:       "com.google.common.collect.Multiset",
226:       "com.google.common.collect.AbstractMultimap",
227:       "com.google.common.collect.Multimap",
228:       "com.google.common.collect.Iterators",
229:       "com.google.common.collect.EmptyImmutableSet",
230:       "com.google.common.collect.Maps$ImprovedAbstractMap",
231:       "com.google.common.collect.ImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
233:       "com.google.common.collect.ImmutableList",
234:       "com.google.common.collect.SingletonImmutableBiMap",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
236:       "com.google.javascript.rhino.jstype.StringType",
237:       "com.google.javascript.rhino.Node$AbstractPropListItem",
238:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
239:       "com.google.javascript.rhino.jstype.TemplatizedType",
240:       "com.google.javascript.rhino.jstype.Visitor",
241:       "com.google.javascript.rhino.jstype.NoResolvedType",
242:       "com.google.javascript.rhino.jstype.JSTypeNative",
243:       "com.google.javascript.rhino.jstype.AllType",
244:       "com.google.common.collect.Maps",
245:       "com.google.common.collect.SetMultimap",
246:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
247:       "com.google.common.collect.Maps$EntryTransformer",
248:       "com.google.javascript.rhino.JSTypeExpression",
249:       "com.google.common.collect.Iterators$MergingIterator"
250:     );
251:   } 
252: 
253:   private static void resetClasses() {
254:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_137_tmp__ESTest_scaffolding.class.getClassLoader()); 
255: 
256:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
257:       "com.google.javascript.rhino.Node",
258:       "com.google.javascript.rhino.Node$NumberNode",
259:       "com.google.javascript.rhino.Node$StringNode",
260:       "com.google.javascript.rhino.Node$AbstractPropListItem",
261:       "com.google.javascript.rhino.Node$ObjectPropListItem",
262:       "com.google.javascript.rhino.Node$IntPropListItem",
263:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
264:       "com.google.javascript.rhino.Node$AncestorIterable",
265:       "com.google.javascript.rhino.Node$NodeMismatch",
266:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
267:       "com.google.javascript.rhino.Node$SideEffectFlags",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Preconditions",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
301:       "com.google.javascript.rhino.jstype.JSType$1",
302:       "com.google.javascript.rhino.jstype.JSType",
303:       "com.google.javascript.rhino.jstype.ObjectType",
304:       "com.google.javascript.rhino.jstype.ProxyObjectType",
305:       "com.google.javascript.rhino.jstype.TemplateType",
306:       "com.google.javascript.rhino.jstype.ValueType",
307:       "com.google.javascript.rhino.jstype.BooleanType",
308:       "com.google.javascript.rhino.jstype.NullType",
309:       "com.google.javascript.rhino.jstype.NumberType",
310:       "com.google.javascript.rhino.jstype.StringType",
311:       "com.google.javascript.rhino.jstype.UnknownType",
312:       "com.google.javascript.rhino.jstype.VoidType",
313:       "com.google.javascript.rhino.jstype.AllType",
314:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
315:       "com.google.common.collect.ImmutableMap",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.collect.EmptyImmutableBiMap",
318:       "com.google.javascript.rhino.jstype.PropertyMap$1",
319:       "com.google.javascript.rhino.jstype.PropertyMap",
320:       "com.google.javascript.rhino.jstype.FunctionType",
321:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
322:       "com.google.javascript.rhino.Token",
323:       "com.google.javascript.rhino.jstype.ArrowType",
324:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
325:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
326:       "com.google.javascript.rhino.jstype.InstanceObjectType",
327:       "com.google.javascript.rhino.jstype.Property",
328:       "com.google.common.collect.Lists",
329:       "com.google.javascript.rhino.jstype.NoObjectType",
330:       "com.google.javascript.rhino.jstype.NoType",
331:       "com.google.javascript.rhino.jstype.NoResolvedType",
332:       "com.google.common.collect.SingletonImmutableList",
333:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
334:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
335:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
336:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
337:       "com.google.javascript.rhino.jstype.UnionType",
338:       "com.google.javascript.rhino.jstype.FunctionBuilder",
339:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.javascript.rhino.jstype.TernaryValue",
348:       "com.google.common.collect.Iterables",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
353:       "com.google.common.collect.Sets",
354:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
355:       "com.google.javascript.rhino.InputId",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
364:       "com.google.javascript.rhino.JSTypeExpression",
365:       "com.google.common.collect.Platform",
366:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
371:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.JSDocInfo$Marker",
374:       "com.google.common.collect.Iterators$12",
375:       "com.google.javascript.rhino.jstype.JSType$2",
376:       "com.google.common.collect.ImmutableList$1"
377:     );
378:   }
379: }

[MASTER] 10:37:01.195 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(951.13);
assertNotNull(node0);
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isParamList());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWith());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isParamList());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWith());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);

boolean boolean0 = node0.isOr();
assertFalse(boolean0);
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isParamList());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWith());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);

Node node1 = Node.newString("", 429, 40);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node1.hasOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isDo());
assertFalse(node1.isThrow());
assertTrue(node1.isString());
assertEquals(429, node1.getLineno());
assertFalse(node1.isInc());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getCharno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertEquals(40, node1.getType());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean1 = node1.isUnscopedQualifiedName();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node1.hasOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isDo());
assertFalse(node1.isThrow());
assertTrue(node1.isString());
assertEquals(429, node1.getLineno());
assertFalse(node1.isInc());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getCharno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertEquals(40, node1.getType());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Node node2 = Node.newString("", 56, 42);
assertNotSame(node2, node1);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertEquals(42, node2.getCharno());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasChildren());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertTrue(node2.isString());
assertFalse(node2.isBlock());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isWhile());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isFunction());
assertEquals(40, node2.getType());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNE());
assertEquals(229418, node2.getSourcePosition());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isDebugger());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertEquals(56, node2.getLineno());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isVoid());
assertFalse(node2.isBreak());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isTrue());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

node0.putProp(1528, node1);
assertNotSame(node1, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isParamList());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWith());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node1.hasOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isDo());
assertFalse(node1.isThrow());
assertTrue(node1.isString());
assertEquals(429, node1.getLineno());
assertFalse(node1.isInc());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getCharno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertEquals(40, node1.getType());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

node1.setWasEmptyNode(false);
assertNotSame(node1, node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.hasOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isDo());
assertFalse(node1.isThrow());
assertTrue(node1.isString());
assertEquals(429, node1.getLineno());
assertFalse(node1.isInc());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getCharno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertEquals(40, node1.getType());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

String string0 = node1.getSourceFileName();
assertNotSame(node1, node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertNull(string0);
assertFalse(node1.hasOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isDo());
assertFalse(node1.isThrow());
assertTrue(node1.isString());
assertEquals(429, node1.getLineno());
assertFalse(node1.isInc());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getCharno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertEquals(40, node1.getType());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

node1.addChildrenToBack(node2);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isDo());
assertFalse(node1.isThrow());
assertTrue(node1.isString());
assertEquals(429, node1.getLineno());
assertFalse(node1.isInc());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertEquals(40, node1.getCharno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertEquals(40, node1.getType());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertEquals(42, node2.getCharno());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasChildren());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertTrue(node2.isString());
assertFalse(node2.isBlock());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isWhile());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isFunction());
assertEquals(40, node2.getType());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNE());
assertEquals(229418, node2.getSourcePosition());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isDebugger());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertEquals(56, node2.getLineno());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isVoid());
assertFalse(node2.isBreak());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isTrue());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

node1.setQuotedString();
assertNotSame(node1, node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isDo());
assertFalse(node1.isThrow());
assertTrue(node1.isString());
assertEquals(429, node1.getLineno());
assertFalse(node1.isInc());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertEquals(40, node1.getCharno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertEquals(40, node1.getType());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

int int0 = Node.mergeLineCharNo(42, 36);
assertEquals(172068, int0);

boolean boolean2 = node2.isFalse();
assertNotSame(node2, node1);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertEquals(42, node2.getCharno());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasChildren());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertTrue(node2.isString());
assertFalse(node2.isBlock());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isWhile());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isFunction());
assertEquals(40, node2.getType());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNE());
assertEquals(229418, node2.getSourcePosition());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isDebugger());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertEquals(56, node2.getLineno());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isVoid());
assertFalse(node2.isBreak());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isTrue());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

node1.setVarArgs(false);
assertNotSame(node1, node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isDo());
assertFalse(node1.isThrow());
assertTrue(node1.isString());
assertEquals(429, node1.getLineno());
assertFalse(node1.isInc());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertEquals(40, node1.getCharno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertEquals(40, node1.getType());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean3 = node1.isGetElem();
assertNotSame(node1, node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertFalse(boolean3);
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isDo());
assertFalse(node1.isThrow());
assertTrue(node1.isString());
assertEquals(429, node1.getLineno());
assertFalse(node1.isInc());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertEquals(40, node1.getCharno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertEquals(40, node1.getType());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean4 = node2.isFromExterns();
assertNotSame(node2, node1);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertFalse(boolean4);
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertEquals(42, node2.getCharno());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasChildren());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertTrue(node2.isString());
assertFalse(node2.isBlock());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isWhile());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isFunction());
assertEquals(40, node2.getType());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNE());
assertEquals(229418, node2.getSourcePosition());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isDebugger());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertEquals(56, node2.getLineno());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isVoid());
assertFalse(node2.isBreak());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isTrue());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

int int1 = Node.REFLECTED_OBJECT;
assertFalse(int1 == int0);
assertEquals(57, int1);

node1.getDouble();

[MASTER] 10:37:02.424 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_156_1628159822327/com/google/javascript/rhino/Node_156_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_156_1628159822327/com/google/javascript/rhino/Node_156_tmp__ESTest_scaffolding.java]]
[MASTER] 10:37:02.425 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:37:02.425 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:37:02.425 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 128
[MASTER] 10:37:02.426 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_156_1628159822327/com/google/javascript/rhino/Node_156_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:37:02 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.evosuite.runtime.testdata.EvoSuiteFile;
14: import org.evosuite.runtime.testdata.FileSystemHandling;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_156_tmp__ESTest extends Node_156_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = new Node(80, 80, 80);
23:       assertNotNull(node0);
24:       assertFalse(node0.isCatch());
25:       assertEquals(0, node0.getChildCount());
26:       assertEquals(80, node0.getCharno());
27:       assertFalse(node0.isSetterDef());
28:       assertFalse(node0.isFunction());
29:       assertEquals(327760, node0.getSourcePosition());
30:       assertFalse(node0.isDefaultCase());
31:       assertFalse(node0.isRegExp());
32:       assertFalse(node0.isTry());
33:       assertFalse(node0.isName());
34:       assertFalse(node0.isEmpty());
35:       assertFalse(node0.isAdd());
36:       assertFalse(node0.isCall());
37:       assertFalse(node0.isNE());
38:       assertFalse(node0.isDelProp());
39:       assertFalse(node0.isVoid());
40:       assertFalse(node0.isIf());
41:       assertFalse(node0.isNull());
42:       assertFalse(node0.isTrue());
43:       assertFalse(node0.hasMoreThanOneChild());
44:       assertFalse(node0.isDo());
45:       assertFalse(node0.isCase());
46:       assertEquals(80, node0.getType());
47:       assertFalse(node0.isNew());
48:       assertFalse(node0.isLabel());
49:       assertFalse(node0.isAssignAdd());
50:       assertFalse(node0.isHook());
51:       assertFalse(node0.isFor());
52:       assertFalse(node0.isBlock());
53:       assertFalse(node0.isVar());
54:       assertFalse(node0.isArrayLit());
55:       assertFalse(node0.hasOneChild());
56:       assertFalse(node0.isLabelName());
57:       assertFalse(node0.isSwitch());
58:       assertFalse(node0.isParamList());
59:       assertFalse(node0.isNumber());
60:       assertFalse(node0.isGetterDef());
61:       assertFalse(node0.isStringKey());
62:       assertFalse(node0.isAnd());
63:       assertFalse(node0.isNot());
64:       assertFalse(node0.isObjectLit());
65:       assertFalse(node0.isWith());
66:       assertFalse(node0.isInstanceOf());
67:       assertFalse(node0.isGetProp());
68:       assertFalse(node0.isScript());
69:       assertFalse(node0.isThis());
70:       assertFalse(node0.isComma());
71:       assertFalse(node0.isThrow());
72:       assertFalse(node0.isAssign());
73:       assertEquals(80, node0.getLineno());
74:       assertFalse(node0.isBreak());
75:       assertFalse(node0.isGetElem());
76:       assertFalse(node0.isExprResult());
77:       assertFalse(node0.isOr());
78:       assertFalse(node0.isContinue());
79:       assertFalse(node0.isString());
80:       assertFalse(node0.isIn());
81:       assertFalse(node0.isInc());
82:       assertFalse(node0.isDec());
83:       assertFalse(node0.isTypeOf());
84:       assertFalse(node0.isReturn());
85:       assertFalse(node0.isWhile());
86:       assertFalse(node0.hasChildren());
87:       assertFalse(node0.isCast());
88:       assertFalse(node0.isFalse());
89:       assertFalse(node0.isDebugger());
90:       assertEquals(4095, Node.COLUMN_MASK);
91:       assertEquals(55, Node.INFERRED_FUNCTION);
92:       assertEquals(36, Node.QUOTED_PROP);
93:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
94:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
95:       assertEquals(8, Node.FLAG_NO_THROWS);
96:       assertEquals(53, Node.INPUT_ID);
97:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
98:       assertEquals(39, Node.EMPTY_BLOCK);
99:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
100:       assertEquals(57, Node.REFLECTED_OBJECT);
101:       assertEquals(52, Node.LENGTH);
102:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
103:       assertEquals(56, Node.CHANGE_TIME);
104:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
105:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
106:       assertEquals(48, Node.DIRECTIVES);
107:       assertEquals(49, Node.DIRECT_EVAL);
108:       assertEquals(37, Node.OPT_ARG_NAME);
109:       assertEquals(51, Node.STATIC_SOURCE_FILE);
110:       assertEquals(12, Node.COLUMN_BITS);
111:       assertEquals(32, Node.INCRDECR_PROP);
112:       assertEquals(30, Node.VAR_ARGS_NAME);
113:       assertEquals(46, Node.IS_NAMESPACE);
114:       assertEquals(57, Node.LAST_PROP);
115:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
116:       assertEquals(29, Node.JSDOC_INFO_PROP);
117:       assertEquals(1, Node.DECR_FLAG);
118:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
119:       assertEquals(15, Node.NO_SIDE_EFFECTS);
120:       assertEquals(50, Node.FREE_CALL);
121:       assertEquals(54, Node.SLASH_V);
122:       assertEquals(47, Node.IS_DISPATCHER);
123:       assertEquals(43, Node.IS_CONSTANT_NAME);
124:       assertEquals(2, Node.POST_FLAG);
125:       assertEquals(40, Node.ORIGINALNAME_PROP);
126:       
127:       Iterable<Node> iterable0 = node0.children();
128:       assertFalse(iterable0.contains(node0));
129:       assertNotNull(iterable0);
130:       assertFalse(node0.isCatch());
131:       assertEquals(0, node0.getChildCount());
132:       assertEquals(80, node0.getCharno());
133:       assertFalse(node0.isSetterDef());
134:       assertFalse(node0.isFunction());
135:       assertEquals(327760, node0.getSourcePosition());
136:       assertFalse(node0.isDefaultCase());
137:       assertFalse(node0.isRegExp());
138:       assertFalse(node0.isTry());
139:       assertFalse(node0.isName());
140:       assertFalse(node0.isEmpty());
141:       assertFalse(node0.isAdd());
142:       assertFalse(node0.isCall());
143:       assertFalse(node0.isNE());
144:       assertFalse(node0.isDelProp());
145:       assertFalse(node0.isVoid());
146:       assertFalse(node0.isIf());
147:       assertFalse(node0.isNull());
148:       assertFalse(node0.isTrue());
149:       assertFalse(node0.hasMoreThanOneChild());
150:       assertFalse(node0.isDo());
151:       assertFalse(node0.isCase());
152:       assertEquals(80, node0.getType());
153:       assertFalse(node0.isNew());
154:       assertFalse(node0.isLabel());
155:       assertFalse(node0.isAssignAdd());
156:       assertFalse(node0.isHook());
157:       assertFalse(node0.isFor());
158:       assertFalse(node0.isBlock());
159:       assertFalse(node0.isVar());
160:       assertFalse(node0.isArrayLit());
161:       assertFalse(node0.hasOneChild());
162:       assertFalse(node0.isLabelName());
163:       assertFalse(node0.isSwitch());
164:       assertFalse(node0.isParamList());
165:       assertFalse(node0.isNumber());
166:       assertFalse(node0.isGetterDef());
167:       assertFalse(node0.isStringKey());
168:       assertFalse(node0.isAnd());
169:       assertFalse(node0.isNot());
170:       assertFalse(node0.isObjectLit());
171:       assertFalse(node0.isWith());
172:       assertFalse(node0.isInstanceOf());
173:       assertFalse(node0.isGetProp());
174:       assertFalse(node0.isScript());
175:       assertFalse(node0.isThis());
176:       assertFalse(node0.isComma());
177:       assertFalse(node0.isThrow());
178:       assertFalse(node0.isAssign());
179:       assertEquals(80, node0.getLineno());
180:       assertFalse(node0.isBreak());
181:       assertFalse(node0.isGetElem());
182:       assertFalse(node0.isExprResult());
183:       assertFalse(node0.isOr());
184:       assertFalse(node0.isContinue());
185:       assertFalse(node0.isString());
186:       assertFalse(node0.isIn());
187:       assertFalse(node0.isInc());
188:       assertFalse(node0.isDec());
189:       assertFalse(node0.isTypeOf());
190:       assertFalse(node0.isReturn());
191:       assertFalse(node0.isWhile());
192:       assertFalse(node0.hasChildren());
193:       assertFalse(node0.isCast());
194:       assertFalse(node0.isFalse());
195:       assertFalse(node0.isDebugger());
196:       assertEquals(4095, Node.COLUMN_MASK);
197:       assertEquals(55, Node.INFERRED_FUNCTION);
198:       assertEquals(36, Node.QUOTED_PROP);
199:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
200:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
201:       assertEquals(8, Node.FLAG_NO_THROWS);
202:       assertEquals(53, Node.INPUT_ID);
203:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
204:       assertEquals(39, Node.EMPTY_BLOCK);
205:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
206:       assertEquals(57, Node.REFLECTED_OBJECT);
207:       assertEquals(52, Node.LENGTH);
208:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
209:       assertEquals(56, Node.CHANGE_TIME);
210:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
211:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
212:       assertEquals(48, Node.DIRECTIVES);
213:       assertEquals(49, Node.DIRECT_EVAL);
214:       assertEquals(37, Node.OPT_ARG_NAME);
215:       assertEquals(51, Node.STATIC_SOURCE_FILE);
216:       assertEquals(12, Node.COLUMN_BITS);
217:       assertEquals(32, Node.INCRDECR_PROP);
218:       assertEquals(30, Node.VAR_ARGS_NAME);
219:       assertEquals(46, Node.IS_NAMESPACE);
220:       assertEquals(57, Node.LAST_PROP);
221:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
222:       assertEquals(29, Node.JSDOC_INFO_PROP);
223:       assertEquals(1, Node.DECR_FLAG);
224:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
225:       assertEquals(15, Node.NO_SIDE_EFFECTS);
226:       assertEquals(50, Node.FREE_CALL);
227:       assertEquals(54, Node.SLASH_V);
228:       assertEquals(47, Node.IS_DISPATCHER);
229:       assertEquals(43, Node.IS_CONSTANT_NAME);
230:       assertEquals(2, Node.POST_FLAG);
231:       assertEquals(40, Node.ORIGINALNAME_PROP);
232:       
233:       Node node1 = new Node(29, node0, node0, 77, 37);
234:       assertFalse(node1.equals((Object)node0));
235:       assertNotNull(node1);
236:       assertFalse(node0.isCatch());
237:       assertEquals(0, node0.getChildCount());
238:       assertEquals(80, node0.getCharno());
239:       assertFalse(node0.isSetterDef());
240:       assertFalse(node0.isFunction());
241:       assertEquals(327760, node0.getSourcePosition());
242:       assertFalse(node0.isDefaultCase());
243:       assertFalse(node0.isRegExp());
244:       assertFalse(node0.isTry());
245:       assertFalse(node0.isName());
246:       assertFalse(node0.isEmpty());
247:       assertFalse(node0.isAdd());
248:       assertFalse(node0.isCall());
249:       assertFalse(node0.isNE());
250:       assertFalse(node0.isDelProp());
251:       assertFalse(node0.isVoid());
252:       assertFalse(node0.isIf());
253:       assertFalse(node0.isNull());
254:       assertFalse(node0.isTrue());
255:       assertFalse(node0.hasMoreThanOneChild());
256:       assertFalse(node0.isDo());
257:       assertFalse(node0.isCase());
258:       assertEquals(80, node0.getType());
259:       assertFalse(node0.isNew());
260:       assertFalse(node0.isLabel());
261:       assertFalse(node0.isAssignAdd());
262:       assertFalse(node0.isHook());
263:       assertFalse(node0.isFor());
264:       assertFalse(node0.isBlock());
265:       assertFalse(node0.isVar());
266:       assertFalse(node0.isArrayLit());
267:       assertFalse(node0.hasOneChild());
268:       assertFalse(node0.isLabelName());
269:       assertFalse(node0.isSwitch());
270:       assertFalse(node0.isParamList());
271:       assertFalse(node0.isNumber());
272:       assertFalse(node0.isGetterDef());
273:       assertFalse(node0.isStringKey());
274:       assertFalse(node0.isAnd());
275:       assertFalse(node0.isNot());
276:       assertFalse(node0.isObjectLit());
277:       assertFalse(node0.isWith());
278:       assertFalse(node0.isInstanceOf());
279:       assertFalse(node0.isGetProp());
280:       assertFalse(node0.isScript());
281:       assertFalse(node0.isThis());
282:       assertFalse(node0.isComma());
283:       assertFalse(node0.isThrow());
284:       assertFalse(node0.isAssign());
285:       assertEquals(80, node0.getLineno());
286:       assertFalse(node0.isBreak());
287:       assertFalse(node0.isGetElem());
288:       assertFalse(node0.isExprResult());
289:       assertFalse(node0.isOr());
290:       assertFalse(node0.isContinue());
291:       assertFalse(node0.isString());
292:       assertFalse(node0.isIn());
293:       assertFalse(node0.isInc());
294:       assertFalse(node0.isDec());
295:       assertFalse(node0.isTypeOf());
296:       assertFalse(node0.isReturn());
297:       assertFalse(node0.isWhile());
298:       assertFalse(node0.hasChildren());
299:       assertFalse(node0.isCast());
300:       assertFalse(node0.isFalse());
301:       assertFalse(node0.isDebugger());
302:       assertFalse(node1.isCatch());
303:       assertFalse(node1.isSetterDef());
304:       assertFalse(node1.isName());
305:       assertFalse(node1.isNull());
306:       assertFalse(node1.isTrue());
307:       assertFalse(node1.isStringKey());
308:       assertFalse(node1.isParamList());
309:       assertFalse(node1.isAdd());
310:       assertFalse(node1.isArrayLit());
311:       assertFalse(node1.isNew());
312:       assertFalse(node1.isFunction());
313:       assertFalse(node1.isEmpty());
314:       assertFalse(node1.isDo());
315:       assertFalse(node1.isVar());
316:       assertFalse(node1.isDefaultCase());
317:       assertEquals(315429, node1.getSourcePosition());
318:       assertFalse(node1.isLabel());
319:       assertTrue(node1.hasChildren());
320:       assertEquals(1, node1.getChildCount());
321:       assertFalse(node1.hasMoreThanOneChild());
322:       assertFalse(node1.isNumber());
323:       assertFalse(node1.isIn());
324:       assertFalse(node1.isLabelName());
325:       assertFalse(node1.isGetterDef());
326:       assertFalse(node1.isSwitch());
327:       assertFalse(node1.isNE());
328:       assertFalse(node1.isIf());
329:       assertFalse(node1.isTry());
330:       assertFalse(node1.isBlock());
331:       assertFalse(node1.isScript());
332:       assertFalse(node1.isRegExp());
333:       assertFalse(node1.isWith());
334:       assertFalse(node1.isFor());
335:       assertFalse(node1.isCase());
336:       assertEquals(77, node1.getLineno());
337:       assertFalse(node1.isThis());
338:       assertFalse(node1.isHook());
339:       assertFalse(node1.isGetProp());
340:       assertFalse(node1.isComma());
341:       assertFalse(node1.isObjectLit());
342:       assertFalse(node1.isInstanceOf());
343:       assertEquals(37, node1.getCharno());
344:       assertFalse(node1.isNot());
345:       assertFalse(node1.isBreak());
346:       assertFalse(node1.isAnd());
347:       assertFalse(node1.isCast());
348:       assertFalse(node1.isInc());
349:       assertFalse(node1.isFalse());
350:       assertFalse(node1.isThrow());
351:       assertFalse(node1.isOr());
352:       assertFalse(node1.isAssignAdd());
353:       assertFalse(node1.isReturn());
354:       assertFalse(node1.isTypeOf());
355:       assertFalse(node1.isContinue());
356:       assertFalse(node1.isDelProp());
357:       assertFalse(node1.isGetElem());
358:       assertEquals(29, node1.getType());
359:       assertFalse(node1.isVoid());
360:       assertFalse(node1.isDebugger());
361:       assertFalse(node1.isExprResult());
362:       assertFalse(node1.isCall());
363:       assertFalse(node1.isString());
364:       assertFalse(node1.isAssign());
365:       assertTrue(node1.hasOneChild());
366:       assertFalse(node1.isDec());
367:       assertFalse(node1.isWhile());
368:       assertEquals(4095, Node.COLUMN_MASK);
369:       assertEquals(55, Node.INFERRED_FUNCTION);
370:       assertEquals(36, Node.QUOTED_PROP);
371:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
372:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
373:       assertEquals(8, Node.FLAG_NO_THROWS);
374:       assertEquals(53, Node.INPUT_ID);
375:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
376:       assertEquals(39, Node.EMPTY_BLOCK);
377:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
378:       assertEquals(57, Node.REFLECTED_OBJECT);
379:       assertEquals(52, Node.LENGTH);
380:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
381:       assertEquals(56, Node.CHANGE_TIME);
382:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
383:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
384:       assertEquals(48, Node.DIRECTIVES);
385:       assertEquals(49, Node.DIRECT_EVAL);
386:       assertEquals(37, Node.OPT_ARG_NAME);
387:       assertEquals(51, Node.STATIC_SOURCE_FILE);
388:       assertEquals(12, Node.COLUMN_BITS);
389:       assertEquals(32, Node.INCRDECR_PROP);
390:       assertEquals(30, Node.VAR_ARGS_NAME);
391:       assertEquals(46, Node.IS_NAMESPACE);
392:       assertEquals(57, Node.LAST_PROP);
393:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
394:       assertEquals(29, Node.JSDOC_INFO_PROP);
395:       assertEquals(1, Node.DECR_FLAG);
396:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
397:       assertEquals(15, Node.NO_SIDE_EFFECTS);
398:       assertEquals(50, Node.FREE_CALL);
399:       assertEquals(54, Node.SLASH_V);
400:       assertEquals(47, Node.IS_DISPATCHER);
401:       assertEquals(43, Node.IS_CONSTANT_NAME);
402:       assertEquals(2, Node.POST_FLAG);
403:       assertEquals(40, Node.ORIGINALNAME_PROP);
404:       assertEquals(8, Node.FLAG_NO_THROWS);
405:       assertEquals(48, Node.DIRECTIVES);
406:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
407:       assertEquals(4095, Node.COLUMN_MASK);
408:       assertEquals(40, Node.ORIGINALNAME_PROP);
409:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
410:       assertEquals(53, Node.INPUT_ID);
411:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
412:       assertEquals(52, Node.LENGTH);
413:       assertEquals(36, Node.QUOTED_PROP);
414:       assertEquals(57, Node.REFLECTED_OBJECT);
415:       assertEquals(57, Node.LAST_PROP);
416:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
417:       assertEquals(15, Node.NO_SIDE_EFFECTS);
418:       assertEquals(55, Node.INFERRED_FUNCTION);
419:       assertEquals(39, Node.EMPTY_BLOCK);
420:       assertEquals(29, Node.JSDOC_INFO_PROP);
421:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
422:       assertEquals(37, Node.OPT_ARG_NAME);
423:       assertEquals(2, Node.POST_FLAG);
424:       assertEquals(32, Node.INCRDECR_PROP);
425:       assertEquals(56, Node.CHANGE_TIME);
426:       assertEquals(51, Node.STATIC_SOURCE_FILE);
427:       assertEquals(47, Node.IS_DISPATCHER);
428:       assertEquals(12, Node.COLUMN_BITS);
429:       assertEquals(46, Node.IS_NAMESPACE);
430:       assertEquals(30, Node.VAR_ARGS_NAME);
431:       assertEquals(49, Node.DIRECT_EVAL);
432:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
433:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
434:       assertEquals(43, Node.IS_CONSTANT_NAME);
435:       assertEquals(54, Node.SLASH_V);
436:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
437:       assertEquals(1, Node.DECR_FLAG);
438:       assertEquals(50, Node.FREE_CALL);
439:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
440:       
441:       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
442:       assertTrue(boolean0);
443:       
444:       boolean boolean1 = node1.isNew();
445:       assertNotSame(node0, node1);
446:       assertNotSame(node1, node0);
447:       assertFalse(node0.equals((Object)node1));
448:       assertFalse(node1.equals((Object)node0));
449:       assertFalse(boolean1 == boolean0);
450:       assertFalse(boolean1);
451:       assertFalse(node0.isCatch());
452:       assertEquals(0, node0.getChildCount());
453:       assertEquals(80, node0.getCharno());
454:       assertFalse(node0.isSetterDef());
455:       assertFalse(node0.isFunction());
456:       assertEquals(327760, node0.getSourcePosition());
457:       assertFalse(node0.isDefaultCase());
458:       assertFalse(node0.isRegExp());
459:       assertFalse(node0.isTry());
460:       assertFalse(node0.isName());
461:       assertFalse(node0.isEmpty());
462:       assertFalse(node0.isAdd());
463:       assertFalse(node0.isCall());
464:       assertFalse(node0.isNE());
465:       assertFalse(node0.isDelProp());
466:       assertFalse(node0.isVoid());
467:       assertFalse(node0.isIf());
468:       assertFalse(node0.isNull());
469:       assertFalse(node0.isTrue());
470:       assertFalse(node0.hasMoreThanOneChild());
471:       assertFalse(node0.isDo());
472:       assertFalse(node0.isCase());
473:       assertEquals(80, node0.getType());
474:       assertFalse(node0.isNew());
475:       assertFalse(node0.isLabel());
476:       assertFalse(node0.isAssignAdd());
477:       assertFalse(node0.isHook());
478:       assertFalse(node0.isFor());
479:       assertFalse(node0.isBlock());
480:       assertFalse(node0.isVar());
481:       assertFalse(node0.isArrayLit());
482:       assertFalse(node0.hasOneChild());
483:       assertFalse(node0.isLabelName());
484:       assertFalse(node0.isSwitch());
485:       assertFalse(node0.isParamList());
486:       assertFalse(node0.isNumber());
487:       assertFalse(node0.isGetterDef());
488:       assertFalse(node0.isStringKey());
489:       assertFalse(node0.isAnd());
490:       assertFalse(node0.isNot());
491:       assertFalse(node0.isObjectLit());
492:       assertFalse(node0.isWith());
493:       assertFalse(node0.isInstanceOf());
494:       assertFalse(node0.isGetProp());
495:       assertFalse(node0.isScript());
496:       assertFalse(node0.isThis());
497:       assertFalse(node0.isComma());
498:       assertFalse(node0.isThrow());
499:       assertFalse(node0.isAssign());
500:       assertEquals(80, node0.getLineno());
501:       assertFalse(node0.isBreak());
502:       assertFalse(node0.isGetElem());
503:       assertFalse(node0.isExprResult());
504:       assertFalse(node0.isOr());
505:       assertFalse(node0.isContinue());
506:       assertFalse(node0.isString());
507:       assertFalse(node0.isIn());
508:       assertFalse(node0.isInc());
509:       assertFalse(node0.isDec());
510:       assertFalse(node0.isTypeOf());
511:       assertFalse(node0.isReturn());
512:       assertFalse(node0.isWhile());
513:       assertFalse(node0.hasChildren());
514:       assertFalse(node0.isCast());
515:       assertFalse(node0.isFalse());
516:       assertFalse(node0.isDebugger());
517:       assertFalse(node1.isCatch());
518:       assertFalse(node1.isSetterDef());
519:       assertFalse(node1.isName());
520:       assertFalse(node1.isNull());
521:       assertFalse(node1.isTrue());
522:       assertFalse(node1.isStringKey());
523:       assertFalse(node1.isParamList());
524:       assertFalse(node1.isAdd());
525:       assertFalse(node1.isArrayLit());
526:       assertFalse(node1.isNew());
527:       assertFalse(node1.isFunction());
528:       assertFalse(node1.isEmpty());
529:       assertFalse(node1.isDo());
530:       assertFalse(node1.isVar());
531:       assertFalse(node1.isDefaultCase());
532:       assertEquals(315429, node1.getSourcePosition());
533:       assertFalse(node1.isLabel());
534:       assertTrue(node1.hasChildren());
535:       assertEquals(1, node1.getChildCount());
536:       assertFalse(node1.hasMoreThanOneChild());
537:       assertFalse(node1.isNumber());
538:       assertFalse(node1.isIn());
539:       assertFalse(node1.isLabelName());
540:       assertFalse(node1.isGetterDef());
541:       assertFalse(node1.isSwitch());
542:       assertFalse(node1.isNE());
543:       assertFalse(node1.isIf());
544:       assertFalse(node1.isTry());
545:       assertFalse(node1.isBlock());
546:       assertFalse(node1.isScript());
547:       assertFalse(node1.isRegExp());
548:       assertFalse(node1.isWith());
549:       assertFalse(node1.isFor());
550:       assertFalse(node1.isCase());
551:       assertEquals(77, node1.getLineno());
552:       assertFalse(node1.isThis());
553:       assertFalse(node1.isHook());
554:       assertFalse(node1.isGetProp());
555:       assertFalse(node1.isComma());
556:       assertFalse(node1.isObjectLit());
557:       assertFalse(node1.isInstanceOf());
558:       assertEquals(37, node1.getCharno());
559:       assertFalse(node1.isNot());
560:       assertFalse(node1.isBreak());
561:       assertFalse(node1.isAnd());
562:       assertFalse(node1.isCast());
563:       assertFalse(node1.isInc());
564:       assertFalse(node1.isFalse());
565:       assertFalse(node1.isThrow());
566:       assertFalse(node1.isOr());
567:       assertFalse(node1.isAssignAdd());
568:       assertFalse(node1.isReturn());
569:       assertFalse(node1.isTypeOf());
570:       assertFalse(node1.isContinue());
571:       assertFalse(node1.isDelProp());
572:       assertFalse(node1.isGetElem());
573:       assertEquals(29, node1.getType());
574:       assertFalse(node1.isVoid());
575:       assertFalse(node1.isDebugger());
576:       assertFalse(node1.isExprResult());
577:       assertFalse(node1.isCall());
578:       assertFalse(node1.isString());
579:       assertFalse(node1.isAssign());
580:       assertTrue(node1.hasOneChild());
581:       assertFalse(node1.isDec());
582:       assertFalse(node1.isWhile());
583:       assertEquals(4095, Node.COLUMN_MASK);
584:       assertEquals(55, Node.INFERRED_FUNCTION);
585:       assertEquals(36, Node.QUOTED_PROP);
586:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
587:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
588:       assertEquals(8, Node.FLAG_NO_THROWS);
589:       assertEquals(53, Node.INPUT_ID);
590:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
591:       assertEquals(39, Node.EMPTY_BLOCK);
592:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
593:       assertEquals(57, Node.REFLECTED_OBJECT);
594:       assertEquals(52, Node.LENGTH);
595:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
596:       assertEquals(56, Node.CHANGE_TIME);
597:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
598:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
599:       assertEquals(48, Node.DIRECTIVES);
600:       assertEquals(49, Node.DIRECT_EVAL);
601:       assertEquals(37, Node.OPT_ARG_NAME);
602:       assertEquals(51, Node.STATIC_SOURCE_FILE);
603:       assertEquals(12, Node.COLUMN_BITS);
604:       assertEquals(32, Node.INCRDECR_PROP);
605:       assertEquals(30, Node.VAR_ARGS_NAME);
606:       assertEquals(46, Node.IS_NAMESPACE);
607:       assertEquals(57, Node.LAST_PROP);
608:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
609:       assertEquals(29, Node.JSDOC_INFO_PROP);
610:       assertEquals(1, Node.DECR_FLAG);
611:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
612:       assertEquals(15, Node.NO_SIDE_EFFECTS);
613:       assertEquals(50, Node.FREE_CALL);
614:       assertEquals(54, Node.SLASH_V);
615:       assertEquals(47, Node.IS_DISPATCHER);
616:       assertEquals(43, Node.IS_CONSTANT_NAME);
617:       assertEquals(2, Node.POST_FLAG);
618:       assertEquals(40, Node.ORIGINALNAME_PROP);
619:       assertEquals(8, Node.FLAG_NO_THROWS);
620:       assertEquals(48, Node.DIRECTIVES);
621:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
622:       assertEquals(4095, Node.COLUMN_MASK);
623:       assertEquals(40, Node.ORIGINALNAME_PROP);
624:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
625:       assertEquals(53, Node.INPUT_ID);
626:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
627:       assertEquals(52, Node.LENGTH);
628:       assertEquals(36, Node.QUOTED_PROP);
629:       assertEquals(57, Node.REFLECTED_OBJECT);
630:       assertEquals(57, Node.LAST_PROP);
631:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
632:       assertEquals(15, Node.NO_SIDE_EFFECTS);
633:       assertEquals(55, Node.INFERRED_FUNCTION);
634:       assertEquals(39, Node.EMPTY_BLOCK);
635:       assertEquals(29, Node.JSDOC_INFO_PROP);
636:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
637:       assertEquals(37, Node.OPT_ARG_NAME);
638:       assertEquals(2, Node.POST_FLAG);
639:       assertEquals(32, Node.INCRDECR_PROP);
640:       assertEquals(56, Node.CHANGE_TIME);
641:       assertEquals(51, Node.STATIC_SOURCE_FILE);
642:       assertEquals(47, Node.IS_DISPATCHER);
643:       assertEquals(12, Node.COLUMN_BITS);
644:       assertEquals(46, Node.IS_NAMESPACE);
645:       assertEquals(30, Node.VAR_ARGS_NAME);
646:       assertEquals(49, Node.DIRECT_EVAL);
647:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
648:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
649:       assertEquals(43, Node.IS_CONSTANT_NAME);
650:       assertEquals(54, Node.SLASH_V);
651:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
652:       assertEquals(1, Node.DECR_FLAG);
653:       assertEquals(50, Node.FREE_CALL);
654:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
655:       
656:       Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
657:       assertFalse(node0.equals((Object)node1));
658:       assertNotNull(node_AncestorIterable0);
659:       assertFalse(node0.isCatch());
660:       assertEquals(0, node0.getChildCount());
661:       assertEquals(80, node0.getCharno());
662:       assertFalse(node0.isSetterDef());
663:       assertFalse(node0.isFunction());
664:       assertEquals(327760, node0.getSourcePosition());
665:       assertFalse(node0.isDefaultCase());
666:       assertFalse(node0.isRegExp());
667:       assertFalse(node0.isTry());
668:       assertFalse(node0.isName());
669:       assertFalse(node0.isEmpty());
670:       assertFalse(node0.isAdd());
671:       assertFalse(node0.isCall());
672:       assertFalse(node0.isNE());
673:       assertFalse(node0.isDelProp());
674:       assertFalse(node0.isVoid());
675:       assertFalse(node0.isIf());
676:       assertFalse(node0.isNull());
677:       assertFalse(node0.isTrue());
678:       assertFalse(node0.hasMoreThanOneChild());
679:       assertFalse(node0.isDo());
680:       assertFalse(node0.isCase());
681:       assertEquals(80, node0.getType());
682:       assertFalse(node0.isNew());
683:       assertFalse(node0.isLabel());
684:       assertFalse(node0.isAssignAdd());
685:       assertFalse(node0.isHook());
686:       assertFalse(node0.isFor());
687:       assertFalse(node0.isBlock());
688:       assertFalse(node0.isVar());
689:       assertFalse(node0.isArrayLit());
690:       assertFalse(node0.hasOneChild());
691:       assertFalse(node0.isLabelName());
692:       assertFalse(node0.isSwitch());
693:       assertFalse(node0.isParamList());
694:       assertFalse(node0.isNumber());
695:       assertFalse(node0.isGetterDef());
696:       assertFalse(node0.isStringKey());
697:       assertFalse(node0.isAnd());
698:       assertFalse(node0.isNot());
699:       assertFalse(node0.isObjectLit());
700:       assertFalse(node0.isWith());
701:       assertFalse(node0.isInstanceOf());
702:       assertFalse(node0.isGetProp());
703:       assertFalse(node0.isScript());
704:       assertFalse(node0.isThis());
705:       assertFalse(node0.isComma());
706:       assertFalse(node0.isThrow());
707:       assertFalse(node0.isAssign());
708:       assertEquals(80, node0.getLineno());
709:       assertFalse(node0.isBreak());
710:       assertFalse(node0.isGetElem());
711:       assertFalse(node0.isExprResult());
712:       assertFalse(node0.isOr());
713:       assertFalse(node0.isContinue());
714:       assertFalse(node0.isString());
715:       assertFalse(node0.isIn());
716:       assertFalse(node0.isInc());
717:       assertFalse(node0.isDec());
718:       assertFalse(node0.isTypeOf());
719:       assertFalse(node0.isReturn());
720:       assertFalse(node0.isWhile());
721:       assertFalse(node0.hasChildren());
722:       assertFalse(node0.isCast());
723:       assertFalse(node0.isFalse());
724:       assertFalse(node0.isDebugger());
725:       assertEquals(4095, Node.COLUMN_MASK);
726:       assertEquals(55, Node.INFERRED_FUNCTION);
727:       assertEquals(36, Node.QUOTED_PROP);
728:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
729:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
730:       assertEquals(8, Node.FLAG_NO_THROWS);
731:       assertEquals(53, Node.INPUT_ID);
732:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
733:       assertEquals(39, Node.EMPTY_BLOCK);
734:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
735:       assertEquals(57, Node.REFLECTED_OBJECT);
736:       assertEquals(52, Node.LENGTH);
737:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
738:       assertEquals(56, Node.CHANGE_TIME);
739:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
740:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
741:       assertEquals(48, Node.DIRECTIVES);
742:       assertEquals(49, Node.DIRECT_EVAL);
743:       assertEquals(37, Node.OPT_ARG_NAME);
744:       assertEquals(51, Node.STATIC_SOURCE_FILE);
745:       assertEquals(12, Node.COLUMN_BITS);
746:       assertEquals(32, Node.INCRDECR_PROP);
747:       assertEquals(30, Node.VAR_ARGS_NAME);
748:       assertEquals(46, Node.IS_NAMESPACE);
749:       assertEquals(57, Node.LAST_PROP);
750:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
751:       assertEquals(29, Node.JSDOC_INFO_PROP);
752:       assertEquals(1, Node.DECR_FLAG);
753:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
754:       assertEquals(15, Node.NO_SIDE_EFFECTS);
755:       assertEquals(50, Node.FREE_CALL);
756:       assertEquals(54, Node.SLASH_V);
757:       assertEquals(47, Node.IS_DISPATCHER);
758:       assertEquals(43, Node.IS_CONSTANT_NAME);
759:       assertEquals(2, Node.POST_FLAG);
760:       assertEquals(40, Node.ORIGINALNAME_PROP);
761:       
762:       byte[] byteArray0 = new byte[0];
763:       boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
764:       assertEquals(0, byteArray0.length);
765:       assertFalse(boolean2 == boolean0);
766:       assertTrue(boolean2 == boolean1);
767:       assertArrayEquals(new byte[] {}, byteArray0);
768:       assertFalse(boolean2);
769:       
770:       Node node2 = new Node((-428), 57, 2372);
771:       assertFalse(node2.equals((Object)node0));
772:       assertFalse(node2.equals((Object)node1));
773:       assertNotNull(node2);
774:       assertFalse(node2.isThis());
775:       assertFalse(node2.isComma());
776:       assertFalse(node2.isGetProp());
777:       assertFalse(node2.isBreak());
778:       assertFalse(node2.isFalse());
779:       assertFalse(node2.isInstanceOf());
780:       assertFalse(node2.isHook());
781:       assertFalse(node2.isThrow());
782:       assertEquals(235844, node2.getSourcePosition());
783:       assertFalse(node2.isSwitch());
784:       assertFalse(node2.isScript());
785:       assertFalse(node2.isNot());
786:       assertFalse(node2.isString());
787:       assertFalse(node2.isCast());
788:       assertFalse(node2.isObjectLit());
789:       assertFalse(node2.isLabelName());
790:       assertFalse(node2.isAnd());
791:       assertFalse(node2.isNE());
792:       assertEquals((-428), node2.getType());
793:       assertFalse(node2.isGetterDef());
794:       assertFalse(node2.isNumber());
795:       assertFalse(node2.isIn());
796:       assertFalse(node2.hasMoreThanOneChild());
797:       assertFalse(node2.hasOneChild());
798:       assertFalse(node2.isCase());
799:       assertFalse(node2.isFor());
800:       assertFalse(node2.isTry());
801:       assertFalse(node2.isInc());
802:       assertFalse(node2.isRegExp());
803:       assertFalse(node2.isBlock());
804:       assertFalse(node2.isWith());
805:       assertFalse(node2.isCatch());
806:       assertEquals(57, node2.getLineno());
807:       assertFalse(node2.isIf());
808:       assertFalse(node2.isParamList());
809:       assertFalse(node2.isSetterDef());
810:       assertFalse(node2.isNull());
811:       assertFalse(node2.isVar());
812:       assertEquals(0, node2.getChildCount());
813:       assertFalse(node2.isDefaultCase());
814:       assertFalse(node2.isFunction());
815:       assertFalse(node2.isDebugger());
816:       assertFalse(node2.isContinue());
817:       assertFalse(node2.isArrayLit());
818:       assertFalse(node2.isStringKey());
819:       assertFalse(node2.isTypeOf());
820:       assertFalse(node2.isDec());
821:       assertFalse(node2.isLabel());
822:       assertFalse(node2.hasChildren());
823:       assertFalse(node2.isEmpty());
824:       assertFalse(node2.isOr());
825:       assertFalse(node2.isAssign());
826:       assertFalse(node2.isWhile());
827:       assertFalse(node2.isReturn());
828:       assertFalse(node2.isDo());
829:       assertFalse(node2.isAssignAdd());
830:       assertFalse(node2.isExprResult());
831:       assertFalse(node2.isTrue());
832:       assertFalse(node2.isVoid());
833:       assertFalse(node2.isNew());
834:       assertFalse(node2.isAdd());
835:       assertFalse(node2.isCall());
836:       assertFalse(node2.isGetElem());
837:       assertFalse(node2.isDelProp());
838:       assertFalse(node2.isName());
839:       assertEquals(2372, node2.getCharno());
840:       assertEquals(8, Node.FLAG_NO_THROWS);
841:       assertEquals(39, Node.EMPTY_BLOCK);
842:       assertEquals(48, Node.DIRECTIVES);
843:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
844:       assertEquals(57, Node.REFLECTED_OBJECT);
845:       assertEquals(50, Node.FREE_CALL);
846:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
847:       assertEquals(52, Node.LENGTH);
848:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
849:       assertEquals(55, Node.INFERRED_FUNCTION);
850:       assertEquals(43, Node.IS_CONSTANT_NAME);
851:       assertEquals(15, Node.NO_SIDE_EFFECTS);
852:       assertEquals(57, Node.LAST_PROP);
853:       assertEquals(30, Node.VAR_ARGS_NAME);
854:       assertEquals(54, Node.SLASH_V);
855:       assertEquals(40, Node.ORIGINALNAME_PROP);
856:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
857:       assertEquals(47, Node.IS_DISPATCHER);
858:       assertEquals(37, Node.OPT_ARG_NAME);
859:       assertEquals(2, Node.POST_FLAG);
860:       assertEquals(46, Node.IS_NAMESPACE);
861:       assertEquals(56, Node.CHANGE_TIME);
862:       assertEquals(51, Node.STATIC_SOURCE_FILE);
863:       assertEquals(32, Node.INCRDECR_PROP);
864:       assertEquals(1, Node.DECR_FLAG);
865:       assertEquals(29, Node.JSDOC_INFO_PROP);
866:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
867:       assertEquals(53, Node.INPUT_ID);
868:       assertEquals(36, Node.QUOTED_PROP);
869:       assertEquals(49, Node.DIRECT_EVAL);
870:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
871:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
872:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
873:       assertEquals(12, Node.COLUMN_BITS);
874:       assertEquals(4095, Node.COLUMN_MASK);
875:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
876:       
877:       int int0 = node1.getIndexOfChild(node2);
878:       assertNotSame(node0, node1);
879:       assertNotSame(node0, node2);
880:       assertNotSame(node1, node2);
881:       assertNotSame(node1, node0);
882:       assertNotSame(node2, node0);
883:       assertNotSame(node2, node1);
884:       assertFalse(node0.equals((Object)node1));
885:       assertFalse(node0.equals((Object)node2));
886:       assertFalse(node1.equals((Object)node2));
887:       assertFalse(node1.equals((Object)node0));
888:       assertFalse(node2.equals((Object)node0));
889:       assertFalse(node2.equals((Object)node1));
890:       assertEquals((-1), int0);
891:       assertFalse(node0.isCatch());
892:       assertEquals(0, node0.getChildCount());
893:       assertEquals(80, node0.getCharno());
894:       assertFalse(node0.isSetterDef());
895:       assertFalse(node0.isFunction());
896:       assertEquals(327760, node0.getSourcePosition());
897:       assertFalse(node0.isDefaultCase());
898:       assertFalse(node0.isRegExp());
899:       assertFalse(node0.isTry());
900:       assertFalse(node0.isName());
901:       assertFalse(node0.isEmpty());
902:       assertFalse(node0.isAdd());
903:       assertFalse(node0.isCall());
904:       assertFalse(node0.isNE());
905:       assertFalse(node0.isDelProp());
906:       assertFalse(node0.isVoid());
907:       assertFalse(node0.isIf());
908:       assertFalse(node0.isNull());
909:       assertFalse(node0.isTrue());
910:       assertFalse(node0.hasMoreThanOneChild());
911:       assertFalse(node0.isDo());
912:       assertFalse(node0.isCase());
913:       assertEquals(80, node0.getType());
914:       assertFalse(node0.isNew());
915:       assertFalse(node0.isLabel());
916:       assertFalse(node0.isAssignAdd());
917:       assertFalse(node0.isHook());
918:       assertFalse(node0.isFor());
919:       assertFalse(node0.isBlock());
920:       assertFalse(node0.isVar());
921:       assertFalse(node0.isArrayLit());
922:       assertFalse(node0.hasOneChild());
923:       assertFalse(node0.isLabelName());
924:       assertFalse(node0.isSwitch());
925:       assertFalse(node0.isParamList());
926:       assertFalse(node0.isNumber());
927:       assertFalse(node0.isGetterDef());
928:       assertFalse(node0.isStringKey());
929:       assertFalse(node0.isAnd());
930:       assertFalse(node0.isNot());
931:       assertFalse(node0.isObjectLit());
932:       assertFalse(node0.isWith());
933:       assertFalse(node0.isInstanceOf());
934:       assertFalse(node0.isGetProp());
935:       assertFalse(node0.isScript());
936:       assertFalse(node0.isThis());
937:       assertFalse(node0.isComma());
938:       assertFalse(node0.isThrow());
939:       assertFalse(node0.isAssign());
940:       assertEquals(80, node0.getLineno());
941:       assertFalse(node0.isBreak());
942:       assertFalse(node0.isGetElem());
943:       assertFalse(node0.isExprResult());
944:       assertFalse(node0.isOr());
945:       assertFalse(node0.isContinue());
946:       assertFalse(node0.isString());
947:       assertFalse(node0.isIn());
948:       assertFalse(node0.isInc());
949:       assertFalse(node0.isDec());
950:       assertFalse(node0.isTypeOf());
951:       assertFalse(node0.isReturn());
952:       assertFalse(node0.isWhile());
953:       assertFalse(node0.hasChildren());
954:       assertFalse(node0.isCast());
955:       assertFalse(node0.isFalse());
956:       assertFalse(node0.isDebugger());
957:       assertFalse(node1.isCatch());
958:       assertFalse(node1.isSetterDef());
959:       assertFalse(node1.isName());
960:       assertFalse(node1.isNull());
961:       assertFalse(node1.isTrue());
962:       assertFalse(node1.isStringKey());
963:       assertFalse(node1.isParamList());
964:       assertFalse(node1.isAdd());
965:       assertFalse(node1.isArrayLit());
966:       assertFalse(node1.isNew());
967:       assertFalse(node1.isFunction());
968:       assertFalse(node1.isEmpty());
969:       assertFalse(node1.isDo());
970:       assertFalse(node1.isVar());
971:       assertFalse(node1.isDefaultCase());
972:       assertEquals(315429, node1.getSourcePosition());
973:       assertFalse(node1.isLabel());
974:       assertTrue(node1.hasChildren());
975:       assertEquals(1, node1.getChildCount());
976:       assertFalse(node1.hasMoreThanOneChild());
977:       assertFalse(node1.isNumber());
978:       assertFalse(node1.isIn());
979:       assertFalse(node1.isLabelName());
980:       assertFalse(node1.isGetterDef());
981:       assertFalse(node1.isSwitch());
982:       assertFalse(node1.isNE());
983:       assertFalse(node1.isIf());
984:       assertFalse(node1.isTry());
985:       assertFalse(node1.isBlock());
986:       assertFalse(node1.isScript());
987:       assertFalse(node1.isRegExp());
988:       assertFalse(node1.isWith());
989:       assertFalse(node1.isFor());
990:       assertFalse(node1.isCase());
991:       assertEquals(77, node1.getLineno());
992:       assertFalse(node1.isThis());
993:       assertFalse(node1.isHook());
994:       assertFalse(node1.isGetProp());
995:       assertFalse(node1.isComma());
996:       assertFalse(node1.isObjectLit());
997:       assertFalse(node1.isInstanceOf());
998:       assertEquals(37, node1.getCharno());
999:       assertFalse(node1.isNot());
1000:       assertFalse(node1.isBreak());
1001:       assertFalse(node1.isAnd());
1002:       assertFalse(node1.isCast());
1003:       assertFalse(node1.isInc());
1004:       assertFalse(node1.isFalse());
1005:       assertFalse(node1.isThrow());
1006:       assertFalse(node1.isOr());
1007:       assertFalse(node1.isAssignAdd());
1008:       assertFalse(node1.isReturn());
1009:       assertFalse(node1.isTypeOf());
1010:       assertFalse(node1.isContinue());
1011:       assertFalse(node1.isDelProp());
1012:       assertFalse(node1.isGetElem());
1013:       assertEquals(29, node1.getType());
1014:       assertFalse(node1.isVoid());
1015:       assertFalse(node1.isDebugger());
1016:       assertFalse(node1.isExprResult());
1017:       assertFalse(node1.isCall());
1018:       assertFalse(node1.isString());
1019:       assertFalse(node1.isAssign());
1020:       assertTrue(node1.hasOneChild());
1021:       assertFalse(node1.isDec());
1022:       assertFalse(node1.isWhile());
1023:       assertFalse(node2.isThis());
1024:       assertFalse(node2.isComma());
1025:       assertFalse(node2.isGetProp());
1026:       assertFalse(node2.isBreak());
1027:       assertFalse(node2.isFalse());
1028:       assertFalse(node2.isInstanceOf());
1029:       assertFalse(node2.isHook());
1030:       assertFalse(node2.isThrow());
1031:       assertEquals(235844, node2.getSourcePosition());
1032:       assertFalse(node2.isSwitch());
1033:       assertFalse(node2.isScript());
1034:       assertFalse(node2.isNot());
1035:       assertFalse(node2.isString());
1036:       assertFalse(node2.isCast());
1037:       assertFalse(node2.isObjectLit());
1038:       assertFalse(node2.isLabelName());
1039:       assertFalse(node2.isAnd());
1040:       assertFalse(node2.isNE());
1041:       assertEquals((-428), node2.getType());
1042:       assertFalse(node2.isGetterDef());
1043:       assertFalse(node2.isNumber());
1044:       assertFalse(node2.isIn());
1045:       assertFalse(node2.hasMoreThanOneChild());
1046:       assertFalse(node2.hasOneChild());
1047:       assertFalse(node2.isCase());
1048:       assertFalse(node2.isFor());
1049:       assertFalse(node2.isTry());
1050:       assertFalse(node2.isInc());
1051:       assertFalse(node2.isRegExp());
1052:       assertFalse(node2.isBlock());
1053:       assertFalse(node2.isWith());
1054:       assertFalse(node2.isCatch());
1055:       assertEquals(57, node2.getLineno());
1056:       assertFalse(node2.isIf());
1057:       assertFalse(node2.isParamList());
1058:       assertFalse(node2.isSetterDef());
1059:       assertFalse(node2.isNull());
1060:       assertFalse(node2.isVar());
1061:       assertEquals(0, node2.getChildCount());
1062:       assertFalse(node2.isDefaultCase());
1063:       assertFalse(node2.isFunction());
1064:       assertFalse(node2.isDebugger());
1065:       assertFalse(node2.isContinue());
1066:       assertFalse(node2.isArrayLit());
1067:       assertFalse(node2.isStringKey());
1068:       assertFalse(node2.isTypeOf());
1069:       assertFalse(node2.isDec());
1070:       assertFalse(node2.isLabel());
1071:       assertFalse(node2.hasChildren());
1072:       assertFalse(node2.isEmpty());
1073:       assertFalse(node2.isOr());
1074:       assertFalse(node2.isAssign());
1075:       assertFalse(node2.isWhile());
1076:       assertFalse(node2.isReturn());
1077:       assertFalse(node2.isDo());
1078:       assertFalse(node2.isAssignAdd());
1079:       assertFalse(node2.isExprResult());
1080:       assertFalse(node2.isTrue());
1081:       assertFalse(node2.isVoid());
1082:       assertFalse(node2.isNew());
1083:       assertFalse(node2.isAdd());
1084:       assertFalse(node2.isCall());
1085:       assertFalse(node2.isGetElem());
1086:       assertFalse(node2.isDelProp());
1087:       assertFalse(node2.isName());
1088:       assertEquals(2372, node2.getCharno());
1089:       assertEquals(4095, Node.COLUMN_MASK);
1090:       assertEquals(55, Node.INFERRED_FUNCTION);
1091:       assertEquals(36, Node.QUOTED_PROP);
1092:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1093:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1094:       assertEquals(8, Node.FLAG_NO_THROWS);
1095:       assertEquals(53, Node.INPUT_ID);
1096:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1097:       assertEquals(39, Node.EMPTY_BLOCK);
1098:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1099:       assertEquals(57, Node.REFLECTED_OBJECT);
1100:       assertEquals(52, Node.LENGTH);
1101:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1102:       assertEquals(56, Node.CHANGE_TIME);
1103:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1104:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1105:       assertEquals(48, Node.DIRECTIVES);
1106:       assertEquals(49, Node.DIRECT_EVAL);
1107:       assertEquals(37, Node.OPT_ARG_NAME);
1108:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1109:       assertEquals(12, Node.COLUMN_BITS);
1110:       assertEquals(32, Node.INCRDECR_PROP);
1111:       assertEquals(30, Node.VAR_ARGS_NAME);
1112:       assertEquals(46, Node.IS_NAMESPACE);
1113:       assertEquals(57, Node.LAST_PROP);
1114:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1115:       assertEquals(29, Node.JSDOC_INFO_PROP);
1116:       assertEquals(1, Node.DECR_FLAG);
1117:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1118:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1119:       assertEquals(50, Node.FREE_CALL);
1120:       assertEquals(54, Node.SLASH_V);
1121:       assertEquals(47, Node.IS_DISPATCHER);
1122:       assertEquals(43, Node.IS_CONSTANT_NAME);
1123:       assertEquals(2, Node.POST_FLAG);
1124:       assertEquals(40, Node.ORIGINALNAME_PROP);
1125:       assertEquals(8, Node.FLAG_NO_THROWS);
1126:       assertEquals(48, Node.DIRECTIVES);
1127:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1128:       assertEquals(4095, Node.COLUMN_MASK);
1129:       assertEquals(40, Node.ORIGINALNAME_PROP);
1130:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1131:       assertEquals(53, Node.INPUT_ID);
1132:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1133:       assertEquals(52, Node.LENGTH);
1134:       assertEquals(36, Node.QUOTED_PROP);
1135:       assertEquals(57, Node.REFLECTED_OBJECT);
1136:       assertEquals(57, Node.LAST_PROP);
1137:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1138:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1139:       assertEquals(55, Node.INFERRED_FUNCTION);
1140:       assertEquals(39, Node.EMPTY_BLOCK);
1141:       assertEquals(29, Node.JSDOC_INFO_PROP);
1142:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1143:       assertEquals(37, Node.OPT_ARG_NAME);
1144:       assertEquals(2, Node.POST_FLAG);
1145:       assertEquals(32, Node.INCRDECR_PROP);
1146:       assertEquals(56, Node.CHANGE_TIME);
1147:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1148:       assertEquals(47, Node.IS_DISPATCHER);
1149:       assertEquals(12, Node.COLUMN_BITS);
1150:       assertEquals(46, Node.IS_NAMESPACE);
1151:       assertEquals(30, Node.VAR_ARGS_NAME);
1152:       assertEquals(49, Node.DIRECT_EVAL);
1153:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1154:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1155:       assertEquals(43, Node.IS_CONSTANT_NAME);
1156:       assertEquals(54, Node.SLASH_V);
1157:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1158:       assertEquals(1, Node.DECR_FLAG);
1159:       assertEquals(50, Node.FREE_CALL);
1160:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1161:       assertEquals(8, Node.FLAG_NO_THROWS);
1162:       assertEquals(39, Node.EMPTY_BLOCK);
1163:       assertEquals(48, Node.DIRECTIVES);
1164:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1165:       assertEquals(57, Node.REFLECTED_OBJECT);
1166:       assertEquals(50, Node.FREE_CALL);
1167:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1168:       assertEquals(52, Node.LENGTH);
1169:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1170:       assertEquals(55, Node.INFERRED_FUNCTION);
1171:       assertEquals(43, Node.IS_CONSTANT_NAME);
1172:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1173:       assertEquals(57, Node.LAST_PROP);
1174:       assertEquals(30, Node.VAR_ARGS_NAME);
1175:       assertEquals(54, Node.SLASH_V);
1176:       assertEquals(40, Node.ORIGINALNAME_PROP);
1177:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1178:       assertEquals(47, Node.IS_DISPATCHER);
1179:       assertEquals(37, Node.OPT_ARG_NAME);
1180:       assertEquals(2, Node.POST_FLAG);
1181:       assertEquals(46, Node.IS_NAMESPACE);
1182:       assertEquals(56, Node.CHANGE_TIME);
1183:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1184:       assertEquals(32, Node.INCRDECR_PROP);
1185:       assertEquals(1, Node.DECR_FLAG);
1186:       assertEquals(29, Node.JSDOC_INFO_PROP);
1187:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1188:       assertEquals(53, Node.INPUT_ID);
1189:       assertEquals(36, Node.QUOTED_PROP);
1190:       assertEquals(49, Node.DIRECT_EVAL);
1191:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1192:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1193:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1194:       assertEquals(12, Node.COLUMN_BITS);
1195:       assertEquals(4095, Node.COLUMN_MASK);
1196:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1197:   }
1198: }
RegularFileObject[/tmp/EvoSuite_156_1628159822327/com/google/javascript/rhino/Node_156_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:37:02 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_156_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_156_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.common.collect.Sets$1",
101:       "com.google.javascript.rhino.SourcePosition",
102:       "com.google.common.collect.ImmutableMapKeySet",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.javascript.rhino.Node$AncestorIterable$1",
115:       "com.google.common.collect.Iterators$12",
116:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
117:       "com.google.common.collect.Iterators$11",
118:       "com.google.javascript.rhino.jstype.JSType$1",
119:       "com.google.common.collect.EmptyImmutableBiMap",
120:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
121:       "com.google.common.base.Predicate",
122:       "com.google.javascript.rhino.jstype.JSType$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.common.collect.SingletonImmutableSet",
135:       "com.google.javascript.rhino.jstype.NamedType",
136:       "com.google.common.collect.Iterators$13",
137:       "com.google.javascript.rhino.InputId",
138:       "com.google.common.collect.ImmutableList$SerializedForm",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
163:       "com.google.common.base.Joiner$MapJoiner",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.javascript.rhino.Node$AncestorIterable",
185:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
186:       "com.google.common.collect.Lists$RandomAccessListWrapper",
187:       "com.google.common.collect.ImmutableEnumSet",
188:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
189:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
190:       "com.google.javascript.rhino.jstype.EnumElementType",
191:       "com.google.javascript.rhino.jstype.UnionType",
192:       "com.google.common.base.Objects",
193:       "com.google.javascript.rhino.Node$NumberNode",
194:       "com.google.common.collect.SingletonImmutableList",
195:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
196:       "com.google.common.collect.ImmutableCollection$Builder",
197:       "com.google.javascript.rhino.jstype.StaticSlot",
198:       "com.google.common.collect.Iterators$6",
199:       "com.google.common.collect.BiMap",
200:       "com.google.common.collect.Iterators$7",
201:       "com.google.common.collect.AbstractSetMultimap",
202:       "com.google.common.base.Function",
203:       "com.google.common.collect.ImmutableSet",
204:       "com.google.common.collect.Lists$AbstractListWrapper",
205:       "com.google.common.collect.ImmutableMap",
206:       "com.google.common.collect.AbstractIndexedListIterator",
207:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
208:       "com.google.common.collect.Maps$1",
209:       "com.google.javascript.rhino.jstype.EnumType",
210:       "com.google.common.collect.Iterators$1",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$2",
213:       "com.google.javascript.rhino.jstype.NamespaceType",
214:       "com.google.common.collect.Iterators$3",
215:       "com.google.common.collect.Sets",
216:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
217:       "com.google.javascript.rhino.Node$ObjectPropListItem",
218:       "com.google.common.collect.Lists$StringAsImmutableList",
219:       "com.google.common.collect.Lists$2",
220:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
221:       "com.google.common.collect.ImmutableList$Builder",
222:       "com.google.common.collect.Lists$1",
223:       "com.google.javascript.rhino.jstype.StaticReference",
224:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
225:       "com.google.common.collect.Multiset",
226:       "com.google.common.collect.AbstractMultimap",
227:       "com.google.common.collect.Multimap",
228:       "com.google.common.collect.Iterators",
229:       "com.google.common.collect.EmptyImmutableSet",
230:       "com.google.common.collect.Maps$ImprovedAbstractMap",
231:       "com.google.common.collect.ImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
233:       "com.google.common.collect.ImmutableList",
234:       "com.google.common.collect.SingletonImmutableBiMap",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
236:       "com.google.javascript.rhino.jstype.StringType",
237:       "com.google.javascript.rhino.Node$AbstractPropListItem",
238:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
239:       "com.google.javascript.rhino.jstype.TemplatizedType",
240:       "com.google.javascript.rhino.jstype.Visitor",
241:       "com.google.javascript.rhino.jstype.NoResolvedType",
242:       "com.google.javascript.rhino.jstype.JSTypeNative",
243:       "com.google.javascript.rhino.jstype.AllType",
244:       "com.google.common.collect.Maps",
245:       "com.google.common.collect.SetMultimap",
246:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
247:       "com.google.common.collect.Maps$EntryTransformer",
248:       "com.google.javascript.rhino.JSTypeExpression",
249:       "com.google.common.collect.Iterators$MergingIterator"
250:     );
251:   } 
252: 
253:   private static void resetClasses() {
254:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_156_tmp__ESTest_scaffolding.class.getClassLoader()); 
255: 
256:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
257:       "com.google.javascript.rhino.Node",
258:       "com.google.javascript.rhino.Node$NumberNode",
259:       "com.google.javascript.rhino.Node$StringNode",
260:       "com.google.javascript.rhino.Node$AbstractPropListItem",
261:       "com.google.javascript.rhino.Node$ObjectPropListItem",
262:       "com.google.javascript.rhino.Node$IntPropListItem",
263:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
264:       "com.google.javascript.rhino.Node$AncestorIterable",
265:       "com.google.javascript.rhino.Node$NodeMismatch",
266:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
267:       "com.google.javascript.rhino.Node$SideEffectFlags",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Preconditions",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
301:       "com.google.javascript.rhino.jstype.JSType$1",
302:       "com.google.javascript.rhino.jstype.JSType",
303:       "com.google.javascript.rhino.jstype.ObjectType",
304:       "com.google.javascript.rhino.jstype.ProxyObjectType",
305:       "com.google.javascript.rhino.jstype.TemplateType",
306:       "com.google.javascript.rhino.jstype.ValueType",
307:       "com.google.javascript.rhino.jstype.BooleanType",
308:       "com.google.javascript.rhino.jstype.NullType",
309:       "com.google.javascript.rhino.jstype.NumberType",
310:       "com.google.javascript.rhino.jstype.StringType",
311:       "com.google.javascript.rhino.jstype.UnknownType",
312:       "com.google.javascript.rhino.jstype.VoidType",
313:       "com.google.javascript.rhino.jstype.AllType",
314:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
315:       "com.google.common.collect.ImmutableMap",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.collect.EmptyImmutableBiMap",
318:       "com.google.javascript.rhino.jstype.PropertyMap$1",
319:       "com.google.javascript.rhino.jstype.PropertyMap",
320:       "com.google.javascript.rhino.jstype.FunctionType",
321:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
322:       "com.google.javascript.rhino.Token",
323:       "com.google.javascript.rhino.jstype.ArrowType",
324:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
325:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
326:       "com.google.javascript.rhino.jstype.InstanceObjectType",
327:       "com.google.javascript.rhino.jstype.Property",
328:       "com.google.common.collect.Lists",
329:       "com.google.javascript.rhino.jstype.NoObjectType",
330:       "com.google.javascript.rhino.jstype.NoType",
331:       "com.google.javascript.rhino.jstype.NoResolvedType",
332:       "com.google.common.collect.SingletonImmutableList",
333:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
334:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
335:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
336:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
337:       "com.google.javascript.rhino.jstype.UnionType",
338:       "com.google.javascript.rhino.jstype.FunctionBuilder",
339:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.javascript.rhino.jstype.TernaryValue",
348:       "com.google.common.collect.Iterables",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
353:       "com.google.common.collect.Sets",
354:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
355:       "com.google.javascript.rhino.InputId",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
364:       "com.google.javascript.rhino.JSTypeExpression",
365:       "com.google.common.collect.Platform",
366:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
371:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.JSDocInfo$Marker",
374:       "com.google.common.collect.Iterators$12",
375:       "com.google.javascript.rhino.jstype.JSType$2",
376:       "com.google.common.collect.ImmutableList$1"
377:     );
378:   }
379: }

[MASTER] 10:37:02.528 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(80, 80, 80);
assertNotNull(node0);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertEquals(80, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertEquals(327760, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals(80, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isAssign());
assertEquals(80, node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertEquals(80, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertEquals(327760, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals(80, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isAssign());
assertEquals(80, node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node node1 = new Node(29, node0, node0, 77, 37);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertEquals(80, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertEquals(327760, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals(80, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isAssign());
assertEquals(80, node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isFunction());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertEquals(315429, node1.getSourcePosition());
assertFalse(node1.isLabel());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertEquals(77, node1.getLineno());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertEquals(37, node1.getCharno());
assertFalse(node1.isNot());
assertFalse(node1.isBreak());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertEquals(29, node1.getType());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isString());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

boolean boolean1 = node1.isNew();
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertEquals(80, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertEquals(327760, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals(80, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isAssign());
assertEquals(80, node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isFunction());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertEquals(315429, node1.getSourcePosition());
assertFalse(node1.isLabel());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertEquals(77, node1.getLineno());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertEquals(37, node1.getCharno());
assertFalse(node1.isNot());
assertFalse(node1.isBreak());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertEquals(29, node1.getType());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isString());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
assertFalse(node0.equals((Object)node1));
assertNotNull(node_AncestorIterable0);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertEquals(80, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertEquals(327760, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals(80, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isAssign());
assertEquals(80, node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

byte[] byteArray0 = new byte[0];
boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
assertEquals(0, byteArray0.length);
assertFalse(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertArrayEquals(new byte[] {}, byteArray0);
assertFalse(boolean2);

Node node2 = new Node((-428), 57, 2372);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isFalse());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertEquals(235844, node2.getSourcePosition());
assertFalse(node2.isSwitch());
assertFalse(node2.isScript());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isCast());
assertFalse(node2.isObjectLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isNE());
assertEquals((-428), node2.getType());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isInc());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertEquals(57, node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isContinue());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.hasChildren());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertFalse(node2.isAssign());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertEquals(2372, node2.getCharno());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

int int0 = node1.getIndexOfChild(node2);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node2, node0);
assertNotSame(node2, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals((-1), int0);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertEquals(80, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertEquals(327760, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals(80, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isAssign());
assertEquals(80, node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isFunction());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertEquals(315429, node1.getSourcePosition());
assertFalse(node1.isLabel());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertEquals(77, node1.getLineno());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertEquals(37, node1.getCharno());
assertFalse(node1.isNot());
assertFalse(node1.isBreak());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertEquals(29, node1.getType());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isString());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isFalse());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertEquals(235844, node2.getSourcePosition());
assertFalse(node2.isSwitch());
assertFalse(node2.isScript());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isCast());
assertFalse(node2.isObjectLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isNE());
assertEquals((-428), node2.getType());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isInc());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertEquals(57, node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isContinue());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.hasChildren());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertFalse(node2.isAssign());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertEquals(2372, node2.getCharno());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);


[MASTER] 10:37:05.934 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_206_1628159825902/com/google/javascript/rhino/Node_206_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_206_1628159825902/com/google/javascript/rhino/Node_206_tmp__ESTest_scaffolding.java]]
[MASTER] 10:37:05.934 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:37:05.934 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:37:05.935 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 137
[MASTER] 10:37:05.935 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_206_1628159825902/com/google/javascript/rhino/Node_206_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:37:05 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.ErrorReporter;
12: import com.google.javascript.rhino.Node;
13: import com.google.javascript.rhino.jstype.BooleanLiteralSet;
14: import com.google.javascript.rhino.jstype.EnumElementType;
15: import com.google.javascript.rhino.jstype.EnumType;
16: import com.google.javascript.rhino.jstype.FunctionType;
17: import com.google.javascript.rhino.jstype.JSType;
18: import com.google.javascript.rhino.jstype.JSTypeRegistry;
19: import com.google.javascript.rhino.jstype.ObjectType;
20: import com.google.javascript.rhino.jstype.TemplateType;
21: import com.google.javascript.rhino.jstype.TemplatizedType;
22: import org.evosuite.runtime.EvoRunner;
23: import org.evosuite.runtime.EvoRunnerParameters;
24: import org.junit.runner.RunWith;
25: 
26: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
27: public class Node_206_tmp__ESTest extends Node_206_tmp__ESTest_scaffolding {
28: 
29:   @Test(timeout = 4000)
30:   public void test0()  throws Throwable  {
31:       Node node0 = new Node(0, 0, 0);
32:       assertNotNull(node0);
33:       assertEquals(0, node0.getType());
34:       assertFalse(node0.isSwitch());
35:       assertFalse(node0.isInc());
36:       assertFalse(node0.isFalse());
37:       assertFalse(node0.isThrow());
38:       assertFalse(node0.isThis());
39:       assertFalse(node0.isHook());
40:       assertFalse(node0.isComma());
41:       assertFalse(node0.isGetProp());
42:       assertFalse(node0.isCase());
43:       assertFalse(node0.isNot());
44:       assertFalse(node0.isAnd());
45:       assertFalse(node0.isString());
46:       assertFalse(node0.isGetterDef());
47:       assertFalse(node0.isObjectLit());
48:       assertFalse(node0.isTry());
49:       assertFalse(node0.isScript());
50:       assertFalse(node0.isCast());
51:       assertFalse(node0.hasOneChild());
52:       assertFalse(node0.isFor());
53:       assertFalse(node0.isWith());
54:       assertFalse(node0.isCatch());
55:       assertFalse(node0.isRegExp());
56:       assertFalse(node0.isFunction());
57:       assertFalse(node0.isIn());
58:       assertFalse(node0.isInstanceOf());
59:       assertFalse(node0.isSetterDef());
60:       assertFalse(node0.isIf());
61:       assertFalse(node0.isNE());
62:       assertEquals(0, node0.getCharno());
63:       assertFalse(node0.isAdd());
64:       assertFalse(node0.isBlock());
65:       assertFalse(node0.isCall());
66:       assertFalse(node0.isNew());
67:       assertFalse(node0.isDo());
68:       assertFalse(node0.isContinue());
69:       assertFalse(node0.isWhile());
70:       assertFalse(node0.isVar());
71:       assertFalse(node0.hasMoreThanOneChild());
72:       assertEquals(0, node0.getLineno());
73:       assertFalse(node0.isReturn());
74:       assertFalse(node0.isParamList());
75:       assertFalse(node0.isLabelName());
76:       assertFalse(node0.isStringKey());
77:       assertFalse(node0.isNumber());
78:       assertFalse(node0.isDebugger());
79:       assertFalse(node0.isArrayLit());
80:       assertFalse(node0.isExprResult());
81:       assertFalse(node0.isVoid());
82:       assertFalse(node0.isAssign());
83:       assertFalse(node0.isGetElem());
84:       assertFalse(node0.isDefaultCase());
85:       assertFalse(node0.isTypeOf());
86:       assertEquals(0, node0.getChildCount());
87:       assertFalse(node0.hasChildren());
88:       assertFalse(node0.isDec());
89:       assertFalse(node0.isOr());
90:       assertFalse(node0.isLabel());
91:       assertFalse(node0.isAssignAdd());
92:       assertFalse(node0.isDelProp());
93:       assertFalse(node0.isBreak());
94:       assertFalse(node0.isEmpty());
95:       assertFalse(node0.isName());
96:       assertFalse(node0.isNull());
97:       assertFalse(node0.isTrue());
98:       assertEquals(0, node0.getSourcePosition());
99:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
100:       assertEquals(54, Node.SLASH_V);
101:       assertEquals(57, Node.REFLECTED_OBJECT);
102:       assertEquals(30, Node.VAR_ARGS_NAME);
103:       assertEquals(52, Node.LENGTH);
104:       assertEquals(1, Node.DECR_FLAG);
105:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
106:       assertEquals(12, Node.COLUMN_BITS);
107:       assertEquals(15, Node.NO_SIDE_EFFECTS);
108:       assertEquals(57, Node.LAST_PROP);
109:       assertEquals(32, Node.INCRDECR_PROP);
110:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
111:       assertEquals(46, Node.IS_NAMESPACE);
112:       assertEquals(47, Node.IS_DISPATCHER);
113:       assertEquals(51, Node.STATIC_SOURCE_FILE);
114:       assertEquals(2, Node.POST_FLAG);
115:       assertEquals(50, Node.FREE_CALL);
116:       assertEquals(40, Node.ORIGINALNAME_PROP);
117:       assertEquals(43, Node.IS_CONSTANT_NAME);
118:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
119:       assertEquals(53, Node.INPUT_ID);
120:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
121:       assertEquals(36, Node.QUOTED_PROP);
122:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
123:       assertEquals(55, Node.INFERRED_FUNCTION);
124:       assertEquals(29, Node.JSDOC_INFO_PROP);
125:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
126:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
127:       assertEquals(48, Node.DIRECTIVES);
128:       assertEquals(37, Node.OPT_ARG_NAME);
129:       assertEquals(39, Node.EMPTY_BLOCK);
130:       assertEquals(4095, Node.COLUMN_MASK);
131:       assertEquals(8, Node.FLAG_NO_THROWS);
132:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
133:       assertEquals(56, Node.CHANGE_TIME);
134:       assertEquals(49, Node.DIRECT_EVAL);
135:       
136:       Iterable<Node> iterable0 = node0.children();
137:       assertFalse(iterable0.contains(node0));
138:       assertNotNull(iterable0);
139:       assertEquals(0, node0.getType());
140:       assertFalse(node0.isSwitch());
141:       assertFalse(node0.isInc());
142:       assertFalse(node0.isFalse());
143:       assertFalse(node0.isThrow());
144:       assertFalse(node0.isThis());
145:       assertFalse(node0.isHook());
146:       assertFalse(node0.isComma());
147:       assertFalse(node0.isGetProp());
148:       assertFalse(node0.isCase());
149:       assertFalse(node0.isNot());
150:       assertFalse(node0.isAnd());
151:       assertFalse(node0.isString());
152:       assertFalse(node0.isGetterDef());
153:       assertFalse(node0.isObjectLit());
154:       assertFalse(node0.isTry());
155:       assertFalse(node0.isScript());
156:       assertFalse(node0.isCast());
157:       assertFalse(node0.hasOneChild());
158:       assertFalse(node0.isFor());
159:       assertFalse(node0.isWith());
160:       assertFalse(node0.isCatch());
161:       assertFalse(node0.isRegExp());
162:       assertFalse(node0.isFunction());
163:       assertFalse(node0.isIn());
164:       assertFalse(node0.isInstanceOf());
165:       assertFalse(node0.isSetterDef());
166:       assertFalse(node0.isIf());
167:       assertFalse(node0.isNE());
168:       assertEquals(0, node0.getCharno());
169:       assertFalse(node0.isAdd());
170:       assertFalse(node0.isBlock());
171:       assertFalse(node0.isCall());
172:       assertFalse(node0.isNew());
173:       assertFalse(node0.isDo());
174:       assertFalse(node0.isContinue());
175:       assertFalse(node0.isWhile());
176:       assertFalse(node0.isVar());
177:       assertFalse(node0.hasMoreThanOneChild());
178:       assertEquals(0, node0.getLineno());
179:       assertFalse(node0.isReturn());
180:       assertFalse(node0.isParamList());
181:       assertFalse(node0.isLabelName());
182:       assertFalse(node0.isStringKey());
183:       assertFalse(node0.isNumber());
184:       assertFalse(node0.isDebugger());
185:       assertFalse(node0.isArrayLit());
186:       assertFalse(node0.isExprResult());
187:       assertFalse(node0.isVoid());
188:       assertFalse(node0.isAssign());
189:       assertFalse(node0.isGetElem());
190:       assertFalse(node0.isDefaultCase());
191:       assertFalse(node0.isTypeOf());
192:       assertEquals(0, node0.getChildCount());
193:       assertFalse(node0.hasChildren());
194:       assertFalse(node0.isDec());
195:       assertFalse(node0.isOr());
196:       assertFalse(node0.isLabel());
197:       assertFalse(node0.isAssignAdd());
198:       assertFalse(node0.isDelProp());
199:       assertFalse(node0.isBreak());
200:       assertFalse(node0.isEmpty());
201:       assertFalse(node0.isName());
202:       assertFalse(node0.isNull());
203:       assertFalse(node0.isTrue());
204:       assertEquals(0, node0.getSourcePosition());
205:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
206:       assertEquals(54, Node.SLASH_V);
207:       assertEquals(57, Node.REFLECTED_OBJECT);
208:       assertEquals(30, Node.VAR_ARGS_NAME);
209:       assertEquals(52, Node.LENGTH);
210:       assertEquals(1, Node.DECR_FLAG);
211:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
212:       assertEquals(12, Node.COLUMN_BITS);
213:       assertEquals(15, Node.NO_SIDE_EFFECTS);
214:       assertEquals(57, Node.LAST_PROP);
215:       assertEquals(32, Node.INCRDECR_PROP);
216:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
217:       assertEquals(46, Node.IS_NAMESPACE);
218:       assertEquals(47, Node.IS_DISPATCHER);
219:       assertEquals(51, Node.STATIC_SOURCE_FILE);
220:       assertEquals(2, Node.POST_FLAG);
221:       assertEquals(50, Node.FREE_CALL);
222:       assertEquals(40, Node.ORIGINALNAME_PROP);
223:       assertEquals(43, Node.IS_CONSTANT_NAME);
224:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
225:       assertEquals(53, Node.INPUT_ID);
226:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
227:       assertEquals(36, Node.QUOTED_PROP);
228:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
229:       assertEquals(55, Node.INFERRED_FUNCTION);
230:       assertEquals(29, Node.JSDOC_INFO_PROP);
231:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
232:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
233:       assertEquals(48, Node.DIRECTIVES);
234:       assertEquals(37, Node.OPT_ARG_NAME);
235:       assertEquals(39, Node.EMPTY_BLOCK);
236:       assertEquals(4095, Node.COLUMN_MASK);
237:       assertEquals(8, Node.FLAG_NO_THROWS);
238:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
239:       assertEquals(56, Node.CHANGE_TIME);
240:       assertEquals(49, Node.DIRECT_EVAL);
241:       
242:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
243:       assertNotNull(jSTypeRegistry0);
244:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
245:       
246:       ObjectType objectType0 = ObjectType.cast((JSType) null);
247:       assertNull(objectType0);
248:       
249:       boolean boolean0 = node0.isFor();
250:       assertFalse(boolean0);
251:       assertEquals(0, node0.getType());
252:       assertFalse(node0.isSwitch());
253:       assertFalse(node0.isInc());
254:       assertFalse(node0.isFalse());
255:       assertFalse(node0.isThrow());
256:       assertFalse(node0.isThis());
257:       assertFalse(node0.isHook());
258:       assertFalse(node0.isComma());
259:       assertFalse(node0.isGetProp());
260:       assertFalse(node0.isCase());
261:       assertFalse(node0.isNot());
262:       assertFalse(node0.isAnd());
263:       assertFalse(node0.isString());
264:       assertFalse(node0.isGetterDef());
265:       assertFalse(node0.isObjectLit());
266:       assertFalse(node0.isTry());
267:       assertFalse(node0.isScript());
268:       assertFalse(node0.isCast());
269:       assertFalse(node0.hasOneChild());
270:       assertFalse(node0.isFor());
271:       assertFalse(node0.isWith());
272:       assertFalse(node0.isCatch());
273:       assertFalse(node0.isRegExp());
274:       assertFalse(node0.isFunction());
275:       assertFalse(node0.isIn());
276:       assertFalse(node0.isInstanceOf());
277:       assertFalse(node0.isSetterDef());
278:       assertFalse(node0.isIf());
279:       assertFalse(node0.isNE());
280:       assertEquals(0, node0.getCharno());
281:       assertFalse(node0.isAdd());
282:       assertFalse(node0.isBlock());
283:       assertFalse(node0.isCall());
284:       assertFalse(node0.isNew());
285:       assertFalse(node0.isDo());
286:       assertFalse(node0.isContinue());
287:       assertFalse(node0.isWhile());
288:       assertFalse(node0.isVar());
289:       assertFalse(node0.hasMoreThanOneChild());
290:       assertEquals(0, node0.getLineno());
291:       assertFalse(node0.isReturn());
292:       assertFalse(node0.isParamList());
293:       assertFalse(node0.isLabelName());
294:       assertFalse(node0.isStringKey());
295:       assertFalse(node0.isNumber());
296:       assertFalse(node0.isDebugger());
297:       assertFalse(node0.isArrayLit());
298:       assertFalse(node0.isExprResult());
299:       assertFalse(node0.isVoid());
300:       assertFalse(node0.isAssign());
301:       assertFalse(node0.isGetElem());
302:       assertFalse(node0.isDefaultCase());
303:       assertFalse(node0.isTypeOf());
304:       assertEquals(0, node0.getChildCount());
305:       assertFalse(node0.hasChildren());
306:       assertFalse(node0.isDec());
307:       assertFalse(node0.isOr());
308:       assertFalse(node0.isLabel());
309:       assertFalse(node0.isAssignAdd());
310:       assertFalse(node0.isDelProp());
311:       assertFalse(node0.isBreak());
312:       assertFalse(node0.isEmpty());
313:       assertFalse(node0.isName());
314:       assertFalse(node0.isNull());
315:       assertFalse(node0.isTrue());
316:       assertEquals(0, node0.getSourcePosition());
317:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
318:       assertEquals(54, Node.SLASH_V);
319:       assertEquals(57, Node.REFLECTED_OBJECT);
320:       assertEquals(30, Node.VAR_ARGS_NAME);
321:       assertEquals(52, Node.LENGTH);
322:       assertEquals(1, Node.DECR_FLAG);
323:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
324:       assertEquals(12, Node.COLUMN_BITS);
325:       assertEquals(15, Node.NO_SIDE_EFFECTS);
326:       assertEquals(57, Node.LAST_PROP);
327:       assertEquals(32, Node.INCRDECR_PROP);
328:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
329:       assertEquals(46, Node.IS_NAMESPACE);
330:       assertEquals(47, Node.IS_DISPATCHER);
331:       assertEquals(51, Node.STATIC_SOURCE_FILE);
332:       assertEquals(2, Node.POST_FLAG);
333:       assertEquals(50, Node.FREE_CALL);
334:       assertEquals(40, Node.ORIGINALNAME_PROP);
335:       assertEquals(43, Node.IS_CONSTANT_NAME);
336:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
337:       assertEquals(53, Node.INPUT_ID);
338:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
339:       assertEquals(36, Node.QUOTED_PROP);
340:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
341:       assertEquals(55, Node.INFERRED_FUNCTION);
342:       assertEquals(29, Node.JSDOC_INFO_PROP);
343:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
344:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
345:       assertEquals(48, Node.DIRECTIVES);
346:       assertEquals(37, Node.OPT_ARG_NAME);
347:       assertEquals(39, Node.EMPTY_BLOCK);
348:       assertEquals(4095, Node.COLUMN_MASK);
349:       assertEquals(8, Node.FLAG_NO_THROWS);
350:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
351:       assertEquals(56, Node.CHANGE_TIME);
352:       assertEquals(49, Node.DIRECT_EVAL);
353:       
354:       TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
355:       assertNotNull(templateType0);
356:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
357:       assertEquals("Object#Key", templateType0.getReferenceName());
358:       assertFalse(templateType0.isResolved());
359:       assertTrue(templateType0.hasAnyTemplateTypesInternal());
360:       assertFalse(templateType0.isVoidType());
361:       assertFalse(templateType0.hasCachedValues());
362:       assertFalse(templateType0.isStringValueType());
363:       assertTrue(templateType0.isObject());
364:       assertFalse(templateType0.isNullType());
365:       assertTrue(templateType0.isTemplateType());
366:       assertFalse(templateType0.isBooleanValueType());
367:       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
368:       assertFalse(templateType0.isNumberValueType());
369:       assertFalse(templateType0.isFunctionPrototypeType());
370:       assertEquals(0, JSType.NOT_ENUMDECL);
371:       assertEquals(1, JSType.ENUMDECL);
372:       
373:       String string0 = templateType0.toString();
374:       assertNotNull(string0);
375:       assertEquals("Object#Key", string0);
376:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
377:       assertEquals("Object#Key", templateType0.getReferenceName());
378:       assertFalse(templateType0.isResolved());
379:       assertTrue(templateType0.hasAnyTemplateTypesInternal());
380:       assertFalse(templateType0.isVoidType());
381:       assertFalse(templateType0.hasCachedValues());
382:       assertFalse(templateType0.isStringValueType());
383:       assertTrue(templateType0.isObject());
384:       assertFalse(templateType0.isNullType());
385:       assertTrue(templateType0.isTemplateType());
386:       assertFalse(templateType0.isBooleanValueType());
387:       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
388:       assertFalse(templateType0.isNumberValueType());
389:       assertFalse(templateType0.isFunctionPrototypeType());
390:       assertEquals(0, JSType.NOT_ENUMDECL);
391:       assertEquals(1, JSType.ENUMDECL);
392:       
393:       // Undeclared exception!
394:       try { 
395:         JSType.toMaybeTemplatizedType((JSType) templateType0);
396:         fail("Expecting exception: NullPointerException");
397:       
398:       } catch(NullPointerException e) {
399:          //
400:          // no message in exception (getMessage() returned null)
401:          //
402:          verifyException("com.google.javascript.rhino.jstype.ProxyObjectType", e);
403:       }
404:   }
405: }
RegularFileObject[/tmp/EvoSuite_206_1628159825902/com/google/javascript/rhino/Node_206_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:37:05 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_206_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_206_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.common.collect.Sets$1",
101:       "com.google.javascript.rhino.SourcePosition",
102:       "com.google.common.collect.ImmutableMapKeySet",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.javascript.rhino.Node$AncestorIterable$1",
115:       "com.google.common.collect.Iterators$12",
116:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
117:       "com.google.common.collect.Iterators$11",
118:       "com.google.javascript.rhino.jstype.JSType$1",
119:       "com.google.common.collect.EmptyImmutableBiMap",
120:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
121:       "com.google.common.base.Predicate",
122:       "com.google.javascript.rhino.jstype.JSType$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.common.collect.SingletonImmutableSet",
135:       "com.google.javascript.rhino.jstype.NamedType",
136:       "com.google.common.collect.Iterators$13",
137:       "com.google.javascript.rhino.InputId",
138:       "com.google.common.collect.ImmutableList$SerializedForm",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
163:       "com.google.common.base.Joiner$MapJoiner",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.javascript.rhino.Node$AncestorIterable",
185:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
186:       "com.google.common.collect.Lists$RandomAccessListWrapper",
187:       "com.google.common.collect.ImmutableEnumSet",
188:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
189:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
190:       "com.google.javascript.rhino.jstype.EnumElementType",
191:       "com.google.javascript.rhino.jstype.UnionType",
192:       "com.google.common.base.Objects",
193:       "com.google.javascript.rhino.Node$NumberNode",
194:       "com.google.common.collect.SingletonImmutableList",
195:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
196:       "com.google.common.collect.ImmutableCollection$Builder",
197:       "com.google.javascript.rhino.jstype.StaticSlot",
198:       "com.google.common.collect.Iterators$6",
199:       "com.google.common.collect.BiMap",
200:       "com.google.common.collect.Iterators$7",
201:       "com.google.common.collect.AbstractSetMultimap",
202:       "com.google.common.base.Function",
203:       "com.google.common.collect.ImmutableSet",
204:       "com.google.common.collect.Lists$AbstractListWrapper",
205:       "com.google.common.collect.ImmutableMap",
206:       "com.google.common.collect.AbstractIndexedListIterator",
207:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
208:       "com.google.common.collect.Maps$1",
209:       "com.google.javascript.rhino.jstype.EnumType",
210:       "com.google.common.collect.Iterators$1",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$2",
213:       "com.google.javascript.rhino.jstype.NamespaceType",
214:       "com.google.common.collect.Iterators$3",
215:       "com.google.common.collect.Sets",
216:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
217:       "com.google.javascript.rhino.Node$ObjectPropListItem",
218:       "com.google.common.collect.Lists$StringAsImmutableList",
219:       "com.google.common.collect.Lists$2",
220:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
221:       "com.google.common.collect.ImmutableList$Builder",
222:       "com.google.common.collect.Lists$1",
223:       "com.google.javascript.rhino.jstype.StaticReference",
224:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
225:       "com.google.common.collect.Multiset",
226:       "com.google.common.collect.AbstractMultimap",
227:       "com.google.common.collect.Multimap",
228:       "com.google.common.collect.Iterators",
229:       "com.google.common.collect.EmptyImmutableSet",
230:       "com.google.common.collect.Maps$ImprovedAbstractMap",
231:       "com.google.common.collect.ImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
233:       "com.google.common.collect.ImmutableList",
234:       "com.google.common.collect.SingletonImmutableBiMap",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
236:       "com.google.javascript.rhino.jstype.StringType",
237:       "com.google.javascript.rhino.Node$AbstractPropListItem",
238:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
239:       "com.google.javascript.rhino.jstype.TemplatizedType",
240:       "com.google.javascript.rhino.jstype.Visitor",
241:       "com.google.javascript.rhino.jstype.NoResolvedType",
242:       "com.google.javascript.rhino.jstype.JSTypeNative",
243:       "com.google.javascript.rhino.jstype.AllType",
244:       "com.google.common.collect.Maps",
245:       "com.google.common.collect.SetMultimap",
246:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
247:       "com.google.common.collect.Maps$EntryTransformer",
248:       "com.google.javascript.rhino.JSTypeExpression",
249:       "com.google.common.collect.Iterators$MergingIterator"
250:     );
251:   } 
252: 
253:   private static void resetClasses() {
254:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_206_tmp__ESTest_scaffolding.class.getClassLoader()); 
255: 
256:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
257:       "com.google.javascript.rhino.Node",
258:       "com.google.javascript.rhino.Node$NumberNode",
259:       "com.google.javascript.rhino.Node$StringNode",
260:       "com.google.javascript.rhino.Node$AbstractPropListItem",
261:       "com.google.javascript.rhino.Node$ObjectPropListItem",
262:       "com.google.javascript.rhino.Node$IntPropListItem",
263:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
264:       "com.google.javascript.rhino.Node$AncestorIterable",
265:       "com.google.javascript.rhino.Node$NodeMismatch",
266:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
267:       "com.google.javascript.rhino.Node$SideEffectFlags",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Preconditions",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
301:       "com.google.javascript.rhino.jstype.JSType$1",
302:       "com.google.javascript.rhino.jstype.JSType",
303:       "com.google.javascript.rhino.jstype.ObjectType",
304:       "com.google.javascript.rhino.jstype.ProxyObjectType",
305:       "com.google.javascript.rhino.jstype.TemplateType",
306:       "com.google.javascript.rhino.jstype.ValueType",
307:       "com.google.javascript.rhino.jstype.BooleanType",
308:       "com.google.javascript.rhino.jstype.NullType",
309:       "com.google.javascript.rhino.jstype.NumberType",
310:       "com.google.javascript.rhino.jstype.StringType",
311:       "com.google.javascript.rhino.jstype.UnknownType",
312:       "com.google.javascript.rhino.jstype.VoidType",
313:       "com.google.javascript.rhino.jstype.AllType",
314:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
315:       "com.google.common.collect.ImmutableMap",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.collect.EmptyImmutableBiMap",
318:       "com.google.javascript.rhino.jstype.PropertyMap$1",
319:       "com.google.javascript.rhino.jstype.PropertyMap",
320:       "com.google.javascript.rhino.jstype.FunctionType",
321:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
322:       "com.google.javascript.rhino.Token",
323:       "com.google.javascript.rhino.jstype.ArrowType",
324:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
325:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
326:       "com.google.javascript.rhino.jstype.InstanceObjectType",
327:       "com.google.javascript.rhino.jstype.Property",
328:       "com.google.common.collect.Lists",
329:       "com.google.javascript.rhino.jstype.NoObjectType",
330:       "com.google.javascript.rhino.jstype.NoType",
331:       "com.google.javascript.rhino.jstype.NoResolvedType",
332:       "com.google.common.collect.SingletonImmutableList",
333:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
334:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
335:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
336:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
337:       "com.google.javascript.rhino.jstype.UnionType",
338:       "com.google.javascript.rhino.jstype.FunctionBuilder",
339:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.javascript.rhino.jstype.TernaryValue",
348:       "com.google.common.collect.Iterables",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
353:       "com.google.common.collect.Sets",
354:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
355:       "com.google.javascript.rhino.InputId",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
364:       "com.google.javascript.rhino.JSTypeExpression",
365:       "com.google.common.collect.Platform",
366:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
371:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.JSDocInfo$Marker",
374:       "com.google.common.collect.Iterators$12",
375:       "com.google.javascript.rhino.jstype.JSType$2",
376:       "com.google.common.collect.ImmutableList$1"
377:     );
378:   }
379: }

[MASTER] 10:37:05.938 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(0, 0, 0);
assertNotNull(node0);
assertEquals(0, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(0, node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(0, node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTypeOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals(0, node0.getSourcePosition());
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(0, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(0, node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(0, node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTypeOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals(0, node0.getSourcePosition());
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
assertNotNull(jSTypeRegistry0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());

ObjectType objectType0 = ObjectType.cast((JSType) null);
assertNull(objectType0);

boolean boolean0 = node0.isFor();
assertFalse(boolean0);
assertEquals(0, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(0, node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(0, node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTypeOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals(0, node0.getSourcePosition());
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);

TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
assertNotNull(templateType0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals("Object#Key", templateType0.getReferenceName());
assertFalse(templateType0.isResolved());
assertTrue(templateType0.hasAnyTemplateTypesInternal());
assertFalse(templateType0.isVoidType());
assertFalse(templateType0.hasCachedValues());
assertFalse(templateType0.isStringValueType());
assertTrue(templateType0.isObject());
assertFalse(templateType0.isNullType());
assertTrue(templateType0.isTemplateType());
assertFalse(templateType0.isBooleanValueType());
assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
assertFalse(templateType0.isNumberValueType());
assertFalse(templateType0.isFunctionPrototypeType());
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);

String string0 = templateType0.toString();
assertNotNull(string0);
assertEquals("Object#Key", string0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals("Object#Key", templateType0.getReferenceName());
assertFalse(templateType0.isResolved());
assertTrue(templateType0.hasAnyTemplateTypesInternal());
assertFalse(templateType0.isVoidType());
assertFalse(templateType0.hasCachedValues());
assertFalse(templateType0.isStringValueType());
assertTrue(templateType0.isObject());
assertFalse(templateType0.isNullType());
assertTrue(templateType0.isTemplateType());
assertFalse(templateType0.isBooleanValueType());
assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
assertFalse(templateType0.isNumberValueType());
assertFalse(templateType0.isFunctionPrototypeType());
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);

JSType.toMaybeTemplatizedType((JSType) templateType0);

[MASTER] 10:37:09.104 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_254_1628159829066/com/google/javascript/rhino/Node_254_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_254_1628159829066/com/google/javascript/rhino/Node_254_tmp__ESTest_scaffolding.java]]
[MASTER] 10:37:09.104 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:37:09.104 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:37:09.104 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 232
[MASTER] 10:37:09.105 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_254_1628159829066/com/google/javascript/rhino/Node_254_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:37:09 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_254_tmp__ESTest extends Node_254_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(38);
21:       assertNotNull(node0);
22:       assertFalse(node0.isVar());
23:       assertFalse(node0.isCall());
24:       assertFalse(node0.isStringKey());
25:       assertFalse(node0.isAdd());
26:       assertFalse(node0.isNew());
27:       assertFalse(node0.isWhile());
28:       assertFalse(node0.isBlock());
29:       assertEquals(0, node0.getChildCount());
30:       assertFalse(node0.isCatch());
31:       assertFalse(node0.hasMoreThanOneChild());
32:       assertFalse(node0.isAssignAdd());
33:       assertFalse(node0.isDo());
34:       assertEquals((-1), node0.getLineno());
35:       assertFalse(node0.isSetterDef());
36:       assertFalse(node0.isNull());
37:       assertFalse(node0.isTrue());
38:       assertFalse(node0.isVoid());
39:       assertFalse(node0.isOr());
40:       assertFalse(node0.isCast());
41:       assertFalse(node0.isDelProp());
42:       assertFalse(node0.isGetElem());
43:       assertFalse(node0.isFunction());
44:       assertFalse(node0.isExprResult());
45:       assertFalse(node0.isTypeOf());
46:       assertFalse(node0.isAssign());
47:       assertFalse(node0.isReturn());
48:       assertFalse(node0.hasChildren());
49:       assertFalse(node0.isDec());
50:       assertFalse(node0.isObjectLit());
51:       assertFalse(node0.isContinue());
52:       assertFalse(node0.isAnd());
53:       assertFalse(node0.isGetProp());
54:       assertFalse(node0.isString());
55:       assertFalse(node0.isNot());
56:       assertEquals((-1), node0.getSourcePosition());
57:       assertFalse(node0.isDebugger());
58:       assertFalse(node0.isThrow());
59:       assertFalse(node0.isFalse());
60:       assertFalse(node0.isBreak());
61:       assertFalse(node0.isThis());
62:       assertFalse(node0.isComma());
63:       assertFalse(node0.isHook());
64:       assertFalse(node0.isIn());
65:       assertFalse(node0.isInstanceOf());
66:       assertFalse(node0.isNE());
67:       assertFalse(node0.isInc());
68:       assertFalse(node0.isIf());
69:       assertTrue(node0.isName());
70:       assertFalse(node0.isLabelName());
71:       assertFalse(node0.isTry());
72:       assertFalse(node0.isEmpty());
73:       assertFalse(node0.hasOneChild());
74:       assertFalse(node0.isArrayLit());
75:       assertFalse(node0.isRegExp());
76:       assertFalse(node0.isDefaultCase());
77:       assertFalse(node0.isWith());
78:       assertFalse(node0.isFor());
79:       assertEquals(38, node0.getType());
80:       assertFalse(node0.isLabel());
81:       assertFalse(node0.isCase());
82:       assertFalse(node0.isSwitch());
83:       assertFalse(node0.isScript());
84:       assertFalse(node0.isNumber());
85:       assertFalse(node0.isParamList());
86:       assertFalse(node0.isGetterDef());
87:       assertEquals((-1), node0.getCharno());
88:       assertEquals(57, Node.REFLECTED_OBJECT);
89:       assertEquals(40, Node.ORIGINALNAME_PROP);
90:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
91:       assertEquals(52, Node.LENGTH);
92:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
93:       assertEquals(50, Node.FREE_CALL);
94:       assertEquals(15, Node.NO_SIDE_EFFECTS);
95:       assertEquals(57, Node.LAST_PROP);
96:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
97:       assertEquals(39, Node.EMPTY_BLOCK);
98:       assertEquals(1, Node.DECR_FLAG);
99:       assertEquals(12, Node.COLUMN_BITS);
100:       assertEquals(4095, Node.COLUMN_MASK);
101:       assertEquals(55, Node.INFERRED_FUNCTION);
102:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
103:       assertEquals(8, Node.FLAG_NO_THROWS);
104:       assertEquals(56, Node.CHANGE_TIME);
105:       assertEquals(36, Node.QUOTED_PROP);
106:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
107:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
108:       assertEquals(37, Node.OPT_ARG_NAME);
109:       assertEquals(48, Node.DIRECTIVES);
110:       assertEquals(49, Node.DIRECT_EVAL);
111:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
112:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
113:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
114:       assertEquals(47, Node.IS_DISPATCHER);
115:       assertEquals(29, Node.JSDOC_INFO_PROP);
116:       assertEquals(53, Node.INPUT_ID);
117:       assertEquals(32, Node.INCRDECR_PROP);
118:       assertEquals(51, Node.STATIC_SOURCE_FILE);
119:       assertEquals(46, Node.IS_NAMESPACE);
120:       assertEquals(2, Node.POST_FLAG);
121:       assertEquals(30, Node.VAR_ARGS_NAME);
122:       assertEquals(43, Node.IS_CONSTANT_NAME);
123:       assertEquals(54, Node.SLASH_V);
124:       
125:       Node node1 = new Node(37, 38, 1);
126:       assertFalse(node1.equals((Object)node0));
127:       assertNotNull(node1);
128:       assertFalse(node1.isInc());
129:       assertFalse(node1.isSwitch());
130:       assertEquals(37, node1.getType());
131:       assertFalse(node1.isHook());
132:       assertFalse(node1.isCase());
133:       assertFalse(node1.isString());
134:       assertFalse(node1.isIn());
135:       assertFalse(node1.isThis());
136:       assertFalse(node1.isComma());
137:       assertFalse(node1.isGetProp());
138:       assertFalse(node1.isDelProp());
139:       assertEquals(38, node1.getLineno());
140:       assertFalse(node1.isIf());
141:       assertTrue(node1.isCall());
142:       assertFalse(node1.isNE());
143:       assertFalse(node1.isFor());
144:       assertFalse(node1.isWith());
145:       assertFalse(node1.isBreak());
146:       assertFalse(node1.isInstanceOf());
147:       assertFalse(node1.isExprResult());
148:       assertFalse(node1.isTrue());
149:       assertFalse(node1.isRegExp());
150:       assertFalse(node1.isTry());
151:       assertFalse(node1.isVoid());
152:       assertFalse(node1.isDefaultCase());
153:       assertFalse(node1.hasOneChild());
154:       assertFalse(node1.isEmpty());
155:       assertFalse(node1.isScript());
156:       assertFalse(node1.isParamList());
157:       assertFalse(node1.isNumber());
158:       assertFalse(node1.isGetterDef());
159:       assertFalse(node1.isLabel());
160:       assertFalse(node1.isAssignAdd());
161:       assertFalse(node1.isStringKey());
162:       assertFalse(node1.isArrayLit());
163:       assertFalse(node1.isLabelName());
164:       assertEquals(0, node1.getChildCount());
165:       assertFalse(node1.isNew());
166:       assertFalse(node1.isWhile());
167:       assertFalse(node1.isBlock());
168:       assertEquals(1, node1.getCharno());
169:       assertFalse(node1.isVar());
170:       assertFalse(node1.isDo());
171:       assertFalse(node1.isAdd());
172:       assertFalse(node1.isDec());
173:       assertFalse(node1.isTypeOf());
174:       assertFalse(node1.isOr());
175:       assertFalse(node1.isReturn());
176:       assertFalse(node1.hasChildren());
177:       assertFalse(node1.isNull());
178:       assertFalse(node1.hasMoreThanOneChild());
179:       assertFalse(node1.isName());
180:       assertFalse(node1.isAssign());
181:       assertFalse(node1.isGetElem());
182:       assertFalse(node1.isCatch());
183:       assertFalse(node1.isFunction());
184:       assertFalse(node1.isDebugger());
185:       assertEquals(155649, node1.getSourcePosition());
186:       assertFalse(node1.isObjectLit());
187:       assertFalse(node1.isNot());
188:       assertFalse(node1.isSetterDef());
189:       assertFalse(node1.isThrow());
190:       assertFalse(node1.isContinue());
191:       assertFalse(node1.isAnd());
192:       assertFalse(node1.isFalse());
193:       assertFalse(node1.isCast());
194:       assertEquals(57, Node.LAST_PROP);
195:       assertEquals(49, Node.DIRECT_EVAL);
196:       assertEquals(1, Node.DECR_FLAG);
197:       assertEquals(15, Node.NO_SIDE_EFFECTS);
198:       assertEquals(51, Node.STATIC_SOURCE_FILE);
199:       assertEquals(52, Node.LENGTH);
200:       assertEquals(50, Node.FREE_CALL);
201:       assertEquals(46, Node.IS_NAMESPACE);
202:       assertEquals(54, Node.SLASH_V);
203:       assertEquals(57, Node.REFLECTED_OBJECT);
204:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
205:       assertEquals(56, Node.CHANGE_TIME);
206:       assertEquals(48, Node.DIRECTIVES);
207:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
208:       assertEquals(37, Node.OPT_ARG_NAME);
209:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
210:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
211:       assertEquals(12, Node.COLUMN_BITS);
212:       assertEquals(4095, Node.COLUMN_MASK);
213:       assertEquals(32, Node.INCRDECR_PROP);
214:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
215:       assertEquals(43, Node.IS_CONSTANT_NAME);
216:       assertEquals(36, Node.QUOTED_PROP);
217:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
218:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
219:       assertEquals(53, Node.INPUT_ID);
220:       assertEquals(55, Node.INFERRED_FUNCTION);
221:       assertEquals(2, Node.POST_FLAG);
222:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
223:       assertEquals(8, Node.FLAG_NO_THROWS);
224:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
225:       assertEquals(29, Node.JSDOC_INFO_PROP);
226:       assertEquals(40, Node.ORIGINALNAME_PROP);
227:       assertEquals(39, Node.EMPTY_BLOCK);
228:       assertEquals(30, Node.VAR_ARGS_NAME);
229:       assertEquals(47, Node.IS_DISPATCHER);
230:       
231:       Iterable<Node> iterable0 = node1.children();
232:       assertFalse(iterable0.contains(node1));
233:       assertNotSame(node1, node0);
234:       assertFalse(node1.equals((Object)node0));
235:       assertNotNull(iterable0);
236:       assertFalse(node1.isInc());
237:       assertFalse(node1.isSwitch());
238:       assertEquals(37, node1.getType());
239:       assertFalse(node1.isHook());
240:       assertFalse(node1.isCase());
241:       assertFalse(node1.isString());
242:       assertFalse(node1.isIn());
243:       assertFalse(node1.isThis());
244:       assertFalse(node1.isComma());
245:       assertFalse(node1.isGetProp());
246:       assertFalse(node1.isDelProp());
247:       assertEquals(38, node1.getLineno());
248:       assertFalse(node1.isIf());
249:       assertTrue(node1.isCall());
250:       assertFalse(node1.isNE());
251:       assertFalse(node1.isFor());
252:       assertFalse(node1.isWith());
253:       assertFalse(node1.isBreak());
254:       assertFalse(node1.isInstanceOf());
255:       assertFalse(node1.isExprResult());
256:       assertFalse(node1.isTrue());
257:       assertFalse(node1.isRegExp());
258:       assertFalse(node1.isTry());
259:       assertFalse(node1.isVoid());
260:       assertFalse(node1.isDefaultCase());
261:       assertFalse(node1.hasOneChild());
262:       assertFalse(node1.isEmpty());
263:       assertFalse(node1.isScript());
264:       assertFalse(node1.isParamList());
265:       assertFalse(node1.isNumber());
266:       assertFalse(node1.isGetterDef());
267:       assertFalse(node1.isLabel());
268:       assertFalse(node1.isAssignAdd());
269:       assertFalse(node1.isStringKey());
270:       assertFalse(node1.isArrayLit());
271:       assertFalse(node1.isLabelName());
272:       assertEquals(0, node1.getChildCount());
273:       assertFalse(node1.isNew());
274:       assertFalse(node1.isWhile());
275:       assertFalse(node1.isBlock());
276:       assertEquals(1, node1.getCharno());
277:       assertFalse(node1.isVar());
278:       assertFalse(node1.isDo());
279:       assertFalse(node1.isAdd());
280:       assertFalse(node1.isDec());
281:       assertFalse(node1.isTypeOf());
282:       assertFalse(node1.isOr());
283:       assertFalse(node1.isReturn());
284:       assertFalse(node1.hasChildren());
285:       assertFalse(node1.isNull());
286:       assertFalse(node1.hasMoreThanOneChild());
287:       assertFalse(node1.isName());
288:       assertFalse(node1.isAssign());
289:       assertFalse(node1.isGetElem());
290:       assertFalse(node1.isCatch());
291:       assertFalse(node1.isFunction());
292:       assertFalse(node1.isDebugger());
293:       assertEquals(155649, node1.getSourcePosition());
294:       assertFalse(node1.isObjectLit());
295:       assertFalse(node1.isNot());
296:       assertFalse(node1.isSetterDef());
297:       assertFalse(node1.isThrow());
298:       assertFalse(node1.isContinue());
299:       assertFalse(node1.isAnd());
300:       assertFalse(node1.isFalse());
301:       assertFalse(node1.isCast());
302:       assertEquals(57, Node.LAST_PROP);
303:       assertEquals(49, Node.DIRECT_EVAL);
304:       assertEquals(1, Node.DECR_FLAG);
305:       assertEquals(15, Node.NO_SIDE_EFFECTS);
306:       assertEquals(51, Node.STATIC_SOURCE_FILE);
307:       assertEquals(52, Node.LENGTH);
308:       assertEquals(50, Node.FREE_CALL);
309:       assertEquals(46, Node.IS_NAMESPACE);
310:       assertEquals(54, Node.SLASH_V);
311:       assertEquals(57, Node.REFLECTED_OBJECT);
312:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
313:       assertEquals(56, Node.CHANGE_TIME);
314:       assertEquals(48, Node.DIRECTIVES);
315:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
316:       assertEquals(37, Node.OPT_ARG_NAME);
317:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
318:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
319:       assertEquals(12, Node.COLUMN_BITS);
320:       assertEquals(4095, Node.COLUMN_MASK);
321:       assertEquals(32, Node.INCRDECR_PROP);
322:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
323:       assertEquals(43, Node.IS_CONSTANT_NAME);
324:       assertEquals(36, Node.QUOTED_PROP);
325:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
326:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
327:       assertEquals(53, Node.INPUT_ID);
328:       assertEquals(55, Node.INFERRED_FUNCTION);
329:       assertEquals(2, Node.POST_FLAG);
330:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
331:       assertEquals(8, Node.FLAG_NO_THROWS);
332:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
333:       assertEquals(29, Node.JSDOC_INFO_PROP);
334:       assertEquals(40, Node.ORIGINALNAME_PROP);
335:       assertEquals(39, Node.EMPTY_BLOCK);
336:       assertEquals(30, Node.VAR_ARGS_NAME);
337:       assertEquals(47, Node.IS_DISPATCHER);
338:       
339:       boolean boolean0 = node0.isEquivalentTo(node1, true, true, true);
340:       assertNotSame(node0, node1);
341:       assertNotSame(node1, node0);
342:       assertFalse(node0.equals((Object)node1));
343:       assertFalse(node1.equals((Object)node0));
344:       assertFalse(boolean0);
345:       assertFalse(node0.isVar());
346:       assertFalse(node0.isCall());
347:       assertFalse(node0.isStringKey());
348:       assertFalse(node0.isAdd());
349:       assertFalse(node0.isNew());
350:       assertFalse(node0.isWhile());
351:       assertFalse(node0.isBlock());
352:       assertEquals(0, node0.getChildCount());
353:       assertFalse(node0.isCatch());
354:       assertFalse(node0.hasMoreThanOneChild());
355:       assertFalse(node0.isAssignAdd());
356:       assertFalse(node0.isDo());
357:       assertEquals((-1), node0.getLineno());
358:       assertFalse(node0.isSetterDef());
359:       assertFalse(node0.isNull());
360:       assertFalse(node0.isTrue());
361:       assertFalse(node0.isVoid());
362:       assertFalse(node0.isOr());
363:       assertFalse(node0.isCast());
364:       assertFalse(node0.isDelProp());
365:       assertFalse(node0.isGetElem());
366:       assertFalse(node0.isFunction());
367:       assertFalse(node0.isExprResult());
368:       assertFalse(node0.isTypeOf());
369:       assertFalse(node0.isAssign());
370:       assertFalse(node0.isReturn());
371:       assertFalse(node0.hasChildren());
372:       assertFalse(node0.isDec());
373:       assertFalse(node0.isObjectLit());
374:       assertFalse(node0.isContinue());
375:       assertFalse(node0.isAnd());
376:       assertFalse(node0.isGetProp());
377:       assertFalse(node0.isString());
378:       assertFalse(node0.isNot());
379:       assertEquals((-1), node0.getSourcePosition());
380:       assertFalse(node0.isDebugger());
381:       assertFalse(node0.isThrow());
382:       assertFalse(node0.isFalse());
383:       assertFalse(node0.isBreak());
384:       assertFalse(node0.isThis());
385:       assertFalse(node0.isComma());
386:       assertFalse(node0.isHook());
387:       assertFalse(node0.isIn());
388:       assertFalse(node0.isInstanceOf());
389:       assertFalse(node0.isNE());
390:       assertFalse(node0.isInc());
391:       assertFalse(node0.isIf());
392:       assertTrue(node0.isName());
393:       assertFalse(node0.isLabelName());
394:       assertFalse(node0.isTry());
395:       assertFalse(node0.isEmpty());
396:       assertFalse(node0.hasOneChild());
397:       assertFalse(node0.isArrayLit());
398:       assertFalse(node0.isRegExp());
399:       assertFalse(node0.isDefaultCase());
400:       assertFalse(node0.isWith());
401:       assertFalse(node0.isFor());
402:       assertEquals(38, node0.getType());
403:       assertFalse(node0.isLabel());
404:       assertFalse(node0.isCase());
405:       assertFalse(node0.isSwitch());
406:       assertFalse(node0.isScript());
407:       assertFalse(node0.isNumber());
408:       assertFalse(node0.isParamList());
409:       assertFalse(node0.isGetterDef());
410:       assertEquals((-1), node0.getCharno());
411:       assertFalse(node1.isInc());
412:       assertFalse(node1.isSwitch());
413:       assertEquals(37, node1.getType());
414:       assertFalse(node1.isHook());
415:       assertFalse(node1.isCase());
416:       assertFalse(node1.isString());
417:       assertFalse(node1.isIn());
418:       assertFalse(node1.isThis());
419:       assertFalse(node1.isComma());
420:       assertFalse(node1.isGetProp());
421:       assertFalse(node1.isDelProp());
422:       assertEquals(38, node1.getLineno());
423:       assertFalse(node1.isIf());
424:       assertTrue(node1.isCall());
425:       assertFalse(node1.isNE());
426:       assertFalse(node1.isFor());
427:       assertFalse(node1.isWith());
428:       assertFalse(node1.isBreak());
429:       assertFalse(node1.isInstanceOf());
430:       assertFalse(node1.isExprResult());
431:       assertFalse(node1.isTrue());
432:       assertFalse(node1.isRegExp());
433:       assertFalse(node1.isTry());
434:       assertFalse(node1.isVoid());
435:       assertFalse(node1.isDefaultCase());
436:       assertFalse(node1.hasOneChild());
437:       assertFalse(node1.isEmpty());
438:       assertFalse(node1.isScript());
439:       assertFalse(node1.isParamList());
440:       assertFalse(node1.isNumber());
441:       assertFalse(node1.isGetterDef());
442:       assertFalse(node1.isLabel());
443:       assertFalse(node1.isAssignAdd());
444:       assertFalse(node1.isStringKey());
445:       assertFalse(node1.isArrayLit());
446:       assertFalse(node1.isLabelName());
447:       assertEquals(0, node1.getChildCount());
448:       assertFalse(node1.isNew());
449:       assertFalse(node1.isWhile());
450:       assertFalse(node1.isBlock());
451:       assertEquals(1, node1.getCharno());
452:       assertFalse(node1.isVar());
453:       assertFalse(node1.isDo());
454:       assertFalse(node1.isAdd());
455:       assertFalse(node1.isDec());
456:       assertFalse(node1.isTypeOf());
457:       assertFalse(node1.isOr());
458:       assertFalse(node1.isReturn());
459:       assertFalse(node1.hasChildren());
460:       assertFalse(node1.isNull());
461:       assertFalse(node1.hasMoreThanOneChild());
462:       assertFalse(node1.isName());
463:       assertFalse(node1.isAssign());
464:       assertFalse(node1.isGetElem());
465:       assertFalse(node1.isCatch());
466:       assertFalse(node1.isFunction());
467:       assertFalse(node1.isDebugger());
468:       assertEquals(155649, node1.getSourcePosition());
469:       assertFalse(node1.isObjectLit());
470:       assertFalse(node1.isNot());
471:       assertFalse(node1.isSetterDef());
472:       assertFalse(node1.isThrow());
473:       assertFalse(node1.isContinue());
474:       assertFalse(node1.isAnd());
475:       assertFalse(node1.isFalse());
476:       assertFalse(node1.isCast());
477:       assertEquals(57, Node.REFLECTED_OBJECT);
478:       assertEquals(40, Node.ORIGINALNAME_PROP);
479:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
480:       assertEquals(52, Node.LENGTH);
481:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
482:       assertEquals(50, Node.FREE_CALL);
483:       assertEquals(15, Node.NO_SIDE_EFFECTS);
484:       assertEquals(57, Node.LAST_PROP);
485:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
486:       assertEquals(39, Node.EMPTY_BLOCK);
487:       assertEquals(1, Node.DECR_FLAG);
488:       assertEquals(12, Node.COLUMN_BITS);
489:       assertEquals(4095, Node.COLUMN_MASK);
490:       assertEquals(55, Node.INFERRED_FUNCTION);
491:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
492:       assertEquals(8, Node.FLAG_NO_THROWS);
493:       assertEquals(56, Node.CHANGE_TIME);
494:       assertEquals(36, Node.QUOTED_PROP);
495:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
496:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
497:       assertEquals(37, Node.OPT_ARG_NAME);
498:       assertEquals(48, Node.DIRECTIVES);
499:       assertEquals(49, Node.DIRECT_EVAL);
500:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
501:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
502:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
503:       assertEquals(47, Node.IS_DISPATCHER);
504:       assertEquals(29, Node.JSDOC_INFO_PROP);
505:       assertEquals(53, Node.INPUT_ID);
506:       assertEquals(32, Node.INCRDECR_PROP);
507:       assertEquals(51, Node.STATIC_SOURCE_FILE);
508:       assertEquals(46, Node.IS_NAMESPACE);
509:       assertEquals(2, Node.POST_FLAG);
510:       assertEquals(30, Node.VAR_ARGS_NAME);
511:       assertEquals(43, Node.IS_CONSTANT_NAME);
512:       assertEquals(54, Node.SLASH_V);
513:       assertEquals(57, Node.LAST_PROP);
514:       assertEquals(49, Node.DIRECT_EVAL);
515:       assertEquals(1, Node.DECR_FLAG);
516:       assertEquals(15, Node.NO_SIDE_EFFECTS);
517:       assertEquals(51, Node.STATIC_SOURCE_FILE);
518:       assertEquals(52, Node.LENGTH);
519:       assertEquals(50, Node.FREE_CALL);
520:       assertEquals(46, Node.IS_NAMESPACE);
521:       assertEquals(54, Node.SLASH_V);
522:       assertEquals(57, Node.REFLECTED_OBJECT);
523:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
524:       assertEquals(56, Node.CHANGE_TIME);
525:       assertEquals(48, Node.DIRECTIVES);
526:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
527:       assertEquals(37, Node.OPT_ARG_NAME);
528:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
529:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
530:       assertEquals(12, Node.COLUMN_BITS);
531:       assertEquals(4095, Node.COLUMN_MASK);
532:       assertEquals(32, Node.INCRDECR_PROP);
533:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
534:       assertEquals(43, Node.IS_CONSTANT_NAME);
535:       assertEquals(36, Node.QUOTED_PROP);
536:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
537:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
538:       assertEquals(53, Node.INPUT_ID);
539:       assertEquals(55, Node.INFERRED_FUNCTION);
540:       assertEquals(2, Node.POST_FLAG);
541:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
542:       assertEquals(8, Node.FLAG_NO_THROWS);
543:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
544:       assertEquals(29, Node.JSDOC_INFO_PROP);
545:       assertEquals(40, Node.ORIGINALNAME_PROP);
546:       assertEquals(39, Node.EMPTY_BLOCK);
547:       assertEquals(30, Node.VAR_ARGS_NAME);
548:       assertEquals(47, Node.IS_DISPATCHER);
549:       
550:       boolean boolean1 = node0.isName();
551:       assertNotSame(node0, node1);
552:       assertFalse(node0.equals((Object)node1));
553:       assertFalse(boolean1 == boolean0);
554:       assertTrue(boolean1);
555:       assertFalse(node0.isVar());
556:       assertFalse(node0.isCall());
557:       assertFalse(node0.isStringKey());
558:       assertFalse(node0.isAdd());
559:       assertFalse(node0.isNew());
560:       assertFalse(node0.isWhile());
561:       assertFalse(node0.isBlock());
562:       assertEquals(0, node0.getChildCount());
563:       assertFalse(node0.isCatch());
564:       assertFalse(node0.hasMoreThanOneChild());
565:       assertFalse(node0.isAssignAdd());
566:       assertFalse(node0.isDo());
567:       assertEquals((-1), node0.getLineno());
568:       assertFalse(node0.isSetterDef());
569:       assertFalse(node0.isNull());
570:       assertFalse(node0.isTrue());
571:       assertFalse(node0.isVoid());
572:       assertFalse(node0.isOr());
573:       assertFalse(node0.isCast());
574:       assertFalse(node0.isDelProp());
575:       assertFalse(node0.isGetElem());
576:       assertFalse(node0.isFunction());
577:       assertFalse(node0.isExprResult());
578:       assertFalse(node0.isTypeOf());
579:       assertFalse(node0.isAssign());
580:       assertFalse(node0.isReturn());
581:       assertFalse(node0.hasChildren());
582:       assertFalse(node0.isDec());
583:       assertFalse(node0.isObjectLit());
584:       assertFalse(node0.isContinue());
585:       assertFalse(node0.isAnd());
586:       assertFalse(node0.isGetProp());
587:       assertFalse(node0.isString());
588:       assertFalse(node0.isNot());
589:       assertEquals((-1), node0.getSourcePosition());
590:       assertFalse(node0.isDebugger());
591:       assertFalse(node0.isThrow());
592:       assertFalse(node0.isFalse());
593:       assertFalse(node0.isBreak());
594:       assertFalse(node0.isThis());
595:       assertFalse(node0.isComma());
596:       assertFalse(node0.isHook());
597:       assertFalse(node0.isIn());
598:       assertFalse(node0.isInstanceOf());
599:       assertFalse(node0.isNE());
600:       assertFalse(node0.isInc());
601:       assertFalse(node0.isIf());
602:       assertTrue(node0.isName());
603:       assertFalse(node0.isLabelName());
604:       assertFalse(node0.isTry());
605:       assertFalse(node0.isEmpty());
606:       assertFalse(node0.hasOneChild());
607:       assertFalse(node0.isArrayLit());
608:       assertFalse(node0.isRegExp());
609:       assertFalse(node0.isDefaultCase());
610:       assertFalse(node0.isWith());
611:       assertFalse(node0.isFor());
612:       assertEquals(38, node0.getType());
613:       assertFalse(node0.isLabel());
614:       assertFalse(node0.isCase());
615:       assertFalse(node0.isSwitch());
616:       assertFalse(node0.isScript());
617:       assertFalse(node0.isNumber());
618:       assertFalse(node0.isParamList());
619:       assertFalse(node0.isGetterDef());
620:       assertEquals((-1), node0.getCharno());
621:       assertEquals(57, Node.REFLECTED_OBJECT);
622:       assertEquals(40, Node.ORIGINALNAME_PROP);
623:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
624:       assertEquals(52, Node.LENGTH);
625:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
626:       assertEquals(50, Node.FREE_CALL);
627:       assertEquals(15, Node.NO_SIDE_EFFECTS);
628:       assertEquals(57, Node.LAST_PROP);
629:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
630:       assertEquals(39, Node.EMPTY_BLOCK);
631:       assertEquals(1, Node.DECR_FLAG);
632:       assertEquals(12, Node.COLUMN_BITS);
633:       assertEquals(4095, Node.COLUMN_MASK);
634:       assertEquals(55, Node.INFERRED_FUNCTION);
635:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
636:       assertEquals(8, Node.FLAG_NO_THROWS);
637:       assertEquals(56, Node.CHANGE_TIME);
638:       assertEquals(36, Node.QUOTED_PROP);
639:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
640:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
641:       assertEquals(37, Node.OPT_ARG_NAME);
642:       assertEquals(48, Node.DIRECTIVES);
643:       assertEquals(49, Node.DIRECT_EVAL);
644:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
645:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
646:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
647:       assertEquals(47, Node.IS_DISPATCHER);
648:       assertEquals(29, Node.JSDOC_INFO_PROP);
649:       assertEquals(53, Node.INPUT_ID);
650:       assertEquals(32, Node.INCRDECR_PROP);
651:       assertEquals(51, Node.STATIC_SOURCE_FILE);
652:       assertEquals(46, Node.IS_NAMESPACE);
653:       assertEquals(2, Node.POST_FLAG);
654:       assertEquals(30, Node.VAR_ARGS_NAME);
655:       assertEquals(43, Node.IS_CONSTANT_NAME);
656:       assertEquals(54, Node.SLASH_V);
657:   }
658: }
RegularFileObject[/tmp/EvoSuite_254_1628159829066/com/google/javascript/rhino/Node_254_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:37:09 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_254_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_254_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.common.collect.Sets$1",
101:       "com.google.javascript.rhino.SourcePosition",
102:       "com.google.common.collect.ImmutableMapKeySet",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.javascript.rhino.Node$AncestorIterable$1",
115:       "com.google.common.collect.Iterators$12",
116:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
117:       "com.google.common.collect.Iterators$11",
118:       "com.google.javascript.rhino.jstype.JSType$1",
119:       "com.google.common.collect.EmptyImmutableBiMap",
120:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
121:       "com.google.common.base.Predicate",
122:       "com.google.javascript.rhino.jstype.JSType$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.common.collect.SingletonImmutableSet",
135:       "com.google.javascript.rhino.jstype.NamedType",
136:       "com.google.common.collect.Iterators$13",
137:       "com.google.javascript.rhino.InputId",
138:       "com.google.common.collect.ImmutableList$SerializedForm",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
163:       "com.google.common.base.Joiner$MapJoiner",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.javascript.rhino.Node$AncestorIterable",
185:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
186:       "com.google.common.collect.Lists$RandomAccessListWrapper",
187:       "com.google.common.collect.ImmutableEnumSet",
188:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
189:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
190:       "com.google.javascript.rhino.jstype.EnumElementType",
191:       "com.google.javascript.rhino.jstype.UnionType",
192:       "com.google.common.base.Objects",
193:       "com.google.javascript.rhino.Node$NumberNode",
194:       "com.google.common.collect.SingletonImmutableList",
195:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
196:       "com.google.common.collect.ImmutableCollection$Builder",
197:       "com.google.javascript.rhino.jstype.StaticSlot",
198:       "com.google.common.collect.Iterators$6",
199:       "com.google.common.collect.BiMap",
200:       "com.google.common.collect.Iterators$7",
201:       "com.google.common.collect.AbstractSetMultimap",
202:       "com.google.common.base.Function",
203:       "com.google.common.collect.ImmutableSet",
204:       "com.google.common.collect.Lists$AbstractListWrapper",
205:       "com.google.common.collect.ImmutableMap",
206:       "com.google.common.collect.AbstractIndexedListIterator",
207:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
208:       "com.google.common.collect.Maps$1",
209:       "com.google.javascript.rhino.jstype.EnumType",
210:       "com.google.common.collect.Iterators$1",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$2",
213:       "com.google.javascript.rhino.jstype.NamespaceType",
214:       "com.google.common.collect.Iterators$3",
215:       "com.google.common.collect.Sets",
216:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
217:       "com.google.javascript.rhino.Node$ObjectPropListItem",
218:       "com.google.common.collect.Lists$StringAsImmutableList",
219:       "com.google.common.collect.Lists$2",
220:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
221:       "com.google.common.collect.ImmutableList$Builder",
222:       "com.google.common.collect.Lists$1",
223:       "com.google.javascript.rhino.jstype.StaticReference",
224:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
225:       "com.google.common.collect.Multiset",
226:       "com.google.common.collect.AbstractMultimap",
227:       "com.google.common.collect.Multimap",
228:       "com.google.common.collect.Iterators",
229:       "com.google.common.collect.EmptyImmutableSet",
230:       "com.google.common.collect.Maps$ImprovedAbstractMap",
231:       "com.google.common.collect.ImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
233:       "com.google.common.collect.ImmutableList",
234:       "com.google.common.collect.SingletonImmutableBiMap",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
236:       "com.google.javascript.rhino.jstype.StringType",
237:       "com.google.javascript.rhino.Node$AbstractPropListItem",
238:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
239:       "com.google.javascript.rhino.jstype.TemplatizedType",
240:       "com.google.javascript.rhino.jstype.Visitor",
241:       "com.google.javascript.rhino.jstype.NoResolvedType",
242:       "com.google.javascript.rhino.jstype.JSTypeNative",
243:       "com.google.javascript.rhino.jstype.AllType",
244:       "com.google.common.collect.Maps",
245:       "com.google.common.collect.SetMultimap",
246:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
247:       "com.google.common.collect.Maps$EntryTransformer",
248:       "com.google.javascript.rhino.JSTypeExpression",
249:       "com.google.common.collect.Iterators$MergingIterator"
250:     );
251:   } 
252: 
253:   private static void resetClasses() {
254:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_254_tmp__ESTest_scaffolding.class.getClassLoader()); 
255: 
256:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
257:       "com.google.javascript.rhino.Node",
258:       "com.google.javascript.rhino.Node$NumberNode",
259:       "com.google.javascript.rhino.Node$StringNode",
260:       "com.google.javascript.rhino.Node$AbstractPropListItem",
261:       "com.google.javascript.rhino.Node$ObjectPropListItem",
262:       "com.google.javascript.rhino.Node$IntPropListItem",
263:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
264:       "com.google.javascript.rhino.Node$AncestorIterable",
265:       "com.google.javascript.rhino.Node$NodeMismatch",
266:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
267:       "com.google.javascript.rhino.Node$SideEffectFlags",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Preconditions",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
301:       "com.google.javascript.rhino.jstype.JSType$1",
302:       "com.google.javascript.rhino.jstype.JSType",
303:       "com.google.javascript.rhino.jstype.ObjectType",
304:       "com.google.javascript.rhino.jstype.ProxyObjectType",
305:       "com.google.javascript.rhino.jstype.TemplateType",
306:       "com.google.javascript.rhino.jstype.ValueType",
307:       "com.google.javascript.rhino.jstype.BooleanType",
308:       "com.google.javascript.rhino.jstype.NullType",
309:       "com.google.javascript.rhino.jstype.NumberType",
310:       "com.google.javascript.rhino.jstype.StringType",
311:       "com.google.javascript.rhino.jstype.UnknownType",
312:       "com.google.javascript.rhino.jstype.VoidType",
313:       "com.google.javascript.rhino.jstype.AllType",
314:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
315:       "com.google.common.collect.ImmutableMap",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.collect.EmptyImmutableBiMap",
318:       "com.google.javascript.rhino.jstype.PropertyMap$1",
319:       "com.google.javascript.rhino.jstype.PropertyMap",
320:       "com.google.javascript.rhino.jstype.FunctionType",
321:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
322:       "com.google.javascript.rhino.Token",
323:       "com.google.javascript.rhino.jstype.ArrowType",
324:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
325:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
326:       "com.google.javascript.rhino.jstype.InstanceObjectType",
327:       "com.google.javascript.rhino.jstype.Property",
328:       "com.google.common.collect.Lists",
329:       "com.google.javascript.rhino.jstype.NoObjectType",
330:       "com.google.javascript.rhino.jstype.NoType",
331:       "com.google.javascript.rhino.jstype.NoResolvedType",
332:       "com.google.common.collect.SingletonImmutableList",
333:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
334:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
335:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
336:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
337:       "com.google.javascript.rhino.jstype.UnionType",
338:       "com.google.javascript.rhino.jstype.FunctionBuilder",
339:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.javascript.rhino.jstype.TernaryValue",
348:       "com.google.common.collect.Iterables",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
353:       "com.google.common.collect.Sets",
354:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
355:       "com.google.javascript.rhino.InputId",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
364:       "com.google.javascript.rhino.JSTypeExpression",
365:       "com.google.common.collect.Platform",
366:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
371:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.JSDocInfo$Marker",
374:       "com.google.common.collect.Iterators$12",
375:       "com.google.javascript.rhino.jstype.JSType$2",
376:       "com.google.common.collect.ImmutableList$1"
377:     );
378:   }
379: }

[MASTER] 10:37:09.114 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(38);
assertNotNull(node0);
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertTrue(node0.isName());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertEquals(38, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);

Node node1 = new Node(37, 38, 1);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals(37, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDelProp());
assertEquals(38, node1.getLineno());
assertFalse(node1.isIf());
assertTrue(node1.isCall());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertEquals(1, node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals(155649, node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

Iterable<Node> iterable0 = node1.children();
assertFalse(iterable0.contains(node1));
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertNotNull(iterable0);
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals(37, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDelProp());
assertEquals(38, node1.getLineno());
assertFalse(node1.isIf());
assertTrue(node1.isCall());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertEquals(1, node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals(155649, node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean0 = node0.isEquivalentTo(node1, true, true, true);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean0);
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertTrue(node0.isName());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertEquals(38, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals(37, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDelProp());
assertEquals(38, node1.getLineno());
assertFalse(node1.isIf());
assertTrue(node1.isCall());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertEquals(1, node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals(155649, node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean1 = node0.isName();
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(boolean1 == boolean0);
assertTrue(boolean1);
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertTrue(node0.isName());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertEquals(38, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);


[MASTER] 10:37:12.742 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_298_1628159832307/com/google/javascript/rhino/Node_298_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_298_1628159832307/com/google/javascript/rhino/Node_298_tmp__ESTest_scaffolding.java]]
[MASTER] 10:37:12.742 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:37:12.742 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:37:12.743 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 127
[MASTER] 10:37:12.744 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_298_1628159832307/com/google/javascript/rhino/Node_298_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:37:12 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.jstype.StaticSourceFile;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_298_tmp__ESTest extends Node_298_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(951.13);
22:       assertNotNull(node0);
23:       assertFalse(node0.isNew());
24:       assertFalse(node0.isBlock());
25:       assertFalse(node0.isAdd());
26:       assertFalse(node0.isVar());
27:       assertFalse(node0.isName());
28:       assertEquals(39, node0.getType());
29:       assertFalse(node0.isWhile());
30:       assertFalse(node0.isCall());
31:       assertFalse(node0.hasMoreThanOneChild());
32:       assertFalse(node0.isContinue());
33:       assertFalse(node0.isReturn());
34:       assertFalse(node0.isParamList());
35:       assertFalse(node0.isStringKey());
36:       assertEquals((-1), node0.getSourcePosition());
37:       assertFalse(node0.isDebugger());
38:       assertFalse(node0.isExprResult());
39:       assertFalse(node0.isTrue());
40:       assertFalse(node0.isArrayLit());
41:       assertFalse(node0.isDefaultCase());
42:       assertFalse(node0.isVoid());
43:       assertFalse(node0.isLabelName());
44:       assertFalse(node0.isAssign());
45:       assertFalse(node0.hasChildren());
46:       assertFalse(node0.isGetElem());
47:       assertEquals(0, node0.getChildCount());
48:       assertFalse(node0.isDec());
49:       assertFalse(node0.isTypeOf());
50:       assertFalse(node0.isOr());
51:       assertFalse(node0.isLabel());
52:       assertFalse(node0.isAssignAdd());
53:       assertFalse(node0.isDelProp());
54:       assertFalse(node0.isEmpty());
55:       assertFalse(node0.isDo());
56:       assertFalse(node0.isNull());
57:       assertFalse(node0.isHook());
58:       assertFalse(node0.isInc());
59:       assertFalse(node0.isSwitch());
60:       assertFalse(node0.isThrow());
61:       assertFalse(node0.isBreak());
62:       assertFalse(node0.isComma());
63:       assertFalse(node0.isFalse());
64:       assertTrue(node0.isNumber());
65:       assertFalse(node0.isGetProp());
66:       assertFalse(node0.isThis());
67:       assertFalse(node0.isAnd());
68:       assertFalse(node0.isNot());
69:       assertFalse(node0.isString());
70:       assertFalse(node0.isCase());
71:       assertFalse(node0.isScript());
72:       assertEquals((-1), node0.getCharno());
73:       assertFalse(node0.isGetterDef());
74:       assertFalse(node0.isObjectLit());
75:       assertFalse(node0.isTry());
76:       assertFalse(node0.hasOneChild());
77:       assertFalse(node0.isWith());
78:       assertFalse(node0.isFor());
79:       assertFalse(node0.isCatch());
80:       assertFalse(node0.isCast());
81:       assertFalse(node0.isRegExp());
82:       assertFalse(node0.isFunction());
83:       assertEquals((-1), node0.getLineno());
84:       assertFalse(node0.isInstanceOf());
85:       assertFalse(node0.isNE());
86:       assertFalse(node0.isSetterDef());
87:       assertFalse(node0.isIf());
88:       assertFalse(node0.isIn());
89:       assertEquals(54, Node.SLASH_V);
90:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
91:       assertEquals(15, Node.NO_SIDE_EFFECTS);
92:       assertEquals(52, Node.LENGTH);
93:       assertEquals(30, Node.VAR_ARGS_NAME);
94:       assertEquals(1, Node.DECR_FLAG);
95:       assertEquals(12, Node.COLUMN_BITS);
96:       assertEquals(32, Node.INCRDECR_PROP);
97:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
98:       assertEquals(57, Node.LAST_PROP);
99:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
100:       assertEquals(51, Node.STATIC_SOURCE_FILE);
101:       assertEquals(2, Node.POST_FLAG);
102:       assertEquals(50, Node.FREE_CALL);
103:       assertEquals(40, Node.ORIGINALNAME_PROP);
104:       assertEquals(43, Node.IS_CONSTANT_NAME);
105:       assertEquals(46, Node.IS_NAMESPACE);
106:       assertEquals(53, Node.INPUT_ID);
107:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
108:       assertEquals(36, Node.QUOTED_PROP);
109:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
110:       assertEquals(29, Node.JSDOC_INFO_PROP);
111:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
112:       assertEquals(47, Node.IS_DISPATCHER);
113:       assertEquals(48, Node.DIRECTIVES);
114:       assertEquals(37, Node.OPT_ARG_NAME);
115:       assertEquals(39, Node.EMPTY_BLOCK);
116:       assertEquals(55, Node.INFERRED_FUNCTION);
117:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
118:       assertEquals(8, Node.FLAG_NO_THROWS);
119:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
120:       assertEquals(4095, Node.COLUMN_MASK);
121:       assertEquals(49, Node.DIRECT_EVAL);
122:       assertEquals(56, Node.CHANGE_TIME);
123:       assertEquals(57, Node.REFLECTED_OBJECT);
124:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertFalse(iterable0.contains(node0));
128:       assertNotNull(iterable0);
129:       assertFalse(node0.isNew());
130:       assertFalse(node0.isBlock());
131:       assertFalse(node0.isAdd());
132:       assertFalse(node0.isVar());
133:       assertFalse(node0.isName());
134:       assertEquals(39, node0.getType());
135:       assertFalse(node0.isWhile());
136:       assertFalse(node0.isCall());
137:       assertFalse(node0.hasMoreThanOneChild());
138:       assertFalse(node0.isContinue());
139:       assertFalse(node0.isReturn());
140:       assertFalse(node0.isParamList());
141:       assertFalse(node0.isStringKey());
142:       assertEquals((-1), node0.getSourcePosition());
143:       assertFalse(node0.isDebugger());
144:       assertFalse(node0.isExprResult());
145:       assertFalse(node0.isTrue());
146:       assertFalse(node0.isArrayLit());
147:       assertFalse(node0.isDefaultCase());
148:       assertFalse(node0.isVoid());
149:       assertFalse(node0.isLabelName());
150:       assertFalse(node0.isAssign());
151:       assertFalse(node0.hasChildren());
152:       assertFalse(node0.isGetElem());
153:       assertEquals(0, node0.getChildCount());
154:       assertFalse(node0.isDec());
155:       assertFalse(node0.isTypeOf());
156:       assertFalse(node0.isOr());
157:       assertFalse(node0.isLabel());
158:       assertFalse(node0.isAssignAdd());
159:       assertFalse(node0.isDelProp());
160:       assertFalse(node0.isEmpty());
161:       assertFalse(node0.isDo());
162:       assertFalse(node0.isNull());
163:       assertFalse(node0.isHook());
164:       assertFalse(node0.isInc());
165:       assertFalse(node0.isSwitch());
166:       assertFalse(node0.isThrow());
167:       assertFalse(node0.isBreak());
168:       assertFalse(node0.isComma());
169:       assertFalse(node0.isFalse());
170:       assertTrue(node0.isNumber());
171:       assertFalse(node0.isGetProp());
172:       assertFalse(node0.isThis());
173:       assertFalse(node0.isAnd());
174:       assertFalse(node0.isNot());
175:       assertFalse(node0.isString());
176:       assertFalse(node0.isCase());
177:       assertFalse(node0.isScript());
178:       assertEquals((-1), node0.getCharno());
179:       assertFalse(node0.isGetterDef());
180:       assertFalse(node0.isObjectLit());
181:       assertFalse(node0.isTry());
182:       assertFalse(node0.hasOneChild());
183:       assertFalse(node0.isWith());
184:       assertFalse(node0.isFor());
185:       assertFalse(node0.isCatch());
186:       assertFalse(node0.isCast());
187:       assertFalse(node0.isRegExp());
188:       assertFalse(node0.isFunction());
189:       assertEquals((-1), node0.getLineno());
190:       assertFalse(node0.isInstanceOf());
191:       assertFalse(node0.isNE());
192:       assertFalse(node0.isSetterDef());
193:       assertFalse(node0.isIf());
194:       assertFalse(node0.isIn());
195:       assertEquals(54, Node.SLASH_V);
196:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
197:       assertEquals(15, Node.NO_SIDE_EFFECTS);
198:       assertEquals(52, Node.LENGTH);
199:       assertEquals(30, Node.VAR_ARGS_NAME);
200:       assertEquals(1, Node.DECR_FLAG);
201:       assertEquals(12, Node.COLUMN_BITS);
202:       assertEquals(32, Node.INCRDECR_PROP);
203:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
204:       assertEquals(57, Node.LAST_PROP);
205:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
206:       assertEquals(51, Node.STATIC_SOURCE_FILE);
207:       assertEquals(2, Node.POST_FLAG);
208:       assertEquals(50, Node.FREE_CALL);
209:       assertEquals(40, Node.ORIGINALNAME_PROP);
210:       assertEquals(43, Node.IS_CONSTANT_NAME);
211:       assertEquals(46, Node.IS_NAMESPACE);
212:       assertEquals(53, Node.INPUT_ID);
213:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
214:       assertEquals(36, Node.QUOTED_PROP);
215:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
216:       assertEquals(29, Node.JSDOC_INFO_PROP);
217:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
218:       assertEquals(47, Node.IS_DISPATCHER);
219:       assertEquals(48, Node.DIRECTIVES);
220:       assertEquals(37, Node.OPT_ARG_NAME);
221:       assertEquals(39, Node.EMPTY_BLOCK);
222:       assertEquals(55, Node.INFERRED_FUNCTION);
223:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
224:       assertEquals(8, Node.FLAG_NO_THROWS);
225:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
226:       assertEquals(4095, Node.COLUMN_MASK);
227:       assertEquals(49, Node.DIRECT_EVAL);
228:       assertEquals(56, Node.CHANGE_TIME);
229:       assertEquals(57, Node.REFLECTED_OBJECT);
230:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
231:       
232:       boolean boolean0 = node0.isOr();
233:       assertFalse(boolean0);
234:       assertFalse(node0.isNew());
235:       assertFalse(node0.isBlock());
236:       assertFalse(node0.isAdd());
237:       assertFalse(node0.isVar());
238:       assertFalse(node0.isName());
239:       assertEquals(39, node0.getType());
240:       assertFalse(node0.isWhile());
241:       assertFalse(node0.isCall());
242:       assertFalse(node0.hasMoreThanOneChild());
243:       assertFalse(node0.isContinue());
244:       assertFalse(node0.isReturn());
245:       assertFalse(node0.isParamList());
246:       assertFalse(node0.isStringKey());
247:       assertEquals((-1), node0.getSourcePosition());
248:       assertFalse(node0.isDebugger());
249:       assertFalse(node0.isExprResult());
250:       assertFalse(node0.isTrue());
251:       assertFalse(node0.isArrayLit());
252:       assertFalse(node0.isDefaultCase());
253:       assertFalse(node0.isVoid());
254:       assertFalse(node0.isLabelName());
255:       assertFalse(node0.isAssign());
256:       assertFalse(node0.hasChildren());
257:       assertFalse(node0.isGetElem());
258:       assertEquals(0, node0.getChildCount());
259:       assertFalse(node0.isDec());
260:       assertFalse(node0.isTypeOf());
261:       assertFalse(node0.isOr());
262:       assertFalse(node0.isLabel());
263:       assertFalse(node0.isAssignAdd());
264:       assertFalse(node0.isDelProp());
265:       assertFalse(node0.isEmpty());
266:       assertFalse(node0.isDo());
267:       assertFalse(node0.isNull());
268:       assertFalse(node0.isHook());
269:       assertFalse(node0.isInc());
270:       assertFalse(node0.isSwitch());
271:       assertFalse(node0.isThrow());
272:       assertFalse(node0.isBreak());
273:       assertFalse(node0.isComma());
274:       assertFalse(node0.isFalse());
275:       assertTrue(node0.isNumber());
276:       assertFalse(node0.isGetProp());
277:       assertFalse(node0.isThis());
278:       assertFalse(node0.isAnd());
279:       assertFalse(node0.isNot());
280:       assertFalse(node0.isString());
281:       assertFalse(node0.isCase());
282:       assertFalse(node0.isScript());
283:       assertEquals((-1), node0.getCharno());
284:       assertFalse(node0.isGetterDef());
285:       assertFalse(node0.isObjectLit());
286:       assertFalse(node0.isTry());
287:       assertFalse(node0.hasOneChild());
288:       assertFalse(node0.isWith());
289:       assertFalse(node0.isFor());
290:       assertFalse(node0.isCatch());
291:       assertFalse(node0.isCast());
292:       assertFalse(node0.isRegExp());
293:       assertFalse(node0.isFunction());
294:       assertEquals((-1), node0.getLineno());
295:       assertFalse(node0.isInstanceOf());
296:       assertFalse(node0.isNE());
297:       assertFalse(node0.isSetterDef());
298:       assertFalse(node0.isIf());
299:       assertFalse(node0.isIn());
300:       assertEquals(54, Node.SLASH_V);
301:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
302:       assertEquals(15, Node.NO_SIDE_EFFECTS);
303:       assertEquals(52, Node.LENGTH);
304:       assertEquals(30, Node.VAR_ARGS_NAME);
305:       assertEquals(1, Node.DECR_FLAG);
306:       assertEquals(12, Node.COLUMN_BITS);
307:       assertEquals(32, Node.INCRDECR_PROP);
308:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
309:       assertEquals(57, Node.LAST_PROP);
310:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
311:       assertEquals(51, Node.STATIC_SOURCE_FILE);
312:       assertEquals(2, Node.POST_FLAG);
313:       assertEquals(50, Node.FREE_CALL);
314:       assertEquals(40, Node.ORIGINALNAME_PROP);
315:       assertEquals(43, Node.IS_CONSTANT_NAME);
316:       assertEquals(46, Node.IS_NAMESPACE);
317:       assertEquals(53, Node.INPUT_ID);
318:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
319:       assertEquals(36, Node.QUOTED_PROP);
320:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
321:       assertEquals(29, Node.JSDOC_INFO_PROP);
322:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
323:       assertEquals(47, Node.IS_DISPATCHER);
324:       assertEquals(48, Node.DIRECTIVES);
325:       assertEquals(37, Node.OPT_ARG_NAME);
326:       assertEquals(39, Node.EMPTY_BLOCK);
327:       assertEquals(55, Node.INFERRED_FUNCTION);
328:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
329:       assertEquals(8, Node.FLAG_NO_THROWS);
330:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
331:       assertEquals(4095, Node.COLUMN_MASK);
332:       assertEquals(49, Node.DIRECT_EVAL);
333:       assertEquals(56, Node.CHANGE_TIME);
334:       assertEquals(57, Node.REFLECTED_OBJECT);
335:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
336:       
337:       Node node1 = Node.newString("", 429, 40);
338:       assertFalse(node1.equals((Object)node0));
339:       assertNotNull(node1);
340:       assertEquals(429, node1.getLineno());
341:       assertFalse(node1.isVar());
342:       assertFalse(node1.isStringKey());
343:       assertFalse(node1.isBlock());
344:       assertFalse(node1.isWhile());
345:       assertFalse(node1.isNew());
346:       assertTrue(node1.isString());
347:       assertFalse(node1.isAdd());
348:       assertFalse(node1.isSetterDef());
349:       assertFalse(node1.isDo());
350:       assertFalse(node1.isCatch());
351:       assertFalse(node1.hasMoreThanOneChild());
352:       assertFalse(node1.isOr());
353:       assertFalse(node1.isReturn());
354:       assertFalse(node1.isDec());
355:       assertFalse(node1.isRegExp());
356:       assertFalse(node1.isNull());
357:       assertFalse(node1.isTypeOf());
358:       assertFalse(node1.isGetElem());
359:       assertFalse(node1.isName());
360:       assertFalse(node1.isVoid());
361:       assertFalse(node1.isCall());
362:       assertFalse(node1.isCast());
363:       assertFalse(node1.isAssign());
364:       assertFalse(node1.isDebugger());
365:       assertFalse(node1.hasChildren());
366:       assertFalse(node1.isContinue());
367:       assertFalse(node1.isAnd());
368:       assertEquals(40, node1.getType());
369:       assertFalse(node1.isNot());
370:       assertFalse(node1.isObjectLit());
371:       assertFalse(node1.isFunction());
372:       assertFalse(node1.isHook());
373:       assertFalse(node1.isThrow());
374:       assertFalse(node1.isFalse());
375:       assertFalse(node1.isGetProp());
376:       assertFalse(node1.isInc());
377:       assertFalse(node1.isCase());
378:       assertFalse(node1.isIn());
379:       assertFalse(node1.isInstanceOf());
380:       assertFalse(node1.isThis());
381:       assertFalse(node1.isComma());
382:       assertFalse(node1.isIf());
383:       assertFalse(node1.isDelProp());
384:       assertFalse(node1.isNE());
385:       assertFalse(node1.isWith());
386:       assertFalse(node1.isExprResult());
387:       assertFalse(node1.isBreak());
388:       assertEquals(1757224, node1.getSourcePosition());
389:       assertFalse(node1.hasOneChild());
390:       assertFalse(node1.isFor());
391:       assertFalse(node1.isTrue());
392:       assertFalse(node1.isDefaultCase());
393:       assertFalse(node1.isNumber());
394:       assertFalse(node1.isScript());
395:       assertFalse(node1.isGetterDef());
396:       assertFalse(node1.isEmpty());
397:       assertFalse(node1.isTry());
398:       assertEquals(0, node1.getChildCount());
399:       assertFalse(node1.isAssignAdd());
400:       assertFalse(node1.isLabel());
401:       assertFalse(node1.isSwitch());
402:       assertFalse(node1.isParamList());
403:       assertFalse(node1.isLabelName());
404:       assertEquals(40, node1.getCharno());
405:       assertFalse(node1.isArrayLit());
406:       assertEquals(52, Node.LENGTH);
407:       assertEquals(57, Node.REFLECTED_OBJECT);
408:       assertEquals(54, Node.SLASH_V);
409:       assertEquals(40, Node.ORIGINALNAME_PROP);
410:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
411:       assertEquals(15, Node.NO_SIDE_EFFECTS);
412:       assertEquals(8, Node.FLAG_NO_THROWS);
413:       assertEquals(51, Node.STATIC_SOURCE_FILE);
414:       assertEquals(50, Node.FREE_CALL);
415:       assertEquals(32, Node.INCRDECR_PROP);
416:       assertEquals(12, Node.COLUMN_BITS);
417:       assertEquals(4095, Node.COLUMN_MASK);
418:       assertEquals(37, Node.OPT_ARG_NAME);
419:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
420:       assertEquals(48, Node.DIRECTIVES);
421:       assertEquals(49, Node.DIRECT_EVAL);
422:       assertEquals(1, Node.DECR_FLAG);
423:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
424:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
425:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
426:       assertEquals(53, Node.INPUT_ID);
427:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
428:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
429:       assertEquals(43, Node.IS_CONSTANT_NAME);
430:       assertEquals(56, Node.CHANGE_TIME);
431:       assertEquals(29, Node.JSDOC_INFO_PROP);
432:       assertEquals(36, Node.QUOTED_PROP);
433:       assertEquals(46, Node.IS_NAMESPACE);
434:       assertEquals(55, Node.INFERRED_FUNCTION);
435:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
436:       assertEquals(39, Node.EMPTY_BLOCK);
437:       assertEquals(57, Node.LAST_PROP);
438:       assertEquals(47, Node.IS_DISPATCHER);
439:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
440:       assertEquals(2, Node.POST_FLAG);
441:       assertEquals(30, Node.VAR_ARGS_NAME);
442:       
443:       boolean boolean1 = node1.isUnscopedQualifiedName();
444:       assertFalse(node1.equals((Object)node0));
445:       assertTrue(boolean1 == boolean0);
446:       assertFalse(boolean1);
447:       assertEquals(429, node1.getLineno());
448:       assertFalse(node1.isVar());
449:       assertFalse(node1.isStringKey());
450:       assertFalse(node1.isBlock());
451:       assertFalse(node1.isWhile());
452:       assertFalse(node1.isNew());
453:       assertTrue(node1.isString());
454:       assertFalse(node1.isAdd());
455:       assertFalse(node1.isSetterDef());
456:       assertFalse(node1.isDo());
457:       assertFalse(node1.isCatch());
458:       assertFalse(node1.hasMoreThanOneChild());
459:       assertFalse(node1.isOr());
460:       assertFalse(node1.isReturn());
461:       assertFalse(node1.isDec());
462:       assertFalse(node1.isRegExp());
463:       assertFalse(node1.isNull());
464:       assertFalse(node1.isTypeOf());
465:       assertFalse(node1.isGetElem());
466:       assertFalse(node1.isName());
467:       assertFalse(node1.isVoid());
468:       assertFalse(node1.isCall());
469:       assertFalse(node1.isCast());
470:       assertFalse(node1.isAssign());
471:       assertFalse(node1.isDebugger());
472:       assertFalse(node1.hasChildren());
473:       assertFalse(node1.isContinue());
474:       assertFalse(node1.isAnd());
475:       assertEquals(40, node1.getType());
476:       assertFalse(node1.isNot());
477:       assertFalse(node1.isObjectLit());
478:       assertFalse(node1.isFunction());
479:       assertFalse(node1.isHook());
480:       assertFalse(node1.isThrow());
481:       assertFalse(node1.isFalse());
482:       assertFalse(node1.isGetProp());
483:       assertFalse(node1.isInc());
484:       assertFalse(node1.isCase());
485:       assertFalse(node1.isIn());
486:       assertFalse(node1.isInstanceOf());
487:       assertFalse(node1.isThis());
488:       assertFalse(node1.isComma());
489:       assertFalse(node1.isIf());
490:       assertFalse(node1.isDelProp());
491:       assertFalse(node1.isNE());
492:       assertFalse(node1.isWith());
493:       assertFalse(node1.isExprResult());
494:       assertFalse(node1.isBreak());
495:       assertEquals(1757224, node1.getSourcePosition());
496:       assertFalse(node1.hasOneChild());
497:       assertFalse(node1.isFor());
498:       assertFalse(node1.isTrue());
499:       assertFalse(node1.isDefaultCase());
500:       assertFalse(node1.isNumber());
501:       assertFalse(node1.isScript());
502:       assertFalse(node1.isGetterDef());
503:       assertFalse(node1.isEmpty());
504:       assertFalse(node1.isTry());
505:       assertEquals(0, node1.getChildCount());
506:       assertFalse(node1.isAssignAdd());
507:       assertFalse(node1.isLabel());
508:       assertFalse(node1.isSwitch());
509:       assertFalse(node1.isParamList());
510:       assertFalse(node1.isLabelName());
511:       assertEquals(40, node1.getCharno());
512:       assertFalse(node1.isArrayLit());
513:       assertEquals(52, Node.LENGTH);
514:       assertEquals(57, Node.REFLECTED_OBJECT);
515:       assertEquals(54, Node.SLASH_V);
516:       assertEquals(40, Node.ORIGINALNAME_PROP);
517:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
518:       assertEquals(15, Node.NO_SIDE_EFFECTS);
519:       assertEquals(8, Node.FLAG_NO_THROWS);
520:       assertEquals(51, Node.STATIC_SOURCE_FILE);
521:       assertEquals(50, Node.FREE_CALL);
522:       assertEquals(32, Node.INCRDECR_PROP);
523:       assertEquals(12, Node.COLUMN_BITS);
524:       assertEquals(4095, Node.COLUMN_MASK);
525:       assertEquals(37, Node.OPT_ARG_NAME);
526:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
527:       assertEquals(48, Node.DIRECTIVES);
528:       assertEquals(49, Node.DIRECT_EVAL);
529:       assertEquals(1, Node.DECR_FLAG);
530:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
531:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
532:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
533:       assertEquals(53, Node.INPUT_ID);
534:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
535:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
536:       assertEquals(43, Node.IS_CONSTANT_NAME);
537:       assertEquals(56, Node.CHANGE_TIME);
538:       assertEquals(29, Node.JSDOC_INFO_PROP);
539:       assertEquals(36, Node.QUOTED_PROP);
540:       assertEquals(46, Node.IS_NAMESPACE);
541:       assertEquals(55, Node.INFERRED_FUNCTION);
542:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
543:       assertEquals(39, Node.EMPTY_BLOCK);
544:       assertEquals(57, Node.LAST_PROP);
545:       assertEquals(47, Node.IS_DISPATCHER);
546:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
547:       assertEquals(2, Node.POST_FLAG);
548:       assertEquals(30, Node.VAR_ARGS_NAME);
549:       
550:       Node node2 = Node.newString("", 56, 42);
551:       assertNotSame(node2, node1);
552:       assertFalse(node2.equals((Object)node0));
553:       assertFalse(node2.equals((Object)node1));
554:       assertNotNull(node2);
555:       assertFalse(node2.hasChildren());
556:       assertFalse(node2.isNumber());
557:       assertFalse(node2.isLabelName());
558:       assertFalse(node2.isAssign());
559:       assertFalse(node2.isTypeOf());
560:       assertFalse(node2.isDec());
561:       assertFalse(node2.isAssignAdd());
562:       assertFalse(node2.isOr());
563:       assertFalse(node2.hasOneChild());
564:       assertFalse(node2.isScript());
565:       assertFalse(node2.isWith());
566:       assertFalse(node2.isBlock());
567:       assertFalse(node2.isWhile());
568:       assertFalse(node2.isReturn());
569:       assertFalse(node2.isExprResult());
570:       assertFalse(node2.isCall());
571:       assertFalse(node2.hasMoreThanOneChild());
572:       assertFalse(node2.isGetElem());
573:       assertFalse(node2.isInstanceOf());
574:       assertFalse(node2.isComma());
575:       assertFalse(node2.isThrow());
576:       assertFalse(node2.isObjectLit());
577:       assertFalse(node2.isInc());
578:       assertFalse(node2.isSetterDef());
579:       assertFalse(node2.isGetProp());
580:       assertFalse(node2.isNot());
581:       assertFalse(node2.isDebugger());
582:       assertFalse(node2.isAnd());
583:       assertEquals(40, node2.getType());
584:       assertFalse(node2.isContinue());
585:       assertFalse(node2.isFalse());
586:       assertFalse(node2.isFunction());
587:       assertEquals(42, node2.getCharno());
588:       assertFalse(node2.isCast());
589:       assertFalse(node2.isDelProp());
590:       assertFalse(node2.isIf());
591:       assertFalse(node2.isGetterDef());
592:       assertFalse(node2.isNE());
593:       assertFalse(node2.isFor());
594:       assertFalse(node2.isIn());
595:       assertEquals(229418, node2.getSourcePosition());
596:       assertFalse(node2.isTry());
597:       assertFalse(node2.isEmpty());
598:       assertFalse(node2.isCase());
599:       assertFalse(node2.isRegExp());
600:       assertFalse(node2.isTrue());
601:       assertFalse(node2.isVoid());
602:       assertFalse(node2.isHook());
603:       assertFalse(node2.isCatch());
604:       assertFalse(node2.isBreak());
605:       assertFalse(node2.isName());
606:       assertFalse(node2.isThis());
607:       assertFalse(node2.isNull());
608:       assertFalse(node2.isVar());
609:       assertFalse(node2.isParamList());
610:       assertFalse(node2.isStringKey());
611:       assertTrue(node2.isString());
612:       assertFalse(node2.isNew());
613:       assertFalse(node2.isAdd());
614:       assertFalse(node2.isDefaultCase());
615:       assertEquals(56, node2.getLineno());
616:       assertFalse(node2.isDo());
617:       assertFalse(node2.isSwitch());
618:       assertEquals(0, node2.getChildCount());
619:       assertFalse(node2.isArrayLit());
620:       assertFalse(node2.isLabel());
621:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
622:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
623:       assertEquals(37, Node.OPT_ARG_NAME);
624:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
625:       assertEquals(29, Node.JSDOC_INFO_PROP);
626:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
627:       assertEquals(43, Node.IS_CONSTANT_NAME);
628:       assertEquals(51, Node.STATIC_SOURCE_FILE);
629:       assertEquals(36, Node.QUOTED_PROP);
630:       assertEquals(56, Node.CHANGE_TIME);
631:       assertEquals(46, Node.IS_NAMESPACE);
632:       assertEquals(1, Node.DECR_FLAG);
633:       assertEquals(49, Node.DIRECT_EVAL);
634:       assertEquals(4095, Node.COLUMN_MASK);
635:       assertEquals(32, Node.INCRDECR_PROP);
636:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
637:       assertEquals(12, Node.COLUMN_BITS);
638:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
639:       assertEquals(50, Node.FREE_CALL);
640:       assertEquals(8, Node.FLAG_NO_THROWS);
641:       assertEquals(39, Node.EMPTY_BLOCK);
642:       assertEquals(40, Node.ORIGINALNAME_PROP);
643:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
644:       assertEquals(52, Node.LENGTH);
645:       assertEquals(48, Node.DIRECTIVES);
646:       assertEquals(57, Node.REFLECTED_OBJECT);
647:       assertEquals(54, Node.SLASH_V);
648:       assertEquals(30, Node.VAR_ARGS_NAME);
649:       assertEquals(57, Node.LAST_PROP);
650:       assertEquals(55, Node.INFERRED_FUNCTION);
651:       assertEquals(15, Node.NO_SIDE_EFFECTS);
652:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
653:       assertEquals(53, Node.INPUT_ID);
654:       assertEquals(2, Node.POST_FLAG);
655:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
656:       assertEquals(47, Node.IS_DISPATCHER);
657:       
658:       node0.putProp(1528, node1);
659:       assertNotSame(node1, node2);
660:       assertFalse(node0.equals((Object)node2));
661:       assertFalse(node0.equals((Object)node1));
662:       assertFalse(node1.equals((Object)node0));
663:       assertFalse(node1.equals((Object)node2));
664:       assertFalse(node0.isNew());
665:       assertFalse(node0.isBlock());
666:       assertFalse(node0.isAdd());
667:       assertFalse(node0.isVar());
668:       assertFalse(node0.isName());
669:       assertEquals(39, node0.getType());
670:       assertFalse(node0.isWhile());
671:       assertFalse(node0.isCall());
672:       assertFalse(node0.hasMoreThanOneChild());
673:       assertFalse(node0.isContinue());
674:       assertFalse(node0.isReturn());
675:       assertFalse(node0.isParamList());
676:       assertFalse(node0.isStringKey());
677:       assertEquals((-1), node0.getSourcePosition());
678:       assertFalse(node0.isDebugger());
679:       assertFalse(node0.isExprResult());
680:       assertFalse(node0.isTrue());
681:       assertFalse(node0.isArrayLit());
682:       assertFalse(node0.isDefaultCase());
683:       assertFalse(node0.isVoid());
684:       assertFalse(node0.isLabelName());
685:       assertFalse(node0.isAssign());
686:       assertFalse(node0.hasChildren());
687:       assertFalse(node0.isGetElem());
688:       assertEquals(0, node0.getChildCount());
689:       assertFalse(node0.isDec());
690:       assertFalse(node0.isTypeOf());
691:       assertFalse(node0.isOr());
692:       assertFalse(node0.isLabel());
693:       assertFalse(node0.isAssignAdd());
694:       assertFalse(node0.isDelProp());
695:       assertFalse(node0.isEmpty());
696:       assertFalse(node0.isDo());
697:       assertFalse(node0.isNull());
698:       assertFalse(node0.isHook());
699:       assertFalse(node0.isInc());
700:       assertFalse(node0.isSwitch());
701:       assertFalse(node0.isThrow());
702:       assertFalse(node0.isBreak());
703:       assertFalse(node0.isComma());
704:       assertFalse(node0.isFalse());
705:       assertTrue(node0.isNumber());
706:       assertFalse(node0.isGetProp());
707:       assertFalse(node0.isThis());
708:       assertFalse(node0.isAnd());
709:       assertFalse(node0.isNot());
710:       assertFalse(node0.isString());
711:       assertFalse(node0.isCase());
712:       assertFalse(node0.isScript());
713:       assertEquals((-1), node0.getCharno());
714:       assertFalse(node0.isGetterDef());
715:       assertFalse(node0.isObjectLit());
716:       assertFalse(node0.isTry());
717:       assertFalse(node0.hasOneChild());
718:       assertFalse(node0.isWith());
719:       assertFalse(node0.isFor());
720:       assertFalse(node0.isCatch());
721:       assertFalse(node0.isCast());
722:       assertFalse(node0.isRegExp());
723:       assertFalse(node0.isFunction());
724:       assertEquals((-1), node0.getLineno());
725:       assertFalse(node0.isInstanceOf());
726:       assertFalse(node0.isNE());
727:       assertFalse(node0.isSetterDef());
728:       assertFalse(node0.isIf());
729:       assertFalse(node0.isIn());
730:       assertEquals(429, node1.getLineno());
731:       assertFalse(node1.isVar());
732:       assertFalse(node1.isStringKey());
733:       assertFalse(node1.isBlock());
734:       assertFalse(node1.isWhile());
735:       assertFalse(node1.isNew());
736:       assertTrue(node1.isString());
737:       assertFalse(node1.isAdd());
738:       assertFalse(node1.isSetterDef());
739:       assertFalse(node1.isDo());
740:       assertFalse(node1.isCatch());
741:       assertFalse(node1.hasMoreThanOneChild());
742:       assertFalse(node1.isOr());
743:       assertFalse(node1.isReturn());
744:       assertFalse(node1.isDec());
745:       assertFalse(node1.isRegExp());
746:       assertFalse(node1.isNull());
747:       assertFalse(node1.isTypeOf());
748:       assertFalse(node1.isGetElem());
749:       assertFalse(node1.isName());
750:       assertFalse(node1.isVoid());
751:       assertFalse(node1.isCall());
752:       assertFalse(node1.isCast());
753:       assertFalse(node1.isAssign());
754:       assertFalse(node1.isDebugger());
755:       assertFalse(node1.hasChildren());
756:       assertFalse(node1.isContinue());
757:       assertFalse(node1.isAnd());
758:       assertEquals(40, node1.getType());
759:       assertFalse(node1.isNot());
760:       assertFalse(node1.isObjectLit());
761:       assertFalse(node1.isFunction());
762:       assertFalse(node1.isHook());
763:       assertFalse(node1.isThrow());
764:       assertFalse(node1.isFalse());
765:       assertFalse(node1.isGetProp());
766:       assertFalse(node1.isInc());
767:       assertFalse(node1.isCase());
768:       assertFalse(node1.isIn());
769:       assertFalse(node1.isInstanceOf());
770:       assertFalse(node1.isThis());
771:       assertFalse(node1.isComma());
772:       assertFalse(node1.isIf());
773:       assertFalse(node1.isDelProp());
774:       assertFalse(node1.isNE());
775:       assertFalse(node1.isWith());
776:       assertFalse(node1.isExprResult());
777:       assertFalse(node1.isBreak());
778:       assertEquals(1757224, node1.getSourcePosition());
779:       assertFalse(node1.hasOneChild());
780:       assertFalse(node1.isFor());
781:       assertFalse(node1.isTrue());
782:       assertFalse(node1.isDefaultCase());
783:       assertFalse(node1.isNumber());
784:       assertFalse(node1.isScript());
785:       assertFalse(node1.isGetterDef());
786:       assertFalse(node1.isEmpty());
787:       assertFalse(node1.isTry());
788:       assertEquals(0, node1.getChildCount());
789:       assertFalse(node1.isAssignAdd());
790:       assertFalse(node1.isLabel());
791:       assertFalse(node1.isSwitch());
792:       assertFalse(node1.isParamList());
793:       assertFalse(node1.isLabelName());
794:       assertEquals(40, node1.getCharno());
795:       assertFalse(node1.isArrayLit());
796:       assertEquals(54, Node.SLASH_V);
797:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
798:       assertEquals(15, Node.NO_SIDE_EFFECTS);
799:       assertEquals(52, Node.LENGTH);
800:       assertEquals(30, Node.VAR_ARGS_NAME);
801:       assertEquals(1, Node.DECR_FLAG);
802:       assertEquals(12, Node.COLUMN_BITS);
803:       assertEquals(32, Node.INCRDECR_PROP);
804:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
805:       assertEquals(57, Node.LAST_PROP);
806:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
807:       assertEquals(51, Node.STATIC_SOURCE_FILE);
808:       assertEquals(2, Node.POST_FLAG);
809:       assertEquals(50, Node.FREE_CALL);
810:       assertEquals(40, Node.ORIGINALNAME_PROP);
811:       assertEquals(43, Node.IS_CONSTANT_NAME);
812:       assertEquals(46, Node.IS_NAMESPACE);
813:       assertEquals(53, Node.INPUT_ID);
814:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
815:       assertEquals(36, Node.QUOTED_PROP);
816:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
817:       assertEquals(29, Node.JSDOC_INFO_PROP);
818:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
819:       assertEquals(47, Node.IS_DISPATCHER);
820:       assertEquals(48, Node.DIRECTIVES);
821:       assertEquals(37, Node.OPT_ARG_NAME);
822:       assertEquals(39, Node.EMPTY_BLOCK);
823:       assertEquals(55, Node.INFERRED_FUNCTION);
824:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
825:       assertEquals(8, Node.FLAG_NO_THROWS);
826:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
827:       assertEquals(4095, Node.COLUMN_MASK);
828:       assertEquals(49, Node.DIRECT_EVAL);
829:       assertEquals(56, Node.CHANGE_TIME);
830:       assertEquals(57, Node.REFLECTED_OBJECT);
831:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
832:       assertEquals(52, Node.LENGTH);
833:       assertEquals(57, Node.REFLECTED_OBJECT);
834:       assertEquals(54, Node.SLASH_V);
835:       assertEquals(40, Node.ORIGINALNAME_PROP);
836:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
837:       assertEquals(15, Node.NO_SIDE_EFFECTS);
838:       assertEquals(8, Node.FLAG_NO_THROWS);
839:       assertEquals(51, Node.STATIC_SOURCE_FILE);
840:       assertEquals(50, Node.FREE_CALL);
841:       assertEquals(32, Node.INCRDECR_PROP);
842:       assertEquals(12, Node.COLUMN_BITS);
843:       assertEquals(4095, Node.COLUMN_MASK);
844:       assertEquals(37, Node.OPT_ARG_NAME);
845:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
846:       assertEquals(48, Node.DIRECTIVES);
847:       assertEquals(49, Node.DIRECT_EVAL);
848:       assertEquals(1, Node.DECR_FLAG);
849:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
850:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
851:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
852:       assertEquals(53, Node.INPUT_ID);
853:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
854:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
855:       assertEquals(43, Node.IS_CONSTANT_NAME);
856:       assertEquals(56, Node.CHANGE_TIME);
857:       assertEquals(29, Node.JSDOC_INFO_PROP);
858:       assertEquals(36, Node.QUOTED_PROP);
859:       assertEquals(46, Node.IS_NAMESPACE);
860:       assertEquals(55, Node.INFERRED_FUNCTION);
861:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
862:       assertEquals(39, Node.EMPTY_BLOCK);
863:       assertEquals(57, Node.LAST_PROP);
864:       assertEquals(47, Node.IS_DISPATCHER);
865:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
866:       assertEquals(2, Node.POST_FLAG);
867:       assertEquals(30, Node.VAR_ARGS_NAME);
868:       
869:       StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
870:       assertNotSame(node1, node2);
871:       assertFalse(node1.equals((Object)node0));
872:       assertFalse(node1.equals((Object)node2));
873:       assertNull(staticSourceFile0);
874:       assertEquals(429, node1.getLineno());
875:       assertFalse(node1.isVar());
876:       assertFalse(node1.isStringKey());
877:       assertFalse(node1.isBlock());
878:       assertFalse(node1.isWhile());
879:       assertFalse(node1.isNew());
880:       assertTrue(node1.isString());
881:       assertFalse(node1.isAdd());
882:       assertFalse(node1.isSetterDef());
883:       assertFalse(node1.isDo());
884:       assertFalse(node1.isCatch());
885:       assertFalse(node1.hasMoreThanOneChild());
886:       assertFalse(node1.isOr());
887:       assertFalse(node1.isReturn());
888:       assertFalse(node1.isDec());
889:       assertFalse(node1.isRegExp());
890:       assertFalse(node1.isNull());
891:       assertFalse(node1.isTypeOf());
892:       assertFalse(node1.isGetElem());
893:       assertFalse(node1.isName());
894:       assertFalse(node1.isVoid());
895:       assertFalse(node1.isCall());
896:       assertFalse(node1.isCast());
897:       assertFalse(node1.isAssign());
898:       assertFalse(node1.isDebugger());
899:       assertFalse(node1.hasChildren());
900:       assertFalse(node1.isContinue());
901:       assertFalse(node1.isAnd());
902:       assertEquals(40, node1.getType());
903:       assertFalse(node1.isNot());
904:       assertFalse(node1.isObjectLit());
905:       assertFalse(node1.isFunction());
906:       assertFalse(node1.isHook());
907:       assertFalse(node1.isThrow());
908:       assertFalse(node1.isFalse());
909:       assertFalse(node1.isGetProp());
910:       assertFalse(node1.isInc());
911:       assertFalse(node1.isCase());
912:       assertFalse(node1.isIn());
913:       assertFalse(node1.isInstanceOf());
914:       assertFalse(node1.isThis());
915:       assertFalse(node1.isComma());
916:       assertFalse(node1.isIf());
917:       assertFalse(node1.isDelProp());
918:       assertFalse(node1.isNE());
919:       assertFalse(node1.isWith());
920:       assertFalse(node1.isExprResult());
921:       assertFalse(node1.isBreak());
922:       assertEquals(1757224, node1.getSourcePosition());
923:       assertFalse(node1.hasOneChild());
924:       assertFalse(node1.isFor());
925:       assertFalse(node1.isTrue());
926:       assertFalse(node1.isDefaultCase());
927:       assertFalse(node1.isNumber());
928:       assertFalse(node1.isScript());
929:       assertFalse(node1.isGetterDef());
930:       assertFalse(node1.isEmpty());
931:       assertFalse(node1.isTry());
932:       assertEquals(0, node1.getChildCount());
933:       assertFalse(node1.isAssignAdd());
934:       assertFalse(node1.isLabel());
935:       assertFalse(node1.isSwitch());
936:       assertFalse(node1.isParamList());
937:       assertFalse(node1.isLabelName());
938:       assertEquals(40, node1.getCharno());
939:       assertFalse(node1.isArrayLit());
940:       assertEquals(52, Node.LENGTH);
941:       assertEquals(57, Node.REFLECTED_OBJECT);
942:       assertEquals(54, Node.SLASH_V);
943:       assertEquals(40, Node.ORIGINALNAME_PROP);
944:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
945:       assertEquals(15, Node.NO_SIDE_EFFECTS);
946:       assertEquals(8, Node.FLAG_NO_THROWS);
947:       assertEquals(51, Node.STATIC_SOURCE_FILE);
948:       assertEquals(50, Node.FREE_CALL);
949:       assertEquals(32, Node.INCRDECR_PROP);
950:       assertEquals(12, Node.COLUMN_BITS);
951:       assertEquals(4095, Node.COLUMN_MASK);
952:       assertEquals(37, Node.OPT_ARG_NAME);
953:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
954:       assertEquals(48, Node.DIRECTIVES);
955:       assertEquals(49, Node.DIRECT_EVAL);
956:       assertEquals(1, Node.DECR_FLAG);
957:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
958:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
959:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
960:       assertEquals(53, Node.INPUT_ID);
961:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
962:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
963:       assertEquals(43, Node.IS_CONSTANT_NAME);
964:       assertEquals(56, Node.CHANGE_TIME);
965:       assertEquals(29, Node.JSDOC_INFO_PROP);
966:       assertEquals(36, Node.QUOTED_PROP);
967:       assertEquals(46, Node.IS_NAMESPACE);
968:       assertEquals(55, Node.INFERRED_FUNCTION);
969:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
970:       assertEquals(39, Node.EMPTY_BLOCK);
971:       assertEquals(57, Node.LAST_PROP);
972:       assertEquals(47, Node.IS_DISPATCHER);
973:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
974:       assertEquals(2, Node.POST_FLAG);
975:       assertEquals(30, Node.VAR_ARGS_NAME);
976:       
977:       node1.setStaticSourceFile((StaticSourceFile) null);
978:       assertNotSame(node1, node2);
979:       assertFalse(node1.equals((Object)node0));
980:       assertFalse(node1.equals((Object)node2));
981:       assertEquals(429, node1.getLineno());
982:       assertFalse(node1.isVar());
983:       assertFalse(node1.isStringKey());
984:       assertFalse(node1.isBlock());
985:       assertFalse(node1.isWhile());
986:       assertFalse(node1.isNew());
987:       assertTrue(node1.isString());
988:       assertFalse(node1.isAdd());
989:       assertFalse(node1.isSetterDef());
990:       assertFalse(node1.isDo());
991:       assertFalse(node1.isCatch());
992:       assertFalse(node1.hasMoreThanOneChild());
993:       assertFalse(node1.isOr());
994:       assertFalse(node1.isReturn());
995:       assertFalse(node1.isDec());
996:       assertFalse(node1.isRegExp());
997:       assertFalse(node1.isNull());
998:       assertFalse(node1.isTypeOf());
999:       assertFalse(node1.isGetElem());
1000:       assertFalse(node1.isName());
1001:       assertFalse(node1.isVoid());
1002:       assertFalse(node1.isCall());
1003:       assertFalse(node1.isCast());
1004:       assertFalse(node1.isAssign());
1005:       assertFalse(node1.isDebugger());
1006:       assertFalse(node1.hasChildren());
1007:       assertFalse(node1.isContinue());
1008:       assertFalse(node1.isAnd());
1009:       assertEquals(40, node1.getType());
1010:       assertFalse(node1.isNot());
1011:       assertFalse(node1.isObjectLit());
1012:       assertFalse(node1.isFunction());
1013:       assertFalse(node1.isHook());
1014:       assertFalse(node1.isThrow());
1015:       assertFalse(node1.isFalse());
1016:       assertFalse(node1.isGetProp());
1017:       assertFalse(node1.isInc());
1018:       assertFalse(node1.isCase());
1019:       assertFalse(node1.isIn());
1020:       assertFalse(node1.isInstanceOf());
1021:       assertFalse(node1.isThis());
1022:       assertFalse(node1.isComma());
1023:       assertFalse(node1.isIf());
1024:       assertFalse(node1.isDelProp());
1025:       assertFalse(node1.isNE());
1026:       assertFalse(node1.isWith());
1027:       assertFalse(node1.isExprResult());
1028:       assertFalse(node1.isBreak());
1029:       assertEquals(1757224, node1.getSourcePosition());
1030:       assertFalse(node1.hasOneChild());
1031:       assertFalse(node1.isFor());
1032:       assertFalse(node1.isTrue());
1033:       assertFalse(node1.isDefaultCase());
1034:       assertFalse(node1.isNumber());
1035:       assertFalse(node1.isScript());
1036:       assertFalse(node1.isGetterDef());
1037:       assertFalse(node1.isEmpty());
1038:       assertFalse(node1.isTry());
1039:       assertEquals(0, node1.getChildCount());
1040:       assertFalse(node1.isAssignAdd());
1041:       assertFalse(node1.isLabel());
1042:       assertFalse(node1.isSwitch());
1043:       assertFalse(node1.isParamList());
1044:       assertFalse(node1.isLabelName());
1045:       assertEquals(40, node1.getCharno());
1046:       assertFalse(node1.isArrayLit());
1047:       assertEquals(52, Node.LENGTH);
1048:       assertEquals(57, Node.REFLECTED_OBJECT);
1049:       assertEquals(54, Node.SLASH_V);
1050:       assertEquals(40, Node.ORIGINALNAME_PROP);
1051:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1052:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1053:       assertEquals(8, Node.FLAG_NO_THROWS);
1054:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1055:       assertEquals(50, Node.FREE_CALL);
1056:       assertEquals(32, Node.INCRDECR_PROP);
1057:       assertEquals(12, Node.COLUMN_BITS);
1058:       assertEquals(4095, Node.COLUMN_MASK);
1059:       assertEquals(37, Node.OPT_ARG_NAME);
1060:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1061:       assertEquals(48, Node.DIRECTIVES);
1062:       assertEquals(49, Node.DIRECT_EVAL);
1063:       assertEquals(1, Node.DECR_FLAG);
1064:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1065:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1066:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1067:       assertEquals(53, Node.INPUT_ID);
1068:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1069:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1070:       assertEquals(43, Node.IS_CONSTANT_NAME);
1071:       assertEquals(56, Node.CHANGE_TIME);
1072:       assertEquals(29, Node.JSDOC_INFO_PROP);
1073:       assertEquals(36, Node.QUOTED_PROP);
1074:       assertEquals(46, Node.IS_NAMESPACE);
1075:       assertEquals(55, Node.INFERRED_FUNCTION);
1076:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1077:       assertEquals(39, Node.EMPTY_BLOCK);
1078:       assertEquals(57, Node.LAST_PROP);
1079:       assertEquals(47, Node.IS_DISPATCHER);
1080:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1081:       assertEquals(2, Node.POST_FLAG);
1082:       assertEquals(30, Node.VAR_ARGS_NAME);
1083:       
1084:       boolean boolean2 = node0.isDec();
1085:       assertFalse(node0.equals((Object)node2));
1086:       assertFalse(node0.equals((Object)node1));
1087:       assertTrue(boolean2 == boolean1);
1088:       assertTrue(boolean2 == boolean0);
1089:       assertFalse(boolean2);
1090:       assertFalse(node0.isNew());
1091:       assertFalse(node0.isBlock());
1092:       assertFalse(node0.isAdd());
1093:       assertFalse(node0.isVar());
1094:       assertFalse(node0.isName());
1095:       assertEquals(39, node0.getType());
1096:       assertFalse(node0.isWhile());
1097:       assertFalse(node0.isCall());
1098:       assertFalse(node0.hasMoreThanOneChild());
1099:       assertFalse(node0.isContinue());
1100:       assertFalse(node0.isReturn());
1101:       assertFalse(node0.isParamList());
1102:       assertFalse(node0.isStringKey());
1103:       assertEquals((-1), node0.getSourcePosition());
1104:       assertFalse(node0.isDebugger());
1105:       assertFalse(node0.isExprResult());
1106:       assertFalse(node0.isTrue());
1107:       assertFalse(node0.isArrayLit());
1108:       assertFalse(node0.isDefaultCase());
1109:       assertFalse(node0.isVoid());
1110:       assertFalse(node0.isLabelName());
1111:       assertFalse(node0.isAssign());
1112:       assertFalse(node0.hasChildren());
1113:       assertFalse(node0.isGetElem());
1114:       assertEquals(0, node0.getChildCount());
1115:       assertFalse(node0.isDec());
1116:       assertFalse(node0.isTypeOf());
1117:       assertFalse(node0.isOr());
1118:       assertFalse(node0.isLabel());
1119:       assertFalse(node0.isAssignAdd());
1120:       assertFalse(node0.isDelProp());
1121:       assertFalse(node0.isEmpty());
1122:       assertFalse(node0.isDo());
1123:       assertFalse(node0.isNull());
1124:       assertFalse(node0.isHook());
1125:       assertFalse(node0.isInc());
1126:       assertFalse(node0.isSwitch());
1127:       assertFalse(node0.isThrow());
1128:       assertFalse(node0.isBreak());
1129:       assertFalse(node0.isComma());
1130:       assertFalse(node0.isFalse());
1131:       assertTrue(node0.isNumber());
1132:       assertFalse(node0.isGetProp());
1133:       assertFalse(node0.isThis());
1134:       assertFalse(node0.isAnd());
1135:       assertFalse(node0.isNot());
1136:       assertFalse(node0.isString());
1137:       assertFalse(node0.isCase());
1138:       assertFalse(node0.isScript());
1139:       assertEquals((-1), node0.getCharno());
1140:       assertFalse(node0.isGetterDef());
1141:       assertFalse(node0.isObjectLit());
1142:       assertFalse(node0.isTry());
1143:       assertFalse(node0.hasOneChild());
1144:       assertFalse(node0.isWith());
1145:       assertFalse(node0.isFor());
1146:       assertFalse(node0.isCatch());
1147:       assertFalse(node0.isCast());
1148:       assertFalse(node0.isRegExp());
1149:       assertFalse(node0.isFunction());
1150:       assertEquals((-1), node0.getLineno());
1151:       assertFalse(node0.isInstanceOf());
1152:       assertFalse(node0.isNE());
1153:       assertFalse(node0.isSetterDef());
1154:       assertFalse(node0.isIf());
1155:       assertFalse(node0.isIn());
1156:       assertEquals(54, Node.SLASH_V);
1157:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1158:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1159:       assertEquals(52, Node.LENGTH);
1160:       assertEquals(30, Node.VAR_ARGS_NAME);
1161:       assertEquals(1, Node.DECR_FLAG);
1162:       assertEquals(12, Node.COLUMN_BITS);
1163:       assertEquals(32, Node.INCRDECR_PROP);
1164:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1165:       assertEquals(57, Node.LAST_PROP);
1166:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1167:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1168:       assertEquals(2, Node.POST_FLAG);
1169:       assertEquals(50, Node.FREE_CALL);
1170:       assertEquals(40, Node.ORIGINALNAME_PROP);
1171:       assertEquals(43, Node.IS_CONSTANT_NAME);
1172:       assertEquals(46, Node.IS_NAMESPACE);
1173:       assertEquals(53, Node.INPUT_ID);
1174:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1175:       assertEquals(36, Node.QUOTED_PROP);
1176:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1177:       assertEquals(29, Node.JSDOC_INFO_PROP);
1178:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1179:       assertEquals(47, Node.IS_DISPATCHER);
1180:       assertEquals(48, Node.DIRECTIVES);
1181:       assertEquals(37, Node.OPT_ARG_NAME);
1182:       assertEquals(39, Node.EMPTY_BLOCK);
1183:       assertEquals(55, Node.INFERRED_FUNCTION);
1184:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1185:       assertEquals(8, Node.FLAG_NO_THROWS);
1186:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1187:       assertEquals(4095, Node.COLUMN_MASK);
1188:       assertEquals(49, Node.DIRECT_EVAL);
1189:       assertEquals(56, Node.CHANGE_TIME);
1190:       assertEquals(57, Node.REFLECTED_OBJECT);
1191:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1192:       
1193:       boolean boolean3 = node2.isDec();
1194:       assertNotSame(node2, node1);
1195:       assertFalse(node2.equals((Object)node0));
1196:       assertFalse(node2.equals((Object)node1));
1197:       assertTrue(boolean3 == boolean2);
1198:       assertTrue(boolean3 == boolean0);
1199:       assertTrue(boolean3 == boolean1);
1200:       assertFalse(boolean3);
1201:       assertFalse(node2.hasChildren());
1202:       assertFalse(node2.isNumber());
1203:       assertFalse(node2.isLabelName());
1204:       assertFalse(node2.isAssign());
1205:       assertFalse(node2.isTypeOf());
1206:       assertFalse(node2.isDec());
1207:       assertFalse(node2.isAssignAdd());
1208:       assertFalse(node2.isOr());
1209:       assertFalse(node2.hasOneChild());
1210:       assertFalse(node2.isScript());
1211:       assertFalse(node2.isWith());
1212:       assertFalse(node2.isBlock());
1213:       assertFalse(node2.isWhile());
1214:       assertFalse(node2.isReturn());
1215:       assertFalse(node2.isExprResult());
1216:       assertFalse(node2.isCall());
1217:       assertFalse(node2.hasMoreThanOneChild());
1218:       assertFalse(node2.isGetElem());
1219:       assertFalse(node2.isInstanceOf());
1220:       assertFalse(node2.isComma());
1221:       assertFalse(node2.isThrow());
1222:       assertFalse(node2.isObjectLit());
1223:       assertFalse(node2.isInc());
1224:       assertFalse(node2.isSetterDef());
1225:       assertFalse(node2.isGetProp());
1226:       assertFalse(node2.isNot());
1227:       assertFalse(node2.isDebugger());
1228:       assertFalse(node2.isAnd());
1229:       assertEquals(40, node2.getType());
1230:       assertFalse(node2.isContinue());
1231:       assertFalse(node2.isFalse());
1232:       assertFalse(node2.isFunction());
1233:       assertEquals(42, node2.getCharno());
1234:       assertFalse(node2.isCast());
1235:       assertFalse(node2.isDelProp());
1236:       assertFalse(node2.isIf());
1237:       assertFalse(node2.isGetterDef());
1238:       assertFalse(node2.isNE());
1239:       assertFalse(node2.isFor());
1240:       assertFalse(node2.isIn());
1241:       assertEquals(229418, node2.getSourcePosition());
1242:       assertFalse(node2.isTry());
1243:       assertFalse(node2.isEmpty());
1244:       assertFalse(node2.isCase());
1245:       assertFalse(node2.isRegExp());
1246:       assertFalse(node2.isTrue());
1247:       assertFalse(node2.isVoid());
1248:       assertFalse(node2.isHook());
1249:       assertFalse(node2.isCatch());
1250:       assertFalse(node2.isBreak());
1251:       assertFalse(node2.isName());
1252:       assertFalse(node2.isThis());
1253:       assertFalse(node2.isNull());
1254:       assertFalse(node2.isVar());
1255:       assertFalse(node2.isParamList());
1256:       assertFalse(node2.isStringKey());
1257:       assertTrue(node2.isString());
1258:       assertFalse(node2.isNew());
1259:       assertFalse(node2.isAdd());
1260:       assertFalse(node2.isDefaultCase());
1261:       assertEquals(56, node2.getLineno());
1262:       assertFalse(node2.isDo());
1263:       assertFalse(node2.isSwitch());
1264:       assertEquals(0, node2.getChildCount());
1265:       assertFalse(node2.isArrayLit());
1266:       assertFalse(node2.isLabel());
1267:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1268:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1269:       assertEquals(37, Node.OPT_ARG_NAME);
1270:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1271:       assertEquals(29, Node.JSDOC_INFO_PROP);
1272:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1273:       assertEquals(43, Node.IS_CONSTANT_NAME);
1274:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1275:       assertEquals(36, Node.QUOTED_PROP);
1276:       assertEquals(56, Node.CHANGE_TIME);
1277:       assertEquals(46, Node.IS_NAMESPACE);
1278:       assertEquals(1, Node.DECR_FLAG);
1279:       assertEquals(49, Node.DIRECT_EVAL);
1280:       assertEquals(4095, Node.COLUMN_MASK);
1281:       assertEquals(32, Node.INCRDECR_PROP);
1282:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1283:       assertEquals(12, Node.COLUMN_BITS);
1284:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1285:       assertEquals(50, Node.FREE_CALL);
1286:       assertEquals(8, Node.FLAG_NO_THROWS);
1287:       assertEquals(39, Node.EMPTY_BLOCK);
1288:       assertEquals(40, Node.ORIGINALNAME_PROP);
1289:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1290:       assertEquals(52, Node.LENGTH);
1291:       assertEquals(48, Node.DIRECTIVES);
1292:       assertEquals(57, Node.REFLECTED_OBJECT);
1293:       assertEquals(54, Node.SLASH_V);
1294:       assertEquals(30, Node.VAR_ARGS_NAME);
1295:       assertEquals(57, Node.LAST_PROP);
1296:       assertEquals(55, Node.INFERRED_FUNCTION);
1297:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1298:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1299:       assertEquals(53, Node.INPUT_ID);
1300:       assertEquals(2, Node.POST_FLAG);
1301:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1302:       assertEquals(47, Node.IS_DISPATCHER);
1303:       
1304:       boolean boolean4 = node1.isEquivalentToShallow(node0);
1305:       assertNotSame(node1, node2);
1306:       assertFalse(node0.equals((Object)node2));
1307:       assertFalse(node0.equals((Object)node1));
1308:       assertFalse(node1.equals((Object)node0));
1309:       assertFalse(node1.equals((Object)node2));
1310:       assertTrue(boolean4 == boolean0);
1311:       assertTrue(boolean4 == boolean3);
1312:       assertTrue(boolean4 == boolean1);
1313:       assertTrue(boolean4 == boolean2);
1314:       assertFalse(boolean4);
1315:       assertFalse(node0.isNew());
1316:       assertFalse(node0.isBlock());
1317:       assertFalse(node0.isAdd());
1318:       assertFalse(node0.isVar());
1319:       assertFalse(node0.isName());
1320:       assertEquals(39, node0.getType());
1321:       assertFalse(node0.isWhile());
1322:       assertFalse(node0.isCall());
1323:       assertFalse(node0.hasMoreThanOneChild());
1324:       assertFalse(node0.isContinue());
1325:       assertFalse(node0.isReturn());
1326:       assertFalse(node0.isParamList());
1327:       assertFalse(node0.isStringKey());
1328:       assertEquals((-1), node0.getSourcePosition());
1329:       assertFalse(node0.isDebugger());
1330:       assertFalse(node0.isExprResult());
1331:       assertFalse(node0.isTrue());
1332:       assertFalse(node0.isArrayLit());
1333:       assertFalse(node0.isDefaultCase());
1334:       assertFalse(node0.isVoid());
1335:       assertFalse(node0.isLabelName());
1336:       assertFalse(node0.isAssign());
1337:       assertFalse(node0.hasChildren());
1338:       assertFalse(node0.isGetElem());
1339:       assertEquals(0, node0.getChildCount());
1340:       assertFalse(node0.isDec());
1341:       assertFalse(node0.isTypeOf());
1342:       assertFalse(node0.isOr());
1343:       assertFalse(node0.isLabel());
1344:       assertFalse(node0.isAssignAdd());
1345:       assertFalse(node0.isDelProp());
1346:       assertFalse(node0.isEmpty());
1347:       assertFalse(node0.isDo());
1348:       assertFalse(node0.isNull());
1349:       assertFalse(node0.isHook());
1350:       assertFalse(node0.isInc());
1351:       assertFalse(node0.isSwitch());
1352:       assertFalse(node0.isThrow());
1353:       assertFalse(node0.isBreak());
1354:       assertFalse(node0.isComma());
1355:       assertFalse(node0.isFalse());
1356:       assertTrue(node0.isNumber());
1357:       assertFalse(node0.isGetProp());
1358:       assertFalse(node0.isThis());
1359:       assertFalse(node0.isAnd());
1360:       assertFalse(node0.isNot());
1361:       assertFalse(node0.isString());
1362:       assertFalse(node0.isCase());
1363:       assertFalse(node0.isScript());
1364:       assertEquals((-1), node0.getCharno());
1365:       assertFalse(node0.isGetterDef());
1366:       assertFalse(node0.isObjectLit());
1367:       assertFalse(node0.isTry());
1368:       assertFalse(node0.hasOneChild());
1369:       assertFalse(node0.isWith());
1370:       assertFalse(node0.isFor());
1371:       assertFalse(node0.isCatch());
1372:       assertFalse(node0.isCast());
1373:       assertFalse(node0.isRegExp());
1374:       assertFalse(node0.isFunction());
1375:       assertEquals((-1), node0.getLineno());
1376:       assertFalse(node0.isInstanceOf());
1377:       assertFalse(node0.isNE());
1378:       assertFalse(node0.isSetterDef());
1379:       assertFalse(node0.isIf());
1380:       assertFalse(node0.isIn());
1381:       assertEquals(429, node1.getLineno());
1382:       assertFalse(node1.isVar());
1383:       assertFalse(node1.isStringKey());
1384:       assertFalse(node1.isBlock());
1385:       assertFalse(node1.isWhile());
1386:       assertFalse(node1.isNew());
1387:       assertTrue(node1.isString());
1388:       assertFalse(node1.isAdd());
1389:       assertFalse(node1.isSetterDef());
1390:       assertFalse(node1.isDo());
1391:       assertFalse(node1.isCatch());
1392:       assertFalse(node1.hasMoreThanOneChild());
1393:       assertFalse(node1.isOr());
1394:       assertFalse(node1.isReturn());
1395:       assertFalse(node1.isDec());
1396:       assertFalse(node1.isRegExp());
1397:       assertFalse(node1.isNull());
1398:       assertFalse(node1.isTypeOf());
1399:       assertFalse(node1.isGetElem());
1400:       assertFalse(node1.isName());
1401:       assertFalse(node1.isVoid());
1402:       assertFalse(node1.isCall());
1403:       assertFalse(node1.isCast());
1404:       assertFalse(node1.isAssign());
1405:       assertFalse(node1.isDebugger());
1406:       assertFalse(node1.hasChildren());
1407:       assertFalse(node1.isContinue());
1408:       assertFalse(node1.isAnd());
1409:       assertEquals(40, node1.getType());
1410:       assertFalse(node1.isNot());
1411:       assertFalse(node1.isObjectLit());
1412:       assertFalse(node1.isFunction());
1413:       assertFalse(node1.isHook());
1414:       assertFalse(node1.isThrow());
1415:       assertFalse(node1.isFalse());
1416:       assertFalse(node1.isGetProp());
1417:       assertFalse(node1.isInc());
1418:       assertFalse(node1.isCase());
1419:       assertFalse(node1.isIn());
1420:       assertFalse(node1.isInstanceOf());
1421:       assertFalse(node1.isThis());
1422:       assertFalse(node1.isComma());
1423:       assertFalse(node1.isIf());
1424:       assertFalse(node1.isDelProp());
1425:       assertFalse(node1.isNE());
1426:       assertFalse(node1.isWith());
1427:       assertFalse(node1.isExprResult());
1428:       assertFalse(node1.isBreak());
1429:       assertEquals(1757224, node1.getSourcePosition());
1430:       assertFalse(node1.hasOneChild());
1431:       assertFalse(node1.isFor());
1432:       assertFalse(node1.isTrue());
1433:       assertFalse(node1.isDefaultCase());
1434:       assertFalse(node1.isNumber());
1435:       assertFalse(node1.isScript());
1436:       assertFalse(node1.isGetterDef());
1437:       assertFalse(node1.isEmpty());
1438:       assertFalse(node1.isTry());
1439:       assertEquals(0, node1.getChildCount());
1440:       assertFalse(node1.isAssignAdd());
1441:       assertFalse(node1.isLabel());
1442:       assertFalse(node1.isSwitch());
1443:       assertFalse(node1.isParamList());
1444:       assertFalse(node1.isLabelName());
1445:       assertEquals(40, node1.getCharno());
1446:       assertFalse(node1.isArrayLit());
1447:       assertEquals(54, Node.SLASH_V);
1448:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1449:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1450:       assertEquals(52, Node.LENGTH);
1451:       assertEquals(30, Node.VAR_ARGS_NAME);
1452:       assertEquals(1, Node.DECR_FLAG);
1453:       assertEquals(12, Node.COLUMN_BITS);
1454:       assertEquals(32, Node.INCRDECR_PROP);
1455:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1456:       assertEquals(57, Node.LAST_PROP);
1457:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1458:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1459:       assertEquals(2, Node.POST_FLAG);
1460:       assertEquals(50, Node.FREE_CALL);
1461:       assertEquals(40, Node.ORIGINALNAME_PROP);
1462:       assertEquals(43, Node.IS_CONSTANT_NAME);
1463:       assertEquals(46, Node.IS_NAMESPACE);
1464:       assertEquals(53, Node.INPUT_ID);
1465:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1466:       assertEquals(36, Node.QUOTED_PROP);
1467:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1468:       assertEquals(29, Node.JSDOC_INFO_PROP);
1469:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1470:       assertEquals(47, Node.IS_DISPATCHER);
1471:       assertEquals(48, Node.DIRECTIVES);
1472:       assertEquals(37, Node.OPT_ARG_NAME);
1473:       assertEquals(39, Node.EMPTY_BLOCK);
1474:       assertEquals(55, Node.INFERRED_FUNCTION);
1475:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1476:       assertEquals(8, Node.FLAG_NO_THROWS);
1477:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1478:       assertEquals(4095, Node.COLUMN_MASK);
1479:       assertEquals(49, Node.DIRECT_EVAL);
1480:       assertEquals(56, Node.CHANGE_TIME);
1481:       assertEquals(57, Node.REFLECTED_OBJECT);
1482:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1483:       assertEquals(52, Node.LENGTH);
1484:       assertEquals(57, Node.REFLECTED_OBJECT);
1485:       assertEquals(54, Node.SLASH_V);
1486:       assertEquals(40, Node.ORIGINALNAME_PROP);
1487:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1488:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1489:       assertEquals(8, Node.FLAG_NO_THROWS);
1490:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1491:       assertEquals(50, Node.FREE_CALL);
1492:       assertEquals(32, Node.INCRDECR_PROP);
1493:       assertEquals(12, Node.COLUMN_BITS);
1494:       assertEquals(4095, Node.COLUMN_MASK);
1495:       assertEquals(37, Node.OPT_ARG_NAME);
1496:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1497:       assertEquals(48, Node.DIRECTIVES);
1498:       assertEquals(49, Node.DIRECT_EVAL);
1499:       assertEquals(1, Node.DECR_FLAG);
1500:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1501:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1502:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1503:       assertEquals(53, Node.INPUT_ID);
1504:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1505:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1506:       assertEquals(43, Node.IS_CONSTANT_NAME);
1507:       assertEquals(56, Node.CHANGE_TIME);
1508:       assertEquals(29, Node.JSDOC_INFO_PROP);
1509:       assertEquals(36, Node.QUOTED_PROP);
1510:       assertEquals(46, Node.IS_NAMESPACE);
1511:       assertEquals(55, Node.INFERRED_FUNCTION);
1512:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1513:       assertEquals(39, Node.EMPTY_BLOCK);
1514:       assertEquals(57, Node.LAST_PROP);
1515:       assertEquals(47, Node.IS_DISPATCHER);
1516:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1517:       assertEquals(2, Node.POST_FLAG);
1518:       assertEquals(30, Node.VAR_ARGS_NAME);
1519:       
1520:       boolean boolean5 = node2.isNE();
1521:       assertNotSame(node2, node1);
1522:       assertFalse(node2.equals((Object)node0));
1523:       assertFalse(node2.equals((Object)node1));
1524:       assertTrue(boolean5 == boolean1);
1525:       assertTrue(boolean5 == boolean4);
1526:       assertTrue(boolean5 == boolean2);
1527:       assertTrue(boolean5 == boolean0);
1528:       assertTrue(boolean5 == boolean3);
1529:       assertFalse(boolean5);
1530:       assertFalse(node2.hasChildren());
1531:       assertFalse(node2.isNumber());
1532:       assertFalse(node2.isLabelName());
1533:       assertFalse(node2.isAssign());
1534:       assertFalse(node2.isTypeOf());
1535:       assertFalse(node2.isDec());
1536:       assertFalse(node2.isAssignAdd());
1537:       assertFalse(node2.isOr());
1538:       assertFalse(node2.hasOneChild());
1539:       assertFalse(node2.isScript());
1540:       assertFalse(node2.isWith());
1541:       assertFalse(node2.isBlock());
1542:       assertFalse(node2.isWhile());
1543:       assertFalse(node2.isReturn());
1544:       assertFalse(node2.isExprResult());
1545:       assertFalse(node2.isCall());
1546:       assertFalse(node2.hasMoreThanOneChild());
1547:       assertFalse(node2.isGetElem());
1548:       assertFalse(node2.isInstanceOf());
1549:       assertFalse(node2.isComma());
1550:       assertFalse(node2.isThrow());
1551:       assertFalse(node2.isObjectLit());
1552:       assertFalse(node2.isInc());
1553:       assertFalse(node2.isSetterDef());
1554:       assertFalse(node2.isGetProp());
1555:       assertFalse(node2.isNot());
1556:       assertFalse(node2.isDebugger());
1557:       assertFalse(node2.isAnd());
1558:       assertEquals(40, node2.getType());
1559:       assertFalse(node2.isContinue());
1560:       assertFalse(node2.isFalse());
1561:       assertFalse(node2.isFunction());
1562:       assertEquals(42, node2.getCharno());
1563:       assertFalse(node2.isCast());
1564:       assertFalse(node2.isDelProp());
1565:       assertFalse(node2.isIf());
1566:       assertFalse(node2.isGetterDef());
1567:       assertFalse(node2.isNE());
1568:       assertFalse(node2.isFor());
1569:       assertFalse(node2.isIn());
1570:       assertEquals(229418, node2.getSourcePosition());
1571:       assertFalse(node2.isTry());
1572:       assertFalse(node2.isEmpty());
1573:       assertFalse(node2.isCase());
1574:       assertFalse(node2.isRegExp());
1575:       assertFalse(node2.isTrue());
1576:       assertFalse(node2.isVoid());
1577:       assertFalse(node2.isHook());
1578:       assertFalse(node2.isCatch());
1579:       assertFalse(node2.isBreak());
1580:       assertFalse(node2.isName());
1581:       assertFalse(node2.isThis());
1582:       assertFalse(node2.isNull());
1583:       assertFalse(node2.isVar());
1584:       assertFalse(node2.isParamList());
1585:       assertFalse(node2.isStringKey());
1586:       assertTrue(node2.isString());
1587:       assertFalse(node2.isNew());
1588:       assertFalse(node2.isAdd());
1589:       assertFalse(node2.isDefaultCase());
1590:       assertEquals(56, node2.getLineno());
1591:       assertFalse(node2.isDo());
1592:       assertFalse(node2.isSwitch());
1593:       assertEquals(0, node2.getChildCount());
1594:       assertFalse(node2.isArrayLit());
1595:       assertFalse(node2.isLabel());
1596:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1597:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1598:       assertEquals(37, Node.OPT_ARG_NAME);
1599:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1600:       assertEquals(29, Node.JSDOC_INFO_PROP);
1601:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1602:       assertEquals(43, Node.IS_CONSTANT_NAME);
1603:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1604:       assertEquals(36, Node.QUOTED_PROP);
1605:       assertEquals(56, Node.CHANGE_TIME);
1606:       assertEquals(46, Node.IS_NAMESPACE);
1607:       assertEquals(1, Node.DECR_FLAG);
1608:       assertEquals(49, Node.DIRECT_EVAL);
1609:       assertEquals(4095, Node.COLUMN_MASK);
1610:       assertEquals(32, Node.INCRDECR_PROP);
1611:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1612:       assertEquals(12, Node.COLUMN_BITS);
1613:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1614:       assertEquals(50, Node.FREE_CALL);
1615:       assertEquals(8, Node.FLAG_NO_THROWS);
1616:       assertEquals(39, Node.EMPTY_BLOCK);
1617:       assertEquals(40, Node.ORIGINALNAME_PROP);
1618:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1619:       assertEquals(52, Node.LENGTH);
1620:       assertEquals(48, Node.DIRECTIVES);
1621:       assertEquals(57, Node.REFLECTED_OBJECT);
1622:       assertEquals(54, Node.SLASH_V);
1623:       assertEquals(30, Node.VAR_ARGS_NAME);
1624:       assertEquals(57, Node.LAST_PROP);
1625:       assertEquals(55, Node.INFERRED_FUNCTION);
1626:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1627:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1628:       assertEquals(53, Node.INPUT_ID);
1629:       assertEquals(2, Node.POST_FLAG);
1630:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1631:       assertEquals(47, Node.IS_DISPATCHER);
1632:       
1633:       Node node3 = new Node((-3893), node0, node1, node0, node1);
1634:       assertFalse(node0.equals((Object)node2));
1635:       assertFalse(node0.equals((Object)node1));
1636:       assertFalse(node1.equals((Object)node0));
1637:       assertFalse(node1.equals((Object)node2));
1638:       assertFalse(node3.equals((Object)node2));
1639:       assertFalse(node3.equals((Object)node0));
1640:       assertFalse(node3.equals((Object)node1));
1641:       assertNotNull(node3);
1642:       assertFalse(node0.isNew());
1643:       assertFalse(node0.isBlock());
1644:       assertFalse(node0.isAdd());
1645:       assertFalse(node0.isVar());
1646:       assertFalse(node0.isName());
1647:       assertEquals(39, node0.getType());
1648:       assertFalse(node0.isWhile());
1649:       assertFalse(node0.isCall());
1650:       assertFalse(node0.hasMoreThanOneChild());
1651:       assertFalse(node0.isContinue());
1652:       assertFalse(node0.isReturn());
1653:       assertFalse(node0.isParamList());
1654:       assertFalse(node0.isStringKey());
1655:       assertEquals((-1), node0.getSourcePosition());
1656:       assertFalse(node0.isDebugger());
1657:       assertFalse(node0.isExprResult());
1658:       assertFalse(node0.isTrue());
1659:       assertFalse(node0.isArrayLit());
1660:       assertFalse(node0.isDefaultCase());
1661:       assertFalse(node0.isVoid());
1662:       assertFalse(node0.isLabelName());
1663:       assertFalse(node0.isAssign());
1664:       assertFalse(node0.hasChildren());
1665:       assertFalse(node0.isGetElem());
1666:       assertEquals(0, node0.getChildCount());
1667:       assertFalse(node0.isDec());
1668:       assertFalse(node0.isTypeOf());
1669:       assertFalse(node0.isOr());
1670:       assertFalse(node0.isLabel());
1671:       assertFalse(node0.isAssignAdd());
1672:       assertFalse(node0.isDelProp());
1673:       assertFalse(node0.isEmpty());
1674:       assertFalse(node0.isDo());
1675:       assertFalse(node0.isNull());
1676:       assertFalse(node0.isHook());
1677:       assertFalse(node0.isInc());
1678:       assertFalse(node0.isSwitch());
1679:       assertFalse(node0.isThrow());
1680:       assertFalse(node0.isBreak());
1681:       assertFalse(node0.isComma());
1682:       assertFalse(node0.isFalse());
1683:       assertTrue(node0.isNumber());
1684:       assertFalse(node0.isGetProp());
1685:       assertFalse(node0.isThis());
1686:       assertFalse(node0.isAnd());
1687:       assertFalse(node0.isNot());
1688:       assertFalse(node0.isString());
1689:       assertFalse(node0.isCase());
1690:       assertFalse(node0.isScript());
1691:       assertEquals((-1), node0.getCharno());
1692:       assertFalse(node0.isGetterDef());
1693:       assertFalse(node0.isObjectLit());
1694:       assertFalse(node0.isTry());
1695:       assertFalse(node0.hasOneChild());
1696:       assertFalse(node0.isWith());
1697:       assertFalse(node0.isFor());
1698:       assertFalse(node0.isCatch());
1699:       assertFalse(node0.isCast());
1700:       assertFalse(node0.isRegExp());
1701:       assertFalse(node0.isFunction());
1702:       assertEquals((-1), node0.getLineno());
1703:       assertFalse(node0.isInstanceOf());
1704:       assertFalse(node0.isNE());
1705:       assertFalse(node0.isSetterDef());
1706:       assertFalse(node0.isIf());
1707:       assertFalse(node0.isIn());
1708:       assertEquals(429, node1.getLineno());
1709:       assertFalse(node1.isVar());
1710:       assertFalse(node1.isStringKey());
1711:       assertFalse(node1.isBlock());
1712:       assertFalse(node1.isWhile());
1713:       assertFalse(node1.isNew());
1714:       assertTrue(node1.isString());
1715:       assertFalse(node1.isAdd());
1716:       assertFalse(node1.isSetterDef());
1717:       assertFalse(node1.isDo());
1718:       assertFalse(node1.isCatch());
1719:       assertFalse(node1.hasMoreThanOneChild());
1720:       assertFalse(node1.isOr());
1721:       assertFalse(node1.isReturn());
1722:       assertFalse(node1.isDec());
1723:       assertFalse(node1.isRegExp());
1724:       assertFalse(node1.isNull());
1725:       assertFalse(node1.isTypeOf());
1726:       assertFalse(node1.isGetElem());
1727:       assertFalse(node1.isName());
1728:       assertFalse(node1.isVoid());
1729:       assertFalse(node1.isCall());
1730:       assertFalse(node1.isCast());
1731:       assertFalse(node1.isAssign());
1732:       assertFalse(node1.isDebugger());
1733:       assertFalse(node1.hasChildren());
1734:       assertFalse(node1.isContinue());
1735:       assertFalse(node1.isAnd());
1736:       assertEquals(40, node1.getType());
1737:       assertFalse(node1.isNot());
1738:       assertFalse(node1.isObjectLit());
1739:       assertFalse(node1.isFunction());
1740:       assertFalse(node1.isHook());
1741:       assertFalse(node1.isThrow());
1742:       assertFalse(node1.isFalse());
1743:       assertFalse(node1.isGetProp());
1744:       assertFalse(node1.isInc());
1745:       assertFalse(node1.isCase());
1746:       assertFalse(node1.isIn());
1747:       assertFalse(node1.isInstanceOf());
1748:       assertFalse(node1.isThis());
1749:       assertFalse(node1.isComma());
1750:       assertFalse(node1.isIf());
1751:       assertFalse(node1.isDelProp());
1752:       assertFalse(node1.isNE());
1753:       assertFalse(node1.isWith());
1754:       assertFalse(node1.isExprResult());
1755:       assertFalse(node1.isBreak());
1756:       assertEquals(1757224, node1.getSourcePosition());
1757:       assertFalse(node1.hasOneChild());
1758:       assertFalse(node1.isFor());
1759:       assertFalse(node1.isTrue());
1760:       assertFalse(node1.isDefaultCase());
1761:       assertFalse(node1.isNumber());
1762:       assertFalse(node1.isScript());
1763:       assertFalse(node1.isGetterDef());
1764:       assertFalse(node1.isEmpty());
1765:       assertFalse(node1.isTry());
1766:       assertEquals(0, node1.getChildCount());
1767:       assertFalse(node1.isAssignAdd());
1768:       assertFalse(node1.isLabel());
1769:       assertFalse(node1.isSwitch());
1770:       assertFalse(node1.isParamList());
1771:       assertFalse(node1.isLabelName());
1772:       assertEquals(40, node1.getCharno());
1773:       assertFalse(node1.isArrayLit());
1774:       assertFalse(node3.hasOneChild());
1775:       assertFalse(node3.isExprResult());
1776:       assertFalse(node3.isCast());
1777:       assertFalse(node3.isScript());
1778:       assertFalse(node3.isGetElem());
1779:       assertFalse(node3.isDec());
1780:       assertFalse(node3.isAssign());
1781:       assertFalse(node3.isTypeOf());
1782:       assertFalse(node3.isWith());
1783:       assertFalse(node3.isLabel());
1784:       assertFalse(node3.isReturn());
1785:       assertEquals((-1), node3.getLineno());
1786:       assertFalse(node3.isInstanceOf());
1787:       assertFalse(node3.isOr());
1788:       assertFalse(node3.isAssignAdd());
1789:       assertEquals((-3893), node3.getType());
1790:       assertFalse(node3.isBreak());
1791:       assertFalse(node3.isNew());
1792:       assertFalse(node3.isAdd());
1793:       assertFalse(node3.isDo());
1794:       assertFalse(node3.isBlock());
1795:       assertFalse(node3.isVar());
1796:       assertFalse(node3.isThis());
1797:       assertFalse(node3.isHook());
1798:       assertFalse(node3.isCase());
1799:       assertFalse(node3.isGetterDef());
1800:       assertFalse(node3.isLabelName());
1801:       assertFalse(node3.isSwitch());
1802:       assertFalse(node3.isNumber());
1803:       assertEquals((-1), node3.getCharno());
1804:       assertFalse(node3.isParamList());
1805:       assertFalse(node3.isStringKey());
1806:       assertFalse(node3.isTry());
1807:       assertFalse(node3.isVoid());
1808:       assertFalse(node3.isEmpty());
1809:       assertFalse(node3.isArrayLit());
1810:       assertFalse(node3.isRegExp());
1811:       assertFalse(node3.isDefaultCase());
1812:       assertFalse(node3.isFunction());
1813:       assertFalse(node3.isFor());
1814:       assertFalse(node3.isIn());
1815:       assertFalse(node3.isCatch());
1816:       assertTrue(node3.hasChildren());
1817:       assertFalse(node3.isSetterDef());
1818:       assertFalse(node3.isDelProp());
1819:       assertTrue(node3.hasMoreThanOneChild());
1820:       assertFalse(node3.isName());
1821:       assertFalse(node3.isIf());
1822:       assertFalse(node3.isTrue());
1823:       assertFalse(node3.isNE());
1824:       assertFalse(node3.isNull());
1825:       assertFalse(node3.isCall());
1826:       assertFalse(node3.isInc());
1827:       assertFalse(node3.isWhile());
1828:       assertFalse(node3.isFalse());
1829:       assertFalse(node3.isThrow());
1830:       assertFalse(node3.isComma());
1831:       assertEquals(2, node3.getChildCount());
1832:       assertFalse(node3.isContinue());
1833:       assertFalse(node3.isGetProp());
1834:       assertFalse(node3.isString());
1835:       assertFalse(node3.isNot());
1836:       assertFalse(node3.isDebugger());
1837:       assertFalse(node3.isObjectLit());
1838:       assertFalse(node3.isAnd());
1839:       assertEquals((-1), node3.getSourcePosition());
1840:       assertEquals(54, Node.SLASH_V);
1841:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1842:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1843:       assertEquals(52, Node.LENGTH);
1844:       assertEquals(30, Node.VAR_ARGS_NAME);
1845:       assertEquals(1, Node.DECR_FLAG);
1846:       assertEquals(12, Node.COLUMN_BITS);
1847:       assertEquals(32, Node.INCRDECR_PROP);
1848:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1849:       assertEquals(57, Node.LAST_PROP);
1850:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1851:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1852:       assertEquals(2, Node.POST_FLAG);
1853:       assertEquals(50, Node.FREE_CALL);
1854:       assertEquals(40, Node.ORIGINALNAME_PROP);
1855:       assertEquals(43, Node.IS_CONSTANT_NAME);
1856:       assertEquals(46, Node.IS_NAMESPACE);
1857:       assertEquals(53, Node.INPUT_ID);
1858:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1859:       assertEquals(36, Node.QUOTED_PROP);
1860:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1861:       assertEquals(29, Node.JSDOC_INFO_PROP);
1862:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1863:       assertEquals(47, Node.IS_DISPATCHER);
1864:       assertEquals(48, Node.DIRECTIVES);
1865:       assertEquals(37, Node.OPT_ARG_NAME);
1866:       assertEquals(39, Node.EMPTY_BLOCK);
1867:       assertEquals(55, Node.INFERRED_FUNCTION);
1868:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1869:       assertEquals(8, Node.FLAG_NO_THROWS);
1870:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1871:       assertEquals(4095, Node.COLUMN_MASK);
1872:       assertEquals(49, Node.DIRECT_EVAL);
1873:       assertEquals(56, Node.CHANGE_TIME);
1874:       assertEquals(57, Node.REFLECTED_OBJECT);
1875:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1876:       assertEquals(52, Node.LENGTH);
1877:       assertEquals(57, Node.REFLECTED_OBJECT);
1878:       assertEquals(54, Node.SLASH_V);
1879:       assertEquals(40, Node.ORIGINALNAME_PROP);
1880:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1881:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1882:       assertEquals(8, Node.FLAG_NO_THROWS);
1883:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1884:       assertEquals(50, Node.FREE_CALL);
1885:       assertEquals(32, Node.INCRDECR_PROP);
1886:       assertEquals(12, Node.COLUMN_BITS);
1887:       assertEquals(4095, Node.COLUMN_MASK);
1888:       assertEquals(37, Node.OPT_ARG_NAME);
1889:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1890:       assertEquals(48, Node.DIRECTIVES);
1891:       assertEquals(49, Node.DIRECT_EVAL);
1892:       assertEquals(1, Node.DECR_FLAG);
1893:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1894:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1895:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1896:       assertEquals(53, Node.INPUT_ID);
1897:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1898:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1899:       assertEquals(43, Node.IS_CONSTANT_NAME);
1900:       assertEquals(56, Node.CHANGE_TIME);
1901:       assertEquals(29, Node.JSDOC_INFO_PROP);
1902:       assertEquals(36, Node.QUOTED_PROP);
1903:       assertEquals(46, Node.IS_NAMESPACE);
1904:       assertEquals(55, Node.INFERRED_FUNCTION);
1905:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1906:       assertEquals(39, Node.EMPTY_BLOCK);
1907:       assertEquals(57, Node.LAST_PROP);
1908:       assertEquals(47, Node.IS_DISPATCHER);
1909:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1910:       assertEquals(2, Node.POST_FLAG);
1911:       assertEquals(30, Node.VAR_ARGS_NAME);
1912:       assertEquals(53, Node.INPUT_ID);
1913:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1914:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1915:       assertEquals(36, Node.QUOTED_PROP);
1916:       assertEquals(29, Node.JSDOC_INFO_PROP);
1917:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1918:       assertEquals(55, Node.INFERRED_FUNCTION);
1919:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1920:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1921:       assertEquals(32, Node.INCRDECR_PROP);
1922:       assertEquals(4095, Node.COLUMN_MASK);
1923:       assertEquals(8, Node.FLAG_NO_THROWS);
1924:       assertEquals(12, Node.COLUMN_BITS);
1925:       assertEquals(49, Node.DIRECT_EVAL);
1926:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1927:       assertEquals(56, Node.CHANGE_TIME);
1928:       assertEquals(48, Node.DIRECTIVES);
1929:       assertEquals(37, Node.OPT_ARG_NAME);
1930:       assertEquals(52, Node.LENGTH);
1931:       assertEquals(54, Node.SLASH_V);
1932:       assertEquals(57, Node.REFLECTED_OBJECT);
1933:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1934:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1935:       assertEquals(50, Node.FREE_CALL);
1936:       assertEquals(57, Node.LAST_PROP);
1937:       assertEquals(39, Node.EMPTY_BLOCK);
1938:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1939:       assertEquals(1, Node.DECR_FLAG);
1940:       assertEquals(46, Node.IS_NAMESPACE);
1941:       assertEquals(2, Node.POST_FLAG);
1942:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1943:       assertEquals(47, Node.IS_DISPATCHER);
1944:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1945:       assertEquals(30, Node.VAR_ARGS_NAME);
1946:       assertEquals(43, Node.IS_CONSTANT_NAME);
1947:       assertEquals(40, Node.ORIGINALNAME_PROP);
1948:       
1949:       boolean boolean6 = node3.hasOneChild();
1950:       assertNotSame(node1, node2);
1951:       assertFalse(node0.equals((Object)node3));
1952:       assertFalse(node0.equals((Object)node2));
1953:       assertFalse(node0.equals((Object)node1));
1954:       assertFalse(node1.equals((Object)node3));
1955:       assertFalse(node1.equals((Object)node0));
1956:       assertFalse(node1.equals((Object)node2));
1957:       assertFalse(node3.equals((Object)node2));
1958:       assertFalse(node3.equals((Object)node0));
1959:       assertFalse(node3.equals((Object)node1));
1960:       assertTrue(boolean6 == boolean5);
1961:       assertTrue(boolean6 == boolean1);
1962:       assertTrue(boolean6 == boolean2);
1963:       assertTrue(boolean6 == boolean4);
1964:       assertTrue(boolean6 == boolean3);
1965:       assertTrue(boolean6 == boolean0);
1966:       assertFalse(boolean6);
1967:       assertFalse(node0.isNew());
1968:       assertFalse(node0.isBlock());
1969:       assertFalse(node0.isAdd());
1970:       assertFalse(node0.isVar());
1971:       assertFalse(node0.isName());
1972:       assertEquals(39, node0.getType());
1973:       assertFalse(node0.isWhile());
1974:       assertFalse(node0.isCall());
1975:       assertFalse(node0.hasMoreThanOneChild());
1976:       assertFalse(node0.isContinue());
1977:       assertFalse(node0.isReturn());
1978:       assertFalse(node0.isParamList());
1979:       assertFalse(node0.isStringKey());
1980:       assertEquals((-1), node0.getSourcePosition());
1981:       assertFalse(node0.isDebugger());
1982:       assertFalse(node0.isExprResult());
1983:       assertFalse(node0.isTrue());
1984:       assertFalse(node0.isArrayLit());
1985:       assertFalse(node0.isDefaultCase());
1986:       assertFalse(node0.isVoid());
1987:       assertFalse(node0.isLabelName());
1988:       assertFalse(node0.isAssign());
1989:       assertFalse(node0.hasChildren());
1990:       assertFalse(node0.isGetElem());
1991:       assertEquals(0, node0.getChildCount());
1992:       assertFalse(node0.isDec());
1993:       assertFalse(node0.isTypeOf());
1994:       assertFalse(node0.isOr());
1995:       assertFalse(node0.isLabel());
1996:       assertFalse(node0.isAssignAdd());
1997:       assertFalse(node0.isDelProp());
1998:       assertFalse(node0.isEmpty());
1999:       assertFalse(node0.isDo());
2000:       assertFalse(node0.isNull());
2001:       assertFalse(node0.isHook());
2002:       assertFalse(node0.isInc());
2003:       assertFalse(node0.isSwitch());
2004:       assertFalse(node0.isThrow());
2005:       assertFalse(node0.isBreak());
2006:       assertFalse(node0.isComma());
2007:       assertFalse(node0.isFalse());
2008:       assertTrue(node0.isNumber());
2009:       assertFalse(node0.isGetProp());
2010:       assertFalse(node0.isThis());
2011:       assertFalse(node0.isAnd());
2012:       assertFalse(node0.isNot());
2013:       assertFalse(node0.isString());
2014:       assertFalse(node0.isCase());
2015:       assertFalse(node0.isScript());
2016:       assertEquals((-1), node0.getCharno());
2017:       assertFalse(node0.isGetterDef());
2018:       assertFalse(node0.isObjectLit());
2019:       assertFalse(node0.isTry());
2020:       assertFalse(node0.hasOneChild());
2021:       assertFalse(node0.isWith());
2022:       assertFalse(node0.isFor());
2023:       assertFalse(node0.isCatch());
2024:       assertFalse(node0.isCast());
2025:       assertFalse(node0.isRegExp());
2026:       assertFalse(node0.isFunction());
2027:       assertEquals((-1), node0.getLineno());
2028:       assertFalse(node0.isInstanceOf());
2029:       assertFalse(node0.isNE());
2030:       assertFalse(node0.isSetterDef());
2031:       assertFalse(node0.isIf());
2032:       assertFalse(node0.isIn());
2033:       assertEquals(429, node1.getLineno());
2034:       assertFalse(node1.isVar());
2035:       assertFalse(node1.isStringKey());
2036:       assertFalse(node1.isBlock());
2037:       assertFalse(node1.isWhile());
2038:       assertFalse(node1.isNew());
2039:       assertTrue(node1.isString());
2040:       assertFalse(node1.isAdd());
2041:       assertFalse(node1.isSetterDef());
2042:       assertFalse(node1.isDo());
2043:       assertFalse(node1.isCatch());
2044:       assertFalse(node1.hasMoreThanOneChild());
2045:       assertFalse(node1.isOr());
2046:       assertFalse(node1.isReturn());
2047:       assertFalse(node1.isDec());
2048:       assertFalse(node1.isRegExp());
2049:       assertFalse(node1.isNull());
2050:       assertFalse(node1.isTypeOf());
2051:       assertFalse(node1.isGetElem());
2052:       assertFalse(node1.isName());
2053:       assertFalse(node1.isVoid());
2054:       assertFalse(node1.isCall());
2055:       assertFalse(node1.isCast());
2056:       assertFalse(node1.isAssign());
2057:       assertFalse(node1.isDebugger());
2058:       assertFalse(node1.hasChildren());
2059:       assertFalse(node1.isContinue());
2060:       assertFalse(node1.isAnd());
2061:       assertEquals(40, node1.getType());
2062:       assertFalse(node1.isNot());
2063:       assertFalse(node1.isObjectLit());
2064:       assertFalse(node1.isFunction());
2065:       assertFalse(node1.isHook());
2066:       assertFalse(node1.isThrow());
2067:       assertFalse(node1.isFalse());
2068:       assertFalse(node1.isGetProp());
2069:       assertFalse(node1.isInc());
2070:       assertFalse(node1.isCase());
2071:       assertFalse(node1.isIn());
2072:       assertFalse(node1.isInstanceOf());
2073:       assertFalse(node1.isThis());
2074:       assertFalse(node1.isComma());
2075:       assertFalse(node1.isIf());
2076:       assertFalse(node1.isDelProp());
2077:       assertFalse(node1.isNE());
2078:       assertFalse(node1.isWith());
2079:       assertFalse(node1.isExprResult());
2080:       assertFalse(node1.isBreak());
2081:       assertEquals(1757224, node1.getSourcePosition());
2082:       assertFalse(node1.hasOneChild());
2083:       assertFalse(node1.isFor());
2084:       assertFalse(node1.isTrue());
2085:       assertFalse(node1.isDefaultCase());
2086:       assertFalse(node1.isNumber());
2087:       assertFalse(node1.isScript());
2088:       assertFalse(node1.isGetterDef());
2089:       assertFalse(node1.isEmpty());
2090:       assertFalse(node1.isTry());
2091:       assertEquals(0, node1.getChildCount());
2092:       assertFalse(node1.isAssignAdd());
2093:       assertFalse(node1.isLabel());
2094:       assertFalse(node1.isSwitch());
2095:       assertFalse(node1.isParamList());
2096:       assertFalse(node1.isLabelName());
2097:       assertEquals(40, node1.getCharno());
2098:       assertFalse(node1.isArrayLit());
2099:       assertFalse(node3.hasOneChild());
2100:       assertFalse(node3.isExprResult());
2101:       assertFalse(node3.isCast());
2102:       assertFalse(node3.isScript());
2103:       assertFalse(node3.isGetElem());
2104:       assertFalse(node3.isDec());
2105:       assertFalse(node3.isAssign());
2106:       assertFalse(node3.isTypeOf());
2107:       assertFalse(node3.isWith());
2108:       assertFalse(node3.isLabel());
2109:       assertFalse(node3.isReturn());
2110:       assertEquals((-1), node3.getLineno());
2111:       assertFalse(node3.isInstanceOf());
2112:       assertFalse(node3.isOr());
2113:       assertFalse(node3.isAssignAdd());
2114:       assertEquals((-3893), node3.getType());
2115:       assertFalse(node3.isBreak());
2116:       assertFalse(node3.isNew());
2117:       assertFalse(node3.isAdd());
2118:       assertFalse(node3.isDo());
2119:       assertFalse(node3.isBlock());
2120:       assertFalse(node3.isVar());
2121:       assertFalse(node3.isThis());
2122:       assertFalse(node3.isHook());
2123:       assertFalse(node3.isCase());
2124:       assertFalse(node3.isGetterDef());
2125:       assertFalse(node3.isLabelName());
2126:       assertFalse(node3.isSwitch());
2127:       assertFalse(node3.isNumber());
2128:       assertEquals((-1), node3.getCharno());
2129:       assertFalse(node3.isParamList());
2130:       assertFalse(node3.isStringKey());
2131:       assertFalse(node3.isTry());
2132:       assertFalse(node3.isVoid());
2133:       assertFalse(node3.isEmpty());
2134:       assertFalse(node3.isArrayLit());
2135:       assertFalse(node3.isRegExp());
2136:       assertFalse(node3.isDefaultCase());
2137:       assertFalse(node3.isFunction());
2138:       assertFalse(node3.isFor());
2139:       assertFalse(node3.isIn());
2140:       assertFalse(node3.isCatch());
2141:       assertTrue(node3.hasChildren());
2142:       assertFalse(node3.isSetterDef());
2143:       assertFalse(node3.isDelProp());
2144:       assertTrue(node3.hasMoreThanOneChild());
2145:       assertFalse(node3.isName());
2146:       assertFalse(node3.isIf());
2147:       assertFalse(node3.isTrue());
2148:       assertFalse(node3.isNE());
2149:       assertFalse(node3.isNull());
2150:       assertFalse(node3.isCall());
2151:       assertFalse(node3.isInc());
2152:       assertFalse(node3.isWhile());
2153:       assertFalse(node3.isFalse());
2154:       assertFalse(node3.isThrow());
2155:       assertFalse(node3.isComma());
2156:       assertEquals(2, node3.getChildCount());
2157:       assertFalse(node3.isContinue());
2158:       assertFalse(node3.isGetProp());
2159:       assertFalse(node3.isString());
2160:       assertFalse(node3.isNot());
2161:       assertFalse(node3.isDebugger());
2162:       assertFalse(node3.isObjectLit());
2163:       assertFalse(node3.isAnd());
2164:       assertEquals((-1), node3.getSourcePosition());
2165:       assertEquals(54, Node.SLASH_V);
2166:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2167:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2168:       assertEquals(52, Node.LENGTH);
2169:       assertEquals(30, Node.VAR_ARGS_NAME);
2170:       assertEquals(1, Node.DECR_FLAG);
2171:       assertEquals(12, Node.COLUMN_BITS);
2172:       assertEquals(32, Node.INCRDECR_PROP);
2173:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2174:       assertEquals(57, Node.LAST_PROP);
2175:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2176:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2177:       assertEquals(2, Node.POST_FLAG);
2178:       assertEquals(50, Node.FREE_CALL);
2179:       assertEquals(40, Node.ORIGINALNAME_PROP);
2180:       assertEquals(43, Node.IS_CONSTANT_NAME);
2181:       assertEquals(46, Node.IS_NAMESPACE);
2182:       assertEquals(53, Node.INPUT_ID);
2183:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2184:       assertEquals(36, Node.QUOTED_PROP);
2185:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2186:       assertEquals(29, Node.JSDOC_INFO_PROP);
2187:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2188:       assertEquals(47, Node.IS_DISPATCHER);
2189:       assertEquals(48, Node.DIRECTIVES);
2190:       assertEquals(37, Node.OPT_ARG_NAME);
2191:       assertEquals(39, Node.EMPTY_BLOCK);
2192:       assertEquals(55, Node.INFERRED_FUNCTION);
2193:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2194:       assertEquals(8, Node.FLAG_NO_THROWS);
2195:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2196:       assertEquals(4095, Node.COLUMN_MASK);
2197:       assertEquals(49, Node.DIRECT_EVAL);
2198:       assertEquals(56, Node.CHANGE_TIME);
2199:       assertEquals(57, Node.REFLECTED_OBJECT);
2200:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2201:       assertEquals(52, Node.LENGTH);
2202:       assertEquals(57, Node.REFLECTED_OBJECT);
2203:       assertEquals(54, Node.SLASH_V);
2204:       assertEquals(40, Node.ORIGINALNAME_PROP);
2205:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2206:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2207:       assertEquals(8, Node.FLAG_NO_THROWS);
2208:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2209:       assertEquals(50, Node.FREE_CALL);
2210:       assertEquals(32, Node.INCRDECR_PROP);
2211:       assertEquals(12, Node.COLUMN_BITS);
2212:       assertEquals(4095, Node.COLUMN_MASK);
2213:       assertEquals(37, Node.OPT_ARG_NAME);
2214:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2215:       assertEquals(48, Node.DIRECTIVES);
2216:       assertEquals(49, Node.DIRECT_EVAL);
2217:       assertEquals(1, Node.DECR_FLAG);
2218:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2219:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2220:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2221:       assertEquals(53, Node.INPUT_ID);
2222:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2223:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2224:       assertEquals(43, Node.IS_CONSTANT_NAME);
2225:       assertEquals(56, Node.CHANGE_TIME);
2226:       assertEquals(29, Node.JSDOC_INFO_PROP);
2227:       assertEquals(36, Node.QUOTED_PROP);
2228:       assertEquals(46, Node.IS_NAMESPACE);
2229:       assertEquals(55, Node.INFERRED_FUNCTION);
2230:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2231:       assertEquals(39, Node.EMPTY_BLOCK);
2232:       assertEquals(57, Node.LAST_PROP);
2233:       assertEquals(47, Node.IS_DISPATCHER);
2234:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2235:       assertEquals(2, Node.POST_FLAG);
2236:       assertEquals(30, Node.VAR_ARGS_NAME);
2237:       assertEquals(53, Node.INPUT_ID);
2238:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2239:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2240:       assertEquals(36, Node.QUOTED_PROP);
2241:       assertEquals(29, Node.JSDOC_INFO_PROP);
2242:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2243:       assertEquals(55, Node.INFERRED_FUNCTION);
2244:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2245:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2246:       assertEquals(32, Node.INCRDECR_PROP);
2247:       assertEquals(4095, Node.COLUMN_MASK);
2248:       assertEquals(8, Node.FLAG_NO_THROWS);
2249:       assertEquals(12, Node.COLUMN_BITS);
2250:       assertEquals(49, Node.DIRECT_EVAL);
2251:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2252:       assertEquals(56, Node.CHANGE_TIME);
2253:       assertEquals(48, Node.DIRECTIVES);
2254:       assertEquals(37, Node.OPT_ARG_NAME);
2255:       assertEquals(52, Node.LENGTH);
2256:       assertEquals(54, Node.SLASH_V);
2257:       assertEquals(57, Node.REFLECTED_OBJECT);
2258:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2259:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2260:       assertEquals(50, Node.FREE_CALL);
2261:       assertEquals(57, Node.LAST_PROP);
2262:       assertEquals(39, Node.EMPTY_BLOCK);
2263:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2264:       assertEquals(1, Node.DECR_FLAG);
2265:       assertEquals(46, Node.IS_NAMESPACE);
2266:       assertEquals(2, Node.POST_FLAG);
2267:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2268:       assertEquals(47, Node.IS_DISPATCHER);
2269:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2270:       assertEquals(30, Node.VAR_ARGS_NAME);
2271:       assertEquals(43, Node.IS_CONSTANT_NAME);
2272:       assertEquals(40, Node.ORIGINALNAME_PROP);
2273:       
2274:       boolean boolean7 = node3.isEmpty();
2275:       assertNotSame(node1, node2);
2276:       assertFalse(node0.equals((Object)node3));
2277:       assertFalse(node0.equals((Object)node2));
2278:       assertFalse(node0.equals((Object)node1));
2279:       assertFalse(node1.equals((Object)node3));
2280:       assertFalse(node1.equals((Object)node0));
2281:       assertFalse(node1.equals((Object)node2));
2282:       assertFalse(node3.equals((Object)node2));
2283:       assertFalse(node3.equals((Object)node0));
2284:       assertFalse(node3.equals((Object)node1));
2285:       assertTrue(boolean7 == boolean2);
2286:       assertTrue(boolean7 == boolean1);
2287:       assertTrue(boolean7 == boolean3);
2288:       assertTrue(boolean7 == boolean5);
2289:       assertTrue(boolean7 == boolean6);
2290:       assertTrue(boolean7 == boolean4);
2291:       assertTrue(boolean7 == boolean0);
2292:       assertFalse(boolean7);
2293:       assertFalse(node0.isNew());
2294:       assertFalse(node0.isBlock());
2295:       assertFalse(node0.isAdd());
2296:       assertFalse(node0.isVar());
2297:       assertFalse(node0.isName());
2298:       assertEquals(39, node0.getType());
2299:       assertFalse(node0.isWhile());
2300:       assertFalse(node0.isCall());
2301:       assertFalse(node0.hasMoreThanOneChild());
2302:       assertFalse(node0.isContinue());
2303:       assertFalse(node0.isReturn());
2304:       assertFalse(node0.isParamList());
2305:       assertFalse(node0.isStringKey());
2306:       assertEquals((-1), node0.getSourcePosition());
2307:       assertFalse(node0.isDebugger());
2308:       assertFalse(node0.isExprResult());
2309:       assertFalse(node0.isTrue());
2310:       assertFalse(node0.isArrayLit());
2311:       assertFalse(node0.isDefaultCase());
2312:       assertFalse(node0.isVoid());
2313:       assertFalse(node0.isLabelName());
2314:       assertFalse(node0.isAssign());
2315:       assertFalse(node0.hasChildren());
2316:       assertFalse(node0.isGetElem());
2317:       assertEquals(0, node0.getChildCount());
2318:       assertFalse(node0.isDec());
2319:       assertFalse(node0.isTypeOf());
2320:       assertFalse(node0.isOr());
2321:       assertFalse(node0.isLabel());
2322:       assertFalse(node0.isAssignAdd());
2323:       assertFalse(node0.isDelProp());
2324:       assertFalse(node0.isEmpty());
2325:       assertFalse(node0.isDo());
2326:       assertFalse(node0.isNull());
2327:       assertFalse(node0.isHook());
2328:       assertFalse(node0.isInc());
2329:       assertFalse(node0.isSwitch());
2330:       assertFalse(node0.isThrow());
2331:       assertFalse(node0.isBreak());
2332:       assertFalse(node0.isComma());
2333:       assertFalse(node0.isFalse());
2334:       assertTrue(node0.isNumber());
2335:       assertFalse(node0.isGetProp());
2336:       assertFalse(node0.isThis());
2337:       assertFalse(node0.isAnd());
2338:       assertFalse(node0.isNot());
2339:       assertFalse(node0.isString());
2340:       assertFalse(node0.isCase());
2341:       assertFalse(node0.isScript());
2342:       assertEquals((-1), node0.getCharno());
2343:       assertFalse(node0.isGetterDef());
2344:       assertFalse(node0.isObjectLit());
2345:       assertFalse(node0.isTry());
2346:       assertFalse(node0.hasOneChild());
2347:       assertFalse(node0.isWith());
2348:       assertFalse(node0.isFor());
2349:       assertFalse(node0.isCatch());
2350:       assertFalse(node0.isCast());
2351:       assertFalse(node0.isRegExp());
2352:       assertFalse(node0.isFunction());
2353:       assertEquals((-1), node0.getLineno());
2354:       assertFalse(node0.isInstanceOf());
2355:       assertFalse(node0.isNE());
2356:       assertFalse(node0.isSetterDef());
2357:       assertFalse(node0.isIf());
2358:       assertFalse(node0.isIn());
2359:       assertEquals(429, node1.getLineno());
2360:       assertFalse(node1.isVar());
2361:       assertFalse(node1.isStringKey());
2362:       assertFalse(node1.isBlock());
2363:       assertFalse(node1.isWhile());
2364:       assertFalse(node1.isNew());
2365:       assertTrue(node1.isString());
2366:       assertFalse(node1.isAdd());
2367:       assertFalse(node1.isSetterDef());
2368:       assertFalse(node1.isDo());
2369:       assertFalse(node1.isCatch());
2370:       assertFalse(node1.hasMoreThanOneChild());
2371:       assertFalse(node1.isOr());
2372:       assertFalse(node1.isReturn());
2373:       assertFalse(node1.isDec());
2374:       assertFalse(node1.isRegExp());
2375:       assertFalse(node1.isNull());
2376:       assertFalse(node1.isTypeOf());
2377:       assertFalse(node1.isGetElem());
2378:       assertFalse(node1.isName());
2379:       assertFalse(node1.isVoid());
2380:       assertFalse(node1.isCall());
2381:       assertFalse(node1.isCast());
2382:       assertFalse(node1.isAssign());
2383:       assertFalse(node1.isDebugger());
2384:       assertFalse(node1.hasChildren());
2385:       assertFalse(node1.isContinue());
2386:       assertFalse(node1.isAnd());
2387:       assertEquals(40, node1.getType());
2388:       assertFalse(node1.isNot());
2389:       assertFalse(node1.isObjectLit());
2390:       assertFalse(node1.isFunction());
2391:       assertFalse(node1.isHook());
2392:       assertFalse(node1.isThrow());
2393:       assertFalse(node1.isFalse());
2394:       assertFalse(node1.isGetProp());
2395:       assertFalse(node1.isInc());
2396:       assertFalse(node1.isCase());
2397:       assertFalse(node1.isIn());
2398:       assertFalse(node1.isInstanceOf());
2399:       assertFalse(node1.isThis());
2400:       assertFalse(node1.isComma());
2401:       assertFalse(node1.isIf());
2402:       assertFalse(node1.isDelProp());
2403:       assertFalse(node1.isNE());
2404:       assertFalse(node1.isWith());
2405:       assertFalse(node1.isExprResult());
2406:       assertFalse(node1.isBreak());
2407:       assertEquals(1757224, node1.getSourcePosition());
2408:       assertFalse(node1.hasOneChild());
2409:       assertFalse(node1.isFor());
2410:       assertFalse(node1.isTrue());
2411:       assertFalse(node1.isDefaultCase());
2412:       assertFalse(node1.isNumber());
2413:       assertFalse(node1.isScript());
2414:       assertFalse(node1.isGetterDef());
2415:       assertFalse(node1.isEmpty());
2416:       assertFalse(node1.isTry());
2417:       assertEquals(0, node1.getChildCount());
2418:       assertFalse(node1.isAssignAdd());
2419:       assertFalse(node1.isLabel());
2420:       assertFalse(node1.isSwitch());
2421:       assertFalse(node1.isParamList());
2422:       assertFalse(node1.isLabelName());
2423:       assertEquals(40, node1.getCharno());
2424:       assertFalse(node1.isArrayLit());
2425:       assertFalse(node3.hasOneChild());
2426:       assertFalse(node3.isExprResult());
2427:       assertFalse(node3.isCast());
2428:       assertFalse(node3.isScript());
2429:       assertFalse(node3.isGetElem());
2430:       assertFalse(node3.isDec());
2431:       assertFalse(node3.isAssign());
2432:       assertFalse(node3.isTypeOf());
2433:       assertFalse(node3.isWith());
2434:       assertFalse(node3.isLabel());
2435:       assertFalse(node3.isReturn());
2436:       assertEquals((-1), node3.getLineno());
2437:       assertFalse(node3.isInstanceOf());
2438:       assertFalse(node3.isOr());
2439:       assertFalse(node3.isAssignAdd());
2440:       assertEquals((-3893), node3.getType());
2441:       assertFalse(node3.isBreak());
2442:       assertFalse(node3.isNew());
2443:       assertFalse(node3.isAdd());
2444:       assertFalse(node3.isDo());
2445:       assertFalse(node3.isBlock());
2446:       assertFalse(node3.isVar());
2447:       assertFalse(node3.isThis());
2448:       assertFalse(node3.isHook());
2449:       assertFalse(node3.isCase());
2450:       assertFalse(node3.isGetterDef());
2451:       assertFalse(node3.isLabelName());
2452:       assertFalse(node3.isSwitch());
2453:       assertFalse(node3.isNumber());
2454:       assertEquals((-1), node3.getCharno());
2455:       assertFalse(node3.isParamList());
2456:       assertFalse(node3.isStringKey());
2457:       assertFalse(node3.isTry());
2458:       assertFalse(node3.isVoid());
2459:       assertFalse(node3.isEmpty());
2460:       assertFalse(node3.isArrayLit());
2461:       assertFalse(node3.isRegExp());
2462:       assertFalse(node3.isDefaultCase());
2463:       assertFalse(node3.isFunction());
2464:       assertFalse(node3.isFor());
2465:       assertFalse(node3.isIn());
2466:       assertFalse(node3.isCatch());
2467:       assertTrue(node3.hasChildren());
2468:       assertFalse(node3.isSetterDef());
2469:       assertFalse(node3.isDelProp());
2470:       assertTrue(node3.hasMoreThanOneChild());
2471:       assertFalse(node3.isName());
2472:       assertFalse(node3.isIf());
2473:       assertFalse(node3.isTrue());
2474:       assertFalse(node3.isNE());
2475:       assertFalse(node3.isNull());
2476:       assertFalse(node3.isCall());
2477:       assertFalse(node3.isInc());
2478:       assertFalse(node3.isWhile());
2479:       assertFalse(node3.isFalse());
2480:       assertFalse(node3.isThrow());
2481:       assertFalse(node3.isComma());
2482:       assertEquals(2, node3.getChildCount());
2483:       assertFalse(node3.isContinue());
2484:       assertFalse(node3.isGetProp());
2485:       assertFalse(node3.isString());
2486:       assertFalse(node3.isNot());
2487:       assertFalse(node3.isDebugger());
2488:       assertFalse(node3.isObjectLit());
2489:       assertFalse(node3.isAnd());
2490:       assertEquals((-1), node3.getSourcePosition());
2491:       assertEquals(54, Node.SLASH_V);
2492:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2493:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2494:       assertEquals(52, Node.LENGTH);
2495:       assertEquals(30, Node.VAR_ARGS_NAME);
2496:       assertEquals(1, Node.DECR_FLAG);
2497:       assertEquals(12, Node.COLUMN_BITS);
2498:       assertEquals(32, Node.INCRDECR_PROP);
2499:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2500:       assertEquals(57, Node.LAST_PROP);
2501:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2502:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2503:       assertEquals(2, Node.POST_FLAG);
2504:       assertEquals(50, Node.FREE_CALL);
2505:       assertEquals(40, Node.ORIGINALNAME_PROP);
2506:       assertEquals(43, Node.IS_CONSTANT_NAME);
2507:       assertEquals(46, Node.IS_NAMESPACE);
2508:       assertEquals(53, Node.INPUT_ID);
2509:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2510:       assertEquals(36, Node.QUOTED_PROP);
2511:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2512:       assertEquals(29, Node.JSDOC_INFO_PROP);
2513:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2514:       assertEquals(47, Node.IS_DISPATCHER);
2515:       assertEquals(48, Node.DIRECTIVES);
2516:       assertEquals(37, Node.OPT_ARG_NAME);
2517:       assertEquals(39, Node.EMPTY_BLOCK);
2518:       assertEquals(55, Node.INFERRED_FUNCTION);
2519:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2520:       assertEquals(8, Node.FLAG_NO_THROWS);
2521:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2522:       assertEquals(4095, Node.COLUMN_MASK);
2523:       assertEquals(49, Node.DIRECT_EVAL);
2524:       assertEquals(56, Node.CHANGE_TIME);
2525:       assertEquals(57, Node.REFLECTED_OBJECT);
2526:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2527:       assertEquals(52, Node.LENGTH);
2528:       assertEquals(57, Node.REFLECTED_OBJECT);
2529:       assertEquals(54, Node.SLASH_V);
2530:       assertEquals(40, Node.ORIGINALNAME_PROP);
2531:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2532:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2533:       assertEquals(8, Node.FLAG_NO_THROWS);
2534:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2535:       assertEquals(50, Node.FREE_CALL);
2536:   }
2537: }
RegularFileObject[/tmp/EvoSuite_298_1628159832307/com/google/javascript/rhino/Node_298_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:37:12 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_298_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_298_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.common.collect.Sets$1",
101:       "com.google.javascript.rhino.SourcePosition",
102:       "com.google.common.collect.ImmutableMapKeySet",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.javascript.rhino.Node$AncestorIterable$1",
115:       "com.google.common.collect.Iterators$12",
116:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
117:       "com.google.common.collect.Iterators$11",
118:       "com.google.javascript.rhino.jstype.JSType$1",
119:       "com.google.common.collect.EmptyImmutableBiMap",
120:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
121:       "com.google.common.base.Predicate",
122:       "com.google.javascript.rhino.jstype.JSType$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.common.collect.SingletonImmutableSet",
135:       "com.google.javascript.rhino.jstype.NamedType",
136:       "com.google.common.collect.Iterators$13",
137:       "com.google.javascript.rhino.InputId",
138:       "com.google.common.collect.ImmutableList$SerializedForm",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
163:       "com.google.common.base.Joiner$MapJoiner",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.javascript.rhino.Node$AncestorIterable",
185:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
186:       "com.google.common.collect.Lists$RandomAccessListWrapper",
187:       "com.google.common.collect.ImmutableEnumSet",
188:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
189:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
190:       "com.google.javascript.rhino.jstype.EnumElementType",
191:       "com.google.javascript.rhino.jstype.UnionType",
192:       "com.google.common.base.Objects",
193:       "com.google.javascript.rhino.Node$NumberNode",
194:       "com.google.common.collect.SingletonImmutableList",
195:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
196:       "com.google.common.collect.ImmutableCollection$Builder",
197:       "com.google.javascript.rhino.jstype.StaticSlot",
198:       "com.google.common.collect.Iterators$6",
199:       "com.google.common.collect.BiMap",
200:       "com.google.common.collect.Iterators$7",
201:       "com.google.common.collect.AbstractSetMultimap",
202:       "com.google.common.base.Function",
203:       "com.google.common.collect.ImmutableSet",
204:       "com.google.common.collect.Lists$AbstractListWrapper",
205:       "com.google.common.collect.ImmutableMap",
206:       "com.google.common.collect.AbstractIndexedListIterator",
207:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
208:       "com.google.common.collect.Maps$1",
209:       "com.google.javascript.rhino.jstype.EnumType",
210:       "com.google.common.collect.Iterators$1",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$2",
213:       "com.google.javascript.rhino.jstype.NamespaceType",
214:       "com.google.common.collect.Iterators$3",
215:       "com.google.common.collect.Sets",
216:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
217:       "com.google.javascript.rhino.Node$ObjectPropListItem",
218:       "com.google.common.collect.Lists$StringAsImmutableList",
219:       "com.google.common.collect.Lists$2",
220:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
221:       "com.google.common.collect.ImmutableList$Builder",
222:       "com.google.common.collect.Lists$1",
223:       "com.google.javascript.rhino.jstype.StaticReference",
224:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
225:       "com.google.common.collect.Multiset",
226:       "com.google.common.collect.AbstractMultimap",
227:       "com.google.common.collect.Multimap",
228:       "com.google.common.collect.Iterators",
229:       "com.google.common.collect.EmptyImmutableSet",
230:       "com.google.common.collect.Maps$ImprovedAbstractMap",
231:       "com.google.common.collect.ImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
233:       "com.google.common.collect.ImmutableList",
234:       "com.google.common.collect.SingletonImmutableBiMap",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
236:       "com.google.javascript.rhino.jstype.StringType",
237:       "com.google.javascript.rhino.Node$AbstractPropListItem",
238:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
239:       "com.google.javascript.rhino.jstype.TemplatizedType",
240:       "com.google.javascript.rhino.jstype.Visitor",
241:       "com.google.javascript.rhino.jstype.NoResolvedType",
242:       "com.google.javascript.rhino.jstype.JSTypeNative",
243:       "com.google.javascript.rhino.jstype.AllType",
244:       "com.google.common.collect.Maps",
245:       "com.google.common.collect.SetMultimap",
246:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
247:       "com.google.common.collect.Maps$EntryTransformer",
248:       "com.google.javascript.rhino.JSTypeExpression",
249:       "com.google.common.collect.Iterators$MergingIterator"
250:     );
251:   } 
252: 
253:   private static void resetClasses() {
254:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_298_tmp__ESTest_scaffolding.class.getClassLoader()); 
255: 
256:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
257:       "com.google.javascript.rhino.Node",
258:       "com.google.javascript.rhino.Node$NumberNode",
259:       "com.google.javascript.rhino.Node$StringNode",
260:       "com.google.javascript.rhino.Node$AbstractPropListItem",
261:       "com.google.javascript.rhino.Node$ObjectPropListItem",
262:       "com.google.javascript.rhino.Node$IntPropListItem",
263:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
264:       "com.google.javascript.rhino.Node$AncestorIterable",
265:       "com.google.javascript.rhino.Node$NodeMismatch",
266:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
267:       "com.google.javascript.rhino.Node$SideEffectFlags",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Preconditions",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
301:       "com.google.javascript.rhino.jstype.JSType$1",
302:       "com.google.javascript.rhino.jstype.JSType",
303:       "com.google.javascript.rhino.jstype.ObjectType",
304:       "com.google.javascript.rhino.jstype.ProxyObjectType",
305:       "com.google.javascript.rhino.jstype.TemplateType",
306:       "com.google.javascript.rhino.jstype.ValueType",
307:       "com.google.javascript.rhino.jstype.BooleanType",
308:       "com.google.javascript.rhino.jstype.NullType",
309:       "com.google.javascript.rhino.jstype.NumberType",
310:       "com.google.javascript.rhino.jstype.StringType",
311:       "com.google.javascript.rhino.jstype.UnknownType",
312:       "com.google.javascript.rhino.jstype.VoidType",
313:       "com.google.javascript.rhino.jstype.AllType",
314:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
315:       "com.google.common.collect.ImmutableMap",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.collect.EmptyImmutableBiMap",
318:       "com.google.javascript.rhino.jstype.PropertyMap$1",
319:       "com.google.javascript.rhino.jstype.PropertyMap",
320:       "com.google.javascript.rhino.jstype.FunctionType",
321:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
322:       "com.google.javascript.rhino.Token",
323:       "com.google.javascript.rhino.jstype.ArrowType",
324:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
325:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
326:       "com.google.javascript.rhino.jstype.InstanceObjectType",
327:       "com.google.javascript.rhino.jstype.Property",
328:       "com.google.common.collect.Lists",
329:       "com.google.javascript.rhino.jstype.NoObjectType",
330:       "com.google.javascript.rhino.jstype.NoType",
331:       "com.google.javascript.rhino.jstype.NoResolvedType",
332:       "com.google.common.collect.SingletonImmutableList",
333:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
334:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
335:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
336:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
337:       "com.google.javascript.rhino.jstype.UnionType",
338:       "com.google.javascript.rhino.jstype.FunctionBuilder",
339:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.javascript.rhino.jstype.TernaryValue",
348:       "com.google.common.collect.Iterables",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
353:       "com.google.common.collect.Sets",
354:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
355:       "com.google.javascript.rhino.InputId",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
364:       "com.google.javascript.rhino.JSTypeExpression",
365:       "com.google.common.collect.Platform",
366:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
371:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.JSDocInfo$Marker",
374:       "com.google.common.collect.Iterators$12",
375:       "com.google.javascript.rhino.jstype.JSType$2",
376:       "com.google.common.collect.ImmutableList$1"
377:     );
378:   }
379: }

[MASTER] 10:37:13.076 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(951.13);
assertNotNull(node0);
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

boolean boolean0 = node0.isOr();
assertFalse(boolean0);
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

Node node1 = Node.newString("", 429, 40);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(429, node1.getLineno());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isRegExp());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isDebugger());
assertFalse(node1.hasChildren());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertEquals(40, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertEquals(40, node1.getCharno());
assertFalse(node1.isArrayLit());
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean1 = node1.isUnscopedQualifiedName();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertEquals(429, node1.getLineno());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isRegExp());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isDebugger());
assertFalse(node1.hasChildren());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertEquals(40, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertEquals(40, node1.getCharno());
assertFalse(node1.isArrayLit());
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

Node node2 = Node.newString("", 56, 42);
assertNotSame(node2, node1);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertEquals(40, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertEquals(42, node2.getCharno());
assertFalse(node2.isCast());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isIn());
assertEquals(229418, node2.getSourcePosition());
assertFalse(node2.isTry());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isHook());
assertFalse(node2.isCatch());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isThis());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertTrue(node2.isString());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDefaultCase());
assertEquals(56, node2.getLineno());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabel());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);

node0.putProp(1528, node1);
assertNotSame(node1, node2);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertEquals(429, node1.getLineno());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isRegExp());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isDebugger());
assertFalse(node1.hasChildren());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertEquals(40, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertEquals(40, node1.getCharno());
assertFalse(node1.isArrayLit());
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
assertNotSame(node1, node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertNull(staticSourceFile0);
assertEquals(429, node1.getLineno());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isRegExp());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isDebugger());
assertFalse(node1.hasChildren());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertEquals(40, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertEquals(40, node1.getCharno());
assertFalse(node1.isArrayLit());
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

node1.setStaticSourceFile((StaticSourceFile) null);
assertNotSame(node1, node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(429, node1.getLineno());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isRegExp());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isDebugger());
assertFalse(node1.hasChildren());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertEquals(40, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertEquals(40, node1.getCharno());
assertFalse(node1.isArrayLit());
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean2 = node0.isDec();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

boolean boolean3 = node2.isDec();
assertNotSame(node2, node1);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertFalse(boolean3);
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertEquals(40, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertEquals(42, node2.getCharno());
assertFalse(node2.isCast());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isIn());
assertEquals(229418, node2.getSourcePosition());
assertFalse(node2.isTry());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isHook());
assertFalse(node2.isCatch());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isThis());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertTrue(node2.isString());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDefaultCase());
assertEquals(56, node2.getLineno());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabel());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean4 = node1.isEquivalentToShallow(node0);
assertNotSame(node1, node2);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertFalse(boolean4);
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertEquals(429, node1.getLineno());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isRegExp());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isDebugger());
assertFalse(node1.hasChildren());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertEquals(40, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertEquals(40, node1.getCharno());
assertFalse(node1.isArrayLit());
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean5 = node2.isNE();
assertNotSame(node2, node1);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean3);
assertFalse(boolean5);
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertEquals(40, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertEquals(42, node2.getCharno());
assertFalse(node2.isCast());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isIn());
assertEquals(229418, node2.getSourcePosition());
assertFalse(node2.isTry());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isHook());
assertFalse(node2.isCatch());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isThis());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertTrue(node2.isString());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDefaultCase());
assertEquals(56, node2.getLineno());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabel());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);

Node node3 = new Node((-3893), node0, node1, node0, node1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertNotNull(node3);
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertEquals(429, node1.getLineno());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isRegExp());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isDebugger());
assertFalse(node1.hasChildren());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertEquals(40, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertEquals(40, node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node3.hasOneChild());
assertFalse(node3.isExprResult());
assertFalse(node3.isCast());
assertFalse(node3.isScript());
assertFalse(node3.isGetElem());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isWith());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertEquals((-3893), node3.getType());
assertFalse(node3.isBreak());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isDo());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.isCase());
assertFalse(node3.isGetterDef());
assertFalse(node3.isLabelName());
assertFalse(node3.isSwitch());
assertFalse(node3.isNumber());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertFalse(node3.isEmpty());
assertFalse(node3.isArrayLit());
assertFalse(node3.isRegExp());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFunction());
assertFalse(node3.isFor());
assertFalse(node3.isIn());
assertFalse(node3.isCatch());
assertTrue(node3.hasChildren());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDelProp());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isName());
assertFalse(node3.isIf());
assertFalse(node3.isTrue());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertFalse(node3.isCall());
assertFalse(node3.isInc());
assertFalse(node3.isWhile());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isComma());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isContinue());
assertFalse(node3.isGetProp());
assertFalse(node3.isString());
assertFalse(node3.isNot());
assertFalse(node3.isDebugger());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertEquals((-1), node3.getSourcePosition());
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean6 = node3.hasOneChild();
assertNotSame(node1, node2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean0);
assertFalse(boolean6);
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertEquals(429, node1.getLineno());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isRegExp());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isDebugger());
assertFalse(node1.hasChildren());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertEquals(40, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertEquals(40, node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node3.hasOneChild());
assertFalse(node3.isExprResult());
assertFalse(node3.isCast());
assertFalse(node3.isScript());
assertFalse(node3.isGetElem());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isWith());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertEquals((-3893), node3.getType());
assertFalse(node3.isBreak());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isDo());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.isCase());
assertFalse(node3.isGetterDef());
assertFalse(node3.isLabelName());
assertFalse(node3.isSwitch());
assertFalse(node3.isNumber());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertFalse(node3.isEmpty());
assertFalse(node3.isArrayLit());
assertFalse(node3.isRegExp());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFunction());
assertFalse(node3.isFor());
assertFalse(node3.isIn());
assertFalse(node3.isCatch());
assertTrue(node3.hasChildren());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDelProp());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isName());
assertFalse(node3.isIf());
assertFalse(node3.isTrue());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertFalse(node3.isCall());
assertFalse(node3.isInc());
assertFalse(node3.isWhile());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isComma());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isContinue());
assertFalse(node3.isGetProp());
assertFalse(node3.isString());
assertFalse(node3.isNot());
assertFalse(node3.isDebugger());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertEquals((-1), node3.getSourcePosition());
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean7 = node3.isEmpty();
assertNotSame(node1, node2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean0);
assertFalse(boolean7);
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertEquals(429, node1.getLineno());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isRegExp());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isDebugger());
assertFalse(node1.hasChildren());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertEquals(40, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertEquals(40, node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node3.hasOneChild());
assertFalse(node3.isExprResult());
assertFalse(node3.isCast());
assertFalse(node3.isScript());
assertFalse(node3.isGetElem());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isWith());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertEquals((-3893), node3.getType());
assertFalse(node3.isBreak());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isDo());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.isCase());
assertFalse(node3.isGetterDef());
assertFalse(node3.isLabelName());
assertFalse(node3.isSwitch());
assertFalse(node3.isNumber());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertFalse(node3.isEmpty());
assertFalse(node3.isArrayLit());
assertFalse(node3.isRegExp());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFunction());
assertFalse(node3.isFor());
assertFalse(node3.isIn());
assertFalse(node3.isCatch());
assertTrue(node3.hasChildren());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDelProp());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isName());
assertFalse(node3.isIf());
assertFalse(node3.isTrue());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertFalse(node3.isCall());
assertFalse(node3.isInc());
assertFalse(node3.isWhile());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isComma());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isContinue());
assertFalse(node3.isGetProp());
assertFalse(node3.isString());
assertFalse(node3.isNot());
assertFalse(node3.isDebugger());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertEquals((-1), node3.getSourcePosition());
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);


[MASTER] 10:37:13.992 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_303_1628159833742/com/google/javascript/rhino/Node_303_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_303_1628159833742/com/google/javascript/rhino/Node_303_tmp__ESTest_scaffolding.java]]
[MASTER] 10:37:13.992 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:37:13.992 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:37:13.992 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 126
[MASTER] 10:37:13.993 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_303_1628159833742/com/google/javascript/rhino/Node_303_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:37:13 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_303_tmp__ESTest extends Node_303_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(951.13);
21:       assertNotNull(node0);
22:       assertFalse(node0.isNull());
23:       assertFalse(node0.isParamList());
24:       assertFalse(node0.isSetterDef());
25:       assertFalse(node0.isStringKey());
26:       assertFalse(node0.isName());
27:       assertFalse(node0.isAdd());
28:       assertFalse(node0.isDebugger());
29:       assertFalse(node0.isDo());
30:       assertFalse(node0.isNew());
31:       assertFalse(node0.isDefaultCase());
32:       assertFalse(node0.isArrayLit());
33:       assertFalse(node0.isVar());
34:       assertFalse(node0.isLabel());
35:       assertFalse(node0.isContinue());
36:       assertEquals(0, node0.getChildCount());
37:       assertFalse(node0.isFunction());
38:       assertFalse(node0.isNE());
39:       assertFalse(node0.isLabelName());
40:       assertFalse(node0.isFor());
41:       assertEquals((-1), node0.getLineno());
42:       assertFalse(node0.isIf());
43:       assertFalse(node0.hasOneChild());
44:       assertFalse(node0.isIn());
45:       assertFalse(node0.isGetterDef());
46:       assertFalse(node0.isScript());
47:       assertFalse(node0.isRegExp());
48:       assertFalse(node0.isBlock());
49:       assertFalse(node0.isTry());
50:       assertFalse(node0.isCase());
51:       assertFalse(node0.isCatch());
52:       assertFalse(node0.isInstanceOf());
53:       assertFalse(node0.isHook());
54:       assertEquals(39, node0.getType());
55:       assertFalse(node0.isWith());
56:       assertFalse(node0.hasMoreThanOneChild());
57:       assertFalse(node0.isComma());
58:       assertFalse(node0.isBreak());
59:       assertFalse(node0.isGetProp());
60:       assertFalse(node0.isThis());
61:       assertFalse(node0.isNot());
62:       assertFalse(node0.isObjectLit());
63:       assertEquals((-1), node0.getCharno());
64:       assertFalse(node0.isInc());
65:       assertFalse(node0.isAnd());
66:       assertFalse(node0.isSwitch());
67:       assertFalse(node0.isCast());
68:       assertFalse(node0.isThrow());
69:       assertFalse(node0.isFalse());
70:       assertFalse(node0.isTypeOf());
71:       assertEquals((-1), node0.getSourcePosition());
72:       assertFalse(node0.isDec());
73:       assertFalse(node0.hasChildren());
74:       assertFalse(node0.isAssignAdd());
75:       assertTrue(node0.isNumber());
76:       assertFalse(node0.isDelProp());
77:       assertFalse(node0.isEmpty());
78:       assertFalse(node0.isOr());
79:       assertFalse(node0.isString());
80:       assertFalse(node0.isExprResult());
81:       assertFalse(node0.isTrue());
82:       assertFalse(node0.isWhile());
83:       assertFalse(node0.isVoid());
84:       assertFalse(node0.isGetElem());
85:       assertFalse(node0.isCall());
86:       assertFalse(node0.isReturn());
87:       assertFalse(node0.isAssign());
88:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
89:       assertEquals(39, Node.EMPTY_BLOCK);
90:       assertEquals(40, Node.ORIGINALNAME_PROP);
91:       assertEquals(50, Node.FREE_CALL);
92:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
93:       assertEquals(8, Node.FLAG_NO_THROWS);
94:       assertEquals(57, Node.REFLECTED_OBJECT);
95:       assertEquals(48, Node.DIRECTIVES);
96:       assertEquals(54, Node.SLASH_V);
97:       assertEquals(15, Node.NO_SIDE_EFFECTS);
98:       assertEquals(57, Node.LAST_PROP);
99:       assertEquals(30, Node.VAR_ARGS_NAME);
100:       assertEquals(36, Node.QUOTED_PROP);
101:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
102:       assertEquals(53, Node.INPUT_ID);
103:       assertEquals(55, Node.INFERRED_FUNCTION);
104:       assertEquals(52, Node.LENGTH);
105:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
106:       assertEquals(56, Node.CHANGE_TIME);
107:       assertEquals(47, Node.IS_DISPATCHER);
108:       assertEquals(2, Node.POST_FLAG);
109:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
110:       assertEquals(37, Node.OPT_ARG_NAME);
111:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
112:       assertEquals(29, Node.JSDOC_INFO_PROP);
113:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
114:       assertEquals(46, Node.IS_NAMESPACE);
115:       assertEquals(51, Node.STATIC_SOURCE_FILE);
116:       assertEquals(49, Node.DIRECT_EVAL);
117:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
118:       assertEquals(43, Node.IS_CONSTANT_NAME);
119:       assertEquals(4095, Node.COLUMN_MASK);
120:       assertEquals(12, Node.COLUMN_BITS);
121:       assertEquals(32, Node.INCRDECR_PROP);
122:       assertEquals(1, Node.DECR_FLAG);
123:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(iterable0.contains(node0));
127:       assertNotNull(iterable0);
128:       assertFalse(node0.isNull());
129:       assertFalse(node0.isParamList());
130:       assertFalse(node0.isSetterDef());
131:       assertFalse(node0.isStringKey());
132:       assertFalse(node0.isName());
133:       assertFalse(node0.isAdd());
134:       assertFalse(node0.isDebugger());
135:       assertFalse(node0.isDo());
136:       assertFalse(node0.isNew());
137:       assertFalse(node0.isDefaultCase());
138:       assertFalse(node0.isArrayLit());
139:       assertFalse(node0.isVar());
140:       assertFalse(node0.isLabel());
141:       assertFalse(node0.isContinue());
142:       assertEquals(0, node0.getChildCount());
143:       assertFalse(node0.isFunction());
144:       assertFalse(node0.isNE());
145:       assertFalse(node0.isLabelName());
146:       assertFalse(node0.isFor());
147:       assertEquals((-1), node0.getLineno());
148:       assertFalse(node0.isIf());
149:       assertFalse(node0.hasOneChild());
150:       assertFalse(node0.isIn());
151:       assertFalse(node0.isGetterDef());
152:       assertFalse(node0.isScript());
153:       assertFalse(node0.isRegExp());
154:       assertFalse(node0.isBlock());
155:       assertFalse(node0.isTry());
156:       assertFalse(node0.isCase());
157:       assertFalse(node0.isCatch());
158:       assertFalse(node0.isInstanceOf());
159:       assertFalse(node0.isHook());
160:       assertEquals(39, node0.getType());
161:       assertFalse(node0.isWith());
162:       assertFalse(node0.hasMoreThanOneChild());
163:       assertFalse(node0.isComma());
164:       assertFalse(node0.isBreak());
165:       assertFalse(node0.isGetProp());
166:       assertFalse(node0.isThis());
167:       assertFalse(node0.isNot());
168:       assertFalse(node0.isObjectLit());
169:       assertEquals((-1), node0.getCharno());
170:       assertFalse(node0.isInc());
171:       assertFalse(node0.isAnd());
172:       assertFalse(node0.isSwitch());
173:       assertFalse(node0.isCast());
174:       assertFalse(node0.isThrow());
175:       assertFalse(node0.isFalse());
176:       assertFalse(node0.isTypeOf());
177:       assertEquals((-1), node0.getSourcePosition());
178:       assertFalse(node0.isDec());
179:       assertFalse(node0.hasChildren());
180:       assertFalse(node0.isAssignAdd());
181:       assertTrue(node0.isNumber());
182:       assertFalse(node0.isDelProp());
183:       assertFalse(node0.isEmpty());
184:       assertFalse(node0.isOr());
185:       assertFalse(node0.isString());
186:       assertFalse(node0.isExprResult());
187:       assertFalse(node0.isTrue());
188:       assertFalse(node0.isWhile());
189:       assertFalse(node0.isVoid());
190:       assertFalse(node0.isGetElem());
191:       assertFalse(node0.isCall());
192:       assertFalse(node0.isReturn());
193:       assertFalse(node0.isAssign());
194:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
195:       assertEquals(39, Node.EMPTY_BLOCK);
196:       assertEquals(40, Node.ORIGINALNAME_PROP);
197:       assertEquals(50, Node.FREE_CALL);
198:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
199:       assertEquals(8, Node.FLAG_NO_THROWS);
200:       assertEquals(57, Node.REFLECTED_OBJECT);
201:       assertEquals(48, Node.DIRECTIVES);
202:       assertEquals(54, Node.SLASH_V);
203:       assertEquals(15, Node.NO_SIDE_EFFECTS);
204:       assertEquals(57, Node.LAST_PROP);
205:       assertEquals(30, Node.VAR_ARGS_NAME);
206:       assertEquals(36, Node.QUOTED_PROP);
207:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
208:       assertEquals(53, Node.INPUT_ID);
209:       assertEquals(55, Node.INFERRED_FUNCTION);
210:       assertEquals(52, Node.LENGTH);
211:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
212:       assertEquals(56, Node.CHANGE_TIME);
213:       assertEquals(47, Node.IS_DISPATCHER);
214:       assertEquals(2, Node.POST_FLAG);
215:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
216:       assertEquals(37, Node.OPT_ARG_NAME);
217:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
218:       assertEquals(29, Node.JSDOC_INFO_PROP);
219:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
220:       assertEquals(46, Node.IS_NAMESPACE);
221:       assertEquals(51, Node.STATIC_SOURCE_FILE);
222:       assertEquals(49, Node.DIRECT_EVAL);
223:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
224:       assertEquals(43, Node.IS_CONSTANT_NAME);
225:       assertEquals(4095, Node.COLUMN_MASK);
226:       assertEquals(12, Node.COLUMN_BITS);
227:       assertEquals(32, Node.INCRDECR_PROP);
228:       assertEquals(1, Node.DECR_FLAG);
229:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
230:       
231:       boolean boolean0 = node0.isOr();
232:       assertFalse(boolean0);
233:       assertFalse(node0.isNull());
234:       assertFalse(node0.isParamList());
235:       assertFalse(node0.isSetterDef());
236:       assertFalse(node0.isStringKey());
237:       assertFalse(node0.isName());
238:       assertFalse(node0.isAdd());
239:       assertFalse(node0.isDebugger());
240:       assertFalse(node0.isDo());
241:       assertFalse(node0.isNew());
242:       assertFalse(node0.isDefaultCase());
243:       assertFalse(node0.isArrayLit());
244:       assertFalse(node0.isVar());
245:       assertFalse(node0.isLabel());
246:       assertFalse(node0.isContinue());
247:       assertEquals(0, node0.getChildCount());
248:       assertFalse(node0.isFunction());
249:       assertFalse(node0.isNE());
250:       assertFalse(node0.isLabelName());
251:       assertFalse(node0.isFor());
252:       assertEquals((-1), node0.getLineno());
253:       assertFalse(node0.isIf());
254:       assertFalse(node0.hasOneChild());
255:       assertFalse(node0.isIn());
256:       assertFalse(node0.isGetterDef());
257:       assertFalse(node0.isScript());
258:       assertFalse(node0.isRegExp());
259:       assertFalse(node0.isBlock());
260:       assertFalse(node0.isTry());
261:       assertFalse(node0.isCase());
262:       assertFalse(node0.isCatch());
263:       assertFalse(node0.isInstanceOf());
264:       assertFalse(node0.isHook());
265:       assertEquals(39, node0.getType());
266:       assertFalse(node0.isWith());
267:       assertFalse(node0.hasMoreThanOneChild());
268:       assertFalse(node0.isComma());
269:       assertFalse(node0.isBreak());
270:       assertFalse(node0.isGetProp());
271:       assertFalse(node0.isThis());
272:       assertFalse(node0.isNot());
273:       assertFalse(node0.isObjectLit());
274:       assertEquals((-1), node0.getCharno());
275:       assertFalse(node0.isInc());
276:       assertFalse(node0.isAnd());
277:       assertFalse(node0.isSwitch());
278:       assertFalse(node0.isCast());
279:       assertFalse(node0.isThrow());
280:       assertFalse(node0.isFalse());
281:       assertFalse(node0.isTypeOf());
282:       assertEquals((-1), node0.getSourcePosition());
283:       assertFalse(node0.isDec());
284:       assertFalse(node0.hasChildren());
285:       assertFalse(node0.isAssignAdd());
286:       assertTrue(node0.isNumber());
287:       assertFalse(node0.isDelProp());
288:       assertFalse(node0.isEmpty());
289:       assertFalse(node0.isOr());
290:       assertFalse(node0.isString());
291:       assertFalse(node0.isExprResult());
292:       assertFalse(node0.isTrue());
293:       assertFalse(node0.isWhile());
294:       assertFalse(node0.isVoid());
295:       assertFalse(node0.isGetElem());
296:       assertFalse(node0.isCall());
297:       assertFalse(node0.isReturn());
298:       assertFalse(node0.isAssign());
299:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
300:       assertEquals(39, Node.EMPTY_BLOCK);
301:       assertEquals(40, Node.ORIGINALNAME_PROP);
302:       assertEquals(50, Node.FREE_CALL);
303:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
304:       assertEquals(8, Node.FLAG_NO_THROWS);
305:       assertEquals(57, Node.REFLECTED_OBJECT);
306:       assertEquals(48, Node.DIRECTIVES);
307:       assertEquals(54, Node.SLASH_V);
308:       assertEquals(15, Node.NO_SIDE_EFFECTS);
309:       assertEquals(57, Node.LAST_PROP);
310:       assertEquals(30, Node.VAR_ARGS_NAME);
311:       assertEquals(36, Node.QUOTED_PROP);
312:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
313:       assertEquals(53, Node.INPUT_ID);
314:       assertEquals(55, Node.INFERRED_FUNCTION);
315:       assertEquals(52, Node.LENGTH);
316:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
317:       assertEquals(56, Node.CHANGE_TIME);
318:       assertEquals(47, Node.IS_DISPATCHER);
319:       assertEquals(2, Node.POST_FLAG);
320:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
321:       assertEquals(37, Node.OPT_ARG_NAME);
322:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
323:       assertEquals(29, Node.JSDOC_INFO_PROP);
324:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
325:       assertEquals(46, Node.IS_NAMESPACE);
326:       assertEquals(51, Node.STATIC_SOURCE_FILE);
327:       assertEquals(49, Node.DIRECT_EVAL);
328:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
329:       assertEquals(43, Node.IS_CONSTANT_NAME);
330:       assertEquals(4095, Node.COLUMN_MASK);
331:       assertEquals(12, Node.COLUMN_BITS);
332:       assertEquals(32, Node.INCRDECR_PROP);
333:       assertEquals(1, Node.DECR_FLAG);
334:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
335:       
336:       Node node1 = Node.newString("", 429, 40);
337:       assertFalse(node1.equals((Object)node0));
338:       assertNotNull(node1);
339:       assertFalse(node1.isDefaultCase());
340:       assertEquals(0, node1.getChildCount());
341:       assertEquals(40, node1.getType());
342:       assertFalse(node1.isTrue());
343:       assertFalse(node1.isDebugger());
344:       assertFalse(node1.isTry());
345:       assertFalse(node1.isSetterDef());
346:       assertFalse(node1.isDelProp());
347:       assertFalse(node1.isName());
348:       assertFalse(node1.isIf());
349:       assertFalse(node1.isNE());
350:       assertFalse(node1.isFor());
351:       assertFalse(node1.isNull());
352:       assertFalse(node1.isBlock());
353:       assertFalse(node1.isRegExp());
354:       assertFalse(node1.isVoid());
355:       assertFalse(node1.isCatch());
356:       assertFalse(node1.isCall());
357:       assertFalse(node1.isContinue());
358:       assertFalse(node1.isWhile());
359:       assertFalse(node1.isReturn());
360:       assertFalse(node1.isIn());
361:       assertFalse(node1.isInc());
362:       assertFalse(node1.isThrow());
363:       assertFalse(node1.isFalse());
364:       assertEquals(429, node1.getLineno());
365:       assertFalse(node1.isFunction());
366:       assertFalse(node1.isCast());
367:       assertFalse(node1.isAnd());
368:       assertFalse(node1.isWith());
369:       assertFalse(node1.isNot());
370:       assertFalse(node1.isObjectLit());
371:       assertFalse(node1.isGetProp());
372:       assertFalse(node1.hasOneChild());
373:       assertFalse(node1.isScript());
374:       assertFalse(node1.isGetElem());
375:       assertFalse(node1.isAssign());
376:       assertFalse(node1.isHook());
377:       assertFalse(node1.isDec());
378:       assertFalse(node1.hasChildren());
379:       assertFalse(node1.isThis());
380:       assertFalse(node1.isComma());
381:       assertFalse(node1.isTypeOf());
382:       assertFalse(node1.isInstanceOf());
383:       assertFalse(node1.isBreak());
384:       assertFalse(node1.isExprResult());
385:       assertFalse(node1.isCase());
386:       assertFalse(node1.hasMoreThanOneChild());
387:       assertFalse(node1.isDo());
388:       assertFalse(node1.isNew());
389:       assertFalse(node1.isAssignAdd());
390:       assertTrue(node1.isString());
391:       assertFalse(node1.isOr());
392:       assertFalse(node1.isNumber());
393:       assertFalse(node1.isEmpty());
394:       assertFalse(node1.isAdd());
395:       assertFalse(node1.isStringKey());
396:       assertFalse(node1.isLabelName());
397:       assertFalse(node1.isGetterDef());
398:       assertFalse(node1.isParamList());
399:       assertFalse(node1.isVar());
400:       assertFalse(node1.isLabel());
401:       assertFalse(node1.isSwitch());
402:       assertEquals(1757224, node1.getSourcePosition());
403:       assertFalse(node1.isArrayLit());
404:       assertEquals(40, node1.getCharno());
405:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
406:       assertEquals(55, Node.INFERRED_FUNCTION);
407:       assertEquals(4095, Node.COLUMN_MASK);
408:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
409:       assertEquals(48, Node.DIRECTIVES);
410:       assertEquals(43, Node.IS_CONSTANT_NAME);
411:       assertEquals(8, Node.FLAG_NO_THROWS);
412:       assertEquals(36, Node.QUOTED_PROP);
413:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
414:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
415:       assertEquals(50, Node.FREE_CALL);
416:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
417:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
418:       assertEquals(12, Node.COLUMN_BITS);
419:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
420:       assertEquals(1, Node.DECR_FLAG);
421:       assertEquals(49, Node.DIRECT_EVAL);
422:       assertEquals(32, Node.INCRDECR_PROP);
423:       assertEquals(15, Node.NO_SIDE_EFFECTS);
424:       assertEquals(37, Node.OPT_ARG_NAME);
425:       assertEquals(54, Node.SLASH_V);
426:       assertEquals(52, Node.LENGTH);
427:       assertEquals(46, Node.IS_NAMESPACE);
428:       assertEquals(56, Node.CHANGE_TIME);
429:       assertEquals(51, Node.STATIC_SOURCE_FILE);
430:       assertEquals(57, Node.REFLECTED_OBJECT);
431:       assertEquals(40, Node.ORIGINALNAME_PROP);
432:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
433:       assertEquals(29, Node.JSDOC_INFO_PROP);
434:       assertEquals(53, Node.INPUT_ID);
435:       assertEquals(39, Node.EMPTY_BLOCK);
436:       assertEquals(2, Node.POST_FLAG);
437:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
438:       assertEquals(57, Node.LAST_PROP);
439:       assertEquals(30, Node.VAR_ARGS_NAME);
440:       assertEquals(47, Node.IS_DISPATCHER);
441:       
442:       boolean boolean1 = node1.isUnscopedQualifiedName();
443:       assertFalse(node1.equals((Object)node0));
444:       assertTrue(boolean1 == boolean0);
445:       assertFalse(boolean1);
446:       assertFalse(node1.isDefaultCase());
447:       assertEquals(0, node1.getChildCount());
448:       assertEquals(40, node1.getType());
449:       assertFalse(node1.isTrue());
450:       assertFalse(node1.isDebugger());
451:       assertFalse(node1.isTry());
452:       assertFalse(node1.isSetterDef());
453:       assertFalse(node1.isDelProp());
454:       assertFalse(node1.isName());
455:       assertFalse(node1.isIf());
456:       assertFalse(node1.isNE());
457:       assertFalse(node1.isFor());
458:       assertFalse(node1.isNull());
459:       assertFalse(node1.isBlock());
460:       assertFalse(node1.isRegExp());
461:       assertFalse(node1.isVoid());
462:       assertFalse(node1.isCatch());
463:       assertFalse(node1.isCall());
464:       assertFalse(node1.isContinue());
465:       assertFalse(node1.isWhile());
466:       assertFalse(node1.isReturn());
467:       assertFalse(node1.isIn());
468:       assertFalse(node1.isInc());
469:       assertFalse(node1.isThrow());
470:       assertFalse(node1.isFalse());
471:       assertEquals(429, node1.getLineno());
472:       assertFalse(node1.isFunction());
473:       assertFalse(node1.isCast());
474:       assertFalse(node1.isAnd());
475:       assertFalse(node1.isWith());
476:       assertFalse(node1.isNot());
477:       assertFalse(node1.isObjectLit());
478:       assertFalse(node1.isGetProp());
479:       assertFalse(node1.hasOneChild());
480:       assertFalse(node1.isScript());
481:       assertFalse(node1.isGetElem());
482:       assertFalse(node1.isAssign());
483:       assertFalse(node1.isHook());
484:       assertFalse(node1.isDec());
485:       assertFalse(node1.hasChildren());
486:       assertFalse(node1.isThis());
487:       assertFalse(node1.isComma());
488:       assertFalse(node1.isTypeOf());
489:       assertFalse(node1.isInstanceOf());
490:       assertFalse(node1.isBreak());
491:       assertFalse(node1.isExprResult());
492:       assertFalse(node1.isCase());
493:       assertFalse(node1.hasMoreThanOneChild());
494:       assertFalse(node1.isDo());
495:       assertFalse(node1.isNew());
496:       assertFalse(node1.isAssignAdd());
497:       assertTrue(node1.isString());
498:       assertFalse(node1.isOr());
499:       assertFalse(node1.isNumber());
500:       assertFalse(node1.isEmpty());
501:       assertFalse(node1.isAdd());
502:       assertFalse(node1.isStringKey());
503:       assertFalse(node1.isLabelName());
504:       assertFalse(node1.isGetterDef());
505:       assertFalse(node1.isParamList());
506:       assertFalse(node1.isVar());
507:       assertFalse(node1.isLabel());
508:       assertFalse(node1.isSwitch());
509:       assertEquals(1757224, node1.getSourcePosition());
510:       assertFalse(node1.isArrayLit());
511:       assertEquals(40, node1.getCharno());
512:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
513:       assertEquals(55, Node.INFERRED_FUNCTION);
514:       assertEquals(4095, Node.COLUMN_MASK);
515:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
516:       assertEquals(48, Node.DIRECTIVES);
517:       assertEquals(43, Node.IS_CONSTANT_NAME);
518:       assertEquals(8, Node.FLAG_NO_THROWS);
519:       assertEquals(36, Node.QUOTED_PROP);
520:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
521:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
522:       assertEquals(50, Node.FREE_CALL);
523:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
524:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
525:       assertEquals(12, Node.COLUMN_BITS);
526:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
527:       assertEquals(1, Node.DECR_FLAG);
528:       assertEquals(49, Node.DIRECT_EVAL);
529:       assertEquals(32, Node.INCRDECR_PROP);
530:       assertEquals(15, Node.NO_SIDE_EFFECTS);
531:       assertEquals(37, Node.OPT_ARG_NAME);
532:       assertEquals(54, Node.SLASH_V);
533:       assertEquals(52, Node.LENGTH);
534:       assertEquals(46, Node.IS_NAMESPACE);
535:       assertEquals(56, Node.CHANGE_TIME);
536:       assertEquals(51, Node.STATIC_SOURCE_FILE);
537:       assertEquals(57, Node.REFLECTED_OBJECT);
538:       assertEquals(40, Node.ORIGINALNAME_PROP);
539:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
540:       assertEquals(29, Node.JSDOC_INFO_PROP);
541:       assertEquals(53, Node.INPUT_ID);
542:       assertEquals(39, Node.EMPTY_BLOCK);
543:       assertEquals(2, Node.POST_FLAG);
544:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
545:       assertEquals(57, Node.LAST_PROP);
546:       assertEquals(30, Node.VAR_ARGS_NAME);
547:       assertEquals(47, Node.IS_DISPATCHER);
548:       
549:       Node node2 = Node.newString("", 56, 42);
550:       assertNotSame(node2, node1);
551:       assertFalse(node2.equals((Object)node0));
552:       assertFalse(node2.equals((Object)node1));
553:       assertNotNull(node2);
554:       assertFalse(node2.isScript());
555:       assertFalse(node2.isWith());
556:       assertFalse(node2.isObjectLit());
557:       assertFalse(node2.isNot());
558:       assertEquals(56, node2.getLineno());
559:       assertFalse(node2.hasOneChild());
560:       assertFalse(node2.isGetProp());
561:       assertFalse(node2.isNumber());
562:       assertFalse(node2.isThrow());
563:       assertFalse(node2.isFalse());
564:       assertFalse(node2.isLabel());
565:       assertEquals(42, node2.getCharno());
566:       assertFalse(node2.isCast());
567:       assertFalse(node2.isContinue());
568:       assertFalse(node2.isAnd());
569:       assertFalse(node2.isLabelName());
570:       assertFalse(node2.isSwitch());
571:       assertFalse(node2.isBlock());
572:       assertFalse(node2.isIn());
573:       assertFalse(node2.isHook());
574:       assertTrue(node2.isString());
575:       assertFalse(node2.isInc());
576:       assertFalse(node2.isCase());
577:       assertFalse(node2.isIf());
578:       assertFalse(node2.isNE());
579:       assertFalse(node2.isFor());
580:       assertFalse(node2.isThis());
581:       assertFalse(node2.isInstanceOf());
582:       assertFalse(node2.isCatch());
583:       assertFalse(node2.hasMoreThanOneChild());
584:       assertFalse(node2.isDefaultCase());
585:       assertFalse(node2.isRegExp());
586:       assertEquals(40, node2.getType());
587:       assertFalse(node2.isFunction());
588:       assertFalse(node2.isTrue());
589:       assertFalse(node2.isDebugger());
590:       assertFalse(node2.isEmpty());
591:       assertFalse(node2.isTry());
592:       assertFalse(node2.isSetterDef());
593:       assertFalse(node2.isGetterDef());
594:       assertFalse(node2.isParamList());
595:       assertFalse(node2.isStringKey());
596:       assertEquals(0, node2.getChildCount());
597:       assertFalse(node2.isArrayLit());
598:       assertFalse(node2.isWhile());
599:       assertEquals(229418, node2.getSourcePosition());
600:       assertFalse(node2.isVar());
601:       assertFalse(node2.isAssignAdd());
602:       assertFalse(node2.isAdd());
603:       assertFalse(node2.isDo());
604:       assertFalse(node2.isNew());
605:       assertFalse(node2.isBreak());
606:       assertFalse(node2.hasChildren());
607:       assertFalse(node2.isDec());
608:       assertFalse(node2.isDelProp());
609:       assertFalse(node2.isNull());
610:       assertFalse(node2.isTypeOf());
611:       assertFalse(node2.isOr());
612:       assertFalse(node2.isComma());
613:       assertFalse(node2.isAssign());
614:       assertFalse(node2.isReturn());
615:       assertFalse(node2.isGetElem());
616:       assertFalse(node2.isName());
617:       assertFalse(node2.isExprResult());
618:       assertFalse(node2.isVoid());
619:       assertFalse(node2.isCall());
620:       assertEquals(43, Node.IS_CONSTANT_NAME);
621:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
622:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
623:       assertEquals(53, Node.INPUT_ID);
624:       assertEquals(55, Node.INFERRED_FUNCTION);
625:       assertEquals(8, Node.FLAG_NO_THROWS);
626:       assertEquals(36, Node.QUOTED_PROP);
627:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
628:       assertEquals(47, Node.IS_DISPATCHER);
629:       assertEquals(29, Node.JSDOC_INFO_PROP);
630:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
631:       assertEquals(40, Node.ORIGINALNAME_PROP);
632:       assertEquals(39, Node.EMPTY_BLOCK);
633:       assertEquals(2, Node.POST_FLAG);
634:       assertEquals(30, Node.VAR_ARGS_NAME);
635:       assertEquals(15, Node.NO_SIDE_EFFECTS);
636:       assertEquals(57, Node.LAST_PROP);
637:       assertEquals(49, Node.DIRECT_EVAL);
638:       assertEquals(1, Node.DECR_FLAG);
639:       assertEquals(52, Node.LENGTH);
640:       assertEquals(57, Node.REFLECTED_OBJECT);
641:       assertEquals(46, Node.IS_NAMESPACE);
642:       assertEquals(54, Node.SLASH_V);
643:       assertEquals(51, Node.STATIC_SOURCE_FILE);
644:       assertEquals(50, Node.FREE_CALL);
645:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
646:       assertEquals(56, Node.CHANGE_TIME);
647:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
648:       assertEquals(37, Node.OPT_ARG_NAME);
649:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
650:       assertEquals(48, Node.DIRECTIVES);
651:       assertEquals(32, Node.INCRDECR_PROP);
652:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
653:       assertEquals(12, Node.COLUMN_BITS);
654:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
655:       assertEquals(4095, Node.COLUMN_MASK);
656:       
657:       node0.putProp(1528, node1);
658:       assertNotSame(node1, node2);
659:       assertFalse(node0.equals((Object)node1));
660:       assertFalse(node0.equals((Object)node2));
661:       assertFalse(node1.equals((Object)node0));
662:       assertFalse(node1.equals((Object)node2));
663:       assertFalse(node0.isNull());
664:       assertFalse(node0.isParamList());
665:       assertFalse(node0.isSetterDef());
666:       assertFalse(node0.isStringKey());
667:       assertFalse(node0.isName());
668:       assertFalse(node0.isAdd());
669:       assertFalse(node0.isDebugger());
670:       assertFalse(node0.isDo());
671:       assertFalse(node0.isNew());
672:       assertFalse(node0.isDefaultCase());
673:       assertFalse(node0.isArrayLit());
674:       assertFalse(node0.isVar());
675:       assertFalse(node0.isLabel());
676:       assertFalse(node0.isContinue());
677:       assertEquals(0, node0.getChildCount());
678:       assertFalse(node0.isFunction());
679:       assertFalse(node0.isNE());
680:       assertFalse(node0.isLabelName());
681:       assertFalse(node0.isFor());
682:       assertEquals((-1), node0.getLineno());
683:       assertFalse(node0.isIf());
684:       assertFalse(node0.hasOneChild());
685:       assertFalse(node0.isIn());
686:       assertFalse(node0.isGetterDef());
687:       assertFalse(node0.isScript());
688:       assertFalse(node0.isRegExp());
689:       assertFalse(node0.isBlock());
690:       assertFalse(node0.isTry());
691:       assertFalse(node0.isCase());
692:       assertFalse(node0.isCatch());
693:       assertFalse(node0.isInstanceOf());
694:       assertFalse(node0.isHook());
695:       assertEquals(39, node0.getType());
696:       assertFalse(node0.isWith());
697:       assertFalse(node0.hasMoreThanOneChild());
698:       assertFalse(node0.isComma());
699:       assertFalse(node0.isBreak());
700:       assertFalse(node0.isGetProp());
701:       assertFalse(node0.isThis());
702:       assertFalse(node0.isNot());
703:       assertFalse(node0.isObjectLit());
704:       assertEquals((-1), node0.getCharno());
705:       assertFalse(node0.isInc());
706:       assertFalse(node0.isAnd());
707:       assertFalse(node0.isSwitch());
708:       assertFalse(node0.isCast());
709:       assertFalse(node0.isThrow());
710:       assertFalse(node0.isFalse());
711:       assertFalse(node0.isTypeOf());
712:       assertEquals((-1), node0.getSourcePosition());
713:       assertFalse(node0.isDec());
714:       assertFalse(node0.hasChildren());
715:       assertFalse(node0.isAssignAdd());
716:       assertTrue(node0.isNumber());
717:       assertFalse(node0.isDelProp());
718:       assertFalse(node0.isEmpty());
719:       assertFalse(node0.isOr());
720:       assertFalse(node0.isString());
721:       assertFalse(node0.isExprResult());
722:       assertFalse(node0.isTrue());
723:       assertFalse(node0.isWhile());
724:       assertFalse(node0.isVoid());
725:       assertFalse(node0.isGetElem());
726:       assertFalse(node0.isCall());
727:       assertFalse(node0.isReturn());
728:       assertFalse(node0.isAssign());
729:       assertFalse(node1.isDefaultCase());
730:       assertEquals(0, node1.getChildCount());
731:       assertEquals(40, node1.getType());
732:       assertFalse(node1.isTrue());
733:       assertFalse(node1.isDebugger());
734:       assertFalse(node1.isTry());
735:       assertFalse(node1.isSetterDef());
736:       assertFalse(node1.isDelProp());
737:       assertFalse(node1.isName());
738:       assertFalse(node1.isIf());
739:       assertFalse(node1.isNE());
740:       assertFalse(node1.isFor());
741:       assertFalse(node1.isNull());
742:       assertFalse(node1.isBlock());
743:       assertFalse(node1.isRegExp());
744:       assertFalse(node1.isVoid());
745:       assertFalse(node1.isCatch());
746:       assertFalse(node1.isCall());
747:       assertFalse(node1.isContinue());
748:       assertFalse(node1.isWhile());
749:       assertFalse(node1.isReturn());
750:       assertFalse(node1.isIn());
751:       assertFalse(node1.isInc());
752:       assertFalse(node1.isThrow());
753:       assertFalse(node1.isFalse());
754:       assertEquals(429, node1.getLineno());
755:       assertFalse(node1.isFunction());
756:       assertFalse(node1.isCast());
757:       assertFalse(node1.isAnd());
758:       assertFalse(node1.isWith());
759:       assertFalse(node1.isNot());
760:       assertFalse(node1.isObjectLit());
761:       assertFalse(node1.isGetProp());
762:       assertFalse(node1.hasOneChild());
763:       assertFalse(node1.isScript());
764:       assertFalse(node1.isGetElem());
765:       assertFalse(node1.isAssign());
766:       assertFalse(node1.isHook());
767:       assertFalse(node1.isDec());
768:       assertFalse(node1.hasChildren());
769:       assertFalse(node1.isThis());
770:       assertFalse(node1.isComma());
771:       assertFalse(node1.isTypeOf());
772:       assertFalse(node1.isInstanceOf());
773:       assertFalse(node1.isBreak());
774:       assertFalse(node1.isExprResult());
775:       assertFalse(node1.isCase());
776:       assertFalse(node1.hasMoreThanOneChild());
777:       assertFalse(node1.isDo());
778:       assertFalse(node1.isNew());
779:       assertFalse(node1.isAssignAdd());
780:       assertTrue(node1.isString());
781:       assertFalse(node1.isOr());
782:       assertFalse(node1.isNumber());
783:       assertFalse(node1.isEmpty());
784:       assertFalse(node1.isAdd());
785:       assertFalse(node1.isStringKey());
786:       assertFalse(node1.isLabelName());
787:       assertFalse(node1.isGetterDef());
788:       assertFalse(node1.isParamList());
789:       assertFalse(node1.isVar());
790:       assertFalse(node1.isLabel());
791:       assertFalse(node1.isSwitch());
792:       assertEquals(1757224, node1.getSourcePosition());
793:       assertFalse(node1.isArrayLit());
794:       assertEquals(40, node1.getCharno());
795:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
796:       assertEquals(39, Node.EMPTY_BLOCK);
797:       assertEquals(40, Node.ORIGINALNAME_PROP);
798:       assertEquals(50, Node.FREE_CALL);
799:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
800:       assertEquals(8, Node.FLAG_NO_THROWS);
801:       assertEquals(57, Node.REFLECTED_OBJECT);
802:       assertEquals(48, Node.DIRECTIVES);
803:       assertEquals(54, Node.SLASH_V);
804:       assertEquals(15, Node.NO_SIDE_EFFECTS);
805:       assertEquals(57, Node.LAST_PROP);
806:       assertEquals(30, Node.VAR_ARGS_NAME);
807:       assertEquals(36, Node.QUOTED_PROP);
808:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
809:       assertEquals(53, Node.INPUT_ID);
810:       assertEquals(55, Node.INFERRED_FUNCTION);
811:       assertEquals(52, Node.LENGTH);
812:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
813:       assertEquals(56, Node.CHANGE_TIME);
814:       assertEquals(47, Node.IS_DISPATCHER);
815:       assertEquals(2, Node.POST_FLAG);
816:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
817:       assertEquals(37, Node.OPT_ARG_NAME);
818:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
819:       assertEquals(29, Node.JSDOC_INFO_PROP);
820:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
821:       assertEquals(46, Node.IS_NAMESPACE);
822:       assertEquals(51, Node.STATIC_SOURCE_FILE);
823:       assertEquals(49, Node.DIRECT_EVAL);
824:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
825:       assertEquals(43, Node.IS_CONSTANT_NAME);
826:       assertEquals(4095, Node.COLUMN_MASK);
827:       assertEquals(12, Node.COLUMN_BITS);
828:       assertEquals(32, Node.INCRDECR_PROP);
829:       assertEquals(1, Node.DECR_FLAG);
830:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
831:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
832:       assertEquals(55, Node.INFERRED_FUNCTION);
833:       assertEquals(4095, Node.COLUMN_MASK);
834:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
835:       assertEquals(48, Node.DIRECTIVES);
836:       assertEquals(43, Node.IS_CONSTANT_NAME);
837:       assertEquals(8, Node.FLAG_NO_THROWS);
838:       assertEquals(36, Node.QUOTED_PROP);
839:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
840:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
841:       assertEquals(50, Node.FREE_CALL);
842:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
843:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
844:       assertEquals(12, Node.COLUMN_BITS);
845:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
846:       assertEquals(1, Node.DECR_FLAG);
847:       assertEquals(49, Node.DIRECT_EVAL);
848:       assertEquals(32, Node.INCRDECR_PROP);
849:       assertEquals(15, Node.NO_SIDE_EFFECTS);
850:       assertEquals(37, Node.OPT_ARG_NAME);
851:       assertEquals(54, Node.SLASH_V);
852:       assertEquals(52, Node.LENGTH);
853:       assertEquals(46, Node.IS_NAMESPACE);
854:       assertEquals(56, Node.CHANGE_TIME);
855:       assertEquals(51, Node.STATIC_SOURCE_FILE);
856:       assertEquals(57, Node.REFLECTED_OBJECT);
857:       assertEquals(40, Node.ORIGINALNAME_PROP);
858:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
859:       assertEquals(29, Node.JSDOC_INFO_PROP);
860:       assertEquals(53, Node.INPUT_ID);
861:       assertEquals(39, Node.EMPTY_BLOCK);
862:       assertEquals(2, Node.POST_FLAG);
863:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
864:       assertEquals(57, Node.LAST_PROP);
865:       assertEquals(30, Node.VAR_ARGS_NAME);
866:       assertEquals(47, Node.IS_DISPATCHER);
867:       
868:       node1.setWasEmptyNode(false);
869:       assertNotSame(node1, node2);
870:       assertFalse(node1.equals((Object)node0));
871:       assertFalse(node1.equals((Object)node2));
872:       assertFalse(node1.isDefaultCase());
873:       assertEquals(0, node1.getChildCount());
874:       assertEquals(40, node1.getType());
875:       assertFalse(node1.isTrue());
876:       assertFalse(node1.isDebugger());
877:       assertFalse(node1.isTry());
878:       assertFalse(node1.isSetterDef());
879:       assertFalse(node1.isDelProp());
880:       assertFalse(node1.isName());
881:       assertFalse(node1.isIf());
882:       assertFalse(node1.isNE());
883:       assertFalse(node1.isFor());
884:       assertFalse(node1.isNull());
885:       assertFalse(node1.isBlock());
886:       assertFalse(node1.isRegExp());
887:       assertFalse(node1.isVoid());
888:       assertFalse(node1.isCatch());
889:       assertFalse(node1.isCall());
890:       assertFalse(node1.isContinue());
891:       assertFalse(node1.isWhile());
892:       assertFalse(node1.isReturn());
893:       assertFalse(node1.isIn());
894:       assertFalse(node1.isInc());
895:       assertFalse(node1.isThrow());
896:       assertFalse(node1.isFalse());
897:       assertEquals(429, node1.getLineno());
898:       assertFalse(node1.isFunction());
899:       assertFalse(node1.isCast());
900:       assertFalse(node1.isAnd());
901:       assertFalse(node1.isWith());
902:       assertFalse(node1.isNot());
903:       assertFalse(node1.isObjectLit());
904:       assertFalse(node1.isGetProp());
905:       assertFalse(node1.hasOneChild());
906:       assertFalse(node1.isScript());
907:       assertFalse(node1.isGetElem());
908:       assertFalse(node1.isAssign());
909:       assertFalse(node1.isHook());
910:       assertFalse(node1.isDec());
911:       assertFalse(node1.hasChildren());
912:       assertFalse(node1.isThis());
913:       assertFalse(node1.isComma());
914:       assertFalse(node1.isTypeOf());
915:       assertFalse(node1.isInstanceOf());
916:       assertFalse(node1.isBreak());
917:       assertFalse(node1.isExprResult());
918:       assertFalse(node1.isCase());
919:       assertFalse(node1.hasMoreThanOneChild());
920:       assertFalse(node1.isDo());
921:       assertFalse(node1.isNew());
922:       assertFalse(node1.isAssignAdd());
923:       assertTrue(node1.isString());
924:       assertFalse(node1.isOr());
925:       assertFalse(node1.isNumber());
926:       assertFalse(node1.isEmpty());
927:       assertFalse(node1.isAdd());
928:       assertFalse(node1.isStringKey());
929:       assertFalse(node1.isLabelName());
930:       assertFalse(node1.isGetterDef());
931:       assertFalse(node1.isParamList());
932:       assertFalse(node1.isVar());
933:       assertFalse(node1.isLabel());
934:       assertFalse(node1.isSwitch());
935:       assertEquals(1757224, node1.getSourcePosition());
936:       assertFalse(node1.isArrayLit());
937:       assertEquals(40, node1.getCharno());
938:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
939:       assertEquals(55, Node.INFERRED_FUNCTION);
940:       assertEquals(4095, Node.COLUMN_MASK);
941:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
942:       assertEquals(48, Node.DIRECTIVES);
943:       assertEquals(43, Node.IS_CONSTANT_NAME);
944:       assertEquals(8, Node.FLAG_NO_THROWS);
945:       assertEquals(36, Node.QUOTED_PROP);
946:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
947:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
948:       assertEquals(50, Node.FREE_CALL);
949:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
950:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
951:       assertEquals(12, Node.COLUMN_BITS);
952:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
953:       assertEquals(1, Node.DECR_FLAG);
954:       assertEquals(49, Node.DIRECT_EVAL);
955:       assertEquals(32, Node.INCRDECR_PROP);
956:       assertEquals(15, Node.NO_SIDE_EFFECTS);
957:       assertEquals(37, Node.OPT_ARG_NAME);
958:       assertEquals(54, Node.SLASH_V);
959:       assertEquals(52, Node.LENGTH);
960:       assertEquals(46, Node.IS_NAMESPACE);
961:       assertEquals(56, Node.CHANGE_TIME);
962:       assertEquals(51, Node.STATIC_SOURCE_FILE);
963:       assertEquals(57, Node.REFLECTED_OBJECT);
964:       assertEquals(40, Node.ORIGINALNAME_PROP);
965:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
966:       assertEquals(29, Node.JSDOC_INFO_PROP);
967:       assertEquals(53, Node.INPUT_ID);
968:       assertEquals(39, Node.EMPTY_BLOCK);
969:       assertEquals(2, Node.POST_FLAG);
970:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
971:       assertEquals(57, Node.LAST_PROP);
972:       assertEquals(30, Node.VAR_ARGS_NAME);
973:       assertEquals(47, Node.IS_DISPATCHER);
974:       
975:       String string0 = node1.getSourceFileName();
976:       assertNotSame(node1, node2);
977:       assertFalse(node1.equals((Object)node0));
978:       assertFalse(node1.equals((Object)node2));
979:       assertNull(string0);
980:       assertFalse(node1.isDefaultCase());
981:       assertEquals(0, node1.getChildCount());
982:       assertEquals(40, node1.getType());
983:       assertFalse(node1.isTrue());
984:       assertFalse(node1.isDebugger());
985:       assertFalse(node1.isTry());
986:       assertFalse(node1.isSetterDef());
987:       assertFalse(node1.isDelProp());
988:       assertFalse(node1.isName());
989:       assertFalse(node1.isIf());
990:       assertFalse(node1.isNE());
991:       assertFalse(node1.isFor());
992:       assertFalse(node1.isNull());
993:       assertFalse(node1.isBlock());
994:       assertFalse(node1.isRegExp());
995:       assertFalse(node1.isVoid());
996:       assertFalse(node1.isCatch());
997:       assertFalse(node1.isCall());
998:       assertFalse(node1.isContinue());
999:       assertFalse(node1.isWhile());
1000:       assertFalse(node1.isReturn());
1001:       assertFalse(node1.isIn());
1002:       assertFalse(node1.isInc());
1003:       assertFalse(node1.isThrow());
1004:       assertFalse(node1.isFalse());
1005:       assertEquals(429, node1.getLineno());
1006:       assertFalse(node1.isFunction());
1007:       assertFalse(node1.isCast());
1008:       assertFalse(node1.isAnd());
1009:       assertFalse(node1.isWith());
1010:       assertFalse(node1.isNot());
1011:       assertFalse(node1.isObjectLit());
1012:       assertFalse(node1.isGetProp());
1013:       assertFalse(node1.hasOneChild());
1014:       assertFalse(node1.isScript());
1015:       assertFalse(node1.isGetElem());
1016:       assertFalse(node1.isAssign());
1017:       assertFalse(node1.isHook());
1018:       assertFalse(node1.isDec());
1019:       assertFalse(node1.hasChildren());
1020:       assertFalse(node1.isThis());
1021:       assertFalse(node1.isComma());
1022:       assertFalse(node1.isTypeOf());
1023:       assertFalse(node1.isInstanceOf());
1024:       assertFalse(node1.isBreak());
1025:       assertFalse(node1.isExprResult());
1026:       assertFalse(node1.isCase());
1027:       assertFalse(node1.hasMoreThanOneChild());
1028:       assertFalse(node1.isDo());
1029:       assertFalse(node1.isNew());
1030:       assertFalse(node1.isAssignAdd());
1031:       assertTrue(node1.isString());
1032:       assertFalse(node1.isOr());
1033:       assertFalse(node1.isNumber());
1034:       assertFalse(node1.isEmpty());
1035:       assertFalse(node1.isAdd());
1036:       assertFalse(node1.isStringKey());
1037:       assertFalse(node1.isLabelName());
1038:       assertFalse(node1.isGetterDef());
1039:       assertFalse(node1.isParamList());
1040:       assertFalse(node1.isVar());
1041:       assertFalse(node1.isLabel());
1042:       assertFalse(node1.isSwitch());
1043:       assertEquals(1757224, node1.getSourcePosition());
1044:       assertFalse(node1.isArrayLit());
1045:       assertEquals(40, node1.getCharno());
1046:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1047:       assertEquals(55, Node.INFERRED_FUNCTION);
1048:       assertEquals(4095, Node.COLUMN_MASK);
1049:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1050:       assertEquals(48, Node.DIRECTIVES);
1051:       assertEquals(43, Node.IS_CONSTANT_NAME);
1052:       assertEquals(8, Node.FLAG_NO_THROWS);
1053:       assertEquals(36, Node.QUOTED_PROP);
1054:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1055:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1056:       assertEquals(50, Node.FREE_CALL);
1057:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1058:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1059:       assertEquals(12, Node.COLUMN_BITS);
1060:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1061:       assertEquals(1, Node.DECR_FLAG);
1062:       assertEquals(49, Node.DIRECT_EVAL);
1063:       assertEquals(32, Node.INCRDECR_PROP);
1064:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1065:       assertEquals(37, Node.OPT_ARG_NAME);
1066:       assertEquals(54, Node.SLASH_V);
1067:       assertEquals(52, Node.LENGTH);
1068:       assertEquals(46, Node.IS_NAMESPACE);
1069:       assertEquals(56, Node.CHANGE_TIME);
1070:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1071:       assertEquals(57, Node.REFLECTED_OBJECT);
1072:       assertEquals(40, Node.ORIGINALNAME_PROP);
1073:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1074:       assertEquals(29, Node.JSDOC_INFO_PROP);
1075:       assertEquals(53, Node.INPUT_ID);
1076:       assertEquals(39, Node.EMPTY_BLOCK);
1077:       assertEquals(2, Node.POST_FLAG);
1078:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1079:       assertEquals(57, Node.LAST_PROP);
1080:       assertEquals(30, Node.VAR_ARGS_NAME);
1081:       assertEquals(47, Node.IS_DISPATCHER);
1082:       
1083:       node1.addChildrenToBack(node2);
1084:       assertNotSame(node1, node2);
1085:       assertNotSame(node2, node1);
1086:       assertFalse(node1.equals((Object)node0));
1087:       assertFalse(node1.equals((Object)node2));
1088:       assertFalse(node2.equals((Object)node0));
1089:       assertFalse(node2.equals((Object)node1));
1090:       assertFalse(node1.isDefaultCase());
1091:       assertEquals(40, node1.getType());
1092:       assertFalse(node1.isTrue());
1093:       assertFalse(node1.isDebugger());
1094:       assertFalse(node1.isTry());
1095:       assertFalse(node1.isSetterDef());
1096:       assertFalse(node1.isDelProp());
1097:       assertFalse(node1.isName());
1098:       assertFalse(node1.isIf());
1099:       assertTrue(node1.hasOneChild());
1100:       assertFalse(node1.isNE());
1101:       assertFalse(node1.isFor());
1102:       assertFalse(node1.isNull());
1103:       assertFalse(node1.isBlock());
1104:       assertFalse(node1.isRegExp());
1105:       assertFalse(node1.isVoid());
1106:       assertFalse(node1.isCatch());
1107:       assertTrue(node1.hasChildren());
1108:       assertFalse(node1.isCall());
1109:       assertFalse(node1.isContinue());
1110:       assertFalse(node1.isWhile());
1111:       assertFalse(node1.isReturn());
1112:       assertFalse(node1.isIn());
1113:       assertFalse(node1.isInc());
1114:       assertFalse(node1.isThrow());
1115:       assertFalse(node1.isFalse());
1116:       assertEquals(429, node1.getLineno());
1117:       assertFalse(node1.isFunction());
1118:       assertFalse(node1.isCast());
1119:       assertFalse(node1.isAnd());
1120:       assertFalse(node1.isWith());
1121:       assertFalse(node1.isNot());
1122:       assertFalse(node1.isObjectLit());
1123:       assertFalse(node1.isGetProp());
1124:       assertFalse(node1.isScript());
1125:       assertFalse(node1.isGetElem());
1126:       assertFalse(node1.isAssign());
1127:       assertFalse(node1.isHook());
1128:       assertFalse(node1.isDec());
1129:       assertFalse(node1.isThis());
1130:       assertFalse(node1.isComma());
1131:       assertFalse(node1.isTypeOf());
1132:       assertFalse(node1.isInstanceOf());
1133:       assertFalse(node1.isBreak());
1134:       assertFalse(node1.isExprResult());
1135:       assertFalse(node1.isCase());
1136:       assertFalse(node1.hasMoreThanOneChild());
1137:       assertFalse(node1.isDo());
1138:       assertEquals(1, node1.getChildCount());
1139:       assertFalse(node1.isNew());
1140:       assertFalse(node1.isAssignAdd());
1141:       assertTrue(node1.isString());
1142:       assertFalse(node1.isOr());
1143:       assertFalse(node1.isNumber());
1144:       assertFalse(node1.isEmpty());
1145:       assertFalse(node1.isAdd());
1146:       assertFalse(node1.isStringKey());
1147:       assertFalse(node1.isLabelName());
1148:       assertFalse(node1.isGetterDef());
1149:       assertFalse(node1.isParamList());
1150:       assertFalse(node1.isVar());
1151:       assertFalse(node1.isLabel());
1152:       assertFalse(node1.isSwitch());
1153:       assertEquals(1757224, node1.getSourcePosition());
1154:       assertFalse(node1.isArrayLit());
1155:       assertEquals(40, node1.getCharno());
1156:       assertFalse(node2.isScript());
1157:       assertFalse(node2.isWith());
1158:       assertFalse(node2.isObjectLit());
1159:       assertFalse(node2.isNot());
1160:       assertEquals(56, node2.getLineno());
1161:       assertFalse(node2.hasOneChild());
1162:       assertFalse(node2.isGetProp());
1163:       assertFalse(node2.isNumber());
1164:       assertFalse(node2.isThrow());
1165:       assertFalse(node2.isFalse());
1166:       assertFalse(node2.isLabel());
1167:       assertEquals(42, node2.getCharno());
1168:       assertFalse(node2.isCast());
1169:       assertFalse(node2.isContinue());
1170:       assertFalse(node2.isAnd());
1171:       assertFalse(node2.isLabelName());
1172:       assertFalse(node2.isSwitch());
1173:       assertFalse(node2.isBlock());
1174:       assertFalse(node2.isIn());
1175:       assertFalse(node2.isHook());
1176:       assertTrue(node2.isString());
1177:       assertFalse(node2.isInc());
1178:       assertFalse(node2.isCase());
1179:       assertFalse(node2.isIf());
1180:       assertFalse(node2.isNE());
1181:       assertFalse(node2.isFor());
1182:       assertFalse(node2.isThis());
1183:       assertFalse(node2.isInstanceOf());
1184:       assertFalse(node2.isCatch());
1185:       assertFalse(node2.hasMoreThanOneChild());
1186:       assertFalse(node2.isDefaultCase());
1187:       assertFalse(node2.isRegExp());
1188:       assertEquals(40, node2.getType());
1189:       assertFalse(node2.isFunction());
1190:       assertFalse(node2.isTrue());
1191:       assertFalse(node2.isDebugger());
1192:       assertFalse(node2.isEmpty());
1193:       assertFalse(node2.isTry());
1194:       assertFalse(node2.isSetterDef());
1195:       assertFalse(node2.isGetterDef());
1196:       assertFalse(node2.isParamList());
1197:       assertFalse(node2.isStringKey());
1198:       assertEquals(0, node2.getChildCount());
1199:       assertFalse(node2.isArrayLit());
1200:       assertFalse(node2.isWhile());
1201:       assertEquals(229418, node2.getSourcePosition());
1202:       assertFalse(node2.isVar());
1203:       assertFalse(node2.isAssignAdd());
1204:       assertFalse(node2.isAdd());
1205:       assertFalse(node2.isDo());
1206:       assertFalse(node2.isNew());
1207:       assertFalse(node2.isBreak());
1208:       assertFalse(node2.hasChildren());
1209:       assertFalse(node2.isDec());
1210:       assertFalse(node2.isDelProp());
1211:       assertFalse(node2.isNull());
1212:       assertFalse(node2.isTypeOf());
1213:       assertFalse(node2.isOr());
1214:       assertFalse(node2.isComma());
1215:       assertFalse(node2.isAssign());
1216:       assertFalse(node2.isReturn());
1217:       assertFalse(node2.isGetElem());
1218:       assertFalse(node2.isName());
1219:       assertFalse(node2.isExprResult());
1220:       assertFalse(node2.isVoid());
1221:       assertFalse(node2.isCall());
1222:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1223:       assertEquals(55, Node.INFERRED_FUNCTION);
1224:       assertEquals(4095, Node.COLUMN_MASK);
1225:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1226:       assertEquals(48, Node.DIRECTIVES);
1227:       assertEquals(43, Node.IS_CONSTANT_NAME);
1228:       assertEquals(8, Node.FLAG_NO_THROWS);
1229:       assertEquals(36, Node.QUOTED_PROP);
1230:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1231:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1232:       assertEquals(50, Node.FREE_CALL);
1233:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1234:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1235:       assertEquals(12, Node.COLUMN_BITS);
1236:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1237:       assertEquals(1, Node.DECR_FLAG);
1238:       assertEquals(49, Node.DIRECT_EVAL);
1239:       assertEquals(32, Node.INCRDECR_PROP);
1240:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1241:       assertEquals(37, Node.OPT_ARG_NAME);
1242:       assertEquals(54, Node.SLASH_V);
1243:       assertEquals(52, Node.LENGTH);
1244:       assertEquals(46, Node.IS_NAMESPACE);
1245:       assertEquals(56, Node.CHANGE_TIME);
1246:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1247:       assertEquals(57, Node.REFLECTED_OBJECT);
1248:       assertEquals(40, Node.ORIGINALNAME_PROP);
1249:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1250:       assertEquals(29, Node.JSDOC_INFO_PROP);
1251:       assertEquals(53, Node.INPUT_ID);
1252:       assertEquals(39, Node.EMPTY_BLOCK);
1253:       assertEquals(2, Node.POST_FLAG);
1254:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1255:       assertEquals(57, Node.LAST_PROP);
1256:       assertEquals(30, Node.VAR_ARGS_NAME);
1257:       assertEquals(47, Node.IS_DISPATCHER);
1258:       assertEquals(43, Node.IS_CONSTANT_NAME);
1259:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1260:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1261:       assertEquals(53, Node.INPUT_ID);
1262:       assertEquals(55, Node.INFERRED_FUNCTION);
1263:       assertEquals(8, Node.FLAG_NO_THROWS);
1264:       assertEquals(36, Node.QUOTED_PROP);
1265:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1266:       assertEquals(47, Node.IS_DISPATCHER);
1267:       assertEquals(29, Node.JSDOC_INFO_PROP);
1268:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1269:       assertEquals(40, Node.ORIGINALNAME_PROP);
1270:       assertEquals(39, Node.EMPTY_BLOCK);
1271:       assertEquals(2, Node.POST_FLAG);
1272:       assertEquals(30, Node.VAR_ARGS_NAME);
1273:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1274:       assertEquals(57, Node.LAST_PROP);
1275:       assertEquals(49, Node.DIRECT_EVAL);
1276:       assertEquals(1, Node.DECR_FLAG);
1277:       assertEquals(52, Node.LENGTH);
1278:       assertEquals(57, Node.REFLECTED_OBJECT);
1279:       assertEquals(46, Node.IS_NAMESPACE);
1280:       assertEquals(54, Node.SLASH_V);
1281:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1282:       assertEquals(50, Node.FREE_CALL);
1283:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1284:       assertEquals(56, Node.CHANGE_TIME);
1285:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1286:       assertEquals(37, Node.OPT_ARG_NAME);
1287:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1288:       assertEquals(48, Node.DIRECTIVES);
1289:       assertEquals(32, Node.INCRDECR_PROP);
1290:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1291:       assertEquals(12, Node.COLUMN_BITS);
1292:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1293:       assertEquals(4095, Node.COLUMN_MASK);
1294:       
1295:       node1.setQuotedString();
1296:       assertNotSame(node1, node2);
1297:       assertFalse(node1.equals((Object)node0));
1298:       assertFalse(node1.equals((Object)node2));
1299:       assertFalse(node1.isDefaultCase());
1300:       assertEquals(40, node1.getType());
1301:       assertFalse(node1.isTrue());
1302:       assertFalse(node1.isDebugger());
1303:       assertFalse(node1.isTry());
1304:       assertFalse(node1.isSetterDef());
1305:       assertFalse(node1.isDelProp());
1306:       assertFalse(node1.isName());
1307:       assertFalse(node1.isIf());
1308:       assertTrue(node1.hasOneChild());
1309:       assertFalse(node1.isNE());
1310:       assertFalse(node1.isFor());
1311:       assertFalse(node1.isNull());
1312:       assertFalse(node1.isBlock());
1313:       assertFalse(node1.isRegExp());
1314:       assertFalse(node1.isVoid());
1315:       assertFalse(node1.isCatch());
1316:       assertTrue(node1.hasChildren());
1317:       assertFalse(node1.isCall());
1318:       assertFalse(node1.isContinue());
1319:       assertFalse(node1.isWhile());
1320:       assertFalse(node1.isReturn());
1321:       assertFalse(node1.isIn());
1322:       assertFalse(node1.isInc());
1323:       assertFalse(node1.isThrow());
1324:       assertFalse(node1.isFalse());
1325:       assertEquals(429, node1.getLineno());
1326:       assertFalse(node1.isFunction());
1327:       assertFalse(node1.isCast());
1328:       assertFalse(node1.isAnd());
1329:       assertFalse(node1.isWith());
1330:       assertFalse(node1.isNot());
1331:       assertFalse(node1.isObjectLit());
1332:       assertFalse(node1.isGetProp());
1333:       assertFalse(node1.isScript());
1334:       assertFalse(node1.isGetElem());
1335:       assertFalse(node1.isAssign());
1336:       assertFalse(node1.isHook());
1337:       assertFalse(node1.isDec());
1338:       assertFalse(node1.isThis());
1339:       assertFalse(node1.isComma());
1340:       assertFalse(node1.isTypeOf());
1341:       assertFalse(node1.isInstanceOf());
1342:       assertFalse(node1.isBreak());
1343:       assertFalse(node1.isExprResult());
1344:       assertFalse(node1.isCase());
1345:       assertFalse(node1.hasMoreThanOneChild());
1346:       assertFalse(node1.isDo());
1347:       assertEquals(1, node1.getChildCount());
1348:       assertFalse(node1.isNew());
1349:       assertFalse(node1.isAssignAdd());
1350:       assertTrue(node1.isString());
1351:       assertFalse(node1.isOr());
1352:       assertFalse(node1.isNumber());
1353:       assertFalse(node1.isEmpty());
1354:       assertFalse(node1.isAdd());
1355:       assertFalse(node1.isStringKey());
1356:       assertFalse(node1.isLabelName());
1357:       assertFalse(node1.isGetterDef());
1358:       assertFalse(node1.isParamList());
1359:       assertFalse(node1.isVar());
1360:       assertFalse(node1.isLabel());
1361:       assertFalse(node1.isSwitch());
1362:       assertEquals(1757224, node1.getSourcePosition());
1363:       assertFalse(node1.isArrayLit());
1364:       assertEquals(40, node1.getCharno());
1365:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1366:       assertEquals(55, Node.INFERRED_FUNCTION);
1367:       assertEquals(4095, Node.COLUMN_MASK);
1368:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1369:       assertEquals(48, Node.DIRECTIVES);
1370:       assertEquals(43, Node.IS_CONSTANT_NAME);
1371:       assertEquals(8, Node.FLAG_NO_THROWS);
1372:       assertEquals(36, Node.QUOTED_PROP);
1373:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1374:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1375:       assertEquals(50, Node.FREE_CALL);
1376:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1377:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1378:       assertEquals(12, Node.COLUMN_BITS);
1379:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1380:       assertEquals(1, Node.DECR_FLAG);
1381:       assertEquals(49, Node.DIRECT_EVAL);
1382:       assertEquals(32, Node.INCRDECR_PROP);
1383:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1384:       assertEquals(37, Node.OPT_ARG_NAME);
1385:       assertEquals(54, Node.SLASH_V);
1386:       assertEquals(52, Node.LENGTH);
1387:       assertEquals(46, Node.IS_NAMESPACE);
1388:       assertEquals(56, Node.CHANGE_TIME);
1389:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1390:       assertEquals(57, Node.REFLECTED_OBJECT);
1391:       assertEquals(40, Node.ORIGINALNAME_PROP);
1392:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1393:       assertEquals(29, Node.JSDOC_INFO_PROP);
1394:       assertEquals(53, Node.INPUT_ID);
1395:       assertEquals(39, Node.EMPTY_BLOCK);
1396:       assertEquals(2, Node.POST_FLAG);
1397:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1398:       assertEquals(57, Node.LAST_PROP);
1399:       assertEquals(30, Node.VAR_ARGS_NAME);
1400:       assertEquals(47, Node.IS_DISPATCHER);
1401:       
1402:       int int0 = Node.mergeLineCharNo(42, 36);
1403:       assertEquals(172068, int0);
1404:       
1405:       boolean boolean2 = node2.isFalse();
1406:       assertNotSame(node2, node1);
1407:       assertFalse(node2.equals((Object)node0));
1408:       assertFalse(node2.equals((Object)node1));
1409:       assertTrue(boolean2 == boolean0);
1410:       assertTrue(boolean2 == boolean1);
1411:       assertFalse(boolean2);
1412:       assertFalse(node2.isScript());
1413:       assertFalse(node2.isWith());
1414:       assertFalse(node2.isObjectLit());
1415:       assertFalse(node2.isNot());
1416:       assertEquals(56, node2.getLineno());
1417:       assertFalse(node2.hasOneChild());
1418:       assertFalse(node2.isGetProp());
1419:       assertFalse(node2.isNumber());
1420:       assertFalse(node2.isThrow());
1421:       assertFalse(node2.isFalse());
1422:       assertFalse(node2.isLabel());
1423:       assertEquals(42, node2.getCharno());
1424:       assertFalse(node2.isCast());
1425:       assertFalse(node2.isContinue());
1426:       assertFalse(node2.isAnd());
1427:       assertFalse(node2.isLabelName());
1428:       assertFalse(node2.isSwitch());
1429:       assertFalse(node2.isBlock());
1430:       assertFalse(node2.isIn());
1431:       assertFalse(node2.isHook());
1432:       assertTrue(node2.isString());
1433:       assertFalse(node2.isInc());
1434:       assertFalse(node2.isCase());
1435:       assertFalse(node2.isIf());
1436:       assertFalse(node2.isNE());
1437:       assertFalse(node2.isFor());
1438:       assertFalse(node2.isThis());
1439:       assertFalse(node2.isInstanceOf());
1440:       assertFalse(node2.isCatch());
1441:       assertFalse(node2.hasMoreThanOneChild());
1442:       assertFalse(node2.isDefaultCase());
1443:       assertFalse(node2.isRegExp());
1444:       assertEquals(40, node2.getType());
1445:       assertFalse(node2.isFunction());
1446:       assertFalse(node2.isTrue());
1447:       assertFalse(node2.isDebugger());
1448:       assertFalse(node2.isEmpty());
1449:       assertFalse(node2.isTry());
1450:       assertFalse(node2.isSetterDef());
1451:       assertFalse(node2.isGetterDef());
1452:       assertFalse(node2.isParamList());
1453:       assertFalse(node2.isStringKey());
1454:       assertEquals(0, node2.getChildCount());
1455:       assertFalse(node2.isArrayLit());
1456:       assertFalse(node2.isWhile());
1457:       assertEquals(229418, node2.getSourcePosition());
1458:       assertFalse(node2.isVar());
1459:       assertFalse(node2.isAssignAdd());
1460:       assertFalse(node2.isAdd());
1461:       assertFalse(node2.isDo());
1462:       assertFalse(node2.isNew());
1463:       assertFalse(node2.isBreak());
1464:       assertFalse(node2.hasChildren());
1465:       assertFalse(node2.isDec());
1466:       assertFalse(node2.isDelProp());
1467:       assertFalse(node2.isNull());
1468:       assertFalse(node2.isTypeOf());
1469:       assertFalse(node2.isOr());
1470:       assertFalse(node2.isComma());
1471:       assertFalse(node2.isAssign());
1472:       assertFalse(node2.isReturn());
1473:       assertFalse(node2.isGetElem());
1474:       assertFalse(node2.isName());
1475:       assertFalse(node2.isExprResult());
1476:       assertFalse(node2.isVoid());
1477:       assertFalse(node2.isCall());
1478:       assertEquals(43, Node.IS_CONSTANT_NAME);
1479:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1480:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1481:       assertEquals(53, Node.INPUT_ID);
1482:       assertEquals(55, Node.INFERRED_FUNCTION);
1483:       assertEquals(8, Node.FLAG_NO_THROWS);
1484:       assertEquals(36, Node.QUOTED_PROP);
1485:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1486:       assertEquals(47, Node.IS_DISPATCHER);
1487:       assertEquals(29, Node.JSDOC_INFO_PROP);
1488:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1489:       assertEquals(40, Node.ORIGINALNAME_PROP);
1490:       assertEquals(39, Node.EMPTY_BLOCK);
1491:       assertEquals(2, Node.POST_FLAG);
1492:       assertEquals(30, Node.VAR_ARGS_NAME);
1493:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1494:       assertEquals(57, Node.LAST_PROP);
1495:       assertEquals(49, Node.DIRECT_EVAL);
1496:       assertEquals(1, Node.DECR_FLAG);
1497:       assertEquals(52, Node.LENGTH);
1498:       assertEquals(57, Node.REFLECTED_OBJECT);
1499:       assertEquals(46, Node.IS_NAMESPACE);
1500:       assertEquals(54, Node.SLASH_V);
1501:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1502:       assertEquals(50, Node.FREE_CALL);
1503:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1504:       assertEquals(56, Node.CHANGE_TIME);
1505:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1506:       assertEquals(37, Node.OPT_ARG_NAME);
1507:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1508:       assertEquals(48, Node.DIRECTIVES);
1509:       assertEquals(32, Node.INCRDECR_PROP);
1510:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1511:       assertEquals(12, Node.COLUMN_BITS);
1512:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1513:       assertEquals(4095, Node.COLUMN_MASK);
1514:       
1515:       node1.setVarArgs(false);
1516:       assertNotSame(node1, node2);
1517:       assertFalse(node1.equals((Object)node0));
1518:       assertFalse(node1.equals((Object)node2));
1519:       assertFalse(node1.isDefaultCase());
1520:       assertEquals(40, node1.getType());
1521:       assertFalse(node1.isTrue());
1522:       assertFalse(node1.isDebugger());
1523:       assertFalse(node1.isTry());
1524:       assertFalse(node1.isSetterDef());
1525:       assertFalse(node1.isDelProp());
1526:       assertFalse(node1.isName());
1527:       assertFalse(node1.isIf());
1528:       assertTrue(node1.hasOneChild());
1529:       assertFalse(node1.isNE());
1530:       assertFalse(node1.isFor());
1531:       assertFalse(node1.isNull());
1532:       assertFalse(node1.isBlock());
1533:       assertFalse(node1.isRegExp());
1534:       assertFalse(node1.isVoid());
1535:       assertFalse(node1.isCatch());
1536:       assertTrue(node1.hasChildren());
1537:       assertFalse(node1.isCall());
1538:       assertFalse(node1.isContinue());
1539:       assertFalse(node1.isWhile());
1540:       assertFalse(node1.isReturn());
1541:       assertFalse(node1.isIn());
1542:       assertFalse(node1.isInc());
1543:       assertFalse(node1.isThrow());
1544:       assertFalse(node1.isFalse());
1545:       assertEquals(429, node1.getLineno());
1546:       assertFalse(node1.isFunction());
1547:       assertFalse(node1.isCast());
1548:       assertFalse(node1.isAnd());
1549:       assertFalse(node1.isWith());
1550:       assertFalse(node1.isNot());
1551:       assertFalse(node1.isObjectLit());
1552:       assertFalse(node1.isGetProp());
1553:       assertFalse(node1.isScript());
1554:       assertFalse(node1.isGetElem());
1555:       assertFalse(node1.isAssign());
1556:       assertFalse(node1.isHook());
1557:       assertFalse(node1.isDec());
1558:       assertFalse(node1.isThis());
1559:       assertFalse(node1.isComma());
1560:       assertFalse(node1.isTypeOf());
1561:       assertFalse(node1.isInstanceOf());
1562:       assertFalse(node1.isBreak());
1563:       assertFalse(node1.isExprResult());
1564:       assertFalse(node1.isCase());
1565:       assertFalse(node1.hasMoreThanOneChild());
1566:       assertFalse(node1.isDo());
1567:       assertEquals(1, node1.getChildCount());
1568:       assertFalse(node1.isNew());
1569:       assertFalse(node1.isAssignAdd());
1570:       assertTrue(node1.isString());
1571:       assertFalse(node1.isOr());
1572:       assertFalse(node1.isNumber());
1573:       assertFalse(node1.isEmpty());
1574:       assertFalse(node1.isAdd());
1575:       assertFalse(node1.isStringKey());
1576:       assertFalse(node1.isLabelName());
1577:       assertFalse(node1.isGetterDef());
1578:       assertFalse(node1.isParamList());
1579:       assertFalse(node1.isVar());
1580:       assertFalse(node1.isLabel());
1581:       assertFalse(node1.isSwitch());
1582:       assertEquals(1757224, node1.getSourcePosition());
1583:       assertFalse(node1.isArrayLit());
1584:       assertEquals(40, node1.getCharno());
1585:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1586:       assertEquals(55, Node.INFERRED_FUNCTION);
1587:       assertEquals(4095, Node.COLUMN_MASK);
1588:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1589:       assertEquals(48, Node.DIRECTIVES);
1590:       assertEquals(43, Node.IS_CONSTANT_NAME);
1591:       assertEquals(8, Node.FLAG_NO_THROWS);
1592:       assertEquals(36, Node.QUOTED_PROP);
1593:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1594:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1595:       assertEquals(50, Node.FREE_CALL);
1596:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1597:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1598:       assertEquals(12, Node.COLUMN_BITS);
1599:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1600:       assertEquals(1, Node.DECR_FLAG);
1601:       assertEquals(49, Node.DIRECT_EVAL);
1602:       assertEquals(32, Node.INCRDECR_PROP);
1603:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1604:       assertEquals(37, Node.OPT_ARG_NAME);
1605:       assertEquals(54, Node.SLASH_V);
1606:       assertEquals(52, Node.LENGTH);
1607:       assertEquals(46, Node.IS_NAMESPACE);
1608:       assertEquals(56, Node.CHANGE_TIME);
1609:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1610:       assertEquals(57, Node.REFLECTED_OBJECT);
1611:       assertEquals(40, Node.ORIGINALNAME_PROP);
1612:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1613:       assertEquals(29, Node.JSDOC_INFO_PROP);
1614:       assertEquals(53, Node.INPUT_ID);
1615:       assertEquals(39, Node.EMPTY_BLOCK);
1616:       assertEquals(2, Node.POST_FLAG);
1617:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1618:       assertEquals(57, Node.LAST_PROP);
1619:       assertEquals(30, Node.VAR_ARGS_NAME);
1620:       assertEquals(47, Node.IS_DISPATCHER);
1621:       
1622:       boolean boolean3 = node1.isGetElem();
1623:       assertNotSame(node1, node2);
1624:       assertFalse(node1.equals((Object)node0));
1625:       assertFalse(node1.equals((Object)node2));
1626:       assertTrue(boolean3 == boolean0);
1627:       assertTrue(boolean3 == boolean2);
1628:       assertTrue(boolean3 == boolean1);
1629:       assertFalse(boolean3);
1630:       assertFalse(node1.isDefaultCase());
1631:       assertEquals(40, node1.getType());
1632:       assertFalse(node1.isTrue());
1633:       assertFalse(node1.isDebugger());
1634:       assertFalse(node1.isTry());
1635:       assertFalse(node1.isSetterDef());
1636:       assertFalse(node1.isDelProp());
1637:       assertFalse(node1.isName());
1638:       assertFalse(node1.isIf());
1639:       assertTrue(node1.hasOneChild());
1640:       assertFalse(node1.isNE());
1641:       assertFalse(node1.isFor());
1642:       assertFalse(node1.isNull());
1643:       assertFalse(node1.isBlock());
1644:       assertFalse(node1.isRegExp());
1645:       assertFalse(node1.isVoid());
1646:       assertFalse(node1.isCatch());
1647:       assertTrue(node1.hasChildren());
1648:       assertFalse(node1.isCall());
1649:       assertFalse(node1.isContinue());
1650:       assertFalse(node1.isWhile());
1651:       assertFalse(node1.isReturn());
1652:       assertFalse(node1.isIn());
1653:       assertFalse(node1.isInc());
1654:       assertFalse(node1.isThrow());
1655:       assertFalse(node1.isFalse());
1656:       assertEquals(429, node1.getLineno());
1657:       assertFalse(node1.isFunction());
1658:       assertFalse(node1.isCast());
1659:       assertFalse(node1.isAnd());
1660:       assertFalse(node1.isWith());
1661:       assertFalse(node1.isNot());
1662:       assertFalse(node1.isObjectLit());
1663:       assertFalse(node1.isGetProp());
1664:       assertFalse(node1.isScript());
1665:       assertFalse(node1.isGetElem());
1666:       assertFalse(node1.isAssign());
1667:       assertFalse(node1.isHook());
1668:       assertFalse(node1.isDec());
1669:       assertFalse(node1.isThis());
1670:       assertFalse(node1.isComma());
1671:       assertFalse(node1.isTypeOf());
1672:       assertFalse(node1.isInstanceOf());
1673:       assertFalse(node1.isBreak());
1674:       assertFalse(node1.isExprResult());
1675:       assertFalse(node1.isCase());
1676:       assertFalse(node1.hasMoreThanOneChild());
1677:       assertFalse(node1.isDo());
1678:       assertEquals(1, node1.getChildCount());
1679:       assertFalse(node1.isNew());
1680:       assertFalse(node1.isAssignAdd());
1681:       assertTrue(node1.isString());
1682:       assertFalse(node1.isOr());
1683:       assertFalse(node1.isNumber());
1684:       assertFalse(node1.isEmpty());
1685:       assertFalse(node1.isAdd());
1686:       assertFalse(node1.isStringKey());
1687:       assertFalse(node1.isLabelName());
1688:       assertFalse(node1.isGetterDef());
1689:       assertFalse(node1.isParamList());
1690:       assertFalse(node1.isVar());
1691:       assertFalse(node1.isLabel());
1692:       assertFalse(node1.isSwitch());
1693:       assertEquals(1757224, node1.getSourcePosition());
1694:       assertFalse(node1.isArrayLit());
1695:       assertEquals(40, node1.getCharno());
1696:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1697:       assertEquals(55, Node.INFERRED_FUNCTION);
1698:       assertEquals(4095, Node.COLUMN_MASK);
1699:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1700:       assertEquals(48, Node.DIRECTIVES);
1701:       assertEquals(43, Node.IS_CONSTANT_NAME);
1702:       assertEquals(8, Node.FLAG_NO_THROWS);
1703:       assertEquals(36, Node.QUOTED_PROP);
1704:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1705:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1706:       assertEquals(50, Node.FREE_CALL);
1707:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1708:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1709:       assertEquals(12, Node.COLUMN_BITS);
1710:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1711:       assertEquals(1, Node.DECR_FLAG);
1712:       assertEquals(49, Node.DIRECT_EVAL);
1713:       assertEquals(32, Node.INCRDECR_PROP);
1714:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1715:       assertEquals(37, Node.OPT_ARG_NAME);
1716:       assertEquals(54, Node.SLASH_V);
1717:       assertEquals(52, Node.LENGTH);
1718:       assertEquals(46, Node.IS_NAMESPACE);
1719:       assertEquals(56, Node.CHANGE_TIME);
1720:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1721:       assertEquals(57, Node.REFLECTED_OBJECT);
1722:       assertEquals(40, Node.ORIGINALNAME_PROP);
1723:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1724:       assertEquals(29, Node.JSDOC_INFO_PROP);
1725:       assertEquals(53, Node.INPUT_ID);
1726:       assertEquals(39, Node.EMPTY_BLOCK);
1727:       assertEquals(2, Node.POST_FLAG);
1728:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1729:       assertEquals(57, Node.LAST_PROP);
1730:       assertEquals(30, Node.VAR_ARGS_NAME);
1731:       assertEquals(47, Node.IS_DISPATCHER);
1732:       
1733:       boolean boolean4 = node2.isFromExterns();
1734:       assertNotSame(node2, node1);
1735:       assertFalse(node2.equals((Object)node0));
1736:       assertFalse(node2.equals((Object)node1));
1737:       assertTrue(boolean4 == boolean2);
1738:       assertTrue(boolean4 == boolean1);
1739:       assertTrue(boolean4 == boolean3);
1740:       assertTrue(boolean4 == boolean0);
1741:       assertFalse(boolean4);
1742:       assertFalse(node2.isScript());
1743:       assertFalse(node2.isWith());
1744:       assertFalse(node2.isObjectLit());
1745:       assertFalse(node2.isNot());
1746:       assertEquals(56, node2.getLineno());
1747:       assertFalse(node2.hasOneChild());
1748:       assertFalse(node2.isGetProp());
1749:       assertFalse(node2.isNumber());
1750:       assertFalse(node2.isThrow());
1751:       assertFalse(node2.isFalse());
1752:       assertFalse(node2.isLabel());
1753:       assertEquals(42, node2.getCharno());
1754:       assertFalse(node2.isCast());
1755:       assertFalse(node2.isContinue());
1756:       assertFalse(node2.isAnd());
1757:       assertFalse(node2.isLabelName());
1758:       assertFalse(node2.isSwitch());
1759:       assertFalse(node2.isBlock());
1760:       assertFalse(node2.isIn());
1761:       assertFalse(node2.isHook());
1762:       assertTrue(node2.isString());
1763:       assertFalse(node2.isInc());
1764:       assertFalse(node2.isCase());
1765:       assertFalse(node2.isIf());
1766:       assertFalse(node2.isNE());
1767:       assertFalse(node2.isFor());
1768:       assertFalse(node2.isThis());
1769:       assertFalse(node2.isInstanceOf());
1770:       assertFalse(node2.isCatch());
1771:       assertFalse(node2.hasMoreThanOneChild());
1772:       assertFalse(node2.isDefaultCase());
1773:       assertFalse(node2.isRegExp());
1774:       assertEquals(40, node2.getType());
1775:       assertFalse(node2.isFunction());
1776:       assertFalse(node2.isTrue());
1777:       assertFalse(node2.isDebugger());
1778:       assertFalse(node2.isEmpty());
1779:       assertFalse(node2.isTry());
1780:       assertFalse(node2.isSetterDef());
1781:       assertFalse(node2.isGetterDef());
1782:       assertFalse(node2.isParamList());
1783:       assertFalse(node2.isStringKey());
1784:       assertEquals(0, node2.getChildCount());
1785:       assertFalse(node2.isArrayLit());
1786:       assertFalse(node2.isWhile());
1787:       assertEquals(229418, node2.getSourcePosition());
1788:       assertFalse(node2.isVar());
1789:       assertFalse(node2.isAssignAdd());
1790:       assertFalse(node2.isAdd());
1791:       assertFalse(node2.isDo());
1792:       assertFalse(node2.isNew());
1793:       assertFalse(node2.isBreak());
1794:       assertFalse(node2.hasChildren());
1795:       assertFalse(node2.isDec());
1796:       assertFalse(node2.isDelProp());
1797:       assertFalse(node2.isNull());
1798:       assertFalse(node2.isTypeOf());
1799:       assertFalse(node2.isOr());
1800:       assertFalse(node2.isComma());
1801:       assertFalse(node2.isAssign());
1802:       assertFalse(node2.isReturn());
1803:       assertFalse(node2.isGetElem());
1804:       assertFalse(node2.isName());
1805:       assertFalse(node2.isExprResult());
1806:       assertFalse(node2.isVoid());
1807:       assertFalse(node2.isCall());
1808:       assertEquals(43, Node.IS_CONSTANT_NAME);
1809:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1810:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1811:       assertEquals(53, Node.INPUT_ID);
1812:       assertEquals(55, Node.INFERRED_FUNCTION);
1813:       assertEquals(8, Node.FLAG_NO_THROWS);
1814:       assertEquals(36, Node.QUOTED_PROP);
1815:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1816:       assertEquals(47, Node.IS_DISPATCHER);
1817:       assertEquals(29, Node.JSDOC_INFO_PROP);
1818:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1819:       assertEquals(40, Node.ORIGINALNAME_PROP);
1820:       assertEquals(39, Node.EMPTY_BLOCK);
1821:       assertEquals(2, Node.POST_FLAG);
1822:       assertEquals(30, Node.VAR_ARGS_NAME);
1823:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1824:       assertEquals(57, Node.LAST_PROP);
1825:       assertEquals(49, Node.DIRECT_EVAL);
1826:       assertEquals(1, Node.DECR_FLAG);
1827:       assertEquals(52, Node.LENGTH);
1828:       assertEquals(57, Node.REFLECTED_OBJECT);
1829:       assertEquals(46, Node.IS_NAMESPACE);
1830:       assertEquals(54, Node.SLASH_V);
1831:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1832:       assertEquals(50, Node.FREE_CALL);
1833:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1834:       assertEquals(56, Node.CHANGE_TIME);
1835:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1836:       assertEquals(37, Node.OPT_ARG_NAME);
1837:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1838:       assertEquals(48, Node.DIRECTIVES);
1839:       assertEquals(32, Node.INCRDECR_PROP);
1840:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1841:       assertEquals(12, Node.COLUMN_BITS);
1842:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1843:       assertEquals(4095, Node.COLUMN_MASK);
1844:       
1845:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
1846:       assertNotNull(node_SideEffectFlags0);
1847:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1848:       assertEquals(0, node_SideEffectFlags0.valueOf());
1849:       
1850:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
1851:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1852:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1853:       assertNotNull(node_SideEffectFlags1);
1854:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1855:       assertEquals(0, node_SideEffectFlags0.valueOf());
1856:       assertEquals(0, node_SideEffectFlags1.valueOf());
1857:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1858:       
1859:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
1860:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1861:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1862:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1863:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1864:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1865:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1866:       assertNotNull(node_SideEffectFlags2);
1867:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1868:       assertEquals(0, node_SideEffectFlags0.valueOf());
1869:       assertEquals(0, node_SideEffectFlags1.valueOf());
1870:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1871:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1872:       assertEquals(0, node_SideEffectFlags2.valueOf());
1873:       
1874:       int int1 = node_SideEffectFlags2.valueOf();
1875:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1876:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1877:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1878:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1879:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1880:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1881:       assertFalse(int1 == int0);
1882:       assertEquals(0, int1);
1883:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1884:       assertEquals(0, node_SideEffectFlags0.valueOf());
1885:       assertEquals(0, node_SideEffectFlags1.valueOf());
1886:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1887:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1888:       assertEquals(0, node_SideEffectFlags2.valueOf());
1889:   }
1890: }
RegularFileObject[/tmp/EvoSuite_303_1628159833742/com/google/javascript/rhino/Node_303_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:37:13 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_303_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_303_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.common.collect.Sets$1",
101:       "com.google.javascript.rhino.SourcePosition",
102:       "com.google.common.collect.ImmutableMapKeySet",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.javascript.rhino.Node$AncestorIterable$1",
115:       "com.google.common.collect.Iterators$12",
116:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
117:       "com.google.common.collect.Iterators$11",
118:       "com.google.javascript.rhino.jstype.JSType$1",
119:       "com.google.common.collect.EmptyImmutableBiMap",
120:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
121:       "com.google.common.base.Predicate",
122:       "com.google.javascript.rhino.jstype.JSType$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.common.collect.SingletonImmutableSet",
135:       "com.google.javascript.rhino.jstype.NamedType",
136:       "com.google.common.collect.Iterators$13",
137:       "com.google.javascript.rhino.InputId",
138:       "com.google.common.collect.ImmutableList$SerializedForm",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
163:       "com.google.common.base.Joiner$MapJoiner",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.javascript.rhino.Node$AncestorIterable",
185:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
186:       "com.google.common.collect.Lists$RandomAccessListWrapper",
187:       "com.google.common.collect.ImmutableEnumSet",
188:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
189:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
190:       "com.google.javascript.rhino.jstype.EnumElementType",
191:       "com.google.javascript.rhino.jstype.UnionType",
192:       "com.google.common.base.Objects",
193:       "com.google.javascript.rhino.Node$NumberNode",
194:       "com.google.common.collect.SingletonImmutableList",
195:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
196:       "com.google.common.collect.ImmutableCollection$Builder",
197:       "com.google.javascript.rhino.jstype.StaticSlot",
198:       "com.google.common.collect.Iterators$6",
199:       "com.google.common.collect.BiMap",
200:       "com.google.common.collect.Iterators$7",
201:       "com.google.common.collect.AbstractSetMultimap",
202:       "com.google.common.base.Function",
203:       "com.google.common.collect.ImmutableSet",
204:       "com.google.common.collect.Lists$AbstractListWrapper",
205:       "com.google.common.collect.ImmutableMap",
206:       "com.google.common.collect.AbstractIndexedListIterator",
207:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
208:       "com.google.common.collect.Maps$1",
209:       "com.google.javascript.rhino.jstype.EnumType",
210:       "com.google.common.collect.Iterators$1",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$2",
213:       "com.google.javascript.rhino.jstype.NamespaceType",
214:       "com.google.common.collect.Iterators$3",
215:       "com.google.common.collect.Sets",
216:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
217:       "com.google.javascript.rhino.Node$ObjectPropListItem",
218:       "com.google.common.collect.Lists$StringAsImmutableList",
219:       "com.google.common.collect.Lists$2",
220:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
221:       "com.google.common.collect.ImmutableList$Builder",
222:       "com.google.common.collect.Lists$1",
223:       "com.google.javascript.rhino.jstype.StaticReference",
224:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
225:       "com.google.common.collect.Multiset",
226:       "com.google.common.collect.AbstractMultimap",
227:       "com.google.common.collect.Multimap",
228:       "com.google.common.collect.Iterators",
229:       "com.google.common.collect.EmptyImmutableSet",
230:       "com.google.common.collect.Maps$ImprovedAbstractMap",
231:       "com.google.common.collect.ImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
233:       "com.google.common.collect.ImmutableList",
234:       "com.google.common.collect.SingletonImmutableBiMap",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
236:       "com.google.javascript.rhino.jstype.StringType",
237:       "com.google.javascript.rhino.Node$AbstractPropListItem",
238:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
239:       "com.google.javascript.rhino.jstype.TemplatizedType",
240:       "com.google.javascript.rhino.jstype.Visitor",
241:       "com.google.javascript.rhino.jstype.NoResolvedType",
242:       "com.google.javascript.rhino.jstype.JSTypeNative",
243:       "com.google.javascript.rhino.jstype.AllType",
244:       "com.google.common.collect.Maps",
245:       "com.google.common.collect.SetMultimap",
246:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
247:       "com.google.common.collect.Maps$EntryTransformer",
248:       "com.google.javascript.rhino.JSTypeExpression",
249:       "com.google.common.collect.Iterators$MergingIterator"
250:     );
251:   } 
252: 
253:   private static void resetClasses() {
254:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_303_tmp__ESTest_scaffolding.class.getClassLoader()); 
255: 
256:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
257:       "com.google.javascript.rhino.Node",
258:       "com.google.javascript.rhino.Node$NumberNode",
259:       "com.google.javascript.rhino.Node$StringNode",
260:       "com.google.javascript.rhino.Node$AbstractPropListItem",
261:       "com.google.javascript.rhino.Node$ObjectPropListItem",
262:       "com.google.javascript.rhino.Node$IntPropListItem",
263:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
264:       "com.google.javascript.rhino.Node$AncestorIterable",
265:       "com.google.javascript.rhino.Node$NodeMismatch",
266:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
267:       "com.google.javascript.rhino.Node$SideEffectFlags",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Preconditions",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
301:       "com.google.javascript.rhino.jstype.JSType$1",
302:       "com.google.javascript.rhino.jstype.JSType",
303:       "com.google.javascript.rhino.jstype.ObjectType",
304:       "com.google.javascript.rhino.jstype.ProxyObjectType",
305:       "com.google.javascript.rhino.jstype.TemplateType",
306:       "com.google.javascript.rhino.jstype.ValueType",
307:       "com.google.javascript.rhino.jstype.BooleanType",
308:       "com.google.javascript.rhino.jstype.NullType",
309:       "com.google.javascript.rhino.jstype.NumberType",
310:       "com.google.javascript.rhino.jstype.StringType",
311:       "com.google.javascript.rhino.jstype.UnknownType",
312:       "com.google.javascript.rhino.jstype.VoidType",
313:       "com.google.javascript.rhino.jstype.AllType",
314:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
315:       "com.google.common.collect.ImmutableMap",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.collect.EmptyImmutableBiMap",
318:       "com.google.javascript.rhino.jstype.PropertyMap$1",
319:       "com.google.javascript.rhino.jstype.PropertyMap",
320:       "com.google.javascript.rhino.jstype.FunctionType",
321:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
322:       "com.google.javascript.rhino.Token",
323:       "com.google.javascript.rhino.jstype.ArrowType",
324:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
325:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
326:       "com.google.javascript.rhino.jstype.InstanceObjectType",
327:       "com.google.javascript.rhino.jstype.Property",
328:       "com.google.common.collect.Lists",
329:       "com.google.javascript.rhino.jstype.NoObjectType",
330:       "com.google.javascript.rhino.jstype.NoType",
331:       "com.google.javascript.rhino.jstype.NoResolvedType",
332:       "com.google.common.collect.SingletonImmutableList",
333:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
334:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
335:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
336:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
337:       "com.google.javascript.rhino.jstype.UnionType",
338:       "com.google.javascript.rhino.jstype.FunctionBuilder",
339:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.javascript.rhino.jstype.TernaryValue",
348:       "com.google.common.collect.Iterables",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
353:       "com.google.common.collect.Sets",
354:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
355:       "com.google.javascript.rhino.InputId",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
364:       "com.google.javascript.rhino.JSTypeExpression",
365:       "com.google.common.collect.Platform",
366:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
371:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.JSDocInfo$Marker",
374:       "com.google.common.collect.Iterators$12",
375:       "com.google.javascript.rhino.jstype.JSType$2",
376:       "com.google.common.collect.ImmutableList$1"
377:     );
378:   }
379: }

[MASTER] 10:37:14.125 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(951.13);
assertNotNull(node0);
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isDebugger());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertTrue(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isDebugger());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertTrue(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

boolean boolean0 = node0.isOr();
assertFalse(boolean0);
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isDebugger());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertTrue(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Node node1 = Node.newString("", 429, 40);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getType());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(429, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isString());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.isArrayLit());
assertEquals(40, node1.getCharno());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean1 = node1.isUnscopedQualifiedName();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getType());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(429, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isString());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.isArrayLit());
assertEquals(40, node1.getCharno());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

Node node2 = Node.newString("", 56, 42);
assertNotSame(node2, node1);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals(56, node2.getLineno());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isNumber());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isLabel());
assertEquals(42, node2.getCharno());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isIn());
assertFalse(node2.isHook());
assertTrue(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isRegExp());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertFalse(node2.isWhile());
assertEquals(229418, node2.getSourcePosition());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isDelProp());
assertFalse(node2.isNull());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);

node0.putProp(1528, node1);
assertNotSame(node1, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isDebugger());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertTrue(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getType());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(429, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isString());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.isArrayLit());
assertEquals(40, node1.getCharno());
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

node1.setWasEmptyNode(false);
assertNotSame(node1, node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getType());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(429, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isString());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.isArrayLit());
assertEquals(40, node1.getCharno());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

String string0 = node1.getSourceFileName();
assertNotSame(node1, node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertNull(string0);
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getType());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(429, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isString());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.isArrayLit());
assertEquals(40, node1.getCharno());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

node1.addChildrenToBack(node2);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node1.isDefaultCase());
assertEquals(40, node1.getType());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(429, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isString());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.isArrayLit());
assertEquals(40, node1.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals(56, node2.getLineno());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isNumber());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isLabel());
assertEquals(42, node2.getCharno());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isIn());
assertFalse(node2.isHook());
assertTrue(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isRegExp());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertFalse(node2.isWhile());
assertEquals(229418, node2.getSourcePosition());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isDelProp());
assertFalse(node2.isNull());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);

node1.setQuotedString();
assertNotSame(node1, node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.isDefaultCase());
assertEquals(40, node1.getType());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(429, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isString());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.isArrayLit());
assertEquals(40, node1.getCharno());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

int int0 = Node.mergeLineCharNo(42, 36);
assertEquals(172068, int0);

boolean boolean2 = node2.isFalse();
assertNotSame(node2, node1);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals(56, node2.getLineno());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isNumber());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isLabel());
assertEquals(42, node2.getCharno());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isIn());
assertFalse(node2.isHook());
assertTrue(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isRegExp());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertFalse(node2.isWhile());
assertEquals(229418, node2.getSourcePosition());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isDelProp());
assertFalse(node2.isNull());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);

node1.setVarArgs(false);
assertNotSame(node1, node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.isDefaultCase());
assertEquals(40, node1.getType());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(429, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isString());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.isArrayLit());
assertEquals(40, node1.getCharno());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean3 = node1.isGetElem();
assertNotSame(node1, node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(boolean3);
assertFalse(node1.isDefaultCase());
assertEquals(40, node1.getType());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(429, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isString());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertEquals(1757224, node1.getSourcePosition());
assertFalse(node1.isArrayLit());
assertEquals(40, node1.getCharno());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean4 = node2.isFromExterns();
assertNotSame(node2, node1);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertFalse(boolean4);
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals(56, node2.getLineno());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isNumber());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isLabel());
assertEquals(42, node2.getCharno());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isIn());
assertFalse(node2.isHook());
assertTrue(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isRegExp());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertFalse(node2.isWhile());
assertEquals(229418, node2.getSourcePosition());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isDelProp());
assertFalse(node2.isNull());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags2);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());

int int1 = node_SideEffectFlags2.valueOf();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertFalse(int1 == int0);
assertEquals(0, int1);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());


[MASTER] 10:37:26.305 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_424_1628159846192/com/google/javascript/rhino/Node_424_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_424_1628159846192/com/google/javascript/rhino/Node_424_tmp__ESTest_scaffolding.java]]
[MASTER] 10:37:26.305 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:37:26.305 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:37:26.305 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 126
[MASTER] 10:37:26.306 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_424_1628159846192/com/google/javascript/rhino/Node_424_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:37:26 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_424_tmp__ESTest extends Node_424_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(951.13);
21:       assertNotNull(node0);
22:       assertFalse(node0.isCall());
23:       assertFalse(node0.isVar());
24:       assertFalse(node0.isStringKey());
25:       assertFalse(node0.isName());
26:       assertFalse(node0.isBlock());
27:       assertFalse(node0.isNull());
28:       assertFalse(node0.isSetterDef());
29:       assertFalse(node0.isAdd());
30:       assertFalse(node0.isDo());
31:       assertFalse(node0.isNew());
32:       assertFalse(node0.isCatch());
33:       assertFalse(node0.hasMoreThanOneChild());
34:       assertFalse(node0.isWhile());
35:       assertFalse(node0.isReturn());
36:       assertFalse(node0.isOr());
37:       assertEquals(39, node0.getType());
38:       assertFalse(node0.isTrue());
39:       assertFalse(node0.isRegExp());
40:       assertFalse(node0.isVoid());
41:       assertFalse(node0.isTypeOf());
42:       assertEquals((-1), node0.getLineno());
43:       assertFalse(node0.isGetElem());
44:       assertFalse(node0.isFor());
45:       assertFalse(node0.isGetterDef());
46:       assertFalse(node0.isScript());
47:       assertFalse(node0.isDefaultCase());
48:       assertFalse(node0.isAssignAdd());
49:       assertFalse(node0.isEmpty());
50:       assertFalse(node0.isTry());
51:       assertFalse(node0.hasOneChild());
52:       assertEquals(0, node0.getChildCount());
53:       assertFalse(node0.isLabel());
54:       assertFalse(node0.isSwitch());
55:       assertFalse(node0.isParamList());
56:       assertFalse(node0.isLabelName());
57:       assertFalse(node0.isArrayLit());
58:       assertFalse(node0.isThrow());
59:       assertFalse(node0.isFalse());
60:       assertFalse(node0.isHook());
61:       assertEquals((-1), node0.getCharno());
62:       assertFalse(node0.isInc());
63:       assertFalse(node0.isThis());
64:       assertFalse(node0.isString());
65:       assertFalse(node0.isCase());
66:       assertFalse(node0.isGetProp());
67:       assertFalse(node0.isInstanceOf());
68:       assertFalse(node0.isIn());
69:       assertFalse(node0.isWith());
70:       assertFalse(node0.isExprResult());
71:       assertFalse(node0.isComma());
72:       assertFalse(node0.isNE());
73:       assertFalse(node0.isIf());
74:       assertFalse(node0.isDelProp());
75:       assertFalse(node0.isBreak());
76:       assertFalse(node0.isCast());
77:       assertFalse(node0.isAssign());
78:       assertEquals((-1), node0.getSourcePosition());
79:       assertFalse(node0.isDec());
80:       assertFalse(node0.isDebugger());
81:       assertFalse(node0.hasChildren());
82:       assertTrue(node0.isNumber());
83:       assertFalse(node0.isObjectLit());
84:       assertFalse(node0.isContinue());
85:       assertFalse(node0.isAnd());
86:       assertFalse(node0.isNot());
87:       assertFalse(node0.isFunction());
88:       assertEquals(57, Node.REFLECTED_OBJECT);
89:       assertEquals(40, Node.ORIGINALNAME_PROP);
90:       assertEquals(15, Node.NO_SIDE_EFFECTS);
91:       assertEquals(8, Node.FLAG_NO_THROWS);
92:       assertEquals(39, Node.EMPTY_BLOCK);
93:       assertEquals(54, Node.SLASH_V);
94:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
95:       assertEquals(50, Node.FREE_CALL);
96:       assertEquals(52, Node.LENGTH);
97:       assertEquals(12, Node.COLUMN_BITS);
98:       assertEquals(4095, Node.COLUMN_MASK);
99:       assertEquals(49, Node.DIRECT_EVAL);
100:       assertEquals(37, Node.OPT_ARG_NAME);
101:       assertEquals(32, Node.INCRDECR_PROP);
102:       assertEquals(48, Node.DIRECTIVES);
103:       assertEquals(1, Node.DECR_FLAG);
104:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
105:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
106:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
107:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
108:       assertEquals(29, Node.JSDOC_INFO_PROP);
109:       assertEquals(53, Node.INPUT_ID);
110:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
111:       assertEquals(36, Node.QUOTED_PROP);
112:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
113:       assertEquals(43, Node.IS_CONSTANT_NAME);
114:       assertEquals(56, Node.CHANGE_TIME);
115:       assertEquals(51, Node.STATIC_SOURCE_FILE);
116:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
117:       assertEquals(46, Node.IS_NAMESPACE);
118:       assertEquals(55, Node.INFERRED_FUNCTION);
119:       assertEquals(2, Node.POST_FLAG);
120:       assertEquals(57, Node.LAST_PROP);
121:       assertEquals(47, Node.IS_DISPATCHER);
122:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
123:       assertEquals(30, Node.VAR_ARGS_NAME);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(iterable0.contains(node0));
127:       assertNotNull(iterable0);
128:       assertFalse(node0.isCall());
129:       assertFalse(node0.isVar());
130:       assertFalse(node0.isStringKey());
131:       assertFalse(node0.isName());
132:       assertFalse(node0.isBlock());
133:       assertFalse(node0.isNull());
134:       assertFalse(node0.isSetterDef());
135:       assertFalse(node0.isAdd());
136:       assertFalse(node0.isDo());
137:       assertFalse(node0.isNew());
138:       assertFalse(node0.isCatch());
139:       assertFalse(node0.hasMoreThanOneChild());
140:       assertFalse(node0.isWhile());
141:       assertFalse(node0.isReturn());
142:       assertFalse(node0.isOr());
143:       assertEquals(39, node0.getType());
144:       assertFalse(node0.isTrue());
145:       assertFalse(node0.isRegExp());
146:       assertFalse(node0.isVoid());
147:       assertFalse(node0.isTypeOf());
148:       assertEquals((-1), node0.getLineno());
149:       assertFalse(node0.isGetElem());
150:       assertFalse(node0.isFor());
151:       assertFalse(node0.isGetterDef());
152:       assertFalse(node0.isScript());
153:       assertFalse(node0.isDefaultCase());
154:       assertFalse(node0.isAssignAdd());
155:       assertFalse(node0.isEmpty());
156:       assertFalse(node0.isTry());
157:       assertFalse(node0.hasOneChild());
158:       assertEquals(0, node0.getChildCount());
159:       assertFalse(node0.isLabel());
160:       assertFalse(node0.isSwitch());
161:       assertFalse(node0.isParamList());
162:       assertFalse(node0.isLabelName());
163:       assertFalse(node0.isArrayLit());
164:       assertFalse(node0.isThrow());
165:       assertFalse(node0.isFalse());
166:       assertFalse(node0.isHook());
167:       assertEquals((-1), node0.getCharno());
168:       assertFalse(node0.isInc());
169:       assertFalse(node0.isThis());
170:       assertFalse(node0.isString());
171:       assertFalse(node0.isCase());
172:       assertFalse(node0.isGetProp());
173:       assertFalse(node0.isInstanceOf());
174:       assertFalse(node0.isIn());
175:       assertFalse(node0.isWith());
176:       assertFalse(node0.isExprResult());
177:       assertFalse(node0.isComma());
178:       assertFalse(node0.isNE());
179:       assertFalse(node0.isIf());
180:       assertFalse(node0.isDelProp());
181:       assertFalse(node0.isBreak());
182:       assertFalse(node0.isCast());
183:       assertFalse(node0.isAssign());
184:       assertEquals((-1), node0.getSourcePosition());
185:       assertFalse(node0.isDec());
186:       assertFalse(node0.isDebugger());
187:       assertFalse(node0.hasChildren());
188:       assertTrue(node0.isNumber());
189:       assertFalse(node0.isObjectLit());
190:       assertFalse(node0.isContinue());
191:       assertFalse(node0.isAnd());
192:       assertFalse(node0.isNot());
193:       assertFalse(node0.isFunction());
194:       assertEquals(57, Node.REFLECTED_OBJECT);
195:       assertEquals(40, Node.ORIGINALNAME_PROP);
196:       assertEquals(15, Node.NO_SIDE_EFFECTS);
197:       assertEquals(8, Node.FLAG_NO_THROWS);
198:       assertEquals(39, Node.EMPTY_BLOCK);
199:       assertEquals(54, Node.SLASH_V);
200:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
201:       assertEquals(50, Node.FREE_CALL);
202:       assertEquals(52, Node.LENGTH);
203:       assertEquals(12, Node.COLUMN_BITS);
204:       assertEquals(4095, Node.COLUMN_MASK);
205:       assertEquals(49, Node.DIRECT_EVAL);
206:       assertEquals(37, Node.OPT_ARG_NAME);
207:       assertEquals(32, Node.INCRDECR_PROP);
208:       assertEquals(48, Node.DIRECTIVES);
209:       assertEquals(1, Node.DECR_FLAG);
210:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
211:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
212:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
213:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
214:       assertEquals(29, Node.JSDOC_INFO_PROP);
215:       assertEquals(53, Node.INPUT_ID);
216:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
217:       assertEquals(36, Node.QUOTED_PROP);
218:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
219:       assertEquals(43, Node.IS_CONSTANT_NAME);
220:       assertEquals(56, Node.CHANGE_TIME);
221:       assertEquals(51, Node.STATIC_SOURCE_FILE);
222:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
223:       assertEquals(46, Node.IS_NAMESPACE);
224:       assertEquals(55, Node.INFERRED_FUNCTION);
225:       assertEquals(2, Node.POST_FLAG);
226:       assertEquals(57, Node.LAST_PROP);
227:       assertEquals(47, Node.IS_DISPATCHER);
228:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
229:       assertEquals(30, Node.VAR_ARGS_NAME);
230:       
231:       boolean boolean0 = node0.isOr();
232:       assertFalse(boolean0);
233:       assertFalse(node0.isCall());
234:       assertFalse(node0.isVar());
235:       assertFalse(node0.isStringKey());
236:       assertFalse(node0.isName());
237:       assertFalse(node0.isBlock());
238:       assertFalse(node0.isNull());
239:       assertFalse(node0.isSetterDef());
240:       assertFalse(node0.isAdd());
241:       assertFalse(node0.isDo());
242:       assertFalse(node0.isNew());
243:       assertFalse(node0.isCatch());
244:       assertFalse(node0.hasMoreThanOneChild());
245:       assertFalse(node0.isWhile());
246:       assertFalse(node0.isReturn());
247:       assertFalse(node0.isOr());
248:       assertEquals(39, node0.getType());
249:       assertFalse(node0.isTrue());
250:       assertFalse(node0.isRegExp());
251:       assertFalse(node0.isVoid());
252:       assertFalse(node0.isTypeOf());
253:       assertEquals((-1), node0.getLineno());
254:       assertFalse(node0.isGetElem());
255:       assertFalse(node0.isFor());
256:       assertFalse(node0.isGetterDef());
257:       assertFalse(node0.isScript());
258:       assertFalse(node0.isDefaultCase());
259:       assertFalse(node0.isAssignAdd());
260:       assertFalse(node0.isEmpty());
261:       assertFalse(node0.isTry());
262:       assertFalse(node0.hasOneChild());
263:       assertEquals(0, node0.getChildCount());
264:       assertFalse(node0.isLabel());
265:       assertFalse(node0.isSwitch());
266:       assertFalse(node0.isParamList());
267:       assertFalse(node0.isLabelName());
268:       assertFalse(node0.isArrayLit());
269:       assertFalse(node0.isThrow());
270:       assertFalse(node0.isFalse());
271:       assertFalse(node0.isHook());
272:       assertEquals((-1), node0.getCharno());
273:       assertFalse(node0.isInc());
274:       assertFalse(node0.isThis());
275:       assertFalse(node0.isString());
276:       assertFalse(node0.isCase());
277:       assertFalse(node0.isGetProp());
278:       assertFalse(node0.isInstanceOf());
279:       assertFalse(node0.isIn());
280:       assertFalse(node0.isWith());
281:       assertFalse(node0.isExprResult());
282:       assertFalse(node0.isComma());
283:       assertFalse(node0.isNE());
284:       assertFalse(node0.isIf());
285:       assertFalse(node0.isDelProp());
286:       assertFalse(node0.isBreak());
287:       assertFalse(node0.isCast());
288:       assertFalse(node0.isAssign());
289:       assertEquals((-1), node0.getSourcePosition());
290:       assertFalse(node0.isDec());
291:       assertFalse(node0.isDebugger());
292:       assertFalse(node0.hasChildren());
293:       assertTrue(node0.isNumber());
294:       assertFalse(node0.isObjectLit());
295:       assertFalse(node0.isContinue());
296:       assertFalse(node0.isAnd());
297:       assertFalse(node0.isNot());
298:       assertFalse(node0.isFunction());
299:       assertEquals(57, Node.REFLECTED_OBJECT);
300:       assertEquals(40, Node.ORIGINALNAME_PROP);
301:       assertEquals(15, Node.NO_SIDE_EFFECTS);
302:       assertEquals(8, Node.FLAG_NO_THROWS);
303:       assertEquals(39, Node.EMPTY_BLOCK);
304:       assertEquals(54, Node.SLASH_V);
305:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
306:       assertEquals(50, Node.FREE_CALL);
307:       assertEquals(52, Node.LENGTH);
308:       assertEquals(12, Node.COLUMN_BITS);
309:       assertEquals(4095, Node.COLUMN_MASK);
310:       assertEquals(49, Node.DIRECT_EVAL);
311:       assertEquals(37, Node.OPT_ARG_NAME);
312:       assertEquals(32, Node.INCRDECR_PROP);
313:       assertEquals(48, Node.DIRECTIVES);
314:       assertEquals(1, Node.DECR_FLAG);
315:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
316:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
317:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
318:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
319:       assertEquals(29, Node.JSDOC_INFO_PROP);
320:       assertEquals(53, Node.INPUT_ID);
321:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
322:       assertEquals(36, Node.QUOTED_PROP);
323:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
324:       assertEquals(43, Node.IS_CONSTANT_NAME);
325:       assertEquals(56, Node.CHANGE_TIME);
326:       assertEquals(51, Node.STATIC_SOURCE_FILE);
327:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
328:       assertEquals(46, Node.IS_NAMESPACE);
329:       assertEquals(55, Node.INFERRED_FUNCTION);
330:       assertEquals(2, Node.POST_FLAG);
331:       assertEquals(57, Node.LAST_PROP);
332:       assertEquals(47, Node.IS_DISPATCHER);
333:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
334:       assertEquals(30, Node.VAR_ARGS_NAME);
335:       
336:       Node node1 = new Node((-840), node0, node0, 37, 1326);
337:       assertFalse(node1.equals((Object)node0));
338:       assertNotNull(node1);
339:       assertFalse(node0.isCall());
340:       assertFalse(node0.isVar());
341:       assertFalse(node0.isStringKey());
342:       assertFalse(node0.isName());
343:       assertFalse(node0.isBlock());
344:       assertFalse(node0.isNull());
345:       assertFalse(node0.isSetterDef());
346:       assertFalse(node0.isAdd());
347:       assertFalse(node0.isDo());
348:       assertFalse(node0.isNew());
349:       assertFalse(node0.isCatch());
350:       assertFalse(node0.hasMoreThanOneChild());
351:       assertFalse(node0.isWhile());
352:       assertFalse(node0.isReturn());
353:       assertFalse(node0.isOr());
354:       assertEquals(39, node0.getType());
355:       assertFalse(node0.isTrue());
356:       assertFalse(node0.isRegExp());
357:       assertFalse(node0.isVoid());
358:       assertFalse(node0.isTypeOf());
359:       assertEquals((-1), node0.getLineno());
360:       assertFalse(node0.isGetElem());
361:       assertFalse(node0.isFor());
362:       assertFalse(node0.isGetterDef());
363:       assertFalse(node0.isScript());
364:       assertFalse(node0.isDefaultCase());
365:       assertFalse(node0.isAssignAdd());
366:       assertFalse(node0.isEmpty());
367:       assertFalse(node0.isTry());
368:       assertFalse(node0.hasOneChild());
369:       assertEquals(0, node0.getChildCount());
370:       assertFalse(node0.isLabel());
371:       assertFalse(node0.isSwitch());
372:       assertFalse(node0.isParamList());
373:       assertFalse(node0.isLabelName());
374:       assertFalse(node0.isArrayLit());
375:       assertFalse(node0.isThrow());
376:       assertFalse(node0.isFalse());
377:       assertFalse(node0.isHook());
378:       assertEquals((-1), node0.getCharno());
379:       assertFalse(node0.isInc());
380:       assertFalse(node0.isThis());
381:       assertFalse(node0.isString());
382:       assertFalse(node0.isCase());
383:       assertFalse(node0.isGetProp());
384:       assertFalse(node0.isInstanceOf());
385:       assertFalse(node0.isIn());
386:       assertFalse(node0.isWith());
387:       assertFalse(node0.isExprResult());
388:       assertFalse(node0.isComma());
389:       assertFalse(node0.isNE());
390:       assertFalse(node0.isIf());
391:       assertFalse(node0.isDelProp());
392:       assertFalse(node0.isBreak());
393:       assertFalse(node0.isCast());
394:       assertFalse(node0.isAssign());
395:       assertEquals((-1), node0.getSourcePosition());
396:       assertFalse(node0.isDec());
397:       assertFalse(node0.isDebugger());
398:       assertFalse(node0.hasChildren());
399:       assertTrue(node0.isNumber());
400:       assertFalse(node0.isObjectLit());
401:       assertFalse(node0.isContinue());
402:       assertFalse(node0.isAnd());
403:       assertFalse(node0.isNot());
404:       assertFalse(node0.isFunction());
405:       assertFalse(node1.isBlock());
406:       assertFalse(node1.isNew());
407:       assertFalse(node1.isCall());
408:       assertFalse(node1.isAdd());
409:       assertFalse(node1.isStringKey());
410:       assertFalse(node1.isName());
411:       assertFalse(node1.isParamList());
412:       assertFalse(node1.isNull());
413:       assertEquals((-840), node1.getType());
414:       assertFalse(node1.isTypeOf());
415:       assertFalse(node1.isNumber());
416:       assertFalse(node1.isCatch());
417:       assertFalse(node1.hasMoreThanOneChild());
418:       assertFalse(node1.isAssign());
419:       assertFalse(node1.isDec());
420:       assertFalse(node1.isWhile());
421:       assertFalse(node1.isReturn());
422:       assertFalse(node1.isTry());
423:       assertFalse(node1.isVoid());
424:       assertFalse(node1.isArrayLit());
425:       assertFalse(node1.isExprResult());
426:       assertFalse(node1.isScript());
427:       assertFalse(node1.isGetElem());
428:       assertFalse(node1.isDelProp());
429:       assertFalse(node1.isLabelName());
430:       assertFalse(node1.isGetterDef());
431:       assertFalse(node1.isTrue());
432:       assertFalse(node1.isLabel());
433:       assertFalse(node1.isAssignAdd());
434:       assertFalse(node1.isOr());
435:       assertFalse(node1.isEmpty());
436:       assertFalse(node1.isDo());
437:       assertFalse(node1.isDefaultCase());
438:       assertFalse(node1.isVar());
439:       assertFalse(node1.isSwitch());
440:       assertFalse(node1.isString());
441:       assertFalse(node1.isInc());
442:       assertFalse(node1.isGetProp());
443:       assertEquals(1, node1.getChildCount());
444:       assertFalse(node1.isComma());
445:       assertFalse(node1.isInstanceOf());
446:       assertFalse(node1.isBreak());
447:       assertTrue(node1.hasChildren());
448:       assertFalse(node1.isCase());
449:       assertFalse(node1.isWith());
450:       assertFalse(node1.isHook());
451:       assertFalse(node1.isThis());
452:       assertTrue(node1.hasOneChild());
453:       assertFalse(node1.isFor());
454:       assertFalse(node1.isDebugger());
455:       assertFalse(node1.isFunction());
456:       assertFalse(node1.isRegExp());
457:       assertFalse(node1.isCast());
458:       assertFalse(node1.isAnd());
459:       assertEquals(152878, node1.getSourcePosition());
460:       assertFalse(node1.isNot());
461:       assertFalse(node1.isObjectLit());
462:       assertFalse(node1.isIf());
463:       assertFalse(node1.isNE());
464:       assertEquals(1326, node1.getCharno());
465:       assertEquals(37, node1.getLineno());
466:       assertFalse(node1.isIn());
467:       assertFalse(node1.isSetterDef());
468:       assertFalse(node1.isFalse());
469:       assertFalse(node1.isContinue());
470:       assertFalse(node1.isThrow());
471:       assertEquals(57, Node.REFLECTED_OBJECT);
472:       assertEquals(40, Node.ORIGINALNAME_PROP);
473:       assertEquals(15, Node.NO_SIDE_EFFECTS);
474:       assertEquals(8, Node.FLAG_NO_THROWS);
475:       assertEquals(39, Node.EMPTY_BLOCK);
476:       assertEquals(54, Node.SLASH_V);
477:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
478:       assertEquals(50, Node.FREE_CALL);
479:       assertEquals(52, Node.LENGTH);
480:       assertEquals(12, Node.COLUMN_BITS);
481:       assertEquals(4095, Node.COLUMN_MASK);
482:       assertEquals(49, Node.DIRECT_EVAL);
483:       assertEquals(37, Node.OPT_ARG_NAME);
484:       assertEquals(32, Node.INCRDECR_PROP);
485:       assertEquals(48, Node.DIRECTIVES);
486:       assertEquals(1, Node.DECR_FLAG);
487:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
488:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
489:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
490:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
491:       assertEquals(29, Node.JSDOC_INFO_PROP);
492:       assertEquals(53, Node.INPUT_ID);
493:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
494:       assertEquals(36, Node.QUOTED_PROP);
495:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
496:       assertEquals(43, Node.IS_CONSTANT_NAME);
497:       assertEquals(56, Node.CHANGE_TIME);
498:       assertEquals(51, Node.STATIC_SOURCE_FILE);
499:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
500:       assertEquals(46, Node.IS_NAMESPACE);
501:       assertEquals(55, Node.INFERRED_FUNCTION);
502:       assertEquals(2, Node.POST_FLAG);
503:       assertEquals(57, Node.LAST_PROP);
504:       assertEquals(47, Node.IS_DISPATCHER);
505:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
506:       assertEquals(30, Node.VAR_ARGS_NAME);
507:       assertEquals(54, Node.SLASH_V);
508:       assertEquals(52, Node.LENGTH);
509:       assertEquals(57, Node.LAST_PROP);
510:       assertEquals(30, Node.VAR_ARGS_NAME);
511:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
512:       assertEquals(57, Node.REFLECTED_OBJECT);
513:       assertEquals(40, Node.ORIGINALNAME_PROP);
514:       assertEquals(49, Node.DIRECT_EVAL);
515:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
516:       assertEquals(46, Node.IS_NAMESPACE);
517:       assertEquals(51, Node.STATIC_SOURCE_FILE);
518:       assertEquals(12, Node.COLUMN_BITS);
519:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
520:       assertEquals(1, Node.DECR_FLAG);
521:       assertEquals(50, Node.FREE_CALL);
522:       assertEquals(32, Node.INCRDECR_PROP);
523:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
524:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
525:       assertEquals(43, Node.IS_CONSTANT_NAME);
526:       assertEquals(36, Node.QUOTED_PROP);
527:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
528:       assertEquals(4095, Node.COLUMN_MASK);
529:       assertEquals(37, Node.OPT_ARG_NAME);
530:       assertEquals(2, Node.POST_FLAG);
531:       assertEquals(48, Node.DIRECTIVES);
532:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
533:       assertEquals(8, Node.FLAG_NO_THROWS);
534:       assertEquals(56, Node.CHANGE_TIME);
535:       assertEquals(47, Node.IS_DISPATCHER);
536:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
537:       assertEquals(55, Node.INFERRED_FUNCTION);
538:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
539:       assertEquals(29, Node.JSDOC_INFO_PROP);
540:       assertEquals(53, Node.INPUT_ID);
541:       assertEquals(15, Node.NO_SIDE_EFFECTS);
542:       assertEquals(39, Node.EMPTY_BLOCK);
543:       
544:       boolean boolean1 = node0.isEquivalentToShallow(node1);
545:       assertFalse(node0.equals((Object)node1));
546:       assertFalse(node1.equals((Object)node0));
547:       assertTrue(boolean1 == boolean0);
548:       assertFalse(boolean1);
549:       assertFalse(node0.isCall());
550:       assertFalse(node0.isVar());
551:       assertFalse(node0.isStringKey());
552:       assertFalse(node0.isName());
553:       assertFalse(node0.isBlock());
554:       assertFalse(node0.isNull());
555:       assertFalse(node0.isSetterDef());
556:       assertFalse(node0.isAdd());
557:       assertFalse(node0.isDo());
558:       assertFalse(node0.isNew());
559:       assertFalse(node0.isCatch());
560:       assertFalse(node0.hasMoreThanOneChild());
561:       assertFalse(node0.isWhile());
562:       assertFalse(node0.isReturn());
563:       assertFalse(node0.isOr());
564:       assertEquals(39, node0.getType());
565:       assertFalse(node0.isTrue());
566:       assertFalse(node0.isRegExp());
567:       assertFalse(node0.isVoid());
568:       assertFalse(node0.isTypeOf());
569:       assertEquals((-1), node0.getLineno());
570:       assertFalse(node0.isGetElem());
571:       assertFalse(node0.isFor());
572:       assertFalse(node0.isGetterDef());
573:       assertFalse(node0.isScript());
574:       assertFalse(node0.isDefaultCase());
575:       assertFalse(node0.isAssignAdd());
576:       assertFalse(node0.isEmpty());
577:       assertFalse(node0.isTry());
578:       assertFalse(node0.hasOneChild());
579:       assertEquals(0, node0.getChildCount());
580:       assertFalse(node0.isLabel());
581:       assertFalse(node0.isSwitch());
582:       assertFalse(node0.isParamList());
583:       assertFalse(node0.isLabelName());
584:       assertFalse(node0.isArrayLit());
585:       assertFalse(node0.isThrow());
586:       assertFalse(node0.isFalse());
587:       assertFalse(node0.isHook());
588:       assertEquals((-1), node0.getCharno());
589:       assertFalse(node0.isInc());
590:       assertFalse(node0.isThis());
591:       assertFalse(node0.isString());
592:       assertFalse(node0.isCase());
593:       assertFalse(node0.isGetProp());
594:       assertFalse(node0.isInstanceOf());
595:       assertFalse(node0.isIn());
596:       assertFalse(node0.isWith());
597:       assertFalse(node0.isExprResult());
598:       assertFalse(node0.isComma());
599:       assertFalse(node0.isNE());
600:       assertFalse(node0.isIf());
601:       assertFalse(node0.isDelProp());
602:       assertFalse(node0.isBreak());
603:       assertFalse(node0.isCast());
604:       assertFalse(node0.isAssign());
605:       assertEquals((-1), node0.getSourcePosition());
606:       assertFalse(node0.isDec());
607:       assertFalse(node0.isDebugger());
608:       assertFalse(node0.hasChildren());
609:       assertTrue(node0.isNumber());
610:       assertFalse(node0.isObjectLit());
611:       assertFalse(node0.isContinue());
612:       assertFalse(node0.isAnd());
613:       assertFalse(node0.isNot());
614:       assertFalse(node0.isFunction());
615:       assertFalse(node1.isBlock());
616:       assertFalse(node1.isNew());
617:       assertFalse(node1.isCall());
618:       assertFalse(node1.isAdd());
619:       assertFalse(node1.isStringKey());
620:       assertFalse(node1.isName());
621:       assertFalse(node1.isParamList());
622:       assertFalse(node1.isNull());
623:       assertEquals((-840), node1.getType());
624:       assertFalse(node1.isTypeOf());
625:       assertFalse(node1.isNumber());
626:       assertFalse(node1.isCatch());
627:       assertFalse(node1.hasMoreThanOneChild());
628:       assertFalse(node1.isAssign());
629:       assertFalse(node1.isDec());
630:       assertFalse(node1.isWhile());
631:       assertFalse(node1.isReturn());
632:       assertFalse(node1.isTry());
633:       assertFalse(node1.isVoid());
634:       assertFalse(node1.isArrayLit());
635:       assertFalse(node1.isExprResult());
636:       assertFalse(node1.isScript());
637:       assertFalse(node1.isGetElem());
638:       assertFalse(node1.isDelProp());
639:       assertFalse(node1.isLabelName());
640:       assertFalse(node1.isGetterDef());
641:       assertFalse(node1.isTrue());
642:       assertFalse(node1.isLabel());
643:       assertFalse(node1.isAssignAdd());
644:       assertFalse(node1.isOr());
645:       assertFalse(node1.isEmpty());
646:       assertFalse(node1.isDo());
647:       assertFalse(node1.isDefaultCase());
648:       assertFalse(node1.isVar());
649:       assertFalse(node1.isSwitch());
650:       assertFalse(node1.isString());
651:       assertFalse(node1.isInc());
652:       assertFalse(node1.isGetProp());
653:       assertEquals(1, node1.getChildCount());
654:       assertFalse(node1.isComma());
655:       assertFalse(node1.isInstanceOf());
656:       assertFalse(node1.isBreak());
657:       assertTrue(node1.hasChildren());
658:       assertFalse(node1.isCase());
659:       assertFalse(node1.isWith());
660:       assertFalse(node1.isHook());
661:       assertFalse(node1.isThis());
662:       assertTrue(node1.hasOneChild());
663:       assertFalse(node1.isFor());
664:       assertFalse(node1.isDebugger());
665:       assertFalse(node1.isFunction());
666:       assertFalse(node1.isRegExp());
667:       assertFalse(node1.isCast());
668:       assertFalse(node1.isAnd());
669:       assertEquals(152878, node1.getSourcePosition());
670:       assertFalse(node1.isNot());
671:       assertFalse(node1.isObjectLit());
672:       assertFalse(node1.isIf());
673:       assertFalse(node1.isNE());
674:       assertEquals(1326, node1.getCharno());
675:       assertEquals(37, node1.getLineno());
676:       assertFalse(node1.isIn());
677:       assertFalse(node1.isSetterDef());
678:       assertFalse(node1.isFalse());
679:       assertFalse(node1.isContinue());
680:       assertFalse(node1.isThrow());
681:       assertEquals(57, Node.REFLECTED_OBJECT);
682:       assertEquals(40, Node.ORIGINALNAME_PROP);
683:       assertEquals(15, Node.NO_SIDE_EFFECTS);
684:       assertEquals(8, Node.FLAG_NO_THROWS);
685:       assertEquals(39, Node.EMPTY_BLOCK);
686:       assertEquals(54, Node.SLASH_V);
687:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
688:       assertEquals(50, Node.FREE_CALL);
689:       assertEquals(52, Node.LENGTH);
690:       assertEquals(12, Node.COLUMN_BITS);
691:       assertEquals(4095, Node.COLUMN_MASK);
692:       assertEquals(49, Node.DIRECT_EVAL);
693:       assertEquals(37, Node.OPT_ARG_NAME);
694:       assertEquals(32, Node.INCRDECR_PROP);
695:       assertEquals(48, Node.DIRECTIVES);
696:       assertEquals(1, Node.DECR_FLAG);
697:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
698:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
699:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
700:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
701:       assertEquals(29, Node.JSDOC_INFO_PROP);
702:       assertEquals(53, Node.INPUT_ID);
703:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
704:       assertEquals(36, Node.QUOTED_PROP);
705:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
706:       assertEquals(43, Node.IS_CONSTANT_NAME);
707:       assertEquals(56, Node.CHANGE_TIME);
708:       assertEquals(51, Node.STATIC_SOURCE_FILE);
709:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
710:       assertEquals(46, Node.IS_NAMESPACE);
711:       assertEquals(55, Node.INFERRED_FUNCTION);
712:       assertEquals(2, Node.POST_FLAG);
713:       assertEquals(57, Node.LAST_PROP);
714:       assertEquals(47, Node.IS_DISPATCHER);
715:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
716:       assertEquals(30, Node.VAR_ARGS_NAME);
717:       assertEquals(54, Node.SLASH_V);
718:       assertEquals(52, Node.LENGTH);
719:       assertEquals(57, Node.LAST_PROP);
720:       assertEquals(30, Node.VAR_ARGS_NAME);
721:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
722:       assertEquals(57, Node.REFLECTED_OBJECT);
723:       assertEquals(40, Node.ORIGINALNAME_PROP);
724:       assertEquals(49, Node.DIRECT_EVAL);
725:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
726:       assertEquals(46, Node.IS_NAMESPACE);
727:       assertEquals(51, Node.STATIC_SOURCE_FILE);
728:       assertEquals(12, Node.COLUMN_BITS);
729:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
730:       assertEquals(1, Node.DECR_FLAG);
731:       assertEquals(50, Node.FREE_CALL);
732:       assertEquals(32, Node.INCRDECR_PROP);
733:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
734:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
735:       assertEquals(43, Node.IS_CONSTANT_NAME);
736:       assertEquals(36, Node.QUOTED_PROP);
737:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
738:       assertEquals(4095, Node.COLUMN_MASK);
739:       assertEquals(37, Node.OPT_ARG_NAME);
740:       assertEquals(2, Node.POST_FLAG);
741:       assertEquals(48, Node.DIRECTIVES);
742:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
743:       assertEquals(8, Node.FLAG_NO_THROWS);
744:       assertEquals(56, Node.CHANGE_TIME);
745:       assertEquals(47, Node.IS_DISPATCHER);
746:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
747:       assertEquals(55, Node.INFERRED_FUNCTION);
748:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
749:       assertEquals(29, Node.JSDOC_INFO_PROP);
750:       assertEquals(53, Node.INPUT_ID);
751:       assertEquals(15, Node.NO_SIDE_EFFECTS);
752:       assertEquals(39, Node.EMPTY_BLOCK);
753:       
754:       boolean boolean2 = node0.isNew();
755:       assertFalse(node0.equals((Object)node1));
756:       assertTrue(boolean2 == boolean0);
757:       assertTrue(boolean2 == boolean1);
758:       assertFalse(boolean2);
759:       assertFalse(node0.isCall());
760:       assertFalse(node0.isVar());
761:       assertFalse(node0.isStringKey());
762:       assertFalse(node0.isName());
763:       assertFalse(node0.isBlock());
764:       assertFalse(node0.isNull());
765:       assertFalse(node0.isSetterDef());
766:       assertFalse(node0.isAdd());
767:       assertFalse(node0.isDo());
768:       assertFalse(node0.isNew());
769:       assertFalse(node0.isCatch());
770:       assertFalse(node0.hasMoreThanOneChild());
771:       assertFalse(node0.isWhile());
772:       assertFalse(node0.isReturn());
773:       assertFalse(node0.isOr());
774:       assertEquals(39, node0.getType());
775:       assertFalse(node0.isTrue());
776:       assertFalse(node0.isRegExp());
777:       assertFalse(node0.isVoid());
778:       assertFalse(node0.isTypeOf());
779:       assertEquals((-1), node0.getLineno());
780:       assertFalse(node0.isGetElem());
781:       assertFalse(node0.isFor());
782:       assertFalse(node0.isGetterDef());
783:       assertFalse(node0.isScript());
784:       assertFalse(node0.isDefaultCase());
785:       assertFalse(node0.isAssignAdd());
786:       assertFalse(node0.isEmpty());
787:       assertFalse(node0.isTry());
788:       assertFalse(node0.hasOneChild());
789:       assertEquals(0, node0.getChildCount());
790:       assertFalse(node0.isLabel());
791:       assertFalse(node0.isSwitch());
792:       assertFalse(node0.isParamList());
793:       assertFalse(node0.isLabelName());
794:       assertFalse(node0.isArrayLit());
795:       assertFalse(node0.isThrow());
796:       assertFalse(node0.isFalse());
797:       assertFalse(node0.isHook());
798:       assertEquals((-1), node0.getCharno());
799:       assertFalse(node0.isInc());
800:       assertFalse(node0.isThis());
801:       assertFalse(node0.isString());
802:       assertFalse(node0.isCase());
803:       assertFalse(node0.isGetProp());
804:       assertFalse(node0.isInstanceOf());
805:       assertFalse(node0.isIn());
806:       assertFalse(node0.isWith());
807:       assertFalse(node0.isExprResult());
808:       assertFalse(node0.isComma());
809:       assertFalse(node0.isNE());
810:       assertFalse(node0.isIf());
811:       assertFalse(node0.isDelProp());
812:       assertFalse(node0.isBreak());
813:       assertFalse(node0.isCast());
814:       assertFalse(node0.isAssign());
815:       assertEquals((-1), node0.getSourcePosition());
816:       assertFalse(node0.isDec());
817:       assertFalse(node0.isDebugger());
818:       assertFalse(node0.hasChildren());
819:       assertTrue(node0.isNumber());
820:       assertFalse(node0.isObjectLit());
821:       assertFalse(node0.isContinue());
822:       assertFalse(node0.isAnd());
823:       assertFalse(node0.isNot());
824:       assertFalse(node0.isFunction());
825:       assertEquals(57, Node.REFLECTED_OBJECT);
826:       assertEquals(40, Node.ORIGINALNAME_PROP);
827:       assertEquals(15, Node.NO_SIDE_EFFECTS);
828:       assertEquals(8, Node.FLAG_NO_THROWS);
829:       assertEquals(39, Node.EMPTY_BLOCK);
830:       assertEquals(54, Node.SLASH_V);
831:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
832:       assertEquals(50, Node.FREE_CALL);
833:       assertEquals(52, Node.LENGTH);
834:       assertEquals(12, Node.COLUMN_BITS);
835:       assertEquals(4095, Node.COLUMN_MASK);
836:       assertEquals(49, Node.DIRECT_EVAL);
837:       assertEquals(37, Node.OPT_ARG_NAME);
838:       assertEquals(32, Node.INCRDECR_PROP);
839:       assertEquals(48, Node.DIRECTIVES);
840:       assertEquals(1, Node.DECR_FLAG);
841:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
842:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
843:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
844:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
845:       assertEquals(29, Node.JSDOC_INFO_PROP);
846:       assertEquals(53, Node.INPUT_ID);
847:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
848:       assertEquals(36, Node.QUOTED_PROP);
849:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
850:       assertEquals(43, Node.IS_CONSTANT_NAME);
851:       assertEquals(56, Node.CHANGE_TIME);
852:       assertEquals(51, Node.STATIC_SOURCE_FILE);
853:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
854:       assertEquals(46, Node.IS_NAMESPACE);
855:       assertEquals(55, Node.INFERRED_FUNCTION);
856:       assertEquals(2, Node.POST_FLAG);
857:       assertEquals(57, Node.LAST_PROP);
858:       assertEquals(47, Node.IS_DISPATCHER);
859:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
860:       assertEquals(30, Node.VAR_ARGS_NAME);
861:       
862:       boolean boolean3 = node0.isTry();
863:       assertFalse(node0.equals((Object)node1));
864:       assertTrue(boolean3 == boolean1);
865:       assertTrue(boolean3 == boolean0);
866:       assertTrue(boolean3 == boolean2);
867:       assertFalse(boolean3);
868:       assertFalse(node0.isCall());
869:       assertFalse(node0.isVar());
870:       assertFalse(node0.isStringKey());
871:       assertFalse(node0.isName());
872:       assertFalse(node0.isBlock());
873:       assertFalse(node0.isNull());
874:       assertFalse(node0.isSetterDef());
875:       assertFalse(node0.isAdd());
876:       assertFalse(node0.isDo());
877:       assertFalse(node0.isNew());
878:       assertFalse(node0.isCatch());
879:       assertFalse(node0.hasMoreThanOneChild());
880:       assertFalse(node0.isWhile());
881:       assertFalse(node0.isReturn());
882:       assertFalse(node0.isOr());
883:       assertEquals(39, node0.getType());
884:       assertFalse(node0.isTrue());
885:       assertFalse(node0.isRegExp());
886:       assertFalse(node0.isVoid());
887:       assertFalse(node0.isTypeOf());
888:       assertEquals((-1), node0.getLineno());
889:       assertFalse(node0.isGetElem());
890:       assertFalse(node0.isFor());
891:       assertFalse(node0.isGetterDef());
892:       assertFalse(node0.isScript());
893:       assertFalse(node0.isDefaultCase());
894:       assertFalse(node0.isAssignAdd());
895:       assertFalse(node0.isEmpty());
896:       assertFalse(node0.isTry());
897:       assertFalse(node0.hasOneChild());
898:       assertEquals(0, node0.getChildCount());
899:       assertFalse(node0.isLabel());
900:       assertFalse(node0.isSwitch());
901:       assertFalse(node0.isParamList());
902:       assertFalse(node0.isLabelName());
903:       assertFalse(node0.isArrayLit());
904:       assertFalse(node0.isThrow());
905:       assertFalse(node0.isFalse());
906:       assertFalse(node0.isHook());
907:       assertEquals((-1), node0.getCharno());
908:       assertFalse(node0.isInc());
909:       assertFalse(node0.isThis());
910:       assertFalse(node0.isString());
911:       assertFalse(node0.isCase());
912:       assertFalse(node0.isGetProp());
913:       assertFalse(node0.isInstanceOf());
914:       assertFalse(node0.isIn());
915:       assertFalse(node0.isWith());
916:       assertFalse(node0.isExprResult());
917:       assertFalse(node0.isComma());
918:       assertFalse(node0.isNE());
919:       assertFalse(node0.isIf());
920:       assertFalse(node0.isDelProp());
921:       assertFalse(node0.isBreak());
922:       assertFalse(node0.isCast());
923:       assertFalse(node0.isAssign());
924:       assertEquals((-1), node0.getSourcePosition());
925:       assertFalse(node0.isDec());
926:       assertFalse(node0.isDebugger());
927:       assertFalse(node0.hasChildren());
928:       assertTrue(node0.isNumber());
929:       assertFalse(node0.isObjectLit());
930:       assertFalse(node0.isContinue());
931:       assertFalse(node0.isAnd());
932:       assertFalse(node0.isNot());
933:       assertFalse(node0.isFunction());
934:       assertEquals(57, Node.REFLECTED_OBJECT);
935:       assertEquals(40, Node.ORIGINALNAME_PROP);
936:       assertEquals(15, Node.NO_SIDE_EFFECTS);
937:       assertEquals(8, Node.FLAG_NO_THROWS);
938:       assertEquals(39, Node.EMPTY_BLOCK);
939:       assertEquals(54, Node.SLASH_V);
940:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
941:       assertEquals(50, Node.FREE_CALL);
942:       assertEquals(52, Node.LENGTH);
943:       assertEquals(12, Node.COLUMN_BITS);
944:       assertEquals(4095, Node.COLUMN_MASK);
945:       assertEquals(49, Node.DIRECT_EVAL);
946:       assertEquals(37, Node.OPT_ARG_NAME);
947:       assertEquals(32, Node.INCRDECR_PROP);
948:       assertEquals(48, Node.DIRECTIVES);
949:       assertEquals(1, Node.DECR_FLAG);
950:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
951:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
952:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
953:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
954:       assertEquals(29, Node.JSDOC_INFO_PROP);
955:       assertEquals(53, Node.INPUT_ID);
956:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
957:       assertEquals(36, Node.QUOTED_PROP);
958:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
959:       assertEquals(43, Node.IS_CONSTANT_NAME);
960:       assertEquals(56, Node.CHANGE_TIME);
961:       assertEquals(51, Node.STATIC_SOURCE_FILE);
962:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
963:       assertEquals(46, Node.IS_NAMESPACE);
964:       assertEquals(55, Node.INFERRED_FUNCTION);
965:       assertEquals(2, Node.POST_FLAG);
966:       assertEquals(57, Node.LAST_PROP);
967:       assertEquals(47, Node.IS_DISPATCHER);
968:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
969:       assertEquals(30, Node.VAR_ARGS_NAME);
970:       
971:       boolean boolean4 = node0.isInc();
972:       assertFalse(node0.equals((Object)node1));
973:       assertTrue(boolean4 == boolean2);
974:       assertTrue(boolean4 == boolean1);
975:       assertTrue(boolean4 == boolean0);
976:       assertTrue(boolean4 == boolean3);
977:       assertFalse(boolean4);
978:       assertFalse(node0.isCall());
979:       assertFalse(node0.isVar());
980:       assertFalse(node0.isStringKey());
981:       assertFalse(node0.isName());
982:       assertFalse(node0.isBlock());
983:       assertFalse(node0.isNull());
984:       assertFalse(node0.isSetterDef());
985:       assertFalse(node0.isAdd());
986:       assertFalse(node0.isDo());
987:       assertFalse(node0.isNew());
988:       assertFalse(node0.isCatch());
989:       assertFalse(node0.hasMoreThanOneChild());
990:       assertFalse(node0.isWhile());
991:       assertFalse(node0.isReturn());
992:       assertFalse(node0.isOr());
993:       assertEquals(39, node0.getType());
994:       assertFalse(node0.isTrue());
995:       assertFalse(node0.isRegExp());
996:       assertFalse(node0.isVoid());
997:       assertFalse(node0.isTypeOf());
998:       assertEquals((-1), node0.getLineno());
999:       assertFalse(node0.isGetElem());
1000:       assertFalse(node0.isFor());
1001:       assertFalse(node0.isGetterDef());
1002:       assertFalse(node0.isScript());
1003:       assertFalse(node0.isDefaultCase());
1004:       assertFalse(node0.isAssignAdd());
1005:       assertFalse(node0.isEmpty());
1006:       assertFalse(node0.isTry());
1007:       assertFalse(node0.hasOneChild());
1008:       assertEquals(0, node0.getChildCount());
1009:       assertFalse(node0.isLabel());
1010:       assertFalse(node0.isSwitch());
1011:       assertFalse(node0.isParamList());
1012:       assertFalse(node0.isLabelName());
1013:       assertFalse(node0.isArrayLit());
1014:       assertFalse(node0.isThrow());
1015:       assertFalse(node0.isFalse());
1016:       assertFalse(node0.isHook());
1017:       assertEquals((-1), node0.getCharno());
1018:       assertFalse(node0.isInc());
1019:       assertFalse(node0.isThis());
1020:       assertFalse(node0.isString());
1021:       assertFalse(node0.isCase());
1022:       assertFalse(node0.isGetProp());
1023:       assertFalse(node0.isInstanceOf());
1024:       assertFalse(node0.isIn());
1025:       assertFalse(node0.isWith());
1026:       assertFalse(node0.isExprResult());
1027:       assertFalse(node0.isComma());
1028:       assertFalse(node0.isNE());
1029:       assertFalse(node0.isIf());
1030:       assertFalse(node0.isDelProp());
1031:       assertFalse(node0.isBreak());
1032:       assertFalse(node0.isCast());
1033:       assertFalse(node0.isAssign());
1034:       assertEquals((-1), node0.getSourcePosition());
1035:       assertFalse(node0.isDec());
1036:       assertFalse(node0.isDebugger());
1037:       assertFalse(node0.hasChildren());
1038:       assertTrue(node0.isNumber());
1039:       assertFalse(node0.isObjectLit());
1040:       assertFalse(node0.isContinue());
1041:       assertFalse(node0.isAnd());
1042:       assertFalse(node0.isNot());
1043:       assertFalse(node0.isFunction());
1044:       assertEquals(57, Node.REFLECTED_OBJECT);
1045:       assertEquals(40, Node.ORIGINALNAME_PROP);
1046:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1047:       assertEquals(8, Node.FLAG_NO_THROWS);
1048:       assertEquals(39, Node.EMPTY_BLOCK);
1049:       assertEquals(54, Node.SLASH_V);
1050:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1051:       assertEquals(50, Node.FREE_CALL);
1052:       assertEquals(52, Node.LENGTH);
1053:       assertEquals(12, Node.COLUMN_BITS);
1054:       assertEquals(4095, Node.COLUMN_MASK);
1055:       assertEquals(49, Node.DIRECT_EVAL);
1056:       assertEquals(37, Node.OPT_ARG_NAME);
1057:       assertEquals(32, Node.INCRDECR_PROP);
1058:       assertEquals(48, Node.DIRECTIVES);
1059:       assertEquals(1, Node.DECR_FLAG);
1060:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1061:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1062:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1063:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1064:       assertEquals(29, Node.JSDOC_INFO_PROP);
1065:       assertEquals(53, Node.INPUT_ID);
1066:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1067:       assertEquals(36, Node.QUOTED_PROP);
1068:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1069:       assertEquals(43, Node.IS_CONSTANT_NAME);
1070:       assertEquals(56, Node.CHANGE_TIME);
1071:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1072:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1073:       assertEquals(46, Node.IS_NAMESPACE);
1074:       assertEquals(55, Node.INFERRED_FUNCTION);
1075:       assertEquals(2, Node.POST_FLAG);
1076:       assertEquals(57, Node.LAST_PROP);
1077:       assertEquals(47, Node.IS_DISPATCHER);
1078:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1079:       assertEquals(30, Node.VAR_ARGS_NAME);
1080:   }
1081: }
RegularFileObject[/tmp/EvoSuite_424_1628159846192/com/google/javascript/rhino/Node_424_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:37:26 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_424_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_424_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.common.collect.Sets$1",
101:       "com.google.javascript.rhino.SourcePosition",
102:       "com.google.common.collect.ImmutableMapKeySet",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.javascript.rhino.Node$AncestorIterable$1",
115:       "com.google.common.collect.Iterators$12",
116:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
117:       "com.google.common.collect.Iterators$11",
118:       "com.google.javascript.rhino.jstype.JSType$1",
119:       "com.google.common.collect.EmptyImmutableBiMap",
120:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
121:       "com.google.common.base.Predicate",
122:       "com.google.javascript.rhino.jstype.JSType$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.common.collect.SingletonImmutableSet",
135:       "com.google.javascript.rhino.jstype.NamedType",
136:       "com.google.common.collect.Iterators$13",
137:       "com.google.javascript.rhino.InputId",
138:       "com.google.common.collect.ImmutableList$SerializedForm",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
163:       "com.google.common.base.Joiner$MapJoiner",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.javascript.rhino.Node$AncestorIterable",
185:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
186:       "com.google.common.collect.Lists$RandomAccessListWrapper",
187:       "com.google.common.collect.ImmutableEnumSet",
188:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
189:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
190:       "com.google.javascript.rhino.jstype.EnumElementType",
191:       "com.google.javascript.rhino.jstype.UnionType",
192:       "com.google.common.base.Objects",
193:       "com.google.javascript.rhino.Node$NumberNode",
194:       "com.google.common.collect.SingletonImmutableList",
195:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
196:       "com.google.common.collect.ImmutableCollection$Builder",
197:       "com.google.javascript.rhino.jstype.StaticSlot",
198:       "com.google.common.collect.Iterators$6",
199:       "com.google.common.collect.BiMap",
200:       "com.google.common.collect.Iterators$7",
201:       "com.google.common.collect.AbstractSetMultimap",
202:       "com.google.common.base.Function",
203:       "com.google.common.collect.ImmutableSet",
204:       "com.google.common.collect.Lists$AbstractListWrapper",
205:       "com.google.common.collect.ImmutableMap",
206:       "com.google.common.collect.AbstractIndexedListIterator",
207:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
208:       "com.google.common.collect.Maps$1",
209:       "com.google.javascript.rhino.jstype.EnumType",
210:       "com.google.common.collect.Iterators$1",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$2",
213:       "com.google.javascript.rhino.jstype.NamespaceType",
214:       "com.google.common.collect.Iterators$3",
215:       "com.google.common.collect.Sets",
216:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
217:       "com.google.javascript.rhino.Node$ObjectPropListItem",
218:       "com.google.common.collect.Lists$StringAsImmutableList",
219:       "com.google.common.collect.Lists$2",
220:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
221:       "com.google.common.collect.ImmutableList$Builder",
222:       "com.google.common.collect.Lists$1",
223:       "com.google.javascript.rhino.jstype.StaticReference",
224:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
225:       "com.google.common.collect.Multiset",
226:       "com.google.common.collect.AbstractMultimap",
227:       "com.google.common.collect.Multimap",
228:       "com.google.common.collect.Iterators",
229:       "com.google.common.collect.EmptyImmutableSet",
230:       "com.google.common.collect.Maps$ImprovedAbstractMap",
231:       "com.google.common.collect.ImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
233:       "com.google.common.collect.ImmutableList",
234:       "com.google.common.collect.SingletonImmutableBiMap",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
236:       "com.google.javascript.rhino.jstype.StringType",
237:       "com.google.javascript.rhino.Node$AbstractPropListItem",
238:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
239:       "com.google.javascript.rhino.jstype.TemplatizedType",
240:       "com.google.javascript.rhino.jstype.Visitor",
241:       "com.google.javascript.rhino.jstype.NoResolvedType",
242:       "com.google.javascript.rhino.jstype.JSTypeNative",
243:       "com.google.javascript.rhino.jstype.AllType",
244:       "com.google.common.collect.Maps",
245:       "com.google.common.collect.SetMultimap",
246:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
247:       "com.google.common.collect.Maps$EntryTransformer",
248:       "com.google.javascript.rhino.JSTypeExpression",
249:       "com.google.common.collect.Iterators$MergingIterator"
250:     );
251:   } 
252: 
253:   private static void resetClasses() {
254:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_424_tmp__ESTest_scaffolding.class.getClassLoader()); 
255: 
256:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
257:       "com.google.javascript.rhino.Node",
258:       "com.google.javascript.rhino.Node$NumberNode",
259:       "com.google.javascript.rhino.Node$StringNode",
260:       "com.google.javascript.rhino.Node$AbstractPropListItem",
261:       "com.google.javascript.rhino.Node$ObjectPropListItem",
262:       "com.google.javascript.rhino.Node$IntPropListItem",
263:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
264:       "com.google.javascript.rhino.Node$AncestorIterable",
265:       "com.google.javascript.rhino.Node$NodeMismatch",
266:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
267:       "com.google.javascript.rhino.Node$SideEffectFlags",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Preconditions",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
301:       "com.google.javascript.rhino.jstype.JSType$1",
302:       "com.google.javascript.rhino.jstype.JSType",
303:       "com.google.javascript.rhino.jstype.ObjectType",
304:       "com.google.javascript.rhino.jstype.ProxyObjectType",
305:       "com.google.javascript.rhino.jstype.TemplateType",
306:       "com.google.javascript.rhino.jstype.ValueType",
307:       "com.google.javascript.rhino.jstype.BooleanType",
308:       "com.google.javascript.rhino.jstype.NullType",
309:       "com.google.javascript.rhino.jstype.NumberType",
310:       "com.google.javascript.rhino.jstype.StringType",
311:       "com.google.javascript.rhino.jstype.UnknownType",
312:       "com.google.javascript.rhino.jstype.VoidType",
313:       "com.google.javascript.rhino.jstype.AllType",
314:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
315:       "com.google.common.collect.ImmutableMap",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.collect.EmptyImmutableBiMap",
318:       "com.google.javascript.rhino.jstype.PropertyMap$1",
319:       "com.google.javascript.rhino.jstype.PropertyMap",
320:       "com.google.javascript.rhino.jstype.FunctionType",
321:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
322:       "com.google.javascript.rhino.Token",
323:       "com.google.javascript.rhino.jstype.ArrowType",
324:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
325:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
326:       "com.google.javascript.rhino.jstype.InstanceObjectType",
327:       "com.google.javascript.rhino.jstype.Property",
328:       "com.google.common.collect.Lists",
329:       "com.google.javascript.rhino.jstype.NoObjectType",
330:       "com.google.javascript.rhino.jstype.NoType",
331:       "com.google.javascript.rhino.jstype.NoResolvedType",
332:       "com.google.common.collect.SingletonImmutableList",
333:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
334:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
335:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
336:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
337:       "com.google.javascript.rhino.jstype.UnionType",
338:       "com.google.javascript.rhino.jstype.FunctionBuilder",
339:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.javascript.rhino.jstype.TernaryValue",
348:       "com.google.common.collect.Iterables",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
353:       "com.google.common.collect.Sets",
354:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
355:       "com.google.javascript.rhino.InputId",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
364:       "com.google.javascript.rhino.JSTypeExpression",
365:       "com.google.common.collect.Platform",
366:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
371:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.JSDocInfo$Marker",
374:       "com.google.common.collect.Iterators$12",
375:       "com.google.javascript.rhino.jstype.JSType$2",
376:       "com.google.common.collect.ImmutableList$1"
377:     );
378:   }
379: }

[MASTER] 10:37:26.329 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(951.13);
assertNotNull(node0);
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isDebugger());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isDebugger());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean0 = node0.isOr();
assertFalse(boolean0);
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isDebugger());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);

Node node1 = new Node((-840), node0, node0, 37, 1326);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isDebugger());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals((-840), node1.getType());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertEquals(152878, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(1326, node1.getCharno());
assertEquals(37, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean1 = node0.isEquivalentToShallow(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isDebugger());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals((-840), node1.getType());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertEquals(152878, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(1326, node1.getCharno());
assertEquals(37, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean2 = node0.isNew();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isDebugger());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean3 = node0.isTry();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3);
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isDebugger());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean4 = node0.isInc();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertFalse(boolean4);
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isDebugger());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);


[MASTER] 10:37:30.100 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_452_1628159849597/com/google/javascript/rhino/Node_452_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_452_1628159849597/com/google/javascript/rhino/Node_452_tmp__ESTest_scaffolding.java]]
[MASTER] 10:37:30.100 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:37:30.100 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:37:30.101 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1250
[MASTER] 10:37:30.102 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_452_1628159849597/com/google/javascript/rhino/Node_452_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:37:29 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import java.io.PipedReader;
12: import java.io.PipedWriter;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_452_tmp__ESTest extends Node_452_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString("", 0, 0);
23:       assertNotNull(node0);
24:       assertFalse(node0.isInc());
25:       assertFalse(node0.isThrow());
26:       assertFalse(node0.isCase());
27:       assertFalse(node0.isHook());
28:       assertFalse(node0.isComma());
29:       assertFalse(node0.isNE());
30:       assertFalse(node0.isThis());
31:       assertFalse(node0.isIn());
32:       assertFalse(node0.isInstanceOf());
33:       assertFalse(node0.isDelProp());
34:       assertFalse(node0.isIf());
35:       assertFalse(node0.isBreak());
36:       assertFalse(node0.isScript());
37:       assertFalse(node0.isTrue());
38:       assertFalse(node0.isRegExp());
39:       assertFalse(node0.isWith());
40:       assertFalse(node0.isEmpty());
41:       assertFalse(node0.isFor());
42:       assertFalse(node0.isDefaultCase());
43:       assertFalse(node0.hasOneChild());
44:       assertFalse(node0.isTry());
45:       assertFalse(node0.isParamList());
46:       assertFalse(node0.isLabel());
47:       assertFalse(node0.isGetterDef());
48:       assertEquals(0, node0.getChildCount());
49:       assertFalse(node0.isNumber());
50:       assertFalse(node0.isStringKey());
51:       assertFalse(node0.isArrayLit());
52:       assertFalse(node0.isLabelName());
53:       assertFalse(node0.isSwitch());
54:       assertFalse(node0.isNew());
55:       assertFalse(node0.isAdd());
56:       assertFalse(node0.isBlock());
57:       assertFalse(node0.isVar());
58:       assertFalse(node0.isWhile());
59:       assertFalse(node0.isAssignAdd());
60:       assertFalse(node0.isDo());
61:       assertTrue(node0.isString());
62:       assertFalse(node0.isNull());
63:       assertFalse(node0.isSetterDef());
64:       assertFalse(node0.isReturn());
65:       assertEquals(0, node0.getSourcePosition());
66:       assertFalse(node0.hasChildren());
67:       assertFalse(node0.isDec());
68:       assertFalse(node0.isOr());
69:       assertFalse(node0.isAssign());
70:       assertFalse(node0.isTypeOf());
71:       assertFalse(node0.hasMoreThanOneChild());
72:       assertFalse(node0.isCatch());
73:       assertFalse(node0.isGetElem());
74:       assertFalse(node0.isCall());
75:       assertFalse(node0.isName());
76:       assertFalse(node0.isDebugger());
77:       assertFalse(node0.isVoid());
78:       assertEquals(0, node0.getCharno());
79:       assertFalse(node0.isExprResult());
80:       assertFalse(node0.isNot());
81:       assertFalse(node0.isFunction());
82:       assertEquals(40, node0.getType());
83:       assertFalse(node0.isGetProp());
84:       assertEquals(0, node0.getLineno());
85:       assertFalse(node0.isFalse());
86:       assertFalse(node0.isContinue());
87:       assertFalse(node0.isObjectLit());
88:       assertFalse(node0.isAnd());
89:       assertFalse(node0.isCast());
90:       assertEquals(54, Node.SLASH_V);
91:       assertEquals(15, Node.NO_SIDE_EFFECTS);
92:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
93:       assertEquals(49, Node.DIRECT_EVAL);
94:       assertEquals(57, Node.LAST_PROP);
95:       assertEquals(1, Node.DECR_FLAG);
96:       assertEquals(57, Node.REFLECTED_OBJECT);
97:       assertEquals(51, Node.STATIC_SOURCE_FILE);
98:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
99:       assertEquals(52, Node.LENGTH);
100:       assertEquals(50, Node.FREE_CALL);
101:       assertEquals(8, Node.FLAG_NO_THROWS);
102:       assertEquals(48, Node.DIRECTIVES);
103:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
104:       assertEquals(37, Node.OPT_ARG_NAME);
105:       assertEquals(32, Node.INCRDECR_PROP);
106:       assertEquals(56, Node.CHANGE_TIME);
107:       assertEquals(12, Node.COLUMN_BITS);
108:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
109:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
110:       assertEquals(4095, Node.COLUMN_MASK);
111:       assertEquals(36, Node.QUOTED_PROP);
112:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
113:       assertEquals(43, Node.IS_CONSTANT_NAME);
114:       assertEquals(55, Node.INFERRED_FUNCTION);
115:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
116:       assertEquals(29, Node.JSDOC_INFO_PROP);
117:       assertEquals(53, Node.INPUT_ID);
118:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
119:       assertEquals(2, Node.POST_FLAG);
120:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
121:       assertEquals(39, Node.EMPTY_BLOCK);
122:       assertEquals(47, Node.IS_DISPATCHER);
123:       assertEquals(46, Node.IS_NAMESPACE);
124:       assertEquals(40, Node.ORIGINALNAME_PROP);
125:       assertEquals(30, Node.VAR_ARGS_NAME);
126:       
127:       Node node1 = new Node(49, node0, 41, (-3141));
128:       assertFalse(node1.equals((Object)node0));
129:       assertNotNull(node1);
130:       assertFalse(node0.isInc());
131:       assertFalse(node0.isThrow());
132:       assertFalse(node0.isCase());
133:       assertFalse(node0.isHook());
134:       assertFalse(node0.isComma());
135:       assertFalse(node0.isNE());
136:       assertFalse(node0.isThis());
137:       assertFalse(node0.isIn());
138:       assertFalse(node0.isInstanceOf());
139:       assertFalse(node0.isDelProp());
140:       assertFalse(node0.isIf());
141:       assertFalse(node0.isBreak());
142:       assertFalse(node0.isScript());
143:       assertFalse(node0.isTrue());
144:       assertFalse(node0.isRegExp());
145:       assertFalse(node0.isWith());
146:       assertFalse(node0.isEmpty());
147:       assertFalse(node0.isFor());
148:       assertFalse(node0.isDefaultCase());
149:       assertFalse(node0.hasOneChild());
150:       assertFalse(node0.isTry());
151:       assertFalse(node0.isParamList());
152:       assertFalse(node0.isLabel());
153:       assertFalse(node0.isGetterDef());
154:       assertEquals(0, node0.getChildCount());
155:       assertFalse(node0.isNumber());
156:       assertFalse(node0.isStringKey());
157:       assertFalse(node0.isArrayLit());
158:       assertFalse(node0.isLabelName());
159:       assertFalse(node0.isSwitch());
160:       assertFalse(node0.isNew());
161:       assertFalse(node0.isAdd());
162:       assertFalse(node0.isBlock());
163:       assertFalse(node0.isVar());
164:       assertFalse(node0.isWhile());
165:       assertFalse(node0.isAssignAdd());
166:       assertFalse(node0.isDo());
167:       assertTrue(node0.isString());
168:       assertFalse(node0.isNull());
169:       assertFalse(node0.isSetterDef());
170:       assertFalse(node0.isReturn());
171:       assertEquals(0, node0.getSourcePosition());
172:       assertFalse(node0.hasChildren());
173:       assertFalse(node0.isDec());
174:       assertFalse(node0.isOr());
175:       assertFalse(node0.isAssign());
176:       assertFalse(node0.isTypeOf());
177:       assertFalse(node0.hasMoreThanOneChild());
178:       assertFalse(node0.isCatch());
179:       assertFalse(node0.isGetElem());
180:       assertFalse(node0.isCall());
181:       assertFalse(node0.isName());
182:       assertFalse(node0.isDebugger());
183:       assertFalse(node0.isVoid());
184:       assertEquals(0, node0.getCharno());
185:       assertFalse(node0.isExprResult());
186:       assertFalse(node0.isNot());
187:       assertFalse(node0.isFunction());
188:       assertEquals(40, node0.getType());
189:       assertFalse(node0.isGetProp());
190:       assertEquals(0, node0.getLineno());
191:       assertFalse(node0.isFalse());
192:       assertFalse(node0.isContinue());
193:       assertFalse(node0.isObjectLit());
194:       assertFalse(node0.isAnd());
195:       assertFalse(node0.isCast());
196:       assertFalse(node1.isGetProp());
197:       assertFalse(node1.isThis());
198:       assertFalse(node1.isComma());
199:       assertFalse(node1.isBreak());
200:       assertFalse(node1.isInstanceOf());
201:       assertFalse(node1.isFalse());
202:       assertFalse(node1.isHook());
203:       assertEquals((-1), node1.getCharno());
204:       assertFalse(node1.isScript());
205:       assertFalse(node1.isCast());
206:       assertFalse(node1.isString());
207:       assertFalse(node1.isObjectLit());
208:       assertFalse(node1.isAnd());
209:       assertFalse(node1.isLabelName());
210:       assertFalse(node1.isNot());
211:       assertFalse(node1.isSwitch());
212:       assertEquals((-1), node1.getLineno());
213:       assertEquals(1, node1.getChildCount());
214:       assertFalse(node1.isIn());
215:       assertFalse(node1.isGetterDef());
216:       assertFalse(node1.isNumber());
217:       assertTrue(node1.hasChildren());
218:       assertFalse(node1.isContinue());
219:       assertFalse(node1.hasMoreThanOneChild());
220:       assertFalse(node1.isCase());
221:       assertFalse(node1.isFor());
222:       assertFalse(node1.isInc());
223:       assertFalse(node1.isBlock());
224:       assertFalse(node1.isRegExp());
225:       assertFalse(node1.isWith());
226:       assertFalse(node1.isIf());
227:       assertFalse(node1.isNE());
228:       assertFalse(node1.isSetterDef());
229:       assertTrue(node1.isThrow());
230:       assertFalse(node1.isCatch());
231:       assertFalse(node1.isDefaultCase());
232:       assertFalse(node1.isVar());
233:       assertFalse(node1.isDebugger());
234:       assertFalse(node1.isFunction());
235:       assertFalse(node1.isTry());
236:       assertFalse(node1.isArrayLit());
237:       assertFalse(node1.isParamList());
238:       assertFalse(node1.isStringKey());
239:       assertEquals(49, node1.getType());
240:       assertFalse(node1.isOr());
241:       assertFalse(node1.isLabel());
242:       assertEquals((-1), node1.getSourcePosition());
243:       assertFalse(node1.isDec());
244:       assertFalse(node1.isTypeOf());
245:       assertFalse(node1.isEmpty());
246:       assertFalse(node1.isDo());
247:       assertFalse(node1.isAssign());
248:       assertTrue(node1.hasOneChild());
249:       assertFalse(node1.isReturn());
250:       assertFalse(node1.isAssignAdd());
251:       assertFalse(node1.isWhile());
252:       assertFalse(node1.isVoid());
253:       assertFalse(node1.isExprResult());
254:       assertFalse(node1.isTrue());
255:       assertFalse(node1.isNew());
256:       assertFalse(node1.isAdd());
257:       assertFalse(node1.isName());
258:       assertFalse(node1.isGetElem());
259:       assertFalse(node1.isCall());
260:       assertFalse(node1.isDelProp());
261:       assertFalse(node1.isNull());
262:       assertEquals(54, Node.SLASH_V);
263:       assertEquals(15, Node.NO_SIDE_EFFECTS);
264:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
265:       assertEquals(49, Node.DIRECT_EVAL);
266:       assertEquals(57, Node.LAST_PROP);
267:       assertEquals(1, Node.DECR_FLAG);
268:       assertEquals(57, Node.REFLECTED_OBJECT);
269:       assertEquals(51, Node.STATIC_SOURCE_FILE);
270:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
271:       assertEquals(52, Node.LENGTH);
272:       assertEquals(50, Node.FREE_CALL);
273:       assertEquals(8, Node.FLAG_NO_THROWS);
274:       assertEquals(48, Node.DIRECTIVES);
275:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
276:       assertEquals(37, Node.OPT_ARG_NAME);
277:       assertEquals(32, Node.INCRDECR_PROP);
278:       assertEquals(56, Node.CHANGE_TIME);
279:       assertEquals(12, Node.COLUMN_BITS);
280:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
281:       
282:       boolean boolean0 = node1.wasEmptyNode();
283:       assertFalse(node0.equals((Object)node1));
284:       assertFalse(node1.equals((Object)node0));
285:       assertFalse(boolean0);
286:       assertFalse(node0.isInc());
287:       assertFalse(node0.isThrow());
288:       assertFalse(node0.isCase());
289:       assertFalse(node0.isHook());
290:       assertFalse(node0.isComma());
291:       assertFalse(node0.isNE());
292:       assertFalse(node0.isThis());
293:       assertFalse(node0.isIn());
294:       assertFalse(node0.isInstanceOf());
295:       assertFalse(node0.isDelProp());
296:       assertFalse(node0.isIf());
297:       assertFalse(node0.isBreak());
298:       assertFalse(node0.isScript());
299:       assertFalse(node0.isTrue());
300:       assertFalse(node0.isRegExp());
301:       assertFalse(node0.isWith());
302:       assertFalse(node0.isEmpty());
303:       assertFalse(node0.isFor());
304:       assertFalse(node0.isDefaultCase());
305:       assertFalse(node0.hasOneChild());
306:       assertFalse(node0.isTry());
307:       assertFalse(node0.isParamList());
308:       assertFalse(node0.isLabel());
309:       assertFalse(node0.isGetterDef());
310:       assertEquals(0, node0.getChildCount());
311:       assertFalse(node0.isNumber());
312:       assertFalse(node0.isStringKey());
313:       assertFalse(node0.isArrayLit());
314:       assertFalse(node0.isLabelName());
315:       assertFalse(node0.isSwitch());
316:       assertFalse(node0.isNew());
317:       assertFalse(node0.isAdd());
318:       assertFalse(node0.isBlock());
319:       assertFalse(node0.isVar());
320:       assertFalse(node0.isWhile());
321:       assertFalse(node0.isAssignAdd());
322:       assertFalse(node0.isDo());
323:       assertTrue(node0.isString());
324:       assertFalse(node0.isNull());
325:       assertFalse(node0.isSetterDef());
326:       assertFalse(node0.isReturn());
327:       assertEquals(0, node0.getSourcePosition());
328:       assertFalse(node0.hasChildren());
329:       assertFalse(node0.isDec());
330:       assertFalse(node0.isOr());
331:       assertFalse(node0.isAssign());
332:       assertFalse(node0.isTypeOf());
333:       assertFalse(node0.hasMoreThanOneChild());
334:       assertFalse(node0.isCatch());
335:       assertFalse(node0.isGetElem());
336:       assertFalse(node0.isCall());
337:       assertFalse(node0.isName());
338:       assertFalse(node0.isDebugger());
339:       assertFalse(node0.isVoid());
340:       assertEquals(0, node0.getCharno());
341:       assertFalse(node0.isExprResult());
342:       assertFalse(node0.isNot());
343:       assertFalse(node0.isFunction());
344:       assertEquals(40, node0.getType());
345:       assertFalse(node0.isGetProp());
346:       assertEquals(0, node0.getLineno());
347:       assertFalse(node0.isFalse());
348:       assertFalse(node0.isContinue());
349:       assertFalse(node0.isObjectLit());
350:       assertFalse(node0.isAnd());
351:       assertFalse(node0.isCast());
352:       assertFalse(node1.isGetProp());
353:       assertFalse(node1.isThis());
354:       assertFalse(node1.isComma());
355:       assertFalse(node1.isBreak());
356:       assertFalse(node1.isInstanceOf());
357:       assertFalse(node1.isFalse());
358:       assertFalse(node1.isHook());
359:       assertEquals((-1), node1.getCharno());
360:       assertFalse(node1.isScript());
361:       assertFalse(node1.isCast());
362:       assertFalse(node1.isString());
363:       assertFalse(node1.isObjectLit());
364:       assertFalse(node1.isAnd());
365:       assertFalse(node1.isLabelName());
366:       assertFalse(node1.isNot());
367:       assertFalse(node1.isSwitch());
368:       assertEquals((-1), node1.getLineno());
369:       assertEquals(1, node1.getChildCount());
370:       assertFalse(node1.isIn());
371:       assertFalse(node1.isGetterDef());
372:       assertFalse(node1.isNumber());
373:       assertTrue(node1.hasChildren());
374:       assertFalse(node1.isContinue());
375:       assertFalse(node1.hasMoreThanOneChild());
376:       assertFalse(node1.isCase());
377:       assertFalse(node1.isFor());
378:       assertFalse(node1.isInc());
379:       assertFalse(node1.isBlock());
380:       assertFalse(node1.isRegExp());
381:       assertFalse(node1.isWith());
382:       assertFalse(node1.isIf());
383:       assertFalse(node1.isNE());
384:       assertFalse(node1.isSetterDef());
385:       assertTrue(node1.isThrow());
386:       assertFalse(node1.isCatch());
387:       assertFalse(node1.isDefaultCase());
388:       assertFalse(node1.isVar());
389:       assertFalse(node1.isDebugger());
390:       assertFalse(node1.isFunction());
391:       assertFalse(node1.isTry());
392:       assertFalse(node1.isArrayLit());
393:       assertFalse(node1.isParamList());
394:       assertFalse(node1.isStringKey());
395:       assertEquals(49, node1.getType());
396:       assertFalse(node1.isOr());
397:       assertFalse(node1.isLabel());
398:       assertEquals((-1), node1.getSourcePosition());
399:       assertFalse(node1.isDec());
400:       assertFalse(node1.isTypeOf());
401:       assertFalse(node1.isEmpty());
402:       assertFalse(node1.isDo());
403:       assertFalse(node1.isAssign());
404:       assertTrue(node1.hasOneChild());
405:       assertFalse(node1.isReturn());
406:       assertFalse(node1.isAssignAdd());
407:       assertFalse(node1.isWhile());
408:       assertFalse(node1.isVoid());
409:       assertFalse(node1.isExprResult());
410:       assertFalse(node1.isTrue());
411:       assertFalse(node1.isNew());
412:       assertFalse(node1.isAdd());
413:       assertFalse(node1.isName());
414:       assertFalse(node1.isGetElem());
415:       assertFalse(node1.isCall());
416:       assertFalse(node1.isDelProp());
417:       assertFalse(node1.isNull());
418:       
419:       String string0 = node1.checkTreeEquals(node0);
420:       assertFalse(node0.equals((Object)node1));
421:       assertFalse(node1.equals((Object)node0));
422:       assertNotNull(string0);
423:       assertEquals("Node tree inequality:\nTree1:\nTHROW\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: THROW\n    STRING  0\n\n\nSubtree2: STRING  0\n", string0);
424:       assertFalse(node0.isInc());
425:       assertFalse(node0.isThrow());
426:       assertFalse(node0.isCase());
427:       assertFalse(node0.isHook());
428:       assertFalse(node0.isComma());
429:       assertFalse(node0.isNE());
430:       assertFalse(node0.isThis());
431:       assertFalse(node0.isIn());
432:       assertFalse(node0.isInstanceOf());
433:       assertFalse(node0.isDelProp());
434:       assertFalse(node0.isIf());
435:       assertFalse(node0.isBreak());
436:       assertFalse(node0.isScript());
437:       assertFalse(node0.isTrue());
438:       assertFalse(node0.isRegExp());
439:       assertFalse(node0.isWith());
440:       assertFalse(node0.isEmpty());
441:       assertFalse(node0.isFor());
442:       assertFalse(node0.isDefaultCase());
443:       assertFalse(node0.hasOneChild());
444:       assertFalse(node0.isTry());
445:       assertFalse(node0.isParamList());
446:       assertFalse(node0.isLabel());
447:       assertFalse(node0.isGetterDef());
448:       assertEquals(0, node0.getChildCount());
449:       assertFalse(node0.isNumber());
450:       assertFalse(node0.isStringKey());
451:       assertFalse(node0.isArrayLit());
452:       assertFalse(node0.isLabelName());
453:       assertFalse(node0.isSwitch());
454:       assertFalse(node0.isNew());
455:       assertFalse(node0.isAdd());
456:       assertFalse(node0.isBlock());
457:       assertFalse(node0.isVar());
458:       assertFalse(node0.isWhile());
459:       assertFalse(node0.isAssignAdd());
460:       assertFalse(node0.isDo());
461:       assertTrue(node0.isString());
462:       assertFalse(node0.isNull());
463:       assertFalse(node0.isSetterDef());
464:       assertFalse(node0.isReturn());
465:       assertEquals(0, node0.getSourcePosition());
466:       assertFalse(node0.hasChildren());
467:       assertFalse(node0.isDec());
468:       assertFalse(node0.isOr());
469:       assertFalse(node0.isAssign());
470:       assertFalse(node0.isTypeOf());
471:       assertFalse(node0.hasMoreThanOneChild());
472:       assertFalse(node0.isCatch());
473:       assertFalse(node0.isGetElem());
474:       assertFalse(node0.isCall());
475:       assertFalse(node0.isName());
476:       assertFalse(node0.isDebugger());
477:       assertFalse(node0.isVoid());
478:       assertEquals(0, node0.getCharno());
479:       assertFalse(node0.isExprResult());
480:       assertFalse(node0.isNot());
481:       assertFalse(node0.isFunction());
482:       assertEquals(40, node0.getType());
483:       assertFalse(node0.isGetProp());
484:       assertEquals(0, node0.getLineno());
485:       assertFalse(node0.isFalse());
486:       assertFalse(node0.isContinue());
487:       assertFalse(node0.isObjectLit());
488:       assertFalse(node0.isAnd());
489:       assertFalse(node0.isCast());
490:       assertFalse(node1.isGetProp());
491:       assertFalse(node1.isThis());
492:       assertFalse(node1.isComma());
493:       assertFalse(node1.isBreak());
494:       assertFalse(node1.isInstanceOf());
495:       assertFalse(node1.isFalse());
496:       assertFalse(node1.isHook());
497:       assertEquals((-1), node1.getCharno());
498:       assertFalse(node1.isScript());
499:       assertFalse(node1.isCast());
500:       assertFalse(node1.isString());
501:       assertFalse(node1.isObjectLit());
502:       assertFalse(node1.isAnd());
503:       assertFalse(node1.isLabelName());
504:       assertFalse(node1.isNot());
505:       assertFalse(node1.isSwitch());
506:       assertEquals((-1), node1.getLineno());
507:       assertEquals(1, node1.getChildCount());
508:       assertFalse(node1.isIn());
509:       assertFalse(node1.isGetterDef());
510:       assertFalse(node1.isNumber());
511:       assertTrue(node1.hasChildren());
512:       assertFalse(node1.isContinue());
513:       assertFalse(node1.hasMoreThanOneChild());
514:       assertFalse(node1.isCase());
515:       assertFalse(node1.isFor());
516:       assertFalse(node1.isInc());
517:       assertFalse(node1.isBlock());
518:       assertFalse(node1.isRegExp());
519:       assertFalse(node1.isWith());
520:       assertFalse(node1.isIf());
521:       assertFalse(node1.isNE());
522:       assertFalse(node1.isSetterDef());
523:       assertTrue(node1.isThrow());
524:       assertFalse(node1.isCatch());
525:       assertFalse(node1.isDefaultCase());
526:       assertFalse(node1.isVar());
527:       assertFalse(node1.isDebugger());
528:       assertFalse(node1.isFunction());
529:       assertFalse(node1.isTry());
530:       assertFalse(node1.isArrayLit());
531:       assertFalse(node1.isParamList());
532:       assertFalse(node1.isStringKey());
533:       assertEquals(49, node1.getType());
534:       assertFalse(node1.isOr());
535:       assertFalse(node1.isLabel());
536:       assertEquals((-1), node1.getSourcePosition());
537:       assertFalse(node1.isDec());
538:       assertFalse(node1.isTypeOf());
539:       assertFalse(node1.isEmpty());
540:       assertFalse(node1.isDo());
541:       assertFalse(node1.isAssign());
542:       assertTrue(node1.hasOneChild());
543:       assertFalse(node1.isReturn());
544:       assertFalse(node1.isAssignAdd());
545:       assertFalse(node1.isWhile());
546:       assertFalse(node1.isVoid());
547:       assertFalse(node1.isExprResult());
548:       assertFalse(node1.isTrue());
549:       assertFalse(node1.isNew());
550:       assertFalse(node1.isAdd());
551:       assertFalse(node1.isName());
552:       assertFalse(node1.isGetElem());
553:       assertFalse(node1.isCall());
554:       assertFalse(node1.isDelProp());
555:       assertFalse(node1.isNull());
556:       
557:       String string1 = node1.getQualifiedName();
558:       assertFalse(node0.equals((Object)node1));
559:       assertFalse(node1.equals((Object)node0));
560:       assertNull(string1);
561:       assertFalse(node0.isInc());
562:       assertFalse(node0.isThrow());
563:       assertFalse(node0.isCase());
564:       assertFalse(node0.isHook());
565:       assertFalse(node0.isComma());
566:       assertFalse(node0.isNE());
567:       assertFalse(node0.isThis());
568:       assertFalse(node0.isIn());
569:       assertFalse(node0.isInstanceOf());
570:       assertFalse(node0.isDelProp());
571:       assertFalse(node0.isIf());
572:       assertFalse(node0.isBreak());
573:       assertFalse(node0.isScript());
574:       assertFalse(node0.isTrue());
575:       assertFalse(node0.isRegExp());
576:       assertFalse(node0.isWith());
577:       assertFalse(node0.isEmpty());
578:       assertFalse(node0.isFor());
579:       assertFalse(node0.isDefaultCase());
580:       assertFalse(node0.hasOneChild());
581:       assertFalse(node0.isTry());
582:       assertFalse(node0.isParamList());
583:       assertFalse(node0.isLabel());
584:       assertFalse(node0.isGetterDef());
585:       assertEquals(0, node0.getChildCount());
586:       assertFalse(node0.isNumber());
587:       assertFalse(node0.isStringKey());
588:       assertFalse(node0.isArrayLit());
589:       assertFalse(node0.isLabelName());
590:       assertFalse(node0.isSwitch());
591:       assertFalse(node0.isNew());
592:       assertFalse(node0.isAdd());
593:       assertFalse(node0.isBlock());
594:       assertFalse(node0.isVar());
595:       assertFalse(node0.isWhile());
596:       assertFalse(node0.isAssignAdd());
597:       assertFalse(node0.isDo());
598:       assertTrue(node0.isString());
599:       assertFalse(node0.isNull());
600:       assertFalse(node0.isSetterDef());
601:       assertFalse(node0.isReturn());
602:       assertEquals(0, node0.getSourcePosition());
603:       assertFalse(node0.hasChildren());
604:       assertFalse(node0.isDec());
605:       assertFalse(node0.isOr());
606:       assertFalse(node0.isAssign());
607:       assertFalse(node0.isTypeOf());
608:       assertFalse(node0.hasMoreThanOneChild());
609:       assertFalse(node0.isCatch());
610:       assertFalse(node0.isGetElem());
611:       assertFalse(node0.isCall());
612:       assertFalse(node0.isName());
613:       assertFalse(node0.isDebugger());
614:       assertFalse(node0.isVoid());
615:       assertEquals(0, node0.getCharno());
616:       assertFalse(node0.isExprResult());
617:       assertFalse(node0.isNot());
618:       assertFalse(node0.isFunction());
619:       assertEquals(40, node0.getType());
620:       assertFalse(node0.isGetProp());
621:       assertEquals(0, node0.getLineno());
622:       assertFalse(node0.isFalse());
623:       assertFalse(node0.isContinue());
624:       assertFalse(node0.isObjectLit());
625:       assertFalse(node0.isAnd());
626:       assertFalse(node0.isCast());
627:       assertFalse(node1.isGetProp());
628:       assertFalse(node1.isThis());
629:       assertFalse(node1.isComma());
630:       assertFalse(node1.isBreak());
631:       assertFalse(node1.isInstanceOf());
632:       assertFalse(node1.isFalse());
633:       assertFalse(node1.isHook());
634:       assertEquals((-1), node1.getCharno());
635:       assertFalse(node1.isScript());
636:       assertFalse(node1.isCast());
637:       assertFalse(node1.isString());
638:       assertFalse(node1.isObjectLit());
639:       assertFalse(node1.isAnd());
640:       assertFalse(node1.isLabelName());
641:       assertFalse(node1.isNot());
642:       assertFalse(node1.isSwitch());
643:       assertEquals((-1), node1.getLineno());
644:       assertEquals(1, node1.getChildCount());
645:       assertFalse(node1.isIn());
646:       assertFalse(node1.isGetterDef());
647:       assertFalse(node1.isNumber());
648:       assertTrue(node1.hasChildren());
649:       assertFalse(node1.isContinue());
650:       assertFalse(node1.hasMoreThanOneChild());
651:       assertFalse(node1.isCase());
652:       assertFalse(node1.isFor());
653:       assertFalse(node1.isInc());
654:       assertFalse(node1.isBlock());
655:       assertFalse(node1.isRegExp());
656:       assertFalse(node1.isWith());
657:       assertFalse(node1.isIf());
658:       assertFalse(node1.isNE());
659:       assertFalse(node1.isSetterDef());
660:       assertTrue(node1.isThrow());
661:       assertFalse(node1.isCatch());
662:       assertFalse(node1.isDefaultCase());
663:       assertFalse(node1.isVar());
664:       assertFalse(node1.isDebugger());
665:       assertFalse(node1.isFunction());
666:       assertFalse(node1.isTry());
667:       assertFalse(node1.isArrayLit());
668:       assertFalse(node1.isParamList());
669:       assertFalse(node1.isStringKey());
670:       assertEquals(49, node1.getType());
671:       assertFalse(node1.isOr());
672:       assertFalse(node1.isLabel());
673:       assertEquals((-1), node1.getSourcePosition());
674:       assertFalse(node1.isDec());
675:       assertFalse(node1.isTypeOf());
676:       assertFalse(node1.isEmpty());
677:       assertFalse(node1.isDo());
678:       assertFalse(node1.isAssign());
679:       assertTrue(node1.hasOneChild());
680:       assertFalse(node1.isReturn());
681:       assertFalse(node1.isAssignAdd());
682:       assertFalse(node1.isWhile());
683:       assertFalse(node1.isVoid());
684:       assertFalse(node1.isExprResult());
685:       assertFalse(node1.isTrue());
686:       assertFalse(node1.isNew());
687:       assertFalse(node1.isAdd());
688:       assertFalse(node1.isName());
689:       assertFalse(node1.isGetElem());
690:       assertFalse(node1.isCall());
691:       assertFalse(node1.isDelProp());
692:       assertFalse(node1.isNull());
693:       
694:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
695:       assertFalse(node0.equals((Object)node1));
696:       assertFalse(node1.equals((Object)node0));
697:       assertNotNull(node_NodeMismatch0);
698:       assertFalse(node0.isInc());
699:       assertFalse(node0.isThrow());
700:       assertFalse(node0.isCase());
701:       assertFalse(node0.isHook());
702:       assertFalse(node0.isComma());
703:       assertFalse(node0.isNE());
704:       assertFalse(node0.isThis());
705:       assertFalse(node0.isIn());
706:       assertFalse(node0.isInstanceOf());
707:       assertFalse(node0.isDelProp());
708:       assertFalse(node0.isIf());
709:       assertFalse(node0.isBreak());
710:       assertFalse(node0.isScript());
711:       assertFalse(node0.isTrue());
712:       assertFalse(node0.isRegExp());
713:       assertFalse(node0.isWith());
714:       assertFalse(node0.isEmpty());
715:       assertFalse(node0.isFor());
716:       assertFalse(node0.isDefaultCase());
717:       assertFalse(node0.hasOneChild());
718:       assertFalse(node0.isTry());
719:       assertFalse(node0.isParamList());
720:       assertFalse(node0.isLabel());
721:       assertFalse(node0.isGetterDef());
722:       assertEquals(0, node0.getChildCount());
723:       assertFalse(node0.isNumber());
724:       assertFalse(node0.isStringKey());
725:       assertFalse(node0.isArrayLit());
726:       assertFalse(node0.isLabelName());
727:       assertFalse(node0.isSwitch());
728:       assertFalse(node0.isNew());
729:       assertFalse(node0.isAdd());
730:       assertFalse(node0.isBlock());
731:       assertFalse(node0.isVar());
732:       assertFalse(node0.isWhile());
733:       assertFalse(node0.isAssignAdd());
734:       assertFalse(node0.isDo());
735:       assertTrue(node0.isString());
736:       assertFalse(node0.isNull());
737:       assertFalse(node0.isSetterDef());
738:       assertFalse(node0.isReturn());
739:       assertEquals(0, node0.getSourcePosition());
740:       assertFalse(node0.hasChildren());
741:       assertFalse(node0.isDec());
742:       assertFalse(node0.isOr());
743:       assertFalse(node0.isAssign());
744:       assertFalse(node0.isTypeOf());
745:       assertFalse(node0.hasMoreThanOneChild());
746:       assertFalse(node0.isCatch());
747:       assertFalse(node0.isGetElem());
748:       assertFalse(node0.isCall());
749:       assertFalse(node0.isName());
750:       assertFalse(node0.isDebugger());
751:       assertFalse(node0.isVoid());
752:       assertEquals(0, node0.getCharno());
753:       assertFalse(node0.isExprResult());
754:       assertFalse(node0.isNot());
755:       assertFalse(node0.isFunction());
756:       assertEquals(40, node0.getType());
757:       assertFalse(node0.isGetProp());
758:       assertEquals(0, node0.getLineno());
759:       assertFalse(node0.isFalse());
760:       assertFalse(node0.isContinue());
761:       assertFalse(node0.isObjectLit());
762:       assertFalse(node0.isAnd());
763:       assertFalse(node0.isCast());
764:       assertFalse(node1.isGetProp());
765:       assertFalse(node1.isThis());
766:       assertFalse(node1.isComma());
767:       assertFalse(node1.isBreak());
768:       assertFalse(node1.isInstanceOf());
769:       assertFalse(node1.isFalse());
770:       assertFalse(node1.isHook());
771:       assertEquals((-1), node1.getCharno());
772:       assertFalse(node1.isScript());
773:       assertFalse(node1.isCast());
774:       assertFalse(node1.isString());
775:       assertFalse(node1.isObjectLit());
776:       assertFalse(node1.isAnd());
777:       assertFalse(node1.isLabelName());
778:       assertFalse(node1.isNot());
779:       assertFalse(node1.isSwitch());
780:       assertEquals((-1), node1.getLineno());
781:       assertEquals(1, node1.getChildCount());
782:       assertFalse(node1.isIn());
783:       assertFalse(node1.isGetterDef());
784:       assertFalse(node1.isNumber());
785:       assertTrue(node1.hasChildren());
786:       assertFalse(node1.isContinue());
787:       assertFalse(node1.hasMoreThanOneChild());
788:       assertFalse(node1.isCase());
789:       assertFalse(node1.isFor());
790:       assertFalse(node1.isInc());
791:       assertFalse(node1.isBlock());
792:       assertFalse(node1.isRegExp());
793:       assertFalse(node1.isWith());
794:       assertFalse(node1.isIf());
795:       assertFalse(node1.isNE());
796:       assertFalse(node1.isSetterDef());
797:       assertTrue(node1.isThrow());
798:       assertFalse(node1.isCatch());
799:       assertFalse(node1.isDefaultCase());
800:       assertFalse(node1.isVar());
801:       assertFalse(node1.isDebugger());
802:       assertFalse(node1.isFunction());
803:       assertFalse(node1.isTry());
804:       assertFalse(node1.isArrayLit());
805:       assertFalse(node1.isParamList());
806:       assertFalse(node1.isStringKey());
807:       assertEquals(49, node1.getType());
808:       assertFalse(node1.isOr());
809:       assertFalse(node1.isLabel());
810:       assertEquals((-1), node1.getSourcePosition());
811:       assertFalse(node1.isDec());
812:       assertFalse(node1.isTypeOf());
813:       assertFalse(node1.isEmpty());
814:       assertFalse(node1.isDo());
815:       assertFalse(node1.isAssign());
816:       assertTrue(node1.hasOneChild());
817:       assertFalse(node1.isReturn());
818:       assertFalse(node1.isAssignAdd());
819:       assertFalse(node1.isWhile());
820:       assertFalse(node1.isVoid());
821:       assertFalse(node1.isExprResult());
822:       assertFalse(node1.isTrue());
823:       assertFalse(node1.isNew());
824:       assertFalse(node1.isAdd());
825:       assertFalse(node1.isName());
826:       assertFalse(node1.isGetElem());
827:       assertFalse(node1.isCall());
828:       assertFalse(node1.isDelProp());
829:       assertFalse(node1.isNull());
830:       
831:       Node node2 = node0.getLastSibling();
832:       assertSame(node0, node2);
833:       assertSame(node2, node0);
834:       assertFalse(node0.equals((Object)node1));
835:       assertFalse(node2.equals((Object)node1));
836:       assertNotNull(node2);
837:       assertFalse(node0.isInc());
838:       assertFalse(node0.isThrow());
839:       assertFalse(node0.isCase());
840:       assertFalse(node0.isHook());
841:       assertFalse(node0.isComma());
842:       assertFalse(node0.isNE());
843:       assertFalse(node0.isThis());
844:       assertFalse(node0.isIn());
845:       assertFalse(node0.isInstanceOf());
846:       assertFalse(node0.isDelProp());
847:       assertFalse(node0.isIf());
848:       assertFalse(node0.isBreak());
849:       assertFalse(node0.isScript());
850:       assertFalse(node0.isTrue());
851:       assertFalse(node0.isRegExp());
852:       assertFalse(node0.isWith());
853:       assertFalse(node0.isEmpty());
854:       assertFalse(node0.isFor());
855:       assertFalse(node0.isDefaultCase());
856:       assertFalse(node0.hasOneChild());
857:       assertFalse(node0.isTry());
858:       assertFalse(node0.isParamList());
859:       assertFalse(node0.isLabel());
860:       assertFalse(node0.isGetterDef());
861:       assertEquals(0, node0.getChildCount());
862:       assertFalse(node0.isNumber());
863:       assertFalse(node0.isStringKey());
864:       assertFalse(node0.isArrayLit());
865:       assertFalse(node0.isLabelName());
866:       assertFalse(node0.isSwitch());
867:       assertFalse(node0.isNew());
868:       assertFalse(node0.isAdd());
869:       assertFalse(node0.isBlock());
870:       assertFalse(node0.isVar());
871:       assertFalse(node0.isWhile());
872:       assertFalse(node0.isAssignAdd());
873:       assertFalse(node0.isDo());
874:       assertTrue(node0.isString());
875:       assertFalse(node0.isNull());
876:       assertFalse(node0.isSetterDef());
877:       assertFalse(node0.isReturn());
878:       assertEquals(0, node0.getSourcePosition());
879:       assertFalse(node0.hasChildren());
880:       assertFalse(node0.isDec());
881:       assertFalse(node0.isOr());
882:       assertFalse(node0.isAssign());
883:       assertFalse(node0.isTypeOf());
884:       assertFalse(node0.hasMoreThanOneChild());
885:       assertFalse(node0.isCatch());
886:       assertFalse(node0.isGetElem());
887:       assertFalse(node0.isCall());
888:       assertFalse(node0.isName());
889:       assertFalse(node0.isDebugger());
890:       assertFalse(node0.isVoid());
891:       assertEquals(0, node0.getCharno());
892:       assertFalse(node0.isExprResult());
893:       assertFalse(node0.isNot());
894:       assertFalse(node0.isFunction());
895:       assertEquals(40, node0.getType());
896:       assertFalse(node0.isGetProp());
897:       assertEquals(0, node0.getLineno());
898:       assertFalse(node0.isFalse());
899:       assertFalse(node0.isContinue());
900:       assertFalse(node0.isObjectLit());
901:       assertFalse(node0.isAnd());
902:       assertFalse(node0.isCast());
903:       assertFalse(node2.isGetElem());
904:       assertFalse(node2.isLabelName());
905:       assertFalse(node2.isAssign());
906:       assertFalse(node2.hasChildren());
907:       assertFalse(node2.hasOneChild());
908:       assertFalse(node2.isOr());
909:       assertEquals(0, node2.getCharno());
910:       assertFalse(node2.isNumber());
911:       assertFalse(node2.isScript());
912:       assertFalse(node2.isDo());
913:       assertFalse(node2.isNot());
914:       assertFalse(node2.isAssignAdd());
915:       assertFalse(node2.isAnd());
916:       assertFalse(node2.isLabel());
917:       assertFalse(node2.isCast());
918:       assertFalse(node2.isContinue());
919:       assertFalse(node2.isFalse());
920:       assertFalse(node2.isStringKey());
921:       assertFalse(node2.isThrow());
922:       assertFalse(node2.isHook());
923:       assertFalse(node2.isParamList());
924:       assertTrue(node2.isString());
925:       assertFalse(node2.isInc());
926:       assertFalse(node2.isSetterDef());
927:       assertFalse(node2.isCase());
928:       assertFalse(node2.isBlock());
929:       assertFalse(node2.isThis());
930:       assertFalse(node2.isRegExp());
931:       assertFalse(node2.isInstanceOf());
932:       assertFalse(node2.isCatch());
933:       assertFalse(node2.isWith());
934:       assertFalse(node2.hasMoreThanOneChild());
935:       assertFalse(node2.isEmpty());
936:       assertFalse(node2.isFor());
937:       assertFalse(node2.isArrayLit());
938:       assertFalse(node2.isNE());
939:       assertFalse(node2.isDelProp());
940:       assertFalse(node2.isIf());
941:       assertFalse(node2.isTry());
942:       assertFalse(node2.isDebugger());
943:       assertFalse(node2.isTrue());
944:       assertFalse(node2.isGetterDef());
945:       assertFalse(node2.isIn());
946:       assertEquals(40, node2.getType());
947:       assertFalse(node2.isSwitch());
948:       assertFalse(node2.isDefaultCase());
949:       assertEquals(0, node2.getLineno());
950:       assertEquals(0, node2.getChildCount());
951:       assertFalse(node2.isFunction());
952:       assertFalse(node2.isName());
953:       assertFalse(node2.isCall());
954:       assertEquals(0, node2.getSourcePosition());
955:       assertFalse(node2.isBreak());
956:       assertFalse(node2.isNull());
957:       assertFalse(node2.isVar());
958:       assertFalse(node2.isAdd());
959:       assertFalse(node2.isNew());
960:       assertFalse(node2.isGetProp());
961:       assertFalse(node2.isObjectLit());
962:       assertFalse(node2.isWhile());
963:       assertFalse(node2.isVoid());
964:       assertFalse(node2.isExprResult());
965:       assertFalse(node2.isComma());
966:       assertFalse(node2.isReturn());
967:       assertFalse(node2.isDec());
968:       assertFalse(node2.isTypeOf());
969:       
970:       boolean boolean1 = node1.isEquivalentToTyped(node2);
971:       assertSame(node0, node2);
972:       assertSame(node2, node0);
973:       assertFalse(node0.equals((Object)node1));
974:       assertFalse(node1.equals((Object)node2));
975:       assertFalse(node1.equals((Object)node0));
976:       assertFalse(node2.equals((Object)node1));
977:       assertTrue(boolean1 == boolean0);
978:       assertFalse(boolean1);
979:       assertFalse(node0.isInc());
980:       assertFalse(node0.isThrow());
981:       assertFalse(node0.isCase());
982:       assertFalse(node0.isHook());
983:       assertFalse(node0.isComma());
984:       assertFalse(node0.isNE());
985:       assertFalse(node0.isThis());
986:       assertFalse(node0.isIn());
987:       assertFalse(node0.isInstanceOf());
988:       assertFalse(node0.isDelProp());
989:       assertFalse(node0.isIf());
990:       assertFalse(node0.isBreak());
991:       assertFalse(node0.isScript());
992:       assertFalse(node0.isTrue());
993:       assertFalse(node0.isRegExp());
994:       assertFalse(node0.isWith());
995:       assertFalse(node0.isEmpty());
996:       assertFalse(node0.isFor());
997:       assertFalse(node0.isDefaultCase());
998:       assertFalse(node0.hasOneChild());
999:       assertFalse(node0.isTry());
1000:       assertFalse(node0.isParamList());
1001:       assertFalse(node0.isLabel());
1002:       assertFalse(node0.isGetterDef());
1003:       assertEquals(0, node0.getChildCount());
1004:       assertFalse(node0.isNumber());
1005:       assertFalse(node0.isStringKey());
1006:       assertFalse(node0.isArrayLit());
1007:       assertFalse(node0.isLabelName());
1008:       assertFalse(node0.isSwitch());
1009:       assertFalse(node0.isNew());
1010:       assertFalse(node0.isAdd());
1011:       assertFalse(node0.isBlock());
1012:       assertFalse(node0.isVar());
1013:       assertFalse(node0.isWhile());
1014:       assertFalse(node0.isAssignAdd());
1015:       assertFalse(node0.isDo());
1016:       assertTrue(node0.isString());
1017:       assertFalse(node0.isNull());
1018:       assertFalse(node0.isSetterDef());
1019:       assertFalse(node0.isReturn());
1020:       assertEquals(0, node0.getSourcePosition());
1021:       assertFalse(node0.hasChildren());
1022:       assertFalse(node0.isDec());
1023:       assertFalse(node0.isOr());
1024:       assertFalse(node0.isAssign());
1025:       assertFalse(node0.isTypeOf());
1026:       assertFalse(node0.hasMoreThanOneChild());
1027:       assertFalse(node0.isCatch());
1028:       assertFalse(node0.isGetElem());
1029:       assertFalse(node0.isCall());
1030:       assertFalse(node0.isName());
1031:       assertFalse(node0.isDebugger());
1032:       assertFalse(node0.isVoid());
1033:       assertEquals(0, node0.getCharno());
1034:       assertFalse(node0.isExprResult());
1035:       assertFalse(node0.isNot());
1036:       assertFalse(node0.isFunction());
1037:       assertEquals(40, node0.getType());
1038:       assertFalse(node0.isGetProp());
1039:       assertEquals(0, node0.getLineno());
1040:       assertFalse(node0.isFalse());
1041:       assertFalse(node0.isContinue());
1042:       assertFalse(node0.isObjectLit());
1043:       assertFalse(node0.isAnd());
1044:       assertFalse(node0.isCast());
1045:       assertFalse(node1.isGetProp());
1046:       assertFalse(node1.isThis());
1047:       assertFalse(node1.isComma());
1048:       assertFalse(node1.isBreak());
1049:       assertFalse(node1.isInstanceOf());
1050:       assertFalse(node1.isFalse());
1051:       assertFalse(node1.isHook());
1052:       assertEquals((-1), node1.getCharno());
1053:       assertFalse(node1.isScript());
1054:       assertFalse(node1.isCast());
1055:       assertFalse(node1.isString());
1056:       assertFalse(node1.isObjectLit());
1057:       assertFalse(node1.isAnd());
1058:       assertFalse(node1.isLabelName());
1059:       assertFalse(node1.isNot());
1060:       assertFalse(node1.isSwitch());
1061:       assertEquals((-1), node1.getLineno());
1062:       assertEquals(1, node1.getChildCount());
1063:       assertFalse(node1.isIn());
1064:       assertFalse(node1.isGetterDef());
1065:       assertFalse(node1.isNumber());
1066:       assertTrue(node1.hasChildren());
1067:       assertFalse(node1.isContinue());
1068:       assertFalse(node1.hasMoreThanOneChild());
1069:       assertFalse(node1.isCase());
1070:       assertFalse(node1.isFor());
1071:       assertFalse(node1.isInc());
1072:       assertFalse(node1.isBlock());
1073:       assertFalse(node1.isRegExp());
1074:       assertFalse(node1.isWith());
1075:       assertFalse(node1.isIf());
1076:       assertFalse(node1.isNE());
1077:       assertFalse(node1.isSetterDef());
1078:       assertTrue(node1.isThrow());
1079:       assertFalse(node1.isCatch());
1080:       assertFalse(node1.isDefaultCase());
1081:       assertFalse(node1.isVar());
1082:       assertFalse(node1.isDebugger());
1083:       assertFalse(node1.isFunction());
1084:       assertFalse(node1.isTry());
1085:       assertFalse(node1.isArrayLit());
1086:       assertFalse(node1.isParamList());
1087:       assertFalse(node1.isStringKey());
1088:       assertEquals(49, node1.getType());
1089:       assertFalse(node1.isOr());
1090:       assertFalse(node1.isLabel());
1091:       assertEquals((-1), node1.getSourcePosition());
1092:       assertFalse(node1.isDec());
1093:       assertFalse(node1.isTypeOf());
1094:       assertFalse(node1.isEmpty());
1095:       assertFalse(node1.isDo());
1096:       assertFalse(node1.isAssign());
1097:       assertTrue(node1.hasOneChild());
1098:       assertFalse(node1.isReturn());
1099:       assertFalse(node1.isAssignAdd());
1100:       assertFalse(node1.isWhile());
1101:       assertFalse(node1.isVoid());
1102:       assertFalse(node1.isExprResult());
1103:       assertFalse(node1.isTrue());
1104:       assertFalse(node1.isNew());
1105:       assertFalse(node1.isAdd());
1106:       assertFalse(node1.isName());
1107:       assertFalse(node1.isGetElem());
1108:       assertFalse(node1.isCall());
1109:       assertFalse(node1.isDelProp());
1110:       assertFalse(node1.isNull());
1111:       assertFalse(node2.isGetElem());
1112:       assertFalse(node2.isLabelName());
1113:       assertFalse(node2.isAssign());
1114:       assertFalse(node2.hasChildren());
1115:       assertFalse(node2.hasOneChild());
1116:       assertFalse(node2.isOr());
1117:       assertEquals(0, node2.getCharno());
1118:       assertFalse(node2.isNumber());
1119:       assertFalse(node2.isScript());
1120:       assertFalse(node2.isDo());
1121:       assertFalse(node2.isNot());
1122:       assertFalse(node2.isAssignAdd());
1123:       assertFalse(node2.isAnd());
1124:       assertFalse(node2.isLabel());
1125:       assertFalse(node2.isCast());
1126:       assertFalse(node2.isContinue());
1127:       assertFalse(node2.isFalse());
1128:       assertFalse(node2.isStringKey());
1129:       assertFalse(node2.isThrow());
1130:       assertFalse(node2.isHook());
1131:       assertFalse(node2.isParamList());
1132:       assertTrue(node2.isString());
1133:       assertFalse(node2.isInc());
1134:       assertFalse(node2.isSetterDef());
1135:       assertFalse(node2.isCase());
1136:       assertFalse(node2.isBlock());
1137:       assertFalse(node2.isThis());
1138:       assertFalse(node2.isRegExp());
1139:       assertFalse(node2.isInstanceOf());
1140:       assertFalse(node2.isCatch());
1141:       assertFalse(node2.isWith());
1142:       assertFalse(node2.hasMoreThanOneChild());
1143:       assertFalse(node2.isEmpty());
1144:       assertFalse(node2.isFor());
1145:       assertFalse(node2.isArrayLit());
1146:       assertFalse(node2.isNE());
1147:       assertFalse(node2.isDelProp());
1148:       assertFalse(node2.isIf());
1149:       assertFalse(node2.isTry());
1150:       assertFalse(node2.isDebugger());
1151:       assertFalse(node2.isTrue());
1152:       assertFalse(node2.isGetterDef());
1153:       assertFalse(node2.isIn());
1154:       assertEquals(40, node2.getType());
1155:       assertFalse(node2.isSwitch());
1156:       assertFalse(node2.isDefaultCase());
1157:       assertEquals(0, node2.getLineno());
1158:       assertEquals(0, node2.getChildCount());
1159:       assertFalse(node2.isFunction());
1160:       assertFalse(node2.isName());
1161:       assertFalse(node2.isCall());
1162:       assertEquals(0, node2.getSourcePosition());
1163:       assertFalse(node2.isBreak());
1164:       assertFalse(node2.isNull());
1165:       assertFalse(node2.isVar());
1166:       assertFalse(node2.isAdd());
1167:       assertFalse(node2.isNew());
1168:       assertFalse(node2.isGetProp());
1169:       assertFalse(node2.isObjectLit());
1170:       assertFalse(node2.isWhile());
1171:       assertFalse(node2.isVoid());
1172:       assertFalse(node2.isExprResult());
1173:       assertFalse(node2.isComma());
1174:       assertFalse(node2.isReturn());
1175:       assertFalse(node2.isDec());
1176:       assertFalse(node2.isTypeOf());
1177:       
1178:       int int0 = node0.getSourceOffset();
1179:       assertSame(node0, node2);
1180:       assertFalse(node0.equals((Object)node1));
1181:       assertEquals((-1), int0);
1182:       assertFalse(node0.isInc());
1183:       assertFalse(node0.isThrow());
1184:       assertFalse(node0.isCase());
1185:       assertFalse(node0.isHook());
1186:       assertFalse(node0.isComma());
1187:       assertFalse(node0.isNE());
1188:       assertFalse(node0.isThis());
1189:       assertFalse(node0.isIn());
1190:       assertFalse(node0.isInstanceOf());
1191:       assertFalse(node0.isDelProp());
1192:       assertFalse(node0.isIf());
1193:       assertFalse(node0.isBreak());
1194:       assertFalse(node0.isScript());
1195:       assertFalse(node0.isTrue());
1196:       assertFalse(node0.isRegExp());
1197:       assertFalse(node0.isWith());
1198:       assertFalse(node0.isEmpty());
1199:       assertFalse(node0.isFor());
1200:       assertFalse(node0.isDefaultCase());
1201:       assertFalse(node0.hasOneChild());
1202:       assertFalse(node0.isTry());
1203:       assertFalse(node0.isParamList());
1204:       assertFalse(node0.isLabel());
1205:       assertFalse(node0.isGetterDef());
1206:       assertEquals(0, node0.getChildCount());
1207:       assertFalse(node0.isNumber());
1208:       assertFalse(node0.isStringKey());
1209:       assertFalse(node0.isArrayLit());
1210:       assertFalse(node0.isLabelName());
1211:       assertFalse(node0.isSwitch());
1212:       assertFalse(node0.isNew());
1213:       assertFalse(node0.isAdd());
1214:       assertFalse(node0.isBlock());
1215:       assertFalse(node0.isVar());
1216:       assertFalse(node0.isWhile());
1217:       assertFalse(node0.isAssignAdd());
1218:       assertFalse(node0.isDo());
1219:       assertTrue(node0.isString());
1220:       assertFalse(node0.isNull());
1221:       assertFalse(node0.isSetterDef());
1222:       assertFalse(node0.isReturn());
1223:       assertEquals(0, node0.getSourcePosition());
1224:       assertFalse(node0.hasChildren());
1225:       assertFalse(node0.isDec());
1226:       assertFalse(node0.isOr());
1227:       assertFalse(node0.isAssign());
1228:       assertFalse(node0.isTypeOf());
1229:       assertFalse(node0.hasMoreThanOneChild());
1230:       assertFalse(node0.isCatch());
1231:       assertFalse(node0.isGetElem());
1232:       assertFalse(node0.isCall());
1233:       assertFalse(node0.isName());
1234:       assertFalse(node0.isDebugger());
1235:       assertFalse(node0.isVoid());
1236:       assertEquals(0, node0.getCharno());
1237:       assertFalse(node0.isExprResult());
1238:       assertFalse(node0.isNot());
1239:       assertFalse(node0.isFunction());
1240:       assertEquals(40, node0.getType());
1241:       assertFalse(node0.isGetProp());
1242:       assertEquals(0, node0.getLineno());
1243:       assertFalse(node0.isFalse());
1244:       assertFalse(node0.isContinue());
1245:       assertFalse(node0.isObjectLit());
1246:       assertFalse(node0.isAnd());
1247:       assertFalse(node0.isCast());
1248:       
1249:       Iterable<Node> iterable0 = node2.children();
1250:       assertFalse(iterable0.contains(node1));
1251:       assertSame(node0, node2);
1252:       assertSame(node2, node0);
1253:       assertFalse(node0.equals((Object)node1));
1254:       assertFalse(node2.equals((Object)node1));
1255:       assertNotNull(iterable0);
1256:       assertFalse(node0.isInc());
1257:       assertFalse(node0.isThrow());
1258:       assertFalse(node0.isCase());
1259:       assertFalse(node0.isHook());
1260:       assertFalse(node0.isComma());
1261:       assertFalse(node0.isNE());
1262:       assertFalse(node0.isThis());
1263:       assertFalse(node0.isIn());
1264:       assertFalse(node0.isInstanceOf());
1265:       assertFalse(node0.isDelProp());
1266:       assertFalse(node0.isIf());
1267:       assertFalse(node0.isBreak());
1268:       assertFalse(node0.isScript());
1269:       assertFalse(node0.isTrue());
1270:       assertFalse(node0.isRegExp());
1271:       assertFalse(node0.isWith());
1272:       assertFalse(node0.isEmpty());
1273:       assertFalse(node0.isFor());
1274:       assertFalse(node0.isDefaultCase());
1275:       assertFalse(node0.hasOneChild());
1276:       assertFalse(node0.isTry());
1277:       assertFalse(node0.isParamList());
1278:       assertFalse(node0.isLabel());
1279:       assertFalse(node0.isGetterDef());
1280:       assertEquals(0, node0.getChildCount());
1281:       assertFalse(node0.isNumber());
1282:       assertFalse(node0.isStringKey());
1283:       assertFalse(node0.isArrayLit());
1284:       assertFalse(node0.isLabelName());
1285:       assertFalse(node0.isSwitch());
1286:       assertFalse(node0.isNew());
1287:       assertFalse(node0.isAdd());
1288:       assertFalse(node0.isBlock());
1289:       assertFalse(node0.isVar());
1290:       assertFalse(node0.isWhile());
1291:       assertFalse(node0.isAssignAdd());
1292:       assertFalse(node0.isDo());
1293:       assertTrue(node0.isString());
1294:       assertFalse(node0.isNull());
1295:       assertFalse(node0.isSetterDef());
1296:       assertFalse(node0.isReturn());
1297:       assertEquals(0, node0.getSourcePosition());
1298:       assertFalse(node0.hasChildren());
1299:       assertFalse(node0.isDec());
1300:       assertFalse(node0.isOr());
1301:       assertFalse(node0.isAssign());
1302:       assertFalse(node0.isTypeOf());
1303:       assertFalse(node0.hasMoreThanOneChild());
1304:       assertFalse(node0.isCatch());
1305:       assertFalse(node0.isGetElem());
1306:       assertFalse(node0.isCall());
1307:       assertFalse(node0.isName());
1308:       assertFalse(node0.isDebugger());
1309:       assertFalse(node0.isVoid());
1310:       assertEquals(0, node0.getCharno());
1311:       assertFalse(node0.isExprResult());
1312:       assertFalse(node0.isNot());
1313:       assertFalse(node0.isFunction());
1314:       assertEquals(40, node0.getType());
1315:       assertFalse(node0.isGetProp());
1316:       assertEquals(0, node0.getLineno());
1317:       assertFalse(node0.isFalse());
1318:       assertFalse(node0.isContinue());
1319:       assertFalse(node0.isObjectLit());
1320:       assertFalse(node0.isAnd());
1321:       assertFalse(node0.isCast());
1322:       assertFalse(node2.isGetElem());
1323:       assertFalse(node2.isLabelName());
1324:       assertFalse(node2.isAssign());
1325:       assertFalse(node2.hasChildren());
1326:       assertFalse(node2.hasOneChild());
1327:       assertFalse(node2.isOr());
1328:       assertEquals(0, node2.getCharno());
1329:       assertFalse(node2.isNumber());
1330:       assertFalse(node2.isScript());
1331:       assertFalse(node2.isDo());
1332:       assertFalse(node2.isNot());
1333:       assertFalse(node2.isAssignAdd());
1334:       assertFalse(node2.isAnd());
1335:       assertFalse(node2.isLabel());
1336:       assertFalse(node2.isCast());
1337:       assertFalse(node2.isContinue());
1338:       assertFalse(node2.isFalse());
1339:       assertFalse(node2.isStringKey());
1340:       assertFalse(node2.isThrow());
1341:       assertFalse(node2.isHook());
1342:       assertFalse(node2.isParamList());
1343:       assertTrue(node2.isString());
1344:       assertFalse(node2.isInc());
1345:       assertFalse(node2.isSetterDef());
1346:       assertFalse(node2.isCase());
1347:       assertFalse(node2.isBlock());
1348:       assertFalse(node2.isThis());
1349:       assertFalse(node2.isRegExp());
1350:       assertFalse(node2.isInstanceOf());
1351:       assertFalse(node2.isCatch());
1352:       assertFalse(node2.isWith());
1353:       assertFalse(node2.hasMoreThanOneChild());
1354:       assertFalse(node2.isEmpty());
1355:       assertFalse(node2.isFor());
1356:       assertFalse(node2.isArrayLit());
1357:       assertFalse(node2.isNE());
1358:       assertFalse(node2.isDelProp());
1359:       assertFalse(node2.isIf());
1360:       assertFalse(node2.isTry());
1361:       assertFalse(node2.isDebugger());
1362:       assertFalse(node2.isTrue());
1363:       assertFalse(node2.isGetterDef());
1364:       assertFalse(node2.isIn());
1365:       assertEquals(40, node2.getType());
1366:       assertFalse(node2.isSwitch());
1367:       assertFalse(node2.isDefaultCase());
1368:       assertEquals(0, node2.getLineno());
1369:       assertEquals(0, node2.getChildCount());
1370:       assertFalse(node2.isFunction());
1371:       assertFalse(node2.isName());
1372:       assertFalse(node2.isCall());
1373:       assertEquals(0, node2.getSourcePosition());
1374:       assertFalse(node2.isBreak());
1375:       assertFalse(node2.isNull());
1376:       assertFalse(node2.isVar());
1377:       assertFalse(node2.isAdd());
1378:       assertFalse(node2.isNew());
1379:       assertFalse(node2.isGetProp());
1380:       assertFalse(node2.isObjectLit());
1381:       assertFalse(node2.isWhile());
1382:       assertFalse(node2.isVoid());
1383:       assertFalse(node2.isExprResult());
1384:       assertFalse(node2.isComma());
1385:       assertFalse(node2.isReturn());
1386:       assertFalse(node2.isDec());
1387:       assertFalse(node2.isTypeOf());
1388:       
1389:       boolean boolean2 = node2.mayMutateArguments();
1390:       assertSame(node0, node2);
1391:       assertSame(node2, node0);
1392:       assertFalse(node0.equals((Object)node1));
1393:       assertFalse(node2.equals((Object)node1));
1394:       assertFalse(boolean2 == boolean0);
1395:       assertFalse(boolean2 == boolean1);
1396:       assertTrue(boolean2);
1397:       assertFalse(node0.isInc());
1398:       assertFalse(node0.isThrow());
1399:       assertFalse(node0.isCase());
1400:       assertFalse(node0.isHook());
1401:       assertFalse(node0.isComma());
1402:       assertFalse(node0.isNE());
1403:       assertFalse(node0.isThis());
1404:       assertFalse(node0.isIn());
1405:       assertFalse(node0.isInstanceOf());
1406:       assertFalse(node0.isDelProp());
1407:       assertFalse(node0.isIf());
1408:       assertFalse(node0.isBreak());
1409:       assertFalse(node0.isScript());
1410:       assertFalse(node0.isTrue());
1411:       assertFalse(node0.isRegExp());
1412:       assertFalse(node0.isWith());
1413:       assertFalse(node0.isEmpty());
1414:       assertFalse(node0.isFor());
1415:       assertFalse(node0.isDefaultCase());
1416:       assertFalse(node0.hasOneChild());
1417:       assertFalse(node0.isTry());
1418:       assertFalse(node0.isParamList());
1419:       assertFalse(node0.isLabel());
1420:       assertFalse(node0.isGetterDef());
1421:       assertEquals(0, node0.getChildCount());
1422:       assertFalse(node0.isNumber());
1423:       assertFalse(node0.isStringKey());
1424:       assertFalse(node0.isArrayLit());
1425:       assertFalse(node0.isLabelName());
1426:       assertFalse(node0.isSwitch());
1427:       assertFalse(node0.isNew());
1428:       assertFalse(node0.isAdd());
1429:       assertFalse(node0.isBlock());
1430:       assertFalse(node0.isVar());
1431:       assertFalse(node0.isWhile());
1432:       assertFalse(node0.isAssignAdd());
1433:       assertFalse(node0.isDo());
1434:       assertTrue(node0.isString());
1435:       assertFalse(node0.isNull());
1436:       assertFalse(node0.isSetterDef());
1437:       assertFalse(node0.isReturn());
1438:       assertEquals(0, node0.getSourcePosition());
1439:       assertFalse(node0.hasChildren());
1440:       assertFalse(node0.isDec());
1441:       assertFalse(node0.isOr());
1442:       assertFalse(node0.isAssign());
1443:       assertFalse(node0.isTypeOf());
1444:       assertFalse(node0.hasMoreThanOneChild());
1445:       assertFalse(node0.isCatch());
1446:       assertFalse(node0.isGetElem());
1447:       assertFalse(node0.isCall());
1448:       assertFalse(node0.isName());
1449:       assertFalse(node0.isDebugger());
1450:       assertFalse(node0.isVoid());
1451:       assertEquals(0, node0.getCharno());
1452:       assertFalse(node0.isExprResult());
1453:       assertFalse(node0.isNot());
1454:       assertFalse(node0.isFunction());
1455:       assertEquals(40, node0.getType());
1456:       assertFalse(node0.isGetProp());
1457:       assertEquals(0, node0.getLineno());
1458:       assertFalse(node0.isFalse());
1459:       assertFalse(node0.isContinue());
1460:       assertFalse(node0.isObjectLit());
1461:       assertFalse(node0.isAnd());
1462:       assertFalse(node0.isCast());
1463:       assertFalse(node2.isGetElem());
1464:       assertFalse(node2.isLabelName());
1465:       assertFalse(node2.isAssign());
1466:       assertFalse(node2.hasChildren());
1467:       assertFalse(node2.hasOneChild());
1468:       assertFalse(node2.isOr());
1469:       assertEquals(0, node2.getCharno());
1470:       assertFalse(node2.isNumber());
1471:       assertFalse(node2.isScript());
1472:       assertFalse(node2.isDo());
1473:       assertFalse(node2.isNot());
1474:       assertFalse(node2.isAssignAdd());
1475:       assertFalse(node2.isAnd());
1476:       assertFalse(node2.isLabel());
1477:       assertFalse(node2.isCast());
1478:       assertFalse(node2.isContinue());
1479:       assertFalse(node2.isFalse());
1480:       assertFalse(node2.isStringKey());
1481:       assertFalse(node2.isThrow());
1482:       assertFalse(node2.isHook());
1483:       assertFalse(node2.isParamList());
1484:       assertTrue(node2.isString());
1485:       assertFalse(node2.isInc());
1486:       assertFalse(node2.isSetterDef());
1487:       assertFalse(node2.isCase());
1488:       assertFalse(node2.isBlock());
1489:       assertFalse(node2.isThis());
1490:       assertFalse(node2.isRegExp());
1491:       assertFalse(node2.isInstanceOf());
1492:       assertFalse(node2.isCatch());
1493:       assertFalse(node2.isWith());
1494:       assertFalse(node2.hasMoreThanOneChild());
1495:       assertFalse(node2.isEmpty());
1496:       assertFalse(node2.isFor());
1497:       assertFalse(node2.isArrayLit());
1498:       assertFalse(node2.isNE());
1499:       assertFalse(node2.isDelProp());
1500:       assertFalse(node2.isIf());
1501:       assertFalse(node2.isTry());
1502:       assertFalse(node2.isDebugger());
1503:       assertFalse(node2.isTrue());
1504:       assertFalse(node2.isGetterDef());
1505:       assertFalse(node2.isIn());
1506:       assertEquals(40, node2.getType());
1507:       assertFalse(node2.isSwitch());
1508:       assertFalse(node2.isDefaultCase());
1509:       assertEquals(0, node2.getLineno());
1510:       assertEquals(0, node2.getChildCount());
1511:       assertFalse(node2.isFunction());
1512:       assertFalse(node2.isName());
1513:       assertFalse(node2.isCall());
1514:       assertEquals(0, node2.getSourcePosition());
1515:       assertFalse(node2.isBreak());
1516:       assertFalse(node2.isNull());
1517:       assertFalse(node2.isVar());
1518:       assertFalse(node2.isAdd());
1519:       assertFalse(node2.isNew());
1520:       assertFalse(node2.isGetProp());
1521:       assertFalse(node2.isObjectLit());
1522:       assertFalse(node2.isWhile());
1523:       assertFalse(node2.isVoid());
1524:       assertFalse(node2.isExprResult());
1525:       assertFalse(node2.isComma());
1526:       assertFalse(node2.isReturn());
1527:       assertFalse(node2.isDec());
1528:       assertFalse(node2.isTypeOf());
1529:       
1530:       boolean boolean3 = node0.isDo();
1531:       assertSame(node0, node2);
1532:       assertFalse(node0.equals((Object)node1));
1533:       assertFalse(boolean3 == boolean2);
1534:       assertTrue(boolean3 == boolean1);
1535:       assertTrue(boolean3 == boolean0);
1536:       assertFalse(boolean3);
1537:       assertFalse(node0.isInc());
1538:       assertFalse(node0.isThrow());
1539:       assertFalse(node0.isCase());
1540:       assertFalse(node0.isHook());
1541:       assertFalse(node0.isComma());
1542:       assertFalse(node0.isNE());
1543:       assertFalse(node0.isThis());
1544:       assertFalse(node0.isIn());
1545:       assertFalse(node0.isInstanceOf());
1546:       assertFalse(node0.isDelProp());
1547:       assertFalse(node0.isIf());
1548:       assertFalse(node0.isBreak());
1549:       assertFalse(node0.isScript());
1550:       assertFalse(node0.isTrue());
1551:       assertFalse(node0.isRegExp());
1552:       assertFalse(node0.isWith());
1553:       assertFalse(node0.isEmpty());
1554:       assertFalse(node0.isFor());
1555:       assertFalse(node0.isDefaultCase());
1556:       assertFalse(node0.hasOneChild());
1557:       assertFalse(node0.isTry());
1558:       assertFalse(node0.isParamList());
1559:       assertFalse(node0.isLabel());
1560:       assertFalse(node0.isGetterDef());
1561:       assertEquals(0, node0.getChildCount());
1562:       assertFalse(node0.isNumber());
1563:       assertFalse(node0.isStringKey());
1564:       assertFalse(node0.isArrayLit());
1565:       assertFalse(node0.isLabelName());
1566:       assertFalse(node0.isSwitch());
1567:       assertFalse(node0.isNew());
1568:       assertFalse(node0.isAdd());
1569:       assertFalse(node0.isBlock());
1570:       assertFalse(node0.isVar());
1571:       assertFalse(node0.isWhile());
1572:       assertFalse(node0.isAssignAdd());
1573:       assertFalse(node0.isDo());
1574:       assertTrue(node0.isString());
1575:       assertFalse(node0.isNull());
1576:       assertFalse(node0.isSetterDef());
1577:       assertFalse(node0.isReturn());
1578:       assertEquals(0, node0.getSourcePosition());
1579:       assertFalse(node0.hasChildren());
1580:       assertFalse(node0.isDec());
1581:       assertFalse(node0.isOr());
1582:       assertFalse(node0.isAssign());
1583:       assertFalse(node0.isTypeOf());
1584:       assertFalse(node0.hasMoreThanOneChild());
1585:       assertFalse(node0.isCatch());
1586:       assertFalse(node0.isGetElem());
1587:       assertFalse(node0.isCall());
1588:       assertFalse(node0.isName());
1589:       assertFalse(node0.isDebugger());
1590:       assertFalse(node0.isVoid());
1591:       assertEquals(0, node0.getCharno());
1592:       assertFalse(node0.isExprResult());
1593:       assertFalse(node0.isNot());
1594:       assertFalse(node0.isFunction());
1595:       assertEquals(40, node0.getType());
1596:       assertFalse(node0.isGetProp());
1597:       assertEquals(0, node0.getLineno());
1598:       assertFalse(node0.isFalse());
1599:       assertFalse(node0.isContinue());
1600:       assertFalse(node0.isObjectLit());
1601:       assertFalse(node0.isAnd());
1602:       assertFalse(node0.isCast());
1603:       
1604:       boolean boolean4 = node2.isNot();
1605:       assertSame(node0, node2);
1606:       assertSame(node2, node0);
1607:       assertFalse(node0.equals((Object)node1));
1608:       assertFalse(node2.equals((Object)node1));
1609:       assertTrue(boolean4 == boolean0);
1610:       assertTrue(boolean4 == boolean3);
1611:       assertFalse(boolean4 == boolean2);
1612:       assertTrue(boolean4 == boolean1);
1613:       assertFalse(boolean4);
1614:       assertFalse(node0.isInc());
1615:       assertFalse(node0.isThrow());
1616:       assertFalse(node0.isCase());
1617:       assertFalse(node0.isHook());
1618:       assertFalse(node0.isComma());
1619:       assertFalse(node0.isNE());
1620:       assertFalse(node0.isThis());
1621:       assertFalse(node0.isIn());
1622:       assertFalse(node0.isInstanceOf());
1623:       assertFalse(node0.isDelProp());
1624:       assertFalse(node0.isIf());
1625:       assertFalse(node0.isBreak());
1626:       assertFalse(node0.isScript());
1627:       assertFalse(node0.isTrue());
1628:       assertFalse(node0.isRegExp());
1629:       assertFalse(node0.isWith());
1630:       assertFalse(node0.isEmpty());
1631:       assertFalse(node0.isFor());
1632:       assertFalse(node0.isDefaultCase());
1633:       assertFalse(node0.hasOneChild());
1634:       assertFalse(node0.isTry());
1635:       assertFalse(node0.isParamList());
1636:       assertFalse(node0.isLabel());
1637:       assertFalse(node0.isGetterDef());
1638:       assertEquals(0, node0.getChildCount());
1639:       assertFalse(node0.isNumber());
1640:       assertFalse(node0.isStringKey());
1641:       assertFalse(node0.isArrayLit());
1642:       assertFalse(node0.isLabelName());
1643:       assertFalse(node0.isSwitch());
1644:       assertFalse(node0.isNew());
1645:       assertFalse(node0.isAdd());
1646:       assertFalse(node0.isBlock());
1647:       assertFalse(node0.isVar());
1648:       assertFalse(node0.isWhile());
1649:       assertFalse(node0.isAssignAdd());
1650:       assertFalse(node0.isDo());
1651:       assertTrue(node0.isString());
1652:       assertFalse(node0.isNull());
1653:       assertFalse(node0.isSetterDef());
1654:       assertFalse(node0.isReturn());
1655:       assertEquals(0, node0.getSourcePosition());
1656:       assertFalse(node0.hasChildren());
1657:       assertFalse(node0.isDec());
1658:       assertFalse(node0.isOr());
1659:       assertFalse(node0.isAssign());
1660:       assertFalse(node0.isTypeOf());
1661:       assertFalse(node0.hasMoreThanOneChild());
1662:       assertFalse(node0.isCatch());
1663:       assertFalse(node0.isGetElem());
1664:       assertFalse(node0.isCall());
1665:       assertFalse(node0.isName());
1666:       assertFalse(node0.isDebugger());
1667:       assertFalse(node0.isVoid());
1668:       assertEquals(0, node0.getCharno());
1669:       assertFalse(node0.isExprResult());
1670:       assertFalse(node0.isNot());
1671:       assertFalse(node0.isFunction());
1672:       assertEquals(40, node0.getType());
1673:       assertFalse(node0.isGetProp());
1674:       assertEquals(0, node0.getLineno());
1675:       assertFalse(node0.isFalse());
1676:       assertFalse(node0.isContinue());
1677:       assertFalse(node0.isObjectLit());
1678:       assertFalse(node0.isAnd());
1679:       assertFalse(node0.isCast());
1680:       assertFalse(node2.isGetElem());
1681:       assertFalse(node2.isLabelName());
1682:       assertFalse(node2.isAssign());
1683:       assertFalse(node2.hasChildren());
1684:       assertFalse(node2.hasOneChild());
1685:       assertFalse(node2.isOr());
1686:       assertEquals(0, node2.getCharno());
1687:       assertFalse(node2.isNumber());
1688:       assertFalse(node2.isScript());
1689:       assertFalse(node2.isDo());
1690:       assertFalse(node2.isNot());
1691:       assertFalse(node2.isAssignAdd());
1692:       assertFalse(node2.isAnd());
1693:       assertFalse(node2.isLabel());
1694:       assertFalse(node2.isCast());
1695:       assertFalse(node2.isContinue());
1696:       assertFalse(node2.isFalse());
1697:       assertFalse(node2.isStringKey());
1698:       assertFalse(node2.isThrow());
1699:       assertFalse(node2.isHook());
1700:       assertFalse(node2.isParamList());
1701:       assertTrue(node2.isString());
1702:       assertFalse(node2.isInc());
1703:       assertFalse(node2.isSetterDef());
1704:       assertFalse(node2.isCase());
1705:       assertFalse(node2.isBlock());
1706:       assertFalse(node2.isThis());
1707:       assertFalse(node2.isRegExp());
1708:       assertFalse(node2.isInstanceOf());
1709:       assertFalse(node2.isCatch());
1710:       assertFalse(node2.isWith());
1711:       assertFalse(node2.hasMoreThanOneChild());
1712:       assertFalse(node2.isEmpty());
1713:       assertFalse(node2.isFor());
1714:       assertFalse(node2.isArrayLit());
1715:       assertFalse(node2.isNE());
1716:       assertFalse(node2.isDelProp());
1717:       assertFalse(node2.isIf());
1718:       assertFalse(node2.isTry());
1719:       assertFalse(node2.isDebugger());
1720:       assertFalse(node2.isTrue());
1721:       assertFalse(node2.isGetterDef());
1722:       assertFalse(node2.isIn());
1723:       assertEquals(40, node2.getType());
1724:       assertFalse(node2.isSwitch());
1725:       assertFalse(node2.isDefaultCase());
1726:       assertEquals(0, node2.getLineno());
1727:       assertEquals(0, node2.getChildCount());
1728:       assertFalse(node2.isFunction());
1729:       assertFalse(node2.isName());
1730:       assertFalse(node2.isCall());
1731:       assertEquals(0, node2.getSourcePosition());
1732:       assertFalse(node2.isBreak());
1733:       assertFalse(node2.isNull());
1734:       assertFalse(node2.isVar());
1735:       assertFalse(node2.isAdd());
1736:       assertFalse(node2.isNew());
1737:       assertFalse(node2.isGetProp());
1738:       assertFalse(node2.isObjectLit());
1739:       assertFalse(node2.isWhile());
1740:       assertFalse(node2.isVoid());
1741:       assertFalse(node2.isExprResult());
1742:       assertFalse(node2.isComma());
1743:       assertFalse(node2.isReturn());
1744:       assertFalse(node2.isDec());
1745:       assertFalse(node2.isTypeOf());
1746:       
1747:       boolean boolean5 = node2.isName();
1748:       assertSame(node0, node2);
1749:       assertSame(node2, node0);
1750:       assertFalse(node0.equals((Object)node1));
1751:       assertFalse(node2.equals((Object)node1));
1752:       assertFalse(boolean5 == boolean2);
1753:       assertTrue(boolean5 == boolean0);
1754:       assertTrue(boolean5 == boolean1);
1755:       assertTrue(boolean5 == boolean3);
1756:       assertTrue(boolean5 == boolean4);
1757:       assertFalse(boolean5);
1758:       assertFalse(node0.isInc());
1759:       assertFalse(node0.isThrow());
1760:       assertFalse(node0.isCase());
1761:       assertFalse(node0.isHook());
1762:       assertFalse(node0.isComma());
1763:       assertFalse(node0.isNE());
1764:       assertFalse(node0.isThis());
1765:       assertFalse(node0.isIn());
1766:       assertFalse(node0.isInstanceOf());
1767:       assertFalse(node0.isDelProp());
1768:       assertFalse(node0.isIf());
1769:       assertFalse(node0.isBreak());
1770:       assertFalse(node0.isScript());
1771:       assertFalse(node0.isTrue());
1772:       assertFalse(node0.isRegExp());
1773:       assertFalse(node0.isWith());
1774:       assertFalse(node0.isEmpty());
1775:       assertFalse(node0.isFor());
1776:       assertFalse(node0.isDefaultCase());
1777:       assertFalse(node0.hasOneChild());
1778:       assertFalse(node0.isTry());
1779:       assertFalse(node0.isParamList());
1780:       assertFalse(node0.isLabel());
1781:       assertFalse(node0.isGetterDef());
1782:       assertEquals(0, node0.getChildCount());
1783:       assertFalse(node0.isNumber());
1784:       assertFalse(node0.isStringKey());
1785:       assertFalse(node0.isArrayLit());
1786:       assertFalse(node0.isLabelName());
1787:       assertFalse(node0.isSwitch());
1788:       assertFalse(node0.isNew());
1789:       assertFalse(node0.isAdd());
1790:       assertFalse(node0.isBlock());
1791:       assertFalse(node0.isVar());
1792:       assertFalse(node0.isWhile());
1793:       assertFalse(node0.isAssignAdd());
1794:       assertFalse(node0.isDo());
1795:       assertTrue(node0.isString());
1796:       assertFalse(node0.isNull());
1797:       assertFalse(node0.isSetterDef());
1798:       assertFalse(node0.isReturn());
1799:       assertEquals(0, node0.getSourcePosition());
1800:       assertFalse(node0.hasChildren());
1801:       assertFalse(node0.isDec());
1802:       assertFalse(node0.isOr());
1803:       assertFalse(node0.isAssign());
1804:       assertFalse(node0.isTypeOf());
1805:       assertFalse(node0.hasMoreThanOneChild());
1806:       assertFalse(node0.isCatch());
1807:       assertFalse(node0.isGetElem());
1808:       assertFalse(node0.isCall());
1809:       assertFalse(node0.isName());
1810:       assertFalse(node0.isDebugger());
1811:       assertFalse(node0.isVoid());
1812:       assertEquals(0, node0.getCharno());
1813:       assertFalse(node0.isExprResult());
1814:       assertFalse(node0.isNot());
1815:       assertFalse(node0.isFunction());
1816:       assertEquals(40, node0.getType());
1817:       assertFalse(node0.isGetProp());
1818:       assertEquals(0, node0.getLineno());
1819:       assertFalse(node0.isFalse());
1820:       assertFalse(node0.isContinue());
1821:       assertFalse(node0.isObjectLit());
1822:       assertFalse(node0.isAnd());
1823:       assertFalse(node0.isCast());
1824:       assertFalse(node2.isGetElem());
1825:       assertFalse(node2.isLabelName());
1826:       assertFalse(node2.isAssign());
1827:       assertFalse(node2.hasChildren());
1828:       assertFalse(node2.hasOneChild());
1829:       assertFalse(node2.isOr());
1830:       assertEquals(0, node2.getCharno());
1831:       assertFalse(node2.isNumber());
1832:       assertFalse(node2.isScript());
1833:       assertFalse(node2.isDo());
1834:       assertFalse(node2.isNot());
1835:       assertFalse(node2.isAssignAdd());
1836:       assertFalse(node2.isAnd());
1837:       assertFalse(node2.isLabel());
1838:       assertFalse(node2.isCast());
1839:       assertFalse(node2.isContinue());
1840:       assertFalse(node2.isFalse());
1841:       assertFalse(node2.isStringKey());
1842:       assertFalse(node2.isThrow());
1843:       assertFalse(node2.isHook());
1844:       assertFalse(node2.isParamList());
1845:       assertTrue(node2.isString());
1846:       assertFalse(node2.isInc());
1847:       assertFalse(node2.isSetterDef());
1848:       assertFalse(node2.isCase());
1849:       assertFalse(node2.isBlock());
1850:       assertFalse(node2.isThis());
1851:       assertFalse(node2.isRegExp());
1852:       assertFalse(node2.isInstanceOf());
1853:       assertFalse(node2.isCatch());
1854:       assertFalse(node2.isWith());
1855:       assertFalse(node2.hasMoreThanOneChild());
1856:       assertFalse(node2.isEmpty());
1857:       assertFalse(node2.isFor());
1858:       assertFalse(node2.isArrayLit());
1859:       assertFalse(node2.isNE());
1860:       assertFalse(node2.isDelProp());
1861:       assertFalse(node2.isIf());
1862:       assertFalse(node2.isTry());
1863:       assertFalse(node2.isDebugger());
1864:       assertFalse(node2.isTrue());
1865:       assertFalse(node2.isGetterDef());
1866:       assertFalse(node2.isIn());
1867:       assertEquals(40, node2.getType());
1868:       assertFalse(node2.isSwitch());
1869:       assertFalse(node2.isDefaultCase());
1870:       assertEquals(0, node2.getLineno());
1871:       assertEquals(0, node2.getChildCount());
1872:       assertFalse(node2.isFunction());
1873:       assertFalse(node2.isName());
1874:       assertFalse(node2.isCall());
1875:       assertEquals(0, node2.getSourcePosition());
1876:       assertFalse(node2.isBreak());
1877:       assertFalse(node2.isNull());
1878:       assertFalse(node2.isVar());
1879:       assertFalse(node2.isAdd());
1880:       assertFalse(node2.isNew());
1881:       assertFalse(node2.isGetProp());
1882:       assertFalse(node2.isObjectLit());
1883:       assertFalse(node2.isWhile());
1884:       assertFalse(node2.isVoid());
1885:       assertFalse(node2.isExprResult());
1886:       assertFalse(node2.isComma());
1887:       assertFalse(node2.isReturn());
1888:       assertFalse(node2.isDec());
1889:       assertFalse(node2.isTypeOf());
1890:       
1891:       int int1 = node0.getLength();
1892:       assertSame(node0, node2);
1893:       assertFalse(node0.equals((Object)node1));
1894:       assertFalse(int1 == int0);
1895:       assertEquals(0, int1);
1896:       assertFalse(node0.isInc());
1897:       assertFalse(node0.isThrow());
1898:       assertFalse(node0.isCase());
1899:       assertFalse(node0.isHook());
1900:       assertFalse(node0.isComma());
1901:       assertFalse(node0.isNE());
1902:       assertFalse(node0.isThis());
1903:       assertFalse(node0.isIn());
1904:       assertFalse(node0.isInstanceOf());
1905:       assertFalse(node0.isDelProp());
1906:       assertFalse(node0.isIf());
1907:       assertFalse(node0.isBreak());
1908:       assertFalse(node0.isScript());
1909:       assertFalse(node0.isTrue());
1910:       assertFalse(node0.isRegExp());
1911:       assertFalse(node0.isWith());
1912:       assertFalse(node0.isEmpty());
1913:       assertFalse(node0.isFor());
1914:       assertFalse(node0.isDefaultCase());
1915:       assertFalse(node0.hasOneChild());
1916:       assertFalse(node0.isTry());
1917:       assertFalse(node0.isParamList());
1918:       assertFalse(node0.isLabel());
1919:       assertFalse(node0.isGetterDef());
1920:       assertEquals(0, node0.getChildCount());
1921:       assertFalse(node0.isNumber());
1922:       assertFalse(node0.isStringKey());
1923:       assertFalse(node0.isArrayLit());
1924:       assertFalse(node0.isLabelName());
1925:       assertFalse(node0.isSwitch());
1926:       assertFalse(node0.isNew());
1927:       assertFalse(node0.isAdd());
1928:       assertFalse(node0.isBlock());
1929:       assertFalse(node0.isVar());
1930:       assertFalse(node0.isWhile());
1931:       assertFalse(node0.isAssignAdd());
1932:       assertFalse(node0.isDo());
1933:       assertTrue(node0.isString());
1934:       assertFalse(node0.isNull());
1935:       assertFalse(node0.isSetterDef());
1936:       assertFalse(node0.isReturn());
1937:       assertEquals(0, node0.getSourcePosition());
1938:       assertFalse(node0.hasChildren());
1939:       assertFalse(node0.isDec());
1940:       assertFalse(node0.isOr());
1941:       assertFalse(node0.isAssign());
1942:       assertFalse(node0.isTypeOf());
1943:       assertFalse(node0.hasMoreThanOneChild());
1944:       assertFalse(node0.isCatch());
1945:       assertFalse(node0.isGetElem());
1946:       assertFalse(node0.isCall());
1947:       assertFalse(node0.isName());
1948:       assertFalse(node0.isDebugger());
1949:       assertFalse(node0.isVoid());
1950:       assertEquals(0, node0.getCharno());
1951:       assertFalse(node0.isExprResult());
1952:       assertFalse(node0.isNot());
1953:       assertFalse(node0.isFunction());
1954:       assertEquals(40, node0.getType());
1955:       assertFalse(node0.isGetProp());
1956:       assertEquals(0, node0.getLineno());
1957:       assertFalse(node0.isFalse());
1958:       assertFalse(node0.isContinue());
1959:       assertFalse(node0.isObjectLit());
1960:       assertFalse(node0.isAnd());
1961:       assertFalse(node0.isCast());
1962:       
1963:       boolean boolean6 = node2.isGetterDef();
1964:       assertSame(node0, node2);
1965:       assertSame(node2, node0);
1966:       assertFalse(node0.equals((Object)node1));
1967:       assertFalse(node2.equals((Object)node1));
1968:       assertTrue(boolean6 == boolean4);
1969:       assertTrue(boolean6 == boolean1);
1970:       assertTrue(boolean6 == boolean3);
1971:       assertFalse(boolean6 == boolean2);
1972:       assertTrue(boolean6 == boolean0);
1973:       assertTrue(boolean6 == boolean5);
1974:       assertFalse(boolean6);
1975:       assertFalse(node0.isInc());
1976:       assertFalse(node0.isThrow());
1977:       assertFalse(node0.isCase());
1978:       assertFalse(node0.isHook());
1979:       assertFalse(node0.isComma());
1980:       assertFalse(node0.isNE());
1981:       assertFalse(node0.isThis());
1982:       assertFalse(node0.isIn());
1983:       assertFalse(node0.isInstanceOf());
1984:       assertFalse(node0.isDelProp());
1985:       assertFalse(node0.isIf());
1986:       assertFalse(node0.isBreak());
1987:       assertFalse(node0.isScript());
1988:       assertFalse(node0.isTrue());
1989:       assertFalse(node0.isRegExp());
1990:       assertFalse(node0.isWith());
1991:       assertFalse(node0.isEmpty());
1992:       assertFalse(node0.isFor());
1993:       assertFalse(node0.isDefaultCase());
1994:       assertFalse(node0.hasOneChild());
1995:       assertFalse(node0.isTry());
1996:       assertFalse(node0.isParamList());
1997:       assertFalse(node0.isLabel());
1998:       assertFalse(node0.isGetterDef());
1999:       assertEquals(0, node0.getChildCount());
2000:       assertFalse(node0.isNumber());
2001:       assertFalse(node0.isStringKey());
2002:       assertFalse(node0.isArrayLit());
2003:       assertFalse(node0.isLabelName());
2004:       assertFalse(node0.isSwitch());
2005:       assertFalse(node0.isNew());
2006:       assertFalse(node0.isAdd());
2007:       assertFalse(node0.isBlock());
2008:       assertFalse(node0.isVar());
2009:       assertFalse(node0.isWhile());
2010:       assertFalse(node0.isAssignAdd());
2011:       assertFalse(node0.isDo());
2012:       assertTrue(node0.isString());
2013:       assertFalse(node0.isNull());
2014:       assertFalse(node0.isSetterDef());
2015:       assertFalse(node0.isReturn());
2016:       assertEquals(0, node0.getSourcePosition());
2017:       assertFalse(node0.hasChildren());
2018:       assertFalse(node0.isDec());
2019:       assertFalse(node0.isOr());
2020:       assertFalse(node0.isAssign());
2021:       assertFalse(node0.isTypeOf());
2022:       assertFalse(node0.hasMoreThanOneChild());
2023:       assertFalse(node0.isCatch());
2024:       assertFalse(node0.isGetElem());
2025:       assertFalse(node0.isCall());
2026:       assertFalse(node0.isName());
2027:       assertFalse(node0.isDebugger());
2028:       assertFalse(node0.isVoid());
2029:       assertEquals(0, node0.getCharno());
2030:       assertFalse(node0.isExprResult());
2031:       assertFalse(node0.isNot());
2032:       assertFalse(node0.isFunction());
2033:       assertEquals(40, node0.getType());
2034:       assertFalse(node0.isGetProp());
2035:       assertEquals(0, node0.getLineno());
2036:       assertFalse(node0.isFalse());
2037:       assertFalse(node0.isContinue());
2038:       assertFalse(node0.isObjectLit());
2039:       assertFalse(node0.isAnd());
2040:       assertFalse(node0.isCast());
2041:       assertFalse(node2.isGetElem());
2042:       assertFalse(node2.isLabelName());
2043:       assertFalse(node2.isAssign());
2044:       assertFalse(node2.hasChildren());
2045:       assertFalse(node2.hasOneChild());
2046:       assertFalse(node2.isOr());
2047:       assertEquals(0, node2.getCharno());
2048:       assertFalse(node2.isNumber());
2049:       assertFalse(node2.isScript());
2050:       assertFalse(node2.isDo());
2051:       assertFalse(node2.isNot());
2052:       assertFalse(node2.isAssignAdd());
2053:       assertFalse(node2.isAnd());
2054:       assertFalse(node2.isLabel());
2055:       assertFalse(node2.isCast());
2056:       assertFalse(node2.isContinue());
2057:       assertFalse(node2.isFalse());
2058:       assertFalse(node2.isStringKey());
2059:       assertFalse(node2.isThrow());
2060:       assertFalse(node2.isHook());
2061:       assertFalse(node2.isParamList());
2062:       assertTrue(node2.isString());
2063:       assertFalse(node2.isInc());
2064:       assertFalse(node2.isSetterDef());
2065:       assertFalse(node2.isCase());
2066:       assertFalse(node2.isBlock());
2067:       assertFalse(node2.isThis());
2068:       assertFalse(node2.isRegExp());
2069:       assertFalse(node2.isInstanceOf());
2070:       assertFalse(node2.isCatch());
2071:       assertFalse(node2.isWith());
2072:       assertFalse(node2.hasMoreThanOneChild());
2073:       assertFalse(node2.isEmpty());
2074:       assertFalse(node2.isFor());
2075:       assertFalse(node2.isArrayLit());
2076:       assertFalse(node2.isNE());
2077:       assertFalse(node2.isDelProp());
2078:       assertFalse(node2.isIf());
2079:       assertFalse(node2.isTry());
2080:       assertFalse(node2.isDebugger());
2081:       assertFalse(node2.isTrue());
2082:       assertFalse(node2.isGetterDef());
2083:       assertFalse(node2.isIn());
2084:       assertEquals(40, node2.getType());
2085:       assertFalse(node2.isSwitch());
2086:       assertFalse(node2.isDefaultCase());
2087:       assertEquals(0, node2.getLineno());
2088:       assertEquals(0, node2.getChildCount());
2089:       assertFalse(node2.isFunction());
2090:       assertFalse(node2.isName());
2091:       assertFalse(node2.isCall());
2092:       assertEquals(0, node2.getSourcePosition());
2093:       assertFalse(node2.isBreak());
2094:       assertFalse(node2.isNull());
2095:       assertFalse(node2.isVar());
2096:       assertFalse(node2.isAdd());
2097:       assertFalse(node2.isNew());
2098:       assertFalse(node2.isGetProp());
2099:       assertFalse(node2.isObjectLit());
2100:       assertFalse(node2.isWhile());
2101:       assertFalse(node2.isVoid());
2102:       assertFalse(node2.isExprResult());
2103:       assertFalse(node2.isComma());
2104:       assertFalse(node2.isReturn());
2105:       assertFalse(node2.isDec());
2106:       assertFalse(node2.isTypeOf());
2107:       
2108:       int int2 = node0.getSideEffectFlags();
2109:       assertSame(node0, node2);
2110:       assertTrue(int2 == int1);
2111:       assertFalse(int2 == int0);
2112:       assertFalse(node0.equals((Object)node1));
2113:       assertEquals(0, int2);
2114:       assertFalse(node0.isInc());
2115:       assertFalse(node0.isThrow());
2116:       assertFalse(node0.isCase());
2117:       assertFalse(node0.isHook());
2118:       assertFalse(node0.isComma());
2119:       assertFalse(node0.isNE());
2120:       assertFalse(node0.isThis());
2121:       assertFalse(node0.isIn());
2122:       assertFalse(node0.isInstanceOf());
2123:       assertFalse(node0.isDelProp());
2124:       assertFalse(node0.isIf());
2125:       assertFalse(node0.isBreak());
2126:       assertFalse(node0.isScript());
2127:       assertFalse(node0.isTrue());
2128:       assertFalse(node0.isRegExp());
2129:       assertFalse(node0.isWith());
2130:       assertFalse(node0.isEmpty());
2131:       assertFalse(node0.isFor());
2132:       assertFalse(node0.isDefaultCase());
2133:       assertFalse(node0.hasOneChild());
2134:       assertFalse(node0.isTry());
2135:       assertFalse(node0.isParamList());
2136:       assertFalse(node0.isLabel());
2137:       assertFalse(node0.isGetterDef());
2138:       assertEquals(0, node0.getChildCount());
2139:       assertFalse(node0.isNumber());
2140:       assertFalse(node0.isStringKey());
2141:       assertFalse(node0.isArrayLit());
2142:       assertFalse(node0.isLabelName());
2143:       assertFalse(node0.isSwitch());
2144:       assertFalse(node0.isNew());
2145:       assertFalse(node0.isAdd());
2146:       assertFalse(node0.isBlock());
2147:       assertFalse(node0.isVar());
2148:       assertFalse(node0.isWhile());
2149:       assertFalse(node0.isAssignAdd());
2150:       assertFalse(node0.isDo());
2151:       assertTrue(node0.isString());
2152:       assertFalse(node0.isNull());
2153:       assertFalse(node0.isSetterDef());
2154:       assertFalse(node0.isReturn());
2155:       assertEquals(0, node0.getSourcePosition());
2156:       assertFalse(node0.hasChildren());
2157:       assertFalse(node0.isDec());
2158:       assertFalse(node0.isOr());
2159:       assertFalse(node0.isAssign());
2160:       assertFalse(node0.isTypeOf());
2161:       assertFalse(node0.hasMoreThanOneChild());
2162:       assertFalse(node0.isCatch());
2163:       assertFalse(node0.isGetElem());
2164:       assertFalse(node0.isCall());
2165:       assertFalse(node0.isName());
2166:       assertFalse(node0.isDebugger());
2167:       assertFalse(node0.isVoid());
2168:       assertEquals(0, node0.getCharno());
2169:       assertFalse(node0.isExprResult());
2170:       assertFalse(node0.isNot());
2171:       assertFalse(node0.isFunction());
2172:       assertEquals(40, node0.getType());
2173:       assertFalse(node0.isGetProp());
2174:       assertEquals(0, node0.getLineno());
2175:       assertFalse(node0.isFalse());
2176:       assertFalse(node0.isContinue());
2177:       assertFalse(node0.isObjectLit());
2178:       assertFalse(node0.isAnd());
2179:       assertFalse(node0.isCast());
2180:       
2181:       Node node3 = node2.cloneTree();
2182:       assertSame(node0, node2);
2183:       assertNotSame(node0, node3);
2184:       assertNotSame(node3, node2);
2185:       assertNotSame(node3, node0);
2186:       assertNotSame(node2, node3);
2187:       assertSame(node2, node0);
2188:       assertFalse(node0.equals((Object)node1));
2189:       assertFalse(node3.equals((Object)node1));
2190:       assertFalse(node3.equals((Object)node2));
2191:       assertFalse(node3.equals((Object)node0));
2192:       assertFalse(node2.equals((Object)node1));
2193:       assertNotNull(node3);
2194:       assertFalse(node0.isInc());
2195:       assertFalse(node0.isThrow());
2196:       assertFalse(node0.isCase());
2197:       assertFalse(node0.isHook());
2198:       assertFalse(node0.isComma());
2199:       assertFalse(node0.isNE());
2200:       assertFalse(node0.isThis());
2201:       assertFalse(node0.isIn());
2202:       assertFalse(node0.isInstanceOf());
2203:       assertFalse(node0.isDelProp());
2204:       assertFalse(node0.isIf());
2205:       assertFalse(node0.isBreak());
2206:       assertFalse(node0.isScript());
2207:       assertFalse(node0.isTrue());
2208:       assertFalse(node0.isRegExp());
2209:       assertFalse(node0.isWith());
2210:       assertFalse(node0.isEmpty());
2211:       assertFalse(node0.isFor());
2212:       assertFalse(node0.isDefaultCase());
2213:       assertFalse(node0.hasOneChild());
2214:       assertFalse(node0.isTry());
2215:       assertFalse(node0.isParamList());
2216:       assertFalse(node0.isLabel());
2217:       assertFalse(node0.isGetterDef());
2218:       assertEquals(0, node0.getChildCount());
2219:       assertFalse(node0.isNumber());
2220:       assertFalse(node0.isStringKey());
2221:       assertFalse(node0.isArrayLit());
2222:       assertFalse(node0.isLabelName());
2223:       assertFalse(node0.isSwitch());
2224:       assertFalse(node0.isNew());
2225:       assertFalse(node0.isAdd());
2226:       assertFalse(node0.isBlock());
2227:       assertFalse(node0.isVar());
2228:       assertFalse(node0.isWhile());
2229:       assertFalse(node0.isAssignAdd());
2230:       assertFalse(node0.isDo());
2231:       assertTrue(node0.isString());
2232:       assertFalse(node0.isNull());
2233:       assertFalse(node0.isSetterDef());
2234:       assertFalse(node0.isReturn());
2235:       assertEquals(0, node0.getSourcePosition());
2236:       assertFalse(node0.hasChildren());
2237:       assertFalse(node0.isDec());
2238:       assertFalse(node0.isOr());
2239:       assertFalse(node0.isAssign());
2240:       assertFalse(node0.isTypeOf());
2241:       assertFalse(node0.hasMoreThanOneChild());
2242:       assertFalse(node0.isCatch());
2243:       assertFalse(node0.isGetElem());
2244:       assertFalse(node0.isCall());
2245:       assertFalse(node0.isName());
2246:       assertFalse(node0.isDebugger());
2247:       assertFalse(node0.isVoid());
2248:       assertEquals(0, node0.getCharno());
2249:       assertFalse(node0.isExprResult());
2250:       assertFalse(node0.isNot());
2251:       assertFalse(node0.isFunction());
2252:       assertEquals(40, node0.getType());
2253:       assertFalse(node0.isGetProp());
2254:       assertEquals(0, node0.getLineno());
2255:       assertFalse(node0.isFalse());
2256:       assertFalse(node0.isContinue());
2257:       assertFalse(node0.isObjectLit());
2258:       assertFalse(node0.isAnd());
2259:       assertFalse(node0.isCast());
2260:       assertFalse(node3.hasMoreThanOneChild());
2261:       assertFalse(node3.isContinue());
2262:       assertFalse(node3.isAssignAdd());
2263:       assertFalse(node3.isDo());
2264:       assertFalse(node3.isWhile());
2265:       assertFalse(node3.hasChildren());
2266:       assertFalse(node3.isBlock());
2267:       assertFalse(node3.isAssign());
2268:       assertFalse(node3.isReturn());
2269:       assertFalse(node3.isLabel());
2270:       assertFalse(node3.isDec());
2271:       assertFalse(node3.isTypeOf());
2272:       assertFalse(node3.isVar());
2273:       assertFalse(node3.isGetElem());
2274:       assertFalse(node3.isCall());
2275:       assertFalse(node3.isNew());
2276:       assertFalse(node3.isName());
2277:       assertEquals(0, node3.getCharno());
2278:       assertFalse(node3.isSetterDef());
2279:       assertEquals(0, node3.getSourcePosition());
2280:       assertFalse(node3.isNull());
2281:       assertFalse(node3.isAdd());
2282:       assertFalse(node3.isOr());
2283:       assertFalse(node3.isAnd());
2284:       assertEquals(40, node3.getType());
2285:       assertEquals(0, node3.getLineno());
2286:       assertFalse(node3.isComma());
2287:       assertFalse(node3.isBreak());
2288:       assertFalse(node3.isExprResult());
2289:       assertFalse(node3.isFalse());
2290:       assertFalse(node3.isFunction());
2291:       assertFalse(node3.isCast());
2292:       assertFalse(node3.isDebugger());
2293:       assertFalse(node3.isGetProp());
2294:       assertFalse(node3.isNot());
2295:       assertFalse(node3.isObjectLit());
2296:       assertFalse(node3.isCase());
2297:       assertFalse(node3.isThrow());
2298:       assertFalse(node3.isEmpty());
2299:       assertFalse(node3.isIf());
2300:       assertFalse(node3.isDelProp());
2301:       assertFalse(node3.isVoid());
2302:       assertFalse(node3.isNE());
2303:       assertFalse(node3.isInc());
2304:       assertFalse(node3.isTrue());
2305:       assertFalse(node3.isIn());
2306:       assertFalse(node3.isCatch());
2307:       assertFalse(node3.isInstanceOf());
2308:       assertFalse(node3.isDefaultCase());
2309:       assertFalse(node3.isThis());
2310:       assertFalse(node3.isWith());
2311:       assertEquals(0, node3.getChildCount());
2312:       assertFalse(node3.isRegExp());
2313:       assertFalse(node3.isArrayLit());
2314:       assertFalse(node3.isStringKey());
2315:       assertFalse(node3.isHook());
2316:       assertFalse(node3.isFor());
2317:       assertFalse(node3.isLabelName());
2318:       assertFalse(node3.isTry());
2319:       assertFalse(node3.hasOneChild());
2320:       assertTrue(node3.isString());
2321:       assertFalse(node3.isSwitch());
2322:       assertFalse(node3.isParamList());
2323:       assertFalse(node3.isScript());
2324:       assertFalse(node3.isNumber());
2325:       assertFalse(node3.isGetterDef());
2326:       assertFalse(node2.isGetElem());
2327:       assertFalse(node2.isLabelName());
2328:       assertFalse(node2.isAssign());
2329:       assertFalse(node2.hasChildren());
2330:       assertFalse(node2.hasOneChild());
2331:       assertFalse(node2.isOr());
2332:       assertEquals(0, node2.getCharno());
2333:       assertFalse(node2.isNumber());
2334:       assertFalse(node2.isScript());
2335:       assertFalse(node2.isDo());
2336:       assertFalse(node2.isNot());
2337:       assertFalse(node2.isAssignAdd());
2338:       assertFalse(node2.isAnd());
2339:       assertFalse(node2.isLabel());
2340:       assertFalse(node2.isCast());
2341:       assertFalse(node2.isContinue());
2342:       assertFalse(node2.isFalse());
2343:       assertFalse(node2.isStringKey());
2344:       assertFalse(node2.isThrow());
2345:       assertFalse(node2.isHook());
2346:       assertFalse(node2.isParamList());
2347:       assertTrue(node2.isString());
2348:       assertFalse(node2.isInc());
2349:       assertFalse(node2.isSetterDef());
2350:       assertFalse(node2.isCase());
2351:       assertFalse(node2.isBlock());
2352:       assertFalse(node2.isThis());
2353:       assertFalse(node2.isRegExp());
2354:       assertFalse(node2.isInstanceOf());
2355:       assertFalse(node2.isCatch());
2356:       assertFalse(node2.isWith());
2357:       assertFalse(node2.hasMoreThanOneChild());
2358:       assertFalse(node2.isEmpty());
2359:       assertFalse(node2.isFor());
2360:       assertFalse(node2.isArrayLit());
2361:       assertFalse(node2.isNE());
2362:       assertFalse(node2.isDelProp());
2363:       assertFalse(node2.isIf());
2364:       assertFalse(node2.isTry());
2365:       assertFalse(node2.isDebugger());
2366:       assertFalse(node2.isTrue());
2367:       assertFalse(node2.isGetterDef());
2368:       assertFalse(node2.isIn());
2369:       assertEquals(40, node2.getType());
2370:       assertFalse(node2.isSwitch());
2371:       assertFalse(node2.isDefaultCase());
2372:       assertEquals(0, node2.getLineno());
2373:       assertEquals(0, node2.getChildCount());
2374:       assertFalse(node2.isFunction());
2375:       assertFalse(node2.isName());
2376:       assertFalse(node2.isCall());
2377:       assertEquals(0, node2.getSourcePosition());
2378:       assertFalse(node2.isBreak());
2379:       assertFalse(node2.isNull());
2380:       assertFalse(node2.isVar());
2381:       assertFalse(node2.isAdd());
2382:       assertFalse(node2.isNew());
2383:       assertFalse(node2.isGetProp());
2384:       assertFalse(node2.isObjectLit());
2385:       assertFalse(node2.isWhile());
2386:       assertFalse(node2.isVoid());
2387:       assertFalse(node2.isExprResult());
2388:       assertFalse(node2.isComma());
2389:       assertFalse(node2.isReturn());
2390:       assertFalse(node2.isDec());
2391:       assertFalse(node2.isTypeOf());
2392:       
2393:       Node node4 = node0.getLastChild();
2394:       assertSame(node0, node2);
2395:       assertNotSame(node0, node3);
2396:       assertFalse(node0.equals((Object)node1));
2397:       assertFalse(node0.equals((Object)node3));
2398:       assertNull(node4);
2399:       assertFalse(node0.isInc());
2400:       assertFalse(node0.isThrow());
2401:       assertFalse(node0.isCase());
2402:       assertFalse(node0.isHook());
2403:       assertFalse(node0.isComma());
2404:       assertFalse(node0.isNE());
2405:       assertFalse(node0.isThis());
2406:       assertFalse(node0.isIn());
2407:       assertFalse(node0.isInstanceOf());
2408:       assertFalse(node0.isDelProp());
2409:       assertFalse(node0.isIf());
2410:       assertFalse(node0.isBreak());
2411:       assertFalse(node0.isScript());
2412:       assertFalse(node0.isTrue());
2413:       assertFalse(node0.isRegExp());
2414:       assertFalse(node0.isWith());
2415:       assertFalse(node0.isEmpty());
2416:       assertFalse(node0.isFor());
2417:       assertFalse(node0.isDefaultCase());
2418:       assertFalse(node0.hasOneChild());
2419:       assertFalse(node0.isTry());
2420:       assertFalse(node0.isParamList());
2421:       assertFalse(node0.isLabel());
2422:       assertFalse(node0.isGetterDef());
2423:       assertEquals(0, node0.getChildCount());
2424:       assertFalse(node0.isNumber());
2425:       assertFalse(node0.isStringKey());
2426:       assertFalse(node0.isArrayLit());
2427:       assertFalse(node0.isLabelName());
2428:       assertFalse(node0.isSwitch());
2429:       assertFalse(node0.isNew());
2430:       assertFalse(node0.isAdd());
2431:       assertFalse(node0.isBlock());
2432:       assertFalse(node0.isVar());
2433:       assertFalse(node0.isWhile());
2434:       assertFalse(node0.isAssignAdd());
2435:       assertFalse(node0.isDo());
2436:       assertTrue(node0.isString());
2437:       assertFalse(node0.isNull());
2438:       assertFalse(node0.isSetterDef());
2439:       assertFalse(node0.isReturn());
2440:       assertEquals(0, node0.getSourcePosition());
2441:       assertFalse(node0.hasChildren());
2442:       assertFalse(node0.isDec());
2443:       assertFalse(node0.isOr());
2444:       assertFalse(node0.isAssign());
2445:       assertFalse(node0.isTypeOf());
2446:       assertFalse(node0.hasMoreThanOneChild());
2447:       assertFalse(node0.isCatch());
2448:       assertFalse(node0.isGetElem());
2449:       assertFalse(node0.isCall());
2450:       assertFalse(node0.isName());
2451:       assertFalse(node0.isDebugger());
2452:       assertFalse(node0.isVoid());
2453:       assertEquals(0, node0.getCharno());
2454:       assertFalse(node0.isExprResult());
2455:       assertFalse(node0.isNot());
2456:       assertFalse(node0.isFunction());
2457:       assertEquals(40, node0.getType());
2458:       assertFalse(node0.isGetProp());
2459:       assertEquals(0, node0.getLineno());
2460:       assertFalse(node0.isFalse());
2461:       assertFalse(node0.isContinue());
2462:       assertFalse(node0.isObjectLit());
2463:       assertFalse(node0.isAnd());
2464:       assertFalse(node0.isCast());
2465:       
2466:       PipedReader pipedReader0 = new PipedReader(57);
2467:       assertNotNull(pipedReader0);
2468:       
2469:       PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
2470:       assertNotNull(pipedWriter0);
2471:       
2472:       node0.appendStringTree(pipedWriter0);
2473:       assertSame(node0, node2);
2474:       assertNotSame(node0, node3);
2475:       assertFalse(node0.equals((Object)node1));
2476:       assertFalse(node0.equals((Object)node3));
2477:       assertFalse(node0.isInc());
2478:       assertFalse(node0.isThrow());
2479:       assertFalse(node0.isCase());
2480:       assertFalse(node0.isHook());
2481:       assertFalse(node0.isComma());
2482:       assertFalse(node0.isNE());
2483:       assertFalse(node0.isThis());
2484:       assertFalse(node0.isIn());
2485:       assertFalse(node0.isInstanceOf());
2486:       assertFalse(node0.isDelProp());
2487:       assertFalse(node0.isIf());
2488:       assertFalse(node0.isBreak());
2489:       assertFalse(node0.isScript());
2490:       assertFalse(node0.isTrue());
2491:       assertFalse(node0.isRegExp());
2492:       assertFalse(node0.isWith());
2493:       assertFalse(node0.isEmpty());
2494:       assertFalse(node0.isFor());
2495:       assertFalse(node0.isDefaultCase());
2496:       assertFalse(node0.hasOneChild());
2497:       assertFalse(node0.isTry());
2498:       assertFalse(node0.isParamList());
2499:       assertFalse(node0.isLabel());
2500:       assertFalse(node0.isGetterDef());
2501:       assertEquals(0, node0.getChildCount());
2502:       assertFalse(node0.isNumber());
2503:       assertFalse(node0.isStringKey());
2504:       assertFalse(node0.isArrayLit());
2505:       assertFalse(node0.isLabelName());
2506:       assertFalse(node0.isSwitch());
2507:       assertFalse(node0.isNew());
2508:       assertFalse(node0.isAdd());
2509:       assertFalse(node0.isBlock());
2510:       assertFalse(node0.isVar());
2511:       assertFalse(node0.isWhile());
2512:       assertFalse(node0.isAssignAdd());
2513:       assertFalse(node0.isDo());
2514:       assertTrue(node0.isString());
2515:       assertFalse(node0.isNull());
2516:       assertFalse(node0.isSetterDef());
2517:       assertFalse(node0.isReturn());
2518:       assertEquals(0, node0.getSourcePosition());
2519:       assertFalse(node0.hasChildren());
2520:       assertFalse(node0.isDec());
2521:       assertFalse(node0.isOr());
2522:       assertFalse(node0.isAssign());
2523:       assertFalse(node0.isTypeOf());
2524:       assertFalse(node0.hasMoreThanOneChild());
2525:       assertFalse(node0.isCatch());
2526:       assertFalse(node0.isGetElem());
2527:       assertFalse(node0.isCall());
2528:       assertFalse(node0.isName());
2529:       assertFalse(node0.isDebugger());
2530:       assertFalse(node0.isVoid());
2531:       assertEquals(0, node0.getCharno());
2532:       assertFalse(node0.isExprResult());
2533:       assertFalse(node0.isNot());
2534:       assertFalse(node0.isFunction());
2535:       assertEquals(40, node0.getType());
2536:       assertFalse(node0.isGetProp());
2537:       assertEquals(0, node0.getLineno());
2538:       assertFalse(node0.isFalse());
2539:       assertFalse(node0.isContinue());
2540:       assertFalse(node0.isObjectLit());
2541:       assertFalse(node0.isAnd());
2542:       assertFalse(node0.isCast());
2543:   }
2544: }
RegularFileObject[/tmp/EvoSuite_452_1628159849597/com/google/javascript/rhino/Node_452_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:37:30 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_452_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_452_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.common.collect.Sets$1",
101:       "com.google.javascript.rhino.SourcePosition",
102:       "com.google.common.collect.ImmutableMapKeySet",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.javascript.rhino.Node$AncestorIterable$1",
115:       "com.google.common.collect.Iterators$12",
116:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
117:       "com.google.common.collect.Iterators$11",
118:       "com.google.javascript.rhino.jstype.JSType$1",
119:       "com.google.common.collect.EmptyImmutableBiMap",
120:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
121:       "com.google.common.base.Predicate",
122:       "com.google.javascript.rhino.jstype.JSType$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.common.collect.SingletonImmutableSet",
135:       "com.google.javascript.rhino.jstype.NamedType",
136:       "com.google.common.collect.Iterators$13",
137:       "com.google.javascript.rhino.InputId",
138:       "com.google.common.collect.ImmutableList$SerializedForm",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
163:       "com.google.common.base.Joiner$MapJoiner",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.javascript.rhino.Node$AncestorIterable",
185:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
186:       "com.google.common.collect.Lists$RandomAccessListWrapper",
187:       "com.google.common.collect.ImmutableEnumSet",
188:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
189:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
190:       "com.google.javascript.rhino.jstype.EnumElementType",
191:       "com.google.javascript.rhino.jstype.UnionType",
192:       "com.google.common.base.Objects",
193:       "com.google.javascript.rhino.Node$NumberNode",
194:       "com.google.common.collect.SingletonImmutableList",
195:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
196:       "com.google.common.collect.ImmutableCollection$Builder",
197:       "com.google.javascript.rhino.jstype.StaticSlot",
198:       "com.google.common.collect.Iterators$6",
199:       "com.google.common.collect.BiMap",
200:       "com.google.common.collect.Iterators$7",
201:       "com.google.common.collect.AbstractSetMultimap",
202:       "com.google.common.base.Function",
203:       "com.google.common.collect.ImmutableSet",
204:       "com.google.common.collect.Lists$AbstractListWrapper",
205:       "com.google.common.collect.ImmutableMap",
206:       "com.google.common.collect.AbstractIndexedListIterator",
207:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
208:       "com.google.common.collect.Maps$1",
209:       "com.google.javascript.rhino.jstype.EnumType",
210:       "com.google.common.collect.Iterators$1",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$2",
213:       "com.google.javascript.rhino.jstype.NamespaceType",
214:       "com.google.common.collect.Iterators$3",
215:       "com.google.common.collect.Sets",
216:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
217:       "com.google.javascript.rhino.Node$ObjectPropListItem",
218:       "com.google.common.collect.Lists$StringAsImmutableList",
219:       "com.google.common.collect.Lists$2",
220:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
221:       "com.google.common.collect.ImmutableList$Builder",
222:       "com.google.common.collect.Lists$1",
223:       "com.google.javascript.rhino.jstype.StaticReference",
224:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
225:       "com.google.common.collect.Multiset",
226:       "com.google.common.collect.AbstractMultimap",
227:       "com.google.common.collect.Multimap",
228:       "com.google.common.collect.Iterators",
229:       "com.google.common.collect.EmptyImmutableSet",
230:       "com.google.common.collect.Maps$ImprovedAbstractMap",
231:       "com.google.common.collect.ImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
233:       "com.google.common.collect.ImmutableList",
234:       "com.google.common.collect.SingletonImmutableBiMap",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
236:       "com.google.javascript.rhino.jstype.StringType",
237:       "com.google.javascript.rhino.Node$AbstractPropListItem",
238:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
239:       "com.google.javascript.rhino.jstype.TemplatizedType",
240:       "com.google.javascript.rhino.jstype.Visitor",
241:       "com.google.javascript.rhino.jstype.NoResolvedType",
242:       "com.google.javascript.rhino.jstype.JSTypeNative",
243:       "com.google.javascript.rhino.jstype.AllType",
244:       "com.google.common.collect.Maps",
245:       "com.google.common.collect.SetMultimap",
246:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
247:       "com.google.common.collect.Maps$EntryTransformer",
248:       "com.google.javascript.rhino.JSTypeExpression",
249:       "com.google.common.collect.Iterators$MergingIterator"
250:     );
251:   } 
252: 
253:   private static void resetClasses() {
254:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_452_tmp__ESTest_scaffolding.class.getClassLoader()); 
255: 
256:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
257:       "com.google.javascript.rhino.Node",
258:       "com.google.javascript.rhino.Node$NumberNode",
259:       "com.google.javascript.rhino.Node$StringNode",
260:       "com.google.javascript.rhino.Node$AbstractPropListItem",
261:       "com.google.javascript.rhino.Node$ObjectPropListItem",
262:       "com.google.javascript.rhino.Node$IntPropListItem",
263:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
264:       "com.google.javascript.rhino.Node$AncestorIterable",
265:       "com.google.javascript.rhino.Node$NodeMismatch",
266:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
267:       "com.google.javascript.rhino.Node$SideEffectFlags",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Preconditions",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
301:       "com.google.javascript.rhino.jstype.JSType$1",
302:       "com.google.javascript.rhino.jstype.JSType",
303:       "com.google.javascript.rhino.jstype.ObjectType",
304:       "com.google.javascript.rhino.jstype.ProxyObjectType",
305:       "com.google.javascript.rhino.jstype.TemplateType",
306:       "com.google.javascript.rhino.jstype.ValueType",
307:       "com.google.javascript.rhino.jstype.BooleanType",
308:       "com.google.javascript.rhino.jstype.NullType",
309:       "com.google.javascript.rhino.jstype.NumberType",
310:       "com.google.javascript.rhino.jstype.StringType",
311:       "com.google.javascript.rhino.jstype.UnknownType",
312:       "com.google.javascript.rhino.jstype.VoidType",
313:       "com.google.javascript.rhino.jstype.AllType",
314:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
315:       "com.google.common.collect.ImmutableMap",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.collect.EmptyImmutableBiMap",
318:       "com.google.javascript.rhino.jstype.PropertyMap$1",
319:       "com.google.javascript.rhino.jstype.PropertyMap",
320:       "com.google.javascript.rhino.jstype.FunctionType",
321:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
322:       "com.google.javascript.rhino.Token",
323:       "com.google.javascript.rhino.jstype.ArrowType",
324:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
325:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
326:       "com.google.javascript.rhino.jstype.InstanceObjectType",
327:       "com.google.javascript.rhino.jstype.Property",
328:       "com.google.common.collect.Lists",
329:       "com.google.javascript.rhino.jstype.NoObjectType",
330:       "com.google.javascript.rhino.jstype.NoType",
331:       "com.google.javascript.rhino.jstype.NoResolvedType",
332:       "com.google.common.collect.SingletonImmutableList",
333:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
334:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
335:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
336:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
337:       "com.google.javascript.rhino.jstype.UnionType",
338:       "com.google.javascript.rhino.jstype.FunctionBuilder",
339:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.javascript.rhino.jstype.TernaryValue",
348:       "com.google.common.collect.Iterables",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
353:       "com.google.common.collect.Sets",
354:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
355:       "com.google.javascript.rhino.InputId",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
364:       "com.google.javascript.rhino.JSTypeExpression",
365:       "com.google.common.collect.Platform",
366:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
371:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.JSDocInfo$Marker",
374:       "com.google.common.collect.Iterators$12",
375:       "com.google.javascript.rhino.jstype.JSType$2",
376:       "com.google.common.collect.ImmutableList$1"
377:     );
378:   }
379: }

[MASTER] 10:37:30.259 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("", 0, 0);
assertNotNull(node0);
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);

Node node1 = new Node(49, node0, 41, (-3141));
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getLineno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertTrue(node1.hasChildren());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertTrue(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(49, node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

boolean boolean0 = node1.wasEmptyNode();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean0);
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getLineno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertTrue(node1.hasChildren());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertTrue(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(49, node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());

String string0 = node1.checkTreeEquals(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotNull(string0);
assertEquals("Node tree inequality:\nTree1:\nTHROW\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: THROW\n    STRING  0\n\n\nSubtree2: STRING  0\n", string0);
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getLineno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertTrue(node1.hasChildren());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertTrue(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(49, node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());

String string1 = node1.getQualifiedName();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNull(string1);
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getLineno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertTrue(node1.hasChildren());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertTrue(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(49, node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotNull(node_NodeMismatch0);
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getLineno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertTrue(node1.hasChildren());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertTrue(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(49, node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());

Node node2 = node0.getLastSibling();
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.hasOneChild());
assertFalse(node2.isOr());
assertEquals(0, node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isDo());
assertFalse(node2.isNot());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAnd());
assertFalse(node2.isLabel());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isParamList());
assertTrue(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertEquals(40, node2.getType());
assertFalse(node2.isSwitch());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getLineno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFunction());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertEquals(0, node2.getSourcePosition());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());

boolean boolean1 = node1.isEquivalentToTyped(node2);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getLineno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertTrue(node1.hasChildren());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertTrue(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(49, node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.hasOneChild());
assertFalse(node2.isOr());
assertEquals(0, node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isDo());
assertFalse(node2.isNot());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAnd());
assertFalse(node2.isLabel());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isParamList());
assertTrue(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertEquals(40, node2.getType());
assertFalse(node2.isSwitch());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getLineno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFunction());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertEquals(0, node2.getSourcePosition());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());

int int0 = node0.getSourceOffset();
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertEquals((-1), int0);
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());

Iterable<Node> iterable0 = node2.children();
assertFalse(iterable0.contains(node1));
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertNotNull(iterable0);
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.hasOneChild());
assertFalse(node2.isOr());
assertEquals(0, node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isDo());
assertFalse(node2.isNot());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAnd());
assertFalse(node2.isLabel());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isParamList());
assertTrue(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertEquals(40, node2.getType());
assertFalse(node2.isSwitch());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getLineno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFunction());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertEquals(0, node2.getSourcePosition());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());

boolean boolean2 = node2.mayMutateArguments();
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(boolean2 == boolean0);
assertFalse(boolean2 == boolean1);
assertTrue(boolean2);
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.hasOneChild());
assertFalse(node2.isOr());
assertEquals(0, node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isDo());
assertFalse(node2.isNot());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAnd());
assertFalse(node2.isLabel());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isParamList());
assertTrue(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertEquals(40, node2.getType());
assertFalse(node2.isSwitch());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getLineno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFunction());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertEquals(0, node2.getSourcePosition());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());

boolean boolean3 = node0.isDo();
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertFalse(boolean3);
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());

boolean boolean4 = node2.isNot();
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertFalse(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertFalse(boolean4);
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.hasOneChild());
assertFalse(node2.isOr());
assertEquals(0, node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isDo());
assertFalse(node2.isNot());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAnd());
assertFalse(node2.isLabel());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isParamList());
assertTrue(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertEquals(40, node2.getType());
assertFalse(node2.isSwitch());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getLineno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFunction());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertEquals(0, node2.getSourcePosition());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());

boolean boolean5 = node2.isName();
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(boolean5 == boolean2);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean4);
assertFalse(boolean5);
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.hasOneChild());
assertFalse(node2.isOr());
assertEquals(0, node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isDo());
assertFalse(node2.isNot());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAnd());
assertFalse(node2.isLabel());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isParamList());
assertTrue(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertEquals(40, node2.getType());
assertFalse(node2.isSwitch());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getLineno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFunction());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertEquals(0, node2.getSourcePosition());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());

int int1 = node0.getLength();
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(int1 == int0);
assertEquals(0, int1);
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());

boolean boolean6 = node2.isGetterDef();
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean3);
assertFalse(boolean6 == boolean2);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean5);
assertFalse(boolean6);
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.hasOneChild());
assertFalse(node2.isOr());
assertEquals(0, node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isDo());
assertFalse(node2.isNot());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAnd());
assertFalse(node2.isLabel());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isParamList());
assertTrue(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertEquals(40, node2.getType());
assertFalse(node2.isSwitch());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getLineno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFunction());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertEquals(0, node2.getSourcePosition());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());

int int2 = node0.getSideEffectFlags();
assertSame(node0, node2);
assertTrue(int2 == int1);
assertFalse(int2 == int0);
assertFalse(node0.equals((Object)node1));
assertEquals(0, int2);
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());

Node node3 = node2.cloneTree();
assertSame(node0, node2);
assertNotSame(node0, node3);
assertNotSame(node3, node2);
assertNotSame(node3, node0);
assertNotSame(node2, node3);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node3);
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isWhile());
assertFalse(node3.hasChildren());
assertFalse(node3.isBlock());
assertFalse(node3.isAssign());
assertFalse(node3.isReturn());
assertFalse(node3.isLabel());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isVar());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isNew());
assertFalse(node3.isName());
assertEquals(0, node3.getCharno());
assertFalse(node3.isSetterDef());
assertEquals(0, node3.getSourcePosition());
assertFalse(node3.isNull());
assertFalse(node3.isAdd());
assertFalse(node3.isOr());
assertFalse(node3.isAnd());
assertEquals(40, node3.getType());
assertEquals(0, node3.getLineno());
assertFalse(node3.isComma());
assertFalse(node3.isBreak());
assertFalse(node3.isExprResult());
assertFalse(node3.isFalse());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetProp());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isCase());
assertFalse(node3.isThrow());
assertFalse(node3.isEmpty());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isVoid());
assertFalse(node3.isNE());
assertFalse(node3.isInc());
assertFalse(node3.isTrue());
assertFalse(node3.isIn());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isThis());
assertFalse(node3.isWith());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isRegExp());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertFalse(node3.isHook());
assertFalse(node3.isFor());
assertFalse(node3.isLabelName());
assertFalse(node3.isTry());
assertFalse(node3.hasOneChild());
assertTrue(node3.isString());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertFalse(node3.isScript());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.hasOneChild());
assertFalse(node2.isOr());
assertEquals(0, node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isDo());
assertFalse(node2.isNot());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAnd());
assertFalse(node2.isLabel());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isParamList());
assertTrue(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertEquals(40, node2.getType());
assertFalse(node2.isSwitch());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getLineno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFunction());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertEquals(0, node2.getSourcePosition());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());

Node node4 = node0.getLastChild();
assertSame(node0, node2);
assertNotSame(node0, node3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertNull(node4);
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());

PipedReader pipedReader0 = new PipedReader(57);
assertNotNull(pipedReader0);

PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
assertNotNull(pipedWriter0);

node0.appendStringTree(pipedWriter0);
assertSame(node0, node2);
assertNotSame(node0, node3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());


[MASTER] 10:37:31.182 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_462_1628159851150/com/google/javascript/rhino/Node_462_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_462_1628159851150/com/google/javascript/rhino/Node_462_tmp__ESTest_scaffolding.java]]
[MASTER] 10:37:31.182 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:37:31.182 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:37:31.182 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 128
[MASTER] 10:37:31.183 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_462_1628159851150/com/google/javascript/rhino/Node_462_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:37:31 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_462_tmp__ESTest extends Node_462_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newNumber(951.13);
23:       assertNotNull(node0);
24:       assertFalse(node0.isRegExp());
25:       assertFalse(node0.isFunction());
26:       assertFalse(node0.isTrue());
27:       assertFalse(node0.isVoid());
28:       assertFalse(node0.isDebugger());
29:       assertFalse(node0.isCatch());
30:       assertFalse(node0.isArrayLit());
31:       assertFalse(node0.isDelProp());
32:       assertFalse(node0.isIf());
33:       assertFalse(node0.isParamList());
34:       assertFalse(node0.isNE());
35:       assertFalse(node0.isSetterDef());
36:       assertFalse(node0.isNull());
37:       assertFalse(node0.isEmpty());
38:       assertFalse(node0.isIn());
39:       assertFalse(node0.isVar());
40:       assertEquals(0, node0.getChildCount());
41:       assertFalse(node0.isDefaultCase());
42:       assertFalse(node0.isNew());
43:       assertFalse(node0.isAdd());
44:       assertFalse(node0.isContinue());
45:       assertFalse(node0.isString());
46:       assertFalse(node0.isCall());
47:       assertFalse(node0.isName());
48:       assertFalse(node0.isTypeOf());
49:       assertFalse(node0.isBreak());
50:       assertFalse(node0.hasChildren());
51:       assertFalse(node0.isDec());
52:       assertFalse(node0.isGetProp());
53:       assertEquals((-1), node0.getSourcePosition());
54:       assertFalse(node0.isComma());
55:       assertFalse(node0.isAssign());
56:       assertFalse(node0.isGetElem());
57:       assertTrue(node0.isNumber());
58:       assertFalse(node0.isReturn());
59:       assertFalse(node0.isWhile());
60:       assertFalse(node0.isScript());
61:       assertFalse(node0.isExprResult());
62:       assertFalse(node0.isWith());
63:       assertFalse(node0.isNot());
64:       assertFalse(node0.isCast());
65:       assertFalse(node0.isObjectLit());
66:       assertFalse(node0.isLabelName());
67:       assertFalse(node0.isAnd());
68:       assertFalse(node0.isOr());
69:       assertFalse(node0.isFalse());
70:       assertFalse(node0.isLabel());
71:       assertFalse(node0.isAssignAdd());
72:       assertFalse(node0.isDo());
73:       assertFalse(node0.isThrow());
74:       assertFalse(node0.isSwitch());
75:       assertFalse(node0.isInc());
76:       assertEquals((-1), node0.getCharno());
77:       assertEquals((-1), node0.getLineno());
78:       assertFalse(node0.isStringKey());
79:       assertFalse(node0.isThis());
80:       assertFalse(node0.isGetterDef());
81:       assertFalse(node0.isInstanceOf());
82:       assertFalse(node0.hasMoreThanOneChild());
83:       assertFalse(node0.isHook());
84:       assertFalse(node0.isCase());
85:       assertFalse(node0.hasOneChild());
86:       assertFalse(node0.isTry());
87:       assertEquals(39, node0.getType());
88:       assertFalse(node0.isFor());
89:       assertFalse(node0.isBlock());
90:       assertEquals(43, Node.IS_CONSTANT_NAME);
91:       assertEquals(36, Node.QUOTED_PROP);
92:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
93:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
94:       assertEquals(4095, Node.COLUMN_MASK);
95:       assertEquals(56, Node.CHANGE_TIME);
96:       assertEquals(47, Node.IS_DISPATCHER);
97:       assertEquals(37, Node.OPT_ARG_NAME);
98:       assertEquals(8, Node.FLAG_NO_THROWS);
99:       assertEquals(2, Node.POST_FLAG);
100:       assertEquals(48, Node.DIRECTIVES);
101:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
102:       assertEquals(57, Node.REFLECTED_OBJECT);
103:       assertEquals(52, Node.LENGTH);
104:       assertEquals(53, Node.INPUT_ID);
105:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
106:       assertEquals(55, Node.INFERRED_FUNCTION);
107:       assertEquals(39, Node.EMPTY_BLOCK);
108:       assertEquals(29, Node.JSDOC_INFO_PROP);
109:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
110:       assertEquals(15, Node.NO_SIDE_EFFECTS);
111:       assertEquals(57, Node.LAST_PROP);
112:       assertEquals(30, Node.VAR_ARGS_NAME);
113:       assertEquals(49, Node.DIRECT_EVAL);
114:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
115:       assertEquals(12, Node.COLUMN_BITS);
116:       assertEquals(54, Node.SLASH_V);
117:       assertEquals(40, Node.ORIGINALNAME_PROP);
118:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
119:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
120:       assertEquals(50, Node.FREE_CALL);
121:       assertEquals(46, Node.IS_NAMESPACE);
122:       assertEquals(51, Node.STATIC_SOURCE_FILE);
123:       assertEquals(32, Node.INCRDECR_PROP);
124:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
125:       assertEquals(1, Node.DECR_FLAG);
126:       
127:       Iterable<Node> iterable0 = node0.children();
128:       assertFalse(iterable0.contains(node0));
129:       assertNotNull(iterable0);
130:       assertFalse(node0.isRegExp());
131:       assertFalse(node0.isFunction());
132:       assertFalse(node0.isTrue());
133:       assertFalse(node0.isVoid());
134:       assertFalse(node0.isDebugger());
135:       assertFalse(node0.isCatch());
136:       assertFalse(node0.isArrayLit());
137:       assertFalse(node0.isDelProp());
138:       assertFalse(node0.isIf());
139:       assertFalse(node0.isParamList());
140:       assertFalse(node0.isNE());
141:       assertFalse(node0.isSetterDef());
142:       assertFalse(node0.isNull());
143:       assertFalse(node0.isEmpty());
144:       assertFalse(node0.isIn());
145:       assertFalse(node0.isVar());
146:       assertEquals(0, node0.getChildCount());
147:       assertFalse(node0.isDefaultCase());
148:       assertFalse(node0.isNew());
149:       assertFalse(node0.isAdd());
150:       assertFalse(node0.isContinue());
151:       assertFalse(node0.isString());
152:       assertFalse(node0.isCall());
153:       assertFalse(node0.isName());
154:       assertFalse(node0.isTypeOf());
155:       assertFalse(node0.isBreak());
156:       assertFalse(node0.hasChildren());
157:       assertFalse(node0.isDec());
158:       assertFalse(node0.isGetProp());
159:       assertEquals((-1), node0.getSourcePosition());
160:       assertFalse(node0.isComma());
161:       assertFalse(node0.isAssign());
162:       assertFalse(node0.isGetElem());
163:       assertTrue(node0.isNumber());
164:       assertFalse(node0.isReturn());
165:       assertFalse(node0.isWhile());
166:       assertFalse(node0.isScript());
167:       assertFalse(node0.isExprResult());
168:       assertFalse(node0.isWith());
169:       assertFalse(node0.isNot());
170:       assertFalse(node0.isCast());
171:       assertFalse(node0.isObjectLit());
172:       assertFalse(node0.isLabelName());
173:       assertFalse(node0.isAnd());
174:       assertFalse(node0.isOr());
175:       assertFalse(node0.isFalse());
176:       assertFalse(node0.isLabel());
177:       assertFalse(node0.isAssignAdd());
178:       assertFalse(node0.isDo());
179:       assertFalse(node0.isThrow());
180:       assertFalse(node0.isSwitch());
181:       assertFalse(node0.isInc());
182:       assertEquals((-1), node0.getCharno());
183:       assertEquals((-1), node0.getLineno());
184:       assertFalse(node0.isStringKey());
185:       assertFalse(node0.isThis());
186:       assertFalse(node0.isGetterDef());
187:       assertFalse(node0.isInstanceOf());
188:       assertFalse(node0.hasMoreThanOneChild());
189:       assertFalse(node0.isHook());
190:       assertFalse(node0.isCase());
191:       assertFalse(node0.hasOneChild());
192:       assertFalse(node0.isTry());
193:       assertEquals(39, node0.getType());
194:       assertFalse(node0.isFor());
195:       assertFalse(node0.isBlock());
196:       assertEquals(43, Node.IS_CONSTANT_NAME);
197:       assertEquals(36, Node.QUOTED_PROP);
198:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
199:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
200:       assertEquals(4095, Node.COLUMN_MASK);
201:       assertEquals(56, Node.CHANGE_TIME);
202:       assertEquals(47, Node.IS_DISPATCHER);
203:       assertEquals(37, Node.OPT_ARG_NAME);
204:       assertEquals(8, Node.FLAG_NO_THROWS);
205:       assertEquals(2, Node.POST_FLAG);
206:       assertEquals(48, Node.DIRECTIVES);
207:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
208:       assertEquals(57, Node.REFLECTED_OBJECT);
209:       assertEquals(52, Node.LENGTH);
210:       assertEquals(53, Node.INPUT_ID);
211:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
212:       assertEquals(55, Node.INFERRED_FUNCTION);
213:       assertEquals(39, Node.EMPTY_BLOCK);
214:       assertEquals(29, Node.JSDOC_INFO_PROP);
215:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
216:       assertEquals(15, Node.NO_SIDE_EFFECTS);
217:       assertEquals(57, Node.LAST_PROP);
218:       assertEquals(30, Node.VAR_ARGS_NAME);
219:       assertEquals(49, Node.DIRECT_EVAL);
220:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
221:       assertEquals(12, Node.COLUMN_BITS);
222:       assertEquals(54, Node.SLASH_V);
223:       assertEquals(40, Node.ORIGINALNAME_PROP);
224:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
225:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
226:       assertEquals(50, Node.FREE_CALL);
227:       assertEquals(46, Node.IS_NAMESPACE);
228:       assertEquals(51, Node.STATIC_SOURCE_FILE);
229:       assertEquals(32, Node.INCRDECR_PROP);
230:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
231:       assertEquals(1, Node.DECR_FLAG);
232:       
233:       boolean boolean0 = node0.isOr();
234:       assertFalse(boolean0);
235:       assertFalse(node0.isRegExp());
236:       assertFalse(node0.isFunction());
237:       assertFalse(node0.isTrue());
238:       assertFalse(node0.isVoid());
239:       assertFalse(node0.isDebugger());
240:       assertFalse(node0.isCatch());
241:       assertFalse(node0.isArrayLit());
242:       assertFalse(node0.isDelProp());
243:       assertFalse(node0.isIf());
244:       assertFalse(node0.isParamList());
245:       assertFalse(node0.isNE());
246:       assertFalse(node0.isSetterDef());
247:       assertFalse(node0.isNull());
248:       assertFalse(node0.isEmpty());
249:       assertFalse(node0.isIn());
250:       assertFalse(node0.isVar());
251:       assertEquals(0, node0.getChildCount());
252:       assertFalse(node0.isDefaultCase());
253:       assertFalse(node0.isNew());
254:       assertFalse(node0.isAdd());
255:       assertFalse(node0.isContinue());
256:       assertFalse(node0.isString());
257:       assertFalse(node0.isCall());
258:       assertFalse(node0.isName());
259:       assertFalse(node0.isTypeOf());
260:       assertFalse(node0.isBreak());
261:       assertFalse(node0.hasChildren());
262:       assertFalse(node0.isDec());
263:       assertFalse(node0.isGetProp());
264:       assertEquals((-1), node0.getSourcePosition());
265:       assertFalse(node0.isComma());
266:       assertFalse(node0.isAssign());
267:       assertFalse(node0.isGetElem());
268:       assertTrue(node0.isNumber());
269:       assertFalse(node0.isReturn());
270:       assertFalse(node0.isWhile());
271:       assertFalse(node0.isScript());
272:       assertFalse(node0.isExprResult());
273:       assertFalse(node0.isWith());
274:       assertFalse(node0.isNot());
275:       assertFalse(node0.isCast());
276:       assertFalse(node0.isObjectLit());
277:       assertFalse(node0.isLabelName());
278:       assertFalse(node0.isAnd());
279:       assertFalse(node0.isOr());
280:       assertFalse(node0.isFalse());
281:       assertFalse(node0.isLabel());
282:       assertFalse(node0.isAssignAdd());
283:       assertFalse(node0.isDo());
284:       assertFalse(node0.isThrow());
285:       assertFalse(node0.isSwitch());
286:       assertFalse(node0.isInc());
287:       assertEquals((-1), node0.getCharno());
288:       assertEquals((-1), node0.getLineno());
289:       assertFalse(node0.isStringKey());
290:       assertFalse(node0.isThis());
291:       assertFalse(node0.isGetterDef());
292:       assertFalse(node0.isInstanceOf());
293:       assertFalse(node0.hasMoreThanOneChild());
294:       assertFalse(node0.isHook());
295:       assertFalse(node0.isCase());
296:       assertFalse(node0.hasOneChild());
297:       assertFalse(node0.isTry());
298:       assertEquals(39, node0.getType());
299:       assertFalse(node0.isFor());
300:       assertFalse(node0.isBlock());
301:       assertEquals(43, Node.IS_CONSTANT_NAME);
302:       assertEquals(36, Node.QUOTED_PROP);
303:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
304:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
305:       assertEquals(4095, Node.COLUMN_MASK);
306:       assertEquals(56, Node.CHANGE_TIME);
307:       assertEquals(47, Node.IS_DISPATCHER);
308:       assertEquals(37, Node.OPT_ARG_NAME);
309:       assertEquals(8, Node.FLAG_NO_THROWS);
310:       assertEquals(2, Node.POST_FLAG);
311:       assertEquals(48, Node.DIRECTIVES);
312:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
313:       assertEquals(57, Node.REFLECTED_OBJECT);
314:       assertEquals(52, Node.LENGTH);
315:       assertEquals(53, Node.INPUT_ID);
316:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
317:       assertEquals(55, Node.INFERRED_FUNCTION);
318:       assertEquals(39, Node.EMPTY_BLOCK);
319:       assertEquals(29, Node.JSDOC_INFO_PROP);
320:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
321:       assertEquals(15, Node.NO_SIDE_EFFECTS);
322:       assertEquals(57, Node.LAST_PROP);
323:       assertEquals(30, Node.VAR_ARGS_NAME);
324:       assertEquals(49, Node.DIRECT_EVAL);
325:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
326:       assertEquals(12, Node.COLUMN_BITS);
327:       assertEquals(54, Node.SLASH_V);
328:       assertEquals(40, Node.ORIGINALNAME_PROP);
329:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
330:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
331:       assertEquals(50, Node.FREE_CALL);
332:       assertEquals(46, Node.IS_NAMESPACE);
333:       assertEquals(51, Node.STATIC_SOURCE_FILE);
334:       assertEquals(32, Node.INCRDECR_PROP);
335:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
336:       assertEquals(1, Node.DECR_FLAG);
337:       
338:       Node node1 = Node.newString(4, "");
339:       assertFalse(node1.equals((Object)node0));
340:       assertNotNull(node1);
341:       assertFalse(node1.hasMoreThanOneChild());
342:       assertEquals((-1), node1.getLineno());
343:       assertFalse(node1.isOr());
344:       assertFalse(node1.isContinue());
345:       assertEquals((-1), node1.getSourcePosition());
346:       assertFalse(node1.isNumber());
347:       assertFalse(node1.isLabelName());
348:       assertFalse(node1.hasOneChild());
349:       assertFalse(node1.isGetElem());
350:       assertFalse(node1.isExprResult());
351:       assertFalse(node1.isCall());
352:       assertFalse(node1.isScript());
353:       assertFalse(node1.isTypeOf());
354:       assertFalse(node1.hasChildren());
355:       assertFalse(node1.isDec());
356:       assertFalse(node1.isAssign());
357:       assertFalse(node1.isBlock());
358:       assertFalse(node1.isWhile());
359:       assertFalse(node1.isObjectLit());
360:       assertFalse(node1.isNot());
361:       assertFalse(node1.isWith());
362:       assertFalse(node1.isGetProp());
363:       assertFalse(node1.isCatch());
364:       assertFalse(node1.isInstanceOf());
365:       assertFalse(node1.isDebugger());
366:       assertFalse(node1.isAnd());
367:       assertFalse(node1.isFalse());
368:       assertFalse(node1.isCast());
369:       assertFalse(node1.isInc());
370:       assertFalse(node1.isSetterDef());
371:       assertFalse(node1.isFunction());
372:       assertFalse(node1.isThrow());
373:       assertFalse(node1.isIn());
374:       assertFalse(node1.isCase());
375:       assertFalse(node1.isString());
376:       assertTrue(node1.isReturn());
377:       assertFalse(node1.isSwitch());
378:       assertFalse(node1.isIf());
379:       assertFalse(node1.isDelProp());
380:       assertEquals((-1), node1.getCharno());
381:       assertFalse(node1.isGetterDef());
382:       assertFalse(node1.isNE());
383:       assertFalse(node1.isHook());
384:       assertFalse(node1.isRegExp());
385:       assertEquals(4, node1.getType());
386:       assertFalse(node1.isThis());
387:       assertFalse(node1.isComma());
388:       assertFalse(node1.isFor());
389:       assertFalse(node1.isTry());
390:       assertEquals(0, node1.getChildCount());
391:       assertFalse(node1.isNull());
392:       assertFalse(node1.isVoid());
393:       assertFalse(node1.isBreak());
394:       assertFalse(node1.isName());
395:       assertFalse(node1.isParamList());
396:       assertFalse(node1.isTrue());
397:       assertFalse(node1.isStringKey());
398:       assertFalse(node1.isArrayLit());
399:       assertFalse(node1.isVar());
400:       assertFalse(node1.isEmpty());
401:       assertFalse(node1.isAdd());
402:       assertFalse(node1.isDefaultCase());
403:       assertFalse(node1.isNew());
404:       assertFalse(node1.isDo());
405:       assertFalse(node1.isLabel());
406:       assertFalse(node1.isAssignAdd());
407:       assertEquals(51, Node.STATIC_SOURCE_FILE);
408:       assertEquals(32, Node.INCRDECR_PROP);
409:       assertEquals(12, Node.COLUMN_BITS);
410:       assertEquals(46, Node.IS_NAMESPACE);
411:       assertEquals(47, Node.IS_DISPATCHER);
412:       assertEquals(56, Node.CHANGE_TIME);
413:       assertEquals(2, Node.POST_FLAG);
414:       assertEquals(30, Node.VAR_ARGS_NAME);
415:       assertEquals(49, Node.DIRECT_EVAL);
416:       assertEquals(37, Node.OPT_ARG_NAME);
417:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
418:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
419:       assertEquals(54, Node.SLASH_V);
420:       assertEquals(50, Node.FREE_CALL);
421:       assertEquals(1, Node.DECR_FLAG);
422:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
423:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
424:       assertEquals(4095, Node.COLUMN_MASK);
425:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
426:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
427:       assertEquals(43, Node.IS_CONSTANT_NAME);
428:       assertEquals(48, Node.DIRECTIVES);
429:       assertEquals(40, Node.ORIGINALNAME_PROP);
430:       assertEquals(52, Node.LENGTH);
431:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
432:       assertEquals(57, Node.REFLECTED_OBJECT);
433:       assertEquals(15, Node.NO_SIDE_EFFECTS);
434:       assertEquals(57, Node.LAST_PROP);
435:       assertEquals(36, Node.QUOTED_PROP);
436:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
437:       assertEquals(8, Node.FLAG_NO_THROWS);
438:       assertEquals(55, Node.INFERRED_FUNCTION);
439:       assertEquals(29, Node.JSDOC_INFO_PROP);
440:       assertEquals(39, Node.EMPTY_BLOCK);
441:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
442:       assertEquals(53, Node.INPUT_ID);
443:       
444:       boolean boolean1 = node1.isCatch();
445:       assertFalse(node1.equals((Object)node0));
446:       assertTrue(boolean1 == boolean0);
447:       assertFalse(boolean1);
448:       assertFalse(node1.hasMoreThanOneChild());
449:       assertEquals((-1), node1.getLineno());
450:       assertFalse(node1.isOr());
451:       assertFalse(node1.isContinue());
452:       assertEquals((-1), node1.getSourcePosition());
453:       assertFalse(node1.isNumber());
454:       assertFalse(node1.isLabelName());
455:       assertFalse(node1.hasOneChild());
456:       assertFalse(node1.isGetElem());
457:       assertFalse(node1.isExprResult());
458:       assertFalse(node1.isCall());
459:       assertFalse(node1.isScript());
460:       assertFalse(node1.isTypeOf());
461:       assertFalse(node1.hasChildren());
462:       assertFalse(node1.isDec());
463:       assertFalse(node1.isAssign());
464:       assertFalse(node1.isBlock());
465:       assertFalse(node1.isWhile());
466:       assertFalse(node1.isObjectLit());
467:       assertFalse(node1.isNot());
468:       assertFalse(node1.isWith());
469:       assertFalse(node1.isGetProp());
470:       assertFalse(node1.isCatch());
471:       assertFalse(node1.isInstanceOf());
472:       assertFalse(node1.isDebugger());
473:       assertFalse(node1.isAnd());
474:       assertFalse(node1.isFalse());
475:       assertFalse(node1.isCast());
476:       assertFalse(node1.isInc());
477:       assertFalse(node1.isSetterDef());
478:       assertFalse(node1.isFunction());
479:       assertFalse(node1.isThrow());
480:       assertFalse(node1.isIn());
481:       assertFalse(node1.isCase());
482:       assertFalse(node1.isString());
483:       assertTrue(node1.isReturn());
484:       assertFalse(node1.isSwitch());
485:       assertFalse(node1.isIf());
486:       assertFalse(node1.isDelProp());
487:       assertEquals((-1), node1.getCharno());
488:       assertFalse(node1.isGetterDef());
489:       assertFalse(node1.isNE());
490:       assertFalse(node1.isHook());
491:       assertFalse(node1.isRegExp());
492:       assertEquals(4, node1.getType());
493:       assertFalse(node1.isThis());
494:       assertFalse(node1.isComma());
495:       assertFalse(node1.isFor());
496:       assertFalse(node1.isTry());
497:       assertEquals(0, node1.getChildCount());
498:       assertFalse(node1.isNull());
499:       assertFalse(node1.isVoid());
500:       assertFalse(node1.isBreak());
501:       assertFalse(node1.isName());
502:       assertFalse(node1.isParamList());
503:       assertFalse(node1.isTrue());
504:       assertFalse(node1.isStringKey());
505:       assertFalse(node1.isArrayLit());
506:       assertFalse(node1.isVar());
507:       assertFalse(node1.isEmpty());
508:       assertFalse(node1.isAdd());
509:       assertFalse(node1.isDefaultCase());
510:       assertFalse(node1.isNew());
511:       assertFalse(node1.isDo());
512:       assertFalse(node1.isLabel());
513:       assertFalse(node1.isAssignAdd());
514:       assertEquals(51, Node.STATIC_SOURCE_FILE);
515:       assertEquals(32, Node.INCRDECR_PROP);
516:       assertEquals(12, Node.COLUMN_BITS);
517:       assertEquals(46, Node.IS_NAMESPACE);
518:       assertEquals(47, Node.IS_DISPATCHER);
519:       assertEquals(56, Node.CHANGE_TIME);
520:       assertEquals(2, Node.POST_FLAG);
521:       assertEquals(30, Node.VAR_ARGS_NAME);
522:       assertEquals(49, Node.DIRECT_EVAL);
523:       assertEquals(37, Node.OPT_ARG_NAME);
524:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
525:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
526:       assertEquals(54, Node.SLASH_V);
527:       assertEquals(50, Node.FREE_CALL);
528:       assertEquals(1, Node.DECR_FLAG);
529:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
530:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
531:       assertEquals(4095, Node.COLUMN_MASK);
532:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
533:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
534:       assertEquals(43, Node.IS_CONSTANT_NAME);
535:       assertEquals(48, Node.DIRECTIVES);
536:       assertEquals(40, Node.ORIGINALNAME_PROP);
537:       assertEquals(52, Node.LENGTH);
538:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
539:       assertEquals(57, Node.REFLECTED_OBJECT);
540:       assertEquals(15, Node.NO_SIDE_EFFECTS);
541:       assertEquals(57, Node.LAST_PROP);
542:       assertEquals(36, Node.QUOTED_PROP);
543:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
544:       assertEquals(8, Node.FLAG_NO_THROWS);
545:       assertEquals(55, Node.INFERRED_FUNCTION);
546:       assertEquals(29, Node.JSDOC_INFO_PROP);
547:       assertEquals(39, Node.EMPTY_BLOCK);
548:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
549:       assertEquals(53, Node.INPUT_ID);
550:       
551:       // Undeclared exception!
552:       try { 
553:         node1.getAncestor((-1055));
554:         fail("Expecting exception: IllegalArgumentException");
555:       
556:       } catch(IllegalArgumentException e) {
557:          //
558:          // no message in exception (getMessage() returned null)
559:          //
560:          verifyException("com.google.common.base.Preconditions", e);
561:       }
562:   }
563: }
RegularFileObject[/tmp/EvoSuite_462_1628159851150/com/google/javascript/rhino/Node_462_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:37:31 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_462_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_462_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.common.collect.Sets$1",
101:       "com.google.javascript.rhino.SourcePosition",
102:       "com.google.common.collect.ImmutableMapKeySet",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.javascript.rhino.Node$AncestorIterable$1",
115:       "com.google.common.collect.Iterators$12",
116:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
117:       "com.google.common.collect.Iterators$11",
118:       "com.google.javascript.rhino.jstype.JSType$1",
119:       "com.google.common.collect.EmptyImmutableBiMap",
120:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
121:       "com.google.common.base.Predicate",
122:       "com.google.javascript.rhino.jstype.JSType$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.common.collect.SingletonImmutableSet",
135:       "com.google.javascript.rhino.jstype.NamedType",
136:       "com.google.common.collect.Iterators$13",
137:       "com.google.javascript.rhino.InputId",
138:       "com.google.common.collect.ImmutableList$SerializedForm",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
163:       "com.google.common.base.Joiner$MapJoiner",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.javascript.rhino.Node$AncestorIterable",
185:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
186:       "com.google.common.collect.Lists$RandomAccessListWrapper",
187:       "com.google.common.collect.ImmutableEnumSet",
188:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
189:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
190:       "com.google.javascript.rhino.jstype.EnumElementType",
191:       "com.google.javascript.rhino.jstype.UnionType",
192:       "com.google.common.base.Objects",
193:       "com.google.javascript.rhino.Node$NumberNode",
194:       "com.google.common.collect.SingletonImmutableList",
195:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
196:       "com.google.common.collect.ImmutableCollection$Builder",
197:       "com.google.javascript.rhino.jstype.StaticSlot",
198:       "com.google.common.collect.Iterators$6",
199:       "com.google.common.collect.BiMap",
200:       "com.google.common.collect.Iterators$7",
201:       "com.google.common.collect.AbstractSetMultimap",
202:       "com.google.common.base.Function",
203:       "com.google.common.collect.ImmutableSet",
204:       "com.google.common.collect.Lists$AbstractListWrapper",
205:       "com.google.common.collect.ImmutableMap",
206:       "com.google.common.collect.AbstractIndexedListIterator",
207:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
208:       "com.google.common.collect.Maps$1",
209:       "com.google.javascript.rhino.jstype.EnumType",
210:       "com.google.common.collect.Iterators$1",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$2",
213:       "com.google.javascript.rhino.jstype.NamespaceType",
214:       "com.google.common.collect.Iterators$3",
215:       "com.google.common.collect.Sets",
216:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
217:       "com.google.javascript.rhino.Node$ObjectPropListItem",
218:       "com.google.common.collect.Lists$StringAsImmutableList",
219:       "com.google.common.collect.Lists$2",
220:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
221:       "com.google.common.collect.ImmutableList$Builder",
222:       "com.google.common.collect.Lists$1",
223:       "com.google.javascript.rhino.jstype.StaticReference",
224:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
225:       "com.google.common.collect.Multiset",
226:       "com.google.common.collect.AbstractMultimap",
227:       "com.google.common.collect.Multimap",
228:       "com.google.common.collect.Iterators",
229:       "com.google.common.collect.EmptyImmutableSet",
230:       "com.google.common.collect.Maps$ImprovedAbstractMap",
231:       "com.google.common.collect.ImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
233:       "com.google.common.collect.ImmutableList",
234:       "com.google.common.collect.SingletonImmutableBiMap",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
236:       "com.google.javascript.rhino.jstype.StringType",
237:       "com.google.javascript.rhino.Node$AbstractPropListItem",
238:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
239:       "com.google.javascript.rhino.jstype.TemplatizedType",
240:       "com.google.javascript.rhino.jstype.Visitor",
241:       "com.google.javascript.rhino.jstype.NoResolvedType",
242:       "com.google.javascript.rhino.jstype.JSTypeNative",
243:       "com.google.javascript.rhino.jstype.AllType",
244:       "com.google.common.collect.Maps",
245:       "com.google.common.collect.SetMultimap",
246:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
247:       "com.google.common.collect.Maps$EntryTransformer",
248:       "com.google.javascript.rhino.JSTypeExpression",
249:       "com.google.common.collect.Iterators$MergingIterator"
250:     );
251:   } 
252: 
253:   private static void resetClasses() {
254:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_462_tmp__ESTest_scaffolding.class.getClassLoader()); 
255: 
256:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
257:       "com.google.javascript.rhino.Node",
258:       "com.google.javascript.rhino.Node$NumberNode",
259:       "com.google.javascript.rhino.Node$StringNode",
260:       "com.google.javascript.rhino.Node$AbstractPropListItem",
261:       "com.google.javascript.rhino.Node$ObjectPropListItem",
262:       "com.google.javascript.rhino.Node$IntPropListItem",
263:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
264:       "com.google.javascript.rhino.Node$AncestorIterable",
265:       "com.google.javascript.rhino.Node$NodeMismatch",
266:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
267:       "com.google.javascript.rhino.Node$SideEffectFlags",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Preconditions",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
301:       "com.google.javascript.rhino.jstype.JSType$1",
302:       "com.google.javascript.rhino.jstype.JSType",
303:       "com.google.javascript.rhino.jstype.ObjectType",
304:       "com.google.javascript.rhino.jstype.ProxyObjectType",
305:       "com.google.javascript.rhino.jstype.TemplateType",
306:       "com.google.javascript.rhino.jstype.ValueType",
307:       "com.google.javascript.rhino.jstype.BooleanType",
308:       "com.google.javascript.rhino.jstype.NullType",
309:       "com.google.javascript.rhino.jstype.NumberType",
310:       "com.google.javascript.rhino.jstype.StringType",
311:       "com.google.javascript.rhino.jstype.UnknownType",
312:       "com.google.javascript.rhino.jstype.VoidType",
313:       "com.google.javascript.rhino.jstype.AllType",
314:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
315:       "com.google.common.collect.ImmutableMap",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.collect.EmptyImmutableBiMap",
318:       "com.google.javascript.rhino.jstype.PropertyMap$1",
319:       "com.google.javascript.rhino.jstype.PropertyMap",
320:       "com.google.javascript.rhino.jstype.FunctionType",
321:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
322:       "com.google.javascript.rhino.Token",
323:       "com.google.javascript.rhino.jstype.ArrowType",
324:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
325:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
326:       "com.google.javascript.rhino.jstype.InstanceObjectType",
327:       "com.google.javascript.rhino.jstype.Property",
328:       "com.google.common.collect.Lists",
329:       "com.google.javascript.rhino.jstype.NoObjectType",
330:       "com.google.javascript.rhino.jstype.NoType",
331:       "com.google.javascript.rhino.jstype.NoResolvedType",
332:       "com.google.common.collect.SingletonImmutableList",
333:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
334:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
335:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
336:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
337:       "com.google.javascript.rhino.jstype.UnionType",
338:       "com.google.javascript.rhino.jstype.FunctionBuilder",
339:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.javascript.rhino.jstype.TernaryValue",
348:       "com.google.common.collect.Iterables",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.javascript.rhino.Node$AncestorIterable$1",
352:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
353:       "com.google.common.collect.Sets",
354:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
355:       "com.google.javascript.rhino.InputId",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
364:       "com.google.javascript.rhino.JSTypeExpression",
365:       "com.google.common.collect.Platform",
366:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
371:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.JSDocInfo$Marker",
374:       "com.google.common.collect.Iterators$12",
375:       "com.google.javascript.rhino.jstype.JSType$2",
376:       "com.google.common.collect.ImmutableList$1"
377:     );
378:   }
379: }

[MASTER] 10:37:31.189 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(951.13);
assertNotNull(node0);
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isParamList());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isFalse());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isParamList());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isFalse());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);

boolean boolean0 = node0.isOr();
assertFalse(boolean0);
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isParamList());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isFalse());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);

Node node1 = Node.newString(4, "");
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isScript());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isGetProp());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertTrue(node1.isReturn());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertEquals(4, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);

boolean boolean1 = node1.isCatch();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isScript());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isGetProp());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertTrue(node1.isReturn());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertEquals(4, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);

node1.getAncestor((-1055));

* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/default/tests/17
* Done!

* Computation finished
